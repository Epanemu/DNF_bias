Command:
python test_script.py -s linear_dependence -d 5 -n 50000 --seed 34 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30347999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.30347999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:22 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:22 PM: Finished problem compilation (took 7.109e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.23e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4640e-01  +7.1473e+02  7.14e+02  1.49e-01  6.24e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1133e-01  +1.7282e+02  1.72e+02  1.35e-01  5.64e+01  2.40e-05  2.33e-01  8.11e-02  
  4  +5.0043e-01  +5.9514e+00  5.45e+00  1.62e-02  6.64e+00  2.64e-06  1.77e-01  6.36e-01  
  5  +5.0005e-01  +1.7873e+00  1.29e+00  3.96e-03  1.65e+00  3.83e-05  1.13e-01  9.90e-01  
  6  +4.9996e-01  +7.8828e-01  2.88e-01  8.70e-04  3.65e-01  4.16e-05  1.27e-02  8.97e-01  
  7  +4.9889e-01  +7.9693e-01  2.98e-01  2.37e-04  1.01e-01  7.70e-04  6.98e-04  9.47e-01  
  8  +4.8803e-01  +8.1007e-01  3.22e-01  2.94e-05  1.26e-02  6.93e-03  7.97e-05  9.18e-01  
  9  +4.6946e-01  +7.5314e-01  2.84e-01  1.32e-05  5.62e-03  1.06e-02  3.64e-05  6.10e-01  
 10  +4.3952e-01  +5.7745e-01  1.38e-01  8.16e-06  3.43e-03  7.19e-05  2.72e-05  4.70e-01  
 11  +4.0708e-01  +4.3359e-01  2.65e-02  1.30e-06  5.47e-04  5.24e-06  5.12e-06  8.45e-01  
 12  +3.9838e-01  +3.9935e-01  9.74e-04  4.36e-08  1.83e-05  1.05e-07  1.96e-07  9.74e-01  
 13  +3.9808e-01  +3.9809e-01  9.73e-06  4.35e-10  1.83e-07  1.04e-09  1.96e-09  9.90e-01  
 14  +3.9808e-01  +3.9808e-01  9.74e-08  4.35e-12  1.83e-09  1.08e-11  2.03e-11  9.90e-01  
 15  +3.9808e-01  +3.9808e-01  9.75e-10  4.35e-14  1.83e-11  1.12e-13  2.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 238.6083ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:22 PM: Optimal value: 3.981e-01
(CVXPY) Sep 20 03:08:22 PM: Compilation took 7.109e-02 seconds
(CVXPY) Sep 20 03:08:22 PM: Solver (including time spent in interface) took 2.613e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3981
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:22 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:22 PM: Finished problem compilation (took 9.165e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 247675
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  2.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +5.0088e+03  5.01e+03  3.68e-01  1.30e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4636e-01  +7.1422e+02  7.14e+02  1.49e-01  6.60e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1130e-01  +1.7248e+02  1.72e+02  1.35e-01  5.97e+01  2.40e-05  2.32e-01  8.18e-02  
  4  +5.0039e-01  +5.4697e+00  4.97e+00  1.48e-02  6.43e+00  2.69e-06  1.72e-01  6.91e-01  
  5  +5.0007e-01  +1.9655e+00  1.47e+00  4.49e-03  1.98e+00  3.48e-05  9.78e-02  9.90e-01  
  6  +4.9998e-01  +1.0137e+00  5.14e-01  1.54e-03  6.85e-01  4.05e-05  1.85e-02  8.20e-01  
  7  +4.9903e-01  +1.0560e+00  5.57e-01  3.91e-04  1.78e-01  7.09e-04  1.05e-03  9.53e-01  
  8  +4.9040e-01  +1.0175e+00  5.27e-01  4.68e-05  2.14e-02  5.60e-03  1.16e-04  9.32e-01  
  9  +4.7851e-01  +9.6628e-01  4.88e-01  2.22e-05  1.01e-02  9.47e-03  5.53e-05  5.76e-01  
 10  +4.6570e-01  +8.9071e-01  4.25e-01  1.66e-05  7.55e-03  7.78e-03  4.21e-05  3.52e-01  
 11  +4.1269e-01  +5.8940e-01  1.77e-01  6.55e-06  2.95e-03  7.37e-05  1.88e-05  7.48e-01  
 12  +3.6250e-01  +3.9682e-01  3.43e-02  1.27e-06  5.63e-04  6.22e-07  4.32e-06  8.31e-01  
 13  +3.4872e-01  +3.4953e-01  8.09e-04  2.94e-08  1.31e-05  5.88e-09  1.08e-07  9.86e-01  
 14  +3.4836e-01  +3.4837e-01  8.08e-06  2.94e-10  1.31e-07  5.87e-11  1.08e-09  9.90e-01  
 15  +3.4836e-01  +3.4836e-01  8.08e-08  2.94e-12  1.31e-09  5.91e-13  1.09e-11  9.90e-01  
 16  +3.4836e-01  +3.4836e-01  8.08e-10  2.94e-14  1.31e-11  5.95e-15  1.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 306.8753ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:23 PM: Optimal value: 3.484e-01
(CVXPY) Sep 20 03:08:23 PM: Compilation took 9.165e-02 seconds
(CVXPY) Sep 20 03:08:23 PM: Solver (including time spent in interface) took 3.352e-01 seconds
FULL MODEL:
  Accruacy: 0.65174
  Our objective: 0.30347999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.30348)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.419576644897461
Best over terms:
  Our final objective: 0.30347999999999997
    Its accruacy: 0.65174
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30347999999999997
  Highest accruacy: 0.65174
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

