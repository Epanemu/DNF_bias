Command:
python test_script.py -s linear_dependence -d 2 -n 10000 --seed 34 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5856
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 2.

Computed total variation: 0.5856
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:07 PM: Your problem has 5005 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:07 PM: Finished problem compilation (took 1.067e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5005
  constraints   = 10005
  nnz(P)        = 0
  nnz(A)        = 25005
  cones (total) = 1
    : Nonnegative = 1,  numel = 10005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9994e-01  +5.0020e+03  5.00e+03  9.83e-01  7.29e+01  1.00e+00  1.00e+00   ------   
  1  +6.3731e-01  +8.7387e+02  8.73e+02  2.67e-01  3.44e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5852e-01  +1.6188e+02  1.61e+02  1.31e-01  1.96e+01  5.31e-03  2.13e-01  5.94e-01  
  3  +5.0114e-01  +6.9087e+00  6.41e+00  3.97e-02  5.59e+00  3.06e-04  2.06e-01  2.45e-01  
  4  +4.9931e-01  +2.0287e+00  1.53e+00  8.50e-03  1.27e+00  2.80e-04  3.37e-02  9.73e-01  
  5  +4.9305e-01  +2.4341e+00  1.94e+00  3.16e-03  5.08e-01  1.62e-03  6.93e-03  8.92e-01  
  6  +4.5711e-01  +2.1795e+00  1.72e+00  5.82e-04  9.42e-02  7.87e-03  1.20e-03  8.29e-01  
  7  +4.1768e-01  +1.8543e+00  1.44e+00  3.77e-04  6.05e-02  7.48e-03  8.03e-04  3.62e-01  
  8  +3.1647e-01  +1.0018e+00  6.85e-01  1.85e-04  2.83e-02  5.95e-05  4.84e-04  6.06e-01  
  9  +2.3093e-01  +3.7262e-01  1.42e-01  4.41e-05  6.45e-03  2.91e-07  2.05e-04  7.43e-01  
 10  +2.0856e-01  +2.1545e-01  6.89e-03  2.14e-06  3.11e-04  4.83e-08  1.32e-05  9.52e-01  
 11  +2.0731e-01  +2.0738e-01  6.94e-05  2.15e-08  3.13e-06  5.14e-10  1.37e-07  9.90e-01  
 12  +2.0730e-01  +2.0730e-01  6.94e-07  2.15e-10  3.13e-08  5.13e-12  1.37e-09  9.90e-01  
 13  +2.0730e-01  +2.0730e-01  6.94e-09  2.15e-12  3.13e-10  5.14e-14  1.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.9675ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:07 PM: Optimal value: 2.073e-01
(CVXPY) Sep 20 03:04:07 PM: Compilation took 1.067e-02 seconds
(CVXPY) Sep 20 03:04:07 PM: Solver (including time spent in interface) took 2.913e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.2073
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:07 PM: Your problem has 5006 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:07 PM: Finished problem compilation (took 1.228e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5006
  constraints   = 10006
  nnz(P)        = 0
  nnz(A)        = 27026
  cones (total) = 1
    : Nonnegative = 1,  numel = 10006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +5.0021e+03  5.00e+03  9.83e-01  7.56e+01  1.00e+00  1.00e+00   ------   
  1  +6.3727e-01  +8.7436e+02  8.74e+02  2.67e-01  3.57e+01  4.49e-03  3.89e-01  7.25e-01  
  2  +5.5852e-01  +1.6191e+02  1.61e+02  1.31e-01  2.03e+01  5.32e-03  2.14e-01  5.94e-01  
  3  +5.0115e-01  +6.9535e+00  6.45e+00  4.00e-02  5.83e+00  3.07e-04  2.06e-01  2.44e-01  
  4  +4.9966e-01  +2.9567e+00  2.46e+00  1.40e-02  2.15e+00  2.83e-04  5.79e-02  8.37e-01  
  5  +4.8636e-01  +3.8059e+00  3.32e+00  2.94e-03  4.92e-01  3.14e-03  6.16e-03  9.36e-01  
  6  +4.4626e-01  +3.1613e+00  2.72e+00  7.73e-04  1.30e-01  8.70e-03  1.59e-03  7.46e-01  
  7  +4.4492e-01  +3.0670e+00  2.62e+00  7.52e-04  1.26e-01  6.96e-03  1.56e-03  1.47e-01  
  8  +3.6058e-01  +1.4900e+00  1.13e+00  2.60e-04  4.25e-02  7.93e-05  5.89e-04  8.98e-01  
  9  +2.4206e-01  +4.5809e-01  2.16e-01  6.78e-05  1.03e-02  3.09e-07  2.89e-04  8.19e-01  
 10  +2.0979e-01  +2.2264e-01  1.29e-02  3.98e-06  6.01e-04  9.83e-08  2.37e-05  9.41e-01  
 11  +2.0733e-01  +2.0746e-01  1.33e-04  4.13e-08  6.23e-06  1.47e-09  2.64e-07  9.89e-01  
 12  +2.0730e-01  +2.0730e-01  1.33e-06  4.13e-10  6.22e-08  1.47e-11  2.64e-09  9.90e-01  
 13  +2.0730e-01  +2.0730e-01  1.33e-08  4.13e-12  6.22e-10  1.47e-13  2.64e-11  9.90e-01  
 14  +2.0730e-01  +2.0730e-01  1.33e-10  4.13e-14  6.23e-12  1.47e-15  2.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.3335ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:07 PM: Optimal value: 2.073e-01
(CVXPY) Sep 20 03:04:07 PM: Compilation took 1.228e-02 seconds
(CVXPY) Sep 20 03:04:07 PM: Solver (including time spent in interface) took 3.355e-02 seconds
Iteration: 2, Objective: 0.2073
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:07 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:07 PM: Finished problem compilation (took 1.010e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 28999
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +5.0021e+03  5.00e+03  9.83e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +6.2709e-01  +9.0185e+02  9.01e+02  2.88e-01  3.90e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5800e-01  +1.6258e+02  1.62e+02  1.33e-01  2.11e+01  6.02e-03  2.16e-01  6.33e-01  
  3  +5.0171e-01  +8.4997e+00  8.00e+00  4.80e-02  7.22e+00  3.08e-06  2.08e-01  2.34e-01  
  4  +4.9979e-01  +2.1387e+00  1.64e+00  9.88e-03  1.56e+00  2.35e-06  4.89e-02  8.16e-01  
  5  +4.7573e-01  +3.1257e+00  2.65e+00  1.30e-03  2.27e-01  6.95e-05  2.68e-03  9.90e-01  
  6  +4.2480e-01  +2.3246e+00  1.90e+00  4.58e-04  7.90e-02  1.07e-04  9.55e-04  6.60e-01  
  7  +3.4783e-01  +1.3593e+00  1.01e+00  3.12e-04  5.14e-02  2.65e-05  7.98e-04  7.68e-01  
  8  +2.6241e-01  +6.3105e-01  3.69e-01  1.07e-04  1.70e-02  6.58e-06  3.56e-04  6.44e-01  
  9  +2.1510e-01  +2.6822e-01  5.31e-02  1.64e-05  2.57e-03  1.48e-06  9.04e-05  8.44e-01  
 10  +2.0748e-01  +2.0856e-01  1.09e-03  3.37e-07  5.25e-05  2.33e-08  2.14e-06  9.82e-01  
 11  +2.0730e-01  +2.0731e-01  1.08e-05  3.36e-09  5.23e-07  2.33e-10  2.15e-08  9.90e-01  
 12  +2.0730e-01  +2.0730e-01  1.08e-07  3.36e-11  5.23e-09  2.33e-12  2.15e-10  9.90e-01  
 13  +2.0730e-01  +2.0730e-01  1.08e-09  3.36e-13  5.23e-11  2.33e-14  2.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.4624ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:07 PM: Optimal value: 2.073e-01
(CVXPY) Sep 20 03:04:07 PM: Compilation took 1.010e-02 seconds
(CVXPY) Sep 20 03:04:07 PM: Solver (including time spent in interface) took 2.987e-02 seconds
FULL MODEL:
  Accruacy: 0.7928
  Our objective: 0.5856

IF 
    (x0 = 0) <-- (term's our objective: 0.5856)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9879727363586426
Best over terms:
  Our final objective: 0.5856
    Its accruacy: 0.7928
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5856
  Highest accruacy: 0.7928
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

