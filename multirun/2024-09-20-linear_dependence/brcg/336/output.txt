Command:
python test_script.py -s linear_dependence -d 9 -n 500 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.688
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:05 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +2.5106e+02  2.51e+02  9.38e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8007e-01  +5.4670e+01  5.41e+01  4.07e-01  1.59e+01  3.78e-03  5.78e-01  5.86e-01  
  2  +5.2814e-01  +6.2575e+00  5.73e+00  1.27e-01  6.28e+00  1.69e-02  2.61e-01  9.78e-01  
  3  +5.0193e-01  +1.4077e+00  9.06e-01  2.84e-02  1.40e+00  3.97e-05  1.76e-01  9.12e-01  
  4  +4.9907e-01  +7.3935e-01  2.40e-01  7.21e-03  3.66e-01  2.47e-05  3.92e-02  8.24e-01  
  5  +4.8353e-01  +6.8362e-01  2.00e-01  1.70e-03  8.87e-02  1.28e-04  5.32e-03  8.85e-01  
  6  +4.7084e-01  +5.9607e-01  1.25e-01  8.93e-04  4.61e-02  7.99e-05  2.94e-03  4.97e-01  
  7  +4.5744e-01  +5.2582e-01  6.84e-02  3.79e-04  1.95e-02  4.86e-05  1.34e-03  7.10e-01  
  8  +4.4456e-01  +4.6729e-01  2.27e-02  1.06e-04  5.44e-03  1.65e-05  4.28e-04  9.90e-01  
  9  +4.3842e-01  +4.3930e-01  8.82e-04  3.73e-06  1.91e-04  6.07e-07  1.69e-05  9.88e-01  
 10  +4.3810e-01  +4.3811e-01  8.97e-06  3.76e-08  1.93e-06  6.19e-09  1.72e-07  9.90e-01  
 11  +4.3810e-01  +4.3810e-01  8.97e-08  3.76e-10  1.93e-08  6.19e-11  1.72e-09  9.90e-01  
 12  +4.3810e-01  +4.3810e-01  8.97e-10  3.76e-12  1.93e-10  6.20e-13  1.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1558ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:05 PM: Optimal value: 4.381e-01
(CVXPY) Sep 20 03:17:05 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 03:17:05 PM: Solver (including time spent in interface) took 2.527e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:05 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Finished problem compilation (took 7.662e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3486
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +2.5127e+02  2.51e+02  9.39e-01  2.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.7776e-01  +5.4703e+01  5.41e+01  4.10e-01  1.62e+01  3.78e-03  5.79e-01  5.87e-01  
  2  +5.2544e-01  +6.2499e+00  5.72e+00  1.25e-01  6.27e+00  1.73e-02  2.56e-01  9.90e-01  
  3  +5.0381e-01  +1.4315e+00  9.28e-01  3.19e-02  1.64e+00  1.09e-03  1.13e-01  9.14e-01  
  4  +4.9727e-01  +1.4262e+00  9.29e-01  1.42e-02  7.59e-01  2.41e-03  3.91e-02  7.51e-01  
  5  +4.7788e-01  +1.1371e+00  6.59e-01  4.82e-03  2.60e-01  3.36e-03  1.36e-02  6.64e-01  
  6  +4.5806e-01  +8.6556e-01  4.07e-01  2.64e-03  1.41e-01  1.55e-03  8.20e-03  5.16e-01  
  7  +4.3539e-01  +6.5049e-01  2.15e-01  1.19e-03  6.29e-02  6.03e-04  4.18e-03  6.14e-01  
  8  +4.2649e-01  +5.8073e-01  1.54e-01  8.07e-04  4.24e-02  3.85e-04  2.96e-03  3.91e-01  
  9  +4.1450e-01  +4.7724e-01  6.27e-02  3.30e-04  1.73e-02  4.84e-05  1.31e-03  9.90e-01  
 10  +4.0425e-01  +4.1415e-01  9.90e-03  5.17e-05  2.70e-03  6.13e-06  2.25e-04  8.57e-01  
 11  +4.0246e-01  +4.0357e-01  1.11e-03  5.85e-06  3.05e-04  4.40e-07  2.91e-05  8.95e-01  
 12  +4.0221e-01  +4.0224e-01  3.35e-05  1.78e-07  9.23e-06  1.47e-08  1.03e-06  9.86e-01  
 13  +4.0220e-01  +4.0220e-01  3.38e-07  1.79e-09  9.31e-08  1.47e-10  1.05e-08  9.90e-01  
 14  +4.0220e-01  +4.0220e-01  3.37e-09  1.79e-11  9.31e-10  1.47e-12  1.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6239ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:05 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 03:17:05 PM: Compilation took 7.662e-03 seconds
(CVXPY) Sep 20 03:17:05 PM: Solver (including time spent in interface) took 3.206e-03 seconds
Iteration: 2, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:05 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Finished problem compilation (took 3.027e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3933
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +2.5127e+02  2.51e+02  9.39e-01  2.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.7632e-01  +5.4810e+01  5.42e+01  4.14e-01  1.64e+01  3.78e-03  5.82e-01  5.85e-01  
  2  +5.2416e-01  +6.3347e+00  5.81e+00  1.27e-01  6.37e+00  1.77e-02  2.59e-01  9.90e-01  
  3  +5.0415e-01  +1.2411e+00  7.37e-01  2.52e-02  1.34e+00  9.13e-04  8.08e-02  9.51e-01  
  4  +5.0252e-01  +1.4020e+00  8.99e-01  1.68e-02  9.25e-01  1.73e-03  4.47e-02  5.63e-01  
  5  +4.8713e-01  +1.2789e+00  7.92e-01  5.54e-03  3.10e-01  3.38e-03  1.45e-02  7.43e-01  
  6  +4.6547e-01  +9.3505e-01  4.70e-01  2.97e-03  1.64e-01  1.13e-03  8.35e-03  5.98e-01  
  7  +4.5451e-01  +8.5635e-01  4.02e-01  2.28e-03  1.25e-01  7.15e-04  6.57e-03  4.83e-01  
  8  +4.3443e-01  +7.2385e-01  2.89e-01  1.41e-03  7.71e-02  5.16e-04  4.23e-03  3.94e-01  
  9  +3.9911e-01  +4.9062e-01  9.15e-02  4.18e-04  2.26e-02  4.50e-05  1.37e-03  9.90e-01  
 10  +3.8248e-01  +4.1634e-01  3.39e-02  1.46e-04  7.93e-03  2.70e-05  4.97e-04  8.40e-01  
 11  +3.7425e-01  +3.7992e-01  5.67e-03  2.41e-05  1.31e-03  4.91e-06  8.49e-05  8.83e-01  
 12  +3.7242e-01  +3.7265e-01  2.27e-04  9.60e-07  5.21e-05  2.08e-07  3.46e-06  9.73e-01  
 13  +3.7235e-01  +3.7235e-01  2.28e-06  9.65e-09  5.23e-07  2.09e-09  3.48e-08  9.90e-01  
 14  +3.7235e-01  +3.7235e-01  2.28e-08  9.65e-11  5.23e-09  2.09e-11  3.48e-10  9.90e-01  
 15  +3.7235e-01  +3.7235e-01  2.28e-10  9.65e-13  5.23e-11  2.09e-13  3.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3394ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:05 PM: Optimal value: 3.724e-01
(CVXPY) Sep 20 03:17:05 PM: Compilation took 3.027e-03 seconds
(CVXPY) Sep 20 03:17:05 PM: Solver (including time spent in interface) took 4.600e-03 seconds
Iteration: 3, Objective: 0.3724
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:05 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Finished problem compilation (took 3.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 4125
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9903e-01  +2.5139e+02  2.51e+02  9.40e-01  2.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7329e-01  +5.4870e+01  5.43e+01  4.16e-01  1.62e+01  3.78e-03  5.82e-01  5.85e-01  
  2  +5.2229e-01  +6.4425e+00  5.92e+00  1.27e-01  6.31e+00  1.80e-02  2.58e-01  9.90e-01  
  3  +5.0537e-01  +1.4705e+00  9.65e-01  2.92e-02  1.57e+00  2.32e-03  8.17e-02  8.08e-01  
  4  +5.0514e-01  +1.5304e+00  1.03e+00  2.48e-02  1.35e+00  2.88e-03  6.53e-02  2.53e-01  
  5  +5.0202e-01  +1.6111e+00  1.11e+00  2.19e-02  1.19e+00  2.37e-03  6.09e-02  3.65e-01  
  6  +4.8423e-01  +1.3996e+00  9.15e-01  6.01e-03  3.38e-01  5.90e-03  1.52e-02  7.64e-01  
  7  +4.6565e-01  +1.1770e+00  7.11e-01  3.98e-03  2.22e-01  4.23e-03  1.05e-02  3.93e-01  
  8  +4.4389e-01  +9.9026e-01  5.46e-01  2.55e-03  1.41e-01  3.02e-03  6.95e-03  4.34e-01  
  9  +4.0927e-01  +6.7032e-01  2.61e-01  1.37e-03  7.42e-02  2.41e-05  4.19e-03  7.46e-01  
 10  +3.6846e-01  +4.3708e-01  6.86e-02  3.12e-04  1.69e-02  2.32e-05  1.04e-03  8.21e-01  
 11  +3.5461e-01  +3.7545e-01  2.08e-02  9.28e-05  5.07e-03  1.29e-05  3.26e-04  8.14e-01  
 12  +3.4977e-01  +3.5405e-01  4.28e-03  1.90e-05  1.04e-03  2.89e-06  6.86e-05  8.22e-01  
 13  +3.4874e-01  +3.4935e-01  6.10e-04  2.70e-06  1.48e-04  4.43e-07  9.85e-06  8.81e-01  
 14  +3.4857e-01  +3.4864e-01  7.14e-05  3.16e-07  1.72e-05  5.48e-08  1.16e-06  9.04e-01  
 15  +3.4855e-01  +3.4855e-01  1.71e-06  7.54e-09  4.10e-07  1.42e-09  2.79e-08  9.83e-01  
 16  +3.4855e-01  +3.4855e-01  1.71e-08  7.54e-11  4.10e-09  1.42e-11  2.79e-10  9.90e-01  
 17  +3.4855e-01  +3.4855e-01  1.71e-10  7.54e-13  4.10e-11  1.43e-13  2.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9796ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:05 PM: Optimal value: 3.486e-01
(CVXPY) Sep 20 03:17:05 PM: Compilation took 3.993e-03 seconds
(CVXPY) Sep 20 03:17:05 PM: Solver (including time spent in interface) took 3.295e-03 seconds
Iteration: 4, Objective: 0.3486
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:05 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Finished problem compilation (took 5.688e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 4258
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +2.5162e+02  2.51e+02  9.40e-01  2.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.7058e-01  +5.4903e+01  5.43e+01  4.18e-01  1.60e+01  3.79e-03  5.81e-01  5.85e-01  
  2  +5.2036e-01  +6.5573e+00  6.04e+00  1.26e-01  6.22e+00  1.83e-02  2.55e-01  9.90e-01  
  3  +5.0489e-01  +1.4970e+00  9.92e-01  2.68e-02  1.45e+00  2.98e-03  7.12e-02  7.78e-01  
  4  +5.0465e-01  +1.5867e+00  1.08e+00  2.39e-02  1.31e+00  3.52e-03  6.09e-02  2.44e-01  
  5  +4.9991e-01  +1.9226e+00  1.42e+00  1.93e-02  1.07e+00  3.89e-03  4.79e-02  6.26e-01  
  6  +4.7532e-01  +1.5641e+00  1.09e+00  5.94e-03  3.36e-01  7.18e-03  1.46e-02  7.01e-01  
  7  +4.5181e-01  +1.3161e+00  8.64e-01  4.00e-03  2.25e-01  5.54e-03  1.02e-02  3.68e-01  
  8  +4.0848e-01  +8.2512e-01  4.17e-01  2.01e-03  1.11e-01  7.65e-04  5.67e-03  6.36e-01  
  9  +3.6030e-01  +4.9030e-01  1.30e-01  6.08e-04  3.29e-02  1.53e-04  1.93e-03  7.53e-01  
 10  +3.4246e-01  +4.0401e-01  6.16e-02  2.79e-04  1.53e-02  7.10e-05  9.26e-04  6.70e-01  
 11  +3.3187e-01  +3.5341e-01  2.15e-02  9.63e-05  5.27e-03  2.46e-05  3.31e-04  6.73e-01  
 12  +3.2757e-01  +3.3472e-01  7.15e-03  3.05e-05  1.67e-03  8.33e-06  1.08e-04  8.03e-01  
 13  +3.2528e-01  +3.2656e-01  1.29e-03  5.16e-06  2.84e-04  1.45e-06  1.93e-05  8.78e-01  
 14  +3.2481e-01  +3.2483e-01  2.29e-05  9.09e-08  5.00e-06  2.54e-08  3.43e-07  9.83e-01  
 15  +3.2480e-01  +3.2480e-01  2.29e-07  9.10e-10  5.00e-08  2.54e-10  3.43e-09  9.90e-01  
 16  +3.2480e-01  +3.2480e-01  2.29e-09  9.10e-12  5.00e-10  2.54e-12  3.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0051ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:05 PM: Optimal value: 3.248e-01
(CVXPY) Sep 20 03:17:05 PM: Compilation took 5.688e-03 seconds
(CVXPY) Sep 20 03:17:05 PM: Solver (including time spent in interface) took 4.002e-03 seconds
Iteration: 5, Objective: 0.3248
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:05 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Finished problem compilation (took 4.115e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 4405
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9892e-01  +2.5186e+02  2.51e+02  9.41e-01  2.58e+01  1.00e+00  1.02e+00   ------   
  1  +5.6784e-01  +5.4899e+01  5.43e+01  4.18e-01  1.58e+01  3.80e-03  5.80e-01  5.87e-01  
  2  +5.1880e-01  +6.6539e+00  6.14e+00  1.25e-01  6.08e+00  1.85e-02  2.51e-01  9.90e-01  
  3  +5.0389e-01  +1.5711e+00  1.07e+00  2.61e-02  1.42e+00  3.73e-03  6.71e-02  7.64e-01  
  4  +4.9162e-01  +1.8272e+00  1.34e+00  1.27e-02  7.11e-01  7.77e-03  3.04e-02  7.36e-01  
  5  +4.5523e-01  +1.4045e+00  9.49e-01  4.57e-03  2.58e-01  9.86e-03  1.13e-02  6.71e-01  
  6  +4.2977e-01  +1.1559e+00  7.26e-01  3.39e-03  1.89e-01  5.57e-03  8.72e-03  3.63e-01  
  7  +3.8101e-01  +7.1078e-01  3.30e-01  1.67e-03  9.03e-02  4.49e-05  4.95e-03  7.63e-01  
  8  +3.4496e-01  +5.1142e-01  1.66e-01  7.81e-04  4.18e-02  5.66e-05  2.53e-03  6.04e-01  
  9  +3.1578e-01  +3.6818e-01  5.24e-02  2.34e-04  1.25e-02  2.39e-05  8.33e-04  7.34e-01  
 10  +3.0282e-01  +3.1026e-01  7.44e-03  3.29e-05  1.75e-03  4.89e-06  1.26e-04  9.14e-01  
 11  +3.0058e-01  +3.0123e-01  6.46e-04  2.85e-06  1.52e-04  4.32e-07  1.12e-05  9.22e-01  
 12  +3.0037e-01  +3.0038e-01  1.05e-05  4.65e-08  2.47e-06  8.02e-09  1.84e-07  9.90e-01  
 13  +3.0037e-01  +3.0037e-01  1.05e-07  4.65e-10  2.47e-08  8.02e-11  1.84e-09  9.90e-01  
 14  +3.0037e-01  +3.0037e-01  1.05e-09  4.66e-12  2.47e-10  8.02e-13  1.84e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0669ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:05 PM: Optimal value: 3.004e-01
(CVXPY) Sep 20 03:17:05 PM: Compilation took 4.115e-03 seconds
(CVXPY) Sep 20 03:17:05 PM: Solver (including time spent in interface) took 4.407e-03 seconds
Iteration: 6, Objective: 0.3004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:05 PM: Your problem has 329 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:05 PM: Finished problem compilation (took 3.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 329
  constraints   = 579
  nnz(P)        = 0
  nnz(A)        = 4544
  cones (total) = 1
    : Nonnegative = 1,  numel = 579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9878e-01  +2.5184e+02  2.51e+02  9.42e-01  2.56e+01  1.00e+00  1.02e+00   ------   
  1  +5.6464e-01  +5.4900e+01  5.43e+01  4.19e-01  1.56e+01  3.81e-03  5.79e-01  5.87e-01  
  2  +5.1599e-01  +6.7700e+00  6.25e+00  1.24e-01  5.99e+00  1.88e-02  2.49e-01  9.90e-01  
  3  +5.0193e-01  +1.8813e+00  1.38e+00  2.95e-02  1.60e+00  5.37e-03  7.27e-02  7.27e-01  
  4  +4.7870e-01  +1.7991e+00  1.32e+00  1.06e-02  6.00e-01  1.10e-02  2.53e-02  7.20e-01  
  5  +4.4607e-01  +1.3881e+00  9.42e-01  5.64e-03  3.15e-01  7.75e-03  1.42e-02  5.38e-01  
  6  +4.1429e-01  +1.1163e+00  7.02e-01  3.47e-03  1.92e-01  5.03e-03  9.08e-03  4.80e-01  
  7  +3.5780e-01  +6.3641e-01  2.79e-01  1.39e-03  7.47e-02  4.19e-04  4.16e-03  7.31e-01  
  8  +3.2359e-01  +4.6955e-01  1.46e-01  6.82e-04  3.66e-02  1.86e-04  2.23e-03  6.66e-01  
  9  +3.0490e-01  +3.8147e-01  7.66e-02  3.46e-04  1.86e-02  9.52e-05  1.20e-03  4.98e-01  
 10  +2.9230e-01  +3.2510e-01  3.28e-02  1.44e-04  7.77e-03  3.88e-05  5.34e-04  6.42e-01  
 11  +2.8299e-01  +2.8515e-01  2.15e-03  9.32e-06  4.99e-04  2.07e-06  3.69e-05  9.62e-01  
 12  +2.8228e-01  +2.8236e-01  8.16e-05  3.53e-07  1.89e-05  7.13e-08  1.43e-06  9.65e-01  
 13  +2.8225e-01  +2.8225e-01  8.22e-07  3.56e-09  1.90e-07  7.17e-10  1.44e-08  9.90e-01  
 14  +2.8225e-01  +2.8225e-01  8.23e-09  3.56e-11  1.90e-09  7.17e-12  1.44e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.7871ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:05 PM: Optimal value: 2.823e-01
(CVXPY) Sep 20 03:17:05 PM: Compilation took 3.992e-03 seconds
(CVXPY) Sep 20 03:17:05 PM: Solver (including time spent in interface) took 5.323e-03 seconds
Iteration: 7, Objective: 0.2823
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:06 PM: Your problem has 339 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Finished problem compilation (took 4.914e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 339
  constraints   = 589
  nnz(P)        = 0
  nnz(A)        = 4661
  cones (total) = 1
    : Nonnegative = 1,  numel = 589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5175e+02  2.51e+02  9.42e-01  2.55e+01  1.00e+00  1.02e+00   ------   
  1  +5.6117e-01  +5.5002e+01  5.44e+01  4.21e-01  1.54e+01  3.82e-03  5.78e-01  5.86e-01  
  2  +5.1387e-01  +6.8604e+00  6.35e+00  1.24e-01  5.93e+00  1.92e-02  2.48e-01  9.90e-01  
  3  +4.9992e-01  +1.9293e+00  1.43e+00  2.85e-02  1.55e+00  5.93e-03  6.95e-02  7.34e-01  
  4  +4.7382e-01  +1.7982e+00  1.32e+00  1.07e-02  6.03e-01  1.12e-02  2.55e-02  6.93e-01  
  5  +4.3423e-01  +1.4299e+00  9.96e-01  5.44e-03  3.03e-01  9.85e-03  1.36e-02  5.40e-01  
  6  +3.9221e-01  +9.9986e-01  6.08e-01  3.12e-03  1.70e-01  3.16e-03  8.36e-03  5.61e-01  
  7  +3.3566e-01  +5.9058e-01  2.55e-01  1.27e-03  6.75e-02  7.71e-04  3.89e-03  6.23e-01  
  8  +2.9796e-01  +4.0220e-01  1.04e-01  4.89e-04  2.61e-02  2.33e-04  1.68e-03  7.15e-01  
  9  +2.8525e-01  +3.4722e-01  6.20e-02  2.80e-04  1.52e-02  1.23e-04  1.01e-03  5.38e-01  
 10  +2.7039e-01  +2.8258e-01  1.22e-02  5.42e-05  2.94e-03  1.92e-05  2.12e-04  8.46e-01  
 11  +2.6671e-01  +2.6720e-01  4.88e-04  2.17e-06  1.17e-04  6.71e-07  8.77e-06  9.61e-01  
 12  +2.6655e-01  +2.6656e-01  6.26e-06  2.79e-08  1.51e-06  8.22e-09  1.13e-07  9.88e-01  
 13  +2.6655e-01  +2.6655e-01  6.26e-08  2.79e-10  1.51e-08  8.22e-11  1.13e-09  9.90e-01  
 14  +2.6655e-01  +2.6655e-01  6.27e-10  2.79e-12  1.51e-10  8.22e-13  1.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.3137ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:06 PM: Optimal value: 2.666e-01
(CVXPY) Sep 20 03:17:06 PM: Compilation took 4.914e-03 seconds
(CVXPY) Sep 20 03:17:06 PM: Solver (including time spent in interface) took 4.941e-03 seconds
Iteration: 8, Objective: 0.2666
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:06 PM: Your problem has 349 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Finished problem compilation (took 4.737e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 349
  constraints   = 599
  nnz(P)        = 0
  nnz(A)        = 4739
  cones (total) = 1
    : Nonnegative = 1,  numel = 599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9860e-01  +2.5169e+02  2.51e+02  9.43e-01  2.53e+01  1.00e+00  1.02e+00   ------   
  1  +5.5812e-01  +5.5054e+01  5.45e+01  4.22e-01  1.53e+01  3.83e-03  5.78e-01  5.86e-01  
  2  +5.1187e-01  +6.9520e+00  6.44e+00  1.23e-01  5.83e+00  1.94e-02  2.46e-01  9.90e-01  
  3  +4.9719e-01  +1.8616e+00  1.36e+00  2.53e-02  1.37e+00  6.18e-03  6.14e-02  7.67e-01  
  4  +4.6513e-01  +1.6942e+00  1.23e+00  9.32e-03  5.20e-01  1.14e-02  2.22e-02  6.98e-01  
  5  +4.2689e-01  +1.4130e+00  9.86e-01  5.28e-03  2.91e-01  1.06e-02  1.31e-02  4.65e-01  
  6  +3.6643e-01  +8.1111e-01  4.45e-01  2.27e-03  1.21e-01  1.01e-04  6.32e-03  7.87e-01  
  7  +3.1781e-01  +5.4747e-01  2.30e-01  1.14e-03  6.01e-02  1.49e-04  3.61e-03  7.05e-01  
  8  +2.8327e-01  +3.5924e-01  7.60e-02  3.63e-04  1.92e-02  5.12e-05  1.28e-03  7.04e-01  
  9  +2.7660e-01  +3.2994e-01  5.33e-02  2.50e-04  1.33e-02  3.99e-05  8.98e-04  4.52e-01  
 10  +2.6325e-01  +2.7120e-01  7.95e-03  3.64e-05  1.95e-03  6.01e-06  1.42e-04  9.01e-01  
 11  +2.6081e-01  +2.6124e-01  4.36e-04  1.99e-06  1.06e-04  2.99e-07  8.07e-06  9.57e-01  
 12  +2.6065e-01  +2.6066e-01  5.41e-06  2.47e-08  1.32e-06  3.65e-09  1.02e-07  9.90e-01  
 13  +2.6065e-01  +2.6065e-01  5.41e-08  2.47e-10  1.32e-08  3.65e-11  1.02e-09  9.90e-01  
 14  +2.6065e-01  +2.6065e-01  5.41e-10  2.47e-12  1.32e-10  3.66e-13  1.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7091ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:06 PM: Optimal value: 2.607e-01
(CVXPY) Sep 20 03:17:06 PM: Compilation took 4.737e-03 seconds
(CVXPY) Sep 20 03:17:06 PM: Solver (including time spent in interface) took 6.456e-03 seconds
Iteration: 9, Objective: 0.2607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:06 PM: Your problem has 359 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Finished problem compilation (took 7.864e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 359
  constraints   = 609
  nnz(P)        = 0
  nnz(A)        = 4844
  cones (total) = 1
    : Nonnegative = 1,  numel = 609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9855e-01  +2.5178e+02  2.51e+02  9.43e-01  2.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.5627e-01  +5.5071e+01  5.45e+01  4.23e-01  1.51e+01  3.83e-03  5.77e-01  5.86e-01  
  2  +5.1073e-01  +6.9917e+00  6.48e+00  1.22e-01  5.74e+00  1.95e-02  2.45e-01  9.90e-01  
  3  +4.9629e-01  +2.0410e+00  1.54e+00  2.77e-02  1.48e+00  6.82e-03  6.67e-02  7.45e-01  
  4  +4.6088e-01  +1.7463e+00  1.29e+00  9.60e-03  5.32e-01  1.16e-02  2.30e-02  7.08e-01  
  5  +4.1930e-01  +1.4710e+00  1.05e+00  5.38e-03  2.95e-01  1.13e-02  1.34e-02  4.80e-01  
  6  +3.7006e-01  +9.2968e-01  5.60e-01  2.81e-03  1.50e-01  2.01e-03  7.68e-03  6.40e-01  
  7  +3.1338e-01  +5.3711e-01  2.24e-01  1.10e-03  5.75e-02  4.90e-04  3.45e-03  6.80e-01  
  8  +2.8329e-01  +3.8863e-01  1.05e-01  4.95e-04  2.60e-02  2.02e-04  1.69e-03  6.17e-01  
  9  +2.7218e-01  +3.3714e-01  6.50e-02  2.95e-04  1.57e-02  1.08e-04  1.04e-03  6.07e-01  
 10  +2.5802e-01  +2.7442e-01  1.64e-02  7.33e-05  3.89e-03  2.46e-05  2.80e-04  7.63e-01  
 11  +2.5326e-01  +2.5416e-01  9.00e-04  4.02e-06  2.12e-04  1.10e-06  1.61e-05  9.46e-01  
 12  +2.5295e-01  +2.5297e-01  1.30e-05  5.81e-08  3.06e-06  1.27e-08  2.38e-07  9.89e-01  
 13  +2.5295e-01  +2.5295e-01  1.30e-07  5.81e-10  3.06e-08  1.27e-10  2.38e-09  9.90e-01  
 14  +2.5295e-01  +2.5295e-01  1.30e-09  5.81e-12  3.06e-10  1.27e-12  2.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.94ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:06 PM: Optimal value: 2.530e-01
(CVXPY) Sep 20 03:17:06 PM: Compilation took 7.864e-03 seconds
(CVXPY) Sep 20 03:17:06 PM: Solver (including time spent in interface) took 1.006e-02 seconds
Iteration: 10, Objective: 0.2530
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:06 PM: Your problem has 369 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Finished problem compilation (took 4.516e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 369
  constraints   = 619
  nnz(P)        = 0
  nnz(A)        = 4934
  cones (total) = 1
    : Nonnegative = 1,  numel = 619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9845e-01  +2.5173e+02  2.51e+02  9.43e-01  2.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.5275e-01  +5.5143e+01  5.46e+01  4.24e-01  1.49e+01  3.84e-03  5.77e-01  5.86e-01  
  2  +5.0767e-01  +7.1330e+00  6.63e+00  1.21e-01  5.65e+00  2.00e-02  2.43e-01  9.90e-01  
  3  +4.9170e-01  +2.1379e+00  1.65e+00  2.66e-02  1.42e+00  7.76e-03  6.36e-02  7.59e-01  
  4  +4.4922e-01  +1.7244e+00  1.28e+00  9.15e-03  5.02e-01  1.18e-02  2.21e-02  7.01e-01  
  5  +4.0576e-01  +1.4696e+00  1.06e+00  5.37e-03  2.93e-01  1.14e-02  1.34e-02  4.61e-01  
  6  +3.5777e-01  +8.4443e-01  4.87e-01  2.76e-03  1.45e-01  9.06e-05  7.76e-03  6.94e-01  
  7  +2.9542e-01  +4.7466e-01  1.79e-01  9.09e-04  4.73e-02  7.78e-05  2.89e-03  7.51e-01  
  8  +2.6983e-01  +3.5774e-01  8.79e-02  4.22e-04  2.23e-02  5.10e-05  1.43e-03  6.23e-01  
  9  +2.6241e-01  +3.2638e-01  6.40e-02  2.99e-04  1.60e-02  4.59e-05  1.02e-03  5.01e-01  
 10  +2.4911e-01  +2.7012e-01  2.10e-02  9.40e-05  5.11e-03  1.65e-05  3.31e-04  7.11e-01  
 11  +2.4712e-01  +2.6315e-01  1.60e-02  7.05e-05  3.89e-03  1.31e-05  2.48e-04  4.02e-01  
 12  +2.4268e-01  +2.4643e-01  3.75e-03  1.62e-05  9.01e-04  3.02e-06  5.76e-05  7.90e-01  
 13  +2.4149e-01  +2.4186e-01  3.71e-04  1.60e-06  8.89e-05  2.77e-07  5.87e-06  9.00e-01  
 14  +2.4136e-01  +2.4137e-01  1.59e-05  6.90e-08  3.82e-06  1.35e-08  2.55e-07  9.73e-01  
 15  +2.4135e-01  +2.4135e-01  1.60e-07  6.91e-10  3.83e-08  1.35e-10  2.55e-09  9.90e-01  
 16  +2.4135e-01  +2.4135e-01  1.60e-09  6.91e-12  3.83e-10  1.35e-12  2.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1012ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:06 PM: Optimal value: 2.414e-01
(CVXPY) Sep 20 03:17:06 PM: Compilation took 4.516e-03 seconds
(CVXPY) Sep 20 03:17:06 PM: Solver (including time spent in interface) took 7.242e-03 seconds
Iteration: 11, Objective: 0.2414
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:06 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Finished problem compilation (took 3.076e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 5017
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9845e-01  +2.5180e+02  2.51e+02  9.44e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.5124e-01  +5.5178e+01  5.46e+01  4.25e-01  1.48e+01  3.85e-03  5.77e-01  5.86e-01  
  2  +5.0644e-01  +7.1747e+00  6.67e+00  1.21e-01  5.56e+00  2.01e-02  2.42e-01  9.90e-01  
  3  +4.8972e-01  +2.2139e+00  1.72e+00  2.68e-02  1.42e+00  8.22e-03  6.40e-02  7.56e-01  
  4  +4.4024e-01  +1.7009e+00  1.26e+00  8.47e-03  4.61e-01  1.23e-02  2.05e-02  7.26e-01  
  5  +4.0122e-01  +1.4581e+00  1.06e+00  5.40e-03  2.92e-01  1.11e-02  1.35e-02  4.08e-01  
  6  +3.5642e-01  +8.6347e-01  5.07e-01  2.93e-03  1.53e-01  8.84e-05  8.24e-03  6.93e-01  
  7  +2.9694e-01  +5.0450e-01  2.08e-01  1.07e-03  5.51e-02  7.64e-05  3.34e-03  6.98e-01  
  8  +2.6597e-01  +3.6302e-01  9.70e-02  4.64e-04  2.44e-02  5.27e-05  1.55e-03  6.55e-01  
  9  +2.5704e-01  +3.2659e-01  6.96e-02  3.20e-04  1.71e-02  4.77e-05  1.09e-03  4.90e-01  
 10  +2.4062e-01  +2.5672e-01  1.61e-02  7.21e-05  3.85e-03  1.10e-05  2.64e-04  7.85e-01  
 11  +2.3601e-01  +2.3762e-01  1.61e-03  7.23e-06  3.84e-04  1.02e-06  2.76e-05  9.03e-01  
 12  +2.3549e-01  +2.3559e-01  9.85e-05  4.43e-07  2.33e-05  6.49e-08  1.76e-06  9.54e-01  
 13  +2.3545e-01  +2.3545e-01  9.98e-07  4.48e-09  2.36e-07  6.57e-10  1.79e-08  9.90e-01  
 14  +2.3545e-01  +2.3545e-01  1.00e-08  4.49e-11  2.37e-09  6.58e-12  1.79e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.0853ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:06 PM: Optimal value: 2.355e-01
(CVXPY) Sep 20 03:17:06 PM: Compilation took 3.076e-03 seconds
(CVXPY) Sep 20 03:17:06 PM: Solver (including time spent in interface) took 7.530e-03 seconds
Iteration: 12, Objective: 0.2355
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:06 PM: Your problem has 389 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Finished problem compilation (took 3.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 389
  constraints   = 639
  nnz(P)        = 0
  nnz(A)        = 5079
  cones (total) = 1
    : Nonnegative = 1,  numel = 639

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9842e-01  +2.5179e+02  2.51e+02  9.44e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.4897e-01  +5.5194e+01  5.46e+01  4.25e-01  1.46e+01  3.85e-03  5.76e-01  5.86e-01  
  2  +5.0458e-01  +7.2136e+00  6.71e+00  1.20e-01  5.47e+00  2.02e-02  2.41e-01  9.90e-01  
  3  +4.8665e-01  +2.2127e+00  1.73e+00  2.56e-02  1.35e+00  8.47e-03  6.13e-02  7.68e-01  
  4  +4.3168e-01  +1.6152e+00  1.18e+00  7.81e-03  4.21e-01  1.17e-02  1.91e-02  7.38e-01  
  5  +3.9397e-01  +1.4083e+00  1.01e+00  5.17e-03  2.77e-01  1.08e-02  1.30e-02  3.82e-01  
  6  +3.4926e-01  +8.3258e-01  4.83e-01  2.82e-03  1.46e-01  1.83e-04  7.97e-03  6.69e-01  
  7  +2.9321e-01  +5.1168e-01  2.18e-01  1.15e-03  5.91e-02  1.09e-04  3.58e-03  6.63e-01  
  8  +2.5932e-01  +3.5218e-01  9.29e-02  4.52e-04  2.37e-02  6.23e-05  1.51e-03  7.09e-01  
  9  +2.4962e-01  +3.1403e-01  6.44e-02  2.96e-04  1.58e-02  5.12e-05  1.01e-03  5.50e-01  
 10  +2.3259e-01  +2.4082e-01  8.22e-03  3.73e-05  1.98e-03  7.60e-06  1.37e-04  9.89e-01  
 11  +2.2993e-01  +2.3068e-01  7.46e-04  3.40e-06  1.80e-04  6.02e-07  1.30e-05  9.11e-01  
 12  +2.2966e-01  +2.2968e-01  1.81e-05  8.28e-08  4.37e-06  1.40e-08  3.22e-07  9.79e-01  
 13  +2.2965e-01  +2.2965e-01  1.81e-07  8.28e-10  4.37e-08  1.40e-10  3.23e-09  9.90e-01  
 14  +2.2965e-01  +2.2965e-01  1.81e-09  8.29e-12  4.37e-10  1.40e-12  3.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8831ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:06 PM: Optimal value: 2.297e-01
(CVXPY) Sep 20 03:17:06 PM: Compilation took 3.508e-03 seconds
(CVXPY) Sep 20 03:17:06 PM: Solver (including time spent in interface) took 6.012e-03 seconds
Iteration: 13, Objective: 0.2297
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:06 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Finished problem compilation (took 3.692e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 5123
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9829e-01  +2.5191e+02  2.51e+02  9.45e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.4419e-01  +5.5298e+01  5.48e+01  4.26e-01  1.44e+01  3.86e-03  5.75e-01  5.86e-01  
  2  +5.0081e-01  +7.3716e+00  6.87e+00  1.19e-01  5.40e+00  2.07e-02  2.38e-01  9.90e-01  
  3  +4.8004e-01  +2.3243e+00  1.84e+00  2.50e-02  1.32e+00  9.42e-03  5.95e-02  7.71e-01  
  4  +4.3321e-01  +1.8299e+00  1.40e+00  1.03e-02  5.49e-01  1.14e-02  2.49e-02  6.25e-01  
  5  +3.8896e-01  +1.4948e+00  1.11e+00  6.04e-03  3.21e-01  1.02e-02  1.52e-02  4.33e-01  
  6  +3.3024e-01  +8.0561e-01  4.75e-01  2.70e-03  1.38e-01  8.81e-05  7.65e-03  8.02e-01  
  7  +2.7672e-01  +4.6571e-01  1.89e-01  1.01e-03  5.13e-02  7.57e-05  3.20e-03  7.01e-01  
  8  +2.5042e-01  +3.4374e-01  9.33e-02  4.64e-04  2.42e-02  5.31e-05  1.55e-03  6.42e-01  
  9  +2.4189e-01  +3.0919e-01  6.73e-02  3.16e-04  1.69e-02  4.88e-05  1.08e-03  5.40e-01  
 10  +2.2611e-01  +2.4180e-01  1.57e-02  7.10e-05  3.80e-03  1.26e-05  2.60e-04  8.51e-01  
 11  +2.2146e-01  +2.2301e-01  1.55e-03  7.00e-06  3.73e-04  1.11e-06  2.69e-05  9.13e-01  
 12  +2.2093e-01  +2.2099e-01  6.59e-05  3.00e-07  1.59e-05  5.31e-08  1.19e-06  9.87e-01  
 13  +2.2090e-01  +2.2090e-01  6.65e-07  3.03e-09  1.61e-07  5.35e-10  1.20e-08  9.90e-01  
 14  +2.2090e-01  +2.2090e-01  6.66e-09  3.03e-11  1.61e-09  5.35e-12  1.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.4649ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:06 PM: Optimal value: 2.209e-01
(CVXPY) Sep 20 03:17:06 PM: Compilation took 3.692e-03 seconds
(CVXPY) Sep 20 03:17:06 PM: Solver (including time spent in interface) took 7.714e-03 seconds
Iteration: 14, Objective: 0.2209
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:06 PM: Your problem has 407 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Finished problem compilation (took 4.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 407
  constraints   = 657
  nnz(P)        = 0
  nnz(A)        = 5214
  cones (total) = 1
    : Nonnegative = 1,  numel = 657

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9824e-01  +2.5206e+02  2.52e+02  9.45e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.4097e-01  +5.5402e+01  5.49e+01  4.25e-01  1.43e+01  3.88e-03  5.74e-01  5.86e-01  
  2  +4.9883e-01  +7.4431e+00  6.94e+00  1.18e-01  5.28e+00  2.09e-02  2.36e-01  9.90e-01  
  3  +4.7553e-01  +2.2787e+00  1.80e+00  2.33e-02  1.22e+00  9.60e-03  5.54e-02  7.88e-01  
  4  +4.2995e-01  +1.8515e+00  1.42e+00  1.06e-02  5.63e-01  1.09e-02  2.60e-02  5.91e-01  
  5  +3.8620e-01  +1.5143e+00  1.13e+00  6.28e-03  3.31e-01  9.65e-03  1.59e-02  4.40e-01  
  6  +3.2226e-01  +7.8428e-01  4.62e-01  2.59e-03  1.32e-01  8.60e-05  7.35e-03  8.35e-01  
  7  +2.6640e-01  +4.3413e-01  1.68e-01  8.88e-04  4.49e-02  7.48e-05  2.85e-03  7.41e-01  
  8  +2.4483e-01  +3.3662e-01  9.18e-02  4.59e-04  2.37e-02  5.05e-05  1.52e-03  5.54e-01  
  9  +2.3511e-01  +2.9563e-01  6.05e-02  2.88e-04  1.53e-02  4.03e-05  9.71e-04  5.06e-01  
 10  +2.2394e-01  +2.4971e-01  2.58e-02  1.16e-04  6.30e-03  1.87e-05  4.07e-04  6.31e-01  
 11  +2.1676e-01  +2.2056e-01  3.80e-03  1.70e-05  9.19e-04  3.63e-06  6.19e-05  9.90e-01  
 12  +2.1529e-01  +2.1550e-01  2.10e-04  9.46e-07  5.08e-05  1.66e-07  3.56e-06  9.50e-01  
 13  +2.1520e-01  +2.1520e-01  2.81e-06  1.26e-08  6.79e-07  2.27e-09  4.80e-08  9.89e-01  
 14  +2.1520e-01  +2.1520e-01  2.81e-08  1.27e-10  6.81e-09  2.28e-11  4.81e-10  9.90e-01  
 15  +2.1520e-01  +2.1520e-01  2.82e-10  1.27e-12  6.82e-11  2.28e-13  4.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.4958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:06 PM: Optimal value: 2.152e-01
(CVXPY) Sep 20 03:17:06 PM: Compilation took 4.003e-03 seconds
(CVXPY) Sep 20 03:17:06 PM: Solver (including time spent in interface) took 8.219e-03 seconds
Iteration: 15, Objective: 0.2152
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:06 PM: Your problem has 415 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:06 PM: Finished problem compilation (took 3.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 415
  constraints   = 665
  nnz(P)        = 0
  nnz(A)        = 5253
  cones (total) = 1
    : Nonnegative = 1,  numel = 665

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9817e-01  +2.5218e+02  2.52e+02  9.45e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.3793e-01  +5.5502e+01  5.50e+01  4.26e-01  1.42e+01  3.89e-03  5.74e-01  5.85e-01  
  2  +4.9664e-01  +7.5325e+00  7.04e+00  1.17e-01  5.24e+00  2.11e-02  2.35e-01  9.90e-01  
  3  +4.7134e-01  +2.2671e+00  1.80e+00  2.23e-02  1.16e+00  9.85e-03  5.28e-02  7.98e-01  
  4  +4.1821e-01  +1.8098e+00  1.39e+00  9.82e-03  5.17e-01  1.06e-02  2.41e-02  6.27e-01  
  5  +3.8116e-01  +1.4827e+00  1.10e+00  6.37e-03  3.33e-01  7.79e-03  1.62e-02  4.32e-01  
  6  +3.1258e-01  +7.2487e-01  4.12e-01  2.31e-03  1.17e-01  7.19e-05  6.62e-03  8.54e-01  
  7  +2.6012e-01  +4.2788e-01  1.68e-01  8.89e-04  4.50e-02  7.36e-05  2.85e-03  7.08e-01  
  8  +2.3748e-01  +3.2744e-01  9.00e-02  4.45e-04  2.32e-02  4.79e-05  1.49e-03  5.51e-01  
  9  +2.2448e-01  +2.7314e-01  4.87e-02  2.30e-04  1.22e-02  2.89e-05  8.02e-04  5.33e-01  
 10  +2.1288e-01  +2.2393e-01  1.11e-02  5.14e-05  2.73e-03  7.29e-06  1.90e-04  8.23e-01  
 11  +2.0954e-01  +2.1045e-01  9.19e-04  4.30e-06  2.26e-04  5.14e-07  1.66e-05  9.17e-01  
 12  +2.0921e-01  +2.0924e-01  3.23e-05  1.52e-07  7.95e-06  1.95e-08  6.00e-07  9.72e-01  
 13  +2.0920e-01  +2.0920e-01  3.23e-07  1.52e-09  7.97e-08  1.96e-10  6.02e-09  9.90e-01  
 14  +2.0920e-01  +2.0920e-01  3.24e-09  1.52e-11  7.97e-10  1.96e-12  6.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6124ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:06 PM: Optimal value: 2.092e-01
(CVXPY) Sep 20 03:17:06 PM: Compilation took 3.507e-03 seconds
(CVXPY) Sep 20 03:17:06 PM: Solver (including time spent in interface) took 1.010e-02 seconds
Iteration: 16, Objective: 0.2092
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:07 PM: Your problem has 425 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Finished problem compilation (took 3.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 425
  constraints   = 675
  nnz(P)        = 0
  nnz(A)        = 5313
  cones (total) = 1
    : Nonnegative = 1,  numel = 675

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9796e-01  +2.5224e+02  2.52e+02  9.46e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.3213e-01  +5.5627e+01  5.51e+01  4.27e-01  1.41e+01  3.90e-03  5.74e-01  5.85e-01  
  2  +4.9049e-01  +7.7664e+00  7.28e+00  1.16e-01  5.18e+00  2.18e-02  2.32e-01  9.90e-01  
  3  +4.5740e-01  +2.3366e+00  1.88e+00  2.08e-02  1.09e+00  1.10e-02  4.92e-02  8.12e-01  
  4  +3.9643e-01  +1.9567e+00  1.56e+00  1.00e-02  5.24e-01  1.20e-02  2.46e-02  5.98e-01  
  5  +3.4987e-01  +1.2850e+00  9.35e-01  5.51e-03  2.83e-01  4.15e-03  1.44e-02  6.10e-01  
  6  +2.8477e-01  +5.8361e-01  2.99e-01  1.72e-03  8.56e-02  7.22e-04  5.10e-03  7.25e-01  
  7  +2.5162e-01  +4.2380e-01  1.72e-01  9.38e-04  4.73e-02  3.67e-04  2.97e-03  5.73e-01  
  8  +2.3150e-01  +3.2626e-01  9.48e-02  4.85e-04  2.50e-02  1.98e-04  1.61e-03  5.16e-01  
  9  +2.2017e-01  +2.7609e-01  5.59e-02  2.75e-04  1.44e-02  1.03e-04  9.51e-04  5.34e-01  
 10  +2.0682e-01  +2.1758e-01  1.08e-02  5.12e-05  2.68e-03  1.49e-05  1.90e-04  8.76e-01  
 11  +2.0359e-01  +2.0438e-01  7.89e-04  3.77e-06  1.96e-04  7.83e-07  1.49e-05  9.27e-01  
 12  +2.0331e-01  +2.0333e-01  2.37e-05  1.14e-07  5.86e-06  2.17e-08  4.65e-07  9.73e-01  
 13  +2.0330e-01  +2.0330e-01  2.37e-07  1.14e-09  5.86e-08  2.17e-10  4.66e-09  9.90e-01  
 14  +2.0330e-01  +2.0330e-01  2.37e-09  1.14e-11  5.87e-10  2.17e-12  4.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.151ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:07 PM: Optimal value: 2.033e-01
(CVXPY) Sep 20 03:17:07 PM: Compilation took 3.994e-03 seconds
(CVXPY) Sep 20 03:17:07 PM: Solver (including time spent in interface) took 7.529e-03 seconds
Iteration: 17, Objective: 0.2033
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:07 PM: Your problem has 435 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Finished problem compilation (took 3.535e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 435
  constraints   = 685
  nnz(P)        = 0
  nnz(A)        = 5362
  cones (total) = 1
    : Nonnegative = 1,  numel = 685

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9792e-01  +2.5225e+02  2.52e+02  9.46e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.3035e-01  +5.5706e+01  5.52e+01  4.29e-01  1.40e+01  3.90e-03  5.75e-01  5.84e-01  
  2  +4.8860e-01  +7.8283e+00  7.34e+00  1.16e-01  5.14e+00  2.20e-02  2.32e-01  9.90e-01  
  3  +4.5415e-01  +2.3497e+00  1.90e+00  2.06e-02  1.07e+00  1.12e-02  4.89e-02  8.10e-01  
  4  +3.9342e-01  +1.9981e+00  1.60e+00  1.03e-02  5.35e-01  1.23e-02  2.53e-02  5.78e-01  
  5  +3.3821e-01  +1.0617e+00  7.24e-01  4.39e-03  2.22e-01  1.29e-03  1.18e-02  7.65e-01  
  6  +2.7148e-01  +5.2674e-01  2.55e-01  1.48e-03  7.30e-02  3.19e-04  4.50e-03  7.11e-01  
  7  +2.3540e-01  +3.5871e-01  1.23e-01  6.56e-04  3.32e-02  1.50e-04  2.16e-03  7.06e-01  
  8  +2.2442e-01  +3.0873e-01  8.43e-02  4.29e-04  2.21e-02  1.02e-04  1.45e-03  4.23e-01  
  9  +2.1186e-01  +2.5270e-01  4.08e-02  1.99e-04  1.04e-02  4.77e-05  7.05e-04  5.82e-01  
 10  +2.0184e-01  +2.0921e-01  7.36e-03  3.53e-05  1.84e-03  7.70e-06  1.33e-04  8.33e-01  
 11  +1.9976e-01  +2.0047e-01  7.16e-04  3.45e-06  1.78e-04  6.12e-07  1.37e-05  9.14e-01  
 12  +1.9951e-01  +1.9952e-01  1.80e-05  8.71e-08  4.47e-06  1.46e-08  3.53e-07  9.77e-01  
 13  +1.9950e-01  +1.9950e-01  1.80e-07  8.71e-10  4.47e-08  1.46e-10  3.54e-09  9.90e-01  
 14  +1.9950e-01  +1.9950e-01  1.80e-09  8.72e-12  4.48e-10  1.46e-12  3.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2069ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:07 PM: Optimal value: 1.995e-01
(CVXPY) Sep 20 03:17:07 PM: Compilation took 3.535e-03 seconds
(CVXPY) Sep 20 03:17:07 PM: Solver (including time spent in interface) took 8.700e-03 seconds
Iteration: 18, Objective: 0.1995
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:07 PM: Your problem has 445 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Finished problem compilation (took 3.638e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 445
  constraints   = 695
  nnz(P)        = 0
  nnz(A)        = 5404
  cones (total) = 1
    : Nonnegative = 1,  numel = 695

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9785e-01  +2.5228e+02  2.52e+02  9.47e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.2692e-01  +5.5830e+01  5.53e+01  4.29e-01  1.38e+01  3.91e-03  5.74e-01  5.83e-01  
  2  +4.8514e-01  +7.8925e+00  7.41e+00  1.15e-01  5.07e+00  2.23e-02  2.32e-01  9.90e-01  
  3  +4.4903e-01  +2.3772e+00  1.93e+00  2.07e-02  1.06e+00  1.11e-02  4.92e-02  8.10e-01  
  4  +3.9267e-01  +2.0509e+00  1.66e+00  1.11e-02  5.69e-01  1.19e-02  2.73e-02  5.39e-01  
  5  +3.4013e-01  +1.1844e+00  8.44e-01  5.08e-03  2.56e-01  3.23e-03  1.34e-02  6.64e-01  
  6  +2.7518e-01  +5.7329e-01  2.98e-01  1.74e-03  8.55e-02  7.19e-04  5.22e-03  6.97e-01  
  7  +2.4696e-01  +4.3701e-01  1.90e-01  1.05e-03  5.24e-02  4.10e-04  3.33e-03  5.13e-01  
  8  +2.1708e-01  +2.8493e-01  6.78e-02  3.48e-04  1.78e-02  1.36e-04  1.19e-03  7.20e-01  
  9  +2.0865e-01  +2.4934e-01  4.07e-02  2.02e-04  1.05e-02  6.81e-05  7.13e-04  5.54e-01  
 10  +1.9933e-01  +2.1044e-01  1.11e-02  5.38e-05  2.81e-03  1.40e-05  2.00e-04  8.42e-01  
 11  +1.9603e-01  +1.9740e-01  1.37e-03  6.59e-06  3.42e-04  1.33e-06  2.61e-05  9.18e-01  
 12  +1.9553e-01  +1.9561e-01  7.53e-05  3.63e-07  1.88e-05  6.63e-08  1.48e-06  9.54e-01  
 13  +1.9550e-01  +1.9550e-01  7.63e-07  3.68e-09  1.90e-07  6.70e-10  1.51e-08  9.90e-01  
 14  +1.9550e-01  +1.9550e-01  7.64e-09  3.68e-11  1.90e-09  6.71e-12  1.51e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.5922ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:07 PM: Optimal value: 1.955e-01
(CVXPY) Sep 20 03:17:07 PM: Compilation took 3.638e-03 seconds
(CVXPY) Sep 20 03:17:07 PM: Solver (including time spent in interface) took 8.725e-03 seconds
Iteration: 19, Objective: 0.1955
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:07 PM: Your problem has 455 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Finished problem compilation (took 6.471e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 455
  constraints   = 705
  nnz(P)        = 0
  nnz(A)        = 5439
  cones (total) = 1
    : Nonnegative = 1,  numel = 705

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9784e-01  +2.5229e+02  2.52e+02  9.47e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.2510e-01  +5.5889e+01  5.54e+01  4.29e-01  1.37e+01  3.92e-03  5.74e-01  5.83e-01  
  2  +4.8332e-01  +7.9189e+00  7.44e+00  1.14e-01  5.02e+00  2.24e-02  2.32e-01  9.90e-01  
  3  +4.4579e-01  +2.3501e+00  1.90e+00  2.01e-02  1.03e+00  1.10e-02  4.79e-02  8.16e-01  
  4  +3.8713e-01  +2.0331e+00  1.65e+00  1.08e-02  5.51e-01  1.18e-02  2.67e-02  5.40e-01  
  5  +3.3282e-01  +1.0675e+00  7.35e-01  4.56e-03  2.28e-01  1.07e-03  1.23e-02  7.74e-01  
  6  +2.6787e-01  +5.4474e-01  2.77e-01  1.64e-03  7.96e-02  3.02e-04  4.96e-03  6.94e-01  
  7  +2.3270e-01  +3.7197e-01  1.39e-01  7.65e-04  3.79e-02  1.52e-04  2.49e-03  6.88e-01  
  8  +2.1787e-01  +3.0010e-01  8.22e-02  4.26e-04  2.17e-02  9.12e-05  1.43e-03  5.28e-01  
  9  +2.0666e-01  +2.4969e-01  4.30e-02  2.14e-04  1.11e-02  4.65e-05  7.50e-04  5.70e-01  
 10  +1.9539e-01  +2.0040e-01  5.02e-03  2.45e-05  1.27e-03  4.26e-06  9.19e-05  9.27e-01  
 11  +1.9389e-01  +1.9466e-01  7.73e-04  3.77e-06  1.94e-04  6.09e-07  1.51e-05  8.78e-01  
 12  +1.9361e-01  +1.9362e-01  1.48e-05  7.25e-08  3.72e-06  1.10e-08  2.97e-07  9.86e-01  
 13  +1.9360e-01  +1.9360e-01  1.48e-07  7.25e-10  3.72e-08  1.10e-10  2.97e-09  9.90e-01  
 14  +1.9360e-01  +1.9360e-01  1.48e-09  7.25e-12  3.72e-10  1.10e-12  2.97e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4276ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:07 PM: Optimal value: 1.936e-01
(CVXPY) Sep 20 03:17:07 PM: Compilation took 6.471e-03 seconds
(CVXPY) Sep 20 03:17:07 PM: Solver (including time spent in interface) took 1.002e-02 seconds
Iteration: 20, Objective: 0.1936
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:07 PM: Your problem has 465 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 465
  constraints   = 715
  nnz(P)        = 0
  nnz(A)        = 5469
  cones (total) = 1
    : Nonnegative = 1,  numel = 715

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9783e-01  +2.5232e+02  2.52e+02  9.47e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.2305e-01  +5.5957e+01  5.54e+01  4.29e-01  1.36e+01  3.93e-03  5.73e-01  5.83e-01  
  2  +4.8131e-01  +7.9502e+00  7.47e+00  1.13e-01  4.96e+00  2.25e-02  2.31e-01  9.90e-01  
  3  +4.4311e-01  +2.3987e+00  1.96e+00  2.05e-02  1.04e+00  1.11e-02  4.90e-02  8.08e-01  
  4  +3.8464e-01  +2.0595e+00  1.67e+00  1.11e-02  5.61e-01  1.16e-02  2.75e-02  5.36e-01  
  5  +3.3111e-01  +1.0730e+00  7.42e-01  4.65e-03  2.30e-01  6.51e-04  1.25e-02  8.06e-01  
  6  +2.6808e-01  +5.6378e-01  2.96e-01  1.75e-03  8.47e-02  2.28e-04  5.28e-03  6.76e-01  
  7  +2.2919e-01  +3.6128e-01  1.32e-01  7.27e-04  3.56e-02  1.12e-04  2.38e-03  6.82e-01  
  8  +2.1601e-01  +3.0042e-01  8.44e-02  4.41e-04  2.20e-02  7.49e-05  1.49e-03  4.90e-01  
  9  +2.0055e-01  +2.2975e-01  2.92e-02  1.46e-04  7.39e-03  2.56e-05  5.31e-04  7.87e-01  
 10  +1.9284e-01  +1.9640e-01  3.56e-03  1.77e-05  8.88e-04  2.61e-06  6.91e-05  9.03e-01  
 11  +1.9177e-01  +1.9224e-01  4.63e-04  2.32e-06  1.15e-04  3.30e-07  9.69e-06  9.18e-01  
 12  +1.9160e-01  +1.9161e-01  7.28e-06  3.64e-08  1.80e-06  4.94e-09  1.55e-07  9.84e-01  
 13  +1.9160e-01  +1.9160e-01  7.28e-08  3.65e-10  1.80e-08  4.94e-11  1.55e-09  9.90e-01  
 14  +1.9160e-01  +1.9160e-01  7.28e-10  3.65e-12  1.80e-10  4.95e-13  1.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.3571ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:07 PM: Optimal value: 1.916e-01
(CVXPY) Sep 20 03:17:07 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 03:17:07 PM: Solver (including time spent in interface) took 1.104e-02 seconds
Iteration: 21, Objective: 0.1916
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:07 PM: Your problem has 475 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Finished problem compilation (took 3.635e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 475
  constraints   = 725
  nnz(P)        = 0
  nnz(A)        = 5503
  cones (total) = 1
    : Nonnegative = 1,  numel = 725

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9771e-01  +2.5254e+02  2.52e+02  9.48e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.1781e-01  +5.6193e+01  5.57e+01  4.30e-01  1.35e+01  3.94e-03  5.74e-01  5.81e-01  
  2  +4.7591e-01  +8.1189e+00  7.64e+00  1.13e-01  4.92e+00  2.31e-02  2.30e-01  9.90e-01  
  3  +4.3418e-01  +2.4691e+00  2.03e+00  2.07e-02  1.04e+00  1.13e-02  4.95e-02  8.05e-01  
  4  +3.7980e-01  +2.1264e+00  1.75e+00  1.19e-02  5.99e-01  1.15e-02  2.93e-02  4.97e-01  
  5  +3.3318e-01  +1.2665e+00  9.33e-01  5.86e-03  2.91e-01  3.70e-03  1.54e-02  6.13e-01  
  6  +2.6936e-01  +5.8835e-01  3.19e-01  1.94e-03  9.34e-02  8.16e-04  5.75e-03  7.00e-01  
  7  +2.3353e-01  +4.0479e-01  1.71e-01  9.79e-04  4.74e-02  3.84e-04  3.13e-03  5.93e-01  
  8  +2.1127e-01  +2.9339e-01  8.21e-02  4.38e-04  2.17e-02  1.70e-04  1.49e-03  6.17e-01  
  9  +1.9849e-01  +2.3357e-01  3.51e-02  1.82e-04  9.08e-03  4.87e-05  6.58e-04  7.71e-01  
 10  +1.8999e-01  +1.9681e-01  6.82e-03  3.47e-05  1.73e-03  7.96e-06  1.34e-04  8.33e-01  
 11  +1.8808e-01  +1.8888e-01  8.00e-04  4.08e-06  2.01e-04  7.45e-07  1.70e-05  8.95e-01  
 12  +1.8781e-01  +1.8783e-01  1.94e-05  9.91e-08  4.87e-06  1.62e-08  4.24e-07  9.79e-01  
 13  +1.8780e-01  +1.8780e-01  1.94e-07  9.91e-10  4.87e-08  1.62e-10  4.25e-09  9.90e-01  
 14  +1.8780e-01  +1.8780e-01  1.94e-09  9.91e-12  4.87e-10  1.62e-12  4.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4942ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:07 PM: Optimal value: 1.878e-01
(CVXPY) Sep 20 03:17:07 PM: Compilation took 3.635e-03 seconds
(CVXPY) Sep 20 03:17:07 PM: Solver (including time spent in interface) took 1.004e-02 seconds
Iteration: 22, Objective: 0.1878
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:07 PM: Your problem has 483 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:07 PM: Finished problem compilation (took 5.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 483
  constraints   = 733
  nnz(P)        = 0
  nnz(A)        = 5554
  cones (total) = 1
    : Nonnegative = 1,  numel = 733

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9770e-01  +2.5256e+02  2.52e+02  9.48e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.1665e-01  +5.6191e+01  5.57e+01  4.29e-01  1.34e+01  3.95e-03  5.73e-01  5.82e-01  
  2  +4.7436e-01  +8.1028e+00  7.63e+00  1.12e-01  4.86e+00  2.30e-02  2.29e-01  9.90e-01  
  3  +4.3238e-01  +2.4341e+00  2.00e+00  2.05e-02  1.03e+00  1.10e-02  4.91e-02  8.04e-01  
  4  +3.7945e-01  +2.1720e+00  1.79e+00  1.24e-02  6.20e-01  1.14e-02  3.05e-02  4.80e-01  
  5  +3.3880e-01  +1.4142e+00  1.08e+00  6.84e-03  3.38e-01  4.55e-03  1.78e-02  5.58e-01  
  6  +2.7364e-01  +6.1341e-01  3.40e-01  2.09e-03  1.00e-01  7.37e-04  6.10e-03  7.58e-01  
  7  +2.3580e-01  +4.2540e-01  1.90e-01  1.09e-03  5.25e-02  3.55e-04  3.45e-03  6.03e-01  
  8  +2.1255e-01  +3.0541e-01  9.29e-02  5.06e-04  2.47e-02  1.64e-04  1.71e-03  5.68e-01  
  9  +1.9804e-01  +2.3488e-01  3.68e-02  1.94e-04  9.51e-03  4.96e-05  7.00e-04  7.52e-01  
 10  +1.8975e-01  +1.9593e-01  6.18e-03  3.24e-05  1.58e-03  6.79e-06  1.25e-04  8.53e-01  
 11  +1.8843e-01  +1.9029e-01  1.85e-03  9.66e-06  4.69e-04  1.74e-06  4.03e-05  8.02e-01  
 12  +1.8788e-01  +1.8810e-01  2.25e-04  1.17e-06  5.65e-05  1.99e-07  5.06e-06  8.91e-01  
 13  +1.8780e-01  +1.8780e-01  3.00e-06  1.56e-08  7.54e-07  2.57e-09  6.80e-08  9.88e-01  
 14  +1.8780e-01  +1.8780e-01  3.01e-08  1.56e-10  7.55e-09  2.57e-11  6.81e-10  9.90e-01  
 15  +1.8780e-01  +1.8780e-01  3.01e-10  1.56e-12  7.55e-11  2.57e-13  6.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.9384ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:07 PM: Optimal value: 1.878e-01
(CVXPY) Sep 20 03:17:07 PM: Compilation took 5.510e-03 seconds
(CVXPY) Sep 20 03:17:07 PM: Solver (including time spent in interface) took 1.144e-02 seconds
Iteration: 23, Objective: 0.1878
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:08 PM: Your problem has 493 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:08 PM: Finished problem compilation (took 2.356e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 493
  constraints   = 743
  nnz(P)        = 0
  nnz(A)        = 5595
  cones (total) = 1
    : Nonnegative = 1,  numel = 743

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9765e-01  +2.5255e+02  2.52e+02  9.48e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.1237e-01  +5.6344e+01  5.58e+01  4.29e-01  1.32e+01  3.96e-03  5.73e-01  5.81e-01  
  2  +4.7079e-01  +8.1654e+00  7.69e+00  1.11e-01  4.82e+00  2.33e-02  2.29e-01  9.90e-01  
  3  +4.2831e-01  +2.4777e+00  2.05e+00  2.09e-02  1.04e+00  1.09e-02  5.03e-02  7.99e-01  
  4  +3.7252e-01  +2.1904e+00  1.82e+00  1.25e-02  6.20e-01  1.13e-02  3.08e-02  4.85e-01  
  5  +3.2132e-01  +1.1092e+00  7.88e-01  5.22e-03  2.54e-01  1.09e-04  1.40e-02  8.52e-01  
  6  +2.6157e-01  +5.9120e-01  3.30e-01  2.08e-03  9.85e-02  1.17e-04  6.18e-03  6.89e-01  
  7  +2.1752e-01  +3.3395e-01  1.16e-01  6.74e-04  3.22e-02  5.94e-05  2.25e-03  7.37e-01  
  8  +2.0798e-01  +2.8981e-01  8.18e-02  4.56e-04  2.21e-02  4.82e-05  1.56e-03  4.44e-01  
  9  +1.9410e-01  +2.2287e-01  2.88e-02  1.56e-04  7.55e-03  1.93e-05  5.71e-04  7.71e-01  
 10  +1.8742e-01  +1.9212e-01  4.70e-03  2.53e-05  1.22e-03  2.91e-06  9.96e-05  8.61e-01  
 11  +1.8628e-01  +1.8741e-01  1.13e-03  6.01e-06  2.89e-04  7.29e-07  2.55e-05  8.35e-01  
 12  +1.8592e-01  +1.8599e-01  6.70e-05  3.55e-07  1.71e-05  4.43e-08  1.56e-06  9.63e-01  
 13  +1.8590e-01  +1.8590e-01  6.90e-07  3.66e-09  1.76e-07  4.55e-10  1.61e-08  9.90e-01  
 14  +1.8590e-01  +1.8590e-01  6.90e-09  3.66e-11  1.76e-09  4.56e-12  1.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8407ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:08 PM: Optimal value: 1.859e-01
(CVXPY) Sep 20 03:17:08 PM: Compilation took 2.356e-03 seconds
(CVXPY) Sep 20 03:17:08 PM: Solver (including time spent in interface) took 1.320e-02 seconds
Iteration: 24, Objective: 0.1859
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:08 PM: Your problem has 498 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:08 PM: Finished problem compilation (took 4.067e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 498
  constraints   = 748
  nnz(P)        = 0
  nnz(A)        = 5626
  cones (total) = 1
    : Nonnegative = 1,  numel = 748

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9761e-01  +2.5259e+02  2.52e+02  9.49e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.1032e-01  +5.6420e+01  5.59e+01  4.29e-01  1.32e+01  3.97e-03  5.73e-01  5.80e-01  
  2  +4.6897e-01  +8.1983e+00  7.73e+00  1.11e-01  4.79e+00  2.34e-02  2.29e-01  9.90e-01  
  3  +4.2623e-01  +2.5465e+00  2.12e+00  2.17e-02  1.08e+00  1.10e-02  5.22e-02  7.90e-01  
  4  +3.6928e-01  +2.2348e+00  1.87e+00  1.28e-02  6.34e-01  1.12e-02  3.17e-02  4.93e-01  
  5  +3.2032e-01  +1.1617e+00  8.41e-01  5.59e-03  2.71e-01  1.08e-04  1.49e-02  8.64e-01  
  6  +2.6248e-01  +5.9325e-01  3.31e-01  2.10e-03  9.93e-02  8.21e-05  6.21e-03  6.55e-01  
  7  +2.1919e-01  +3.4859e-01  1.29e-01  7.57e-04  3.60e-02  5.61e-05  2.49e-03  7.12e-01  
  8  +2.0633e-01  +2.8525e-01  7.89e-02  4.42e-04  2.14e-02  4.23e-05  1.52e-03  5.28e-01  
  9  +1.9336e-01  +2.1957e-01  2.62e-02  1.44e-04  6.94e-03  1.82e-05  5.29e-04  8.43e-01  
 10  +1.8709e-01  +1.9073e-01  3.63e-03  1.99e-05  9.50e-04  2.18e-06  7.86e-05  8.70e-01  
 11  +1.8644e-01  +1.8806e-01  1.62e-03  8.75e-06  4.19e-04  1.05e-06  3.66e-05  6.75e-01  
 12  +1.8598e-01  +1.8620e-01  2.18e-04  1.17e-06  5.60e-05  1.53e-07  5.09e-06  9.69e-01  
 13  +1.8590e-01  +1.8590e-01  2.73e-06  1.46e-08  7.00e-07  1.90e-09  6.40e-08  9.88e-01  
 14  +1.8590e-01  +1.8590e-01  2.73e-08  1.46e-10  7.01e-09  1.91e-11  6.41e-10  9.90e-01  
 15  +1.8590e-01  +1.8590e-01  2.73e-10  1.46e-12  7.01e-11  1.91e-13  6.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.3287ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:08 PM: Optimal value: 1.859e-01
(CVXPY) Sep 20 03:17:08 PM: Compilation took 4.067e-03 seconds
(CVXPY) Sep 20 03:17:08 PM: Solver (including time spent in interface) took 1.059e-02 seconds
Iteration: 25, Objective: 0.1859
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:08 PM: Your problem has 500 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:08 PM: Finished problem compilation (took 1.320e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 500
  constraints   = 750
  nnz(P)        = 0
  nnz(A)        = 5653
  cones (total) = 1
    : Nonnegative = 1,  numel = 750

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9757e-01  +2.5258e+02  2.52e+02  9.49e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.0890e-01  +5.6581e+01  5.61e+01  4.30e-01  1.32e+01  3.97e-03  5.74e-01  5.79e-01  
  2  +4.6784e-01  +8.2154e+00  7.75e+00  1.12e-01  4.81e+00  2.36e-02  2.31e-01  9.90e-01  
  3  +4.2533e-01  +2.4916e+00  2.07e+00  2.14e-02  1.06e+00  1.07e-02  5.16e-02  7.96e-01  
  4  +3.6897e-01  +2.2028e+00  1.83e+00  1.28e-02  6.31e-01  1.10e-02  3.18e-02  4.85e-01  
  5  +3.1997e-01  +1.1874e+00  8.67e-01  5.84e-03  2.82e-01  1.06e-04  1.56e-02  8.62e-01  
  6  +2.6328e-01  +6.0233e-01  3.39e-01  2.17e-03  1.02e-01  7.74e-05  6.46e-03  6.51e-01  
  7  +2.2080e-01  +3.5919e-01  1.38e-01  8.21e-04  3.89e-02  5.33e-05  2.71e-03  6.80e-01  
  8  +2.0727e-01  +2.9215e-01  8.49e-02  4.79e-04  2.31e-02  4.50e-05  1.65e-03  5.73e-01  
  9  +1.9361e-01  +2.2095e-01  2.73e-02  1.52e-04  7.28e-03  1.94e-05  5.64e-04  8.86e-01  
 10  +1.8711e-01  +1.9096e-01  3.85e-03  2.12e-05  1.01e-03  2.34e-06  8.48e-05  8.66e-01  
 11  +1.8629e-01  +1.8752e-01  1.23e-03  6.70e-06  3.18e-04  7.62e-07  2.86e-05  7.28e-01  
 12  +1.8593e-01  +1.8601e-01  8.26e-05  4.47e-07  2.12e-05  5.47e-08  1.98e-06  9.75e-01  
 13  +1.8590e-01  +1.8590e-01  8.64e-07  4.68e-09  2.22e-07  5.71e-10  2.08e-08  9.90e-01  
 14  +1.8590e-01  +1.8590e-01  8.64e-09  4.68e-11  2.22e-09  5.72e-12  2.08e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.1783ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:08 PM: Optimal value: 1.859e-01
(CVXPY) Sep 20 03:17:08 PM: Compilation took 1.320e-02 seconds
(CVXPY) Sep 20 03:17:08 PM: Solver (including time spent in interface) took 1.235e-02 seconds
FULL MODEL:
  Accruacy: 0.778
  Our objective: 0.556

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.032)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.004)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1)                                             <-- (term's our objective: 0.036)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.108184814453125
Best over terms:
  Our final objective: 0.18
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.18
  Highest accruacy: 0.59
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

