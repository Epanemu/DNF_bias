Command:
python test_script.py -s linear_dependence -d 3 -n 500 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.28400000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 3.

Computed total variation: 0.28400000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:44 PM: Your problem has 257 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:44 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 257
  constraints   = 507
  nnz(P)        = 0
  nnz(A)        = 1507
  cones (total) = 1
    : Nonnegative = 1,  numel = 507

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +2.5089e+02  2.50e+02  9.30e-01  1.69e+01  1.00e+00  1.01e+00   ------   
  1  +6.1875e-01  +4.6783e+01  4.62e+01  2.89e-01  8.68e+00  4.25e-03  4.39e-01  6.94e-01  
  2  +5.5147e-01  +7.9406e+00  7.39e+00  1.08e-01  3.81e+00  6.94e-03  2.07e-01  7.03e-01  
  3  +5.0021e-01  +1.3776e+00  8.77e-01  2.59e-02  8.70e-01  3.03e-03  1.82e-01  4.66e-01  
  4  +4.9678e-01  +8.1187e-01  3.15e-01  8.15e-03  2.83e-01  2.48e-03  3.87e-02  8.33e-01  
  5  +4.5402e-01  +7.6940e-01  3.15e-01  1.42e-03  5.07e-02  1.85e-02  4.40e-03  9.15e-01  
  6  +4.3145e-01  +5.8316e-01  1.52e-01  7.32e-04  2.58e-02  2.76e-03  2.70e-03  5.53e-01  
  7  +4.0041e-01  +4.2729e-01  2.69e-02  1.17e-04  4.09e-03  2.60e-05  5.16e-04  8.89e-01  
  8  +3.9243e-01  +3.9347e-01  1.05e-03  4.49e-06  1.57e-04  8.62e-07  2.09e-05  9.61e-01  
  9  +3.9210e-01  +3.9211e-01  1.05e-05  4.48e-08  1.57e-06  8.61e-09  2.10e-07  9.90e-01  
 10  +3.9210e-01  +3.9210e-01  1.05e-07  4.48e-10  1.57e-08  8.61e-11  2.10e-09  9.90e-01  
 11  +3.9210e-01  +3.9210e-01  1.05e-09  4.48e-12  1.57e-10  8.61e-13  2.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 994.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:44 PM: Optimal value: 3.921e-01
(CVXPY) Sep 20 03:04:44 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:04:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3921
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:44 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:44 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 1775
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9836e-01  +2.5133e+02  2.51e+02  9.30e-01  1.79e+01  1.00e+00  1.02e+00   ------   
  1  +6.1398e-01  +4.7327e+01  4.67e+01  2.96e-01  9.23e+00  4.22e-03  4.50e-01  6.88e-01  
  2  +5.4894e-01  +7.6976e+00  7.15e+00  1.05e-01  3.88e+00  7.45e-03  2.02e-01  7.34e-01  
  3  +4.9965e-01  +1.4251e+00  9.25e-01  2.74e-02  9.67e-01  3.45e-03  1.69e-01  5.60e-01  
  4  +4.9319e-01  +1.0318e+00  5.39e-01  1.11e-02  4.09e-01  4.64e-03  3.93e-02  9.09e-01  
  5  +4.6651e-01  +8.1593e-01  3.49e-01  2.46e-03  9.24e-02  1.15e-02  7.42e-03  8.16e-01  
  6  +4.5740e-01  +8.0919e-01  3.52e-01  1.81e-03  6.81e-02  1.42e-02  5.25e-03  3.47e-01  
  7  +4.5732e-01  +7.9655e-01  3.39e-01  1.81e-03  6.79e-02  1.24e-02  5.21e-03  6.76e-02  
  8  +4.2697e-01  +6.7388e-01  2.47e-01  8.41e-04  3.15e-02  1.09e-02  2.47e-03  6.24e-01  
  9  +4.0841e-01  +5.5426e-01  1.46e-01  5.63e-04  2.09e-02  9.25e-05  1.80e-03  8.08e-01  
 10  +3.6854e-01  +3.9608e-01  2.75e-02  9.68e-05  3.56e-03  1.33e-05  3.46e-04  8.45e-01  
 11  +3.5870e-01  +3.6021e-01  1.51e-03  5.31e-06  1.95e-04  6.95e-07  2.01e-05  9.44e-01  
 12  +3.5811e-01  +3.5812e-01  1.64e-05  5.76e-08  2.12e-06  8.59e-09  2.19e-07  9.90e-01  
 13  +3.5810e-01  +3.5810e-01  1.64e-07  5.76e-10  2.12e-08  8.59e-11  2.19e-09  9.90e-01  
 14  +3.5810e-01  +3.5810e-01  1.64e-09  5.76e-12  2.12e-10  8.59e-13  2.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.533ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:44 PM: Optimal value: 3.581e-01
(CVXPY) Sep 20 03:04:44 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:04:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.642
  Our objective: 0.28400000000000003

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.284)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9632389545440674
Best over terms:
  Our final objective: 0.28400000000000003
    Its accruacy: 0.642
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.28400000000000003
  Highest accruacy: 0.642
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

