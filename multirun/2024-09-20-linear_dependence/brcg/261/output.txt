Command:
python test_script.py -s linear_dependence -d 7 -n 1000 --seed 56 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 7.

Computed total variation: 0.32
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 515 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 515
  constraints   = 1015
  nnz(P)        = 0
  nnz(A)        = 5015
  cones (total) = 1
    : Nonnegative = 1,  numel = 1015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9990e-01  +5.0091e+02  5.00e+02  9.54e-01  3.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.8774e-01  +1.0548e+02  1.05e+02  3.89e-01  2.00e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3644e-01  +1.3187e+01  1.27e+01  1.34e-01  8.69e+00  1.33e-02  2.48e-01  8.84e-01  
  3  +5.0545e-01  +2.9366e+00  2.43e+00  4.97e-02  3.11e+00  2.82e-05  2.25e-01  3.68e-01  
  4  +5.0061e-01  +8.2617e-01  3.26e-01  7.10e-03  4.64e-01  9.61e-06  7.08e-02  7.83e-01  
  5  +4.9851e-01  +8.1741e-01  3.19e-01  3.91e-03  2.61e-01  3.79e-05  1.33e-02  8.74e-01  
  6  +4.8769e-01  +7.3538e-01  2.48e-01  8.31e-04  5.60e-02  1.33e-04  2.46e-03  8.16e-01  
  7  +4.6859e-01  +6.0463e-01  1.36e-01  3.64e-04  2.43e-02  6.35e-05  1.19e-03  6.31e-01  
  8  +4.5072e-01  +5.0661e-01  5.59e-02  1.40e-04  9.27e-03  1.60e-05  5.09e-04  9.90e-01  
  9  +4.3636e-01  +4.4268e-01  6.32e-03  1.35e-05  8.98e-04  2.02e-06  5.68e-05  9.56e-01  
 10  +4.3413e-01  +4.3423e-01  9.36e-05  1.93e-07  1.28e-05  2.95e-08  8.47e-07  9.86e-01  
 11  +4.3410e-01  +4.3410e-01  9.36e-07  1.93e-09  1.28e-07  2.95e-10  8.47e-09  9.90e-01  
 12  +4.3410e-01  +4.3410e-01  9.36e-09  1.93e-11  1.28e-09  2.96e-12  8.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5464ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 4.341e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 7.956e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 5969
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +5.0128e+02  5.01e+02  9.55e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.8706e-01  +1.0566e+02  1.05e+02  3.91e-01  2.08e+01  3.85e-03  5.50e-01  6.10e-01  
  2  +5.3533e-01  +1.2978e+01  1.24e+01  1.33e-01  8.87e+00  1.36e-02  2.47e-01  8.95e-01  
  3  +5.0502e-01  +2.8481e+00  2.34e+00  4.83e-02  3.15e+00  2.87e-05  2.20e-01  4.18e-01  
  4  +5.0075e-01  +8.9530e-01  3.95e-01  8.64e-03  5.86e-01  9.72e-06  7.47e-02  7.33e-01  
  5  +4.9796e-01  +8.6863e-01  3.71e-01  3.89e-03  2.71e-01  4.23e-05  1.23e-02  9.12e-01  
  6  +4.8495e-01  +7.5606e-01  2.71e-01  8.17e-04  5.74e-02  1.32e-04  2.34e-03  8.10e-01  
  7  +4.7900e-01  +7.1350e-01  2.34e-01  6.49e-04  4.55e-02  1.16e-04  1.87e-03  2.59e-01  
  8  +4.7405e-01  +6.7373e-01  2.00e-01  4.78e-04  3.34e-02  1.00e-04  1.37e-03  6.01e-01  
  9  +4.6798e-01  +6.4679e-01  1.79e-01  3.52e-04  2.46e-02  1.02e-04  1.01e-03  4.05e-01  
 10  +4.5915e-01  +6.0027e-01  1.41e-01  2.94e-04  2.05e-02  6.98e-05  8.69e-04  4.20e-01  
 11  +4.3653e-01  +5.0774e-01  7.12e-02  1.19e-04  8.23e-03  4.09e-05  3.63e-04  6.54e-01  
 12  +4.1306e-01  +4.1927e-01  6.21e-03  9.91e-06  6.85e-04  2.47e-06  3.25e-05  9.90e-01  
 13  +4.1037e-01  +4.1095e-01  5.77e-04  9.16e-07  6.33e-05  3.86e-07  3.06e-06  9.74e-01  
 14  +4.1010e-01  +4.1011e-01  5.88e-06  9.33e-09  6.45e-07  3.93e-09  3.12e-08  9.90e-01  
 15  +4.1010e-01  +4.1010e-01  5.88e-08  9.33e-11  6.45e-09  3.93e-11  3.12e-10  9.90e-01  
 16  +4.1010e-01  +4.1010e-01  5.88e-10  9.33e-13  6.45e-11  3.93e-13  3.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3296ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 4.101e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 9.401e-03 seconds
Iteration: 2, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 535 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 4.193e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 535
  constraints   = 1035
  nnz(P)        = 0
  nnz(A)        = 6406
  cones (total) = 1
    : Nonnegative = 1,  numel = 1035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9987e-01  +5.0127e+02  5.01e+02  9.55e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.8599e-01  +1.0574e+02  1.05e+02  3.93e-01  2.08e+01  3.85e-03  5.51e-01  6.10e-01  
  2  +5.3434e-01  +1.2775e+01  1.22e+01  1.31e-01  8.70e+00  1.38e-02  2.43e-01  9.07e-01  
  3  +5.0461e-01  +2.7671e+00  2.26e+00  4.69e-02  3.06e+00  2.92e-05  2.12e-01  4.68e-01  
  4  +5.0108e-01  +1.1278e+00  6.27e-01  1.36e-02  9.22e-01  1.25e-05  9.36e-02  6.02e-01  
  5  +4.9711e-01  +9.9659e-01  4.99e-01  4.98e-03  3.49e-01  4.91e-05  1.52e-02  9.54e-01  
  6  +4.8177e-01  +8.4369e-01  3.62e-01  1.19e-03  8.38e-02  1.27e-04  3.37e-03  7.81e-01  
  7  +4.7440e-01  +7.9400e-01  3.20e-01  8.80e-04  6.20e-02  1.27e-04  2.50e-03  3.68e-01  
  8  +4.6370e-01  +7.3126e-01  2.68e-01  5.65e-04  3.97e-02  1.31e-04  1.62e-03  5.69e-01  
  9  +4.6158e-01  +7.1783e-01  2.56e-01  5.59e-04  3.93e-02  1.21e-04  1.61e-03  3.83e-02  
 10  +4.3541e-01  +5.8697e-01  1.52e-01  2.95e-04  2.06e-02  6.85e-05  9.11e-04  6.85e-01  
 11  +3.9807e-01  +4.2720e-01  2.91e-02  5.17e-05  3.58e-03  8.17e-06  1.80e-04  8.47e-01  
 12  +3.8905e-01  +3.9357e-01  4.52e-03  8.02e-06  5.54e-04  1.30e-06  2.96e-05  8.44e-01  
 13  +3.8754e-01  +3.8811e-01  5.72e-04  1.01e-06  7.00e-05  3.20e-07  3.79e-06  9.75e-01  
 14  +3.8730e-01  +3.8731e-01  5.77e-06  1.02e-08  7.07e-07  3.23e-09  3.83e-08  9.90e-01  
 15  +3.8730e-01  +3.8730e-01  5.77e-08  1.02e-10  7.07e-09  3.23e-11  3.83e-10  9.90e-01  
 16  +3.8730e-01  +3.8730e-01  5.78e-10  1.02e-12  7.07e-11  3.23e-13  3.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3621ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 3.873e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 4.193e-03 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 4.454e-03 seconds
Iteration: 3, Objective: 0.3873
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 4.122e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6617
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9977e-01  +5.0144e+02  5.01e+02  9.55e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.8463e-01  +1.0588e+02  1.05e+02  3.95e-01  2.07e+01  3.85e-03  5.53e-01  6.09e-01  
  2  +5.3341e-01  +1.2598e+01  1.21e+01  1.29e-01  8.49e+00  1.40e-02  2.40e-01  9.19e-01  
  3  +5.0428e-01  +2.7039e+00  2.20e+00  4.57e-02  2.98e+00  3.00e-05  2.04e-01  5.18e-01  
  4  +5.0103e-01  +1.2090e+00  7.08e-01  1.52e-02  1.03e+00  1.43e-05  9.09e-02  5.84e-01  
  5  +4.9288e-01  +1.2009e+00  7.08e-01  4.26e-03  3.01e-01  9.13e-05  1.19e-02  9.90e-01  
  6  +4.7333e-01  +8.8913e-01  4.16e-01  1.32e-03  9.31e-02  1.09e-04  3.74e-03  7.05e-01  
  7  +4.6326e-01  +8.7334e-01  4.10e-01  8.80e-04  6.19e-02  1.57e-04  2.48e-03  4.68e-01  
  8  +4.5727e-01  +7.8832e-01  3.31e-01  7.77e-04  5.45e-02  1.30e-04  2.25e-03  3.75e-01  
  9  +4.3012e-01  +6.1764e-01  1.88e-01  3.78e-04  2.63e-02  8.10e-05  1.17e-03  6.86e-01  
 10  +4.1562e-01  +5.4472e-01  1.29e-01  2.50e-04  1.74e-02  5.58e-05  8.06e-04  3.50e-01  
 11  +3.9342e-01  +4.3123e-01  3.78e-02  7.20e-05  4.97e-03  2.23e-05  2.54e-04  9.90e-01  
 12  +3.8265e-01  +3.8873e-01  6.08e-03  1.15e-05  7.90e-04  3.27e-06  4.36e-05  8.52e-01  
 13  +3.8058e-01  +3.8101e-01  4.33e-04  8.15e-07  5.60e-05  2.30e-07  3.20e-06  9.83e-01  
 14  +3.8040e-01  +3.8041e-01  6.34e-06  1.19e-08  8.20e-07  3.01e-09  4.75e-08  9.89e-01  
 15  +3.8040e-01  +3.8040e-01  6.34e-08  1.19e-10  8.19e-09  3.01e-11  4.75e-10  9.90e-01  
 16  +3.8040e-01  +3.8040e-01  6.34e-10  1.19e-12  8.19e-11  3.01e-13  4.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.5471ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 3.804e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 4.122e-03 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 3.807e-03 seconds
Iteration: 4, Objective: 0.3804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 555 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 555
  constraints   = 1055
  nnz(P)        = 0
  nnz(A)        = 6896
  cones (total) = 1
    : Nonnegative = 1,  numel = 1055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9974e-01  +5.0142e+02  5.01e+02  9.55e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.8390e-01  +1.0592e+02  1.05e+02  3.97e-01  2.06e+01  3.85e-03  5.53e-01  6.09e-01  
  2  +5.3282e-01  +1.2474e+01  1.19e+01  1.27e-01  8.34e+00  1.41e-02  2.38e-01  9.25e-01  
  3  +5.0413e-01  +2.6737e+00  2.17e+00  4.52e-02  2.95e+00  3.05e-05  1.99e-01  5.46e-01  
  4  +5.0087e-01  +1.1872e+00  6.86e-01  1.47e-02  9.94e-01  1.47e-05  8.30e-02  6.08e-01  
  5  +4.8797e-01  +1.3612e+00  8.73e-01  3.62e-03  2.56e-01  1.33e-04  9.79e-03  9.82e-01  
  6  +4.6309e-01  +9.5684e-01  4.94e-01  1.24e-03  8.74e-02  1.30e-04  3.46e-03  6.83e-01  
  7  +4.5192e-01  +8.6101e-01  4.09e-01  9.13e-04  6.42e-02  1.31e-04  2.59e-03  3.88e-01  
  8  +4.2900e-01  +6.4920e-01  2.20e-01  4.98e-04  3.47e-02  1.01e-04  1.54e-03  9.13e-01  
  9  +3.8906e-01  +4.5053e-01  6.15e-02  1.25e-04  8.61e-03  2.02e-05  4.35e-04  7.56e-01  
 10  +3.7730e-01  +4.0331e-01  2.60e-02  5.09e-05  3.50e-03  9.36e-06  1.91e-04  6.22e-01  
 11  +3.7063e-01  +3.7618e-01  5.55e-03  1.08e-05  7.38e-04  2.75e-06  4.24e-05  9.30e-01  
 12  +3.6874e-01  +3.6912e-01  3.79e-04  7.32e-07  5.02e-05  1.79e-07  2.96e-06  9.43e-01  
 13  +3.6860e-01  +3.6861e-01  5.07e-06  9.81e-09  6.73e-07  2.19e-09  4.02e-08  9.89e-01  
 14  +3.6860e-01  +3.6860e-01  5.07e-08  9.81e-11  6.72e-09  2.19e-11  4.02e-10  9.90e-01  
 15  +3.6860e-01  +3.6860e-01  5.07e-10  9.81e-13  6.72e-11  2.19e-13  4.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.4814ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 3.686e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 1.199e-02 seconds
Iteration: 5, Objective: 0.3686
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 565 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 4.050e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 565
  constraints   = 1065
  nnz(P)        = 0
  nnz(A)        = 7056
  cones (total) = 1
    : Nonnegative = 1,  numel = 1065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0136e+02  5.01e+02  9.56e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.8233e-01  +1.0612e+02  1.06e+02  3.99e-01  2.05e+01  3.85e-03  5.55e-01  6.07e-01  
  2  +5.3171e-01  +1.2263e+01  1.17e+01  1.25e-01  8.15e+00  1.43e-02  2.34e-01  9.39e-01  
  3  +5.0390e-01  +2.6314e+00  2.13e+00  4.45e-02  2.89e+00  3.19e-05  1.91e-01  5.95e-01  
  4  +5.0049e-01  +1.1513e+00  6.51e-01  1.37e-02  9.26e-01  1.63e-05  6.93e-02  6.56e-01  
  5  +4.8659e-01  +1.5131e+00  1.03e+00  4.30e-03  3.04e-01  1.39e-04  1.16e-02  9.34e-01  
  6  +4.6245e-01  +1.0675e+00  6.05e-01  1.61e-03  1.13e-01  1.35e-04  4.49e-03  6.55e-01  
  7  +4.5514e-01  +9.1715e-01  4.62e-01  1.17e-03  8.19e-02  1.62e-04  3.32e-03  6.21e-01  
  8  +4.4116e-01  +7.4299e-01  3.02e-01  8.10e-04  5.63e-02  1.21e-04  2.48e-03  9.90e-01  
  9  +4.2234e-01  +6.4318e-01  2.21e-01  5.31e-04  3.68e-02  9.08e-05  1.69e-03  4.23e-01  
 10  +3.8408e-01  +4.4843e-01  6.44e-02  1.34e-04  9.22e-03  2.46e-05  4.73e-04  8.07e-01  
 11  +3.8251e-01  +4.4304e-01  6.05e-02  1.24e-04  8.48e-03  2.49e-05  4.38e-04  2.08e-01  
 12  +3.7653e-01  +4.2087e-01  4.43e-02  8.71e-05  5.96e-03  2.23e-05  3.19e-04  6.68e-01  
 13  +3.6429e-01  +3.7110e-01  6.80e-03  1.31e-05  8.94e-04  3.61e-06  5.19e-05  9.21e-01  
 14  +3.6189e-01  +3.6212e-01  2.30e-04  4.41e-07  3.01e-05  1.22e-07  1.79e-06  9.90e-01  
 15  +3.6180e-01  +3.6180e-01  2.30e-06  4.41e-09  3.01e-07  1.22e-09  1.79e-08  9.90e-01  
 16  +3.6180e-01  +3.6180e-01  2.30e-08  4.41e-11  3.01e-09  1.22e-11  1.79e-10  9.90e-01  
 17  +3.6180e-01  +3.6180e-01  2.30e-10  4.41e-13  3.01e-11  1.22e-13  1.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7902ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 3.618e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 4.050e-03 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 8.052e-03 seconds
Iteration: 6, Objective: 0.3618
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 575 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 3.894e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 575
  constraints   = 1075
  nnz(P)        = 0
  nnz(A)        = 7206
  cones (total) = 1
    : Nonnegative = 1,  numel = 1075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0138e+02  5.01e+02  9.56e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.8079e-01  +1.0632e+02  1.06e+02  4.02e-01  2.05e+01  3.84e-03  5.57e-01  6.06e-01  
  2  +5.3081e-01  +1.2107e+01  1.16e+01  1.24e-01  7.97e+00  1.46e-02  2.31e-01  9.51e-01  
  3  +5.0373e-01  +2.6005e+00  2.10e+00  4.39e-02  2.85e+00  3.34e-05  1.83e-01  6.40e-01  
  4  +5.0033e-01  +1.2095e+00  7.09e-01  1.46e-02  9.84e-01  1.99e-05  6.61e-02  6.61e-01  
  5  +4.8611e-01  +1.6195e+00  1.13e+00  4.63e-03  3.27e-01  1.62e-04  1.22e-02  9.65e-01  
  6  +4.6634e-01  +1.2165e+00  7.50e-01  2.16e-03  1.52e-01  1.49e-04  5.90e-03  5.51e-01  
  7  +4.5250e-01  +1.0706e+00  6.18e-01  1.48e-03  1.04e-01  1.55e-04  4.15e-03  3.77e-01  
  8  +4.3709e-01  +8.5952e-01  4.22e-01  1.01e-03  7.02e-02  1.36e-04  2.96e-03  5.12e-01  
  9  +4.0481e-01  +6.0275e-01  1.98e-01  4.43e-04  3.05e-02  6.16e-05  1.43e-03  6.15e-01  
 10  +3.7863e-01  +4.4983e-01  7.12e-02  1.53e-04  1.05e-02  2.33e-05  5.45e-04  6.93e-01  
 11  +3.7181e-01  +4.1830e-01  4.65e-02  9.58e-05  6.52e-03  1.78e-05  3.55e-04  5.01e-01  
 12  +3.6321e-01  +3.8011e-01  1.69e-02  3.38e-05  2.30e-03  6.82e-06  1.33e-04  6.86e-01  
 13  +3.5844e-01  +3.5975e-01  1.31e-03  2.59e-06  1.76e-04  5.52e-07  1.06e-05  9.41e-01  
 14  +3.5800e-01  +3.5802e-01  1.39e-05  2.74e-08  1.86e-06  5.90e-09  1.13e-07  9.90e-01  
 15  +3.5800e-01  +3.5800e-01  1.39e-07  2.74e-10  1.86e-08  5.90e-11  1.13e-09  9.90e-01  
 16  +3.5800e-01  +3.5800e-01  1.39e-09  2.74e-12  1.86e-10  5.91e-13  1.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3749ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 3.580e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 3.894e-03 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 7.471e-03 seconds
Iteration: 7, Objective: 0.3580
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 585 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 5.427e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 585
  constraints   = 1085
  nnz(P)        = 0
  nnz(A)        = 7333
  cones (total) = 1
    : Nonnegative = 1,  numel = 1085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0143e+02  5.01e+02  9.56e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.8024e-01  +1.0641e+02  1.06e+02  4.04e-01  2.03e+01  3.84e-03  5.58e-01  6.05e-01  
  2  +5.3026e-01  +1.1998e+01  1.15e+01  1.22e-01  7.84e+00  1.47e-02  2.30e-01  9.57e-01  
  3  +5.0362e-01  +2.5779e+00  2.07e+00  4.35e-02  2.82e+00  3.43e-05  1.79e-01  6.66e-01  
  4  +5.0005e-01  +1.1889e+00  6.89e-01  1.38e-02  9.34e-01  2.22e-05  5.91e-02  6.95e-01  
  5  +4.8160e-01  +1.2235e+00  7.42e-01  2.85e-03  2.01e-01  1.57e-04  7.63e-03  9.16e-01  
  6  +4.6123e-01  +1.0321e+00  5.71e-01  1.49e-03  1.04e-01  1.78e-04  4.12e-03  5.77e-01  
  7  +4.4459e-01  +8.3829e-01  3.94e-01  1.08e-03  7.50e-02  1.26e-04  3.19e-03  5.48e-01  
  8  +4.1571e-01  +6.6171e-01  2.46e-01  5.83e-04  4.00e-02  7.96e-05  1.85e-03  4.71e-01  
  9  +3.8095e-01  +4.6783e-01  8.69e-02  1.92e-04  1.31e-02  2.53e-05  6.90e-04  6.95e-01  
 10  +3.7610e-01  +4.4655e-01  7.04e-02  1.51e-04  1.02e-02  2.38e-05  5.54e-04  3.38e-01  
 11  +3.6722e-01  +4.0694e-01  3.97e-02  8.28e-05  5.60e-03  1.42e-05  3.20e-04  4.89e-01  
 12  +3.5954e-01  +3.7226e-01  1.27e-02  2.61e-05  1.76e-03  6.58e-06  1.06e-04  9.90e-01  
 13  +3.5524e-01  +3.5565e-01  4.05e-04  8.24e-07  5.57e-05  1.94e-07  3.50e-06  9.76e-01  
 14  +3.5510e-01  +3.5511e-01  4.06e-06  8.25e-09  5.57e-07  1.94e-09  3.50e-08  9.90e-01  
 15  +3.5510e-01  +3.5510e-01  4.06e-08  8.25e-11  5.57e-09  1.94e-11  3.51e-10  9.90e-01  
 16  +3.5510e-01  +3.5510e-01  4.06e-10  8.25e-13  5.57e-11  1.94e-13  3.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.5192ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 3.551e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 5.427e-03 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 9.971e-03 seconds
Iteration: 8, Objective: 0.3551
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 595 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 4.209e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 595
  constraints   = 1095
  nnz(P)        = 0
  nnz(A)        = 7479
  cones (total) = 1
    : Nonnegative = 1,  numel = 1095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0149e+02  5.01e+02  9.56e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.7930e-01  +1.0649e+02  1.06e+02  4.05e-01  2.02e+01  3.84e-03  5.58e-01  6.05e-01  
  2  +5.2969e-01  +1.1883e+01  1.14e+01  1.21e-01  7.69e+00  1.48e-02  2.28e-01  9.64e-01  
  3  +5.0349e-01  +2.5501e+00  2.05e+00  4.29e-02  2.77e+00  3.51e-05  1.73e-01  6.96e-01  
  4  +4.9983e-01  +1.2069e+00  7.07e-01  1.38e-02  9.32e-01  2.48e-05  5.54e-02  7.08e-01  
  5  +4.8123e-01  +1.2051e+00  7.24e-01  2.84e-03  1.99e-01  1.57e-04  7.64e-03  9.12e-01  
  6  +4.6446e-01  +1.0666e+00  6.02e-01  1.66e-03  1.16e-01  1.87e-04  4.55e-03  5.40e-01  
  7  +4.4369e-01  +8.6682e-01  4.23e-01  1.06e-03  7.36e-02  1.48e-04  3.08e-03  5.86e-01  
  8  +3.9594e-01  +5.5003e-01  1.54e-01  3.39e-04  2.31e-02  4.57e-05  1.13e-03  7.39e-01  
  9  +3.8734e-01  +5.1080e-01  1.23e-01  2.66e-04  1.81e-02  4.09e-05  9.13e-04  2.85e-01  
 10  +3.7188e-01  +4.3968e-01  6.78e-02  1.42e-04  9.61e-03  2.63e-05  5.25e-04  5.75e-01  
 11  +3.6430e-01  +4.0665e-01  4.23e-02  8.72e-05  5.88e-03  1.69e-05  3.37e-04  4.11e-01  
 12  +3.5514e-01  +3.6602e-01  1.09e-02  2.21e-05  1.49e-03  5.68e-06  9.13e-05  9.90e-01  
 13  +3.5139e-01  +3.5164e-01  2.48e-04  5.02e-07  3.38e-05  1.17e-07  2.14e-06  9.89e-01  
 14  +3.5130e-01  +3.5130e-01  2.48e-06  5.03e-09  3.38e-07  1.17e-09  2.15e-08  9.90e-01  
 15  +3.5130e-01  +3.5130e-01  2.48e-08  5.03e-11  3.38e-09  1.17e-11  2.15e-10  9.90e-01  
 16  +3.5130e-01  +3.5130e-01  2.48e-10  5.03e-13  3.38e-11  1.17e-13  2.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.2817ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 3.513e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 4.209e-03 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.3513
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:30 PM: Your problem has 602 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:30 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 602
  constraints   = 1102
  nnz(P)        = 0
  nnz(A)        = 7574
  cones (total) = 1
    : Nonnegative = 1,  numel = 1102

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0149e+02  5.01e+02  9.56e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.7911e-01  +1.0650e+02  1.06e+02  4.06e-01  2.01e+01  3.84e-03  5.58e-01  6.05e-01  
  2  +5.2941e-01  +1.1821e+01  1.13e+01  1.21e-01  7.61e+00  1.49e-02  2.27e-01  9.67e-01  
  3  +5.0343e-01  +2.5354e+00  2.03e+00  4.26e-02  2.75e+00  3.55e-05  1.71e-01  7.09e-01  
  4  +4.9967e-01  +1.1956e+00  6.96e-01  1.33e-02  9.01e-01  2.61e-05  5.22e-02  7.23e-01  
  5  +4.8057e-01  +1.2150e+00  7.34e-01  2.81e-03  1.97e-01  1.65e-04  7.56e-03  9.17e-01  
  6  +4.6301e-01  +1.0583e+00  5.95e-01  1.66e-03  1.16e-01  1.78e-04  4.57e-03  4.80e-01  
  7  +4.5040e-01  +9.6050e-01  5.10e-01  1.27e-03  8.82e-02  1.69e-04  3.59e-03  3.19e-01  
  8  +4.1736e-01  +6.8897e-01  2.72e-01  6.42e-04  4.39e-02  9.85e-05  2.01e-03  7.35e-01  
  9  +3.8533e-01  +5.0598e-01  1.21e-01  2.69e-04  1.82e-02  3.97e-05  9.39e-04  5.91e-01  
 10  +3.7604e-01  +4.6372e-01  8.77e-02  1.88e-04  1.27e-02  3.32e-05  6.81e-04  4.42e-01  
 11  +3.6279e-01  +4.0353e-01  4.07e-02  8.48e-05  5.70e-03  1.64e-05  3.31e-04  6.19e-01  
 12  +3.5254e-01  +3.5925e-01  6.71e-03  1.37e-05  9.22e-04  2.62e-06  5.78e-05  8.47e-01  
 13  +3.5046e-01  +3.5062e-01  1.65e-04  3.36e-07  2.25e-05  7.14e-08  1.44e-06  9.90e-01  
 14  +3.5040e-01  +3.5040e-01  1.65e-06  3.36e-09  2.25e-07  7.13e-10  1.44e-08  9.90e-01  
 15  +3.5040e-01  +3.5040e-01  1.65e-08  3.36e-11  2.25e-09  7.13e-12  1.44e-10  9.90e-01  
 16  +3.5040e-01  +3.5040e-01  1.65e-10  3.36e-13  2.25e-11  7.14e-14  1.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:30 PM: Optimal value: 3.504e-01
(CVXPY) Sep 20 03:11:30 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:30 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.3504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:31 PM: Your problem has 603 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 603
  constraints   = 1103
  nnz(P)        = 0
  nnz(A)        = 7589
  cones (total) = 1
    : Nonnegative = 1,  numel = 1103

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0147e+02  5.01e+02  9.56e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.7898e-01  +1.0650e+02  1.06e+02  4.06e-01  2.01e+01  3.84e-03  5.58e-01  6.05e-01  
  2  +5.2935e-01  +1.1810e+01  1.13e+01  1.20e-01  7.59e+00  1.49e-02  2.26e-01  9.68e-01  
  3  +5.0339e-01  +2.5268e+00  2.02e+00  4.24e-02  2.74e+00  3.56e-05  1.70e-01  7.16e-01  
  4  +4.9961e-01  +1.2115e+00  7.12e-01  1.35e-02  9.13e-01  2.69e-05  5.21e-02  7.21e-01  
  5  +4.7962e-01  +1.2465e+00  7.67e-01  2.84e-03  1.99e-01  1.73e-04  7.64e-03  9.18e-01  
  6  +4.6034e-01  +1.0700e+00  6.10e-01  1.64e-03  1.14e-01  1.83e-04  4.53e-03  4.84e-01  
  7  +4.4249e-01  +8.8845e-01  4.46e-01  1.15e-03  7.92e-02  1.46e-04  3.34e-03  4.90e-01  
  8  +4.0441e-01  +6.1666e-01  2.12e-01  4.91e-04  3.34e-02  6.39e-05  1.60e-03  6.11e-01  
  9  +3.8049e-01  +4.8760e-01  1.07e-01  2.36e-04  1.59e-02  3.51e-05  8.42e-04  5.62e-01  
 10  +3.6992e-01  +4.3709e-01  6.72e-02  1.44e-04  9.72e-03  2.46e-05  5.43e-04  4.97e-01  
 11  +3.5742e-01  +3.8000e-01  2.26e-02  4.69e-05  3.15e-03  8.73e-06  1.90e-04  7.10e-01  
 12  +3.5188e-01  +3.5605e-01  4.17e-03  8.57e-06  5.75e-04  1.83e-06  3.63e-05  9.45e-01  
 13  +3.5044e-01  +3.5054e-01  1.04e-04  2.11e-07  1.42e-05  4.51e-08  9.09e-07  9.78e-01  
 14  +3.5040e-01  +3.5040e-01  1.04e-06  2.11e-09  1.42e-07  4.51e-10  9.09e-09  9.90e-01  
 15  +3.5040e-01  +3.5040e-01  1.04e-08  2.11e-11  1.42e-09  4.51e-12  9.09e-11  9.90e-01  
 16  +3.5040e-01  +3.5040e-01  1.04e-10  2.11e-13  1.42e-11  4.52e-14  9.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7844ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:31 PM: Optimal value: 3.504e-01
(CVXPY) Sep 20 03:11:31 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 11, Objective: 0.3504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:31 PM: Your problem has 605 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 605
  constraints   = 1105
  nnz(P)        = 0
  nnz(A)        = 7612
  cones (total) = 1
    : Nonnegative = 1,  numel = 1105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0147e+02  5.01e+02  9.56e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.7904e-01  +1.0648e+02  1.06e+02  4.06e-01  2.01e+01  3.84e-03  5.58e-01  6.05e-01  
  2  +5.2936e-01  +1.1811e+01  1.13e+01  1.20e-01  7.56e+00  1.49e-02  2.26e-01  9.68e-01  
  3  +5.0338e-01  +2.5222e+00  2.02e+00  4.24e-02  2.73e+00  3.55e-05  1.69e-01  7.18e-01  
  4  +4.9962e-01  +1.2210e+00  7.21e-01  1.37e-02  9.23e-01  2.71e-05  5.26e-02  7.18e-01  
  5  +4.7960e-01  +1.2473e+00  7.68e-01  2.85e-03  1.99e-01  1.73e-04  7.66e-03  9.17e-01  
  6  +4.6012e-01  +1.0694e+00  6.09e-01  1.64e-03  1.14e-01  1.83e-04  4.53e-03  4.87e-01  
  7  +4.4309e-01  +8.9423e-01  4.51e-01  1.17e-03  8.05e-02  1.46e-04  3.39e-03  4.70e-01  
  8  +4.0840e-01  +6.4507e-01  2.37e-01  5.52e-04  3.76e-02  7.25e-05  1.77e-03  5.61e-01  
  9  +3.8136e-01  +4.9209e-01  1.11e-01  2.46e-04  1.66e-02  3.53e-05  8.74e-04  5.87e-01  
 10  +3.7044e-01  +4.3993e-01  6.95e-02  1.50e-04  1.01e-02  2.49e-05  5.61e-04  4.99e-01  
 11  +3.5840e-01  +3.8421e-01  2.58e-02  5.38e-05  3.61e-03  1.02e-05  2.16e-04  7.07e-01  
 12  +3.5219e-01  +3.5731e-01  5.12e-03  1.05e-05  7.05e-04  2.29e-06  4.45e-05  9.49e-01  
 13  +3.5046e-01  +3.5062e-01  1.63e-04  3.33e-07  2.23e-05  7.25e-08  1.43e-06  9.72e-01  
 14  +3.5040e-01  +3.5040e-01  1.63e-06  3.34e-09  2.24e-07  7.26e-10  1.44e-08  9.90e-01  
 15  +3.5040e-01  +3.5040e-01  1.63e-08  3.34e-11  2.24e-09  7.26e-12  1.44e-10  9.90e-01  
 16  +3.5040e-01  +3.5040e-01  1.63e-10  3.34e-13  2.24e-11  7.26e-14  1.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.5681ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:31 PM: Optimal value: 3.504e-01
(CVXPY) Sep 20 03:11:31 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 12, Objective: 0.3504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:31 PM: Your problem has 607 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 607
  constraints   = 1107
  nnz(P)        = 0
  nnz(A)        = 7627
  cones (total) = 1
    : Nonnegative = 1,  numel = 1107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0147e+02  5.01e+02  9.57e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.7884e-01  +1.0651e+02  1.06e+02  4.07e-01  2.01e+01  3.84e-03  5.58e-01  6.05e-01  
  2  +5.2924e-01  +1.1788e+01  1.13e+01  1.20e-01  7.53e+00  1.49e-02  2.26e-01  9.70e-01  
  3  +5.0336e-01  +2.5182e+00  2.01e+00  4.23e-02  2.72e+00  3.58e-05  1.68e-01  7.24e-01  
  4  +4.9957e-01  +1.2266e+00  7.27e-01  1.37e-02  9.22e-01  2.79e-05  5.19e-02  7.21e-01  
  5  +4.7971e-01  +1.2581e+00  7.78e-01  2.90e-03  2.03e-01  1.74e-04  7.80e-03  9.21e-01  
  6  +4.5987e-01  +1.0705e+00  6.11e-01  1.64e-03  1.14e-01  1.83e-04  4.56e-03  4.97e-01  
  7  +4.4270e-01  +8.9600e-01  4.53e-01  1.17e-03  8.04e-02  1.48e-04  3.40e-03  4.79e-01  
  8  +4.0795e-01  +6.4279e-01  2.35e-01  5.49e-04  3.74e-02  7.20e-05  1.77e-03  5.70e-01  
  9  +3.8270e-01  +5.0043e-01  1.18e-01  2.63e-04  1.77e-02  3.69e-05  9.30e-04  5.41e-01  
 10  +3.7081e-01  +4.4345e-01  7.26e-02  1.56e-04  1.05e-02  2.53e-05  5.85e-04  4.85e-01  
 11  +3.5977e-01  +3.9119e-01  3.14e-02  6.61e-05  4.43e-03  1.24e-05  2.65e-04  6.87e-01  
 12  +3.5275e-01  +3.6007e-01  7.32e-03  1.53e-05  1.02e-03  2.96e-06  6.46e-05  7.97e-01  
 13  +3.5216e-01  +3.5749e-01  5.33e-03  1.09e-05  7.33e-04  2.26e-06  4.63e-05  4.19e-01  
 14  +3.5126e-01  +3.5350e-01  2.24e-03  4.60e-06  3.08e-04  1.06e-06  1.96e-05  9.90e-01  
 15  +3.5042e-01  +3.5048e-01  5.82e-05  1.19e-07  7.96e-06  2.63e-08  5.12e-07  9.82e-01  
 16  +3.5040e-01  +3.5040e-01  5.84e-07  1.19e-09  7.99e-08  2.64e-10  5.14e-09  9.90e-01  
 17  +3.5040e-01  +3.5040e-01  5.84e-09  1.19e-11  7.99e-10  2.64e-12  5.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1326ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:31 PM: Optimal value: 3.504e-01
(CVXPY) Sep 20 03:11:31 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.646
  Our objective: 0.2919999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.01)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.5855753421783447
Best over terms:
  Our final objective: 0.17999999999999997
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.17999999999999997
  Highest accruacy: 0.59
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

