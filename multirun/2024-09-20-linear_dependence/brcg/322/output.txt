Command:
python test_script.py -s linear_dependence -d 9 -n 10 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:30 PM: Your problem has 24 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:30 PM: Finished problem compilation (took 3.467e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 24
  constraints   = 29
  nnz(P)        = 0
  nnz(A)        = 79
  cones (total) = 1
    : Nonnegative = 1,  numel = 29

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.0123e-01  +6.5131e+00  6.11e+00  7.73e-01  2.75e+00  1.00e+00  1.37e+00   ------   
  1  +3.2789e-01  +1.0163e+00  6.88e-01  2.43e-01  1.02e+00  3.32e-03  5.52e-01  8.23e-01  
  2  +1.7287e-01  +4.2298e-01  2.50e-01  7.51e-02  3.42e-01  1.00e-02  2.42e-01  7.22e-01  
  3  +1.1129e-01  +1.5556e-01  4.43e-02  1.08e-02  5.40e-02  3.51e-03  4.74e-02  9.90e-01  
  4  +1.0044e-01  +1.0139e-01  9.46e-04  2.30e-04  1.16e-03  7.47e-05  1.06e-03  9.78e-01  
  5  +1.0021e-01  +1.0023e-01  1.92e-05  4.98e-06  2.48e-05  7.32e-07  2.31e-05  9.78e-01  
  6  +1.0020e-01  +1.0020e-01  2.21e-07  6.03e-08  2.93e-07  9.23e-09  2.86e-07  9.88e-01  
  7  +1.0020e-01  +1.0020e-01  2.20e-09  6.03e-10  2.93e-09  9.22e-11  2.86e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:30 PM: Optimal value: 1.002e-01
(CVXPY) Sep 20 03:16:30 PM: Compilation took 3.467e-03 seconds
(CVXPY) Sep 20 03:16:30 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:30 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:30 PM: Finished problem compilation (took 2.995e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 111
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3892e-01  +6.6768e+00  6.34e+00  8.03e-01  2.85e+00  1.00e+00  1.39e+00   ------   
  1  +1.7516e-01  +9.0530e-01  7.30e-01  2.64e-01  1.02e+00  3.50e-03  5.40e-01  8.17e-01  
  2  -1.1778e-02  +1.7163e-01  1.83e-01  5.41e-02  2.44e-01  1.59e-02  1.80e-01  9.90e-01  
  3  +7.5955e-04  +6.3826e-03  5.62e-03  1.61e-03  7.59e-03  8.40e-04  5.98e-03  9.74e-01  
  4  +2.1436e-04  +3.0185e-04  8.75e-05  2.70e-05  1.26e-04  8.30e-06  1.01e-04  9.83e-01  
  5  +2.0030e-04  +2.0312e-04  2.81e-06  1.03e-06  4.46e-06  1.68e-07  4.00e-06  9.63e-01  
  6  +2.0000e-04  +2.0003e-04  2.84e-08  1.04e-08  4.52e-08  1.71e-09  4.07e-08  9.90e-01  
  7  +2.0000e-04  +2.0000e-04  2.84e-10  1.04e-10  4.52e-10  1.71e-11  4.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:30 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 03:16:30 PM: Compilation took 2.995e-03 seconds
(CVXPY) Sep 20 03:16:30 PM: Solver (including time spent in interface) took 9.887e-04 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:30 PM: Your problem has 37 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:30 PM: Finished problem compilation (took 3.286e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 37
  constraints   = 42
  nnz(P)        = 0
  nnz(A)        = 122
  cones (total) = 1
    : Nonnegative = 1,  numel = 42

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.2248e-01  +6.6040e+00  6.28e+00  8.10e-01  2.90e+00  1.00e+00  1.37e+00   ------   
  1  +1.3924e-01  +8.6955e-01  7.30e-01  2.73e-01  1.03e+00  3.55e-03  5.29e-01  8.13e-01  
  2  -1.1490e-02  +1.5932e-01  1.71e-01  5.83e-02  2.63e-01  9.74e-03  1.71e-01  8.60e-01  
  3  +7.6594e-04  +6.3179e-03  5.55e-03  1.94e-03  8.99e-03  6.11e-04  6.39e-03  9.68e-01  
  4  +2.1147e-04  +3.2858e-04  1.17e-04  4.35e-05  1.99e-04  8.61e-06  1.43e-04  9.78e-01  
  5  +1.9759e-04  +2.1591e-04  1.83e-05  8.13e-06  3.35e-05  1.19e-06  2.64e-05  8.47e-01  
  6  +1.9997e-04  +2.0020e-04  2.34e-07  1.05e-07  4.29e-07  1.50e-08  3.41e-07  9.88e-01  
  7  +2.0000e-04  +2.0000e-04  2.34e-09  1.05e-09  4.29e-09  1.50e-10  3.41e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:30 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 03:16:30 PM: Compilation took 3.286e-03 seconds
(CVXPY) Sep 20 03:16:30 PM: Solver (including time spent in interface) took 7.119e-04 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x3 = 1 AND x4 = 0 AND x6 = 1) <-- (term's our objective: 0.6)
 OR (x3 = 1 AND x8 = 1)            <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9237806797027588
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

