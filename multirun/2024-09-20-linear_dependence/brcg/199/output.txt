Command:
python test_script.py -s linear_dependence -d 5 -n 50000 --seed 21 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29264
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.29264
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:25 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:25 PM: Finished problem compilation (took 8.196e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.23e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4640e-01  +7.1474e+02  7.14e+02  1.49e-01  6.23e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1133e-01  +1.7286e+02  1.72e+02  1.35e-01  5.64e+01  2.40e-05  2.33e-01  8.11e-02  
  4  +5.0044e-01  +6.0348e+00  5.53e+00  1.64e-02  6.73e+00  2.64e-06  1.78e-01  6.27e-01  
  5  +5.0004e-01  +1.6982e+00  1.20e+00  3.68e-03  1.54e+00  3.72e-05  1.16e-01  9.90e-01  
  6  +4.9997e-01  +7.6753e-01  2.68e-01  8.09e-04  3.39e-01  3.93e-05  1.30e-02  8.97e-01  
  7  +4.9890e-01  +7.7454e-01  2.76e-01  2.28e-04  9.71e-02  7.61e-04  6.82e-04  9.49e-01  
  8  +4.8805e-01  +7.8703e-01  2.99e-01  2.82e-05  1.20e-02  6.92e-03  7.74e-05  9.17e-01  
  9  +4.6845e-01  +7.3057e-01  2.62e-01  1.19e-05  5.08e-03  1.12e-02  3.34e-05  6.34e-01  
 10  +4.3990e-01  +5.6452e-01  1.25e-01  7.43e-06  3.12e-03  7.45e-05  2.49e-05  4.80e-01  
 11  +4.0939e-01  +4.2946e-01  2.01e-02  1.02e-06  4.27e-04  4.30e-06  3.85e-06  8.73e-01  
 12  +4.0306e-01  +4.0434e-01  1.28e-03  5.79e-08  2.43e-05  1.60e-07  2.53e-07  9.60e-01  
 13  +4.0262e-01  +4.0264e-01  1.35e-05  6.00e-10  2.52e-07  1.67e-09  2.68e-09  9.90e-01  
 14  +4.0262e-01  +4.0262e-01  1.35e-07  6.00e-12  2.52e-09  1.67e-11  2.69e-11  9.90e-01  
 15  +4.0262e-01  +4.0262e-01  1.36e-09  6.04e-14  2.54e-11  2.35e-13  3.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 233.5629ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:25 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:25 PM: Optimal value: 4.026e-01
(CVXPY) Sep 20 03:08:25 PM: Compilation took 8.196e-02 seconds
(CVXPY) Sep 20 03:08:25 PM: Solver (including time spent in interface) took 2.588e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4026
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:25 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:25 PM: Finished problem compilation (took 1.248e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 247165
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  2.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +5.0088e+03  5.01e+03  3.68e-01  1.30e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4636e-01  +7.1426e+02  7.14e+02  1.49e-01  6.59e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1130e-01  +1.7255e+02  1.72e+02  1.35e-01  5.96e+01  2.40e-05  2.32e-01  8.17e-02  
  4  +5.0040e-01  +5.5982e+00  5.10e+00  1.52e-02  6.58e+00  2.68e-06  1.73e-01  6.76e-01  
  5  +5.0006e-01  +1.8753e+00  1.38e+00  4.22e-03  1.86e+00  3.46e-05  1.02e-01  9.90e-01  
  6  +4.9999e-01  +9.9092e-01  4.91e-01  1.48e-03  6.56e-01  3.68e-05  2.09e-02  8.04e-01  
  7  +4.9905e-01  +1.0480e+00  5.49e-01  4.10e-04  1.86e-01  6.95e-04  1.12e-03  9.60e-01  
  8  +4.8960e-01  +9.9781e-01  5.08e-01  4.37e-05  1.99e-02  6.06e-03  1.10e-04  9.42e-01  
  9  +4.7643e-01  +9.4593e-01  4.70e-01  2.04e-05  9.26e-03  1.04e-02  5.14e-05  5.76e-01  
 10  +4.5865e-01  +8.3028e-01  3.72e-01  1.42e-05  6.41e-03  6.88e-03  3.69e-05  4.21e-01  
 11  +4.0740e-01  +5.5252e-01  1.45e-01  5.50e-06  2.46e-03  6.15e-05  1.64e-05  7.09e-01  
 12  +3.6310e-01  +3.8490e-01  2.18e-02  7.97e-07  3.54e-04  5.46e-07  2.78e-06  8.69e-01  
 13  +3.5398e-01  +3.5442e-01  4.43e-04  1.61e-08  7.13e-06  8.02e-09  5.87e-08  9.81e-01  
 14  +3.5378e-01  +3.5379e-01  4.43e-06  1.61e-10  7.13e-08  8.01e-11  5.87e-10  9.90e-01  
 15  +3.5378e-01  +3.5378e-01  4.43e-08  1.61e-12  7.13e-10  8.11e-13  5.94e-12  9.90e-01  
 16  +3.5378e-01  +3.5378e-01  4.43e-10  1.60e-14  7.13e-12  8.22e-15  6.02e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 304.0792ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:26 PM: Optimal value: 3.538e-01
(CVXPY) Sep 20 03:08:26 PM: Compilation took 1.248e-01 seconds
(CVXPY) Sep 20 03:08:26 PM: Solver (including time spent in interface) took 3.319e-01 seconds
FULL MODEL:
  Accruacy: 0.64632
  Our objective: 0.29263999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.29264)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.589951276779175
Best over terms:
  Our final objective: 0.29263999999999996
    Its accruacy: 0.64632
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29263999999999996
  Highest accruacy: 0.64632
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

