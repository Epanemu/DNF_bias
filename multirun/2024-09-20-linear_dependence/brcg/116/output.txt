Command:
python test_script.py -s linear_dependence -d 3 -n 50000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30504
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 3.

Computed total variation: 0.30504
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:17 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:17 PM: Finished problem compilation (took 5.424e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 150007
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.77e+02  1.00e+00  1.00e+00   ------   
  1  +6.2016e-01  +4.6339e+03  4.63e+03  3.09e-01  9.24e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5597e-01  +7.9391e+02  7.93e+02  1.40e-01  5.00e+01  6.67e-03  2.21e-01  6.61e-01  
  3  +5.1044e-01  +1.4826e+02  1.48e+02  1.26e-01  4.47e+01  1.25e-05  2.20e-01  4.47e-02  
  4  +5.0006e-01  +1.8054e+00  1.31e+00  3.89e-03  1.38e+00  1.22e-06  1.62e-01  9.90e-01  
  5  +4.9999e-01  +7.9116e-01  2.91e-01  8.67e-04  3.08e-01  8.12e-07  3.22e-02  8.41e-01  
  6  +4.9730e-01  +1.1312e+00  6.34e-01  2.90e-04  1.05e-01  6.86e-05  8.02e-04  9.86e-01  
  7  +4.7446e-01  +9.2377e-01  4.49e-01  2.55e-05  9.24e-03  5.33e-04  6.79e-05  9.16e-01  
  8  +4.4008e-01  +6.2800e-01  1.88e-01  1.03e-05  3.69e-03  2.47e-05  3.20e-05  6.77e-01  
  9  +4.0674e-01  +4.3896e-01  3.22e-02  1.67e-06  5.96e-04  2.19e-07  6.20e-06  8.58e-01  
 10  +3.9840e-01  +3.9995e-01  1.55e-03  7.94e-08  2.82e-05  9.18e-09  3.10e-07  9.52e-01  
 11  +3.9793e-01  +3.9812e-01  1.87e-04  8.35e-09  2.97e-06  1.29e-09  3.75e-08  9.36e-01  
 12  +3.9788e-01  +3.9788e-01  1.91e-06  8.53e-11  3.03e-08  1.32e-11  3.85e-10  9.90e-01  
 13  +3.9788e-01  +3.9788e-01  1.91e-08  8.53e-13  3.03e-10  1.32e-13  3.85e-12  9.90e-01  
 14  +3.9788e-01  +3.9788e-01  1.91e-10  8.55e-15  3.03e-12  1.32e-15  3.85e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 180.1725ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:17 PM: Optimal value: 3.979e-01
(CVXPY) Sep 20 03:05:17 PM: Compilation took 5.424e-02 seconds
(CVXPY) Sep 20 03:05:17 PM: Solver (including time spent in interface) took 2.083e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3979
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:17 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:17 PM: Finished problem compilation (took 6.454e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 177789
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5003e+04  2.50e+04  9.93e-01  1.89e+02  1.00e+00  1.00e+00   ------   
  1  +6.2011e-01  +4.6346e+03  4.63e+03  3.09e-01  9.84e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5591e-01  +7.9329e+02  7.93e+02  1.40e-01  5.32e+01  6.67e-03  2.21e-01  6.62e-01  
  3  +5.1040e-01  +1.4782e+02  1.47e+02  1.26e-01  4.76e+01  1.25e-05  2.20e-01  4.52e-02  
  4  +5.0019e-01  +3.8029e+00  3.30e+00  9.83e-03  3.66e+00  1.47e-06  1.92e-01  4.70e-01  
  5  +5.0003e-01  +1.4781e+00  9.78e-01  2.91e-03  1.10e+00  9.14e-07  1.14e-01  5.73e-01  
  6  +5.0000e-01  +1.2355e+00  7.35e-01  2.18e-03  8.24e-01  1.08e-06  5.39e-02  5.63e-01  
  7  +4.9934e-01  +9.7739e-01  4.78e-01  6.49e-04  2.50e-01  1.37e-05  2.00e-03  9.87e-01  
  8  +4.8514e-01  +9.0099e-01  4.16e-01  3.30e-05  1.28e-02  2.83e-04  8.26e-05  9.59e-01  
  9  +4.8312e-01  +8.7807e-01  3.95e-01  3.07e-05  1.19e-02  2.20e-04  7.79e-05  2.17e-01  
 10  +4.7288e-01  +8.4492e-01  3.72e-01  2.07e-05  8.01e-03  2.62e-04  5.28e-05  3.71e-01  
 11  +4.7280e-01  +8.4426e-01  3.71e-01  2.07e-05  8.01e-03  2.61e-04  5.28e-05  1.70e-03  
 12  +4.6327e-01  +7.9813e-01  3.35e-01  1.71e-05  6.60e-03  1.08e-04  4.77e-05  4.85e-01  
 13  +4.5402e-01  +7.5185e-01  2.98e-01  1.47e-05  5.63e-03  8.14e-05  4.16e-05  2.32e-01  
 14  +4.3499e-01  +6.6921e-01  2.34e-01  1.08e-05  4.13e-03  3.45e-05  3.13e-05  5.20e-01  
 15  +4.0199e-01  +5.5064e-01  1.49e-01  5.86e-06  2.23e-03  1.93e-05  1.77e-05  5.12e-01  
 16  +3.9560e-01  +5.2725e-01  1.32e-01  5.11e-06  1.95e-03  1.50e-05  1.58e-05  2.18e-01  
 17  +3.5788e-01  +3.8432e-01  2.64e-02  9.68e-07  3.67e-04  1.41e-07  3.37e-06  9.28e-01  
 18  +3.4795e-01  +3.4888e-01  9.22e-04  3.36e-08  1.27e-05  6.73e-09  1.23e-07  9.77e-01  
 19  +3.4758e-01  +3.4759e-01  9.28e-06  3.38e-10  1.28e-07  6.80e-11  1.24e-09  9.90e-01  
 20  +3.4758e-01  +3.4758e-01  9.27e-08  3.38e-12  1.28e-09  6.81e-13  1.25e-11  9.90e-01  
 21  +3.4758e-01  +3.4758e-01  9.28e-10  3.39e-14  1.28e-11  6.81e-15  1.25e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 343.0886ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:18 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:18 PM: Optimal value: 3.476e-01
(CVXPY) Sep 20 03:05:18 PM: Compilation took 6.454e-02 seconds
(CVXPY) Sep 20 03:05:18 PM: Solver (including time spent in interface) took 3.642e-01 seconds
FULL MODEL:
  Accruacy: 0.65252
  Our objective: 0.30504

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.30504)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8714487552642822
Best over terms:
  Our final objective: 0.30504
    Its accruacy: 0.65252
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30504
  Highest accruacy: 0.65252
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

