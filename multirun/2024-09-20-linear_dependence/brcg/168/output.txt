Command:
python test_script.py -s linear_dependence -d 5 -n 50 --seed 34 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.36000000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.6
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:10 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:10 PM: Finished problem compilation (took 5.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8968e-01  +2.6379e+01  2.59e+01  8.20e-01  5.86e+00  1.00e+00  1.10e+00   ------   
  1  +5.7870e-01  +5.4183e+00  4.84e+00  3.01e-01  3.10e+00  3.92e-03  5.43e-01  6.57e-01  
  2  +4.8644e-01  +1.1998e+00  7.13e-01  6.56e-02  7.99e-01  1.28e-02  1.76e-01  8.90e-01  
  3  +4.0433e-01  +7.6030e-01  3.56e-01  1.87e-02  2.35e-01  8.87e-03  6.02e-02  7.31e-01  
  4  +3.5784e-01  +4.2004e-01  6.22e-02  3.33e-03  4.03e-02  9.00e-04  1.45e-02  8.08e-01  
  5  +3.4121e-01  +3.4592e-01  4.71e-03  2.26e-04  2.75e-03  5.58e-05  1.28e-03  9.50e-01  
  6  +3.4011e-01  +3.4016e-01  4.95e-05  2.36e-06  2.87e-05  5.82e-07  1.36e-05  9.89e-01  
  7  +3.4010e-01  +3.4010e-01  4.95e-07  2.36e-08  2.87e-07  5.82e-09  1.36e-07  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  4.95e-09  2.36e-10  2.87e-09  5.82e-11  1.36e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 183.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:10 PM: Optimal value: 3.401e-01
(CVXPY) Sep 20 03:07:10 PM: Compilation took 5.011e-03 seconds
(CVXPY) Sep 20 03:07:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:10 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:10 PM: Finished problem compilation (took 4.120e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 268
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8163e-01  +2.6725e+01  2.62e+01  8.34e-01  5.89e+00  1.00e+00  1.12e+00   ------   
  1  +5.2868e-01  +5.4587e+00  4.93e+00  3.11e-01  3.02e+00  3.96e-03  5.50e-01  6.56e-01  
  2  +4.1553e-01  +1.2810e+00  8.65e-01  6.09e-02  7.44e-01  1.41e-02  1.64e-01  8.76e-01  
  3  +3.1960e-01  +6.6033e-01  3.41e-01  1.72e-02  2.12e-01  6.69e-03  5.33e-02  7.30e-01  
  4  +2.7176e-01  +4.8538e-01  2.14e-01  8.52e-03  1.11e-01  4.64e-03  2.74e-02  5.75e-01  
  5  +2.2536e-01  +2.9169e-01  6.63e-02  2.69e-03  3.48e-02  5.40e-04  9.24e-03  9.90e-01  
  6  +2.0264e-01  +2.0879e-01  6.16e-03  2.35e-04  3.07e-03  5.20e-05  8.39e-04  9.18e-01  
  7  +2.0061e-01  +2.0109e-01  4.85e-04  1.89e-05  2.43e-04  3.15e-06  6.91e-05  9.18e-01  
  8  +2.0043e-01  +2.0051e-01  7.44e-05  3.01e-06  3.74e-05  5.14e-07  1.22e-05  8.61e-01  
  9  +2.0040e-01  +2.0040e-01  1.17e-06  4.80e-08  5.92e-07  7.21e-09  1.99e-07  9.84e-01  
 10  +2.0040e-01  +2.0040e-01  1.17e-08  4.80e-10  5.91e-09  7.20e-11  1.99e-09  9.90e-01  
 11  +2.0040e-01  +2.0040e-01  1.17e-10  4.81e-12  5.93e-11  7.21e-13  2.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 246.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:10 PM: Optimal value: 2.004e-01
(CVXPY) Sep 20 03:07:10 PM: Compilation took 4.120e-03 seconds
(CVXPY) Sep 20 03:07:10 PM: Solver (including time spent in interface) took 8.667e-04 seconds
Iteration: 2, Objective: 0.2004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:10 PM: Your problem has 47 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:10 PM: Finished problem compilation (took 3.177e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 47
  constraints   = 72
  nnz(P)        = 0
  nnz(A)        = 280
  cones (total) = 1
    : Nonnegative = 1,  numel = 72

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8054e-01  +2.6701e+01  2.62e+01  8.36e-01  5.99e+00  1.00e+00  1.12e+00   ------   
  1  +5.2337e-01  +5.5028e+00  4.98e+00  3.19e-01  3.10e+00  3.93e-03  5.63e-01  6.49e-01  
  2  +4.1044e-01  +1.3023e+00  8.92e-01  6.34e-02  7.77e-01  1.52e-02  1.71e-01  8.81e-01  
  3  +3.1058e-01  +7.5993e-01  4.49e-01  2.12e-02  2.64e-01  9.25e-03  6.57e-02  7.34e-01  
  4  +2.3268e-01  +3.3643e-01  1.04e-01  4.45e-03  5.53e-02  1.58e-03  1.55e-02  8.23e-01  
  5  +2.0320e-01  +2.1064e-01  7.45e-03  3.21e-04  3.99e-03  4.87e-05  1.18e-03  9.84e-01  
  6  +2.0055e-01  +2.0095e-01  3.93e-04  1.71e-05  2.11e-04  1.89e-06  6.42e-05  9.46e-01  
  7  +2.0044e-01  +2.0055e-01  1.08e-04  4.85e-06  5.90e-05  8.69e-07  1.92e-05  8.41e-01  
  8  +2.0040e-01  +2.0040e-01  1.43e-06  6.47e-08  7.85e-07  1.10e-08  2.59e-07  9.87e-01  
  9  +2.0040e-01  +2.0040e-01  1.43e-08  6.47e-10  7.85e-09  1.10e-10  2.59e-09  9.90e-01  
 10  +2.0040e-01  +2.0040e-01  1.43e-10  6.47e-12  7.85e-11  1.10e-12  2.59e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 258.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:10 PM: Optimal value: 2.004e-01
(CVXPY) Sep 20 03:07:10 PM: Compilation took 3.177e-03 seconds
(CVXPY) Sep 20 03:07:10 PM: Solver (including time spent in interface) took 1.038e-03 seconds
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.24)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1)            <-- (term's our objective: 0.24)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7554194927215576
Best over terms:
  Our final objective: 0.24
    Its accruacy: 0.62
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.24
  Highest accruacy: 0.62
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

