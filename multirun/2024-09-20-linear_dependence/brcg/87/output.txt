Command:
python test_script.py -s linear_dependence -d 3 -n 50 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24000000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 3.

Computed total variation: 0.36
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:32 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:32 PM: Finished problem compilation (took 4.238e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 157
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8882e-01  +2.5928e+01  2.54e+01  8.09e-01  5.06e+00  1.00e+00  1.08e+00   ------   
  1  +6.0646e-01  +5.0923e+00  4.49e+00  2.56e-01  2.42e+00  4.19e-03  4.74e-01  6.96e-01  
  2  +5.1641e-01  +1.0123e+00  4.96e-01  4.78e-02  5.10e-01  8.90e-03  1.34e-01  9.07e-01  
  3  +4.7637e-01  +9.8269e-01  5.06e-01  2.46e-02  2.71e-01  1.27e-02  7.85e-02  5.08e-01  
  4  +4.1405e-01  +5.6541e-01  1.51e-01  6.97e-03  7.60e-02  1.79e-03  2.99e-02  7.01e-01  
  5  +3.8303e-01  +3.9527e-01  1.22e-02  5.80e-04  6.27e-03  1.23e-04  3.23e-03  9.45e-01  
  6  +3.8013e-01  +3.8026e-01  1.30e-04  6.16e-06  6.65e-05  1.25e-06  3.54e-05  9.89e-01  
  7  +3.8010e-01  +3.8010e-01  1.30e-06  6.16e-08  6.65e-07  1.25e-08  3.54e-07  9.90e-01  
  8  +3.8010e-01  +3.8010e-01  1.30e-08  6.16e-10  6.65e-09  1.25e-10  3.54e-09  9.90e-01  
  9  +3.8010e-01  +3.8010e-01  1.30e-10  6.16e-12  6.65e-11  1.25e-12  3.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 179.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:32 PM: Optimal value: 3.801e-01
(CVXPY) Sep 20 03:04:32 PM: Compilation took 4.238e-03 seconds
(CVXPY) Sep 20 03:04:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:32 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:32 PM: Finished problem compilation (took 3.807e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 208
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7579e-01  +2.6238e+01  2.58e+01  8.23e-01  5.44e+00  1.00e+00  1.13e+00   ------   
  1  +5.6156e-01  +5.2689e+00  4.71e+00  2.85e-01  2.68e+00  4.06e-03  5.28e-01  6.74e-01  
  2  +4.7982e-01  +1.3043e+00  8.24e-01  6.71e-02  7.45e-01  1.09e-02  1.84e-01  8.14e-01  
  3  +3.8731e-01  +7.9799e-01  4.11e-01  2.21e-02  2.48e-01  6.13e-03  7.60e-02  6.96e-01  
  4  +3.4271e-01  +4.6930e-01  1.27e-01  7.13e-03  7.84e-02  1.64e-03  3.17e-02  6.23e-01  
  5  +3.2144e-01  +3.2655e-01  5.11e-03  2.96e-04  3.22e-03  5.16e-05  1.64e-03  9.61e-01  
  6  +3.2049e-01  +3.2148e-01  9.89e-04  5.74e-05  6.24e-04  1.02e-05  3.18e-04  8.13e-01  
  7  +3.2030e-01  +3.2068e-01  3.78e-04  1.94e-05  2.13e-04  3.22e-06  1.17e-04  7.95e-01  
  8  +3.2020e-01  +3.2021e-01  6.77e-06  3.44e-07  3.79e-06  5.28e-08  2.10e-06  9.85e-01  
  9  +3.2020e-01  +3.2020e-01  6.77e-08  3.44e-09  3.79e-08  5.28e-10  2.10e-08  9.90e-01  
 10  +3.2020e-01  +3.2020e-01  6.77e-10  3.44e-11  3.79e-10  5.28e-12  2.10e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 197.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:32 PM: Optimal value: 3.202e-01
(CVXPY) Sep 20 03:04:32 PM: Compilation took 3.807e-03 seconds
(CVXPY) Sep 20 03:04:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.68
  Our objective: 0.36

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.24)
 OR (x1 = 1 AND x2 = 1) <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9283139705657959
Best over terms:
  Our final objective: 0.24000000000000002
    Its accruacy: 0.62
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.24000000000000002
  Highest accruacy: 0.62
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

