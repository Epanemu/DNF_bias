Command:
python test_script.py -s linear_dependence -d 8 -n 100 --seed 34 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.8600000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 4.268e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9750e-01  +5.1255e+01  5.08e+01  8.71e-01  9.95e+00  1.00e+00  1.04e+00   ------   
  1  +5.7829e-01  +1.1128e+01  1.05e+01  3.69e-01  5.94e+00  3.79e-03  5.83e-01  6.01e-01  
  2  +5.1493e-01  +1.7137e+00  1.20e+00  8.93e-02  1.78e+00  1.71e-02  2.29e-01  9.90e-01  
  3  +4.8991e-01  +8.4060e-01  3.51e-01  1.97e-02  4.14e-01  8.80e-03  6.09e-02  8.27e-01  
  4  +4.6016e-01  +6.6036e-01  2.00e-01  6.90e-03  1.46e-01  6.65e-03  2.32e-02  6.59e-01  
  5  +4.4484e-01  +5.4342e-01  9.86e-02  3.13e-03  6.54e-02  2.91e-03  1.15e-02  5.64e-01  
  6  +4.3303e-01  +4.8572e-01  5.27e-02  1.29e-03  2.71e-02  1.21e-03  5.63e-03  6.75e-01  
  7  +4.2227e-01  +4.3005e-01  7.78e-03  1.73e-04  3.63e-03  1.18e-04  8.61e-04  8.86e-01  
  8  +4.2014e-01  +4.2028e-01  1.38e-04  3.01e-06  6.31e-05  1.27e-06  1.56e-05  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  1.38e-06  3.01e-08  6.30e-07  1.27e-08  1.56e-07  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  1.38e-08  3.01e-10  6.30e-09  1.27e-10  1.56e-09  9.90e-01  
 11  +4.2010e-01  +4.2010e-01  1.38e-10  3.01e-12  6.30e-11  1.27e-12  1.56e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 410.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 03:13:43 PM: Compilation took 4.268e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 3.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 667
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9333e-01  +5.1920e+01  5.14e+01  8.77e-01  9.96e+00  1.00e+00  1.06e+00   ------   
  1  +5.4869e-01  +1.1145e+01  1.06e+01  3.71e-01  5.75e+00  3.82e-03  5.85e-01  6.07e-01  
  2  +4.8075e-01  +2.2717e+00  1.79e+00  1.01e-01  2.01e+00  1.91e-02  2.42e-01  8.92e-01  
  3  +4.0173e-01  +1.0854e+00  6.84e-01  2.32e-02  4.89e-01  1.24e-02  6.44e-02  8.20e-01  
  4  +3.5109e-01  +6.0398e-01  2.53e-01  7.55e-03  1.56e-01  4.44e-03  2.38e-02  6.71e-01  
  5  +3.2955e-01  +4.5509e-01  1.26e-01  3.58e-03  7.48e-02  2.10e-03  1.19e-02  5.36e-01  
  6  +3.1717e-01  +3.7426e-01  5.71e-02  1.45e-03  3.14e-02  1.05e-03  4.87e-03  6.45e-01  
  7  +3.0890e-01  +3.5290e-01  4.40e-02  7.42e-04  1.77e-02  1.02e-03  2.54e-03  5.53e-01  
  8  +2.9546e-01  +3.0548e-01  1.00e-02  1.60e-04  3.90e-03  1.06e-05  5.72e-04  9.70e-01  
  9  +2.9063e-01  +2.9086e-01  2.30e-04  3.59e-06  8.75e-05  9.45e-07  1.31e-05  9.89e-01  
 10  +2.9050e-01  +2.9050e-01  3.02e-06  4.79e-08  1.15e-06  9.45e-09  1.77e-07  9.87e-01  
 11  +2.9050e-01  +2.9050e-01  3.01e-08  4.80e-10  1.15e-08  9.45e-11  1.77e-09  9.90e-01  
 12  +2.9050e-01  +2.9050e-01  3.02e-10  4.80e-12  1.15e-10  9.45e-13  1.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 463.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 2.905e-01
(CVXPY) Sep 20 03:13:43 PM: Compilation took 3.001e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2905
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 2.437e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 747
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8742e-01  +5.3001e+01  5.25e+01  8.82e-01  9.88e+00  1.00e+00  1.09e+00   ------   
  1  +5.1696e-01  +1.1417e+01  1.09e+01  3.81e-01  5.70e+00  3.81e-03  6.05e-01  6.02e-01  
  2  +4.3311e-01  +2.4335e+00  2.00e+00  9.57e-02  1.90e+00  2.23e-02  2.32e-01  9.16e-01  
  3  +3.3053e-01  +1.0272e+00  6.97e-01  2.23e-02  4.59e-01  1.13e-02  6.23e-02  7.93e-01  
  4  +2.7420e-01  +5.6858e-01  2.94e-01  8.03e-03  1.64e-01  4.25e-03  2.56e-02  6.80e-01  
  5  +2.4418e-01  +4.0032e-01  1.56e-01  3.76e-03  8.21e-02  2.10e-03  1.25e-02  6.51e-01  
  6  +2.2583e-01  +3.2349e-01  9.77e-02  2.04e-03  4.88e-02  1.38e-03  6.90e-03  5.00e-01  
  7  +2.1297e-01  +2.7588e-01  6.29e-02  1.22e-03  3.09e-02  7.34e-04  4.26e-03  5.26e-01  
  8  +1.9373e-01  +2.0146e-01  7.73e-03  1.44e-04  3.73e-03  5.48e-05  5.35e-04  9.09e-01  
  9  +1.9088e-01  +1.9106e-01  1.83e-04  3.45e-06  8.88e-05  7.61e-07  1.32e-05  9.76e-01  
 10  +1.9080e-01  +1.9080e-01  3.15e-06  6.12e-08  1.55e-06  1.22e-08  2.40e-07  9.83e-01  
 11  +1.9080e-01  +1.9080e-01  3.15e-08  6.13e-10  1.55e-08  1.22e-10  2.40e-09  9.90e-01  
 12  +1.9080e-01  +1.9080e-01  3.16e-10  6.13e-12  1.55e-10  1.22e-12  2.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 596.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 1.908e-01
(CVXPY) Sep 20 03:13:43 PM: Compilation took 2.437e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 5.116e-04 seconds
Iteration: 3, Objective: 0.1908
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 4.237e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 808
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8259e-01  +5.3442e+01  5.30e+01  8.86e-01  9.70e+00  1.00e+00  1.10e+00   ------   
  1  +4.7902e-01  +1.1559e+01  1.11e+01  3.82e-01  5.50e+00  3.88e-03  6.03e-01  6.01e-01  
  2  +3.6145e-01  +2.6082e+00  2.25e+00  9.02e-02  1.76e+00  2.38e-02  2.18e-01  9.08e-01  
  3  +2.6448e-01  +7.8842e-01  5.24e-01  1.71e-02  3.42e-01  7.36e-03  4.81e-02  8.32e-01  
  4  +2.2453e-01  +5.1751e-01  2.93e-01  9.00e-03  1.82e-01  3.76e-03  2.80e-02  5.24e-01  
  5  +1.9062e-01  +3.0356e-01  1.13e-01  3.03e-03  6.54e-02  1.54e-03  1.02e-02  7.05e-01  
  6  +1.7853e-01  +2.6962e-01  9.11e-02  2.06e-03  5.10e-02  1.16e-03  7.04e-03  4.67e-01  
  7  +1.6051e-01  +2.0841e-01  4.79e-02  9.65e-04  2.55e-02  4.78e-04  3.51e-03  6.33e-01  
  8  +1.4325e-01  +1.4825e-01  5.00e-03  9.39e-05  2.53e-03  3.16e-05  3.69e-04  9.18e-01  
  9  +1.4116e-01  +1.4129e-01  1.25e-04  2.39e-06  6.37e-05  3.61e-07  9.65e-06  9.74e-01  
 10  +1.4110e-01  +1.4110e-01  2.11e-06  4.15e-08  1.09e-06  6.79e-09  1.72e-07  9.84e-01  
 11  +1.4110e-01  +1.4110e-01  2.11e-08  4.15e-10  1.09e-08  6.79e-11  1.72e-09  9.90e-01  
 12  +1.4110e-01  +1.4110e-01  2.12e-10  4.16e-12  1.09e-10  6.80e-13  1.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 667.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 1.411e-01
(CVXPY) Sep 20 03:13:43 PM: Compilation took 4.237e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1411
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 6.292e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 845
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8143e-01  +5.3346e+01  5.29e+01  8.89e-01  9.46e+00  1.00e+00  1.10e+00   ------   
  1  +4.6105e-01  +1.1575e+01  1.11e+01  3.84e-01  5.26e+00  3.93e-03  5.98e-01  6.00e-01  
  2  +3.1813e-01  +2.9191e+00  2.60e+00  9.40e-02  1.75e+00  2.41e-02  2.25e-01  8.66e-01  
  3  +2.4081e-01  +8.5104e-01  6.10e-01  2.06e-02  3.95e-01  6.89e-03  5.73e-02  7.83e-01  
  4  +1.9167e-01  +5.1783e-01  3.26e-01  9.88e-03  1.90e-01  3.33e-03  3.10e-02  6.03e-01  
  5  +1.6260e-01  +3.1770e-01  1.55e-01  4.24e-03  8.60e-02  1.64e-03  1.41e-02  6.19e-01  
  6  +1.4938e-01  +2.6652e-01  1.17e-01  2.70e-03  6.18e-02  1.30e-03  9.13e-03  4.56e-01  
  7  +1.4052e-01  +2.3185e-01  9.13e-02  1.89e-03  4.73e-02  9.71e-04  6.52e-03  4.23e-01  
  8  +1.1768e-01  +1.3519e-01  1.75e-02  3.48e-04  8.78e-03  1.02e-04  1.28e-03  8.98e-01  
  9  +1.1165e-01  +1.1278e-01  1.13e-03  2.24e-05  5.64e-04  5.03e-06  8.54e-05  9.35e-01  
 10  +1.1124e-01  +1.1133e-01  9.16e-05  1.90e-06  4.68e-05  3.40e-07  7.65e-06  9.32e-01  
 11  +1.1120e-01  +1.1120e-01  1.17e-06  2.45e-08  6.01e-07  4.30e-09  9.98e-08  9.88e-01  
 12  +1.1120e-01  +1.1120e-01  1.17e-08  2.45e-10  6.01e-09  4.30e-11  9.99e-10  9.90e-01  
 13  +1.1120e-01  +1.1120e-01  1.17e-10  2.46e-12  6.03e-11  4.31e-13  1.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6768ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 1.112e-01
(CVXPY) Sep 20 03:13:43 PM: Compilation took 6.292e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 3.532e-03 seconds
Iteration: 5, Objective: 0.1112
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 3.746e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 889
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8080e-01  +5.3425e+01  5.29e+01  8.93e-01  9.25e+00  1.00e+00  1.10e+00   ------   
  1  +4.5411e-01  +1.1681e+01  1.12e+01  3.92e-01  5.12e+00  3.94e-03  6.02e-01  5.96e-01  
  2  +3.0616e-01  +3.1110e+00  2.80e+00  1.03e-01  1.83e+00  2.43e-02  2.43e-01  8.37e-01  
  3  +2.3255e-01  +9.0137e-01  6.69e-01  2.30e-02  4.32e-01  7.69e-03  6.42e-02  7.77e-01  
  4  +1.8627e-01  +5.4932e-01  3.63e-01  1.15e-02  2.15e-01  3.58e-03  3.60e-02  6.30e-01  
  5  +1.5349e-01  +2.7216e-01  1.19e-01  3.52e-03  6.80e-02  1.22e-03  1.19e-02  7.14e-01  
  6  +1.4220e-01  +2.5045e-01  1.08e-01  2.55e-03  5.83e-02  1.13e-03  8.51e-03  4.62e-01  
  7  +1.3003e-01  +2.0932e-01  7.93e-02  1.63e-03  4.09e-02  7.82e-04  5.63e-03  4.61e-01  
  8  +1.0685e-01  +1.2018e-01  1.33e-02  2.51e-04  6.46e-03  7.87e-05  9.41e-04  8.99e-01  
  9  +1.0242e-01  +1.0492e-01  2.49e-03  4.70e-05  1.21e-03  1.35e-05  1.82e-04  8.13e-01  
 10  +1.0164e-01  +1.0226e-01  6.24e-04  1.19e-05  2.97e-04  3.37e-06  4.97e-05  9.43e-01  
 11  +1.0133e-01  +1.0139e-01  6.05e-05  1.16e-06  2.87e-05  2.93e-07  5.06e-06  9.03e-01  
 12  +1.0130e-01  +1.0130e-01  2.03e-06  3.89e-08  9.62e-07  1.04e-08  1.71e-07  9.86e-01  
 13  +1.0130e-01  +1.0130e-01  2.03e-08  3.90e-10  9.63e-09  1.05e-10  1.72e-09  9.90e-01  
 14  +1.0130e-01  +1.0130e-01  2.03e-10  3.90e-12  9.63e-11  1.05e-12  1.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 859µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 1.013e-01
(CVXPY) Sep 20 03:13:43 PM: Compilation took 3.746e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 5.646e-04 seconds
Iteration: 6, Objective: 0.1013
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 127 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 3.674e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 127
  constraints   = 177
  nnz(P)        = 0
  nnz(A)        = 929
  cones (total) = 1
    : Nonnegative = 1,  numel = 177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7915e-01  +5.3016e+01  5.25e+01  8.96e-01  9.05e+00  1.00e+00  1.09e+00   ------   
  1  +4.3016e-01  +1.1634e+01  1.12e+01  3.92e-01  4.90e+00  4.01e-03  5.91e-01  5.96e-01  
  2  +2.6379e-01  +3.4612e+00  3.20e+00  1.13e-01  1.88e+00  2.27e-02  2.64e-01  7.68e-01  
  3  +2.0514e-01  +9.9826e-01  7.93e-01  2.79e-02  4.93e-01  8.73e-03  7.81e-02  7.73e-01  
  4  +1.6342e-01  +4.8802e-01  3.25e-01  1.13e-02  1.96e-01  2.82e-03  3.61e-02  7.27e-01  
  5  +1.3778e-01  +2.6145e-01  1.24e-01  4.00e-03  7.21e-02  1.12e-03  1.36e-02  6.83e-01  
  6  +1.2740e-01  +2.3991e-01  1.13e-01  2.90e-03  6.15e-02  1.06e-03  9.85e-03  4.23e-01  
  7  +1.2106e-01  +2.1840e-01  9.73e-02  2.25e-03  5.20e-02  9.01e-04  7.76e-03  3.26e-01  
  8  +1.0206e-01  +1.3432e-01  3.23e-02  6.96e-04  1.64e-02  2.13e-04  2.55e-03  7.78e-01  
  9  +9.2061e-02  +9.4043e-02  1.98e-03  4.17e-05  9.91e-04  8.72e-06  1.60e-04  9.41e-01  
 10  +9.1624e-02  +9.2393e-02  7.69e-04  1.64e-05  3.82e-04  3.63e-06  6.85e-05  7.91e-01  
 11  +9.1334e-02  +9.1413e-02  7.92e-05  1.71e-06  3.95e-05  3.43e-07  7.40e-06  9.04e-01  
 12  +9.1301e-02  +9.1302e-02  1.37e-06  2.97e-08  6.85e-07  6.13e-09  1.29e-07  9.90e-01  
 13  +9.1300e-02  +9.1300e-02  1.37e-08  2.97e-10  6.85e-09  6.13e-11  1.29e-09  9.90e-01  
 14  +9.1300e-02  +9.1300e-02  1.37e-10  2.98e-12  6.87e-11  6.14e-13  1.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 805.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 9.130e-02
(CVXPY) Sep 20 03:13:43 PM: Compilation took 3.674e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 132 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 3.102e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 132
  constraints   = 182
  nnz(P)        = 0
  nnz(A)        = 955
  cones (total) = 1
    : Nonnegative = 1,  numel = 182

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7851e-01  +5.2951e+01  5.25e+01  8.97e-01  8.97e+00  1.00e+00  1.09e+00   ------   
  1  +4.1770e-01  +1.1660e+01  1.12e+01  3.91e-01  4.83e+00  4.04e-03  5.89e-01  5.95e-01  
  2  +2.3662e-01  +3.0073e+00  2.77e+00  9.56e-02  1.60e+00  2.37e-02  2.33e-01  8.34e-01  
  3  +1.8616e-01  +9.1389e-01  7.28e-01  2.61e-02  4.51e-01  8.60e-03  7.30e-02  7.25e-01  
  4  +1.5242e-01  +4.7845e-01  3.26e-01  1.14e-02  1.97e-01  3.42e-03  3.57e-02  6.49e-01  
  5  +1.3246e-01  +3.2285e-01  1.90e-01  6.02e-03  1.09e-01  2.10e-03  1.95e-02  5.12e-01  
  6  +1.1940e-01  +2.4593e-01  1.27e-01  3.62e-03  6.92e-02  1.23e-03  1.20e-02  5.70e-01  
  7  +1.0027e-01  +1.3591e-01  3.56e-02  9.51e-04  1.86e-02  2.38e-04  3.37e-03  8.34e-01  
  8  +9.1732e-02  +9.3197e-02  1.47e-03  3.87e-05  7.53e-04  5.93e-06  1.43e-04  9.61e-01  
  9  +9.1380e-02  +9.1628e-02  2.47e-04  6.84e-06  1.29e-04  9.21e-07  2.74e-05  9.08e-01  
 10  +9.1303e-02  +9.1312e-02  8.73e-06  2.44e-07  4.56e-06  3.14e-08  9.99e-07  9.79e-01  
 11  +9.1300e-02  +9.1300e-02  8.76e-08  2.45e-09  4.57e-08  3.15e-10  1.00e-08  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  8.77e-10  2.46e-11  4.58e-10  3.16e-12  1.01e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.012ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 9.130e-02
(CVXPY) Sep 20 03:13:43 PM: Compilation took 3.102e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 9.472e-04 seconds
Iteration: 8, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 134 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 4.187e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 134
  constraints   = 184
  nnz(P)        = 0
  nnz(A)        = 968
  cones (total) = 1
    : Nonnegative = 1,  numel = 184

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7831e-01  +5.3019e+01  5.25e+01  8.98e-01  8.95e+00  1.00e+00  1.09e+00   ------   
  1  +4.1471e-01  +1.1693e+01  1.13e+01  3.92e-01  4.82e+00  4.04e-03  5.90e-01  5.94e-01  
  2  +2.4005e-01  +3.1554e+00  2.92e+00  1.02e-01  1.69e+00  2.30e-02  2.47e-01  8.06e-01  
  3  +1.8658e-01  +9.9041e-01  8.04e-01  2.88e-02  4.98e-01  8.99e-03  8.03e-02  7.12e-01  
  4  +1.4957e-01  +4.3552e-01  2.86e-01  1.02e-02  1.75e-01  2.86e-03  3.20e-02  7.18e-01  
  5  +1.3379e-01  +3.3143e-01  1.98e-01  6.33e-03  1.14e-01  2.06e-03  2.04e-02  4.33e-01  
  6  +1.1887e-01  +2.4182e-01  1.23e-01  3.53e-03  6.78e-02  1.12e-03  1.17e-02  6.19e-01  
  7  +9.9659e-02  +1.3236e-01  3.27e-02  8.72e-04  1.71e-02  2.03e-04  3.09e-03  8.56e-01  
  8  +9.1783e-02  +9.3424e-02  1.64e-03  4.33e-05  8.47e-04  7.04e-06  1.59e-04  9.51e-01  
  9  +9.1372e-02  +9.1588e-02  2.16e-04  5.98e-06  1.13e-04  7.51e-07  2.41e-05  9.31e-01  
 10  +9.1303e-02  +9.1311e-02  8.32e-06  2.34e-07  4.35e-06  2.98e-08  9.62e-07  9.81e-01  
 11  +9.1300e-02  +9.1300e-02  8.33e-08  2.34e-09  4.36e-08  2.98e-10  9.65e-09  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  8.35e-10  2.34e-11  4.37e-10  2.99e-12  9.66e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 787.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 9.130e-02
(CVXPY) Sep 20 03:13:43 PM: Compilation took 4.187e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 135 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 3.324e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 135
  constraints   = 185
  nnz(P)        = 0
  nnz(A)        = 971
  cones (total) = 1
    : Nonnegative = 1,  numel = 185

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7819e-01  +5.3010e+01  5.25e+01  8.98e-01  8.93e+00  1.00e+00  1.09e+00   ------   
  1  +4.1267e-01  +1.1727e+01  1.13e+01  3.93e-01  4.81e+00  4.05e-03  5.90e-01  5.92e-01  
  2  +2.3350e-01  +3.0803e+00  2.85e+00  9.92e-02  1.64e+00  2.35e-02  2.42e-01  8.20e-01  
  3  +1.8207e-01  +1.0018e+00  8.20e-01  2.94e-02  5.04e-01  9.27e-03  8.18e-02  7.03e-01  
  4  +1.4217e-01  +4.1722e-01  2.75e-01  9.58e-03  1.64e-01  2.88e-03  3.07e-02  7.28e-01  
  5  +1.3119e-01  +3.4462e-01  2.13e-01  7.04e-03  1.25e-01  2.01e-03  2.32e-02  4.01e-01  
  6  +1.0548e-01  +1.7218e-01  6.67e-02  1.93e-03  3.57e-02  5.81e-04  7.00e-03  7.79e-01  
  7  +9.5417e-02  +1.1102e-01  1.56e-02  4.47e-04  8.25e-03  5.67e-05  1.69e-03  9.24e-01  
  8  +9.1617e-02  +9.2793e-02  1.18e-03  3.34e-05  6.16e-04  3.30e-06  1.31e-04  9.28e-01  
  9  +9.1373e-02  +9.1642e-02  2.69e-04  7.88e-06  1.42e-04  7.51e-07  3.34e-05  7.80e-01  
 10  +9.1302e-02  +9.1310e-02  8.05e-06  2.38e-07  4.25e-06  2.27e-08  1.04e-06  9.77e-01  
 11  +9.1300e-02  +9.1300e-02  8.06e-08  2.39e-09  4.26e-08  2.27e-10  1.04e-08  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  8.08e-10  2.39e-11  4.27e-10  2.27e-12  1.04e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 744.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 9.130e-02
(CVXPY) Sep 20 03:13:43 PM: Compilation took 3.324e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:43 PM: Your problem has 136 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:43 PM: Finished problem compilation (took 1.879e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 136
  constraints   = 186
  nnz(P)        = 0
  nnz(A)        = 977
  cones (total) = 1
    : Nonnegative = 1,  numel = 186

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7789e-01  +5.3081e+01  5.26e+01  8.98e-01  8.92e+00  1.00e+00  1.09e+00   ------   
  1  +4.0733e-01  +1.1783e+01  1.14e+01  3.93e-01  4.81e+00  4.07e-03  5.91e-01  5.91e-01  
  2  +2.3157e-01  +3.1995e+00  2.97e+00  1.04e-01  1.70e+00  2.34e-02  2.50e-01  8.02e-01  
  3  +1.8281e-01  +1.0126e+00  8.30e-01  3.01e-02  5.15e-01  9.07e-03  8.33e-02  6.96e-01  
  4  +1.4164e-01  +4.0342e-01  2.62e-01  9.26e-03  1.57e-01  2.55e-03  2.96e-02  7.66e-01  
  5  +1.3197e-01  +3.4695e-01  2.15e-01  7.17e-03  1.27e-01  1.90e-03  2.35e-02  3.77e-01  
  6  +1.0616e-01  +1.7726e-01  7.11e-02  2.08e-03  3.86e-02  5.78e-04  7.50e-03  7.64e-01  
  7  +9.4350e-02  +1.0725e-01  1.29e-02  3.68e-04  6.85e-03  5.74e-05  1.39e-03  9.20e-01  
  8  +9.1583e-02  +9.2693e-02  1.11e-03  3.19e-05  5.88e-04  3.68e-06  1.26e-04  9.11e-01  
  9  +9.1341e-02  +9.1498e-02  1.57e-04  4.68e-06  8.40e-05  4.93e-07  2.00e-05  8.79e-01  
 10  +9.1301e-02  +9.1305e-02  4.34e-06  1.30e-07  2.32e-06  1.39e-08  5.65e-07  9.78e-01  
 11  +9.1300e-02  +9.1300e-02  4.34e-08  1.30e-09  2.32e-08  1.39e-10  5.65e-09  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  4.35e-10  1.30e-11  2.33e-10  1.39e-12  5.66e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 734.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:43 PM: Optimal value: 9.130e-02
(CVXPY) Sep 20 03:13:43 PM: Compilation took 1.879e-03 seconds
(CVXPY) Sep 20 03:13:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.7999999999999999

IF 
    (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x3 = 1 AND x5 = 0 AND x7 = 1)                       <-- (term's our objective: 0.1)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1)            <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1)                       <-- (term's our objective: 0.14)
 OR (x1 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1)                       <-- (term's our objective: 0.12)
 OR (x2 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.16)
 OR (x2 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.08)
 OR (x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.1)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.4665608406066895
Best over terms:
  Our final objective: 0.16000000000000006
    Its accruacy: 0.58
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.16000000000000006
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

