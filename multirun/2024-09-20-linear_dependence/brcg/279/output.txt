Command:
python test_script.py -s linear_dependence -d 7 -n 50000 --seed 21 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14611999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 7.

Computed total variation: 0.14884
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:06 PM: Your problem has 25015 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:06 PM: Finished problem compilation (took 9.592e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25015
  constraints   = 50015
  nnz(P)        = 0
  nnz(A)        = 250015
  cones (total) = 1
    : Nonnegative = 1,  numel = 50015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.36e+02  1.00e+00  1.00e+00   ------   
  1  +5.8817e-01  +5.2537e+03  5.25e+03  4.08e-01  1.48e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3830e-01  +6.5385e+02  6.53e+02  1.62e-01  7.53e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1022e-01  +1.6870e+02  1.68e+02  1.43e-01  6.66e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0103e-01  +1.3465e+01  1.30e+01  3.69e-02  1.68e+01  4.21e-06  1.94e-01  4.54e-01  
  5  +5.0000e-01  +1.1162e+00  6.16e-01  1.85e-03  8.73e-01  2.83e-05  1.83e-01  3.94e-01  
  6  +4.9999e-01  +6.2384e-01  1.24e-01  3.70e-04  1.75e-01  9.18e-06  3.17e-02  8.41e-01  
  7  +4.9937e-01  +9.3064e-01  4.31e-01  6.40e-04  3.04e-01  3.59e-04  2.49e-03  9.64e-01  
  8  +4.8776e-01  +8.5266e-01  3.65e-01  3.60e-05  1.71e-02  6.32e-03  1.12e-04  9.55e-01  
  9  +4.7551e-01  +6.4663e-01  1.71e-01  9.08e-06  4.31e-03  5.72e-03  2.85e-05  8.00e-01  
 10  +4.6820e-01  +5.3213e-01  6.39e-02  3.30e-06  1.57e-03  1.26e-03  1.08e-05  7.22e-01  
 11  +4.6023e-01  +4.6630e-01  6.06e-03  3.06e-07  1.45e-04  3.75e-05  1.04e-06  9.50e-01  
 12  +4.5889e-01  +4.5984e-01  9.53e-04  4.49e-08  2.13e-05  4.67e-06  1.65e-07  8.75e-01  
 13  +4.5855e-01  +4.5860e-01  4.79e-05  1.99e-09  9.45e-07  1.21e-07  8.33e-09  9.74e-01  
 14  +4.5854e-01  +4.5854e-01  4.80e-07  1.99e-11  9.45e-09  1.22e-09  8.37e-11  9.90e-01  
 15  +4.5854e-01  +4.5854e-01  4.80e-09  1.99e-13  9.45e-11  1.22e-11  8.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 289.2177ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:06 PM: Optimal value: 4.585e-01
(CVXPY) Sep 20 03:13:06 PM: Compilation took 9.592e-02 seconds
(CVXPY) Sep 20 03:13:06 PM: Solver (including time spent in interface) took 3.192e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:06 PM: Your problem has 25025 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:06 PM: Finished problem compilation (took 1.019e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25025
  constraints   = 50025
  nnz(P)        = 0
  nnz(A)        = 293146
  cones (total) = 1
    : Nonnegative = 1,  numel = 50025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2538e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5351e+02  6.53e+02  1.62e-01  7.84e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6851e+02  1.68e+02  1.43e-01  6.94e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0102e-01  +1.3294e+01  1.28e+01  3.64e-02  1.73e+01  4.24e-06  1.93e-01  4.61e-01  
  5  +5.0003e-01  +1.5471e+00  1.05e+00  3.15e-03  1.55e+00  3.10e-05  1.84e-01  3.06e-01  
  6  +5.0001e-01  +8.7011e-01  3.70e-01  1.11e-03  5.45e-01  1.11e-05  7.46e-02  6.91e-01  
  7  +5.0001e-01  +8.7114e-01  3.71e-01  1.11e-03  5.44e-01  1.20e-05  3.46e-02  8.86e-01  
  8  +5.0002e-01  +8.5934e-01  3.59e-01  1.06e-03  5.21e-01  6.01e-06  1.70e-02  9.90e-01  
  9  +4.9991e-01  +7.5743e-01  2.58e-01  3.12e-04  1.55e-01  5.80e-05  9.96e-04  9.45e-01  
 10  +4.9785e-01  +7.4906e-01  2.51e-01  1.82e-05  9.06e-03  1.13e-03  4.87e-05  9.51e-01  
 11  +4.9393e-01  +7.0354e-01  2.10e-01  9.20e-06  4.58e-03  1.40e-03  2.46e-05  6.08e-01  
 12  +4.9319e-01  +6.9704e-01  2.04e-01  9.17e-06  4.57e-03  1.30e-03  2.46e-05  1.75e-02  
 13  +4.9290e-01  +6.9095e-01  1.98e-01  7.97e-06  3.97e-03  1.04e-03  2.13e-05  3.42e-01  
 14  +4.9191e-01  +6.8380e-01  1.92e-01  7.83e-06  3.90e-03  9.12e-04  2.10e-05  7.98e-02  
 15  +4.9078e-01  +6.7679e-01  1.86e-01  7.58e-06  3.77e-03  8.12e-04  2.04e-05  8.84e-02  
 16  +4.8481e-01  +6.3253e-01  1.48e-01  6.78e-06  3.37e-03  7.08e-06  1.87e-05  6.94e-01  
 17  +4.6375e-01  +5.5152e-01  8.78e-02  3.04e-06  1.51e-03  4.06e-06  8.74e-06  6.36e-01  
 18  +4.3562e-01  +4.5411e-01  1.85e-02  6.01e-07  2.97e-04  4.01e-08  1.86e-06  9.11e-01  
 19  +4.2720e-01  +4.2752e-01  3.20e-04  1.01e-08  4.97e-06  7.54e-10  3.19e-08  9.84e-01  
 20  +4.2704e-01  +4.2704e-01  3.20e-06  1.01e-10  4.97e-08  7.54e-12  3.19e-10  9.90e-01  
 21  +4.2704e-01  +4.2704e-01  3.20e-08  1.01e-12  4.98e-10  7.90e-14  3.34e-12  9.90e-01  
 22  +4.2704e-01  +4.2704e-01  3.20e-10  1.01e-14  4.98e-12  8.28e-16  3.49e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 455.6487ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:07 PM: Optimal value: 4.270e-01
(CVXPY) Sep 20 03:13:07 PM: Compilation took 1.019e-01 seconds
(CVXPY) Sep 20 03:13:07 PM: Solver (including time spent in interface) took 4.845e-01 seconds
Iteration: 2, Objective: 0.4270
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:07 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:07 PM: Finished problem compilation (took 9.922e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 293763
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2539e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5345e+02  6.53e+02  1.62e-01  7.84e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6850e+02  1.68e+02  1.43e-01  6.94e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0102e-01  +1.3296e+01  1.28e+01  3.64e-02  1.73e+01  4.24e-06  1.93e-01  4.61e-01  
  5  +5.0003e-01  +1.5519e+00  1.05e+00  3.16e-03  1.55e+00  3.10e-05  1.84e-01  3.05e-01  
  6  +5.0001e-01  +9.2525e-01  4.25e-01  1.27e-03  6.26e-01  1.27e-05  8.45e-02  6.26e-01  
  7  +5.0001e-01  +8.6543e-01  3.65e-01  1.09e-03  5.38e-01  1.21e-05  5.52e-02  4.57e-01  
  8  +5.0000e-01  +8.1839e-01  3.18e-01  9.39e-04  4.63e-01  1.59e-05  1.62e-02  9.90e-01  
  9  +4.9952e-01  +7.0808e-01  2.09e-01  1.68e-04  8.35e-02  2.71e-04  5.06e-04  9.74e-01  
 10  +4.9236e-01  +6.8664e-01  1.94e-01  1.16e-05  5.79e-03  3.88e-03  3.18e-05  9.38e-01  
 11  +4.8976e-01  +6.7888e-01  1.89e-01  8.77e-06  4.36e-03  4.37e-03  2.38e-05  3.22e-01  
 12  +4.8842e-01  +6.6721e-01  1.79e-01  8.09e-06  4.03e-03  3.48e-03  2.20e-05  2.13e-01  
 13  +4.8316e-01  +6.4220e-01  1.59e-01  6.43e-06  3.20e-03  2.78e-03  1.77e-05  3.16e-01  
 14  +4.6688e-01  +5.6555e-01  9.87e-02  3.72e-06  1.85e-03  3.21e-04  1.07e-05  7.46e-01  
 15  +4.3716e-01  +4.5981e-01  2.27e-02  7.38e-07  3.65e-04  6.57e-06  2.28e-06  8.89e-01  
 16  +4.2908e-01  +4.3416e-01  5.08e-03  1.62e-07  8.00e-05  9.69e-07  5.12e-07  8.52e-01  
 17  +4.2906e-01  +4.3410e-01  5.04e-03  1.61e-07  7.94e-05  9.36e-07  5.10e-07  2.19e-02  
 18  +4.2905e-01  +4.3408e-01  5.03e-03  1.60e-07  7.92e-05  9.02e-07  5.08e-07  4.35e-02  
 19  +4.2881e-01  +4.3332e-01  4.52e-03  1.43e-07  7.08e-05  7.27e-07  4.53e-07  2.18e-01  
 20  +4.2724e-01  +4.2837e-01  1.13e-03  3.58e-08  1.77e-05  2.62e-08  1.14e-07  9.90e-01  
 21  +4.2671e-01  +4.2672e-01  1.33e-05  4.22e-10  2.09e-07  2.93e-10  1.34e-09  9.90e-01  
 22  +4.2670e-01  +4.2670e-01  1.33e-07  4.22e-12  2.09e-09  2.93e-12  1.34e-11  9.90e-01  
 23  +4.2670e-01  +4.2670e-01  1.34e-09  4.24e-14  2.10e-11  2.93e-14  1.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 508.217ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:07 PM: Optimal value: 4.267e-01
(CVXPY) Sep 20 03:13:07 PM: Compilation took 9.922e-02 seconds
(CVXPY) Sep 20 03:13:07 PM: Solver (including time spent in interface) took 5.369e-01 seconds
Iteration: 3, Objective: 0.4267
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:08 PM: Your problem has 25028 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:08 PM: Finished problem compilation (took 1.030e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25028
  constraints   = 50028
  nnz(P)        = 0
  nnz(A)        = 294138
  cones (total) = 1
    : Nonnegative = 1,  numel = 50028

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2539e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5343e+02  6.53e+02  1.62e-01  7.84e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6849e+02  1.68e+02  1.43e-01  6.94e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0102e-01  +1.3295e+01  1.28e+01  3.64e-02  1.73e+01  4.24e-06  1.93e-01  4.62e-01  
  5  +5.0003e-01  +1.5435e+00  1.04e+00  3.14e-03  1.54e+00  3.11e-05  1.84e-01  3.08e-01  
  6  +5.0001e-01  +9.2319e-01  4.23e-01  1.27e-03  6.23e-01  1.27e-05  8.40e-02  6.32e-01  
  7  +5.0001e-01  +8.5062e-01  3.51e-01  1.05e-03  5.16e-01  1.22e-05  4.94e-02  5.41e-01  
  8  +5.0000e-01  +8.6370e-01  3.64e-01  1.07e-03  5.28e-01  1.58e-05  1.71e-02  9.90e-01  
  9  +4.9967e-01  +7.4079e-01  2.41e-01  2.44e-04  1.21e-01  1.88e-04  7.59e-04  9.59e-01  
 10  +4.9398e-01  +7.2202e-01  2.28e-01  1.55e-05  7.72e-03  3.10e-03  4.22e-05  9.44e-01  
 11  +4.9166e-01  +7.1023e-01  2.19e-01  1.19e-05  5.93e-03  3.50e-03  3.24e-05  2.67e-01  
 12  +4.9390e-01  +6.7794e-01  1.84e-01  1.08e-05  5.38e-03  5.04e-04  2.97e-05  6.83e-01  
 13  +4.9307e-01  +6.7392e-01  1.81e-01  1.00e-05  5.00e-03  4.69e-04  2.76e-05  1.53e-01  
 14  +4.8784e-01  +6.5206e-01  1.64e-01  7.15e-06  3.56e-03  4.39e-04  1.98e-05  4.08e-01  
 15  +4.7107e-01  +5.7824e-01  1.07e-01  4.25e-06  2.11e-03  1.26e-04  1.22e-05  6.39e-01  
 16  +4.5034e-01  +5.0701e-01  5.67e-02  1.96e-06  9.70e-04  5.17e-05  5.88e-06  5.83e-01  
 17  +4.3485e-01  +4.5425e-01  1.94e-02  6.36e-07  3.14e-04  1.25e-05  1.99e-06  7.26e-01  
 18  +4.2866e-01  +4.3364e-01  4.98e-03  1.60e-07  7.90e-05  2.64e-06  5.10e-07  7.87e-01  
 19  +4.2866e-01  +4.3359e-01  4.93e-03  1.59e-07  7.86e-05  2.57e-06  5.09e-07  1.07e-02  
 20  +4.2866e-01  +4.3360e-01  4.94e-03  1.59e-07  7.87e-05  2.55e-06  5.09e-07  1.32e-02  
 21  +4.2863e-01  +4.3352e-01  4.89e-03  1.57e-07  7.75e-05  2.43e-06  5.00e-07  6.12e-02  
 22  +4.2753e-01  +4.2981e-01  2.28e-03  7.28e-08  3.60e-05  6.97e-08  2.33e-07  9.90e-01  
 23  +4.2648e-01  +4.2653e-01  4.79e-05  1.53e-09  7.55e-07  1.06e-09  4.91e-09  9.90e-01  
 24  +4.2646e-01  +4.2646e-01  4.79e-07  1.53e-11  7.56e-09  1.06e-11  4.92e-11  9.90e-01  
 25  +4.2646e-01  +4.2646e-01  4.79e-09  1.53e-13  7.56e-11  1.07e-13  4.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 536.8627ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:08 PM: Optimal value: 4.265e-01
(CVXPY) Sep 20 03:13:08 PM: Compilation took 1.030e-01 seconds
(CVXPY) Sep 20 03:13:08 PM: Solver (including time spent in interface) took 5.667e-01 seconds
FULL MODEL:
  Accruacy: 0.57384
  Our objective: 0.14767999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.14612)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.00068)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.00088)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.301282644271851
Best over terms:
  Our final objective: 0.14612000000000003
    Its accruacy: 0.57306
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14612000000000003
  Highest accruacy: 0.57306
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

