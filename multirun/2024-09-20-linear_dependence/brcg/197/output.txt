Command:
python test_script.py -s linear_dependence -d 5 -n 50000 --seed 73 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29804
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.29803999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:19 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:19 PM: Finished problem compilation (took 7.541e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.23e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4640e-01  +7.1473e+02  7.14e+02  1.49e-01  6.24e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1133e-01  +1.7283e+02  1.72e+02  1.35e-01  5.64e+01  2.40e-05  2.33e-01  8.11e-02  
  4  +5.0043e-01  +5.9638e+00  5.46e+00  1.62e-02  6.65e+00  2.64e-06  1.77e-01  6.35e-01  
  5  +5.0005e-01  +1.7722e+00  1.27e+00  3.91e-03  1.63e+00  3.81e-05  1.13e-01  9.90e-01  
  6  +4.9996e-01  +7.7534e-01  2.75e-01  8.31e-04  3.49e-01  4.11e-05  1.23e-02  9.01e-01  
  7  +4.9889e-01  +7.8087e-01  2.82e-01  2.25e-04  9.59e-02  7.70e-04  6.63e-04  9.47e-01  
  8  +4.8797e-01  +7.9522e-01  3.07e-01  2.80e-05  1.20e-02  6.97e-03  7.60e-05  9.17e-01  
  9  +4.6910e-01  +7.4046e-01  2.71e-01  1.25e-05  5.32e-03  1.08e-02  3.45e-05  6.11e-01  
 10  +4.3930e-01  +5.7041e-01  1.31e-01  7.83e-06  3.29e-03  7.23e-05  2.60e-05  4.64e-01  
 11  +4.0776e-01  +4.3135e-01  2.36e-02  1.20e-06  5.05e-04  4.85e-06  4.53e-06  8.57e-01  
 12  +4.0077e-01  +4.0312e-01  2.35e-03  1.09e-07  4.57e-05  3.72e-07  4.67e-07  9.17e-01  
 13  +3.9995e-01  +3.9998e-01  2.84e-05  1.26e-09  5.30e-07  4.18e-09  5.67e-09  9.89e-01  
 14  +3.9994e-01  +3.9994e-01  2.84e-07  1.26e-11  5.30e-09  4.18e-11  5.67e-11  9.90e-01  
 15  +3.9994e-01  +3.9994e-01  2.86e-09  1.27e-13  5.34e-11  5.89e-13  7.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 247.824ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:19 PM: Optimal value: 3.999e-01
(CVXPY) Sep 20 03:08:19 PM: Compilation took 7.541e-02 seconds
(CVXPY) Sep 20 03:08:19 PM: Solver (including time spent in interface) took 2.697e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3999
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:19 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:19 PM: Finished problem compilation (took 9.468e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 247673
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  2.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +5.0088e+03  5.01e+03  3.68e-01  1.30e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4636e-01  +7.1425e+02  7.14e+02  1.49e-01  6.60e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1130e-01  +1.7252e+02  1.72e+02  1.35e-01  5.97e+01  2.40e-05  2.32e-01  8.17e-02  
  4  +5.0040e-01  +5.5377e+00  5.04e+00  1.50e-02  6.51e+00  2.68e-06  1.72e-01  6.83e-01  
  5  +5.0007e-01  +1.9171e+00  1.42e+00  4.35e-03  1.92e+00  3.47e-05  1.00e-01  9.90e-01  
  6  +4.9999e-01  +9.9054e-01  4.91e-01  1.48e-03  6.55e-01  3.84e-05  1.93e-02  8.15e-01  
  7  +4.9903e-01  +1.0337e+00  5.35e-01  3.88e-04  1.77e-01  7.04e-04  1.05e-03  9.54e-01  
  8  +4.8927e-01  +9.9501e-01  5.06e-01  4.15e-05  1.89e-02  6.26e-03  1.04e-04  9.43e-01  
  9  +4.7357e-01  +9.3255e-01  4.59e-01  1.78e-05  8.13e-03  1.11e-02  4.47e-05  6.29e-01  
 10  +4.4620e-01  +7.5670e-01  3.10e-01  1.17e-05  5.29e-03  4.07e-03  3.12e-05  4.97e-01  
 11  +3.9103e-01  +4.9604e-01  1.05e-01  3.93e-06  1.76e-03  3.55e-05  1.22e-05  7.25e-01  
 12  +3.5551e-01  +3.6571e-01  1.02e-02  3.72e-07  1.65e-04  3.57e-07  1.33e-06  9.14e-01  
 13  +3.5114e-01  +3.5128e-01  1.37e-04  4.99e-09  2.22e-06  3.58e-09  1.83e-08  9.90e-01  
 14  +3.5108e-01  +3.5108e-01  1.37e-06  4.99e-11  2.22e-08  3.58e-11  1.83e-10  9.90e-01  
 15  +3.5108e-01  +3.5108e-01  1.37e-08  4.99e-13  2.22e-10  3.60e-13  1.84e-12  9.90e-01  
 16  +3.5108e-01  +3.5108e-01  1.37e-10  5.03e-15  2.22e-12  3.62e-15  1.85e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 315.7152ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:20 PM: Optimal value: 3.511e-01
(CVXPY) Sep 20 03:08:20 PM: Compilation took 9.468e-02 seconds
(CVXPY) Sep 20 03:08:20 PM: Solver (including time spent in interface) took 3.487e-01 seconds
FULL MODEL:
  Accruacy: 0.64902
  Our objective: 0.29803999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.29804)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.5199131965637207
Best over terms:
  Our final objective: 0.29803999999999997
    Its accruacy: 0.64902
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29803999999999997
  Highest accruacy: 0.64902
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

