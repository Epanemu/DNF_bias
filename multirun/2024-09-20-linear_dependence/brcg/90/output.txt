Command:
python test_script.py -s linear_dependence -d 3 -n 100 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.34
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 3.

Computed total variation: 0.36
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:37 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:37 PM: Finished problem compilation (took 2.070e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9560e-01  +5.0851e+01  5.04e+01  8.53e-01  7.22e+00  1.00e+00  1.04e+00   ------   
  1  +6.1354e-01  +9.7111e+00  9.10e+00  2.67e-01  3.56e+00  4.23e-03  4.51e-01  6.95e-01  
  2  +5.3524e-01  +1.6249e+00  1.09e+00  6.33e-02  9.65e-01  7.88e-03  1.55e-01  8.50e-01  
  3  +4.9946e-01  +8.0913e-01  3.10e-01  1.27e-02  1.98e-01  9.08e-03  3.81e-02  8.55e-01  
  4  +4.8242e-01  +7.9061e-01  3.08e-01  7.83e-03  1.23e-01  1.06e-02  2.43e-02  5.33e-01  
  5  +4.3354e-01  +5.6461e-01  1.31e-01  2.60e-03  4.05e-02  1.94e-03  9.76e-03  7.44e-01  
  6  +4.0302e-01  +4.4205e-01  3.90e-02  8.14e-04  1.26e-02  8.77e-05  3.59e-03  9.90e-01  
  7  +3.9055e-01  +3.9186e-01  1.31e-03  2.62e-05  4.04e-04  2.11e-06  1.23e-04  9.67e-01  
  8  +3.9010e-01  +3.9012e-01  1.31e-05  2.62e-07  4.03e-06  2.11e-08  1.23e-06  9.90e-01  
  9  +3.9010e-01  +3.9010e-01  1.31e-07  2.62e-09  4.03e-08  2.11e-10  1.23e-08  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  1.31e-09  2.62e-11  4.03e-10  2.11e-12  1.23e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 287.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:37 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 03:04:37 PM: Compilation took 2.070e-03 seconds
(CVXPY) Sep 20 03:04:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:37 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:37 PM: Finished problem compilation (took 3.922e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 390
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8617e-01  +5.1892e+01  5.14e+01  8.62e-01  7.68e+00  1.00e+00  1.10e+00   ------   
  1  +5.7947e-01  +1.0159e+01  9.58e+00  2.93e-01  3.91e+00  4.09e-03  5.09e-01  6.75e-01  
  2  +5.1295e-01  +2.2837e+00  1.77e+00  8.94e-02  1.40e+00  9.74e-03  2.15e-01  7.47e-01  
  3  +4.5926e-01  +1.6080e+00  1.15e+00  4.32e-02  6.89e-01  7.85e-03  1.21e-01  5.88e-01  
  4  +4.1884e-01  +7.9196e-01  3.73e-01  1.31e-02  2.09e-01  3.02e-03  4.26e-02  6.69e-01  
  5  +3.9326e-01  +7.2631e-01  3.33e-01  6.83e-03  1.11e-01  3.85e-03  2.26e-02  5.55e-01  
  6  +3.5560e-01  +4.8655e-01  1.31e-01  2.73e-03  4.36e-02  9.68e-04  1.04e-02  8.05e-01  
  7  +3.2522e-01  +3.3888e-01  1.37e-02  2.81e-04  4.44e-03  2.50e-05  1.25e-03  9.58e-01  
  8  +3.2060e-01  +3.2166e-01  1.06e-03  2.18e-05  3.44e-04  1.89e-06  1.05e-04  9.19e-01  
  9  +3.2021e-01  +3.2023e-01  2.01e-05  4.11e-07  6.48e-06  6.26e-08  2.02e-06  9.90e-01  
 10  +3.2020e-01  +3.2020e-01  2.01e-07  4.11e-09  6.48e-08  6.26e-10  2.02e-08  9.90e-01  
 11  +3.2020e-01  +3.2020e-01  2.01e-09  4.11e-11  6.47e-10  6.26e-12  2.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 323µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:37 PM: Optimal value: 3.202e-01
(CVXPY) Sep 20 03:04:37 PM: Compilation took 3.922e-03 seconds
(CVXPY) Sep 20 03:04:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.68
  Our objective: 0.36000000000000004

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.34)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0) <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.0749731063842773
Best over terms:
  Our final objective: 0.34
    Its accruacy: 0.67
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.34
  Highest accruacy: 0.67
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

