Command:
python test_script.py -s linear_dependence -d 4 -n 50000 --seed 34 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30347999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.30347999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:49 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:49 PM: Finished problem compilation (took 6.954e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  1.94e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5116e-01  +7.5385e+02  7.53e+02  1.44e-01  5.61e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1142e-01  +1.6769e+02  1.67e+02  1.31e-01  5.09e+01  1.84e-05  2.26e-01  5.84e-02  
  4  +5.0015e-01  +2.6052e+00  2.11e+00  6.30e-03  2.42e+00  1.78e-06  1.54e-01  9.90e-01  
  5  +4.9999e-01  +8.2459e-01  3.25e-01  9.69e-04  3.76e-01  3.93e-06  3.71e-02  9.90e-01  
  6  +4.9791e-01  +1.3328e+00  8.35e-01  4.81e-04  1.90e-01  2.54e-04  1.38e-03  9.76e-01  
  7  +4.8255e-01  +1.1664e+00  6.84e-01  5.50e-05  2.18e-02  1.81e-03  1.50e-04  8.92e-01  
  8  +4.5292e-01  +7.4979e-01  2.97e-01  1.43e-05  5.65e-03  1.12e-03  4.16e-05  7.87e-01  
  9  +4.1606e-01  +4.8653e-01  7.05e-02  3.65e-06  1.42e-03  8.50e-06  1.30e-05  8.71e-01  
 10  +4.0089e-01  +4.0950e-01  8.61e-03  4.13e-07  1.61e-04  7.51e-07  1.71e-06  8.84e-01  
 11  +3.9813e-01  +3.9828e-01  1.57e-04  7.01e-09  2.73e-06  1.03e-08  3.16e-08  9.86e-01  
 12  +3.9808e-01  +3.9808e-01  1.57e-06  7.00e-11  2.72e-08  1.03e-10  3.16e-10  9.90e-01  
 13  +3.9808e-01  +3.9808e-01  1.57e-08  7.02e-13  2.73e-10  1.15e-12  3.53e-12  9.90e-01  
 14  +3.9808e-01  +3.9808e-01  1.57e-10  6.91e-15  2.74e-12  1.30e-14  3.96e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 204.9678ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:49 PM: Optimal value: 3.981e-01
(CVXPY) Sep 20 03:06:49 PM: Compilation took 6.954e-02 seconds
(CVXPY) Sep 20 03:06:49 PM: Solver (including time spent in interface) took 2.266e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3981
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:49 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:49 PM: Finished problem compilation (took 8.014e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 222695
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5003e+04  2.50e+04  9.93e-01  2.08e+02  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +4.8431e+03  4.84e+03  3.42e-01  1.16e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5109e-01  +7.5303e+02  7.52e+02  1.44e-01  6.01e+01  8.22e-03  2.28e-01  7.24e-01  
  3  +5.1138e-01  +1.6724e+02  1.67e+02  1.31e-01  5.45e+01  1.84e-05  2.26e-01  5.90e-02  
  4  +5.0015e-01  +2.6440e+00  2.14e+00  6.41e-03  2.64e+00  1.89e-06  1.54e-01  9.90e-01  
  5  +5.0000e-01  +8.7478e-01  3.75e-01  1.12e-03  4.65e-01  2.69e-06  4.01e-02  9.42e-01  
  6  +4.9981e-01  +1.4245e+00  9.25e-01  2.19e-03  9.21e-01  2.11e-05  1.01e-02  9.90e-01  
  7  +4.8940e-01  +1.2268e+00  7.37e-01  7.37e-05  3.16e-02  8.40e-04  1.85e-04  9.82e-01  
  8  +4.7996e-01  +1.1354e+00  6.55e-01  4.09e-05  1.75e-02  1.14e-03  1.03e-04  4.75e-01  
  9  +4.8811e-01  +1.0193e+00  5.31e-01  3.29e-05  1.41e-02  7.20e-05  8.09e-05  8.21e-01  
 10  +4.7867e-01  +9.5575e-01  4.77e-01  2.29e-05  9.80e-03  7.21e-05  5.70e-05  3.83e-01  
 11  +4.4741e-01  +7.6528e-01  3.18e-01  1.23e-05  5.22e-03  2.86e-05  3.24e-05  6.80e-01  
 12  +3.9169e-01  +5.0954e-01  1.18e-01  4.42e-06  1.85e-03  2.53e-07  1.36e-05  7.64e-01  
 13  +3.5365e-01  +3.6592e-01  1.23e-02  4.49e-07  1.87e-04  4.05e-08  1.60e-06  9.10e-01  
 14  +3.4844e-01  +3.4861e-01  1.77e-04  6.46e-09  2.69e-06  6.62e-10  2.37e-08  9.86e-01  
 15  +3.4836e-01  +3.4836e-01  1.77e-06  6.46e-11  2.69e-08  6.62e-12  2.37e-10  9.90e-01  
 16  +3.4836e-01  +3.4836e-01  1.77e-08  6.46e-13  2.69e-10  6.68e-14  2.39e-12  9.90e-01  
 17  +3.4836e-01  +3.4836e-01  1.77e-10  6.48e-15  2.69e-12  6.75e-16  2.42e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 285.2045ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:50 PM: Optimal value: 3.484e-01
(CVXPY) Sep 20 03:06:50 PM: Compilation took 8.014e-02 seconds
(CVXPY) Sep 20 03:06:50 PM: Solver (including time spent in interface) took 3.096e-01 seconds
FULL MODEL:
  Accruacy: 0.65174
  Our objective: 0.30347999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.30348)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.283649206161499
Best over terms:
  Our final objective: 0.30347999999999997
    Its accruacy: 0.65174
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30347999999999997
  Highest accruacy: 0.65174
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

