Command:
python test_script.py -s linear_dependence -d 3 -n 100 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.3
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 3.

Computed total variation: 0.36
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:38 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:38 PM: Finished problem compilation (took 4.503e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9477e-01  +5.1069e+01  5.06e+01  8.54e-01  7.27e+00  1.00e+00  1.04e+00   ------   
  1  +6.1213e-01  +9.7244e+00  9.11e+00  2.67e-01  3.59e+00  4.22e-03  4.54e-01  6.96e-01  
  2  +5.3060e-01  +1.5138e+00  9.83e-01  5.62e-02  8.71e-01  8.08e-03  1.39e-01  8.90e-01  
  3  +5.2536e-01  +1.4776e+00  9.52e-01  3.95e-02  6.23e-01  1.05e-02  9.87e-02  3.30e-01  
  4  +5.0290e-01  +1.3210e+00  8.18e-01  2.66e-02  4.22e-01  8.44e-03  7.14e-02  5.01e-01  
  5  +4.6853e-01  +9.4664e-01  4.78e-01  1.10e-02  1.77e-01  6.13e-03  3.22e-02  5.62e-01  
  6  +4.2038e-01  +4.8369e-01  6.33e-02  1.75e-03  2.72e-02  3.89e-04  6.57e-03  9.90e-01  
  7  +4.0511e-01  +4.2660e-01  2.15e-02  4.55e-04  7.06e-03  1.19e-04  2.13e-03  8.28e-01  
  8  +4.0020e-01  +4.0055e-01  3.49e-04  7.22e-06  1.12e-04  1.72e-06  3.55e-05  9.84e-01  
  9  +4.0010e-01  +4.0010e-01  3.49e-06  7.21e-08  1.12e-06  1.72e-08  3.56e-07  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  3.49e-08  7.21e-10  1.12e-08  1.72e-10  3.56e-09  9.90e-01  
 11  +4.0010e-01  +4.0010e-01  3.49e-10  7.21e-12  1.12e-10  1.72e-12  3.56e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 272.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:38 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 03:04:38 PM: Compilation took 4.503e-03 seconds
(CVXPY) Sep 20 03:04:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:38 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:38 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 348
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9099e-01  +5.1492e+01  5.10e+01  8.57e-01  7.65e+00  1.00e+00  1.06e+00   ------   
  1  +5.9893e-01  +9.9062e+00  9.31e+00  2.76e-01  3.83e+00  4.17e-03  4.74e-01  6.89e-01  
  2  +5.2725e-01  +1.7964e+00  1.27e+00  6.80e-02  1.11e+00  8.76e-03  1.64e-01  8.36e-01  
  3  +4.9164e-01  +1.1254e+00  6.34e-01  2.16e-02  3.67e-01  8.45e-03  5.61e-02  7.45e-01  
  4  +4.4263e-01  +8.3126e-01  3.89e-01  8.05e-03  1.39e-01  7.43e-03  2.24e-02  6.32e-01  
  5  +4.0507e-01  +6.5219e-01  2.47e-01  4.57e-03  7.80e-02  4.35e-03  1.38e-02  4.43e-01  
  6  +3.5113e-01  +3.9757e-01  4.64e-02  8.97e-04  1.55e-02  3.66e-05  3.14e-03  9.36e-01  
  7  +3.3082e-01  +3.3213e-01  1.31e-03  2.42e-05  4.23e-04  2.28e-06  9.02e-05  9.78e-01  
  8  +3.3021e-01  +3.3022e-01  1.31e-05  2.41e-07  4.22e-06  2.28e-08  9.03e-07  9.90e-01  
  9  +3.3020e-01  +3.3020e-01  1.31e-07  2.41e-09  4.22e-08  2.28e-10  9.03e-09  9.90e-01  
 10  +3.3020e-01  +3.3020e-01  1.31e-09  2.41e-11  4.22e-10  2.28e-12  9.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 238.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:38 PM: Optimal value: 3.302e-01
(CVXPY) Sep 20 03:04:38 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:04:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3302
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:38 PM: Your problem has 60 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:38 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 110
  nnz(P)        = 0
  nnz(A)        = 357
  cones (total) = 1
    : Nonnegative = 1,  numel = 110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8946e-01  +5.1846e+01  5.14e+01  8.58e-01  7.66e+00  1.00e+00  1.08e+00   ------   
  1  +5.9212e-01  +1.0025e+01  9.43e+00  2.82e-01  3.87e+00  4.14e-03  4.89e-01  6.84e-01  
  2  +5.2186e-01  +2.0492e+00  1.53e+00  7.87e-02  1.26e+00  9.10e-03  1.89e-01  7.85e-01  
  3  +4.7948e-01  +1.8200e+00  1.34e+00  4.48e-02  7.31e-01  1.05e-02  1.20e-01  5.01e-01  
  4  +4.3115e-01  +9.3918e-01  5.08e-01  1.57e-02  2.56e-01  4.32e-03  4.93e-02  6.06e-01  
  5  +4.0073e-01  +7.8879e-01  3.88e-01  7.62e-03  1.26e-01  4.90e-03  2.45e-02  5.44e-01  
  6  +3.6983e-01  +5.8686e-01  2.17e-01  4.39e-03  7.14e-02  2.01e-03  1.60e-02  5.58e-01  
  7  +3.3097e-01  +3.6601e-01  3.50e-02  7.14e-04  1.14e-02  1.14e-04  3.14e-03  8.70e-01  
  8  +3.2050e-01  +3.2130e-01  8.01e-04  1.62e-05  2.59e-04  1.52e-06  7.87e-05  9.80e-01  
  9  +3.2020e-01  +3.2021e-01  7.97e-06  1.61e-07  2.58e-06  1.51e-08  7.89e-07  9.90e-01  
 10  +3.2020e-01  +3.2020e-01  7.97e-08  1.61e-09  2.58e-08  1.51e-10  7.89e-09  9.90e-01  
 11  +3.2020e-01  +3.2020e-01  7.97e-10  1.61e-11  2.58e-10  1.51e-12  7.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 408.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:38 PM: Optimal value: 3.202e-01
(CVXPY) Sep 20 03:04:38 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:04:38 PM: Solver (including time spent in interface) took 4.266e-03 seconds
Iteration: 3, Objective: 0.3202
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:38 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:38 PM: Finished problem compilation (took 5.037e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 369
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8819e-01  +5.1538e+01  5.10e+01  8.60e-01  7.70e+00  1.00e+00  1.08e+00   ------   
  1  +5.8645e-01  +1.0055e+01  9.47e+00  2.86e-01  3.90e+00  4.13e-03  4.94e-01  6.79e-01  
  2  +5.1522e-01  +2.0445e+00  1.53e+00  7.81e-02  1.24e+00  9.54e-03  1.89e-01  7.93e-01  
  3  +4.6459e-01  +1.4798e+00  1.02e+00  3.54e-02  5.75e-01  8.33e-03  9.82e-02  5.51e-01  
  4  +4.1760e-01  +7.5751e-01  3.40e-01  1.06e-02  1.71e-01  3.17e-03  3.43e-02  6.88e-01  
  5  +4.0626e-01  +7.2714e-01  3.21e-01  7.99e-03  1.30e-01  3.40e-03  2.59e-02  2.92e-01  
  6  +3.9120e-01  +6.5077e-01  2.60e-01  6.66e-03  1.07e-01  1.68e-03  2.46e-02  3.25e-01  
  7  +3.6392e-01  +5.1149e-01  1.48e-01  3.35e-03  5.37e-02  1.04e-03  1.29e-02  5.42e-01  
  8  +3.6228e-01  +5.0635e-01  1.44e-01  3.26e-03  5.22e-02  1.00e-03  1.25e-02  1.20e-01  
  9  +3.2988e-01  +3.6354e-01  3.37e-02  7.00e-04  1.11e-02  1.75e-04  3.10e-03  7.74e-01  
 10  +3.2047e-01  +3.2120e-01  7.28e-04  1.52e-05  2.41e-04  2.41e-06  7.31e-05  9.88e-01  
 11  +3.2020e-01  +3.2021e-01  7.26e-06  1.52e-07  2.41e-06  2.40e-08  7.33e-07  9.90e-01  
 12  +3.2020e-01  +3.2020e-01  7.26e-08  1.52e-09  2.41e-08  2.40e-10  7.33e-09  9.90e-01  
 13  +3.2020e-01  +3.2020e-01  7.26e-10  1.52e-11  2.41e-10  2.40e-12  7.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 327.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:38 PM: Optimal value: 3.202e-01
(CVXPY) Sep 20 03:04:38 PM: Compilation took 5.037e-03 seconds
(CVXPY) Sep 20 03:04:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.68
  Our objective: 0.3600000000000001

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.3)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1) <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8893518447875977
Best over terms:
  Our final objective: 0.30000000000000004
    Its accruacy: 0.65
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30000000000000004
  Highest accruacy: 0.65
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

