Command:
python test_script.py -s linear_dependence -d 8 -n 10 --seed 43 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 8.

Computed total variation: 0.8
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:13 PM: Your problem has 22 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:13 PM: Finished problem compilation (took 3.319e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 22
  constraints   = 27
  nnz(P)        = 0
  nnz(A)        = 72
  cones (total) = 1
    : Nonnegative = 1,  numel = 27

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4534e-01  +6.1967e+00  5.75e+00  7.65e-01  2.72e+00  1.00e+00  1.29e+00   ------   
  1  +4.7894e-01  +1.3392e+00  8.60e-01  3.02e-01  1.30e+00  3.60e-03  6.45e-01  6.82e-01  
  2  +2.7742e-01  +5.1379e-01  2.36e-01  6.94e-02  3.39e-01  1.32e-02  2.42e-01  7.68e-01  
  3  +2.0728e-01  +2.3036e-01  2.31e-02  6.17e-03  3.15e-02  1.66e-03  2.93e-02  9.14e-01  
  4  +2.0020e-01  +2.0053e-01  3.31e-04  9.16e-05  4.63e-04  2.43e-05  4.52e-04  9.85e-01  
  5  +2.0010e-01  +2.0010e-01  3.31e-06  9.15e-07  4.63e-06  2.43e-07  4.52e-06  9.90e-01  
  6  +2.0010e-01  +2.0010e-01  3.31e-08  9.15e-09  4.63e-08  2.43e-09  4.52e-08  9.90e-01  
  7  +2.0010e-01  +2.0010e-01  3.31e-10  9.15e-11  4.63e-10  2.43e-11  4.52e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:13 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:13 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 03:13:13 PM: Compilation took 3.319e-03 seconds
(CVXPY) Sep 20 03:13:13 PM: Solver (including time spent in interface) took 9.906e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:13 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:13 PM: Finished problem compilation (took 3.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 92
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.1836e-01  +6.6803e+00  6.26e+00  7.95e-01  2.60e+00  1.00e+00  1.37e+00   ------   
  1  +3.4341e-01  +1.2951e+00  9.52e-01  3.04e-01  1.15e+00  3.87e-03  6.35e-01  6.90e-01  
  2  +3.2724e-02  +3.2670e-01  2.94e-01  7.86e-02  3.32e-01  2.04e-02  2.74e-01  8.31e-01  
  3  +1.0174e-01  +1.1725e-01  1.55e-02  4.60e-03  2.00e-02  3.20e-03  1.90e-02  9.66e-01  
  4  +1.0022e-01  +1.0043e-01  2.01e-04  6.31e-05  2.72e-04  3.48e-05  2.67e-04  9.86e-01  
  5  +1.0020e-01  +1.0020e-01  4.04e-06  1.44e-06  6.14e-06  3.30e-07  6.38e-06  9.76e-01  
  6  +1.0020e-01  +1.0020e-01  4.06e-08  1.45e-08  6.17e-08  3.33e-09  6.45e-08  9.90e-01  
  7  +1.0020e-01  +1.0020e-01  4.06e-10  1.45e-10  6.17e-10  3.33e-11  6.45e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:13 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:13 PM: Optimal value: 1.002e-01
(CVXPY) Sep 20 03:13:13 PM: Compilation took 3.004e-03 seconds
(CVXPY) Sep 20 03:13:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:13 PM: Your problem has 42 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:13 PM: Finished problem compilation (took 1.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 47
  nnz(P)        = 0
  nnz(A)        = 123
  cones (total) = 1
    : Nonnegative = 1,  numel = 47

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.6157e-01  +6.3147e+00  5.95e+00  8.19e-01  2.68e+00  1.00e+00  1.29e+00   ------   
  1  +2.1021e-01  +1.1605e+00  9.50e-01  3.31e-01  1.14e+00  4.20e-03  5.87e-01  6.71e-01  
  2  +1.1312e-01  +2.5957e-01  1.46e-01  5.53e-02  2.41e-01  1.24e-02  1.63e-01  8.83e-01  
  3  +1.0082e-01  +1.0950e-01  8.68e-03  3.48e-03  1.54e-02  8.67e-04  1.11e-02  9.40e-01  
  4  +1.0026e-01  +1.0058e-01  3.15e-04  1.32e-04  5.75e-04  2.56e-05  4.21e-04  9.62e-01  
  5  +1.0021e-01  +1.0024e-01  3.21e-05  1.61e-05  6.40e-05  2.05e-07  5.78e-05  9.87e-01  
  6  +1.0020e-01  +1.0020e-01  4.73e-07  2.39e-07  9.43e-07  6.98e-09  9.11e-07  9.90e-01  
  7  +1.0020e-01  +1.0020e-01  4.73e-09  2.39e-09  9.42e-09  6.97e-11  9.11e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:13 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:13 PM: Optimal value: 1.002e-01
(CVXPY) Sep 20 03:13:13 PM: Compilation took 1.997e-03 seconds
(CVXPY) Sep 20 03:13:13 PM: Solver (including time spent in interface) took 9.997e-04 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.8

IF 
    (x0 = 0 AND x7 = 1)            <-- (term's our objective: 0.6)
 OR (x0 = 1 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.6718049049377441
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

