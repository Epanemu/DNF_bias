Command:
python test_script.py -s linear_dependence -d 8 -n 5000 --seed 43 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1372
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 8.

Computed total variation: 0.2212
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:34 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:34 PM: Finished problem compilation (took 1.160e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 27517
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3495e+02  5.34e+02  4.16e-01  4.97e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3468e-01  +6.3348e+01  6.28e+01  1.58e-01  2.42e+01  1.47e-02  2.65e-01  9.02e-01  
  3  +5.0895e-01  +1.6276e+01  1.58e+01  1.05e-01  1.58e+01  3.90e-05  2.51e-01  2.30e-01  
  4  +5.0046e-01  +1.0906e+00  5.90e-01  5.73e-03  8.91e-01  6.32e-06  1.04e-01  9.90e-01  
  5  +5.0009e-01  +6.2781e-01  1.28e-01  1.21e-03  1.90e-01  6.56e-06  2.34e-02  8.53e-01  
  6  +4.9993e-01  +6.9794e-01  1.98e-01  6.22e-04  9.84e-02  1.01e-04  2.00e-03  9.38e-01  
  7  +4.9882e-01  +6.8719e-01  1.88e-01  1.47e-04  2.33e-02  4.19e-04  4.34e-04  8.00e-01  
  8  +4.9433e-01  +6.3704e-01  1.43e-01  8.03e-05  1.27e-02  3.29e-04  2.40e-04  6.46e-01  
  9  +4.8471e-01  +5.7383e-01  8.91e-02  5.36e-05  8.46e-03  7.99e-05  1.70e-04  4.82e-01  
 10  +4.7323e-01  +5.1124e-01  3.80e-02  1.95e-05  3.07e-03  1.48e-05  6.55e-05  7.82e-01  
 11  +4.6774e-01  +4.8472e-01  1.70e-02  7.99e-06  1.26e-03  1.30e-06  2.86e-05  9.90e-01  
 12  +4.6310e-01  +4.6465e-01  1.55e-03  6.64e-07  1.05e-04  1.12e-07  2.65e-06  9.16e-01  
 13  +4.6251e-01  +4.6253e-01  1.91e-05  7.82e-09  1.23e-06  1.41e-09  3.29e-08  9.89e-01  
 14  +4.6250e-01  +4.6250e-01  1.91e-07  7.82e-11  1.23e-08  1.41e-11  3.29e-10  9.90e-01  
 15  +4.6250e-01  +4.6250e-01  1.92e-09  7.83e-13  1.23e-10  1.50e-13  3.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.9228ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:35 PM: Optimal value: 4.625e-01
(CVXPY) Sep 20 03:14:35 PM: Compilation took 1.160e-02 seconds
(CVXPY) Sep 20 03:14:35 PM: Solver (including time spent in interface) took 2.972e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4625
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:35 PM: Your problem has 2527 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Finished problem compilation (took 1.101e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2527
  constraints   = 5027
  nnz(P)        = 0
  nnz(A)        = 32006
  cones (total) = 1
    : Nonnegative = 1,  numel = 5027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8399e-01  +5.3537e+02  5.35e+02  4.17e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3435e-01  +6.3073e+01  6.25e+01  1.59e-01  2.50e+01  1.48e-02  2.66e-01  9.05e-01  
  3  +5.0880e-01  +1.6117e+01  1.56e+01  1.05e-01  1.62e+01  3.92e-05  2.51e-01  2.40e-01  
  4  +5.0087e-01  +1.8691e+00  1.37e+00  1.33e-02  2.11e+00  8.38e-06  1.54e-01  6.37e-01  
  5  +5.0005e-01  +7.5070e-01  2.51e-01  2.38e-03  3.85e-01  5.49e-06  5.51e-02  8.15e-01  
  6  +4.9991e-01  +7.3843e-01  2.39e-01  2.18e-03  3.54e-01  1.01e-05  2.01e-02  7.38e-01  
  7  +4.9765e-01  +6.9187e-01  1.94e-01  4.96e-04  8.13e-02  8.73e-05  1.51e-03  9.43e-01  
  8  +4.9556e-01  +6.7813e-01  1.83e-01  2.74e-04  4.50e-02  1.37e-04  7.97e-04  5.11e-01  
  9  +4.9323e-01  +6.5941e-01  1.66e-01  1.50e-04  2.47e-02  1.46e-04  4.24e-04  7.24e-01  
 10  +4.9152e-01  +6.5201e-01  1.60e-01  1.17e-04  1.91e-02  1.52e-04  3.28e-04  3.28e-01  
 11  +4.8940e-01  +6.3766e-01  1.48e-01  8.81e-05  1.45e-02  6.79e-05  2.49e-04  7.34e-01  
 12  +4.8669e-01  +6.2348e-01  1.37e-01  7.31e-05  1.20e-02  5.25e-05  2.06e-04  3.76e-01  
 13  +4.7470e-01  +5.7886e-01  1.04e-01  4.05e-05  6.63e-03  1.43e-05  1.16e-04  9.90e-01  
 14  +4.5817e-01  +5.2077e-01  6.26e-02  2.19e-05  3.59e-03  7.66e-06  6.54e-05  5.68e-01  
 15  +4.4629e-01  +4.8059e-01  3.43e-02  1.14e-05  1.85e-03  4.03e-06  3.48e-05  5.05e-01  
 16  +4.3244e-01  +4.3446e-01  2.02e-03  6.32e-07  1.03e-04  1.61e-07  2.01e-06  9.51e-01  
 17  +4.3151e-01  +4.3153e-01  2.05e-05  6.38e-09  1.04e-06  1.62e-09  2.03e-08  9.90e-01  
 18  +4.3150e-01  +4.3150e-01  2.05e-07  6.38e-11  1.04e-08  1.62e-11  2.03e-10  9.90e-01  
 19  +4.3150e-01  +4.3150e-01  2.05e-09  6.38e-13  1.04e-10  1.63e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.8571ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:35 PM: Optimal value: 4.315e-01
(CVXPY) Sep 20 03:14:35 PM: Compilation took 1.101e-02 seconds
(CVXPY) Sep 20 03:14:35 PM: Solver (including time spent in interface) took 4.304e-02 seconds
Iteration: 2, Objective: 0.4315
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:35 PM: Your problem has 2537 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Finished problem compilation (took 1.238e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2537
  constraints   = 5037
  nnz(P)        = 0
  nnz(A)        = 33288
  cones (total) = 1
    : Nonnegative = 1,  numel = 5037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8389e-01  +5.3536e+02  5.35e+02  4.17e-01  5.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3426e-01  +6.2983e+01  6.24e+01  1.58e-01  2.50e+01  1.49e-02  2.65e-01  9.06e-01  
  3  +5.0876e-01  +1.6079e+01  1.56e+01  1.05e-01  1.62e+01  3.93e-05  2.50e-01  2.43e-01  
  4  +5.0083e-01  +1.7972e+00  1.30e+00  1.26e-02  2.01e+00  8.30e-06  1.49e-01  6.65e-01  
  5  +5.0014e-01  +8.6766e-01  3.68e-01  3.50e-03  5.67e-01  6.01e-06  6.83e-02  6.74e-01  
  6  +5.0006e-01  +8.1405e-01  3.14e-01  2.96e-03  4.79e-01  7.40e-06  3.62e-02  5.13e-01  
  7  +4.9896e-01  +7.0426e-01  2.05e-01  8.08e-04  1.33e-01  4.51e-05  2.60e-03  9.88e-01  
  8  +4.9240e-01  +6.6770e-01  1.75e-01  1.37e-04  2.27e-02  2.40e-04  3.86e-04  8.58e-01  
  9  +4.8918e-01  +6.5902e-01  1.70e-01  9.73e-05  1.60e-02  2.60e-04  2.71e-04  4.41e-01  
 10  +4.8773e-01  +6.5302e-01  1.65e-01  9.17e-05  1.51e-02  1.91e-04  2.57e-04  2.75e-01  
 11  +4.7804e-01  +6.1639e-01  1.38e-01  5.85e-05  9.62e-03  1.70e-04  1.67e-04  4.48e-01  
 12  +4.7274e-01  +5.9500e-01  1.22e-01  5.23e-05  8.60e-03  7.34e-05  1.52e-04  4.54e-01  
 13  +4.5373e-01  +5.2564e-01  7.19e-02  2.60e-05  4.25e-03  3.88e-05  7.88e-05  5.36e-01  
 14  +4.4350e-01  +4.8931e-01  4.58e-02  1.56e-05  2.56e-03  1.14e-05  4.86e-05  7.74e-01  
 15  +4.3430e-01  +4.5767e-01  2.34e-02  7.68e-06  1.26e-03  4.57e-06  2.45e-05  7.39e-01  
 16  +4.2861e-01  +4.3840e-01  9.79e-03  3.17e-06  5.19e-04  1.67e-06  1.03e-05  8.28e-01  
 17  +4.2745e-01  +4.3439e-01  6.94e-03  2.24e-06  3.65e-04  1.12e-06  7.28e-06  7.61e-01  
 18  +4.2440e-01  +4.2462e-01  2.17e-04  6.99e-08  1.14e-05  3.39e-08  2.31e-07  9.72e-01  
 19  +4.2430e-01  +4.2430e-01  2.17e-06  6.99e-10  1.14e-07  3.39e-10  2.31e-09  9.90e-01  
 20  +4.2430e-01  +4.2430e-01  2.17e-08  6.99e-12  1.14e-09  3.39e-12  2.31e-11  9.90e-01  
 21  +4.2430e-01  +4.2430e-01  2.17e-10  7.00e-14  1.14e-11  3.39e-14  2.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.1602ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:35 PM: Optimal value: 4.243e-01
(CVXPY) Sep 20 03:14:35 PM: Compilation took 1.238e-02 seconds
(CVXPY) Sep 20 03:14:35 PM: Solver (including time spent in interface) took 5.719e-02 seconds
Iteration: 3, Objective: 0.4243
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:35 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Finished problem compilation (took 1.100e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 34316
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8381e-01  +5.3538e+02  5.35e+02  4.17e-01  5.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3418e-01  +6.2895e+01  6.24e+01  1.58e-01  2.49e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0873e-01  +1.6046e+01  1.55e+01  1.05e-01  1.62e+01  3.93e-05  2.50e-01  2.45e-01  
  4  +5.0089e-01  +1.9097e+00  1.41e+00  1.37e-02  2.18e+00  8.59e-06  1.54e-01  6.32e-01  
  5  +5.0009e-01  +8.2862e-01  3.29e-01  3.13e-03  5.08e-01  6.03e-06  6.23e-02  7.52e-01  
  6  +4.9995e-01  +8.2460e-01  3.25e-01  2.96e-03  4.81e-01  1.07e-05  2.49e-02  7.08e-01  
  7  +4.9581e-01  +7.1100e-01  2.15e-01  3.24e-04  5.36e-02  1.46e-04  9.39e-04  9.82e-01  
  8  +4.9298e-01  +6.9855e-01  2.06e-01  2.04e-04  3.37e-02  1.95e-04  5.78e-04  4.51e-01  
  9  +4.9067e-01  +6.8875e-01  1.98e-01  1.39e-04  2.30e-02  1.49e-04  3.91e-04  6.96e-01  
 10  +4.8889e-01  +6.7631e-01  1.87e-01  1.16e-04  1.92e-02  5.49e-05  3.25e-04  7.36e-01  
 11  +4.7784e-01  +6.3162e-01  1.54e-01  6.68e-05  1.10e-02  4.16e-05  1.90e-04  7.04e-01  
 12  +4.6478e-01  +5.8096e-01  1.16e-01  4.60e-05  7.56e-03  2.55e-05  1.35e-04  4.47e-01  
 13  +4.4562e-01  +5.0890e-01  6.33e-02  2.29e-05  3.76e-03  6.69e-06  7.07e-05  8.73e-01  
 14  +4.3543e-01  +4.7275e-01  3.73e-02  1.29e-05  2.12e-03  4.00e-06  4.09e-05  4.93e-01  
 15  +4.2765e-01  +4.4550e-01  1.78e-02  5.94e-06  9.75e-04  2.23e-06  1.92e-05  7.51e-01  
 16  +4.2219e-01  +4.2683e-01  4.65e-03  1.53e-06  2.50e-04  6.95e-07  5.03e-06  9.90e-01  
 17  +4.2017e-01  +4.2032e-01  1.52e-04  4.98e-08  8.18e-06  2.23e-08  1.66e-07  9.68e-01  
 18  +4.2010e-01  +4.2010e-01  1.52e-06  4.99e-10  8.19e-08  2.23e-10  1.66e-09  9.90e-01  
 19  +4.2010e-01  +4.2010e-01  1.52e-08  4.99e-12  8.19e-10  2.23e-12  1.66e-11  9.90e-01  
 20  +4.2010e-01  +4.2010e-01  1.52e-10  4.99e-14  8.19e-12  2.23e-14  1.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 44.5834ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:35 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 03:14:35 PM: Compilation took 1.100e-02 seconds
(CVXPY) Sep 20 03:14:35 PM: Solver (including time spent in interface) took 4.751e-02 seconds
Iteration: 4, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:35 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Finished problem compilation (took 1.199e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 34769
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8362e-01  +5.3547e+02  5.35e+02  4.18e-01  5.15e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3406e-01  +6.2800e+01  6.23e+01  1.58e-01  2.48e+01  1.49e-02  2.64e-01  9.09e-01  
  3  +5.0870e-01  +1.6015e+01  1.55e+01  1.04e-01  1.61e+01  3.95e-05  2.49e-01  2.49e-01  
  4  +5.0083e-01  +1.8063e+00  1.31e+00  1.27e-02  2.03e+00  8.42e-06  1.47e-01  6.68e-01  
  5  +5.0017e-01  +9.1822e-01  4.18e-01  4.00e-03  6.47e-01  6.49e-06  6.97e-02  6.53e-01  
  6  +5.0003e-01  +8.5413e-01  3.54e-01  3.27e-03  5.30e-01  9.70e-06  2.84e-02  6.62e-01  
  7  +4.9751e-01  +7.7465e-01  2.77e-01  5.69e-04  9.39e-02  9.94e-05  1.66e-03  9.66e-01  
  8  +4.9354e-01  +7.4637e-01  2.53e-01  2.50e-04  4.13e-02  1.87e-04  7.05e-04  6.15e-01  
  9  +4.8960e-01  +7.0539e-01  2.16e-01  1.42e-04  2.35e-02  1.17e-04  3.97e-04  8.42e-01  
 10  +4.8908e-01  +7.0235e-01  2.13e-01  1.38e-04  2.28e-02  1.08e-04  3.86e-04  1.06e-01  
 11  +4.8480e-01  +6.8310e-01  1.98e-01  1.07e-04  1.76e-02  9.80e-05  3.00e-04  3.63e-01  
 12  +4.7656e-01  +6.4691e-01  1.70e-01  7.88e-05  1.30e-02  6.69e-05  2.25e-04  4.70e-01  
 13  +4.5134e-01  +5.4327e-01  9.19e-02  3.44e-05  5.64e-03  1.97e-05  1.04e-04  7.69e-01  
 14  +4.3720e-01  +4.9159e-01  5.44e-02  1.94e-05  3.17e-03  7.92e-06  6.14e-05  7.72e-01  
 15  +4.2309e-01  +4.4116e-01  1.81e-02  6.14e-06  1.00e-03  2.47e-06  2.03e-05  8.09e-01  
 16  +4.2121e-01  +4.3425e-01  1.30e-02  4.35e-06  7.11e-04  1.90e-06  1.45e-05  9.90e-01  
 17  +4.1789e-01  +4.2337e-01  5.48e-03  1.82e-06  2.98e-04  8.02e-07  6.14e-06  6.45e-01  
 18  +4.1557e-01  +4.1574e-01  1.65e-04  5.49e-08  8.96e-06  2.40e-08  1.87e-07  9.70e-01  
 19  +4.1550e-01  +4.1550e-01  1.65e-06  5.49e-10  8.97e-08  2.41e-10  1.87e-09  9.90e-01  
 20  +4.1550e-01  +4.1550e-01  1.65e-08  5.49e-12  8.97e-10  2.41e-12  1.87e-11  9.90e-01  
 21  +4.1550e-01  +4.1550e-01  1.65e-10  5.50e-14  8.98e-12  2.41e-14  1.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.8738ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:35 PM: Optimal value: 4.155e-01
(CVXPY) Sep 20 03:14:35 PM: Compilation took 1.199e-02 seconds
(CVXPY) Sep 20 03:14:35 PM: Solver (including time spent in interface) took 5.143e-02 seconds
Iteration: 5, Objective: 0.4155
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:35 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Finished problem compilation (took 1.230e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 35403
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8350e-01  +5.3551e+02  5.35e+02  4.18e-01  5.15e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3392e-01  +6.2652e+01  6.21e+01  1.58e-01  2.47e+01  1.49e-02  2.64e-01  9.10e-01  
  3  +5.0866e-01  +1.5966e+01  1.55e+01  1.04e-01  1.61e+01  3.95e-05  2.48e-01  2.52e-01  
  4  +5.0090e-01  +1.9335e+00  1.43e+00  1.39e-02  2.22e+00  8.76e-06  1.52e-01  6.32e-01  
  5  +5.0020e-01  +9.9153e-01  4.91e-01  4.71e-03  7.60e-01  6.79e-06  7.74e-02  6.12e-01  
  6  +4.9982e-01  +7.6605e-01  2.66e-01  2.23e-03  3.63e-01  1.35e-05  1.25e-02  9.32e-01  
  7  +4.9319e-01  +7.4582e-01  2.53e-01  2.33e-04  3.86e-02  2.24e-04  6.53e-04  9.58e-01  
  8  +4.8963e-01  +7.3039e-01  2.41e-01  1.63e-04  2.70e-02  2.29e-04  4.55e-04  4.60e-01  
  9  +4.8681e-01  +7.1069e-01  2.24e-01  1.45e-04  2.39e-02  1.54e-04  4.08e-04  3.50e-01  
 10  +4.7734e-01  +6.6582e-01  1.88e-01  9.30e-05  1.53e-02  1.33e-04  2.67e-04  4.69e-01  
 11  +4.7457e-01  +6.5525e-01  1.81e-01  8.51e-05  1.40e-02  1.12e-04  2.46e-04  2.01e-01  
 12  +4.7033e-01  +6.3592e-01  1.66e-01  7.85e-05  1.29e-02  5.56e-05  2.30e-04  4.34e-01  
 13  +4.5140e-01  +5.5965e-01  1.08e-01  4.29e-05  7.04e-03  3.47e-05  1.31e-04  4.81e-01  
 14  +4.3171e-01  +4.8284e-01  5.11e-02  1.87e-05  3.05e-03  3.48e-06  6.06e-05  9.90e-01  
 15  +4.2000e-01  +4.4029e-01  2.03e-02  7.11e-06  1.16e-03  1.64e-06  2.39e-05  6.88e-01  
 16  +4.1948e-01  +4.3836e-01  1.89e-02  6.57e-06  1.07e-03  1.69e-06  2.22e-05  2.26e-01  
 17  +4.1736e-01  +4.3096e-01  1.36e-02  4.66e-06  7.61e-04  1.45e-06  1.58e-05  5.16e-01  
 18  +4.1270e-01  +4.1504e-01  2.33e-03  7.93e-07  1.29e-04  3.01e-07  2.74e-06  9.49e-01  
 19  +4.1171e-01  +4.1175e-01  3.15e-05  1.07e-08  1.74e-06  4.04e-09  3.72e-08  9.87e-01  
 20  +4.1170e-01  +4.1170e-01  3.15e-07  1.07e-10  1.74e-08  4.04e-11  3.72e-10  9.90e-01  
 21  +4.1170e-01  +4.1170e-01  3.15e-09  1.07e-12  1.74e-10  4.04e-13  3.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.7954ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:35 PM: Optimal value: 4.117e-01
(CVXPY) Sep 20 03:14:35 PM: Compilation took 1.230e-02 seconds
(CVXPY) Sep 20 03:14:35 PM: Solver (including time spent in interface) took 5.282e-02 seconds
Iteration: 6, Objective: 0.4117
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:35 PM: Your problem has 2577 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:35 PM: Finished problem compilation (took 1.345e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2577
  constraints   = 5077
  nnz(P)        = 0
  nnz(A)        = 35717
  cones (total) = 1
    : Nonnegative = 1,  numel = 5077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8338e-01  +5.3559e+02  5.35e+02  4.18e-01  5.14e+01  3.81e-03  5.63e-01  5.97e-01  
  2  +5.3382e-01  +6.2564e+01  6.20e+01  1.58e-01  2.46e+01  1.50e-02  2.64e-01  9.12e-01  
  3  +5.0864e-01  +1.5943e+01  1.54e+01  1.04e-01  1.60e+01  3.96e-05  2.48e-01  2.54e-01  
  4  +5.0084e-01  +1.8337e+00  1.33e+00  1.30e-02  2.07e+00  8.56e-06  1.46e-01  6.64e-01  
  5  +5.0020e-01  +9.8789e-01  4.88e-01  4.68e-03  7.55e-01  7.02e-06  7.31e-02  6.16e-01  
  6  +4.9976e-01  +8.6930e-01  3.70e-01  2.69e-03  4.38e-01  2.00e-05  1.16e-02  9.90e-01  
  7  +4.9418e-01  +8.1388e-01  3.20e-01  3.14e-04  5.20e-02  2.03e-04  8.81e-04  9.28e-01  
  8  +4.8885e-01  +7.7189e-01  2.83e-01  1.86e-04  3.07e-02  2.26e-04  5.21e-04  5.21e-01  
  9  +4.8801e-01  +7.5563e-01  2.68e-01  1.77e-04  2.92e-02  1.64e-04  4.98e-04  2.29e-01  
 10  +4.8185e-01  +7.2161e-01  2.40e-01  1.28e-04  2.12e-02  1.51e-04  3.65e-04  3.67e-01  
 11  +4.7318e-01  +6.7525e-01  2.02e-01  9.32e-05  1.53e-02  1.10e-04  2.70e-04  4.09e-01  
 12  +4.6810e-01  +6.5082e-01  1.83e-01  8.05e-05  1.32e-02  8.65e-05  2.37e-04  2.37e-01  
 13  +4.4843e-01  +5.5368e-01  1.05e-01  4.27e-05  6.99e-03  8.86e-07  1.33e-04  9.36e-01  
 14  +4.2873e-01  +4.7652e-01  4.78e-02  1.77e-05  2.89e-03  4.96e-06  5.83e-05  9.19e-01  
 15  +4.2180e-01  +4.5106e-01  2.93e-02  1.05e-05  1.71e-03  3.28e-06  3.53e-05  5.61e-01  
 16  +4.1881e-01  +4.4022e-01  2.14e-02  7.55e-06  1.23e-03  2.56e-06  2.56e-05  5.06e-01  
 17  +4.1244e-01  +4.1777e-01  5.32e-03  1.85e-06  3.01e-04  6.45e-07  6.46e-06  7.94e-01  
 18  +4.1035e-01  +4.1046e-01  1.15e-04  3.99e-08  6.51e-06  1.39e-08  1.41e-07  9.80e-01  
 19  +4.1030e-01  +4.1030e-01  1.15e-06  4.00e-10  6.51e-08  1.39e-10  1.41e-09  9.90e-01  
 20  +4.1030e-01  +4.1030e-01  1.15e-08  4.00e-12  6.51e-10  1.39e-12  1.41e-11  9.90e-01  
 21  +4.1030e-01  +4.1030e-01  1.15e-10  4.00e-14  6.51e-12  1.39e-14  1.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.6568ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:35 PM: Optimal value: 4.103e-01
(CVXPY) Sep 20 03:14:35 PM: Compilation took 1.345e-02 seconds
(CVXPY) Sep 20 03:14:35 PM: Solver (including time spent in interface) took 5.044e-02 seconds
Iteration: 7, Objective: 0.4103
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:36 PM: Your problem has 2587 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Finished problem compilation (took 1.402e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2587
  constraints   = 5087
  nnz(P)        = 0
  nnz(A)        = 36155
  cones (total) = 1
    : Nonnegative = 1,  numel = 5087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8332e-01  +5.3559e+02  5.35e+02  4.19e-01  5.13e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3376e-01  +6.2490e+01  6.20e+01  1.58e-01  2.45e+01  1.50e-02  2.64e-01  9.12e-01  
  3  +5.0863e-01  +1.5923e+01  1.54e+01  1.04e-01  1.60e+01  3.97e-05  2.47e-01  2.55e-01  
  4  +5.0095e-01  +2.0275e+00  1.53e+00  1.49e-02  2.36e+00  9.00e-06  1.55e-01  6.07e-01  
  5  +5.0019e-01  +9.9839e-01  4.98e-01  4.78e-03  7.71e-01  6.91e-06  7.76e-02  6.29e-01  
  6  +4.9988e-01  +9.0744e-01  4.08e-01  3.43e-03  5.56e-01  1.46e-05  1.90e-02  8.88e-01  
  7  +4.9247e-01  +8.1447e-01  3.22e-01  2.80e-04  4.64e-02  2.35e-04  7.87e-04  9.70e-01  
  8  +4.8834e-01  +7.8567e-01  2.97e-01  1.83e-04  3.02e-02  2.37e-04  5.09e-04  5.21e-01  
  9  +4.8180e-01  +7.3854e-01  2.57e-01  1.28e-04  2.11e-02  1.67e-04  3.61e-04  5.31e-01  
 10  +4.6505e-01  +6.4680e-01  1.82e-01  7.79e-05  1.28e-02  8.32e-05  2.30e-04  5.50e-01  
 11  +4.3899e-01  +5.2797e-01  8.90e-02  3.50e-05  5.71e-03  2.29e-05  1.12e-04  6.46e-01  
 12  +4.3359e-01  +5.0602e-01  7.24e-02  2.78e-05  4.54e-03  1.59e-05  9.06e-05  3.90e-01  
 13  +4.2122e-01  +4.5789e-01  3.67e-02  1.35e-05  2.21e-03  7.35e-06  4.60e-05  5.60e-01  
 14  +4.1748e-01  +4.4373e-01  2.63e-02  9.53e-06  1.55e-03  5.18e-06  3.28e-05  3.28e-01  
 15  +4.1563e-01  +4.3595e-01  2.03e-02  7.26e-06  1.18e-03  3.40e-06  2.51e-05  6.19e-01  
 16  +4.0894e-01  +4.1196e-01  3.02e-03  1.07e-06  1.74e-04  3.98e-07  3.81e-06  9.86e-01  
 17  +4.0772e-01  +4.0778e-01  5.52e-05  1.95e-08  3.17e-06  7.25e-09  7.00e-08  9.84e-01  
 18  +4.0770e-01  +4.0770e-01  5.52e-07  1.95e-10  3.17e-08  7.25e-11  7.00e-10  9.90e-01  
 19  +4.0770e-01  +4.0770e-01  5.52e-09  1.95e-12  3.17e-10  7.26e-13  7.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.9786ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:36 PM: Optimal value: 4.077e-01
(CVXPY) Sep 20 03:14:36 PM: Compilation took 1.402e-02 seconds
(CVXPY) Sep 20 03:14:36 PM: Solver (including time spent in interface) took 5.049e-02 seconds
Iteration: 8, Objective: 0.4077
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:36 PM: Your problem has 2594 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Finished problem compilation (took 1.324e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2594
  constraints   = 5094
  nnz(P)        = 0
  nnz(A)        = 36457
  cones (total) = 1
    : Nonnegative = 1,  numel = 5094

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8325e-01  +5.3558e+02  5.35e+02  4.19e-01  5.12e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3372e-01  +6.2448e+01  6.19e+01  1.58e-01  2.44e+01  1.50e-02  2.63e-01  9.13e-01  
  3  +5.0862e-01  +1.5910e+01  1.54e+01  1.04e-01  1.59e+01  3.97e-05  2.47e-01  2.57e-01  
  4  +5.0095e-01  +2.0229e+00  1.52e+00  1.48e-02  2.36e+00  9.00e-06  1.54e-01  6.10e-01  
  5  +5.0016e-01  +9.6809e-01  4.68e-01  4.49e-03  7.24e-01  6.89e-06  7.29e-02  6.59e-01  
  6  +4.9981e-01  +8.9731e-01  3.97e-01  3.28e-03  5.33e-01  1.63e-05  1.75e-02  8.54e-01  
  7  +4.9489e-01  +8.4369e-01  3.49e-01  4.67e-04  7.72e-02  1.62e-04  1.33e-03  9.34e-01  
  8  +4.9214e-01  +8.1244e-01  3.20e-01  3.08e-04  5.09e-02  1.76e-04  8.70e-04  4.68e-01  
  9  +4.8698e-01  +7.7822e-01  2.91e-01  1.95e-04  3.21e-02  2.01e-04  5.50e-04  4.51e-01  
 10  +4.8320e-01  +7.3737e-01  2.54e-01  1.50e-04  2.47e-02  1.07e-04  4.26e-04  5.74e-01  
 11  +4.6612e-01  +6.4875e-01  1.83e-01  7.97e-05  1.31e-02  6.22e-05  2.35e-04  6.85e-01  
 12  +4.4251e-01  +5.4500e-01  1.02e-01  4.08e-05  6.66e-03  2.68e-05  1.29e-04  5.18e-01  
 13  +4.3398e-01  +5.1122e-01  7.72e-02  2.97e-05  4.85e-03  1.65e-05  9.66e-05  4.58e-01  
 14  +4.1945e-01  +4.5440e-01  3.49e-02  1.29e-05  2.10e-03  6.43e-06  4.43e-05  6.34e-01  
 15  +4.1649e-01  +4.4321e-01  2.67e-02  9.75e-06  1.59e-03  4.84e-06  3.37e-05  2.89e-01  
 16  +4.1416e-01  +4.3284e-01  1.87e-02  6.71e-06  1.09e-03  2.53e-06  2.34e-05  9.90e-01  
 17  +4.1009e-01  +4.1871e-01  8.63e-03  3.09e-06  5.02e-04  1.17e-06  1.10e-05  5.75e-01  
 18  +4.0719e-01  +4.0862e-01  1.43e-03  5.13e-07  8.34e-05  1.90e-07  1.86e-06  8.86e-01  
 19  +4.0662e-01  +4.0668e-01  5.50e-05  1.97e-08  3.20e-06  6.97e-09  7.18e-08  9.90e-01  
 20  +4.0660e-01  +4.0660e-01  5.51e-07  1.97e-10  3.21e-08  6.98e-11  7.19e-10  9.90e-01  
 21  +4.0660e-01  +4.0660e-01  5.51e-09  1.97e-12  3.21e-10  6.98e-13  7.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.4251ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:36 PM: Optimal value: 4.066e-01
(CVXPY) Sep 20 03:14:36 PM: Compilation took 1.324e-02 seconds
(CVXPY) Sep 20 03:14:36 PM: Solver (including time spent in interface) took 5.704e-02 seconds
Iteration: 9, Objective: 0.4066
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:36 PM: Your problem has 2599 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Finished problem compilation (took 8.114e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2599
  constraints   = 5099
  nnz(P)        = 0
  nnz(A)        = 36727
  cones (total) = 1
    : Nonnegative = 1,  numel = 5099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8316e-01  +5.3563e+02  5.35e+02  4.19e-01  5.12e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3365e-01  +6.2382e+01  6.18e+01  1.57e-01  2.43e+01  1.50e-02  2.63e-01  9.14e-01  
  3  +5.0860e-01  +1.5893e+01  1.54e+01  1.04e-01  1.59e+01  3.97e-05  2.47e-01  2.58e-01  
  4  +5.0100e-01  +2.1167e+00  1.62e+00  1.58e-02  2.50e+00  9.24e-06  1.57e-01  5.87e-01  
  5  +5.0014e-01  +9.5282e-01  4.53e-01  4.35e-03  7.01e-01  6.80e-06  7.14e-02  6.80e-01  
  6  +4.9992e-01  +9.3892e-01  4.39e-01  3.92e-03  6.34e-01  1.32e-05  2.67e-02  7.02e-01  
  7  +4.9522e-01  +8.5578e-01  3.61e-01  5.57e-04  9.20e-02  1.47e-04  1.60e-03  9.49e-01  
  8  +4.9234e-01  +8.2646e-01  3.34e-01  3.39e-04  5.60e-02  1.76e-04  9.55e-04  5.36e-01  
  9  +4.8652e-01  +7.7731e-01  2.91e-01  1.94e-04  3.21e-02  1.79e-04  5.48e-04  6.13e-01  
 10  +4.7664e-01  +7.1886e-01  2.42e-01  1.25e-04  2.06e-02  1.48e-04  3.60e-04  4.81e-01  
 11  +4.6397e-01  +6.4892e-01  1.85e-01  8.75e-05  1.43e-02  5.19e-05  2.62e-04  6.22e-01  
 12  +4.3791e-01  +5.3280e-01  9.49e-02  3.84e-05  6.27e-03  2.01e-05  1.23e-04  6.25e-01  
 13  +4.3197e-01  +5.1033e-01  7.84e-02  3.07e-05  5.01e-03  1.45e-05  1.01e-04  3.78e-01  
 14  +4.1697e-01  +4.5163e-01  3.47e-02  1.30e-05  2.11e-03  5.58e-06  4.49e-05  6.58e-01  
 15  +4.1430e-01  +4.4151e-01  2.72e-02  1.01e-05  1.64e-03  4.33e-06  3.52e-05  2.75e-01  
 16  +4.1162e-01  +4.3000e-01  1.84e-02  6.69e-06  1.09e-03  2.42e-06  2.36e-05  9.90e-01  
 17  +4.0740e-01  +4.1518e-01  7.78e-03  2.82e-06  4.59e-04  1.02e-06  1.02e-05  6.05e-01  
 18  +4.0467e-01  +4.0555e-01  8.84e-04  3.20e-07  5.21e-05  1.12e-07  1.18e-06  9.57e-01  
 19  +4.0431e-01  +4.0433e-01  2.32e-05  8.40e-09  1.37e-06  2.86e-09  3.11e-08  9.90e-01  
 20  +4.0430e-01  +4.0430e-01  2.32e-07  8.41e-11  1.37e-08  2.86e-11  3.11e-10  9.90e-01  
 21  +4.0430e-01  +4.0430e-01  2.32e-09  8.41e-13  1.37e-10  2.87e-13  3.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.0009ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:36 PM: Optimal value: 4.043e-01
(CVXPY) Sep 20 03:14:36 PM: Compilation took 8.114e-03 seconds
(CVXPY) Sep 20 03:14:36 PM: Solver (including time spent in interface) took 5.804e-02 seconds
Iteration: 10, Objective: 0.4043
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:36 PM: Your problem has 2608 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Finished problem compilation (took 1.214e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2608
  constraints   = 5108
  nnz(P)        = 0
  nnz(A)        = 37048
  cones (total) = 1
    : Nonnegative = 1,  numel = 5108

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8311e-01  +5.3561e+02  5.35e+02  4.19e-01  5.11e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3360e-01  +6.2339e+01  6.18e+01  1.57e-01  2.42e+01  1.50e-02  2.63e-01  9.14e-01  
  3  +5.0859e-01  +1.5876e+01  1.54e+01  1.04e-01  1.58e+01  3.98e-05  2.46e-01  2.60e-01  
  4  +5.0097e-01  +2.0663e+00  1.57e+00  1.53e-02  2.42e+00  9.15e-06  1.55e-01  6.01e-01  
  5  +5.0016e-01  +9.7081e-01  4.71e-01  4.52e-03  7.28e-01  7.00e-06  7.11e-02  6.67e-01  
  6  +4.9970e-01  +9.4487e-01  4.45e-01  3.41e-03  5.51e-01  2.05e-05  1.57e-02  8.74e-01  
  7  +4.9428e-01  +8.8230e-01  3.88e-01  4.96e-04  8.19e-02  1.74e-04  1.41e-03  9.15e-01  
  8  +4.9448e-01  +8.6390e-01  3.69e-01  4.20e-04  6.94e-02  1.42e-04  1.18e-03  3.81e-01  
  9  +4.8557e-01  +7.5252e-01  2.67e-01  1.46e-04  2.42e-02  1.42e-04  4.07e-04  9.77e-01  
 10  +4.7835e-01  +7.1539e-01  2.37e-01  1.21e-04  1.99e-02  9.35e-05  3.45e-04  3.74e-01  
 11  +4.7656e-01  +7.0711e-01  2.31e-01  1.18e-04  1.94e-02  8.39e-05  3.38e-04  8.90e-02  
 12  +4.5638e-01  +6.1499e-01  1.59e-01  6.84e-05  1.12e-02  4.28e-05  2.08e-04  5.65e-01  
 13  +4.3729e-01  +5.3411e-01  9.68e-02  3.91e-05  6.38e-03  2.02e-05  1.26e-04  5.09e-01  
 14  +4.3131e-01  +5.1007e-01  7.88e-02  3.10e-05  5.06e-03  1.32e-05  1.02e-04  5.24e-01  
 15  +4.1681e-01  +4.5319e-01  3.64e-02  1.37e-05  2.23e-03  5.49e-06  4.78e-05  6.37e-01  
 16  +4.1349e-01  +4.4057e-01  2.71e-02  1.01e-05  1.64e-03  4.06e-06  3.56e-05  2.97e-01  
 17  +4.1084e-01  +4.2917e-01  1.83e-02  6.73e-06  1.09e-03  2.37e-06  2.39e-05  9.90e-01  
 18  +4.0670e-01  +4.1454e-01  7.84e-03  2.87e-06  4.66e-04  1.01e-06  1.04e-05  6.05e-01  
 19  +4.0405e-01  +4.0516e-01  1.11e-03  4.06e-07  6.60e-05  1.40e-07  1.51e-06  9.28e-01  
 20  +4.0361e-01  +4.0365e-01  3.56e-05  1.30e-08  2.11e-06  4.31e-09  4.85e-08  9.90e-01  
 21  +4.0360e-01  +4.0360e-01  3.56e-07  1.30e-10  2.12e-08  4.32e-11  4.86e-10  9.90e-01  
 22  +4.0360e-01  +4.0360e-01  3.56e-09  1.30e-12  2.12e-10  4.33e-13  4.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.2212ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:36 PM: Optimal value: 4.036e-01
(CVXPY) Sep 20 03:14:36 PM: Compilation took 1.214e-02 seconds
(CVXPY) Sep 20 03:14:36 PM: Solver (including time spent in interface) took 5.609e-02 seconds
Iteration: 11, Objective: 0.4036
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:36 PM: Your problem has 2614 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Finished problem compilation (took 1.411e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2614
  constraints   = 5114
  nnz(P)        = 0
  nnz(A)        = 37235
  cones (total) = 1
    : Nonnegative = 1,  numel = 5114

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8298e-01  +5.3574e+02  5.35e+02  4.20e-01  5.11e+01  3.81e-03  5.64e-01  5.97e-01  
  2  +5.3352e-01  +6.2278e+01  6.17e+01  1.57e-01  2.42e+01  1.50e-02  2.63e-01  9.15e-01  
  3  +5.0857e-01  +1.5861e+01  1.54e+01  1.04e-01  1.58e+01  3.99e-05  2.46e-01  2.62e-01  
  4  +5.0091e-01  +1.9588e+00  1.46e+00  1.43e-02  2.26e+00  8.93e-06  1.49e-01  6.33e-01  
  5  +5.0016e-01  +9.6935e-01  4.69e-01  4.51e-03  7.26e-01  7.21e-06  6.74e-02  6.66e-01  
  6  +4.9989e-01  +9.7883e-01  4.79e-01  4.04e-03  6.54e-01  1.66e-05  2.21e-02  7.56e-01  
  7  +4.9605e-01  +9.1665e-01  4.21e-01  7.00e-04  1.16e-01  1.35e-04  2.01e-03  9.15e-01  
  8  +4.9293e-01  +8.7502e-01  3.82e-01  3.94e-04  6.51e-02  1.78e-04  1.11e-03  5.51e-01  
  9  +4.8571e-01  +8.0622e-01  3.21e-01  2.06e-04  3.39e-02  2.00e-04  5.79e-04  6.12e-01  
 10  +4.7765e-01  +7.4789e-01  2.70e-01  1.45e-04  2.39e-02  1.44e-04  4.17e-04  4.58e-01  
 11  +4.7456e-01  +7.2806e-01  2.54e-01  1.34e-04  2.20e-02  1.18e-04  3.88e-04  1.75e-01  
 12  +4.5145e-01  +6.0698e-01  1.56e-01  6.69e-05  1.09e-02  5.80e-05  2.06e-04  5.89e-01  
 13  +4.3926e-01  +5.5255e-01  1.13e-01  4.66e-05  7.60e-03  3.52e-05  1.49e-04  3.88e-01  
 14  +4.3052e-01  +5.1485e-01  8.43e-02  3.36e-05  5.46e-03  1.96e-05  1.11e-04  5.14e-01  
 15  +4.1377e-01  +4.4572e-01  3.20e-02  1.21e-05  1.97e-03  5.78e-06  4.28e-05  7.37e-01  
 16  +4.1154e-01  +4.3704e-01  2.55e-02  9.57e-06  1.56e-03  4.55e-06  3.40e-05  2.56e-01  
 17  +4.0949e-01  +4.2734e-01  1.79e-02  6.62e-06  1.08e-03  2.30e-06  2.37e-05  9.90e-01  
 18  +4.0584e-01  +4.1439e-01  8.55e-03  3.16e-06  5.13e-04  1.10e-06  1.16e-05  5.67e-01  
 19  +4.0313e-01  +4.0470e-01  1.57e-03  5.81e-07  9.44e-05  1.99e-07  2.17e-06  8.63e-01  
 20  +4.0253e-01  +4.0260e-01  6.74e-05  2.49e-08  4.04e-06  8.05e-09  9.34e-08  9.90e-01  
 21  +4.0250e-01  +4.0250e-01  6.75e-07  2.49e-10  4.05e-08  8.07e-11  9.36e-10  9.90e-01  
 22  +4.0250e-01  +4.0250e-01  6.75e-09  2.49e-12  4.05e-10  8.07e-13  9.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 55.8055ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:36 PM: Optimal value: 4.025e-01
(CVXPY) Sep 20 03:14:36 PM: Compilation took 1.411e-02 seconds
(CVXPY) Sep 20 03:14:36 PM: Solver (including time spent in interface) took 6.033e-02 seconds
Iteration: 12, Objective: 0.4025
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:36 PM: Your problem has 2624 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:36 PM: Finished problem compilation (took 1.315e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2624
  constraints   = 5124
  nnz(P)        = 0
  nnz(A)        = 37531
  cones (total) = 1
    : Nonnegative = 1,  numel = 5124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.01e+00   ------   
  1  +5.8295e-01  +5.3555e+02  5.35e+02  4.20e-01  5.10e+01  3.81e-03  5.64e-01  5.97e-01  
  2  +5.3352e-01  +6.2272e+01  6.17e+01  1.57e-01  2.41e+01  1.50e-02  2.62e-01  9.15e-01  
  3  +5.0856e-01  +1.5837e+01  1.53e+01  1.03e-01  1.58e+01  3.98e-05  2.46e-01  2.63e-01  
  4  +5.0092e-01  +1.9829e+00  1.48e+00  1.45e-02  2.30e+00  9.01e-06  1.50e-01  6.26e-01  
  5  +5.0017e-01  +9.8388e-01  4.84e-01  4.66e-03  7.48e-01  7.35e-06  6.84e-02  6.67e-01  
  6  +4.9988e-01  +1.0020e+00  5.02e-01  4.17e-03  6.73e-01  1.75e-05  2.18e-02  7.76e-01  
  7  +4.9179e-01  +8.7371e-01  3.82e-01  3.29e-04  5.43e-02  2.63e-04  9.17e-04  9.64e-01  
  8  +4.8504e-01  +8.1308e-01  3.28e-01  2.03e-04  3.34e-02  2.44e-04  5.69e-04  5.30e-01  
  9  +4.7953e-01  +7.7108e-01  2.92e-01  1.62e-04  2.66e-02  1.87e-04  4.62e-04  3.32e-01  
 10  +4.6653e-01  +6.8877e-01  2.22e-01  1.07e-04  1.75e-02  9.19e-05  3.16e-04  5.62e-01  
 11  +4.4097e-01  +5.6078e-01  1.20e-01  5.06e-05  8.25e-03  3.52e-05  1.62e-04  5.85e-01  
 12  +4.3610e-01  +5.4041e-01  1.04e-01  4.28e-05  6.98e-03  2.87e-05  1.39e-04  2.24e-01  
 13  +4.3044e-01  +5.1559e-01  8.51e-02  3.39e-05  5.51e-03  1.72e-05  1.12e-04  5.49e-01  
 14  +4.1969e-01  +4.7192e-01  5.22e-02  2.02e-05  3.28e-03  9.82e-06  6.97e-05  4.34e-01  
 15  +4.0868e-01  +4.2762e-01  1.89e-02  7.15e-06  1.16e-03  3.06e-06  2.58e-05  7.45e-01  
 16  +4.0406e-01  +4.0971e-01  5.65e-03  2.11e-06  3.43e-04  8.50e-07  7.85e-06  7.70e-01  
 17  +4.0260e-01  +4.0407e-01  1.47e-03  5.49e-07  8.90e-05  1.76e-07  2.06e-06  9.90e-01  
 18  +4.0201e-01  +4.0203e-01  2.26e-05  8.40e-09  1.36e-06  2.66e-09  3.18e-08  9.88e-01  
 19  +4.0200e-01  +4.0200e-01  2.27e-07  8.44e-11  1.37e-08  2.67e-11  3.19e-10  9.90e-01  
 20  +4.0200e-01  +4.0200e-01  2.33e-09  8.67e-13  1.41e-10  2.76e-13  3.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.8687ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:36 PM: Optimal value: 4.020e-01
(CVXPY) Sep 20 03:14:36 PM: Compilation took 1.315e-02 seconds
(CVXPY) Sep 20 03:14:36 PM: Solver (including time spent in interface) took 5.722e-02 seconds
Iteration: 13, Objective: 0.4020
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:37 PM: Your problem has 2626 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:37 PM: Finished problem compilation (took 1.338e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2626
  constraints   = 5126
  nnz(P)        = 0
  nnz(A)        = 37574
  cones (total) = 1
    : Nonnegative = 1,  numel = 5126

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.01e+00   ------   
  1  +5.8294e-01  +5.3557e+02  5.35e+02  4.20e-01  5.10e+01  3.81e-03  5.64e-01  5.97e-01  
  2  +5.3351e-01  +6.2261e+01  6.17e+01  1.57e-01  2.41e+01  1.50e-02  2.62e-01  9.16e-01  
  3  +5.0855e-01  +1.5835e+01  1.53e+01  1.03e-01  1.57e+01  3.99e-05  2.46e-01  2.63e-01  
  4  +5.0092e-01  +1.9832e+00  1.48e+00  1.45e-02  2.30e+00  9.01e-06  1.50e-01  6.26e-01  
  5  +5.0017e-01  +9.8206e-01  4.82e-01  4.64e-03  7.46e-01  7.39e-06  6.80e-02  6.72e-01  
  6  +4.9978e-01  +1.0119e+00  5.12e-01  3.94e-03  6.37e-01  2.10e-05  1.80e-02  8.40e-01  
  7  +4.9069e-01  +8.8233e-01  3.92e-01  3.02e-04  4.98e-02  2.93e-04  8.39e-04  9.58e-01  
  8  +4.8384e-01  +8.1982e-01  3.36e-01  1.95e-04  3.21e-02  2.51e-04  5.47e-04  5.05e-01  
  9  +4.7879e-01  +7.7024e-01  2.91e-01  1.58e-04  2.60e-02  1.49e-04  4.52e-04  4.16e-01  
 10  +4.5231e-01  +6.1155e-01  1.59e-01  6.74e-05  1.10e-02  4.67e-05  2.06e-04  7.62e-01  
 11  +4.4399e-01  +5.7494e-01  1.31e-01  5.41e-05  8.81e-03  3.19e-05  1.70e-04  3.54e-01  
 12  +4.3700e-01  +5.4506e-01  1.08e-01  4.37e-05  7.11e-03  2.43e-05  1.41e-04  2.61e-01  
 13  +4.2459e-01  +4.9252e-01  6.79e-02  2.66e-05  4.31e-03  1.32e-05  8.96e-05  4.93e-01  
 14  +4.1592e-01  +4.5710e-01  4.12e-02  1.58e-05  2.56e-03  7.53e-06  5.52e-05  4.47e-01  
 15  +4.0881e-01  +4.2849e-01  1.97e-02  7.43e-06  1.20e-03  3.38e-06  2.69e-05  5.88e-01  
 16  +4.0409e-01  +4.0997e-01  5.89e-03  2.20e-06  3.57e-04  9.62e-07  8.19e-06  7.32e-01  
 17  +4.0262e-01  +4.0416e-01  1.54e-03  5.73e-07  9.28e-05  1.85e-07  2.15e-06  9.90e-01  
 18  +4.0201e-01  +4.0203e-01  2.44e-05  9.09e-09  1.47e-06  2.89e-09  3.44e-08  9.88e-01  
 19  +4.0200e-01  +4.0200e-01  2.45e-07  9.12e-11  1.48e-08  2.90e-11  3.45e-10  9.90e-01  
 20  +4.0200e-01  +4.0200e-01  2.52e-09  9.38e-13  1.52e-10  2.99e-13  3.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.0466ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:37 PM: Optimal value: 4.020e-01
(CVXPY) Sep 20 03:14:37 PM: Compilation took 1.338e-02 seconds
(CVXPY) Sep 20 03:14:37 PM: Solver (including time spent in interface) took 5.457e-02 seconds
Iteration: 14, Objective: 0.4020
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:37 PM: Your problem has 2628 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:37 PM: Finished problem compilation (took 1.922e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2628
  constraints   = 5128
  nnz(P)        = 0
  nnz(A)        = 37608
  cones (total) = 1
    : Nonnegative = 1,  numel = 5128

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.01e+00   ------   
  1  +5.8293e-01  +5.3554e+02  5.35e+02  4.20e-01  5.10e+01  3.81e-03  5.64e-01  5.97e-01  
  2  +5.3351e-01  +6.2260e+01  6.17e+01  1.57e-01  2.41e+01  1.50e-02  2.62e-01  9.16e-01  
  3  +5.0855e-01  +1.5832e+01  1.53e+01  1.03e-01  1.57e+01  3.98e-05  2.46e-01  2.63e-01  
  4  +5.0092e-01  +1.9799e+00  1.48e+00  1.45e-02  2.29e+00  9.01e-06  1.50e-01  6.27e-01  
  5  +5.0017e-01  +9.8469e-01  4.85e-01  4.67e-03  7.50e-01  7.40e-06  6.81e-02  6.70e-01  
  6  +4.9962e-01  +1.0262e+00  5.27e-01  3.55e-03  5.74e-01  2.67e-05  1.40e-02  9.08e-01  
  7  +4.9063e-01  +9.0679e-01  4.16e-01  3.19e-04  5.27e-02  2.89e-04  8.89e-04  9.40e-01  
  8  +4.8486e-01  +8.4495e-01  3.60e-01  2.15e-04  3.55e-02  2.43e-04  6.04e-04  4.76e-01  
  9  +4.8103e-01  +8.0211e-01  3.21e-01  1.82e-04  2.99e-02  1.75e-04  5.16e-04  3.05e-01  
 10  +4.7000e-01  +7.2988e-01  2.60e-01  1.27e-04  2.08e-02  1.31e-04  3.71e-04  3.74e-01  
 11  +4.4530e-01  +5.8119e-01  1.36e-01  5.89e-05  9.60e-03  2.07e-05  1.86e-04  7.72e-01  
 12  +4.3904e-01  +5.5388e-01  1.15e-01  4.78e-05  7.79e-03  1.64e-05  1.54e-04  3.29e-01  
 13  +4.2985e-01  +5.1363e-01  8.38e-02  3.35e-05  5.45e-03  1.01e-05  1.12e-04  6.92e-01  
 14  +4.1969e-01  +4.7170e-01  5.20e-02  2.03e-05  3.29e-03  6.15e-06  7.00e-05  4.35e-01  
 15  +4.0930e-01  +4.3020e-01  2.09e-02  7.89e-06  1.28e-03  2.46e-06  2.85e-05  7.11e-01  
 16  +4.0406e-01  +4.0983e-01  5.77e-03  2.16e-06  3.51e-04  6.74e-07  8.02e-06  7.63e-01  
 17  +4.0206e-01  +4.0223e-01  1.69e-04  6.31e-08  1.02e-05  1.93e-08  2.37e-07  9.73e-01  
 18  +4.0200e-01  +4.0200e-01  1.70e-06  6.38e-10  1.03e-07  1.95e-10  2.39e-09  9.90e-01  
 19  +4.0200e-01  +4.0200e-01  1.72e-08  6.44e-12  1.04e-09  1.97e-12  2.42e-11  9.90e-01  
 20  +4.0200e-01  +4.0200e-01  1.75e-10  6.53e-14  1.06e-11  2.00e-14  2.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.5013ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:37 PM: Optimal value: 4.020e-01
(CVXPY) Sep 20 03:14:37 PM: Compilation took 1.922e-02 seconds
(CVXPY) Sep 20 03:14:37 PM: Solver (including time spent in interface) took 5.580e-02 seconds
FULL MODEL:
  Accruacy: 0.587
  Our objective: 0.174

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.1372)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.004)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.810200214385986
Best over terms:
  Our final objective: 0.13719999999999996
    Its accruacy: 0.5686
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.13719999999999996
  Highest accruacy: 0.5686
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

