Command:
python test_script.py -s linear_dependence -d 5 -n 10 --seed 73 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 5.

Computed total variation: 0.6000000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:58 PM: Your problem has 16 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:58 PM: Finished problem compilation (took 4.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 16
  constraints   = 21
  nnz(P)        = 0
  nnz(A)        = 51
  cones (total) = 1
    : Nonnegative = 1,  numel = 21

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7099e-01  +5.7008e+00  5.23e+00  7.28e-01  2.40e+00  1.00e+00  1.20e+00   ------   
  1  +5.5098e-01  +1.3626e+00  8.12e-01  2.73e-01  1.12e+00  3.96e-03  5.81e-01  6.66e-01  
  2  +4.4902e-01  +5.9422e-01  1.45e-01  5.49e-02  2.58e-01  1.24e-02  1.78e-01  8.58e-01  
  3  +4.0315e-01  +4.2073e-01  1.76e-02  5.68e-03  2.77e-02  1.33e-03  2.28e-02  9.31e-01  
  4  +4.0021e-01  +4.0055e-01  3.38e-04  1.09e-04  5.33e-04  2.62e-05  4.47e-04  9.80e-01  
  5  +4.0014e-01  +4.0022e-01  8.01e-05  2.40e-05  1.18e-04  6.12e-06  1.04e-04  8.18e-01  
  6  +4.0010e-01  +4.0011e-01  5.96e-06  1.73e-06  8.60e-06  3.04e-07  7.73e-06  9.90e-01  
  7  +4.0010e-01  +4.0010e-01  6.08e-08  1.75e-08  8.74e-08  3.11e-09  7.87e-08  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  6.08e-10  1.75e-10  8.74e-10  3.11e-11  7.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 124.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:58 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 03:06:58 PM: Compilation took 4.004e-03 seconds
(CVXPY) Sep 20 03:06:58 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:58 PM: Your problem has 17 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:58 PM: Finished problem compilation (took 1.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 17
  constraints   = 22
  nnz(P)        = 0
  nnz(A)        = 54
  cones (total) = 1
    : Nonnegative = 1,  numel = 22

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6536e-01  +5.8006e+00  5.34e+00  7.35e-01  2.43e+00  1.00e+00  1.23e+00   ------   
  1  +5.3385e-01  +1.3658e+00  8.32e-01  2.78e-01  1.14e+00  3.93e-03  5.98e-01  6.64e-01  
  2  +4.1532e-01  +5.7265e-01  1.57e-01  5.37e-02  2.55e-01  1.30e-02  1.82e-01  8.54e-01  
  3  +3.1842e-01  +3.5717e-01  3.87e-02  9.51e-03  4.69e-02  2.36e-03  4.54e-02  8.81e-01  
  4  +3.0056e-01  +3.0130e-01  7.42e-04  1.82e-04  9.00e-04  3.78e-05  9.36e-04  9.80e-01  
  5  +3.0020e-01  +3.0021e-01  7.41e-06  1.81e-06  8.99e-06  3.78e-07  9.37e-06  9.90e-01  
  6  +3.0020e-01  +3.0020e-01  7.41e-08  1.81e-08  8.99e-08  3.78e-09  9.37e-08  9.90e-01  
  7  +3.0020e-01  +3.0020e-01  7.41e-10  1.81e-10  8.99e-10  3.78e-11  9.37e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:58 PM: Optimal value: 3.002e-01
(CVXPY) Sep 20 03:06:58 PM: Compilation took 1.994e-03 seconds
(CVXPY) Sep 20 03:06:58 PM: Solver (including time spent in interface) took 1.009e-03 seconds
Iteration: 2, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:58 PM: Your problem has 27 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:58 PM: Finished problem compilation (took 3.669e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 27
  constraints   = 32
  nnz(P)        = 0
  nnz(A)        = 78
  cones (total) = 1
    : Nonnegative = 1,  numel = 32

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2786e-01  +5.8383e+00  5.41e+00  7.77e-01  2.41e+00  1.00e+00  1.23e+00   ------   
  1  +4.1949e-01  +1.2998e+00  8.80e-01  3.14e-01  1.11e+00  4.09e-03  5.95e-01  6.48e-01  
  2  +2.7582e-01  +4.3977e-01  1.64e-01  5.37e-02  2.40e-01  1.45e-02  1.71e-01  8.72e-01  
  3  +2.0668e-01  +2.2574e-01  1.91e-02  5.51e-03  2.54e-02  1.52e-03  2.18e-02  9.59e-01  
  4  +2.0033e-01  +2.0062e-01  2.86e-04  8.55e-05  3.92e-04  1.79e-05  3.46e-04  9.84e-01  
  5  +2.0021e-01  +2.0023e-01  1.56e-05  5.29e-06  2.29e-05  1.63e-07  2.42e-05  9.32e-01  
  6  +2.0020e-01  +2.0020e-01  1.62e-07  5.51e-08  2.38e-07  2.38e-09  2.67e-07  9.89e-01  
  7  +2.0020e-01  +2.0020e-01  1.62e-09  5.51e-10  2.38e-09  2.38e-11  2.67e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:58 PM: Optimal value: 2.002e-01
(CVXPY) Sep 20 03:06:58 PM: Compilation took 3.669e-03 seconds
(CVXPY) Sep 20 03:06:58 PM: Solver (including time spent in interface) took 4.666e-04 seconds
Iteration: 3, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:58 PM: Your problem has 28 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:58 PM: Finished problem compilation (took 3.123e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 28
  constraints   = 33
  nnz(P)        = 0
  nnz(A)        = 80
  cones (total) = 1
    : Nonnegative = 1,  numel = 33

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2540e-01  +5.8146e+00  5.39e+00  7.80e-01  2.40e+00  1.00e+00  1.22e+00   ------   
  1  +4.0849e-01  +1.2846e+00  8.76e-01  3.14e-01  1.10e+00  4.11e-03  5.89e-01  6.49e-01  
  2  +2.6155e-01  +4.0033e-01  1.39e-01  4.35e-02  1.96e-01  1.47e-02  1.40e-01  9.24e-01  
  3  +2.0552e-01  +2.2030e-01  1.48e-02  4.36e-03  2.00e-02  1.48e-03  1.57e-02  9.19e-01  
  4  +2.0032e-01  +2.0054e-01  2.25e-04  6.93e-05  3.16e-04  1.53e-05  2.53e-04  9.84e-01  
  5  +2.0021e-01  +2.0022e-01  1.08e-05  3.96e-06  1.67e-05  1.48e-07  1.66e-05  9.40e-01  
  6  +2.0020e-01  +2.0020e-01  1.10e-07  4.03e-08  1.70e-07  1.75e-09  1.76e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  1.10e-09  4.03e-10  1.70e-09  1.74e-11  1.76e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 89.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:58 PM: Optimal value: 2.002e-01
(CVXPY) Sep 20 03:06:58 PM: Compilation took 3.123e-03 seconds
(CVXPY) Sep 20 03:06:58 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6

IF 
    (x0 = 0 AND x4 = 0)                       <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7379307746887207
Best over terms:
  Our final objective: 0.4
    Its accruacy: 0.7
    Its hamming distance: 4
  Shortest hamming distance: 2
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

