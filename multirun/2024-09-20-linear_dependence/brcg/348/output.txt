Command:
python test_script.py -s linear_dependence -d 9 -n 5000 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16519999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 9.

Computed total variation: 0.31880000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:42 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:42 PM: Finished problem compilation (took 1.367e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 30019
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5009e+03  2.50e+03  9.80e-01  8.19e+01  1.00e+00  1.00e+00   ------   
  1  +5.8089e-01  +5.4279e+02  5.42e+02  4.28e-01  5.32e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3175e-01  +6.1610e+01  6.11e+01  1.65e-01  2.63e+01  1.63e-02  2.76e-01  9.32e-01  
  3  +5.0843e-01  +1.5888e+01  1.54e+01  1.06e-01  1.65e+01  4.43e-05  2.56e-01  2.95e-01  
  4  +5.0064e-01  +1.3179e+00  8.17e-01  7.97e-03  1.30e+00  6.66e-06  1.16e-01  8.77e-01  
  5  +5.0016e-01  +7.2745e-01  2.27e-01  2.16e-03  3.55e-01  1.11e-05  2.88e-02  8.43e-01  
  6  +4.9990e-01  +8.0254e-01  3.03e-01  6.37e-04  1.06e-01  1.89e-04  1.87e-03  9.50e-01  
  7  +4.9899e-01  +7.7342e-01  2.74e-01  2.65e-04  4.43e-02  3.49e-04  7.53e-04  7.17e-01  
  8  +4.9591e-01  +7.3967e-01  2.44e-01  1.41e-04  2.35e-02  4.78e-04  3.99e-04  5.61e-01  
  9  +4.8993e-01  +6.9093e-01  2.01e-01  1.24e-04  2.07e-02  2.89e-04  3.65e-04  1.77e-01  
 10  +4.7977e-01  +6.1872e-01  1.39e-01  8.48e-05  1.41e-02  7.75e-05  2.64e-04  5.54e-01  
 11  +4.7319e-01  +5.7705e-01  1.04e-01  6.27e-05  1.04e-02  7.56e-07  2.03e-04  8.80e-01  
 12  +4.5605e-01  +4.8640e-01  3.04e-02  1.55e-05  2.57e-03  8.99e-07  5.48e-05  8.16e-01  
 13  +4.4871e-01  +4.5195e-01  3.25e-03  1.56e-06  2.57e-04  9.70e-08  5.92e-06  8.99e-01  
 14  +4.4755e-01  +4.4773e-01  1.78e-04  7.50e-08  1.24e-05  1.09e-08  3.25e-07  9.75e-01  
 15  +4.4750e-01  +4.4750e-01  1.78e-06  7.51e-10  1.24e-07  1.10e-10  3.26e-09  9.90e-01  
 16  +4.4750e-01  +4.4750e-01  1.78e-08  7.51e-12  1.24e-09  1.10e-12  3.26e-11  9.90e-01  
 17  +4.4750e-01  +4.4750e-01  1.78e-10  7.52e-14  1.24e-11  1.13e-14  3.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.1925ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:42 PM: Optimal value: 4.475e-01
(CVXPY) Sep 20 03:18:42 PM: Compilation took 1.367e-02 seconds
(CVXPY) Sep 20 03:18:42 PM: Solver (including time spent in interface) took 4.141e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4475
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:43 PM: Your problem has 2529 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Finished problem compilation (took 2.354e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2529
  constraints   = 5029
  nnz(P)        = 0
  nnz(A)        = 34597
  cones (total) = 1
    : Nonnegative = 1,  numel = 5029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5011e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.8076e-01  +5.4314e+02  5.43e+02  4.29e-01  5.51e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3146e-01  +6.1383e+01  6.09e+01  1.65e-01  2.71e+01  1.64e-02  2.77e-01  9.35e-01  
  3  +5.0830e-01  +1.5756e+01  1.52e+01  1.05e-01  1.70e+01  4.46e-05  2.56e-01  3.07e-01  
  4  +5.0059e-01  +1.2577e+00  7.57e-01  7.41e-03  1.25e+00  6.81e-06  1.06e-01  9.19e-01  
  5  +5.0029e-01  +8.7821e-01  3.78e-01  3.64e-03  6.17e-01  8.01e-06  4.71e-02  6.08e-01  
  6  +5.0028e-01  +8.7696e-01  3.77e-01  3.54e-03  6.03e-01  1.10e-05  2.91e-02  4.25e-01  
  7  +5.0004e-01  +8.0360e-01  3.04e-01  6.03e-04  1.05e-01  1.14e-04  1.68e-03  9.73e-01  
  8  +4.9959e-01  +7.7936e-01  2.80e-01  3.76e-04  6.52e-02  1.25e-04  1.03e-03  6.04e-01  
  9  +4.9770e-01  +7.6326e-01  2.66e-01  1.52e-04  2.64e-02  2.81e-04  4.07e-04  6.32e-01  
 10  +4.9425e-01  +7.3475e-01  2.40e-01  1.38e-04  2.39e-02  2.17e-04  3.73e-04  1.84e-01  
 11  +4.9174e-01  +7.1409e-01  2.22e-01  1.31e-04  2.26e-02  1.44e-04  3.57e-04  2.48e-01  
 12  +4.9022e-01  +7.0495e-01  2.15e-01  1.19e-04  2.07e-02  1.30e-04  3.26e-04  1.80e-01  
 13  +4.8840e-01  +6.9045e-01  2.02e-01  1.09e-04  1.89e-02  6.29e-05  3.00e-04  5.16e-01  
 14  +4.8520e-01  +6.7323e-01  1.88e-01  9.53e-05  1.65e-02  4.19e-05  2.62e-04  4.49e-01  
 15  +4.8066e-01  +6.5412e-01  1.73e-01  7.83e-05  1.35e-02  3.94e-05  2.17e-04  2.37e-01  
 16  +4.7976e-01  +6.4991e-01  1.70e-01  7.68e-05  1.32e-02  3.62e-05  2.13e-04  9.87e-02  
 17  +4.7084e-01  +6.1212e-01  1.41e-01  6.08e-05  1.05e-02  1.33e-05  1.73e-04  8.54e-01  
 18  +4.6090e-01  +5.7360e-01  1.13e-01  4.29e-05  7.38e-03  1.12e-05  1.24e-04  3.00e-01  
 19  +4.5170e-01  +5.3905e-01  8.74e-02  3.07e-05  5.27e-03  1.12e-05  9.02e-05  9.90e-01  
 20  +4.3478e-01  +4.7834e-01  4.36e-02  1.43e-05  2.45e-03  5.24e-06  4.38e-05  5.40e-01  
 21  +4.1817e-01  +4.1947e-01  1.31e-03  4.13e-07  7.06e-05  5.18e-08  1.33e-06  9.90e-01  
 22  +4.1751e-01  +4.1752e-01  1.32e-05  4.15e-09  7.10e-07  5.20e-10  1.34e-08  9.90e-01  
 23  +4.1750e-01  +4.1750e-01  1.32e-07  4.15e-11  7.10e-09  5.20e-12  1.34e-10  9.90e-01  
 24  +4.1750e-01  +4.1750e-01  1.32e-09  4.15e-13  7.10e-11  5.21e-14  1.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.573ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:43 PM: Optimal value: 4.175e-01
(CVXPY) Sep 20 03:18:43 PM: Compilation took 2.354e-02 seconds
(CVXPY) Sep 20 03:18:43 PM: Solver (including time spent in interface) took 9.005e-02 seconds
Iteration: 2, Objective: 0.4175
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:43 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Finished problem compilation (took 2.014e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 35378
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5012e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.8062e-01  +5.4319e+02  5.43e+02  4.30e-01  5.50e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3132e-01  +6.1243e+01  6.07e+01  1.65e-01  2.70e+01  1.64e-02  2.77e-01  9.36e-01  
  3  +5.0827e-01  +1.5713e+01  1.52e+01  1.05e-01  1.70e+01  4.47e-05  2.55e-01  3.11e-01  
  4  +5.0072e-01  +1.4918e+00  9.91e-01  9.69e-03  1.63e+00  7.48e-06  1.23e-01  8.11e-01  
  5  +5.0016e-01  +8.2092e-01  3.21e-01  3.06e-03  5.19e-01  8.57e-06  4.20e-02  7.94e-01  
  6  +4.9935e-01  +9.2270e-01  4.23e-01  1.36e-03  2.34e-01  8.74e-05  4.00e-03  9.67e-01  
  7  +4.9429e-01  +8.6861e-01  3.74e-01  2.58e-04  4.48e-02  4.08e-04  6.98e-04  8.27e-01  
  8  +4.9189e-01  +7.8799e-01  2.96e-01  1.81e-04  3.14e-02  1.96e-04  4.89e-04  6.11e-01  
  9  +4.8520e-01  +7.3643e-01  2.51e-01  1.23e-04  2.13e-02  1.71e-04  3.34e-04  4.24e-01  
 10  +4.8295e-01  +7.1761e-01  2.35e-01  1.08e-04  1.87e-02  1.27e-04  2.95e-04  3.18e-01  
 11  +4.7822e-01  +6.8279e-01  2.05e-01  9.32e-05  1.61e-02  6.40e-05  2.58e-04  4.60e-01  
 12  +4.5787e-01  +5.8942e-01  1.32e-01  4.99e-05  8.59e-03  1.93e-05  1.45e-04  8.17e-01  
 13  +4.2963e-01  +4.7987e-01  5.02e-02  1.74e-05  2.97e-03  5.68e-06  5.41e-05  6.90e-01  
 14  +4.1369e-01  +4.2285e-01  9.15e-03  3.07e-06  5.24e-04  8.98e-07  1.01e-05  8.24e-01  
 15  +4.1002e-01  +4.1030e-01  2.79e-04  9.22e-08  1.57e-05  3.54e-08  3.10e-07  9.90e-01  
 16  +4.0990e-01  +4.0990e-01  2.79e-06  9.24e-10  1.58e-07  3.55e-10  3.11e-09  9.90e-01  
 17  +4.0990e-01  +4.0990e-01  2.79e-08  9.24e-12  1.58e-09  3.55e-12  3.11e-11  9.90e-01  
 18  +4.0990e-01  +4.0990e-01  2.79e-10  9.24e-14  1.58e-11  3.56e-14  3.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.2272ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:43 PM: Optimal value: 4.099e-01
(CVXPY) Sep 20 03:18:43 PM: Compilation took 2.014e-02 seconds
(CVXPY) Sep 20 03:18:43 PM: Solver (including time spent in interface) took 5.239e-02 seconds
Iteration: 3, Objective: 0.4099
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:43 PM: Your problem has 2549 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Finished problem compilation (took 1.476e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2549
  constraints   = 5049
  nnz(P)        = 0
  nnz(A)        = 36162
  cones (total) = 1
    : Nonnegative = 1,  numel = 5049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.8046e-01  +5.4321e+02  5.43e+02  4.30e-01  5.50e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3120e-01  +6.1114e+01  6.06e+01  1.65e-01  2.69e+01  1.65e-02  2.76e-01  9.38e-01  
  3  +5.0822e-01  +1.5666e+01  1.52e+01  1.05e-01  1.69e+01  4.48e-05  2.54e-01  3.15e-01  
  4  +5.0076e-01  +1.5839e+00  1.08e+00  1.06e-02  1.78e+00  7.82e-06  1.27e-01  7.79e-01  
  5  +5.0021e-01  +9.1924e-01  4.19e-01  4.00e-03  6.78e-01  9.06e-06  5.07e-02  7.40e-01  
  6  +4.9971e-01  +8.6675e-01  3.67e-01  2.11e-03  3.64e-01  3.97e-05  7.33e-03  8.93e-01  
  7  +4.9559e-01  +8.3751e-01  3.42e-01  3.36e-04  5.84e-02  2.78e-04  9.06e-04  8.77e-01  
  8  +4.9059e-01  +7.9857e-01  3.08e-01  1.95e-04  3.39e-02  3.57e-04  5.23e-04  4.93e-01  
  9  +4.8305e-01  +7.4948e-01  2.66e-01  1.33e-04  2.31e-02  3.20e-04  3.62e-04  4.18e-01  
 10  +4.7590e-01  +7.0592e-01  2.30e-01  1.06e-04  1.84e-02  1.87e-04  2.95e-04  4.28e-01  
 11  +4.6706e-01  +6.6357e-01  1.97e-01  8.40e-05  1.45e-02  1.32e-04  2.38e-04  3.31e-01  
 12  +4.5457e-01  +6.0062e-01  1.46e-01  6.10e-05  1.05e-02  1.30e-06  1.79e-04  8.97e-01  
 13  +4.3419e-01  +5.2054e-01  8.64e-02  3.23e-05  5.54e-03  1.56e-06  9.97e-05  4.88e-01  
 14  +4.1940e-01  +4.6356e-01  4.42e-02  1.54e-05  2.64e-03  5.89e-06  4.95e-05  9.80e-01  
 15  +4.0507e-01  +4.1229e-01  7.22e-03  2.47e-06  4.23e-04  9.76e-07  8.38e-06  9.90e-01  
 16  +4.0212e-01  +4.0238e-01  2.69e-04  9.14e-08  1.57e-05  3.64e-08  3.17e-07  9.74e-01  
 17  +4.0200e-01  +4.0200e-01  2.69e-06  9.15e-10  1.57e-07  3.64e-10  3.17e-09  9.90e-01  
 18  +4.0200e-01  +4.0200e-01  2.69e-08  9.15e-12  1.57e-09  3.64e-12  3.17e-11  9.90e-01  
 19  +4.0200e-01  +4.0200e-01  2.69e-10  9.15e-14  1.57e-11  3.64e-14  3.17e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.7343ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:43 PM: Optimal value: 4.020e-01
(CVXPY) Sep 20 03:18:43 PM: Compilation took 1.476e-02 seconds
(CVXPY) Sep 20 03:18:43 PM: Solver (including time spent in interface) took 5.306e-02 seconds
Iteration: 4, Objective: 0.4020
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:43 PM: Your problem has 2556 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Finished problem compilation (took 1.274e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2556
  constraints   = 5056
  nnz(P)        = 0
  nnz(A)        = 36874
  cones (total) = 1
    : Nonnegative = 1,  numel = 5056

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.8037e-01  +5.4325e+02  5.43e+02  4.30e-01  5.50e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3109e-01  +6.1010e+01  6.05e+01  1.65e-01  2.68e+01  1.65e-02  2.76e-01  9.39e-01  
  3  +5.0819e-01  +1.5630e+01  1.51e+01  1.04e-01  1.69e+01  4.49e-05  2.53e-01  3.18e-01  
  4  +5.0082e-01  +1.7089e+00  1.21e+00  1.18e-02  1.98e+00  8.20e-06  1.33e-01  7.35e-01  
  5  +5.0026e-01  +1.0318e+00  5.32e-01  5.09e-03  8.61e-01  9.17e-06  6.38e-02  6.63e-01  
  6  +4.9980e-01  +9.2502e-01  4.25e-01  2.74e-03  4.72e-01  2.96e-05  1.01e-02  9.44e-01  
  7  +4.9338e-01  +8.6638e-01  3.73e-01  2.71e-04  4.73e-02  3.29e-04  7.25e-04  9.30e-01  
  8  +4.8760e-01  +8.1960e-01  3.32e-01  1.74e-04  3.03e-02  3.46e-04  4.66e-04  4.62e-01  
  9  +4.8371e-01  +7.7895e-01  2.95e-01  1.57e-04  2.73e-02  2.13e-04  4.28e-04  2.96e-01  
 10  +4.7965e-01  +7.5012e-01  2.70e-01  1.36e-04  2.35e-02  1.41e-04  3.73e-04  3.69e-01  
 11  +4.7508e-01  +7.1202e-01  2.37e-01  1.23e-04  2.14e-02  5.34e-05  3.49e-04  5.05e-01  
 12  +4.4950e-01  +5.9147e-01  1.42e-01  5.81e-05  1.00e-02  3.14e-05  1.73e-04  5.79e-01  
 13  +4.4581e-01  +5.7825e-01  1.32e-01  5.31e-05  9.15e-03  2.77e-05  1.59e-04  1.81e-01  
 14  +4.2960e-01  +5.1491e-01  8.53e-02  3.22e-05  5.52e-03  1.61e-05  1.00e-04  4.41e-01  
 15  +4.2564e-01  +4.9915e-01  7.35e-02  2.70e-05  4.64e-03  1.20e-05  8.51e-05  5.51e-01  
 16  +4.1308e-01  +4.5153e-01  3.84e-02  1.37e-05  2.35e-03  5.73e-06  4.50e-05  7.25e-01  
 17  +4.0259e-01  +4.1283e-01  1.02e-02  3.57e-06  6.12e-04  1.48e-06  1.23e-05  8.02e-01  
 18  +3.9884e-01  +3.9963e-01  7.89e-04  2.73e-07  4.68e-05  1.06e-07  9.57e-07  9.90e-01  
 19  +3.9850e-01  +3.9851e-01  8.64e-06  2.98e-09  5.12e-07  1.16e-09  1.05e-08  9.89e-01  
 20  +3.9850e-01  +3.9850e-01  8.64e-08  2.98e-11  5.12e-09  1.16e-11  1.05e-10  9.90e-01  
 21  +3.9850e-01  +3.9850e-01  8.64e-10  2.98e-13  5.12e-11  1.16e-13  1.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.7051ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:43 PM: Optimal value: 3.985e-01
(CVXPY) Sep 20 03:18:43 PM: Compilation took 1.274e-02 seconds
(CVXPY) Sep 20 03:18:43 PM: Solver (including time spent in interface) took 1.059e-01 seconds
Iteration: 5, Objective: 0.3985
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:43 PM: Your problem has 2566 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:43 PM: Finished problem compilation (took 1.368e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2566
  constraints   = 5066
  nnz(P)        = 0
  nnz(A)        = 37270
  cones (total) = 1
    : Nonnegative = 1,  numel = 5066

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.8026e-01  +5.4318e+02  5.43e+02  4.30e-01  5.49e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3101e-01  +6.0913e+01  6.04e+01  1.64e-01  2.67e+01  1.65e-02  2.75e-01  9.40e-01  
  3  +5.0817e-01  +1.5598e+01  1.51e+01  1.04e-01  1.68e+01  4.49e-05  2.52e-01  3.21e-01  
  4  +5.0089e-01  +1.8320e+00  1.33e+00  1.30e-02  2.18e+00  8.57e-06  1.39e-01  6.96e-01  
  5  +5.0021e-01  +1.0113e+00  5.11e-01  4.88e-03  8.26e-01  9.22e-06  6.26e-02  7.10e-01  
  6  +4.9948e-01  +1.0048e+00  5.05e-01  2.64e-03  4.55e-01  4.20e-05  8.74e-03  9.81e-01  
  7  +4.9018e-01  +9.0101e-01  4.11e-01  2.54e-04  4.43e-02  3.94e-04  6.82e-04  9.23e-01  
  8  +4.8423e-01  +8.5223e-01  3.68e-01  1.77e-04  3.08e-02  3.59e-04  4.74e-04  4.37e-01  
  9  +4.8167e-01  +8.1442e-01  3.33e-01  1.70e-04  2.95e-02  2.49e-04  4.63e-04  1.54e-01  
 10  +4.7183e-01  +7.5584e-01  2.84e-01  1.25e-04  2.17e-02  2.03e-04  3.47e-04  3.40e-01  
 11  +4.6788e-01  +7.0822e-01  2.40e-01  1.15e-04  1.98e-02  7.69e-05  3.31e-04  4.13e-01  
 12  +4.5097e-01  +6.2342e-01  1.72e-01  7.42e-05  1.28e-02  4.94e-05  2.22e-04  3.94e-01  
 13  +4.2323e-01  +5.0730e-01  8.41e-02  3.15e-05  5.40e-03  1.67e-05  1.00e-04  7.08e-01  
 14  +3.9862e-01  +4.1104e-01  1.24e-02  4.45e-06  7.60e-04  1.42e-06  1.55e-05  8.87e-01  
 15  +3.9393e-01  +3.9448e-01  5.45e-04  1.93e-07  3.29e-05  6.62e-08  6.95e-07  9.87e-01  
 16  +3.9370e-01  +3.9371e-01  5.51e-06  1.95e-09  3.33e-07  6.69e-10  7.04e-09  9.90e-01  
 17  +3.9370e-01  +3.9370e-01  5.51e-08  1.95e-11  3.33e-09  6.69e-12  7.04e-11  9.90e-01  
 18  +3.9370e-01  +3.9370e-01  5.51e-10  1.95e-13  3.33e-11  6.70e-14  7.05e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.7916ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:44 PM: Optimal value: 3.937e-01
(CVXPY) Sep 20 03:18:44 PM: Compilation took 1.368e-02 seconds
(CVXPY) Sep 20 03:18:44 PM: Solver (including time spent in interface) took 5.872e-02 seconds
Iteration: 6, Objective: 0.3937
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:44 PM: Your problem has 2576 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:44 PM: Finished problem compilation (took 1.234e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2576
  constraints   = 5076
  nnz(P)        = 0
  nnz(A)        = 37619
  cones (total) = 1
    : Nonnegative = 1,  numel = 5076

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5016e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.8011e-01  +5.4314e+02  5.43e+02  4.30e-01  5.48e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3088e-01  +6.0768e+01  6.02e+01  1.64e-01  2.66e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0814e-01  +1.5553e+01  1.50e+01  1.04e-01  1.67e+01  4.50e-05  2.51e-01  3.25e-01  
  4  +5.0095e-01  +1.9578e+00  1.46e+00  1.42e-02  2.38e+00  8.98e-06  1.43e-01  6.62e-01  
  5  +5.0015e-01  +9.7794e-01  4.78e-01  4.56e-03  7.72e-01  9.14e-06  5.83e-02  7.49e-01  
  6  +4.9884e-01  +1.1258e+00  6.27e-01  2.46e-03  4.25e-01  6.55e-05  7.47e-03  9.71e-01  
  7  +4.9011e-01  +1.0134e+00  5.23e-01  4.07e-04  7.08e-02  3.31e-04  1.10e-03  8.54e-01  
  8  +4.8416e-01  +9.4915e-01  4.65e-01  2.72e-04  4.72e-02  3.46e-04  7.33e-04  3.99e-01  
  9  +4.8435e-01  +8.2197e-01  3.38e-01  2.07e-04  3.60e-02  3.27e-06  5.63e-04  8.27e-01  
 10  +4.7449e-01  +7.6689e-01  2.92e-01  1.46e-04  2.53e-02  5.02e-06  4.05e-04  3.32e-01  
 11  +4.6693e-01  +7.2626e-01  2.59e-01  1.21e-04  2.08e-02  8.58e-06  3.40e-04  2.98e-01  
 12  +4.4870e-01  +6.2550e-01  1.77e-01  7.77e-05  1.34e-02  1.95e-05  2.31e-04  9.90e-01  
 13  +4.1493e-01  +4.8606e-01  7.11e-02  2.69e-05  4.61e-03  6.47e-06  8.78e-05  6.92e-01  
 14  +3.9495e-01  +4.1060e-01  1.57e-02  5.73e-06  9.77e-04  1.33e-06  2.03e-05  8.22e-01  
 15  +3.9021e-01  +3.9354e-01  3.33e-03  1.21e-06  2.06e-04  2.96e-07  4.43e-06  8.10e-01  
 16  +3.8924e-01  +3.9006e-01  8.15e-04  2.95e-07  5.02e-05  9.83e-08  1.09e-06  9.90e-01  
 17  +3.8890e-01  +3.8892e-01  1.14e-05  4.12e-09  7.02e-07  1.37e-09  1.53e-08  9.86e-01  
 18  +3.8890e-01  +3.8890e-01  1.14e-07  4.12e-11  7.02e-09  1.37e-11  1.53e-10  9.90e-01  
 19  +3.8890e-01  +3.8890e-01  1.14e-09  4.12e-13  7.02e-11  1.37e-13  1.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.0257ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:44 PM: Optimal value: 3.889e-01
(CVXPY) Sep 20 03:18:44 PM: Compilation took 1.234e-02 seconds
(CVXPY) Sep 20 03:18:44 PM: Solver (including time spent in interface) took 6.018e-02 seconds
Iteration: 7, Objective: 0.3889
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:44 PM: Your problem has 2586 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:44 PM: Finished problem compilation (took 1.476e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2586
  constraints   = 5086
  nnz(P)        = 0
  nnz(A)        = 38133
  cones (total) = 1
    : Nonnegative = 1,  numel = 5086

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5016e+03  2.50e+03  9.80e-01  8.48e+01  1.00e+00  1.00e+00   ------   
  1  +5.8000e-01  +5.4315e+02  5.43e+02  4.31e-01  5.47e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3083e-01  +6.0728e+01  6.02e+01  1.64e-01  2.65e+01  1.65e-02  2.74e-01  9.43e-01  
  3  +5.0813e-01  +1.5546e+01  1.50e+01  1.04e-01  1.67e+01  4.51e-05  2.51e-01  3.26e-01  
  4  +5.0097e-01  +1.9930e+00  1.49e+00  1.46e-02  2.43e+00  9.09e-06  1.44e-01  6.53e-01  
  5  +5.0014e-01  +9.6677e-01  4.67e-01  4.46e-03  7.54e-01  9.07e-06  5.75e-02  7.62e-01  
  6  +4.9862e-01  +1.1859e+00  6.87e-01  2.45e-03  4.24e-01  7.36e-05  7.31e-03  9.81e-01  
  7  +4.8960e-01  +1.0514e+00  5.62e-01  4.34e-04  7.56e-02  3.29e-04  1.17e-03  8.40e-01  
  8  +4.8343e-01  +9.8609e-01  5.03e-01  2.88e-04  5.00e-02  3.58e-04  7.76e-04  3.91e-01  
  9  +4.8620e-01  +8.4839e-01  3.62e-01  2.31e-04  4.01e-02  3.21e-06  6.24e-04  7.81e-01  
 10  +4.7566e-01  +7.7072e-01  2.95e-01  1.49e-04  2.58e-02  1.10e-05  4.09e-04  5.55e-01  
 11  +4.6702e-01  +7.2520e-01  2.58e-01  1.20e-04  2.06e-02  1.27e-05  3.36e-04  3.11e-01  
 12  +4.5167e-01  +6.3952e-01  1.88e-01  8.51e-05  1.46e-02  1.98e-05  2.51e-04  9.90e-01  
 13  +4.2371e-01  +5.2286e-01  9.92e-02  3.87e-05  6.62e-03  9.74e-06  1.23e-04  5.71e-01  
 14  +3.9726e-01  +4.1902e-01  2.18e-02  8.01e-06  1.37e-03  1.69e-06  2.79e-05  8.17e-01  
 15  +3.9251e-01  +4.0181e-01  9.30e-03  3.39e-06  5.77e-04  7.81e-07  1.22e-05  6.27e-01  
 16  +3.9003e-01  +3.9275e-01  2.72e-03  9.87e-07  1.68e-04  3.36e-07  3.61e-06  9.90e-01  
 17  +3.8895e-01  +3.8906e-01  1.15e-04  4.15e-08  7.07e-06  1.37e-08  1.54e-07  9.60e-01  
 18  +3.8890e-01  +3.8890e-01  1.15e-06  4.17e-10  7.09e-08  1.37e-10  1.55e-09  9.90e-01  
 19  +3.8890e-01  +3.8890e-01  1.15e-08  4.17e-12  7.09e-10  1.37e-12  1.55e-11  9.90e-01  
 20  +3.8890e-01  +3.8890e-01  1.15e-10  4.16e-14  7.10e-12  1.38e-14  1.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.8591ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:44 PM: Optimal value: 3.889e-01
(CVXPY) Sep 20 03:18:44 PM: Compilation took 1.476e-02 seconds
(CVXPY) Sep 20 03:18:44 PM: Solver (including time spent in interface) took 6.660e-02 seconds
Iteration: 8, Objective: 0.3889
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:44 PM: Your problem has 2596 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:44 PM: Finished problem compilation (took 1.432e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2596
  constraints   = 5096
  nnz(P)        = 0
  nnz(A)        = 38405
  cones (total) = 1
    : Nonnegative = 1,  numel = 5096

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.7987e-01  +5.4321e+02  5.43e+02  4.31e-01  5.46e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3074e-01  +6.0644e+01  6.01e+01  1.64e-01  2.63e+01  1.65e-02  2.74e-01  9.44e-01  
  3  +5.0811e-01  +1.5522e+01  1.50e+01  1.04e-01  1.66e+01  4.52e-05  2.50e-01  3.29e-01  
  4  +5.0088e-01  +1.8219e+00  1.32e+00  1.30e-02  2.16e+00  8.68e-06  1.35e-01  7.06e-01  
  5  +5.0016e-01  +9.7003e-01  4.70e-01  4.49e-03  7.57e-01  1.00e-05  4.99e-02  7.85e-01  
  6  +4.9794e-01  +1.2409e+00  7.43e-01  1.73e-03  3.00e-01  1.19e-04  4.83e-03  9.90e-01  
  7  +4.8859e-01  +1.0934e+00  6.05e-01  4.03e-04  7.01e-02  3.79e-04  1.08e-03  7.78e-01  
  8  +4.8341e-01  +1.0242e+00  5.41e-01  2.94e-04  5.11e-02  3.65e-04  7.88e-04  3.34e-01  
  9  +4.7676e-01  +8.8170e-01  4.05e-01  2.04e-04  3.53e-02  1.70e-04  5.54e-04  5.32e-01  
 10  +4.5723e-01  +6.8607e-01  2.29e-01  1.00e-04  1.73e-02  1.98e-05  2.87e-04  8.70e-01  
 11  +4.5096e-01  +6.4965e-01  1.99e-01  8.96e-05  1.54e-02  1.79e-05  2.64e-04  4.87e-01  
 12  +4.2390e-01  +5.3067e-01  1.07e-01  4.22e-05  7.22e-03  9.22e-06  1.33e-04  5.42e-01  
 13  +4.0121e-01  +4.3924e-01  3.80e-02  1.43e-05  2.43e-03  3.04e-06  4.87e-05  6.88e-01  
 14  +3.9166e-01  +4.0230e-01  1.06e-02  3.90e-06  6.63e-04  1.18e-06  1.39e-05  9.05e-01  
 15  +3.8848e-01  +3.9063e-01  2.15e-03  7.86e-07  1.34e-04  2.65e-07  2.87e-06  9.90e-01  
 16  +3.8763e-01  +3.8771e-01  7.69e-05  2.81e-08  4.79e-06  9.08e-09  1.04e-07  9.68e-01  
 17  +3.8760e-01  +3.8760e-01  7.70e-07  2.82e-10  4.80e-08  9.08e-11  1.05e-09  9.90e-01  
 18  +3.8760e-01  +3.8760e-01  7.73e-09  2.83e-12  4.81e-10  9.12e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 55.5278ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:44 PM: Optimal value: 3.876e-01
(CVXPY) Sep 20 03:18:44 PM: Compilation took 1.432e-02 seconds
(CVXPY) Sep 20 03:18:44 PM: Solver (including time spent in interface) took 5.972e-02 seconds
Iteration: 9, Objective: 0.3876
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:44 PM: Your problem has 2606 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:44 PM: Finished problem compilation (took 1.732e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2606
  constraints   = 5106
  nnz(P)        = 0
  nnz(A)        = 38780
  cones (total) = 1
    : Nonnegative = 1,  numel = 5106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.7979e-01  +5.4325e+02  5.43e+02  4.31e-01  5.45e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3066e-01  +6.0579e+01  6.00e+01  1.64e-01  2.62e+01  1.66e-02  2.74e-01  9.45e-01  
  3  +5.0809e-01  +1.5506e+01  1.50e+01  1.04e-01  1.66e+01  4.53e-05  2.50e-01  3.31e-01  
  4  +5.0086e-01  +1.7904e+00  1.29e+00  1.27e-02  2.11e+00  8.61e-06  1.32e-01  7.18e-01  
  5  +5.0021e-01  +1.0334e+00  5.33e-01  5.10e-03  8.60e-01  1.03e-05  5.37e-02  7.40e-01  
  6  +4.9877e-01  +1.0439e+00  5.45e-01  1.81e-03  3.14e-01  7.79e-05  5.28e-03  9.50e-01  
  7  +4.9037e-01  +9.6546e-01  4.75e-01  3.33e-04  5.79e-02  3.72e-04  8.85e-04  8.33e-01  
  8  +4.7953e-01  +8.4843e-01  3.69e-01  1.86e-04  3.22e-02  2.96e-04  5.01e-04  6.04e-01  
  9  +4.6099e-01  +7.1864e-01  2.58e-01  1.14e-04  1.97e-02  1.19e-04  3.23e-04  5.95e-01  
 10  +4.4923e-01  +6.6152e-01  2.12e-01  8.90e-05  1.53e-02  6.42e-05  2.59e-04  4.71e-01  
 11  +4.1963e-01  +5.2183e-01  1.02e-01  3.98e-05  6.80e-03  2.02e-05  1.27e-04  6.25e-01  
 12  +4.0431e-01  +4.5800e-01  5.37e-02  2.03e-05  3.46e-03  9.64e-06  6.84e-05  5.14e-01  
 13  +3.9429e-01  +4.1648e-01  2.22e-02  8.16e-06  1.39e-03  3.30e-06  2.86e-05  8.57e-01  
 14  +3.8894e-01  +3.9606e-01  7.12e-03  2.60e-06  4.42e-04  9.95e-07  9.34e-06  8.70e-01  
 15  +3.8775e-01  +3.9186e-01  4.12e-03  1.48e-06  2.52e-04  5.58e-07  5.37e-06  5.95e-01  
 16  +3.8649e-01  +3.8741e-01  9.24e-04  3.33e-07  5.65e-05  1.16e-07  1.21e-06  9.90e-01  
 17  +3.8610e-01  +3.8612e-01  1.11e-05  3.99e-09  6.79e-07  1.38e-09  1.46e-08  9.89e-01  
 18  +3.8610e-01  +3.8610e-01  1.11e-07  4.00e-11  6.80e-09  1.38e-11  1.47e-10  9.90e-01  
 19  +3.8610e-01  +3.8610e-01  1.15e-09  4.12e-13  7.00e-11  1.43e-13  1.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.0113ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:44 PM: Optimal value: 3.861e-01
(CVXPY) Sep 20 03:18:44 PM: Compilation took 1.732e-02 seconds
(CVXPY) Sep 20 03:18:44 PM: Solver (including time spent in interface) took 6.675e-02 seconds
Iteration: 10, Objective: 0.3861
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:45 PM: Your problem has 2616 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:45 PM: Finished problem compilation (took 1.914e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2616
  constraints   = 5116
  nnz(P)        = 0
  nnz(A)        = 39061
  cones (total) = 1
    : Nonnegative = 1,  numel = 5116

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5016e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.7953e-01  +5.4344e+02  5.43e+02  4.32e-01  5.45e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3052e-01  +6.0470e+01  5.99e+01  1.63e-01  2.61e+01  1.66e-02  2.73e-01  9.47e-01  
  3  +5.0807e-01  +1.5482e+01  1.50e+01  1.03e-01  1.65e+01  4.56e-05  2.49e-01  3.36e-01  
  4  +5.0085e-01  +1.7778e+00  1.28e+00  1.26e-02  2.09e+00  8.63e-06  1.30e-01  7.25e-01  
  5  +5.0017e-01  +9.7772e-01  4.78e-01  4.56e-03  7.68e-01  1.07e-05  4.50e-02  7.85e-01  
  6  +4.9810e-01  +1.2024e+00  7.04e-01  1.67e-03  2.89e-01  1.16e-04  4.62e-03  9.70e-01  
  7  +4.8880e-01  +1.0822e+00  5.93e-01  3.81e-04  6.63e-02  4.00e-04  1.01e-03  7.84e-01  
  8  +4.8005e-01  +9.5315e-01  4.73e-01  2.39e-04  4.15e-02  3.15e-04  6.41e-04  4.93e-01  
  9  +4.6658e-01  +8.2425e-01  3.58e-01  1.64e-04  2.84e-02  1.90e-04  4.55e-04  4.12e-01  
 10  +4.5401e-01  +7.3375e-01  2.80e-01  1.21e-04  2.08e-02  1.15e-04  3.47e-04  3.84e-01  
 11  +4.4475e-01  +6.4527e-01  2.01e-01  8.91e-05  1.53e-02  5.80e-06  2.65e-04  9.36e-01  
 12  +4.1391e-01  +5.0644e-01  9.25e-02  3.63e-05  6.19e-03  3.26e-06  1.18e-04  6.05e-01  
 13  +3.9938e-01  +4.4672e-01  4.73e-02  1.81e-05  3.07e-03  1.95e-06  6.19e-05  5.19e-01  
 14  +3.9248e-01  +4.1872e-01  2.62e-02  9.81e-06  1.67e-03  1.66e-06  3.45e-05  5.89e-01  
 15  +3.9119e-01  +4.1371e-01  2.25e-02  8.35e-06  1.42e-03  1.54e-06  2.96e-05  2.13e-01  
 16  +3.8597e-01  +3.9310e-01  7.13e-03  2.61e-06  4.44e-04  8.85e-07  9.47e-06  9.90e-01  
 17  +3.8453e-01  +3.8806e-01  3.53e-03  1.28e-06  2.18e-04  4.43e-07  4.69e-06  5.46e-01  
 18  +3.8366e-01  +3.8497e-01  1.32e-03  4.79e-07  8.14e-05  1.61e-07  1.76e-06  9.90e-01  
 19  +3.8311e-01  +3.8312e-01  1.65e-05  6.00e-09  1.02e-06  1.98e-09  2.21e-08  9.90e-01  
 20  +3.8310e-01  +3.8310e-01  1.65e-07  6.00e-11  1.02e-08  1.98e-11  2.21e-10  9.90e-01  
 21  +3.8310e-01  +3.8310e-01  1.71e-09  6.20e-13  1.05e-10  2.06e-13  2.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.3062ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:45 PM: Optimal value: 3.831e-01
(CVXPY) Sep 20 03:18:45 PM: Compilation took 1.914e-02 seconds
(CVXPY) Sep 20 03:18:45 PM: Solver (including time spent in interface) took 7.722e-02 seconds
Iteration: 11, Objective: 0.3831
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:45 PM: Your problem has 2626 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:45 PM: Finished problem compilation (took 2.012e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2626
  constraints   = 5126
  nnz(P)        = 0
  nnz(A)        = 39394
  cones (total) = 1
    : Nonnegative = 1,  numel = 5126

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7934e-01  +5.4338e+02  5.43e+02  4.32e-01  5.44e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3042e-01  +6.0361e+01  5.98e+01  1.63e-01  2.60e+01  1.66e-02  2.72e-01  9.49e-01  
  3  +5.0805e-01  +1.5455e+01  1.49e+01  1.03e-01  1.64e+01  4.57e-05  2.48e-01  3.39e-01  
  4  +5.0088e-01  +1.8370e+00  1.34e+00  1.32e-02  2.18e+00  8.84e-06  1.32e-01  7.08e-01  
  5  +5.0020e-01  +1.0549e+00  5.55e-01  5.30e-03  8.92e-01  1.10e-05  5.06e-02  7.50e-01  
  6  +4.9775e-01  +1.3152e+00  8.17e-01  1.71e-03  2.96e-01  1.27e-04  4.67e-03  9.90e-01  
  7  +4.8723e-01  +1.1584e+00  6.71e-01  3.97e-04  6.92e-02  4.07e-04  1.05e-03  7.78e-01  
  8  +4.7592e-01  +9.3529e-01  4.59e-01  2.33e-04  4.04e-02  1.97e-04  6.31e-04  5.91e-01  
  9  +4.6070e-01  +7.5320e-01  2.92e-01  1.41e-04  2.42e-02  2.79e-05  3.98e-04  7.86e-01  
 10  +4.4709e-01  +6.7617e-01  2.29e-01  1.05e-04  1.81e-02  2.05e-05  3.12e-04  6.39e-01  
 11  +4.1366e-01  +5.1469e-01  1.01e-01  4.10e-05  6.99e-03  7.91e-06  1.33e-04  6.43e-01  
 12  +4.0035e-01  +4.6073e-01  6.04e-02  2.38e-05  4.05e-03  4.72e-06  8.17e-05  4.32e-01  
 13  +3.8997e-01  +4.1819e-01  2.82e-02  1.07e-05  1.82e-03  3.37e-06  3.86e-05  9.68e-01  
 14  +3.8144e-01  +3.8585e-01  4.41e-03  1.67e-06  2.83e-04  5.13e-07  6.34e-06  8.90e-01  
 15  +3.8009e-01  +3.8083e-01  7.38e-04  2.80e-07  4.74e-05  8.37e-08  1.08e-06  9.90e-01  
 16  +3.7980e-01  +3.7981e-01  8.19e-06  3.10e-09  5.26e-07  9.25e-10  1.20e-08  9.89e-01  
 17  +3.7980e-01  +3.7980e-01  8.19e-08  3.11e-11  5.26e-09  9.25e-12  1.20e-10  9.90e-01  
 18  +3.7980e-01  +3.7980e-01  8.21e-10  3.11e-13  5.28e-11  9.27e-14  1.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.9884ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:45 PM: Optimal value: 3.798e-01
(CVXPY) Sep 20 03:18:45 PM: Compilation took 2.012e-02 seconds
(CVXPY) Sep 20 03:18:45 PM: Solver (including time spent in interface) took 8.122e-02 seconds
Iteration: 12, Objective: 0.3798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:45 PM: Your problem has 2636 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:45 PM: Finished problem compilation (took 1.807e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2636
  constraints   = 5136
  nnz(P)        = 0
  nnz(A)        = 39773
  cones (total) = 1
    : Nonnegative = 1,  numel = 5136

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7925e-01  +5.4342e+02  5.43e+02  4.32e-01  5.43e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3034e-01  +6.0290e+01  5.98e+01  1.63e-01  2.59e+01  1.66e-02  2.72e-01  9.50e-01  
  3  +5.0803e-01  +1.5436e+01  1.49e+01  1.03e-01  1.64e+01  4.58e-05  2.47e-01  3.41e-01  
  4  +5.0088e-01  +1.8377e+00  1.34e+00  1.32e-02  2.19e+00  8.86e-06  1.32e-01  7.09e-01  
  5  +5.0019e-01  +1.0511e+00  5.51e-01  5.25e-03  8.84e-01  1.14e-05  4.85e-02  7.74e-01  
  6  +4.9737e-01  +1.3412e+00  8.44e-01  1.59e-03  2.76e-01  1.45e-04  4.30e-03  9.90e-01  
  7  +4.8591e-01  +1.1727e+00  6.87e-01  3.82e-04  6.66e-02  4.37e-04  1.01e-03  7.69e-01  
  8  +4.7583e-01  +9.7238e-01  4.97e-01  2.50e-04  4.33e-02  2.27e-04  6.75e-04  5.02e-01  
  9  +4.4929e-01  +6.9676e-01  2.47e-01  1.09e-04  1.87e-02  2.86e-05  3.14e-04  8.17e-01  
 10  +4.4108e-01  +6.5252e-01  2.11e-01  9.41e-05  1.61e-02  2.19e-05  2.81e-04  3.61e-01  
 11  +4.0864e-01  +5.0114e-01  9.25e-02  3.70e-05  6.29e-03  8.51e-06  1.21e-04  6.53e-01  
 12  +3.9931e-01  +4.6237e-01  6.31e-02  2.48e-05  4.21e-03  5.85e-06  8.47e-05  3.59e-01  
 13  +3.9231e-01  +4.3313e-01  4.08e-02  1.58e-05  2.68e-03  4.14e-06  5.57e-05  5.31e-01  
 14  +3.8209e-01  +3.9227e-01  1.02e-02  3.90e-06  6.60e-04  1.05e-06  1.46e-05  8.12e-01  
 15  +3.7882e-01  +3.7968e-01  8.58e-04  3.27e-07  5.55e-05  8.72e-08  1.26e-06  9.33e-01  
 16  +3.7850e-01  +3.7852e-01  1.28e-05  4.88e-09  8.27e-07  1.27e-09  1.90e-08  9.89e-01  
 17  +3.7850e-01  +3.7850e-01  1.28e-07  4.88e-11  8.27e-09  1.27e-11  1.90e-10  9.90e-01  
 18  +3.7850e-01  +3.7850e-01  1.28e-09  4.88e-13  8.27e-11  1.27e-13  1.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.7299ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:45 PM: Optimal value: 3.785e-01
(CVXPY) Sep 20 03:18:45 PM: Compilation took 1.807e-02 seconds
(CVXPY) Sep 20 03:18:45 PM: Solver (including time spent in interface) took 6.377e-02 seconds
Iteration: 13, Objective: 0.3785
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:45 PM: Your problem has 2646 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:45 PM: Finished problem compilation (took 1.702e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2646
  constraints   = 5146
  nnz(P)        = 0
  nnz(A)        = 40043
  cones (total) = 1
    : Nonnegative = 1,  numel = 5146

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.80e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7890e-01  +5.4363e+02  5.43e+02  4.33e-01  5.42e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.3013e-01  +6.0105e+01  5.96e+01  1.62e-01  2.58e+01  1.67e-02  2.71e-01  9.53e-01  
  3  +5.0800e-01  +1.5395e+01  1.49e+01  1.03e-01  1.63e+01  4.61e-05  2.46e-01  3.48e-01  
  4  +5.0084e-01  +1.7635e+00  1.26e+00  1.25e-02  2.07e+00  8.74e-06  1.26e-01  7.37e-01  
  5  +5.0027e-01  +1.1541e+00  6.54e-01  6.20e-03  1.04e+00  1.29e-05  4.81e-02  7.50e-01  
  6  +4.9819e-01  +1.3382e+00  8.40e-01  1.78e-03  3.10e-01  1.18e-04  4.82e-03  9.90e-01  
  7  +4.8937e-01  +1.1888e+00  6.99e-01  4.50e-04  7.85e-02  3.52e-04  1.18e-03  7.61e-01  
  8  +4.8091e-01  +9.8380e-01  5.03e-01  2.86e-04  4.96e-02  1.69e-04  7.61e-04  5.81e-01  
  9  +4.7980e-01  +9.5575e-01  4.76e-01  2.75e-04  4.77e-02  1.40e-04  7.35e-04  1.33e-01  
 10  +4.7988e-01  +9.3330e-01  4.53e-01  2.68e-04  4.65e-02  1.06e-04  7.20e-04  2.12e-01  
 11  +4.5811e-01  +7.7695e-01  3.19e-01  1.45e-04  2.50e-02  7.96e-05  4.05e-04  5.10e-01  
 12  +4.5024e-01  +7.3451e-01  2.84e-01  1.24e-04  2.13e-02  6.69e-05  3.54e-04  1.87e-01  
 13  +4.3206e-01  +6.2023e-01  1.88e-01  8.34e-05  1.42e-02  1.01e-05  2.56e-04  9.90e-01  
 14  +3.9853e-01  +4.6781e-01  6.93e-02  2.76e-05  4.69e-03  3.47e-06  9.39e-05  6.76e-01  
 15  +3.9328e-01  +4.4620e-01  5.29e-02  2.09e-05  3.54e-03  2.84e-06  7.27e-05  2.68e-01  
 16  +3.8586e-01  +4.1565e-01  2.98e-02  1.16e-05  1.97e-03  1.87e-06  4.20e-05  5.07e-01  
 17  +3.7773e-01  +3.8296e-01  5.23e-03  2.02e-06  3.42e-04  3.60e-07  7.70e-06  8.48e-01  
 18  +3.7604e-01  +3.7640e-01  3.67e-04  1.41e-07  2.39e-05  2.76e-08  5.50e-07  9.45e-01  
 19  +3.7590e-01  +3.7591e-01  4.07e-06  1.56e-09  2.65e-07  3.11e-10  6.13e-09  9.90e-01  
 20  +3.7590e-01  +3.7590e-01  4.07e-08  1.56e-11  2.65e-09  3.11e-12  6.14e-11  9.90e-01  
 21  +3.7590e-01  +3.7590e-01  4.56e-10  1.75e-13  2.97e-11  3.52e-14  6.94e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 105.8181ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:45 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:45 PM: Optimal value: 3.759e-01
(CVXPY) Sep 20 03:18:45 PM: Compilation took 1.702e-02 seconds
(CVXPY) Sep 20 03:18:45 PM: Solver (including time spent in interface) took 1.126e-01 seconds
Iteration: 14, Objective: 0.3759
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:46 PM: Your problem has 2656 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:46 PM: Finished problem compilation (took 1.619e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2656
  constraints   = 5156
  nnz(P)        = 0
  nnz(A)        = 40273
  cones (total) = 1
    : Nonnegative = 1,  numel = 5156

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.80e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7861e-01  +5.4370e+02  5.43e+02  4.33e-01  5.41e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2990e-01  +5.9886e+01  5.94e+01  1.61e-01  2.56e+01  1.68e-02  2.70e-01  9.56e-01  
  3  +5.0795e-01  +1.5341e+01  1.48e+01  1.02e-01  1.62e+01  4.64e-05  2.44e-01  3.55e-01  
  4  +5.0087e-01  +1.8194e+00  1.32e+00  1.30e-02  2.16e+00  9.01e-06  1.26e-01  7.24e-01  
  5  +5.0030e-01  +1.2608e+00  7.60e-01  7.17e-03  1.20e+00  1.42e-05  5.04e-02  7.30e-01  
  6  +4.9766e-01  +1.4137e+00  9.16e-01  1.70e-03  2.96e-01  1.34e-04  4.55e-03  9.90e-01  
  7  +4.8845e-01  +1.2162e+00  7.28e-01  4.98e-04  8.69e-02  3.10e-04  1.31e-03  7.23e-01  
  8  +4.7913e-01  +9.8784e-01  5.09e-01  3.02e-04  5.23e-02  1.20e-04  8.06e-04  6.74e-01  
  9  +4.7637e-01  +9.4911e-01  4.73e-01  2.51e-04  4.35e-02  9.63e-05  6.71e-04  3.96e-01  
 10  +4.5276e-01  +7.3430e-01  2.82e-01  1.35e-04  2.31e-02  2.03e-05  3.84e-04  8.66e-01  
 11  +4.3319e-01  +6.4298e-01  2.10e-01  9.30e-05  1.59e-02  1.80e-05  2.80e-04  6.89e-01  
 12  +4.0014e-01  +4.8520e-01  8.51e-02  3.47e-05  5.88e-03  6.24e-06  1.16e-04  6.52e-01  
 13  +3.9466e-01  +4.6215e-01  6.75e-02  2.71e-05  4.60e-03  5.21e-06  9.31e-05  2.71e-01  
 14  +3.8916e-01  +4.3874e-01  4.96e-02  1.96e-05  3.31e-03  4.41e-06  6.88e-05  4.57e-01  
 15  +3.7806e-01  +3.9320e-01  1.51e-02  5.83e-06  9.86e-04  1.67e-06  2.16e-05  9.00e-01  
 16  +3.7450e-01  +3.7945e-01  4.95e-03  1.90e-06  3.21e-04  5.65e-07  7.21e-06  9.90e-01  
 17  +3.7272e-01  +3.7303e-01  3.11e-04  1.19e-07  2.01e-05  3.53e-08  4.58e-07  9.52e-01  
 18  +3.7260e-01  +3.7260e-01  3.13e-06  1.20e-09  2.02e-07  3.55e-10  4.61e-09  9.90e-01  
 19  +3.7260e-01  +3.7260e-01  3.13e-08  1.20e-11  2.02e-09  3.55e-12  4.62e-11  9.90e-01  
 20  +3.7260e-01  +3.7260e-01  3.14e-10  1.20e-13  2.03e-11  3.56e-14  4.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.0798ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:46 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:46 PM: Optimal value: 3.726e-01
(CVXPY) Sep 20 03:18:46 PM: Compilation took 1.619e-02 seconds
(CVXPY) Sep 20 03:18:46 PM: Solver (including time spent in interface) took 7.625e-02 seconds
Iteration: 15, Objective: 0.3726
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:46 PM: Your problem has 2666 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:46 PM: Finished problem compilation (took 1.834e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2666
  constraints   = 5166
  nnz(P)        = 0
  nnz(A)        = 40697
  cones (total) = 1
    : Nonnegative = 1,  numel = 5166

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.80e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7851e-01  +5.4369e+02  5.43e+02  4.34e-01  5.41e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2982e-01  +5.9798e+01  5.93e+01  1.61e-01  2.55e+01  1.68e-02  2.70e-01  9.57e-01  
  3  +5.0794e-01  +1.5318e+01  1.48e+01  1.02e-01  1.62e+01  4.65e-05  2.44e-01  3.57e-01  
  4  +5.0084e-01  +1.7681e+00  1.27e+00  1.25e-02  2.08e+00  8.89e-06  1.23e-01  7.41e-01  
  5  +5.0031e-01  +1.2745e+00  7.74e-01  7.23e-03  1.21e+00  1.53e-05  4.66e-02  7.56e-01  
  6  +4.9730e-01  +1.3647e+00  8.67e-01  1.39e-03  2.43e-01  1.56e-04  3.68e-03  9.90e-01  
  7  +4.8769e-01  +1.1709e+00  6.83e-01  4.45e-04  7.77e-02  3.19e-04  1.16e-03  7.03e-01  
  8  +4.7748e-01  +9.7753e-01  5.00e-01  2.71e-04  4.70e-02  1.40e-04  7.20e-04  6.76e-01  
  9  +4.7447e-01  +9.3633e-01  4.62e-01  2.66e-04  4.60e-02  1.12e-04  7.16e-04  6.52e-02  
 10  +4.5808e-01  +8.1114e-01  3.53e-01  1.66e-04  2.86e-02  6.53e-05  4.62e-04  6.26e-01  
 11  +4.5439e-01  +7.7928e-01  3.25e-01  1.59e-04  2.74e-02  5.03e-05  4.53e-04  1.87e-01  
 12  +4.2050e-01  +5.8330e-01  1.63e-01  7.03e-05  1.20e-02  1.93e-05  2.19e-04  6.13e-01  
 13  +4.0332e-01  +5.0512e-01  1.02e-01  4.24e-05  7.20e-03  1.13e-05  1.40e-04  4.40e-01  
 14  +3.9216e-01  +4.5650e-01  6.43e-02  2.61e-05  4.43e-03  6.95e-06  9.07e-05  3.90e-01  
 15  +3.8602e-01  +4.2920e-01  4.32e-02  1.72e-05  2.91e-03  4.85e-06  6.10e-05  5.50e-01  
 16  +3.7819e-01  +3.9671e-01  1.85e-02  7.22e-06  1.22e-03  2.12e-06  2.67e-05  6.79e-01  
 17  +3.7594e-01  +3.8740e-01  1.15e-02  4.42e-06  7.50e-04  1.33e-06  1.65e-05  6.40e-01  
 18  +3.7452e-01  +3.8150e-01  6.99e-03  2.69e-06  4.56e-04  7.98e-07  1.01e-05  9.90e-01  
 19  +3.7248e-01  +3.7424e-01  1.76e-03  6.73e-07  1.14e-04  2.00e-07  2.56e-06  7.60e-01  
 20  +3.7181e-01  +3.7183e-01  2.27e-05  8.71e-09  1.48e-06  2.58e-09  3.33e-08  9.88e-01  
 21  +3.7180e-01  +3.7180e-01  2.27e-07  8.71e-11  1.48e-08  2.58e-11  3.34e-10  9.90e-01  
 22  +3.7180e-01  +3.7180e-01  2.29e-09  8.75e-13  1.49e-10  2.60e-13  3.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 66.5997ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:46 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:46 PM: Optimal value: 3.718e-01
(CVXPY) Sep 20 03:18:46 PM: Compilation took 1.834e-02 seconds
(CVXPY) Sep 20 03:18:46 PM: Solver (including time spent in interface) took 7.145e-02 seconds
Iteration: 16, Objective: 0.3718
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:46 PM: Your problem has 2676 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:46 PM: Finished problem compilation (took 1.663e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2676
  constraints   = 5176
  nnz(P)        = 0
  nnz(A)        = 40962
  cones (total) = 1
    : Nonnegative = 1,  numel = 5176

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7830e-01  +5.4381e+02  5.43e+02  4.34e-01  5.40e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2968e-01  +5.9686e+01  5.92e+01  1.61e-01  2.54e+01  1.68e-02  2.70e-01  9.59e-01  
  3  +5.0791e-01  +1.5288e+01  1.48e+01  1.02e-01  1.61e+01  4.67e-05  2.43e-01  3.62e-01  
  4  +5.0073e-01  +1.5533e+00  1.05e+00  1.04e-02  1.73e+00  8.35e-06  1.09e-01  8.19e-01  
  5  +5.0049e-01  +1.5841e+00  1.08e+00  8.84e-03  1.50e+00  2.63e-05  3.57e-02  8.57e-01  
  6  +4.9793e-01  +1.3033e+00  8.05e-01  1.21e-03  2.12e-01  1.62e-04  3.15e-03  9.34e-01  
  7  +4.8903e-01  +1.1288e+00  6.40e-01  3.87e-04  6.76e-02  3.33e-04  9.93e-04  7.21e-01  
  8  +4.8317e-01  +1.0294e+00  5.46e-01  3.17e-04  5.52e-02  2.12e-04  8.27e-04  3.60e-01  
  9  +4.7886e-01  +9.8392e-01  5.05e-01  2.68e-04  4.66e-02  1.76e-04  7.05e-04  2.92e-01  
 10  +4.7300e-01  +9.2926e-01  4.56e-01  2.35e-04  4.08e-02  1.34e-04  6.29e-04  2.40e-01  
 11  +4.7007e-01  +8.9215e-01  4.22e-01  2.27e-04  3.92e-02  9.31e-05  6.15e-04  2.39e-01  
 12  +4.5666e-01  +8.0478e-01  3.48e-01  1.70e-04  2.92e-02  7.29e-05  4.76e-04  2.84e-01  
 13  +4.4083e-01  +7.0162e-01  2.61e-01  1.24e-04  2.12e-02  2.55e-05  3.66e-04  7.52e-01  
 14  +4.0478e-01  +5.1785e-01  1.13e-01  4.75e-05  8.06e-03  9.07e-06  1.56e-04  6.31e-01  
 15  +3.9049e-01  +4.5532e-01  6.48e-02  2.64e-05  4.47e-03  5.61e-06  9.20e-05  5.42e-01  
 16  +3.8610e-01  +4.3650e-01  5.04e-02  2.03e-05  3.43e-03  4.58e-06  7.21e-05  3.27e-01  
 17  +3.7691e-01  +3.9698e-01  2.01e-02  7.89e-06  1.33e-03  2.31e-06  2.94e-05  9.55e-01  
 18  +3.7241e-01  +3.7941e-01  7.00e-03  2.74e-06  4.63e-04  8.15e-07  1.05e-05  6.98e-01  
 19  +3.7230e-01  +3.7885e-01  6.55e-03  2.57e-06  4.34e-04  7.40e-07  9.98e-06  1.66e-01  
 20  +3.7230e-01  +3.7884e-01  6.54e-03  2.57e-06  4.34e-04  7.40e-07  9.95e-06  1.83e-02  
 21  +3.7223e-01  +3.7859e-01  6.37e-03  2.50e-06  4.22e-04  7.26e-07  9.56e-06  1.30e-01  
 22  +3.7115e-01  +3.7458e-01  3.43e-03  1.34e-06  2.27e-04  3.88e-07  5.15e-06  5.34e-01  
 23  +3.6994e-01  +3.7003e-01  9.69e-05  3.78e-08  6.41e-06  1.06e-08  1.47e-07  9.85e-01  
 24  +3.6990e-01  +3.6990e-01  9.73e-07  3.79e-10  6.43e-08  1.06e-10  1.47e-09  9.90e-01  
 25  +3.6990e-01  +3.6990e-01  9.73e-09  3.80e-12  6.44e-10  1.06e-12  1.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.031ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:46 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:46 PM: Optimal value: 3.699e-01
(CVXPY) Sep 20 03:18:46 PM: Compilation took 1.663e-02 seconds
(CVXPY) Sep 20 03:18:46 PM: Solver (including time spent in interface) took 1.112e-01 seconds
Iteration: 17, Objective: 0.3699
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:47 PM: Your problem has 2686 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:47 PM: Finished problem compilation (took 1.878e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2686
  constraints   = 5186
  nnz(P)        = 0
  nnz(A)        = 41183
  cones (total) = 1
    : Nonnegative = 1,  numel = 5186

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7813e-01  +5.4383e+02  5.43e+02  4.34e-01  5.39e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2960e-01  +5.9616e+01  5.91e+01  1.61e-01  2.53e+01  1.68e-02  2.69e-01  9.60e-01  
  3  +5.0790e-01  +1.5274e+01  1.48e+01  1.01e-01  1.61e+01  4.69e-05  2.42e-01  3.65e-01  
  4  +5.0071e-01  +1.5330e+00  1.03e+00  1.03e-02  1.70e+00  8.33e-06  1.07e-01  8.28e-01  
  5  +5.0050e-01  +1.6383e+00  1.14e+00  8.80e-03  1.49e+00  2.93e-05  3.29e-02  8.71e-01  
  6  +4.9799e-01  +1.3867e+00  8.89e-01  1.31e-03  2.29e-01  1.65e-04  3.39e-03  9.12e-01  
  7  +4.8910e-01  +1.1876e+00  6.99e-01  4.16e-04  7.27e-02  3.36e-04  1.07e-03  7.23e-01  
  8  +4.8235e-01  +1.0474e+00  5.65e-01  3.33e-04  5.80e-02  1.80e-04  8.70e-04  4.05e-01  
  9  +4.7847e-01  +9.4925e-01  4.71e-01  2.70e-04  4.69e-02  6.57e-05  7.15e-04  6.75e-01  
 10  +4.7493e-01  +9.1478e-01  4.40e-01  2.57e-04  4.44e-02  5.26e-05  6.89e-04  2.41e-01  
 11  +4.5567e-01  +7.8512e-01  3.29e-01  1.63e-04  2.80e-02  3.66e-05  4.58e-04  5.36e-01  
 12  +4.4918e-01  +7.4637e-01  2.97e-01  1.51e-04  2.58e-02  2.91e-05  4.36e-04  3.41e-01  
 13  +4.1195e-01  +5.4964e-01  1.38e-01  5.93e-05  1.01e-02  1.18e-05  1.89e-04  6.76e-01  
 14  +3.9524e-01  +4.7689e-01  8.17e-02  3.40e-05  5.75e-03  7.50e-06  1.16e-04  5.83e-01  
 15  +3.8914e-01  +4.5096e-01  6.18e-02  2.53e-05  4.28e-03  5.82e-06  8.89e-05  3.16e-01  
 16  +3.8394e-01  +4.2906e-01  4.51e-02  1.83e-05  3.09e-03  4.32e-06  6.59e-05  3.20e-01  
 17  +3.7286e-01  +3.8274e-01  9.87e-03  3.92e-06  6.61e-04  1.04e-06  1.50e-05  9.19e-01  
 18  +3.7261e-01  +3.8176e-01  9.15e-03  3.61e-06  6.12e-04  9.76e-07  1.38e-05  1.26e-01  
 19  +3.7142e-01  +3.7673e-01  5.31e-03  2.10e-06  3.54e-04  5.76e-07  8.06e-06  9.90e-01  
 20  +3.6984e-01  +3.7102e-01  1.17e-03  4.62e-07  7.82e-05  1.27e-07  1.79e-06  7.98e-01  
 21  +3.6941e-01  +3.6942e-01  1.48e-05  5.84e-09  9.89e-07  1.61e-09  2.28e-08  9.87e-01  
 22  +3.6940e-01  +3.6940e-01  1.48e-07  5.84e-11  9.89e-09  1.61e-11  2.28e-10  9.90e-01  
 23  +3.6940e-01  +3.6940e-01  1.49e-09  5.85e-13  9.91e-11  1.61e-13  2.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.9951ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:47 PM: Optimal value: 3.694e-01
(CVXPY) Sep 20 03:18:47 PM: Compilation took 1.878e-02 seconds
(CVXPY) Sep 20 03:18:47 PM: Solver (including time spent in interface) took 8.194e-02 seconds
Iteration: 18, Objective: 0.3694
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:47 PM: Your problem has 2696 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:47 PM: Finished problem compilation (took 2.015e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2696
  constraints   = 5196
  nnz(P)        = 0
  nnz(A)        = 41473
  cones (total) = 1
    : Nonnegative = 1,  numel = 5196

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7803e-01  +5.4388e+02  5.43e+02  4.35e-01  5.38e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2953e-01  +5.9545e+01  5.90e+01  1.61e-01  2.52e+01  1.69e-02  2.69e-01  9.61e-01  
  3  +5.0789e-01  +1.5259e+01  1.48e+01  1.01e-01  1.60e+01  4.69e-05  2.41e-01  3.67e-01  
  4  +5.0073e-01  +1.5746e+00  1.07e+00  1.07e-02  1.77e+00  8.46e-06  1.09e-01  8.13e-01  
  5  +5.0045e-01  +1.5369e+00  1.04e+00  8.48e-03  1.43e+00  2.54e-05  3.44e-02  8.45e-01  
  6  +4.9775e-01  +1.3403e+00  8.43e-01  1.24e-03  2.17e-01  1.66e-04  3.22e-03  9.25e-01  
  7  +4.8804e-01  +1.1522e+00  6.64e-01  3.87e-04  6.76e-02  3.47e-04  9.92e-04  7.26e-01  
  8  +4.8191e-01  +1.0457e+00  5.64e-01  3.20e-04  5.57e-02  2.16e-04  8.34e-04  3.55e-01  
  9  +4.7256e-01  +9.3675e-01  4.64e-01  2.48e-04  4.30e-02  1.25e-04  6.64e-04  4.41e-01  
 10  +4.7066e-01  +9.1859e-01  4.48e-01  2.45e-04  4.23e-02  1.09e-04  6.60e-04  8.18e-02  
 11  +4.5670e-01  +8.2417e-01  3.67e-01  1.82e-04  3.13e-02  8.34e-05  5.10e-04  2.96e-01  
 12  +4.3946e-01  +7.1152e-01  2.72e-01  1.31e-04  2.24e-02  2.68e-05  3.89e-04  7.51e-01  
 13  +4.0025e-01  +5.0560e-01  1.05e-01  4.49e-05  7.60e-03  7.92e-06  1.50e-04  6.81e-01  
 14  +3.8967e-01  +4.5944e-01  6.98e-02  2.91e-05  4.91e-03  5.62e-06  1.02e-04  4.28e-01  
 15  +3.8366e-01  +4.3329e-01  4.96e-02  2.03e-05  3.43e-03  4.37e-06  7.35e-05  4.37e-01  
 16  +3.7645e-01  +4.0159e-01  2.51e-02  1.01e-05  1.71e-03  2.74e-06  3.80e-05  8.77e-01  
 17  +3.7054e-01  +3.7789e-01  7.35e-03  2.95e-06  4.97e-04  8.06e-07  1.15e-05  7.36e-01  
 18  +3.7048e-01  +3.7757e-01  7.09e-03  2.85e-06  4.81e-04  7.60e-07  1.13e-05  6.65e-02  
 19  +3.7048e-01  +3.7756e-01  7.08e-03  2.85e-06  4.80e-04  7.59e-07  1.12e-05  1.80e-02  
 20  +3.7039e-01  +3.7718e-01  6.79e-03  2.73e-06  4.60e-04  7.32e-07  1.07e-05  1.43e-01  
 21  +3.6997e-01  +3.7558e-01  5.61e-03  2.24e-06  3.79e-04  6.09e-07  8.73e-06  2.81e-01  
 22  +3.6814e-01  +3.6851e-01  3.74e-04  1.49e-07  2.53e-05  3.93e-08  5.90e-07  9.90e-01  
 23  +3.6800e-01  +3.6801e-01  3.77e-06  1.50e-09  2.55e-07  3.95e-10  5.95e-09  9.90e-01  
 24  +3.6800e-01  +3.6800e-01  3.77e-08  1.50e-11  2.55e-09  3.95e-12  5.95e-11  9.90e-01  
 25  +3.6800e-01  +3.6800e-01  3.78e-10  1.51e-13  2.55e-11  3.96e-14  5.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 113.6758ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:47 PM: Optimal value: 3.680e-01
(CVXPY) Sep 20 03:18:47 PM: Compilation took 2.015e-02 seconds
(CVXPY) Sep 20 03:18:47 PM: Solver (including time spent in interface) took 1.213e-01 seconds
Iteration: 19, Objective: 0.3680
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:47 PM: Your problem has 2706 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:47 PM: Finished problem compilation (took 2.758e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2706
  constraints   = 5206
  nnz(P)        = 0
  nnz(A)        = 41755
  cones (total) = 1
    : Nonnegative = 1,  numel = 5206

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7781e-01  +5.4372e+02  5.43e+02  4.34e-01  5.37e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2940e-01  +5.9404e+01  5.89e+01  1.60e-01  2.51e+01  1.69e-02  2.68e-01  9.63e-01  
  3  +5.0786e-01  +1.5215e+01  1.47e+01  1.01e-01  1.59e+01  4.71e-05  2.40e-01  3.72e-01  
  4  +5.0071e-01  +1.5312e+00  1.03e+00  1.03e-02  1.70e+00  8.43e-06  1.05e-01  8.32e-01  
  5  +5.0049e-01  +1.7890e+00  1.29e+00  8.42e-03  1.44e+00  3.85e-05  2.71e-02  9.16e-01  
  6  +4.9754e-01  +1.5564e+00  1.06e+00  1.38e-03  2.42e-01  1.87e-04  3.53e-03  8.77e-01  
  7  +4.8823e-01  +1.3202e+00  8.32e-01  4.77e-04  8.34e-02  3.44e-04  1.21e-03  6.90e-01  
  8  +4.8083e-01  +1.1572e+00  6.76e-01  3.67e-04  6.38e-02  2.12e-04  9.48e-04  3.96e-01  
  9  +4.7094e-01  +9.3213e-01  4.61e-01  2.76e-04  4.77e-02  2.22e-05  7.46e-04  7.33e-01  
 10  +4.6149e-01  +8.5844e-01  3.97e-01  2.16e-04  3.72e-02  2.71e-05  6.00e-04  5.81e-01  
 11  +4.4041e-01  +7.2286e-01  2.82e-01  1.40e-04  2.39e-02  2.26e-05  4.11e-04  8.00e-01  
 12  +4.0033e-01  +5.1143e-01  1.11e-01  4.86e-05  8.22e-03  7.14e-06  1.62e-04  7.02e-01  
 13  +3.8959e-01  +4.6476e-01  7.52e-02  3.20e-05  5.41e-03  5.46e-06  1.12e-04  4.38e-01  
 14  +3.7950e-01  +4.2112e-01  4.16e-02  1.73e-05  2.91e-03  3.60e-06  6.37e-05  6.37e-01  
 15  +3.7307e-01  +3.9265e-01  1.96e-02  8.02e-06  1.35e-03  2.18e-06  3.07e-05  9.90e-01  
 16  +3.6884e-01  +3.7587e-01  7.02e-03  2.86e-06  4.83e-04  7.88e-07  1.12e-05  6.82e-01  
 17  +3.6866e-01  +3.7498e-01  6.32e-03  2.59e-06  4.35e-04  6.74e-07  1.03e-05  3.33e-01  
 18  +3.6865e-01  +3.7495e-01  6.30e-03  2.58e-06  4.33e-04  6.72e-07  1.03e-05  3.13e-02  
 19  +3.6849e-01  +3.7437e-01  5.88e-03  2.39e-06  4.04e-04  6.34e-07  9.41e-06  2.31e-01  
 20  +3.6663e-01  +3.6725e-01  6.26e-04  2.54e-07  4.30e-05  6.44e-08  1.02e-06  9.74e-01  
 21  +3.6640e-01  +3.6641e-01  6.55e-06  2.66e-09  4.50e-07  6.73e-10  1.06e-08  9.90e-01  
 22  +3.6640e-01  +3.6640e-01  6.56e-08  2.66e-11  4.50e-09  6.74e-12  1.07e-10  9.90e-01  
 23  +3.6640e-01  +3.6640e-01  6.59e-10  2.67e-13  4.52e-11  6.77e-14  1.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.7048ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:47 PM: Optimal value: 3.664e-01
(CVXPY) Sep 20 03:18:47 PM: Compilation took 2.758e-02 seconds
(CVXPY) Sep 20 03:18:47 PM: Solver (including time spent in interface) took 7.892e-02 seconds
Iteration: 20, Objective: 0.3664
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:47 PM: Your problem has 2707 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:47 PM: Finished problem compilation (took 2.955e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2707
  constraints   = 5207
  nnz(P)        = 0
  nnz(A)        = 41783
  cones (total) = 1
    : Nonnegative = 1,  numel = 5207

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7779e-01  +5.4372e+02  5.43e+02  4.34e-01  5.37e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2939e-01  +5.9403e+01  5.89e+01  1.60e-01  2.50e+01  1.69e-02  2.68e-01  9.63e-01  
  3  +5.0786e-01  +1.5214e+01  1.47e+01  1.01e-01  1.59e+01  4.71e-05  2.40e-01  3.72e-01  
  4  +5.0071e-01  +1.5323e+00  1.03e+00  1.03e-02  1.70e+00  8.44e-06  1.05e-01  8.32e-01  
  5  +5.0048e-01  +1.7964e+00  1.30e+00  8.39e-03  1.43e+00  3.90e-05  2.68e-02  9.16e-01  
  6  +4.9748e-01  +1.5679e+00  1.07e+00  1.38e-03  2.42e-01  1.90e-04  3.52e-03  8.76e-01  
  7  +4.8831e-01  +1.3372e+00  8.49e-01  4.89e-04  8.55e-02  3.45e-04  1.24e-03  6.80e-01  
  8  +4.8053e-01  +1.1697e+00  6.89e-01  3.74e-04  6.50e-02  2.20e-04  9.67e-04  3.80e-01  
  9  +4.6964e-01  +9.2416e-01  4.55e-01  2.69e-04  4.65e-02  1.56e-05  7.31e-04  7.70e-01  
 10  +4.6045e-01  +8.5327e-01  3.93e-01  2.14e-04  3.69e-02  2.43e-05  5.97e-04  5.70e-01  
 11  +4.3894e-01  +7.1845e-01  2.80e-01  1.37e-04  2.35e-02  2.14e-05  4.05e-04  7.28e-01  
 12  +3.9874e-01  +5.0529e-01  1.07e-01  4.67e-05  7.90e-03  6.71e-06  1.57e-04  7.40e-01  
 13  +3.8310e-01  +4.3736e-01  5.43e-02  2.30e-05  3.87e-03  3.98e-06  8.31e-05  6.06e-01  
 14  +3.8176e-01  +4.3149e-01  4.97e-02  2.09e-05  3.52e-03  3.88e-06  7.62e-05  1.93e-01  
 15  +3.7300e-01  +3.9379e-01  2.08e-02  8.58e-06  1.44e-03  2.15e-06  3.30e-05  9.17e-01  
 16  +3.6852e-01  +3.7562e-01  7.10e-03  2.91e-06  4.91e-04  7.45e-07  1.15e-05  6.97e-01  
 17  +3.6846e-01  +3.7533e-01  6.86e-03  2.82e-06  4.75e-04  7.04e-07  1.13e-05  6.01e-02  
 18  +3.6846e-01  +3.7533e-01  6.86e-03  2.82e-06  4.75e-04  7.04e-07  1.13e-05  1.55e-02  
 19  +3.6844e-01  +3.7524e-01  6.81e-03  2.79e-06  4.71e-04  7.06e-07  1.11e-05  7.62e-02  
 20  +3.6778e-01  +3.7269e-01  4.91e-03  2.00e-06  3.39e-04  5.07e-07  7.95e-06  3.79e-01  
 21  +3.6619e-01  +3.6642e-01  2.38e-04  9.70e-08  1.64e-05  2.36e-08  3.90e-07  9.90e-01  
 22  +3.6610e-01  +3.6610e-01  2.44e-06  9.93e-10  1.68e-07  2.42e-10  3.99e-09  9.90e-01  
 23  +3.6610e-01  +3.6610e-01  2.44e-08  9.94e-12  1.68e-09  2.42e-12  4.00e-11  9.90e-01  
 24  +3.6610e-01  +3.6610e-01  2.45e-10  1.00e-13  1.69e-11  2.44e-14  4.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.3785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:47 PM: Optimal value: 3.661e-01
(CVXPY) Sep 20 03:18:47 PM: Compilation took 2.955e-02 seconds
(CVXPY) Sep 20 03:18:47 PM: Solver (including time spent in interface) took 8.282e-02 seconds
Iteration: 21, Objective: 0.3661
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:48 PM: Your problem has 2717 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:48 PM: Finished problem compilation (took 2.012e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2717
  constraints   = 5217
  nnz(P)        = 0
  nnz(A)        = 42105
  cones (total) = 1
    : Nonnegative = 1,  numel = 5217

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.7778e-01  +5.4370e+02  5.43e+02  4.35e-01  5.36e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2937e-01  +5.9376e+01  5.88e+01  1.60e-01  2.50e+01  1.69e-02  2.67e-01  9.63e-01  
  3  +5.0785e-01  +1.5206e+01  1.47e+01  1.01e-01  1.59e+01  4.71e-05  2.39e-01  3.73e-01  
  4  +5.0071e-01  +1.5344e+00  1.03e+00  1.03e-02  1.70e+00  8.45e-06  1.05e-01  8.31e-01  
  5  +5.0046e-01  +1.7707e+00  1.27e+00  8.24e-03  1.41e+00  3.86e-05  2.64e-02  9.17e-01  
  6  +4.9741e-01  +1.5558e+00  1.06e+00  1.35e-03  2.36e-01  1.92e-04  3.45e-03  8.76e-01  
  7  +4.8831e-01  +1.3332e+00  8.45e-01  4.91e-04  8.58e-02  3.43e-04  1.25e-03  6.71e-01  
  8  +4.8064e-01  +1.1738e+00  6.93e-01  3.76e-04  6.53e-02  2.28e-04  9.71e-04  3.71e-01  
  9  +4.6836e-01  +9.1245e-01  4.44e-01  2.59e-04  4.47e-02  1.09e-05  7.04e-04  7.98e-01  
 10  +4.5906e-01  +8.4294e-01  3.84e-01  2.09e-04  3.59e-02  2.25e-05  5.82e-04  5.68e-01  
 11  +4.3532e-01  +6.9961e-01  2.64e-01  1.28e-04  2.18e-02  1.89e-05  3.79e-04  6.47e-01  
 12  +3.9662e-01  +4.9627e-01  9.97e-02  4.37e-05  7.38e-03  6.17e-06  1.48e-04  7.38e-01  
 13  +3.8388e-01  +4.4088e-01  5.70e-02  2.42e-05  4.09e-03  3.97e-06  8.72e-05  5.19e-01  
 14  +3.8187e-01  +4.3213e-01  5.03e-02  2.12e-05  3.57e-03  3.78e-06  7.70e-05  2.35e-01  
 15  +3.7256e-01  +3.9211e-01  1.96e-02  8.06e-06  1.36e-03  2.00e-06  3.09e-05  9.13e-01  
 16  +3.7052e-01  +3.8390e-01  1.34e-02  5.49e-06  9.26e-04  1.38e-06  2.13e-05  3.83e-01  
 17  +3.6968e-01  +3.8055e-01  1.09e-02  4.44e-06  7.51e-04  1.13e-06  1.73e-05  2.18e-01  
 18  +3.6790e-01  +3.7310e-01  5.20e-03  2.12e-06  3.58e-04  5.40e-07  8.34e-06  9.90e-01  
 19  +3.6627e-01  +3.6702e-01  7.46e-04  3.03e-07  5.14e-05  7.71e-08  1.21e-06  8.68e-01  
 20  +3.6600e-01  +3.6601e-01  7.99e-06  3.25e-09  5.50e-07  8.23e-10  1.30e-08  9.89e-01  
 21  +3.6600e-01  +3.6600e-01  8.00e-08  3.25e-11  5.50e-09  8.24e-12  1.30e-10  9.90e-01  
 22  +3.6600e-01  +3.6600e-01  8.05e-10  3.27e-13  5.54e-11  8.30e-14  1.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 83.7034ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:48 PM: Optimal value: 3.660e-01
(CVXPY) Sep 20 03:18:48 PM: Compilation took 2.012e-02 seconds
(CVXPY) Sep 20 03:18:48 PM: Solver (including time spent in interface) took 8.791e-02 seconds
Iteration: 22, Objective: 0.3660
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:48 PM: Your problem has 2727 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:48 PM: Finished problem compilation (took 1.804e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2727
  constraints   = 5227
  nnz(P)        = 0
  nnz(A)        = 42311
  cones (total) = 1
    : Nonnegative = 1,  numel = 5227

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.7776e-01  +5.4367e+02  5.43e+02  4.35e-01  5.35e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2934e-01  +5.9342e+01  5.88e+01  1.60e-01  2.49e+01  1.69e-02  2.67e-01  9.64e-01  
  3  +5.0784e-01  +1.5192e+01  1.47e+01  1.01e-01  1.58e+01  4.71e-05  2.39e-01  3.74e-01  
  4  +5.0071e-01  +1.5425e+00  1.04e+00  1.04e-02  1.72e+00  8.49e-06  1.05e-01  8.29e-01  
  5  +5.0053e-01  +1.7525e+00  1.25e+00  9.10e-03  1.54e+00  3.22e-05  3.14e-02  8.64e-01  
  6  +4.9784e-01  +1.4861e+00  9.88e-01  1.40e-03  2.44e-01  1.67e-04  3.57e-03  9.03e-01  
  7  +4.8908e-01  +1.2914e+00  8.02e-01  4.73e-04  8.27e-02  3.35e-04  1.20e-03  6.96e-01  
  8  +4.8117e-01  +1.1441e+00  6.63e-01  3.62e-04  6.30e-02  2.22e-04  9.36e-04  3.80e-01  
  9  +4.6920e-01  +9.1576e-01  4.47e-01  2.65e-04  4.58e-02  1.73e-05  7.21e-04  7.59e-01  
 10  +4.6027e-01  +8.5276e-01  3.92e-01  2.15e-04  3.69e-02  2.43e-05  5.97e-04  5.30e-01  
 11  +4.3861e-01  +7.1843e-01  2.80e-01  1.38e-04  2.35e-02  2.17e-05  4.06e-04  7.46e-01  
 12  +3.9904e-01  +5.0835e-01  1.09e-01  4.80e-05  8.11e-03  6.99e-06  1.60e-04  7.27e-01  
 13  +3.8736e-01  +4.5779e-01  7.04e-02  3.01e-05  5.07e-03  5.12e-06  1.06e-04  4.75e-01  
 14  +3.7882e-01  +4.2051e-01  4.17e-02  1.75e-05  2.94e-03  3.68e-06  6.46e-05  6.47e-01  
 15  +3.7216e-01  +3.9203e-01  1.99e-02  8.25e-06  1.39e-03  1.84e-06  3.17e-05  6.13e-01  
 16  +3.6991e-01  +3.8223e-01  1.23e-02  5.07e-06  8.55e-04  1.23e-06  1.97e-05  7.17e-01  
 17  +3.6880e-01  +3.7783e-01  9.02e-03  3.69e-06  6.25e-04  9.10e-07  1.44e-05  4.17e-01  
 18  +3.6625e-01  +3.6779e-01  1.55e-03  6.31e-07  1.07e-04  1.56e-07  2.52e-06  9.02e-01  
 19  +3.6571e-01  +3.6573e-01  2.38e-05  9.71e-09  1.64e-06  2.38e-09  3.91e-08  9.88e-01  
 20  +3.6570e-01  +3.6570e-01  2.39e-07  9.73e-11  1.65e-08  2.38e-11  3.92e-10  9.90e-01  
 21  +3.6570e-01  +3.6570e-01  2.44e-09  9.95e-13  1.68e-10  2.44e-13  4.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 89.2092ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:48 PM: Optimal value: 3.657e-01
(CVXPY) Sep 20 03:18:48 PM: Compilation took 1.804e-02 seconds
(CVXPY) Sep 20 03:18:48 PM: Solver (including time spent in interface) took 9.482e-02 seconds
Iteration: 23, Objective: 0.3657
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:48 PM: Your problem has 2737 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:48 PM: Finished problem compilation (took 2.159e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2737
  constraints   = 5237
  nnz(P)        = 0
  nnz(A)        = 42522
  cones (total) = 1
    : Nonnegative = 1,  numel = 5237

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.00e+00   ------   
  1  +5.7754e-01  +5.4372e+02  5.43e+02  4.35e-01  5.34e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2921e-01  +5.9224e+01  5.87e+01  1.59e-01  2.48e+01  1.69e-02  2.67e-01  9.65e-01  
  3  +5.0782e-01  +1.5167e+01  1.47e+01  1.00e-01  1.58e+01  4.73e-05  2.38e-01  3.78e-01  
  4  +5.0070e-01  +1.5293e+00  1.03e+00  1.03e-02  1.69e+00  8.50e-06  1.03e-01  8.35e-01  
  5  +5.0057e-01  +1.9090e+00  1.41e+00  9.11e-03  1.55e+00  3.87e-05  2.87e-02  8.84e-01  
  6  +4.9779e-01  +1.6222e+00  1.12e+00  1.53e-03  2.67e-01  1.73e-04  3.89e-03  8.77e-01  
  7  +4.8929e-01  +1.3919e+00  9.03e-01  5.42e-04  9.46e-02  3.20e-04  1.37e-03  6.79e-01  
  8  +4.8087e-01  +1.2076e+00  7.27e-01  3.97e-04  6.89e-02  2.14e-04  1.02e-03  4.01e-01  
  9  +4.6564e-01  +9.0046e-01  4.35e-01  2.51e-04  4.33e-02  3.75e-06  6.88e-04  8.48e-01  
 10  +4.5462e-01  +8.2739e-01  3.73e-01  2.00e-04  3.43e-02  1.55e-05  5.66e-04  4.74e-01  
 11  +4.2758e-01  +6.6309e-01  2.36e-01  1.13e-04  1.93e-02  2.03e-05  3.47e-04  9.20e-01  
 12  +3.8942e-01  +4.7009e-01  8.07e-02  3.53e-05  5.95e-03  5.27e-06  1.23e-04  7.30e-01  
 13  +3.8483e-01  +4.5062e-01  6.58e-02  2.83e-05  4.77e-03  4.85e-06  1.01e-04  3.33e-01  
 14  +3.7584e-01  +4.1176e-01  3.59e-02  1.52e-05  2.56e-03  3.26e-06  5.71e-05  7.11e-01  
 15  +3.6927e-01  +3.8351e-01  1.42e-02  5.96e-06  1.00e-03  1.46e-06  2.33e-05  8.55e-01  
 16  +3.6792e-01  +3.7803e-01  1.01e-02  4.21e-06  7.10e-04  1.04e-06  1.65e-05  3.64e-01  
 17  +3.6672e-01  +3.7291e-01  6.20e-03  2.58e-06  4.34e-04  6.22e-07  1.03e-05  9.90e-01  
 18  +3.6510e-01  +3.6680e-01  1.70e-03  7.02e-07  1.19e-04  1.71e-07  2.83e-06  7.46e-01  
 19  +3.6451e-01  +3.6453e-01  2.48e-05  1.02e-08  1.73e-06  2.47e-09  4.16e-08  9.86e-01  
 20  +3.6450e-01  +3.6450e-01  2.48e-07  1.02e-10  1.73e-08  2.48e-11  4.16e-10  9.90e-01  
 21  +3.6450e-01  +3.6450e-01  2.52e-09  1.04e-12  1.76e-10  2.52e-13  4.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.4632ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:48 PM: Optimal value: 3.645e-01
(CVXPY) Sep 20 03:18:48 PM: Compilation took 2.159e-02 seconds
(CVXPY) Sep 20 03:18:48 PM: Solver (including time spent in interface) took 7.712e-02 seconds
Iteration: 24, Objective: 0.3645
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:48 PM: Your problem has 2747 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:48 PM: Finished problem compilation (took 1.862e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2747
  constraints   = 5247
  nnz(P)        = 0
  nnz(A)        = 42740
  cones (total) = 1
    : Nonnegative = 1,  numel = 5247

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.37e+01  1.00e+00  1.00e+00   ------   
  1  +5.7736e-01  +5.4372e+02  5.43e+02  4.36e-01  5.33e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2907e-01  +5.9079e+01  5.85e+01  1.59e-01  2.47e+01  1.69e-02  2.66e-01  9.67e-01  
  3  +5.0780e-01  +1.5130e+01  1.46e+01  1.00e-01  1.57e+01  4.75e-05  2.37e-01  3.83e-01  
  4  +5.0074e-01  +1.6057e+00  1.10e+00  1.10e-02  1.82e+00  8.79e-06  1.06e-01  8.10e-01  
  5  +5.0043e-01  +1.8290e+00  1.33e+00  8.65e-03  1.47e+00  3.81e-05  2.76e-02  9.04e-01  
  6  +4.9679e-01  +1.5670e+00  1.07e+00  1.30e-03  2.28e-01  1.97e-04  3.30e-03  8.93e-01  
  7  +4.8749e-01  +1.3473e+00  8.60e-01  5.24e-04  9.15e-02  3.15e-04  1.33e-03  6.32e-01  
  8  +4.7785e-01  +1.1939e+00  7.16e-01  3.74e-04  6.50e-02  2.46e-04  9.66e-04  3.86e-01  
  9  +4.5228e-01  +8.3473e-01  3.82e-01  1.97e-04  3.38e-02  1.62e-05  5.51e-04  7.91e-01  
 10  +4.4281e-01  +7.7958e-01  3.37e-01  1.66e-04  2.84e-02  1.65e-05  4.78e-04  2.34e-01  
 11  +4.0392e-01  +5.4857e-01  1.45e-01  6.58e-05  1.11e-02  1.22e-05  2.16e-04  9.35e-01  
 12  +3.8659e-01  +4.6779e-01  8.12e-02  3.57e-05  6.00e-03  6.98e-06  1.26e-04  5.54e-01  
 13  +3.7979e-01  +4.3722e-01  5.74e-02  2.49e-05  4.18e-03  4.97e-06  9.12e-05  3.21e-01  
 14  +3.7010e-01  +3.9360e-01  2.35e-02  1.00e-05  1.68e-03  2.16e-06  3.88e-05  7.19e-01  
 15  +3.6938e-01  +3.9009e-01  2.07e-02  8.76e-06  1.47e-03  1.96e-06  3.40e-05  3.36e-01  
 16  +3.6509e-01  +3.7203e-01  6.94e-03  2.91e-06  4.91e-04  6.73e-07  1.16e-05  7.07e-01  
 17  +3.6498e-01  +3.7142e-01  6.44e-03  2.72e-06  4.56e-04  6.09e-07  1.10e-05  1.98e-01  
 18  +3.6498e-01  +3.7142e-01  6.44e-03  2.71e-06  4.55e-04  6.10e-07  1.10e-05  2.53e-02  
 19  +3.6489e-01  +3.7114e-01  6.25e-03  2.61e-06  4.41e-04  6.04e-07  1.05e-05  1.50e-01  
 20  +3.6321e-01  +3.6437e-01  1.16e-03  4.85e-07  8.18e-05  1.12e-07  1.97e-06  9.30e-01  
 21  +3.6281e-01  +3.6283e-01  2.35e-05  9.79e-09  1.65e-06  2.25e-09  4.00e-08  9.81e-01  
 22  +3.6280e-01  +3.6280e-01  2.35e-07  9.80e-11  1.66e-08  2.25e-11  4.01e-10  9.90e-01  
 23  +3.6280e-01  +3.6280e-01  2.41e-09  1.00e-12  1.69e-10  2.31e-13  4.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 120.7926ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:48 PM: Optimal value: 3.628e-01
(CVXPY) Sep 20 03:18:48 PM: Compilation took 1.862e-02 seconds
(CVXPY) Sep 20 03:18:48 PM: Solver (including time spent in interface) took 1.260e-01 seconds
Iteration: 25, Objective: 0.3628
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:49 PM: Your problem has 2749 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:49 PM: Finished problem compilation (took 1.904e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2749
  constraints   = 5249
  nnz(P)        = 0
  nnz(A)        = 42780
  cones (total) = 1
    : Nonnegative = 1,  numel = 5249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.37e+01  1.00e+00  1.00e+00   ------   
  1  +5.7734e-01  +5.4367e+02  5.43e+02  4.35e-01  5.33e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2907e-01  +5.9072e+01  5.85e+01  1.59e-01  2.46e+01  1.69e-02  2.66e-01  9.67e-01  
  3  +5.0779e-01  +1.5126e+01  1.46e+01  1.00e-01  1.57e+01  4.75e-05  2.37e-01  3.83e-01  
  4  +5.0075e-01  +1.6177e+00  1.12e+00  1.11e-02  1.84e+00  8.83e-06  1.07e-01  8.06e-01  
  5  +5.0040e-01  +1.7737e+00  1.27e+00  8.56e-03  1.46e+00  3.61e-05  2.79e-02  8.97e-01  
  6  +4.9667e-01  +1.5343e+00  1.04e+00  1.25e-03  2.19e-01  1.99e-04  3.17e-03  9.00e-01  
  7  +4.8688e-01  +1.3206e+00  8.34e-01  4.96e-04  8.65e-02  3.26e-04  1.25e-03  6.39e-01  
  8  +4.7519e-01  +1.1582e+00  6.83e-01  3.44e-04  5.97e-02  2.55e-04  8.93e-04  3.88e-01  
  9  +4.4773e-01  +8.2820e-01  3.80e-01  1.90e-04  3.26e-02  4.54e-05  5.37e-04  6.56e-01  
 10  +4.2211e-01  +6.6253e-01  2.40e-01  1.14e-04  1.93e-02  1.96e-05  3.50e-04  8.34e-01  
 11  +3.8845e-01  +4.7791e-01  8.95e-02  3.97e-05  6.68e-03  6.24e-06  1.38e-04  6.73e-01  
 12  +3.8366e-01  +4.5592e-01  7.23e-02  3.15e-05  5.29e-03  5.52e-06  1.12e-04  3.22e-01  
 13  +3.7967e-01  +4.3632e-01  5.67e-02  2.43e-05  4.09e-03  5.18e-06  8.87e-05  5.60e-01  
 14  +3.7041e-01  +3.9496e-01  2.46e-02  1.04e-05  1.75e-03  2.39e-06  4.03e-05  7.17e-01  
 15  +3.6927e-01  +3.8959e-01  2.03e-02  8.58e-06  1.44e-03  2.03e-06  3.33e-05  4.17e-01  
 16  +3.6498e-01  +3.7162e-01  6.64e-03  2.78e-06  4.69e-04  6.73e-07  1.11e-05  7.06e-01  
 17  +3.6438e-01  +3.6871e-01  4.33e-03  1.82e-06  3.05e-04  4.08e-07  7.43e-06  9.63e-01  
 18  +3.6435e-01  +3.6861e-01  4.26e-03  1.79e-06  3.00e-04  4.02e-07  7.30e-06  7.34e-02  
 19  +3.6402e-01  +3.6743e-01  3.41e-03  1.42e-06  2.40e-04  3.30e-07  5.74e-06  4.55e-01  
 20  +3.6286e-01  +3.6302e-01  1.61e-04  6.70e-08  1.13e-05  1.55e-08  2.74e-07  9.56e-01  
 21  +3.6280e-01  +3.6280e-01  1.62e-06  6.74e-10  1.14e-07  1.56e-10  2.76e-09  9.90e-01  
 22  +3.6280e-01  +3.6280e-01  1.62e-08  6.74e-12  1.14e-09  1.56e-12  2.76e-11  9.90e-01  
 23  +3.6280e-01  +3.6280e-01  1.67e-10  6.94e-14  1.17e-11  1.61e-14  2.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 85.6182ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:49 PM: Optimal value: 3.628e-01
(CVXPY) Sep 20 03:18:49 PM: Compilation took 1.904e-02 seconds
(CVXPY) Sep 20 03:18:49 PM: Solver (including time spent in interface) took 9.026e-02 seconds
Iteration: 26, Objective: 0.3628
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:18:49 PM: Your problem has 2755 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:18:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:18:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:18:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:18:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:18:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:18:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:18:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:18:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:18:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:18:49 PM: Finished problem compilation (took 1.964e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2755
  constraints   = 5255
  nnz(P)        = 0
  nnz(A)        = 42862
  cones (total) = 1
    : Nonnegative = 1,  numel = 5255

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5015e+03  2.50e+03  9.80e-01  8.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.7727e-01  +5.4368e+02  5.43e+02  4.36e-01  5.33e+01  3.79e-03  5.77e-01  5.85e-01  
  2  +5.2905e-01  +5.9063e+01  5.85e+01  1.59e-01  2.46e+01  1.69e-02  2.66e-01  9.68e-01  
  3  +5.0779e-01  +1.5122e+01  1.46e+01  1.00e-01  1.57e+01  4.75e-05  2.36e-01  3.84e-01  
  4  +5.0073e-01  +1.5875e+00  1.09e+00  1.09e-02  1.79e+00  8.76e-06  1.05e-01  8.17e-01  
  5  +5.0047e-01  +1.9591e+00  1.46e+00  8.73e-03  1.49e+00  4.30e-05  2.65e-02  9.13e-01  
  6  +4.9686e-01  +1.6632e+00  1.17e+00  1.40e-03  2.44e-01  1.98e-04  3.53e-03  8.77e-01  
  7  +4.8704e-01  +1.3978e+00  9.11e-01  5.33e-04  9.29e-02  3.19e-04  1.35e-03  6.53e-01  
  8  +4.7649e-01  +1.2235e+00  7.47e-01  3.80e-04  6.59e-02  2.43e-04  9.81e-04  3.73e-01  
  9  +4.6112e-01  +9.9703e-01  5.36e-01  2.74e-04  4.72e-02  1.10e-04  7.42e-04  4.39e-01  
 10  +4.4603e-01  +8.7251e-01  4.26e-01  2.06e-04  3.52e-02  8.08e-05  5.81e-04  2.61e-01  
 11  +4.2686e-01  +6.8805e-01  2.61e-01  1.28e-04  2.17e-02  1.43e-05  3.91e-04  9.90e-01  
 12  +3.9000e-01  +4.8617e-01  9.62e-02  4.29e-05  7.22e-03  4.46e-06  1.49e-04  6.60e-01  
 13  +3.8425e-01  +4.5947e-01  7.52e-02  3.30e-05  5.54e-03  4.35e-06  1.18e-04  3.56e-01  
 14  +3.7468e-01  +4.1545e-01  4.08e-02  1.76e-05  2.95e-03  2.75e-06  6.63e-05  5.58e-01  
 15  +3.6679e-01  +3.8009e-01  1.33e-02  5.68e-06  9.53e-04  9.41e-07  2.26e-05  7.01e-01  
 16  +3.6549e-01  +3.7439e-01  8.90e-03  3.77e-06  6.35e-04  6.67e-07  1.51e-05  4.16e-01  
 17  +3.6453e-01  +3.6972e-01  5.19e-03  2.19e-06  3.69e-04  4.97e-07  8.84e-06  9.90e-01  
 18  +3.6315e-01  +3.6444e-01  1.29e-03  5.42e-07  9.15e-05  1.24e-07  2.21e-06  7.76e-01  
 19  +3.6271e-01  +3.6275e-01  4.02e-05  1.69e-08  2.85e-06  3.86e-09  6.93e-08  9.69e-01  
 20  +3.6270e-01  +3.6270e-01  4.02e-07  1.69e-10  2.85e-08  3.86e-11  6.93e-10  9.90e-01  
 21  +3.6270e-01  +3.6270e-01  4.05e-09  1.70e-12  2.87e-10  3.89e-13  6.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.861ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:18:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:18:49 PM: Optimal value: 3.627e-01
(CVXPY) Sep 20 03:18:49 PM: Compilation took 1.964e-02 seconds
(CVXPY) Sep 20 03:18:49 PM: Solver (including time spent in interface) took 7.800e-02 seconds
FULL MODEL:
  Accruacy: 0.5998
  Our objective: 0.19960000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.1652)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0052)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0052)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 12.185741662979126
Best over terms:
  Our final objective: 0.16519999999999996
    Its accruacy: 0.5826
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16519999999999996
  Highest accruacy: 0.5826
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

