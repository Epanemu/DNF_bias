Command:
python test_script.py -s linear_dependence -d 4 -n 10000 --seed 56 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29800000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.298
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:32 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:32 PM: Finished problem compilation (took 1.289e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0010e+03  5.00e+03  9.84e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +6.0817e-01  +9.6883e+02  9.68e+02  3.38e-01  4.80e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5098e-01  +1.5077e+02  1.50e+02  1.40e-01  2.43e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1056e-01  +3.2086e+01  3.16e+01  1.11e-01  1.89e+01  1.75e-05  2.25e-01  6.81e-02  
  4  +5.0001e-01  +1.1543e+00  6.54e-01  4.39e-03  7.56e-01  4.74e-06  1.42e-01  9.56e-01  
  5  +4.9970e-01  +8.6433e-01  3.65e-01  2.38e-03  4.12e-01  8.42e-06  2.73e-02  8.70e-01  
  6  +4.8020e-01  +9.3958e-01  4.59e-01  2.46e-04  4.33e-02  3.72e-04  7.12e-04  9.80e-01  
  7  +4.4384e-01  +6.2439e-01  1.81e-01  4.53e-05  7.92e-03  3.75e-04  1.39e-04  8.24e-01  
  8  +4.1274e-01  +4.4810e-01  3.54e-02  8.56e-06  1.49e-03  1.10e-05  3.36e-05  8.86e-01  
  9  +4.0349e-01  +4.0442e-01  9.29e-04  2.07e-07  3.59e-05  1.35e-07  9.29e-07  9.81e-01  
 10  +4.0320e-01  +4.0321e-01  9.32e-06  2.06e-09  3.59e-07  1.35e-09  9.35e-09  9.90e-01  
 11  +4.0320e-01  +4.0320e-01  9.32e-08  2.06e-11  3.59e-09  1.35e-11  9.35e-11  9.90e-01  
 12  +4.0320e-01  +4.0320e-01  9.33e-10  2.07e-13  3.59e-11  1.38e-13  9.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.7883ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:32 PM: Optimal value: 4.032e-01
(CVXPY) Sep 20 03:06:32 PM: Compilation took 1.289e-02 seconds
(CVXPY) Sep 20 03:06:32 PM: Solver (including time spent in interface) took 3.489e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4032
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:32 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:32 PM: Finished problem compilation (took 1.365e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 44646
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +5.0015e+03  5.00e+03  9.84e-01  9.25e+01  1.00e+00  1.00e+00   ------   
  1  +6.0789e-01  +9.6946e+02  9.69e+02  3.39e-01  5.15e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5062e-01  +1.4998e+02  1.49e+02  1.39e-01  2.60e+01  8.27e-03  2.26e-01  7.28e-01  
  3  +5.1035e-01  +3.1646e+01  3.11e+01  1.10e-01  2.01e+01  1.74e-05  2.24e-01  7.19e-02  
  4  +5.0034e-01  +2.2242e+00  1.72e+00  1.15e-02  2.11e+00  5.69e-06  1.79e-01  4.94e-01  
  5  +5.0006e-01  +1.1231e+00  6.23e-01  4.15e-03  7.68e-01  3.06e-06  7.25e-02  6.58e-01  
  6  +4.9930e-01  +1.4825e+00  9.83e-01  4.12e-03  7.76e-01  1.80e-05  1.44e-02  9.17e-01  
  7  +4.8565e-01  +1.1807e+00  6.95e-01  2.80e-04  5.36e-02  2.20e-04  7.22e-04  9.50e-01  
  8  +4.7869e-01  +1.1252e+00  6.47e-01  1.88e-04  3.59e-02  2.55e-04  4.78e-04  3.89e-01  
  9  +4.7880e-01  +1.0759e+00  5.97e-01  1.49e-04  2.85e-02  1.95e-04  3.75e-04  4.47e-01  
 10  +4.7690e-01  +1.0382e+00  5.61e-01  1.47e-04  2.81e-02  1.63e-04  3.74e-04  5.50e-02  
 11  +4.7336e-01  +1.0026e+00  5.29e-01  1.30e-04  2.49e-02  1.44e-04  3.33e-04  1.90e-01  
 12  +4.7295e-01  +9.4130e-01  4.68e-01  1.24e-04  2.36e-02  7.11e-05  3.26e-04  3.45e-01  
 13  +4.4771e-01  +7.9435e-01  3.47e-01  6.77e-05  1.28e-02  5.62e-05  1.84e-04  5.50e-01  
 14  +4.0599e-01  +5.8017e-01  1.74e-01  3.26e-05  6.13e-03  1.74e-05  9.76e-05  6.11e-01  
 15  +3.6081e-01  +3.8454e-01  2.37e-02  4.34e-06  8.08e-04  1.52e-07  1.52e-05  9.32e-01  
 16  +3.5129e-01  +3.5173e-01  4.43e-04  8.05e-08  1.50e-05  3.85e-09  2.98e-07  9.82e-01  
 17  +3.5110e-01  +3.5111e-01  4.42e-06  8.05e-10  1.50e-07  3.85e-11  2.98e-09  9.90e-01  
 18  +3.5110e-01  +3.5110e-01  4.42e-08  8.05e-12  1.50e-09  3.86e-13  2.99e-11  9.90e-01  
 19  +3.5110e-01  +3.5110e-01  4.43e-10  8.05e-14  1.50e-11  3.86e-15  2.99e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.4785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:32 PM: Optimal value: 3.511e-01
(CVXPY) Sep 20 03:06:32 PM: Compilation took 1.365e-02 seconds
(CVXPY) Sep 20 03:06:32 PM: Solver (including time spent in interface) took 5.627e-02 seconds
FULL MODEL:
  Accruacy: 0.649
  Our objective: 0.29800000000000004

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.298)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.416231632232666
Best over terms:
  Our final objective: 0.29800000000000004
    Its accruacy: 0.649
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29800000000000004
  Highest accruacy: 0.649
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

