Command:
python test_script.py -s linear_dependence -d 5 -n 10000 --seed 34 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29960000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.2996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:09 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:09 PM: Finished problem compilation (took 1.515e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  9.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.9957e-01  +1.0020e+03  1.00e+03  3.64e-01  5.44e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4622e-01  +1.4294e+02  1.42e+02  1.45e-01  2.70e+01  9.85e-03  2.35e-01  7.78e-01  
  3  +5.1065e-01  +3.3554e+01  3.30e+01  1.15e-01  2.11e+01  2.32e-05  2.31e-01  9.20e-02  
  4  +5.0013e-01  +1.2893e+00  7.89e-01  5.32e-03  9.87e-01  5.40e-06  1.32e-01  9.90e-01  
  5  +4.9984e-01  +9.1589e-01  4.16e-01  2.71e-03  5.06e-01  9.28e-06  2.64e-02  8.63e-01  
  6  +4.8779e-01  +1.0398e+00  5.52e-01  3.15e-04  6.01e-02  3.44e-04  8.63e-04  9.75e-01  
  7  +4.6072e-01  +7.8163e-01  3.21e-01  8.20e-05  1.56e-02  4.84e-04  2.33e-04  7.55e-01  
  8  +4.2286e-01  +5.2313e-01  1.00e-01  2.54e-05  4.76e-03  3.90e-06  9.05e-05  7.53e-01  
  9  +3.9929e-01  +4.0644e-01  7.15e-03  1.63e-06  3.04e-04  8.47e-08  7.18e-06  9.42e-01  
 10  +3.9703e-01  +3.9711e-01  8.14e-05  1.82e-08  3.40e-06  9.60e-10  8.29e-08  9.89e-01  
 11  +3.9700e-01  +3.9700e-01  8.13e-07  1.82e-10  3.40e-08  9.60e-12  8.29e-10  9.90e-01  
 12  +3.9700e-01  +3.9700e-01  8.14e-09  1.82e-12  3.40e-10  9.71e-14  8.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.2089ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:09 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:09 PM: Optimal value: 3.970e-01
(CVXPY) Sep 20 03:08:09 PM: Compilation took 1.515e-02 seconds
(CVXPY) Sep 20 03:08:09 PM: Solver (including time spent in interface) took 3.620e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3970
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:09 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:09 PM: Finished problem compilation (took 1.722e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 49677
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0013e+03  5.00e+03  9.85e-01  9.87e+01  1.00e+00  1.00e+00   ------   
  1  +5.9941e-01  +1.0022e+03  1.00e+03  3.65e-01  5.77e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4600e-01  +1.4247e+02  1.42e+02  1.44e-01  2.85e+01  9.87e-03  2.35e-01  7.81e-01  
  3  +5.1050e-01  +3.3256e+01  3.27e+01  1.14e-01  2.22e+01  2.32e-05  2.31e-01  9.52e-02  
  4  +5.0027e-01  +1.8095e+00  1.31e+00  8.81e-03  1.72e+00  6.11e-06  1.54e-01  7.40e-01  
  5  +4.9996e-01  +8.3125e-01  3.31e-01  2.20e-03  4.35e-01  4.28e-06  3.08e-02  9.30e-01  
  6  +4.9413e-01  +1.1308e+00  6.37e-01  6.23e-04  1.27e-01  1.45e-04  1.65e-03  9.80e-01  
  7  +4.7905e-01  +9.9048e-01  5.11e-01  1.76e-04  3.58e-02  3.65e-04  4.54e-04  7.35e-01  
  8  +4.6802e-01  +9.3564e-01  4.68e-01  1.19e-04  2.42e-02  4.10e-04  3.08e-04  3.57e-01  
  9  +4.4673e-01  +7.7819e-01  3.31e-01  7.02e-05  1.42e-02  1.53e-04  1.89e-04  6.68e-01  
 10  +3.9425e-01  +5.2049e-01  1.26e-01  2.30e-05  4.59e-03  2.55e-05  7.01e-05  7.29e-01  
 11  +3.5592e-01  +3.6979e-01  1.39e-02  2.53e-06  5.02e-04  2.17e-07  9.06e-06  9.40e-01  
 12  +3.5037e-01  +3.5054e-01  1.67e-04  3.03e-08  6.02e-06  2.38e-09  1.12e-07  9.88e-01  
 13  +3.5030e-01  +3.5030e-01  1.67e-06  3.03e-10  6.02e-08  2.38e-11  1.12e-09  9.90e-01  
 14  +3.5030e-01  +3.5030e-01  1.67e-08  3.03e-12  6.02e-10  2.39e-13  1.12e-11  9.90e-01  
 15  +3.5030e-01  +3.5030e-01  1.67e-10  3.03e-14  6.02e-12  2.39e-15  1.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.7405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:09 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:09 PM: Optimal value: 3.503e-01
(CVXPY) Sep 20 03:08:09 PM: Compilation took 1.722e-02 seconds
(CVXPY) Sep 20 03:08:09 PM: Solver (including time spent in interface) took 5.392e-02 seconds
FULL MODEL:
  Accruacy: 0.6498
  Our objective: 0.29960000000000003

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2996)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4663150310516357
Best over terms:
  Our final objective: 0.29960000000000003
    Its accruacy: 0.6498
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29960000000000003
  Highest accruacy: 0.6498
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

