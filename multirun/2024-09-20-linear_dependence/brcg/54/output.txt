Command:
python test_script.py -s linear_dependence -d 2 -n 100 --seed 21 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.62
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 2.

Computed total variation: 0.6200000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:40 PM: Your problem has 55 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:40 PM: Finished problem compilation (took 6.305e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 255
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8509e-01  +5.2095e+01  5.16e+01  8.50e-01  6.71e+00  1.00e+00  1.08e+00   ------   
  1  +6.0901e-01  +9.0929e+00  8.48e+00  2.26e-01  2.96e+00  4.44e-03  4.06e-01  7.40e-01  
  2  +4.7955e-01  +1.8953e+00  1.42e+00  4.97e-02  7.47e-01  7.38e-03  1.15e-01  8.16e-01  
  3  +3.4877e-01  +1.1751e+00  8.26e-01  1.73e-02  2.61e-01  6.16e-03  4.49e-02  6.43e-01  
  4  +2.5384e-01  +5.8434e-01  3.30e-01  7.94e-03  1.12e-01  1.64e-03  2.80e-02  4.68e-01  
  5  +1.9625e-01  +2.2633e-01  3.01e-02  7.82e-04  1.05e-02  9.07e-05  4.29e-03  9.46e-01  
  6  +1.9023e-01  +1.9086e-01  6.29e-04  1.64e-05  2.21e-04  1.67e-06  1.02e-04  9.78e-01  
  7  +1.9010e-01  +1.9011e-01  6.27e-06  1.64e-07  2.20e-06  1.66e-08  1.02e-06  9.90e-01  
  8  +1.9010e-01  +1.9010e-01  6.27e-08  1.64e-09  2.20e-08  1.66e-10  1.02e-08  9.90e-01  
  9  +1.9010e-01  +1.9010e-01  6.27e-10  1.64e-11  2.20e-10  1.66e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 268.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:40 PM: Optimal value: 1.901e-01
(CVXPY) Sep 20 03:03:40 PM: Compilation took 6.305e-03 seconds
(CVXPY) Sep 20 03:03:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:40 PM: Your problem has 56 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:40 PM: Finished problem compilation (took 4.200e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 275
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8732e-01  +5.2545e+01  5.21e+01  8.50e-01  6.91e+00  1.00e+00  1.08e+00   ------   
  1  +6.1319e-01  +9.2051e+00  8.59e+00  2.31e-01  3.10e+00  4.38e-03  4.16e-01  7.38e-01  
  2  +4.8876e-01  +2.1590e+00  1.67e+00  5.88e-02  9.07e-01  7.32e-03  1.35e-01  7.71e-01  
  3  +3.4297e-01  +1.2924e+00  9.49e-01  1.79e-02  2.82e-01  6.97e-03  4.61e-02  6.97e-01  
  4  +2.2471e-01  +4.3125e-01  2.07e-01  5.08e-03  7.29e-02  1.33e-03  2.09e-02  7.13e-01  
  5  +1.9321e-01  +2.0777e-01  1.46e-02  3.76e-04  5.27e-03  4.87e-05  2.16e-03  9.24e-01  
  6  +1.9014e-01  +1.9034e-01  2.01e-04  5.21e-06  7.29e-05  8.34e-07  3.30e-05  9.86e-01  
  7  +1.9010e-01  +1.9010e-01  2.01e-06  5.21e-08  7.28e-07  8.33e-09  3.30e-07  9.90e-01  
  8  +1.9010e-01  +1.9010e-01  2.01e-08  5.21e-10  7.28e-09  8.33e-11  3.30e-09  9.90e-01  
  9  +1.9010e-01  +1.9010e-01  2.01e-10  5.21e-12  7.28e-11  8.33e-13  3.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 194.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:40 PM: Optimal value: 1.901e-01
(CVXPY) Sep 20 03:03:40 PM: Compilation took 4.200e-03 seconds
(CVXPY) Sep 20 03:03:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:40 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:40 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 296
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7879e-01  +5.2948e+01  5.25e+01  8.54e-01  7.14e+00  1.00e+00  1.11e+00   ------   
  1  +5.8629e-01  +9.3745e+00  8.79e+00  2.43e-01  3.30e+00  4.26e-03  4.46e-01  7.30e-01  
  2  +4.4736e-01  +2.1625e+00  1.72e+00  5.55e-02  8.76e-01  7.79e-03  1.31e-01  7.94e-01  
  3  +3.6554e-01  +1.2740e+00  9.08e-01  2.30e-02  3.62e-01  4.45e-03  6.19e-02  5.65e-01  
  4  +2.5801e-01  +6.4429e-01  3.86e-01  9.17e-03  1.38e-01  1.17e-03  3.11e-02  6.39e-01  
  5  +1.9672e-01  +2.3503e-01  3.83e-02  1.01e-03  1.45e-02  1.59e-04  5.54e-03  9.26e-01  
  6  +1.9034e-01  +1.9152e-01  1.18e-03  3.13e-05  4.45e-04  3.38e-06  1.99e-04  9.67e-01  
  7  +1.9010e-01  +1.9012e-01  1.91e-05  5.02e-07  7.14e-06  4.87e-08  3.27e-06  9.87e-01  
  8  +1.9010e-01  +1.9010e-01  1.90e-07  5.02e-09  7.14e-08  4.86e-10  3.27e-08  9.90e-01  
  9  +1.9010e-01  +1.9010e-01  1.90e-09  5.02e-11  7.14e-10  4.86e-12  3.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 222.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:40 PM: Optimal value: 1.901e-01
(CVXPY) Sep 20 03:03:40 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.81
  Our objective: 0.62

IF 
    (x0 = 0) <-- (term's our objective: 0.62)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8376047611236572
Best over terms:
  Our final objective: 0.62
    Its accruacy: 0.81
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.62
  Highest accruacy: 0.81
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

