Command:
python test_script.py -s linear_dependence -d 2 -n 5000 --seed 56 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5871999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 2.

Computed total variation: 0.5871999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:56 PM: Your problem has 2505 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:56 PM: Finished problem compilation (took 6.231e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2505
  constraints   = 5005
  nnz(P)        = 0
  nnz(A)        = 12505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +2.5019e+03  2.50e+03  9.76e-01  5.12e+01  1.00e+00  1.00e+00   ------   
  1  +6.3704e-01  +4.3712e+02  4.36e+02  2.65e-01  2.42e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5775e-01  +8.0305e+01  7.97e+01  1.27e-01  1.34e+01  5.35e-03  2.11e-01  6.01e-01  
  3  +5.0078e-01  +4.8948e+00  4.39e+00  3.87e-02  3.83e+00  1.23e-03  2.00e-01  2.78e-01  
  4  +4.9536e-01  +2.0237e+00  1.53e+00  7.58e-03  8.32e-01  2.61e-03  1.98e-02  9.89e-01  
  5  +4.1932e-01  +1.9259e+00  1.51e+00  6.70e-04  7.61e-02  3.40e-02  1.40e-03  9.51e-01  
  6  +3.6222e-01  +1.3579e+00  9.96e-01  5.08e-04  5.60e-02  1.10e-02  1.19e-03  2.66e-01  
  7  +2.7459e-01  +6.6002e-01  3.85e-01  2.25e-04  2.36e-02  6.95e-05  7.36e-04  5.16e-01  
  8  +2.1672e-01  +2.7269e-01  5.60e-02  3.39e-05  3.47e-03  4.15e-07  1.79e-04  8.36e-01  
  9  +2.0677e-01  +2.0825e-01  1.48e-03  8.95e-07  9.14e-05  1.76e-08  5.60e-06  9.73e-01  
 10  +2.0650e-01  +2.0652e-01  1.48e-05  8.92e-09  9.11e-07  1.76e-10  5.61e-08  9.90e-01  
 11  +2.0650e-01  +2.0650e-01  1.48e-07  8.92e-11  9.11e-09  1.76e-12  5.61e-10  9.90e-01  
 12  +2.0650e-01  +2.0650e-01  1.48e-09  8.92e-13  9.11e-11  1.76e-14  5.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6196ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:56 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:56 PM: Optimal value: 2.065e-01
(CVXPY) Sep 20 03:03:56 PM: Compilation took 6.231e-03 seconds
(CVXPY) Sep 20 03:03:56 PM: Solver (including time spent in interface) took 1.439e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.2065
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:56 PM: Your problem has 2506 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:56 PM: Finished problem compilation (took 5.126e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2506
  constraints   = 5006
  nnz(P)        = 0
  nnz(A)        = 13532
  cones (total) = 1
    : Nonnegative = 1,  numel = 5006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +2.5020e+03  2.50e+03  9.76e-01  5.32e+01  1.00e+00  1.00e+00   ------   
  1  +6.3679e-01  +4.3757e+02  4.37e+02  2.66e-01  2.51e+01  4.49e-03  3.90e-01  7.24e-01  
  2  +5.5764e-01  +8.0205e+01  7.96e+01  1.27e-01  1.39e+01  5.38e-03  2.11e-01  6.03e-01  
  3  +5.0071e-01  +4.8245e+00  4.32e+00  3.81e-02  3.92e+00  1.23e-03  2.00e-01  2.87e-01  
  4  +4.9822e-01  +3.6788e+00  3.18e+00  2.17e-02  2.38e+00  1.92e-03  6.76e-02  7.19e-01  
  5  +4.3136e-01  +3.5024e+00  3.07e+00  1.63e-03  1.91e-01  3.03e-02  3.41e-03  9.53e-01  
  6  +4.1064e-01  +3.0422e+00  2.63e+00  1.27e-03  1.48e-01  2.49e-02  2.71e-03  2.52e-01  
  7  +4.0858e-01  +2.8632e+00  2.45e+00  1.24e-03  1.45e-01  1.98e-02  2.67e-03  8.66e-02  
  8  +3.5131e-01  +1.5380e+00  1.19e+00  6.23e-04  7.08e-02  1.73e-04  1.49e-03  6.97e-01  
  9  +2.6459e-01  +6.5025e-01  3.86e-01  2.18e-04  2.38e-02  1.79e-05  7.16e-04  6.55e-01  
 10  +2.1174e-01  +2.4394e-01  3.22e-02  1.95e-05  2.07e-03  1.86e-06  1.09e-04  9.42e-01  
 11  +2.0659e-01  +2.0716e-01  5.62e-04  3.40e-07  3.61e-05  2.94e-08  2.14e-06  9.82e-01  
 12  +2.0650e-01  +2.0651e-01  5.61e-06  3.40e-09  3.60e-07  2.93e-10  2.14e-08  9.90e-01  
 13  +2.0650e-01  +2.0650e-01  5.61e-08  3.40e-11  3.60e-09  2.94e-12  2.14e-10  9.90e-01  
 14  +2.0650e-01  +2.0650e-01  5.61e-10  3.39e-13  3.60e-11  2.94e-14  2.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.7704ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:56 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:56 PM: Optimal value: 2.065e-01
(CVXPY) Sep 20 03:03:56 PM: Compilation took 5.126e-03 seconds
(CVXPY) Sep 20 03:03:56 PM: Solver (including time spent in interface) took 1.495e-02 seconds
Iteration: 2, Objective: 0.2065
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:56 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:56 PM: Finished problem compilation (took 9.897e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 14483
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +2.5020e+03  2.50e+03  9.76e-01  5.48e+01  1.00e+00  1.00e+00   ------   
  1  +6.2675e-01  +4.5108e+02  4.50e+02  2.86e-01  2.73e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5729e-01  +8.0728e+01  8.02e+01  1.29e-01  1.45e+01  6.05e-03  2.13e-01  6.40e-01  
  3  +5.0073e-01  +4.8480e+00  4.35e+00  3.83e-02  4.06e+00  8.18e-04  2.01e-01  3.20e-01  
  4  +4.9779e-01  +3.5431e+00  3.05e+00  1.96e-02  2.24e+00  1.38e-03  5.82e-02  7.87e-01  
  5  +4.2842e-01  +3.1586e+00  2.73e+00  1.39e-03  1.69e-01  2.06e-02  2.92e-03  9.55e-01  
  6  +4.1694e-01  +3.0198e+00  2.60e+00  1.22e-03  1.47e-01  1.95e-02  2.57e-03  1.65e-01  
  7  +3.9819e-01  +2.1002e+00  1.70e+00  1.07e-03  1.26e-01  3.80e-03  2.55e-03  1.67e-01  
  8  +3.5729e-01  +1.7513e+00  1.39e+00  7.99e-04  9.31e-02  1.82e-03  1.98e-03  6.69e-01  
  9  +3.5582e-01  +1.7282e+00  1.37e+00  7.88e-04  9.17e-02  1.68e-03  1.96e-03  6.36e-02  
 10  +2.6989e-01  +6.6965e-01  4.00e-01  2.23e-04  2.51e-02  1.36e-05  7.07e-04  7.20e-01  
 11  +2.1252e-01  +2.5286e-01  4.03e-02  2.45e-05  2.67e-03  3.08e-06  1.37e-04  9.45e-01  
 12  +2.0664e-01  +2.0744e-01  8.04e-04  4.86e-07  5.31e-05  3.70e-08  3.05e-06  9.79e-01  
 13  +2.0650e-01  +2.0651e-01  8.03e-06  4.86e-09  5.30e-07  3.70e-10  3.06e-08  9.90e-01  
 14  +2.0650e-01  +2.0650e-01  8.03e-08  4.86e-11  5.30e-09  3.70e-12  3.06e-10  9.90e-01  
 15  +2.0650e-01  +2.0650e-01  8.03e-10  4.86e-13  5.30e-11  3.70e-14  3.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.9982ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:56 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:56 PM: Optimal value: 2.065e-01
(CVXPY) Sep 20 03:03:56 PM: Compilation took 9.897e-03 seconds
(CVXPY) Sep 20 03:03:56 PM: Solver (including time spent in interface) took 1.509e-02 seconds
FULL MODEL:
  Accruacy: 0.7936
  Our objective: 0.5871999999999999

IF 
    (x0 = 0) <-- (term's our objective: 0.5872)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9569785594940186
Best over terms:
  Our final objective: 0.5871999999999999
    Its accruacy: 0.7936
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5871999999999999
  Highest accruacy: 0.7936
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

