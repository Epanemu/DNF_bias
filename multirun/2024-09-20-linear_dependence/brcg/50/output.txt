Command:
python test_script.py -s linear_dependence -d 2 -n 100 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5399999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 2.

Computed total variation: 0.54
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:34 PM: Your problem has 55 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:34 PM: Finished problem compilation (took 3.768e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 255
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9051e-01  +5.1410e+01  5.09e+01  8.49e-01  6.59e+00  1.00e+00  1.05e+00   ------   
  1  +6.1913e-01  +9.1207e+00  8.50e+00  2.29e-01  2.93e+00  4.46e-03  4.02e-01  7.34e-01  
  2  +5.0665e-01  +1.4355e+00  9.29e-01  4.06e-02  5.94e-01  7.17e-03  9.73e-02  8.96e-01  
  3  +4.1606e-01  +1.1541e+00  7.38e-01  1.34e-02  2.02e-01  1.27e-02  3.37e-02  6.93e-01  
  4  +3.0462e-01  +5.7695e-01  2.72e-01  6.19e-03  8.67e-02  7.53e-05  2.13e-02  5.24e-01  
  5  +2.3889e-01  +2.6937e-01  3.05e-02  7.02e-04  9.51e-03  6.22e-05  3.41e-03  9.01e-01  
  6  +2.3026e-01  +2.3083e-01  5.68e-04  1.31e-05  1.77e-04  1.25e-06  7.16e-05  9.81e-01  
  7  +2.3010e-01  +2.3011e-01  5.67e-06  1.31e-07  1.77e-06  1.24e-08  7.17e-07  9.90e-01  
  8  +2.3010e-01  +2.3010e-01  5.67e-08  1.31e-09  1.77e-08  1.24e-10  7.17e-09  9.90e-01  
  9  +2.3010e-01  +2.3010e-01  5.67e-10  1.31e-11  1.77e-10  1.24e-12  7.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 247.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:34 PM: Optimal value: 2.301e-01
(CVXPY) Sep 20 03:03:34 PM: Compilation took 3.768e-03 seconds
(CVXPY) Sep 20 03:03:34 PM: Solver (including time spent in interface) took 1.005e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.2301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:34 PM: Your problem has 56 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:34 PM: Finished problem compilation (took 2.563e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 276
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9019e-01  +5.1370e+01  5.09e+01  8.50e-01  6.82e+00  1.00e+00  1.06e+00   ------   
  1  +6.1575e-01  +9.2191e+00  8.60e+00  2.35e-01  3.07e+00  4.42e-03  4.13e-01  7.28e-01  
  2  +5.0692e-01  +1.4038e+00  8.97e-01  3.94e-02  5.92e-01  7.41e-03  9.50e-02  9.11e-01  
  3  +4.2506e-01  +1.1620e+00  7.37e-01  1.43e-02  2.21e-01  1.27e-02  3.59e-02  6.69e-01  
  4  +3.0931e-01  +5.9048e-01  2.81e-01  6.27e-03  9.10e-02  8.52e-05  2.07e-02  5.58e-01  
  5  +2.3780e-01  +2.6477e-01  2.70e-02  6.31e-04  8.77e-03  6.76e-05  3.08e-03  9.17e-01  
  6  +2.3028e-01  +2.3090e-01  6.15e-04  1.44e-05  2.00e-04  1.13e-06  7.91e-05  9.76e-01  
  7  +2.3010e-01  +2.3011e-01  6.14e-06  1.44e-07  1.99e-06  1.13e-08  7.92e-07  9.90e-01  
  8  +2.3010e-01  +2.3010e-01  6.14e-08  1.44e-09  1.99e-08  1.13e-10  7.92e-09  9.90e-01  
  9  +2.3010e-01  +2.3010e-01  6.14e-10  1.44e-11  1.99e-10  1.13e-12  7.92e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:34 PM: Optimal value: 2.301e-01
(CVXPY) Sep 20 03:03:34 PM: Compilation took 2.563e-03 seconds
(CVXPY) Sep 20 03:03:34 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:34 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:34 PM: Finished problem compilation (took 7.448e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 292
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8872e-01  +5.1374e+01  5.09e+01  8.51e-01  6.94e+00  1.00e+00  1.06e+00   ------   
  1  +6.0489e-01  +9.3462e+00  8.74e+00  2.46e-01  3.23e+00  4.32e-03  4.28e-01  7.20e-01  
  2  +5.0720e-01  +1.4501e+00  9.43e-01  4.12e-02  6.32e-01  7.69e-03  9.80e-02  9.11e-01  
  3  +4.1807e-01  +1.1656e+00  7.47e-01  1.41e-02  2.22e-01  1.28e-02  3.53e-02  6.88e-01  
  4  +3.0666e-01  +5.8489e-01  2.78e-01  6.35e-03  9.35e-02  8.11e-05  2.12e-02  5.38e-01  
  5  +2.3694e-01  +2.6029e-01  2.33e-02  5.49e-04  7.78e-03  5.22e-05  2.64e-03  9.28e-01  
  6  +2.3041e-01  +2.3145e-01  1.04e-03  2.46e-05  3.47e-04  2.26e-06  1.33e-04  9.52e-01  
  7  +2.3011e-01  +2.3012e-01  1.75e-05  4.10e-07  5.79e-06  4.34e-08  2.27e-06  9.89e-01  
  8  +2.3010e-01  +2.3010e-01  1.75e-07  4.10e-09  5.79e-08  4.33e-10  2.27e-08  9.90e-01  
  9  +2.3010e-01  +2.3010e-01  1.75e-09  4.10e-11  5.79e-10  4.33e-12  2.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:34 PM: Optimal value: 2.301e-01
(CVXPY) Sep 20 03:03:34 PM: Compilation took 7.448e-04 seconds
(CVXPY) Sep 20 03:03:34 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.77
  Our objective: 0.5399999999999999

IF 
    (x0 = 0) <-- (term's our objective: 0.54)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7841916084289551
Best over terms:
  Our final objective: 0.5399999999999999
    Its accruacy: 0.77
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5399999999999999
  Highest accruacy: 0.77
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

