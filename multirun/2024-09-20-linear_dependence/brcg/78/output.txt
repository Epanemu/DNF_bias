Command:
python test_script.py -s linear_dependence -d 2 -n 50000 --seed 34 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6031200000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 2.

Computed total variation: 0.60312
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:16 PM: Your problem has 25005 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:16 PM: Finished problem compilation (took 5.091e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25005
  constraints   = 50005
  nnz(P)        = 0
  nnz(A)        = 125005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5002e+04  2.50e+04  9.92e-01  1.64e+02  1.00e+00  1.00e+00   ------   
  1  +6.3754e-01  +4.3679e+03  4.37e+03  2.69e-01  7.76e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5915e-01  +8.1470e+02  8.14e+02  1.36e-01  4.53e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0592e-01  +8.4577e+01  8.41e+01  1.10e-01  3.62e+01  5.50e-06  2.14e-01  5.82e-02  
  4  +5.0015e-01  +5.7803e+00  5.28e+00  1.55e-02  5.00e+00  2.49e-06  1.91e-01  3.22e-01  
  5  +4.9965e-01  +2.2738e+00  1.77e+00  4.65e-03  1.56e+00  4.56e-06  2.24e-02  9.90e-01  
  6  +4.8386e-01  +2.4625e+00  1.98e+00  3.66e-04  1.33e-01  1.49e-04  7.50e-04  9.77e-01  
  7  +4.0459e-01  +1.7526e+00  1.35e+00  5.44e-05  1.97e-02  5.91e-04  1.12e-04  8.53e-01  
  8  +2.8811e-01  +8.3366e-01  5.46e-01  3.26e-05  1.11e-02  2.81e-06  9.53e-05  3.07e-01  
  9  +2.1410e-01  +2.9994e-01  8.58e-02  5.34e-06  1.76e-03  1.64e-08  2.57e-05  8.14e-01  
 10  +1.9914e-01  +2.0254e-01  3.41e-03  2.13e-07  6.99e-05  5.51e-09  1.33e-06  9.62e-01  
 11  +1.9855e-01  +1.9858e-01  3.41e-05  2.14e-09  7.00e-07  5.52e-11  1.35e-08  9.90e-01  
 12  +1.9854e-01  +1.9854e-01  3.41e-07  2.14e-11  7.00e-09  5.52e-13  1.35e-10  9.90e-01  
 13  +1.9854e-01  +1.9854e-01  3.41e-09  2.13e-13  7.00e-11  5.54e-15  1.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 147.1452ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:16 PM: Optimal value: 1.985e-01
(CVXPY) Sep 20 03:04:16 PM: Compilation took 5.091e-02 seconds
(CVXPY) Sep 20 03:04:16 PM: Solver (including time spent in interface) took 1.650e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.1985
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:16 PM: Your problem has 25006 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:16 PM: Finished problem compilation (took 4.610e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25006
  constraints   = 50006
  nnz(P)        = 0
  nnz(A)        = 135041
  cones (total) = 1
    : Nonnegative = 1,  numel = 50006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5002e+04  2.50e+04  9.92e-01  1.70e+02  1.00e+00  1.00e+00   ------   
  1  +6.3752e-01  +4.3684e+03  4.37e+03  2.69e-01  8.04e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5915e-01  +8.1465e+02  8.14e+02  1.36e-01  4.69e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0592e-01  +8.4630e+01  8.41e+01  1.10e-01  3.75e+01  5.50e-06  2.14e-01  5.82e-02  
  4  +5.0015e-01  +5.7677e+00  5.27e+00  1.55e-02  5.17e+00  2.49e-06  1.91e-01  3.23e-01  
  5  +4.9964e-01  +2.2669e+00  1.77e+00  4.63e-03  1.61e+00  4.59e-06  2.22e-02  9.90e-01  
  6  +4.8384e-01  +2.4409e+00  1.96e+00  3.62e-04  1.36e-01  1.49e-04  7.42e-04  9.76e-01  
  7  +4.3479e-01  +2.0103e+00  1.58e+00  9.07e-05  3.40e-02  4.22e-04  1.86e-04  7.52e-01  
  8  +3.3689e-01  +1.2285e+00  8.92e-01  4.40e-05  1.60e-02  1.23e-04  1.03e-04  5.98e-01  
  9  +2.3789e-01  +4.8198e-01  2.44e-01  1.52e-05  5.23e-03  5.75e-07  6.05e-05  6.01e-01  
 10  +2.0121e-01  +2.1507e-01  1.39e-02  8.67e-07  2.95e-04  1.24e-08  5.07e-06  9.50e-01  
 11  +1.9857e-01  +1.9872e-01  1.49e-04  9.32e-09  3.17e-06  2.19e-10  5.91e-08  9.89e-01  
 12  +1.9854e-01  +1.9854e-01  1.49e-06  9.31e-11  3.16e-08  2.19e-12  5.91e-10  9.90e-01  
 13  +1.9854e-01  +1.9854e-01  1.49e-08  9.32e-13  3.16e-10  2.19e-14  5.91e-12  9.90e-01  
 14  +1.9854e-01  +1.9854e-01  1.49e-10  9.33e-15  3.17e-12  2.19e-16  5.92e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 187.0254ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:16 PM: Optimal value: 1.985e-01
(CVXPY) Sep 20 03:04:16 PM: Compilation took 4.610e-02 seconds
(CVXPY) Sep 20 03:04:16 PM: Solver (including time spent in interface) took 2.068e-01 seconds
Iteration: 2, Objective: 0.1985
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:16 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:16 PM: Finished problem compilation (took 5.163e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 144971
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5002e+04  2.50e+04  9.92e-01  1.76e+02  1.00e+00  1.00e+00   ------   
  1  +6.2736e-01  +4.5079e+03  4.51e+03  2.91e-01  8.79e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5858e-01  +8.1760e+02  8.17e+02  1.38e-01  4.89e+01  5.99e-03  2.18e-01  6.27e-01  
  3  +5.0800e-01  +1.1445e+02  1.14e+02  1.19e-01  4.19e+01  8.41e-06  2.16e-01  5.23e-02  
  4  +5.0001e-01  +3.7154e+00  3.22e+00  9.54e-03  3.31e+00  2.81e-06  1.77e-01  5.73e-01  
  5  +4.9285e-01  +7.1199e+00  6.63e+00  3.98e-03  1.52e+00  8.58e-05  8.85e-03  9.90e-01  
  6  +3.9490e-01  +3.2181e+00  2.82e+00  1.31e-04  5.06e-02  1.04e-03  2.75e-04  9.69e-01  
  7  +3.0875e-01  +1.1702e+00  8.61e-01  4.51e-05  1.68e-02  7.80e-06  1.12e-04  6.86e-01  
  8  +2.2247e-01  +3.7758e-01  1.55e-01  9.58e-06  3.39e-03  8.45e-07  4.14e-05  7.85e-01  
  9  +2.0002e-01  +2.0912e-01  9.10e-03  5.69e-07  2.00e-04  4.27e-08  3.46e-06  9.49e-01  
 10  +1.9856e-01  +1.9865e-01  9.44e-05  5.91e-09  2.07e-06  4.63e-10  3.74e-08  9.89e-01  
 11  +1.9854e-01  +1.9854e-01  9.43e-07  5.90e-11  2.07e-08  4.63e-12  3.74e-10  9.90e-01  
 12  +1.9854e-01  +1.9854e-01  9.43e-09  5.90e-13  2.07e-10  4.64e-14  3.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 147.66ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:16 PM: Optimal value: 1.985e-01
(CVXPY) Sep 20 03:04:16 PM: Compilation took 5.163e-02 seconds
(CVXPY) Sep 20 03:04:16 PM: Solver (including time spent in interface) took 1.657e-01 seconds
FULL MODEL:
  Accruacy: 0.80156
  Our objective: 0.6031199999999999

IF 
    (x0 = 0) <-- (term's our objective: 0.60312)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.633241891860962
Best over terms:
  Our final objective: 0.6031199999999999
    Its accruacy: 0.80156
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6031199999999999
  Highest accruacy: 0.80156
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

