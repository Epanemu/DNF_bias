Command:
python test_script.py -s linear_dependence -d 8 -n 100 --seed 73 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.19999999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.9
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 4.241e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9714e-01  +5.1273e+01  5.08e+01  8.71e-01  9.95e+00  1.00e+00  1.04e+00   ------   
  1  +5.7542e-01  +1.1085e+01  1.05e+01  3.67e-01  5.91e+00  3.79e-03  5.80e-01  6.03e-01  
  2  +5.0695e-01  +1.7615e+00  1.25e+00  8.78e-02  1.76e+00  1.77e-02  2.20e-01  9.90e-01  
  3  +4.6626e-01  +9.2374e-01  4.57e-01  1.88e-02  4.01e-01  1.34e-02  5.36e-02  8.19e-01  
  4  +4.2027e-01  +6.0292e-01  1.83e-01  5.34e-03  1.12e-01  5.50e-03  1.71e-02  7.18e-01  
  5  +3.9744e-01  +4.8051e-01  8.31e-02  2.20e-03  4.54e-02  1.70e-03  8.08e-03  6.52e-01  
  6  +3.7755e-01  +4.0169e-01  2.41e-02  4.89e-04  1.01e-02  4.42e-04  2.20e-03  7.83e-01  
  7  +3.7035e-01  +3.7107e-01  7.17e-04  1.44e-05  2.97e-04  4.97e-06  6.77e-05  9.90e-01  
  8  +3.7010e-01  +3.7011e-01  7.18e-06  1.45e-07  2.97e-06  4.98e-08  6.79e-07  9.90e-01  
  9  +3.7010e-01  +3.7010e-01  7.18e-08  1.45e-09  2.97e-08  4.98e-10  6.79e-09  9.90e-01  
 10  +3.7010e-01  +3.7010e-01  7.18e-10  1.45e-11  2.97e-10  4.98e-12  6.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 376.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 3.701e-01
(CVXPY) Sep 20 03:13:40 PM: Compilation took 4.241e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 3.256e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 677
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9485e-01  +5.1673e+01  5.12e+01  8.76e-01  1.01e+01  1.00e+00  1.05e+00   ------   
  1  +5.6004e-01  +1.1144e+01  1.06e+01  3.76e-01  5.84e+00  3.79e-03  5.86e-01  6.04e-01  
  2  +4.9059e-01  +1.8875e+00  1.40e+00  8.79e-02  1.78e+00  1.92e-02  2.18e-01  9.82e-01  
  3  +4.1995e-01  +1.1458e+00  7.26e-01  2.42e-02  5.19e-01  1.75e-02  6.81e-02  7.44e-01  
  4  +3.5972e-01  +6.9689e-01  3.37e-01  8.61e-03  1.84e-01  7.54e-03  2.81e-02  6.66e-01  
  5  +3.2078e-01  +4.2063e-01  9.99e-02  2.59e-03  5.59e-02  1.36e-03  9.72e-03  7.34e-01  
  6  +3.1314e-01  +3.9719e-01  8.41e-02  1.97e-03  4.68e-02  1.06e-03  7.41e-03  3.87e-01  
  7  +2.9359e-01  +3.0428e-01  1.07e-02  2.49e-04  5.90e-03  8.23e-05  1.04e-03  9.05e-01  
  8  +2.9049e-01  +2.9079e-01  2.97e-04  6.94e-06  1.64e-04  2.05e-06  2.97e-05  9.72e-01  
  9  +2.9040e-01  +2.9041e-01  5.78e-06  1.36e-07  3.19e-06  3.32e-08  5.88e-07  9.82e-01  
 10  +2.9040e-01  +2.9040e-01  5.78e-08  1.36e-09  3.19e-08  3.32e-10  5.89e-09  9.90e-01  
 11  +2.9040e-01  +2.9040e-01  5.78e-10  1.37e-11  3.19e-10  3.32e-12  5.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 479.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 2.904e-01
(CVXPY) Sep 20 03:13:40 PM: Compilation took 3.256e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2904
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 2.467e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 773
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9165e-01  +5.1903e+01  5.14e+01  8.82e-01  1.00e+01  1.00e+00  1.06e+00   ------   
  1  +5.4018e-01  +1.1161e+01  1.06e+01  3.83e-01  5.69e+00  3.81e-03  5.87e-01  6.05e-01  
  2  +4.6110e-01  +2.1083e+00  1.65e+00  8.81e-02  1.76e+00  2.09e-02  2.14e-01  9.57e-01  
  3  +3.7646e-01  +1.0646e+00  6.88e-01  2.25e-02  4.76e-01  1.36e-02  6.28e-02  7.45e-01  
  4  +3.2789e-01  +8.2096e-01  4.93e-01  1.19e-02  2.61e-01  1.03e-02  3.42e-02  5.98e-01  
  5  +2.6217e-01  +4.2261e-01  1.60e-01  3.51e-03  7.91e-02  2.22e-03  1.12e-02  7.56e-01  
  6  +2.3331e-01  +3.0360e-01  7.03e-02  1.46e-03  3.41e-02  8.84e-04  5.01e-03  6.20e-01  
  7  +2.1370e-01  +2.2225e-01  8.55e-03  1.77e-04  4.07e-03  8.54e-05  6.60e-04  8.84e-01  
  8  +2.1079e-01  +2.1127e-01  4.79e-04  9.91e-06  2.27e-04  3.91e-06  3.78e-05  9.59e-01  
  9  +2.1061e-01  +2.1063e-01  1.98e-05  4.22e-07  9.44e-06  8.90e-08  1.69e-06  9.57e-01  
 10  +2.1060e-01  +2.1060e-01  2.03e-07  4.34e-09  9.67e-08  9.15e-10  1.76e-08  9.90e-01  
 11  +2.1060e-01  +2.1060e-01  2.03e-09  4.35e-11  9.70e-10  9.17e-12  1.76e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 573.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 2.106e-01
(CVXPY) Sep 20 03:13:40 PM: Compilation took 2.467e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 9.511e-04 seconds
Iteration: 3, Objective: 0.2106
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 3.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 832
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8897e-01  +5.2133e+01  5.16e+01  8.85e-01  9.84e+00  1.00e+00  1.07e+00   ------   
  1  +5.1387e-01  +1.1305e+01  1.08e+01  3.87e-01  5.55e+00  3.85e-03  5.90e-01  6.01e-01  
  2  +4.1876e-01  +2.2878e+00  1.87e+00  8.66e-02  1.68e+00  2.31e-02  2.11e-01  9.49e-01  
  3  +3.3422e-01  +1.1534e+00  8.19e-01  2.72e-02  5.52e-01  1.29e-02  7.42e-02  7.11e-01  
  4  +2.8056e-01  +8.4515e-01  5.65e-01  1.48e-02  3.13e-01  8.87e-03  4.22e-02  5.52e-01  
  5  +2.0964e-01  +3.5725e-01  1.48e-01  3.71e-03  7.90e-02  9.71e-04  1.19e-02  8.71e-01  
  6  +1.8572e-01  +2.6550e-01  7.98e-02  1.88e-03  4.12e-02  5.07e-04  6.34e-03  6.02e-01  
  7  +1.6368e-01  +1.7288e-01  9.20e-03  2.14e-04  4.61e-03  4.86e-05  7.79e-04  8.85e-01  
  8  +1.6095e-01  +1.6162e-01  6.71e-04  1.57e-05  3.35e-04  2.78e-06  5.96e-05  9.25e-01  
  9  +1.6072e-01  +1.6077e-01  5.16e-05  1.23e-06  2.52e-05  1.57e-07  5.24e-06  9.37e-01  
 10  +1.6070e-01  +1.6070e-01  5.74e-07  1.38e-08  2.81e-07  1.69e-09  6.01e-08  9.89e-01  
 11  +1.6070e-01  +1.6070e-01  5.74e-09  1.38e-10  2.81e-09  1.69e-11  6.01e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 742.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 1.607e-01
(CVXPY) Sep 20 03:13:40 PM: Compilation took 3.006e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 3.020e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 871
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8651e-01  +5.2406e+01  5.19e+01  8.89e-01  9.60e+00  1.00e+00  1.07e+00   ------   
  1  +4.8793e-01  +1.1450e+01  1.10e+01  3.90e-01  5.37e+00  3.91e-03  5.91e-01  5.97e-01  
  2  +3.7797e-01  +2.3554e+00  1.98e+00  8.50e-02  1.60e+00  2.41e-02  2.08e-01  9.44e-01  
  3  +2.9723e-01  +9.8129e-01  6.84e-01  2.21e-02  4.35e-01  1.15e-02  6.15e-02  7.79e-01  
  4  +2.5062e-01  +6.8870e-01  4.38e-01  1.25e-02  2.54e-01  6.81e-03  3.55e-02  5.10e-01  
  5  +1.9629e-01  +3.5984e-01  1.64e-01  4.29e-03  9.19e-02  1.59e-03  1.32e-02  8.06e-01  
  6  +1.6275e-01  +2.2031e-01  5.76e-02  1.32e-03  3.04e-02  5.61e-04  4.29e-03  7.45e-01  
  7  +1.4660e-01  +1.6169e-01  1.51e-02  3.32e-04  7.72e-03  1.02e-04  1.12e-03  8.61e-01  
  8  +1.4130e-01  +1.4204e-01  7.40e-04  1.63e-05  3.76e-04  3.82e-06  5.66e-05  9.50e-01  
  9  +1.4102e-01  +1.4107e-01  4.74e-05  1.07e-06  2.39e-05  1.74e-07  4.05e-06  9.43e-01  
 10  +1.4100e-01  +1.4100e-01  5.44e-07  1.24e-08  2.74e-07  1.94e-09  4.75e-08  9.88e-01  
 11  +1.4100e-01  +1.4100e-01  5.44e-09  1.24e-10  2.74e-09  1.94e-11  4.76e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 728.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 1.410e-01
(CVXPY) Sep 20 03:13:40 PM: Compilation took 3.020e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 9.918e-04 seconds
Iteration: 5, Objective: 0.1410
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 4.458e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 915
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8458e-01  +5.2593e+01  5.21e+01  8.92e-01  9.40e+00  1.00e+00  1.08e+00   ------   
  1  +4.5197e-01  +1.1488e+01  1.10e+01  3.84e-01  5.11e+00  4.01e-03  5.80e-01  6.00e-01  
  2  +3.0448e-01  +2.2505e+00  1.95e+00  7.06e-02  1.31e+00  2.51e-02  1.74e-01  9.69e-01  
  3  +2.2888e-01  +7.7293e-01  5.44e-01  1.72e-02  3.28e-01  8.21e-03  4.70e-02  7.89e-01  
  4  +1.7527e-01  +3.8785e-01  2.13e-01  6.48e-03  1.28e-01  2.37e-03  1.90e-02  7.86e-01  
  5  +1.4984e-01  +2.9192e-01  1.42e-01  3.60e-03  8.01e-02  1.52e-03  1.09e-02  6.16e-01  
  6  +1.3295e-01  +2.2582e-01  9.29e-02  2.12e-03  4.98e-02  9.81e-04  6.71e-03  4.54e-01  
  7  +1.0582e-01  +1.1535e-01  9.54e-03  2.04e-04  4.82e-03  4.26e-05  7.00e-04  9.90e-01  
  8  +1.0175e-01  +1.0262e-01  8.70e-04  1.88e-05  4.38e-04  3.29e-06  6.67e-05  9.09e-01  
  9  +1.0132e-01  +1.0136e-01  3.89e-05  8.60e-07  1.97e-05  1.09e-07  3.26e-06  9.62e-01  
 10  +1.0130e-01  +1.0130e-01  4.02e-07  8.92e-09  2.03e-07  1.12e-09  3.41e-08  9.90e-01  
 11  +1.0130e-01  +1.0130e-01  4.02e-09  8.93e-11  2.03e-09  1.12e-11  3.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 657.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 1.013e-01
(CVXPY) Sep 20 03:13:40 PM: Compilation took 4.458e-04 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.1013
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 127 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 4.377e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 127
  constraints   = 177
  nnz(P)        = 0
  nnz(A)        = 950
  cones (total) = 1
    : Nonnegative = 1,  numel = 177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8241e-01  +5.2670e+01  5.22e+01  8.95e-01  9.19e+00  1.00e+00  1.08e+00   ------   
  1  +4.2248e-01  +1.1621e+01  1.12e+01  3.86e-01  4.94e+00  4.08e-03  5.78e-01  5.96e-01  
  2  +2.5589e-01  +2.6081e+00  2.35e+00  8.00e-02  1.42e+00  2.47e-02  1.96e-01  9.04e-01  
  3  +2.0860e-01  +8.2447e-01  6.16e-01  2.08e-02  3.78e-01  8.30e-03  5.68e-02  7.31e-01  
  4  +1.6869e-01  +4.7081e-01  3.02e-01  9.99e-03  1.87e-01  3.84e-03  2.86e-02  5.92e-01  
  5  +1.3399e-01  +2.4958e-01  1.16e-01  3.41e-03  6.74e-02  1.49e-03  1.06e-02  6.79e-01  
  6  +1.1910e-01  +2.0194e-01  8.28e-02  2.05e-03  4.55e-02  9.87e-04  6.59e-03  5.57e-01  
  7  +9.6931e-02  +1.1316e-01  1.62e-02  3.68e-04  8.32e-03  1.63e-04  1.27e-03  8.40e-01  
  8  +9.2001e-02  +9.3761e-02  1.76e-03  4.01e-05  8.98e-04  1.47e-05  1.44e-04  8.91e-01  
  9  +9.1395e-02  +9.1580e-02  1.85e-04  4.31e-06  9.38e-05  7.95e-07  1.72e-05  9.40e-01  
 10  +9.1301e-02  +9.1304e-02  2.78e-06  6.54e-08  1.41e-06  9.92e-09  2.74e-07  9.86e-01  
 11  +9.1300e-02  +9.1300e-02  2.78e-08  6.54e-10  1.41e-08  9.91e-11  2.74e-09  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  2.78e-10  6.55e-12  1.41e-10  9.91e-13  2.74e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 761.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 9.130e-02
(CVXPY) Sep 20 03:13:40 PM: Compilation took 4.377e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 137 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 4.161e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 137
  constraints   = 187
  nnz(P)        = 0
  nnz(A)        = 986
  cones (total) = 1
    : Nonnegative = 1,  numel = 187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7825e-01  +5.2616e+01  5.21e+01  8.98e-01  9.00e+00  1.00e+00  1.07e+00   ------   
  1  +3.7429e-01  +1.1952e+01  1.16e+01  3.88e-01  4.82e+00  4.23e-03  5.74e-01  5.83e-01  
  2  +2.3345e-01  +2.9844e+00  2.75e+00  1.00e-01  1.68e+00  2.35e-02  2.31e-01  8.27e-01  
  3  +1.9458e-01  +8.2596e-01  6.31e-01  2.33e-02  4.08e-01  7.84e-03  6.21e-02  7.59e-01  
  4  +1.6341e-01  +5.4803e-01  3.85e-01  1.41e-02  2.50e-01  4.41e-03  3.87e-02  4.99e-01  
  5  +1.2463e-01  +2.4791e-01  1.23e-01  4.09e-03  7.54e-02  1.42e-03  1.25e-02  7.11e-01  
  6  +1.1112e-01  +2.0588e-01  9.48e-02  2.63e-03  5.49e-02  9.57e-04  8.27e-03  5.86e-01  
  7  +8.9851e-02  +1.1620e-01  2.64e-02  6.65e-04  1.41e-02  2.38e-04  2.26e-03  7.74e-01  
  8  +8.2224e-02  +8.4375e-02  2.15e-03  5.39e-05  1.14e-03  1.35e-05  1.91e-04  9.41e-01  
  9  +8.1624e-02  +8.2191e-02  5.67e-04  1.46e-05  3.01e-04  3.04e-06  5.59e-05  7.73e-01  
 10  +8.1410e-02  +8.1435e-02  2.48e-05  6.49e-07  1.32e-05  1.02e-07  2.60e-06  9.65e-01  
 11  +8.1400e-02  +8.1400e-02  2.54e-07  6.66e-09  1.35e-07  1.04e-09  2.68e-08  9.90e-01  
 12  +8.1400e-02  +8.1400e-02  2.54e-09  6.68e-11  1.35e-09  1.04e-11  2.68e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 822.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 8.140e-02
(CVXPY) Sep 20 03:13:40 PM: Compilation took 4.161e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 147 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 147
  constraints   = 197
  nnz(P)        = 0
  nnz(A)        = 1011
  cones (total) = 1
    : Nonnegative = 1,  numel = 197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7821e-01  +5.2634e+01  5.22e+01  9.00e-01  8.80e+00  1.00e+00  1.07e+00   ------   
  1  +3.6330e-01  +1.1877e+01  1.15e+01  3.85e-01  4.62e+00  4.26e-03  5.67e-01  5.88e-01  
  2  +2.1545e-01  +3.3449e+00  3.13e+00  1.10e-01  1.77e+00  2.18e-02  2.47e-01  7.65e-01  
  3  +1.8432e-01  +8.4327e-01  6.59e-01  2.47e-02  4.22e-01  7.25e-03  6.54e-02  7.64e-01  
  4  +1.4007e-01  +4.3769e-01  2.98e-01  1.11e-02  1.92e-01  2.93e-03  3.10e-02  6.69e-01  
  5  +1.0899e-01  +2.2637e-01  1.17e-01  3.93e-03  7.18e-02  1.20e-03  1.20e-02  6.45e-01  
  6  +1.0002e-01  +1.9858e-01  9.86e-02  2.86e-03  5.79e-02  9.32e-04  8.92e-03  4.54e-01  
  7  +8.0329e-02  +1.1017e-01  2.98e-02  7.89e-04  1.64e-02  2.49e-04  2.65e-03  7.66e-01  
  8  +7.2350e-02  +7.4683e-02  2.33e-03  6.13e-05  1.27e-03  1.23e-05  2.15e-04  9.53e-01  
  9  +7.1693e-02  +7.2203e-02  5.10e-04  1.39e-05  2.79e-04  2.28e-06  5.28e-05  8.29e-01  
 10  +7.1506e-02  +7.1522e-02  1.57e-05  4.35e-07  8.65e-06  5.34e-08  1.72e-06  9.70e-01  
 11  +7.1500e-02  +7.1500e-02  1.59e-07  4.42e-09  8.77e-08  5.41e-10  1.75e-08  9.90e-01  
 12  +7.1500e-02  +7.1500e-02  1.59e-09  4.42e-11  8.78e-10  5.41e-12  1.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 981µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 7.150e-02
(CVXPY) Sep 20 03:13:40 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 9, Objective: 0.0715
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 157 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 3.032e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 157
  constraints   = 207
  nnz(P)        = 0
  nnz(A)        = 1038
  cones (total) = 1
    : Nonnegative = 1,  numel = 207

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7780e-01  +5.2693e+01  5.22e+01  9.02e-01  8.62e+00  1.00e+00  1.07e+00   ------   
  1  +3.5309e-01  +1.1868e+01  1.15e+01  3.87e-01  4.49e+00  4.27e-03  5.65e-01  5.89e-01  
  2  +1.8143e-01  +3.5112e+00  3.33e+00  1.10e-01  1.74e+00  2.14e-02  2.49e-01  7.47e-01  
  3  +1.7564e-01  +7.5059e-01  5.75e-01  2.26e-02  3.76e-01  6.87e-03  6.07e-02  7.89e-01  
  4  +1.3284e-01  +4.3058e-01  2.98e-01  1.13e-02  1.93e-01  2.98e-03  3.25e-02  6.50e-01  
  5  +1.0560e-01  +2.2697e-01  1.21e-01  4.24e-03  7.43e-02  1.23e-03  1.32e-02  6.31e-01  
  6  +9.7330e-02  +1.9898e-01  1.02e-01  3.11e-03  5.98e-02  9.85e-04  9.82e-03  4.10e-01  
  7  +8.0155e-02  +1.1314e-01  3.30e-02  9.27e-04  1.82e-02  2.70e-04  3.14e-03  7.66e-01  
  8  +7.2344e-02  +7.4872e-02  2.53e-03  7.06e-05  1.38e-03  1.13e-05  2.50e-04  9.63e-01  
  9  +7.1693e-02  +7.2265e-02  5.72e-04  1.66e-05  3.15e-04  2.26e-06  6.42e-05  8.14e-01  
 10  +7.1506e-02  +7.1524e-02  1.77e-05  5.22e-07  9.77e-06  5.19e-08  2.10e-06  9.72e-01  
 11  +7.1500e-02  +7.1500e-02  1.79e-07  5.30e-09  9.91e-08  5.25e-10  2.14e-08  9.90e-01  
 12  +7.1500e-02  +7.1500e-02  1.79e-09  5.31e-11  9.92e-10  5.26e-12  2.14e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 942.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 7.150e-02
(CVXPY) Sep 20 03:13:40 PM: Compilation took 3.032e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 9.990e-04 seconds
Iteration: 10, Objective: 0.0715
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 159 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 4.086e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 159
  constraints   = 209
  nnz(P)        = 0
  nnz(A)        = 1049
  cones (total) = 1
    : Nonnegative = 1,  numel = 209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7729e-01  +5.2699e+01  5.22e+01  9.03e-01  8.60e+00  1.00e+00  1.08e+00   ------   
  1  +3.4384e-01  +1.1979e+01  1.16e+01  3.90e-01  4.50e+00  4.28e-03  5.70e-01  5.84e-01  
  2  +1.6848e-01  +3.4669e+00  3.30e+00  1.10e-01  1.72e+00  2.27e-02  2.49e-01  7.61e-01  
  3  +1.6607e-01  +8.0584e-01  6.40e-01  2.52e-02  4.14e-01  7.57e-03  6.77e-02  7.59e-01  
  4  +1.1640e-01  +3.8155e-01  2.65e-01  1.02e-02  1.68e-01  2.42e-03  2.98e-02  7.61e-01  
  5  +9.2074e-02  +2.1289e-01  1.21e-01  4.26e-03  7.23e-02  1.07e-03  1.35e-02  6.07e-01  
  6  +8.5216e-02  +1.8859e-01  1.03e-01  3.22e-03  5.99e-02  8.93e-04  1.03e-02  3.95e-01  
  7  +6.7907e-02  +9.3338e-02  2.54e-02  7.41e-04  1.40e-02  1.62e-04  2.55e-03  8.64e-01  
  8  +6.2190e-02  +6.4569e-02  2.38e-03  6.94e-05  1.30e-03  1.18e-05  2.50e-04  9.06e-01  
  9  +6.1628e-02  +6.1983e-02  3.55e-04  1.08e-05  1.94e-04  1.16e-06  4.42e-05  9.20e-01  
 10  +6.1511e-02  +6.1539e-02  2.78e-05  8.59e-07  1.50e-05  7.60e-08  3.81e-06  9.33e-01  
 11  +6.1500e-02  +6.1500e-02  3.08e-07  9.52e-09  1.65e-07  8.40e-10  4.28e-08  9.90e-01  
 12  +6.1500e-02  +6.1500e-02  3.08e-09  9.54e-11  1.66e-09  8.42e-12  4.30e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 884.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 6.150e-02
(CVXPY) Sep 20 03:13:40 PM: Compilation took 4.086e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 11, Objective: 0.0615
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 160 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 2.019e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 160
  constraints   = 210
  nnz(P)        = 0
  nnz(A)        = 1053
  cones (total) = 1
    : Nonnegative = 1,  numel = 210

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7735e-01  +5.2683e+01  5.22e+01  9.03e-01  8.58e+00  1.00e+00  1.07e+00   ------   
  1  +3.4268e-01  +1.1966e+01  1.16e+01  3.89e-01  4.48e+00  4.29e-03  5.69e-01  5.84e-01  
  2  +1.6796e-01  +3.4160e+00  3.25e+00  1.08e-01  1.69e+00  2.26e-02  2.47e-01  7.65e-01  
  3  +1.6510e-01  +8.0345e-01  6.38e-01  2.52e-02  4.13e-01  7.49e-03  6.75e-02  7.56e-01  
  4  +1.1568e-01  +3.7957e-01  2.64e-01  1.01e-02  1.67e-01  2.42e-03  2.96e-02  7.60e-01  
  5  +9.1116e-02  +2.1194e-01  1.21e-01  4.24e-03  7.25e-02  1.11e-03  1.33e-02  5.98e-01  
  6  +8.2885e-02  +1.8646e-01  1.04e-01  3.07e-03  5.94e-02  9.52e-04  9.67e-03  4.38e-01  
  7  +7.0214e-02  +1.3072e-01  6.05e-02  1.55e-03  3.19e-02  5.84e-04  5.12e-03  5.15e-01  
  8  +6.1910e-02  +8.6945e-02  2.50e-02  6.35e-04  1.30e-02  1.04e-04  2.16e-03  9.90e-01  
  9  +5.2706e-02  +5.5217e-02  2.51e-03  6.09e-05  1.26e-03  8.44e-06  2.18e-04  9.06e-01  
 10  +5.1902e-02  +5.2365e-02  4.63e-04  1.18e-05  2.36e-04  1.66e-06  4.59e-05  8.85e-01  
 11  +5.1706e-02  +5.1719e-02  1.26e-05  3.28e-07  6.42e-06  3.02e-08  1.33e-06  9.72e-01  
 12  +5.1700e-02  +5.1700e-02  1.26e-07  3.29e-09  6.43e-08  3.02e-10  1.34e-08  9.90e-01  
 13  +5.1700e-02  +5.1700e-02  1.26e-09  3.29e-11  6.43e-10  3.02e-12  1.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 927.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 5.170e-02
(CVXPY) Sep 20 03:13:40 PM: Compilation took 2.019e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Iteration: 12, Objective: 0.0517
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:40 PM: Your problem has 163 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:40 PM: Finished problem compilation (took 5.064e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 163
  constraints   = 213
  nnz(P)        = 0
  nnz(A)        = 1066
  cones (total) = 1
    : Nonnegative = 1,  numel = 213

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7731e-01  +5.2691e+01  5.22e+01  9.04e-01  8.54e+00  1.00e+00  1.07e+00   ------   
  1  +3.3950e-01  +1.1951e+01  1.16e+01  3.90e-01  4.44e+00  4.29e-03  5.67e-01  5.85e-01  
  2  +1.6637e-01  +3.3643e+00  3.20e+00  1.07e-01  1.67e+00  2.24e-02  2.46e-01  7.66e-01  
  3  +1.6373e-01  +8.0552e-01  6.42e-01  2.53e-02  4.14e-01  7.47e-03  6.80e-02  7.52e-01  
  4  +1.1553e-01  +3.8241e-01  2.67e-01  1.02e-02  1.69e-01  2.44e-03  2.99e-02  7.59e-01  
  5  +9.0537e-02  +2.1084e-01  1.20e-01  4.22e-03  7.25e-02  1.10e-03  1.32e-02  6.19e-01  
  6  +8.2362e-02  +1.8573e-01  1.03e-01  3.05e-03  5.95e-02  9.46e-04  9.53e-03  4.40e-01  
  7  +6.9975e-02  +1.3062e-01  6.06e-02  1.57e-03  3.25e-02  5.79e-04  5.10e-03  5.08e-01  
  8  +6.1034e-02  +8.3857e-02  2.28e-02  5.86e-04  1.21e-02  9.32e-05  1.97e-03  9.90e-01  
  9  +5.2692e-02  +5.5102e-02  2.41e-03  5.98e-05  1.24e-03  7.91e-06  2.11e-04  8.98e-01  
 10  +5.1897e-02  +5.2339e-02  4.41e-04  1.14e-05  2.27e-04  1.55e-06  4.42e-05  8.83e-01  
 11  +5.1717e-02  +5.1755e-02  3.72e-05  9.77e-07  1.91e-05  1.20e-07  3.98e-06  9.18e-01  
 12  +5.1700e-02  +5.1701e-02  3.94e-07  1.04e-08  2.02e-07  1.27e-09  4.25e-08  9.90e-01  
 13  +5.1700e-02  +5.1700e-02  3.94e-09  1.04e-10  2.02e-09  1.27e-11  4.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 956.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:40 PM: Optimal value: 5.170e-02
(CVXPY) Sep 20 03:13:40 PM: Compilation took 5.064e-03 seconds
(CVXPY) Sep 20 03:13:40 PM: Solver (including time spent in interface) took 9.990e-04 seconds
FULL MODEL:
  Accruacy: 0.94
  Our objective: 0.8799999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x7 = 0)                       <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x7 = 1)            <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x1 = 0 AND x5 = 1 AND x6 = 0)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 0 AND x5 = 1 AND x7 = 0)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x3 = 1 AND x5 = 1 AND x7 = 1)                       <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x7 = 0)            <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.1)
 OR (x1 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.06)
 OR (x2 = 0 AND x4 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.18)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.04)
 OR (x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.4663829803466797
Best over terms:
  Our final objective: 0.18000000000000005
    Its accruacy: 0.59
    Its hamming distance: 4
  Shortest hamming distance: 1
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.59
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

