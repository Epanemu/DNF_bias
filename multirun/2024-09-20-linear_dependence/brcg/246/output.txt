Command:
python test_script.py -s linear_dependence -d 7 -n 50 --seed 56 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 7.

Computed total variation: 0.92
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:41 PM: Your problem has 40 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:41 PM: Finished problem compilation (took 4.027e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 65
  nnz(P)        = 0
  nnz(A)        = 265
  cones (total) = 1
    : Nonnegative = 1,  numel = 65

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9379e-01  +2.5849e+01  2.54e+01  8.29e-01  6.42e+00  1.00e+00  1.06e+00   ------   
  1  +5.7686e-01  +5.6319e+00  5.06e+00  3.41e-01  3.62e+00  3.82e-03  5.77e-01  6.16e-01  
  2  +5.0210e-01  +1.1024e+00  6.00e-01  7.14e-02  9.16e-01  1.65e-02  1.99e-01  9.90e-01  
  3  +4.6131e-01  +7.1572e-01  2.54e-01  1.70e-02  2.30e-01  1.22e-02  5.65e-02  7.84e-01  
  4  +4.3114e-01  +5.4179e-01  1.11e-01  5.86e-03  7.91e-02  4.27e-03  2.29e-02  6.82e-01  
  5  +4.0706e-01  +4.2997e-01  2.29e-02  1.01e-03  1.37e-02  6.60e-04  4.93e-03  8.25e-01  
  6  +4.0022e-01  +4.0058e-01  3.62e-04  1.57e-05  2.12e-04  6.41e-06  8.11e-05  9.88e-01  
  7  +4.0010e-01  +4.0010e-01  3.62e-06  1.57e-07  2.12e-06  6.41e-08  8.12e-07  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  3.62e-08  1.57e-09  2.12e-08  6.41e-10  8.12e-09  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  3.62e-10  1.57e-11  2.12e-10  6.41e-12  8.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 240.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:41 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 03:10:41 PM: Compilation took 4.027e-03 seconds
(CVXPY) Sep 20 03:10:41 PM: Solver (including time spent in interface) took 9.699e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:41 PM: Your problem has 50 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:41 PM: Finished problem compilation (took 2.032e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 50
  constraints   = 75
  nnz(P)        = 0
  nnz(A)        = 338
  cones (total) = 1
    : Nonnegative = 1,  numel = 75

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7640e-01  +2.7073e+01  2.66e+01  8.42e-01  6.57e+00  1.00e+00  1.12e+00   ------   
  1  +4.9237e-01  +5.7743e+00  5.28e+00  3.46e-01  3.58e+00  3.89e-03  5.96e-01  6.21e-01  
  2  +3.7950e-01  +1.3523e+00  9.73e-01  7.50e-02  9.81e-01  1.95e-02  1.95e-01  9.07e-01  
  3  +2.5449e-01  +6.3059e-01  3.76e-01  1.80e-02  2.42e-01  1.06e-02  5.60e-02  8.10e-01  
  4  +1.9231e-01  +2.9833e-01  1.06e-01  4.75e-03  6.49e-02  2.64e-03  1.64e-02  7.53e-01  
  5  +1.7103e-01  +2.0707e-01  3.60e-02  1.58e-03  2.17e-02  8.59e-04  5.67e-03  6.85e-01  
  6  +1.6076e-01  +1.6169e-01  9.29e-04  4.15e-05  5.65e-04  1.00e-05  1.54e-04  9.85e-01  
  7  +1.6043e-01  +1.6051e-01  7.45e-05  3.45e-06  4.61e-05  4.36e-07  1.38e-05  9.12e-01  
  8  +1.6040e-01  +1.6040e-01  1.56e-06  7.28e-08  9.69e-07  1.12e-08  3.19e-07  9.84e-01  
  9  +1.6040e-01  +1.6040e-01  1.56e-08  7.27e-10  9.68e-09  1.12e-10  3.19e-09  9.90e-01  
 10  +1.6040e-01  +1.6040e-01  1.56e-10  7.27e-12  9.68e-11  1.12e-12  3.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 298.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:41 PM: Optimal value: 1.604e-01
(CVXPY) Sep 20 03:10:41 PM: Compilation took 2.032e-03 seconds
(CVXPY) Sep 20 03:10:41 PM: Solver (including time spent in interface) took 9.952e-04 seconds
Iteration: 2, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:41 PM: Your problem has 60 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:41 PM: Finished problem compilation (took 3.021e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 85
  nnz(P)        = 0
  nnz(A)        = 371
  cones (total) = 1
    : Nonnegative = 1,  numel = 85

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6529e-01  +2.7308e+01  2.68e+01  8.51e-01  6.32e+00  1.00e+00  1.13e+00   ------   
  1  +4.0914e-01  +5.8519e+00  5.44e+00  3.44e-01  3.33e+00  4.07e-03  5.85e-01  6.17e-01  
  2  +2.3980e-01  +1.1756e+00  9.36e-01  6.02e-02  7.37e-01  1.98e-02  1.53e-01  9.35e-01  
  3  +1.3721e-01  +4.1818e-01  2.81e-01  1.57e-02  1.95e-01  5.96e-03  4.60e-02  7.79e-01  
  4  +8.3852e-02  +1.8063e-01  9.68e-02  4.63e-03  6.04e-02  1.90e-03  1.58e-02  7.15e-01  
  5  +6.4345e-02  +7.9983e-02  1.56e-02  7.25e-04  9.46e-03  3.00e-04  2.61e-03  8.43e-01  
  6  +6.0832e-02  +6.1238e-02  4.05e-04  1.92e-05  2.48e-04  3.88e-06  7.07e-05  9.73e-01  
  7  +6.0712e-02  +6.0741e-02  2.89e-05  1.49e-06  1.83e-05  1.90e-07  6.69e-06  9.24e-01  
  8  +6.0700e-02  +6.0700e-02  3.38e-07  1.74e-08  2.14e-07  2.35e-09  8.22e-08  9.89e-01  
  9  +6.0700e-02  +6.0700e-02  3.40e-09  1.75e-10  2.15e-09  2.36e-11  8.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 295.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:41 PM: Optimal value: 6.070e-02
(CVXPY) Sep 20 03:10:41 PM: Compilation took 3.021e-03 seconds
(CVXPY) Sep 20 03:10:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.0607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:41 PM: Your problem has 62 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:41 PM: Finished problem compilation (took 3.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 87
  nnz(P)        = 0
  nnz(A)        = 383
  cones (total) = 1
    : Nonnegative = 1,  numel = 87

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6482e-01  +2.7354e+01  2.69e+01  8.52e-01  6.31e+00  1.00e+00  1.13e+00   ------   
  1  +4.0660e-01  +5.8540e+00  5.45e+00  3.46e-01  3.31e+00  4.07e-03  5.85e-01  6.18e-01  
  2  +2.3849e-01  +1.2171e+00  9.79e-01  6.29e-02  7.67e-01  1.95e-02  1.60e-01  9.19e-01  
  3  +1.4145e-01  +4.6067e-01  3.19e-01  1.81e-02  2.25e-01  6.45e-03  5.22e-02  7.57e-01  
  4  +8.7045e-02  +2.0252e-01  1.15e-01  5.64e-03  7.35e-02  2.25e-03  1.89e-02  6.95e-01  
  5  +6.5135e-02  +8.4893e-02  1.98e-02  9.31e-04  1.21e-02  3.70e-04  3.31e-03  8.44e-01  
  6  +6.0860e-02  +6.1369e-02  5.09e-04  2.44e-05  3.15e-04  5.14e-06  8.89e-05  9.74e-01  
  7  +6.0717e-02  +6.0760e-02  4.24e-05  2.20e-06  2.71e-05  2.44e-07  9.84e-06  9.07e-01  
  8  +6.0700e-02  +6.0701e-02  7.10e-07  3.69e-08  4.52e-07  4.49e-09  1.77e-07  9.84e-01  
  9  +6.0700e-02  +6.0700e-02  7.11e-09  3.69e-10  4.53e-09  4.50e-11  1.77e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 320.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:41 PM: Optimal value: 6.070e-02
(CVXPY) Sep 20 03:10:41 PM: Compilation took 3.003e-03 seconds
(CVXPY) Sep 20 03:10:41 PM: Solver (including time spent in interface) took 9.627e-04 seconds
FULL MODEL:
  Accruacy: 0.94
  Our objective: 0.88

IF 
    (x0 = 0 AND x2 = 0 AND x6 = 1)                       <-- (term's our objective: 0.28)
 OR (x0 = 0 AND x3 = 0 AND x5 = 0)                       <-- (term's our objective: 0.24)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0)                       <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1)            <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8589715957641602
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

