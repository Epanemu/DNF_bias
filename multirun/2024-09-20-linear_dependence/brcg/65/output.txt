Command:
python test_script.py -s linear_dependence -d 2 -n 5000 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5944
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 2.

Computed total variation: 0.5944
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:54 PM: Your problem has 2505 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:54 PM: Finished problem compilation (took 5.137e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2505
  constraints   = 5005
  nnz(P)        = 0
  nnz(A)        = 12505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9980e-01  +2.5019e+03  2.50e+03  9.76e-01  5.12e+01  1.00e+00  1.00e+00   ------   
  1  +6.3703e-01  +4.3711e+02  4.36e+02  2.65e-01  2.41e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5774e-01  +8.0292e+01  7.97e+01  1.27e-01  1.34e+01  5.35e-03  2.11e-01  6.01e-01  
  3  +5.0077e-01  +4.9062e+00  4.41e+00  3.87e-02  3.84e+00  1.24e-03  2.00e-01  2.80e-01  
  4  +4.9539e-01  +2.0233e+00  1.53e+00  7.62e-03  8.36e-01  2.61e-03  1.99e-02  9.87e-01  
  5  +4.3220e-01  +1.9335e+00  1.50e+00  7.95e-04  9.03e-02  2.89e-02  1.67e-03  9.36e-01  
  6  +3.8773e-01  +1.5835e+00  1.20e+00  5.85e-04  6.53e-02  1.93e-02  1.29e-03  3.08e-01  
  7  +2.9878e-01  +8.4179e-01  5.43e-01  3.06e-04  3.25e-02  1.32e-04  8.71e-04  4.98e-01  
  8  +2.2513e-01  +3.4538e-01  1.20e-01  7.17e-05  7.37e-03  7.83e-07  3.26e-04  7.24e-01  
  9  +2.0411e-01  +2.1054e-01  6.43e-03  3.85e-06  3.93e-04  1.13e-07  2.33e-05  9.47e-01  
 10  +2.0291e-01  +2.0298e-01  6.58e-05  3.94e-08  4.02e-06  1.18e-09  2.46e-07  9.90e-01  
 11  +2.0290e-01  +2.0290e-01  6.58e-07  3.94e-10  4.02e-08  1.18e-11  2.46e-09  9.90e-01  
 12  +2.0290e-01  +2.0290e-01  6.58e-09  3.94e-12  4.02e-10  1.18e-13  2.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.3214ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:54 PM: Optimal value: 2.029e-01
(CVXPY) Sep 20 03:03:54 PM: Compilation took 5.137e-03 seconds
(CVXPY) Sep 20 03:03:54 PM: Solver (including time spent in interface) took 1.511e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.2029
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:55 PM: Your problem has 2506 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:55 PM: Finished problem compilation (took 7.556e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2506
  constraints   = 5006
  nnz(P)        = 0
  nnz(A)        = 13529
  cones (total) = 1
    : Nonnegative = 1,  numel = 5006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9981e-01  +2.5020e+03  2.50e+03  9.76e-01  5.31e+01  1.00e+00  1.00e+00   ------   
  1  +6.3692e-01  +4.3756e+02  4.37e+02  2.66e-01  2.51e+01  4.49e-03  3.90e-01  7.24e-01  
  2  +5.5773e-01  +8.0305e+01  7.97e+01  1.27e-01  1.39e+01  5.37e-03  2.11e-01  6.02e-01  
  3  +5.0077e-01  +4.9089e+00  4.41e+00  3.88e-02  3.99e+00  1.24e-03  2.01e-01  2.81e-01  
  4  +4.9549e-01  +2.0470e+00  1.55e+00  7.83e-03  8.90e-01  2.56e-03  2.06e-02  9.82e-01  
  5  +4.1574e-01  +1.9207e+00  1.50e+00  6.43e-04  7.58e-02  3.56e-02  1.35e-03  9.53e-01  
  6  +3.3322e-01  +1.0804e+00  7.47e-01  4.10e-04  4.60e-02  2.34e-04  1.04e-03  3.96e-01  
  7  +2.4458e-01  +4.6877e-01  2.24e-01  1.32e-04  1.41e-02  1.46e-06  5.01e-04  6.10e-01  
  8  +2.0638e-01  +2.2530e-01  1.89e-02  1.14e-05  1.20e-03  5.42e-07  6.57e-05  9.19e-01  
  9  +2.0295e-01  +2.0321e-01  2.59e-04  1.55e-07  1.64e-05  6.99e-09  9.67e-07  9.86e-01  
 10  +2.0290e-01  +2.0290e-01  2.59e-06  1.55e-09  1.64e-07  6.99e-11  9.67e-09  9.90e-01  
 11  +2.0290e-01  +2.0290e-01  2.59e-08  1.55e-11  1.64e-09  6.99e-13  9.67e-11  9.90e-01  
 12  +2.0290e-01  +2.0290e-01  2.59e-10  1.55e-13  1.64e-11  6.99e-15  9.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.3591ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:55 PM: Optimal value: 2.029e-01
(CVXPY) Sep 20 03:03:55 PM: Compilation took 7.556e-03 seconds
(CVXPY) Sep 20 03:03:55 PM: Solver (including time spent in interface) took 7.437e-03 seconds
Iteration: 2, Objective: 0.2029
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:55 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:55 PM: Finished problem compilation (took 8.754e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 14473
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +2.5020e+03  2.50e+03  9.76e-01  5.47e+01  1.00e+00  1.00e+00   ------   
  1  +6.2675e-01  +4.5107e+02  4.50e+02  2.86e-01  2.73e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5729e-01  +8.0722e+01  8.02e+01  1.29e-01  1.44e+01  6.05e-03  2.13e-01  6.40e-01  
  3  +5.0073e-01  +4.8512e+00  4.35e+00  3.83e-02  4.05e+00  8.26e-04  2.01e-01  3.21e-01  
  4  +4.9748e-01  +3.3145e+00  2.82e+00  1.75e-02  2.01e+00  1.42e-03  5.09e-02  8.27e-01  
  5  +4.2303e-01  +2.9357e+00  2.51e+00  1.19e-03  1.45e-01  2.21e-02  2.50e-03  9.55e-01  
  6  +4.2086e-01  +2.9265e+00  2.51e+00  1.14e-03  1.39e-01  2.08e-02  2.39e-03  1.14e-01  
  7  +3.9889e-01  +2.0973e+00  1.70e+00  9.85e-04  1.17e-01  1.53e-04  2.22e-03  5.36e-01  
  8  +3.2120e-01  +1.2182e+00  8.97e-01  4.65e-04  5.37e-02  6.80e-05  1.19e-03  5.47e-01  
  9  +2.3151e-01  +3.8358e-01  1.52e-01  8.92e-05  9.84e-03  3.73e-07  3.66e-04  8.12e-01  
 10  +2.0573e-01  +2.2172e-01  1.60e-02  9.59e-06  1.05e-03  4.43e-07  5.64e-05  9.06e-01  
 11  +2.0294e-01  +2.0316e-01  2.24e-04  1.34e-07  1.46e-05  6.06e-09  8.34e-07  9.85e-01  
 12  +2.0290e-01  +2.0290e-01  2.23e-06  1.34e-09  1.46e-07  6.05e-11  8.35e-09  9.90e-01  
 13  +2.0290e-01  +2.0290e-01  2.23e-08  1.34e-11  1.46e-09  6.05e-13  8.35e-11  9.90e-01  
 14  +2.0290e-01  +2.0290e-01  2.23e-10  1.34e-13  1.46e-11  6.05e-15  8.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.9711ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:55 PM: Optimal value: 2.029e-01
(CVXPY) Sep 20 03:03:55 PM: Compilation took 8.754e-03 seconds
(CVXPY) Sep 20 03:03:55 PM: Solver (including time spent in interface) took 1.614e-02 seconds
FULL MODEL:
  Accruacy: 0.7972
  Our objective: 0.5944

IF 
    (x0 = 0) <-- (term's our objective: 0.5944)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9298832416534424
Best over terms:
  Our final objective: 0.5944
    Its accruacy: 0.7972
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5944
  Highest accruacy: 0.7972
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

