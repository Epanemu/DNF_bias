Command:
python test_script.py -s linear_dependence -d 6 -n 50000 --seed 43 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14412
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 6.

Computed total variation: 0.14532
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:08 PM: Your problem has 25013 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:09 PM: Finished problem compilation (took 9.925e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25013
  constraints   = 50013
  nnz(P)        = 0
  nnz(A)        = 225013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1431e+03  5.14e+03  3.90e-01  1.36e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4210e-01  +6.8129e+02  6.81e+02  1.56e-01  6.86e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1086e-01  +1.7217e+02  1.72e+02  1.40e-01  6.15e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0080e-01  +1.0525e+01  1.00e+01  2.91e-02  1.26e+01  3.47e-06  1.91e-01  4.75e-01  
  5  +4.9999e-01  +1.0373e+00  5.37e-01  1.62e-03  7.22e-01  2.93e-05  1.71e-01  6.35e-01  
  6  +4.9999e-01  +6.1714e-01  1.17e-01  3.51e-04  1.57e-01  1.23e-05  2.82e-02  8.47e-01  
  7  +4.9894e-01  +1.0085e+00  5.10e-01  5.77e-04  2.58e-01  6.62e-04  2.11e-03  9.70e-01  
  8  +4.8078e-01  +8.8861e-01  4.08e-01  3.09e-05  1.38e-02  1.05e-02  9.86e-05  9.55e-01  
  9  +4.8173e-01  +6.5771e-01  1.76e-01  1.18e-05  5.29e-03  1.93e-03  3.70e-05  7.98e-01  
 10  +4.6380e-01  +4.9435e-01  3.06e-02  1.53e-06  6.83e-04  2.22e-04  5.10e-06  9.04e-01  
 11  +4.5649e-01  +4.5876e-01  2.28e-03  1.09e-07  4.87e-05  1.08e-05  3.94e-07  9.41e-01  
 12  +4.5587e-01  +4.5616e-01  2.87e-04  1.25e-08  5.61e-06  1.12e-06  4.99e-08  8.96e-01  
 13  +4.5576e-01  +4.5576e-01  3.53e-06  1.46e-10  6.54e-08  1.22e-08  6.13e-10  9.89e-01  
 14  +4.5576e-01  +4.5576e-01  3.53e-08  1.46e-12  6.54e-10  1.22e-10  6.14e-12  9.90e-01  
 15  +4.5576e-01  +4.5576e-01  3.89e-10  1.58e-14  7.10e-12  6.83e-12  2.90e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 304.8712ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:09 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:09 PM: Optimal value: 4.558e-01
(CVXPY) Sep 20 03:10:09 PM: Compilation took 9.925e-02 seconds
(CVXPY) Sep 20 03:10:09 PM: Solver (including time spent in interface) took 3.379e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4558
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:09 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:09 PM: Finished problem compilation (took 1.083e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 267462
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.33e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1432e+03  5.14e+03  3.90e-01  1.42e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8091e+02  6.80e+02  1.56e-01  7.17e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1084e-01  +1.7196e+02  1.71e+02  1.40e-01  6.43e+01  2.95e-05  2.40e-01  1.13e-01  
  4  +5.0078e-01  +1.0316e+01  9.82e+00  2.85e-02  1.29e+01  3.49e-06  1.90e-01  4.86e-01  
  5  +5.0002e-01  +1.4292e+00  9.29e-01  2.81e-03  1.31e+00  3.16e-05  1.73e-01  4.83e-01  
  6  +5.0000e-01  +6.7926e-01  1.79e-01  5.35e-04  2.50e-01  6.77e-06  3.62e-02  9.10e-01  
  7  +4.9998e-01  +9.0031e-01  4.00e-01  1.16e-03  5.40e-01  3.09e-05  1.28e-02  9.17e-01  
  8  +4.9889e-01  +7.2438e-01  2.25e-01  9.54e-05  4.49e-02  6.67e-04  2.76e-04  9.79e-01  
  9  +4.9665e-01  +7.1215e-01  2.15e-01  3.25e-05  1.53e-02  1.81e-03  9.07e-05  7.04e-01  
 10  +4.9431e-01  +6.8606e-01  1.92e-01  1.51e-05  7.14e-03  2.44e-03  4.14e-05  7.55e-01  
 11  +4.9351e-01  +6.7776e-01  1.84e-01  1.22e-05  5.73e-03  2.18e-03  3.31e-05  3.91e-01  
 12  +4.9407e-01  +6.7056e-01  1.76e-01  1.08e-05  5.07e-03  1.19e-03  2.91e-05  5.34e-01  
 13  +4.9351e-01  +6.6345e-01  1.70e-01  1.04e-05  4.89e-03  7.47e-04  2.82e-05  3.25e-01  
 14  +4.9199e-01  +6.5662e-01  1.65e-01  9.11e-06  4.29e-03  6.62e-04  2.48e-05  2.55e-01  
 15  +4.9133e-01  +6.5173e-01  1.60e-01  9.01e-06  4.24e-03  5.70e-04  2.47e-05  8.38e-02  
 16  +4.8251e-01  +6.1646e-01  1.34e-01  5.63e-06  2.65e-03  4.65e-04  1.56e-05  5.31e-01  
 17  +4.7608e-01  +5.9283e-01  1.17e-01  4.56e-06  2.14e-03  3.88e-04  1.28e-05  2.18e-01  
 18  +4.7247e-01  +5.8036e-01  1.08e-01  4.28e-06  2.01e-03  2.58e-04  1.27e-05  1.76e-01  
 19  +4.7063e-01  +5.7436e-01  1.04e-01  4.07e-06  1.91e-03  1.70e-04  1.20e-05  3.17e-01  
 20  +4.6097e-01  +5.3780e-01  7.68e-02  2.88e-06  1.35e-03  1.11e-04  8.60e-06  3.35e-01  
 21  +4.5913e-01  +5.3244e-01  7.33e-02  2.65e-06  1.24e-03  7.01e-05  7.80e-06  3.94e-01  
 22  +4.4365e-01  +4.8005e-01  3.64e-02  1.19e-06  5.57e-04  1.82e-05  3.61e-06  7.35e-01  
 23  +4.2883e-01  +4.3047e-01  1.65e-03  5.18e-08  2.42e-05  1.82e-07  1.63e-07  9.68e-01  
 24  +4.2805e-01  +4.2807e-01  1.69e-05  5.31e-10  2.49e-07  1.86e-09  1.68e-09  9.90e-01  
 25  +4.2804e-01  +4.2804e-01  1.69e-07  5.31e-12  2.49e-09  1.86e-11  1.68e-11  9.90e-01  
 26  +4.2804e-01  +4.2804e-01  1.69e-09  5.31e-14  2.49e-11  1.93e-13  1.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 528.7322ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:10 PM: Optimal value: 4.280e-01
(CVXPY) Sep 20 03:10:10 PM: Compilation took 1.083e-01 seconds
(CVXPY) Sep 20 03:10:10 PM: Solver (including time spent in interface) took 5.577e-01 seconds
FULL MODEL:
  Accruacy: 0.57206
  Our objective: 0.14412000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.14412)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.605097770690918
Best over terms:
  Our final objective: 0.14412000000000003
    Its accruacy: 0.57206
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14412000000000003
  Highest accruacy: 0.57206
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

