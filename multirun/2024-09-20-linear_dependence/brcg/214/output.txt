Command:
python test_script.py -s linear_dependence -d 6 -n 100 --seed 21 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 6.

Computed total variation: 0.58
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:00 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:00 PM: Finished problem compilation (took 3.757e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 463
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9683e-01  +5.1151e+01  5.07e+01  8.65e-01  9.01e+00  1.00e+00  1.04e+00   ------   
  1  +5.8716e-01  +1.0723e+01  1.01e+01  3.38e-01  5.13e+00  3.89e-03  5.46e-01  6.29e-01  
  2  +5.2099e-01  +1.5456e+00  1.02e+00  7.09e-02  1.31e+00  1.35e-02  1.82e-01  9.90e-01  
  3  +4.9630e-01  +8.9001e-01  3.94e-01  1.99e-02  3.81e-01  9.23e-03  5.86e-02  7.61e-01  
  4  +4.7067e-01  +7.4900e-01  2.78e-01  8.35e-03  1.63e-01  8.72e-03  2.63e-02  6.11e-01  
  5  +4.4589e-01  +5.3340e-01  8.75e-02  2.70e-03  5.15e-02  4.63e-04  9.71e-03  8.32e-01  
  6  +4.3319e-01  +4.8009e-01  4.69e-02  1.09e-03  2.08e-02  2.52e-04  4.48e-03  7.09e-01  
  7  +4.2308e-01  +4.3182e-01  8.73e-03  1.85e-04  3.53e-03  3.66e-05  8.55e-04  9.90e-01  
  8  +4.2014e-01  +4.2025e-01  1.15e-04  2.35e-06  4.48e-05  4.38e-07  1.13e-05  9.87e-01  
  9  +4.2010e-01  +4.2010e-01  1.15e-06  2.34e-08  4.48e-07  4.38e-09  1.13e-07  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  1.15e-08  2.34e-10  4.48e-09  4.38e-11  1.13e-09  9.90e-01  
 11  +4.2010e-01  +4.2010e-01  1.15e-10  2.34e-12  4.48e-11  4.38e-13  1.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 373.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:00 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 03:09:00 PM: Compilation took 3.757e-03 seconds
(CVXPY) Sep 20 03:09:00 PM: Solver (including time spent in interface) took 1.038e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:00 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:00 PM: Finished problem compilation (took 2.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 554
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9140e-01  +5.1890e+01  5.14e+01  8.72e-01  9.09e+00  1.00e+00  1.07e+00   ------   
  1  +5.5898e-01  +1.0896e+01  1.03e+01  3.49e-01  5.09e+00  3.89e-03  5.62e-01  6.26e-01  
  2  +4.9448e-01  +1.9347e+00  1.44e+00  8.52e-02  1.59e+00  1.51e-02  2.09e-01  9.11e-01  
  3  +4.4407e-01  +9.7975e-01  5.36e-01  2.25e-02  4.40e-01  8.18e-03  6.31e-02  7.43e-01  
  4  +4.1577e-01  +7.9426e-01  3.78e-01  1.19e-02  2.32e-01  6.34e-03  3.63e-02  4.99e-01  
  5  +3.8137e-01  +4.7153e-01  9.02e-02  2.87e-03  5.47e-02  8.84e-04  1.01e-02  8.26e-01  
  6  +3.7204e-01  +4.2033e-01  4.83e-02  1.27e-03  2.43e-02  5.15e-04  4.69e-03  6.17e-01  
  7  +3.6645e-01  +3.8804e-01  2.16e-02  6.03e-04  1.15e-02  7.53e-05  2.26e-03  9.90e-01  
  8  +3.6055e-01  +3.6164e-01  1.09e-03  2.86e-05  5.46e-04  3.08e-06  1.11e-04  9.60e-01  
  9  +3.6031e-01  +3.6033e-01  2.08e-05  5.49e-07  1.05e-05  5.15e-08  2.14e-06  9.81e-01  
 10  +3.6030e-01  +3.6030e-01  2.12e-07  5.60e-09  1.07e-07  5.25e-10  2.19e-08  9.90e-01  
 11  +3.6030e-01  +3.6030e-01  2.12e-09  5.60e-11  1.07e-09  5.25e-12  2.19e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 417.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:00 PM: Optimal value: 3.603e-01
(CVXPY) Sep 20 03:09:00 PM: Compilation took 2.994e-03 seconds
(CVXPY) Sep 20 03:09:00 PM: Solver (including time spent in interface) took 9.935e-04 seconds
Iteration: 2, Objective: 0.3603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:00 PM: Your problem has 83 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:00 PM: Finished problem compilation (took 2.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 133
  nnz(P)        = 0
  nnz(A)        = 621
  cones (total) = 1
    : Nonnegative = 1,  numel = 133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8566e-01  +5.2183e+01  5.17e+01  8.77e-01  8.96e+00  1.00e+00  1.07e+00   ------   
  1  +5.2371e-01  +1.1026e+01  1.05e+01  3.57e-01  4.97e+00  3.91e-03  5.67e-01  6.21e-01  
  2  +4.5043e-01  +1.9053e+00  1.45e+00  7.33e-02  1.36e+00  1.72e-02  1.82e-01  9.55e-01  
  3  +3.7468e-01  +9.1887e-01  5.44e-01  1.99e-02  3.75e-01  7.95e-03  5.59e-02  7.30e-01  
  4  +3.3021e-01  +5.3410e-01  2.04e-01  6.78e-03  1.26e-01  2.43e-03  2.22e-02  7.07e-01  
  5  +3.1425e-01  +4.4207e-01  1.28e-01  3.75e-03  7.20e-02  1.50e-03  1.31e-02  4.99e-01  
  6  +2.9812e-01  +3.5830e-01  6.02e-02  1.49e-03  2.86e-02  7.28e-04  5.70e-03  6.16e-01  
  7  +2.8603e-01  +3.0479e-01  1.88e-02  4.34e-04  8.37e-03  1.91e-04  1.79e-03  7.37e-01  
  8  +2.8075e-01  +2.8118e-01  4.29e-04  9.81e-06  1.89e-04  2.23e-06  4.20e-05  9.90e-01  
  9  +2.8060e-01  +2.8061e-01  7.91e-06  1.82e-07  3.49e-06  3.58e-08  7.85e-07  9.81e-01  
 10  +2.8060e-01  +2.8060e-01  7.90e-08  1.82e-09  3.49e-08  3.58e-10  7.85e-09  9.90e-01  
 11  +2.8060e-01  +2.8060e-01  7.91e-10  1.82e-11  3.49e-10  3.58e-12  7.86e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 464.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:00 PM: Optimal value: 2.806e-01
(CVXPY) Sep 20 03:09:00 PM: Compilation took 2.508e-03 seconds
(CVXPY) Sep 20 03:09:00 PM: Solver (including time spent in interface) took 1.004e-03 seconds
Iteration: 3, Objective: 0.2806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:00 PM: Your problem has 93 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:00 PM: Finished problem compilation (took 3.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 681
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8306e-01  +5.2598e+01  5.21e+01  8.81e-01  8.84e+00  1.00e+00  1.08e+00   ------   
  1  +4.9958e-01  +1.1163e+01  1.07e+01  3.62e-01  4.86e+00  3.93e-03  5.73e-01  6.17e-01  
  2  +4.1692e-01  +2.0409e+00  1.62e+00  7.15e-02  1.30e+00  1.83e-02  1.78e-01  9.44e-01  
  3  +3.3768e-01  +8.9281e-01  5.55e-01  1.91e-02  3.50e-01  7.09e-03  5.50e-02  7.27e-01  
  4  +2.8407e-01  +5.0488e-01  2.21e-01  6.70e-03  1.21e-01  1.83e-03  2.31e-02  7.65e-01  
  5  +2.6509e-01  +4.0636e-01  1.41e-01  3.91e-03  7.34e-02  1.19e-03  1.42e-02  4.40e-01  
  6  +2.4463e-01  +3.0129e-01  5.67e-02  1.51e-03  2.86e-02  4.06e-04  5.98e-03  6.58e-01  
  7  +2.3163e-01  +2.3476e-01  3.13e-03  8.23e-05  1.56e-03  1.55e-05  3.51e-04  9.49e-01  
  8  +2.3088e-01  +2.3116e-01  2.76e-04  7.33e-06  1.38e-04  1.11e-06  3.26e-05  9.11e-01  
  9  +2.3080e-01  +2.3081e-01  4.77e-06  1.27e-07  2.37e-06  1.55e-08  5.85e-07  9.86e-01  
 10  +2.3080e-01  +2.3080e-01  4.77e-08  1.27e-09  2.37e-08  1.55e-10  5.86e-09  9.90e-01  
 11  +2.3080e-01  +2.3080e-01  4.77e-10  1.27e-11  2.37e-10  1.55e-12  5.86e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 551.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:00 PM: Optimal value: 2.308e-01
(CVXPY) Sep 20 03:09:00 PM: Compilation took 3.002e-03 seconds
(CVXPY) Sep 20 03:09:00 PM: Solver (including time spent in interface) took 9.980e-04 seconds
Iteration: 4, Objective: 0.2308
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:01 PM: Your problem has 103 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:01 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 103
  constraints   = 153
  nnz(P)        = 0
  nnz(A)        = 743
  cones (total) = 1
    : Nonnegative = 1,  numel = 153

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8256e-01  +5.2672e+01  5.22e+01  8.85e-01  8.71e+00  1.00e+00  1.09e+00   ------   
  1  +4.9355e-01  +1.1174e+01  1.07e+01  3.69e-01  4.71e+00  3.94e-03  5.75e-01  6.17e-01  
  2  +4.0718e-01  +2.1814e+00  1.77e+00  7.47e-02  1.33e+00  1.84e-02  1.86e-01  9.20e-01  
  3  +3.2903e-01  +8.8483e-01  5.56e-01  1.88e-02  3.43e-01  6.50e-03  5.33e-02  7.64e-01  
  4  +2.7667e-01  +4.8754e-01  2.11e-01  6.37e-03  1.16e-01  2.13e-03  2.08e-02  7.16e-01  
  5  +2.6010e-01  +4.0979e-01  1.50e-01  4.16e-03  7.93e-02  1.45e-03  1.39e-02  4.33e-01  
  6  +2.3954e-01  +3.1094e-01  7.14e-02  1.86e-03  3.63e-02  6.08e-04  6.69e-03  5.97e-01  
  7  +2.2299e-01  +2.2998e-01  6.99e-03  1.80e-04  3.49e-03  4.15e-05  7.02e-04  9.14e-01  
  8  +2.2110e-01  +2.2167e-01  5.68e-04  1.48e-05  2.84e-04  2.52e-06  6.05e-05  9.16e-01  
  9  +2.2091e-01  +2.2093e-01  2.38e-05  6.27e-07  1.17e-05  7.27e-08  2.83e-06  9.71e-01  
 10  +2.2090e-01  +2.2090e-01  2.40e-07  6.31e-09  1.18e-07  7.31e-10  2.87e-08  9.90e-01  
 11  +2.2090e-01  +2.2090e-01  2.41e-09  6.32e-11  1.18e-09  7.32e-12  2.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 565.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:01 PM: Optimal value: 2.209e-01
(CVXPY) Sep 20 03:09:01 PM: Compilation took 2.999e-03 seconds
(CVXPY) Sep 20 03:09:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.2209
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:01 PM: Your problem has 113 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:01 PM: Finished problem compilation (took 3.141e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 113
  constraints   = 163
  nnz(P)        = 0
  nnz(A)        = 794
  cones (total) = 1
    : Nonnegative = 1,  numel = 163

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8006e-01  +5.2773e+01  5.23e+01  8.89e-01  8.56e+00  1.00e+00  1.09e+00   ------   
  1  +4.7243e-01  +1.1477e+01  1.10e+01  3.80e-01  4.70e+00  3.96e-03  5.89e-01  6.02e-01  
  2  +3.8235e-01  +2.2520e+00  1.87e+00  8.19e-02  1.39e+00  1.98e-02  2.07e-01  9.13e-01  
  3  +3.2008e-01  +9.5197e-01  6.32e-01  2.33e-02  4.06e-01  7.57e-03  6.74e-02  7.20e-01  
  4  +2.7990e-01  +5.8315e-01  3.03e-01  9.95e-03  1.73e-01  3.31e-03  3.20e-02  6.21e-01  
  5  +2.5643e-01  +4.2800e-01  1.72e-01  5.03e-03  9.02e-02  1.88e-03  1.72e-02  5.47e-01  
  6  +2.4096e-01  +3.3410e-01  9.31e-02  2.59e-03  4.77e-02  8.58e-04  9.22e-03  6.15e-01  
  7  +2.2306e-01  +2.3099e-01  7.92e-03  2.15e-04  3.97e-03  3.87e-05  8.23e-04  9.51e-01  
  8  +2.2156e-01  +2.2362e-01  2.06e-03  5.70e-05  1.05e-03  9.25e-06  2.24e-04  7.50e-01  
  9  +2.2128e-01  +2.2242e-01  1.14e-03  3.14e-05  5.77e-04  4.75e-06  1.33e-04  7.30e-01  
 10  +2.2093e-01  +2.2102e-01  8.22e-05  2.23e-06  4.10e-05  2.57e-07  1.02e-05  9.34e-01  
 11  +2.2090e-01  +2.2090e-01  1.04e-06  2.83e-08  5.17e-07  3.13e-09  1.33e-07  9.88e-01  
 12  +2.2090e-01  +2.2090e-01  1.04e-08  2.83e-10  5.17e-09  3.13e-11  1.33e-09  9.90e-01  
 13  +2.2090e-01  +2.2090e-01  1.04e-10  2.83e-12  5.17e-11  3.14e-13  1.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 635.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:01 PM: Optimal value: 2.209e-01
(CVXPY) Sep 20 03:09:01 PM: Compilation took 3.141e-03 seconds
(CVXPY) Sep 20 03:09:01 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Iteration: 6, Objective: 0.2209
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:01 PM: Your problem has 121 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:01 PM: Finished problem compilation (took 3.183e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 121
  constraints   = 171
  nnz(P)        = 0
  nnz(A)        = 824
  cones (total) = 1
    : Nonnegative = 1,  numel = 171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7879e-01  +5.2880e+01  5.24e+01  8.91e-01  8.42e+00  1.00e+00  1.09e+00   ------   
  1  +4.5765e-01  +1.1607e+01  1.11e+01  3.83e-01  4.63e+00  3.99e-03  5.94e-01  5.96e-01  
  2  +3.6378e-01  +2.2030e+00  1.84e+00  7.79e-02  1.30e+00  2.08e-02  1.99e-01  9.34e-01  
  3  +3.0108e-01  +8.4315e-01  5.42e-01  1.94e-02  3.31e-01  6.86e-03  5.73e-02  7.81e-01  
  4  +2.6152e-01  +5.1862e-01  2.57e-01  8.46e-03  1.42e-01  2.59e-03  2.82e-02  6.73e-01  
  5  +2.3800e-01  +3.6493e-01  1.27e-01  3.70e-03  6.34e-02  1.31e-03  1.32e-02  5.78e-01  
  6  +2.2449e-01  +2.9073e-01  6.62e-02  1.84e-03  3.20e-02  6.41e-04  6.78e-03  5.34e-01  
  7  +2.1204e-01  +2.1551e-01  3.47e-03  9.58e-05  1.66e-03  1.88e-05  3.73e-04  9.63e-01  
  8  +2.1142e-01  +2.1262e-01  1.20e-03  3.39e-05  5.87e-04  4.47e-06  1.45e-04  9.38e-01  
  9  +2.1107e-01  +2.1125e-01  1.81e-04  5.03e-06  8.72e-05  5.96e-07  2.33e-05  8.58e-01  
 10  +2.1100e-01  +2.1101e-01  6.53e-06  1.80e-07  3.11e-06  2.08e-08  8.70e-07  9.90e-01  
 11  +2.1100e-01  +2.1100e-01  6.55e-08  1.80e-09  3.11e-08  2.09e-10  8.73e-09  9.90e-01  
 12  +2.1100e-01  +2.1100e-01  6.55e-10  1.80e-11  3.11e-10  2.09e-12  8.74e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 605.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:01 PM: Optimal value: 2.110e-01
(CVXPY) Sep 20 03:09:01 PM: Compilation took 3.183e-03 seconds
(CVXPY) Sep 20 03:09:01 PM: Solver (including time spent in interface) took 1.007e-03 seconds
Iteration: 7, Objective: 0.2110
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:01 PM: Your problem has 122 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:01 PM: Finished problem compilation (took 3.582e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 122
  constraints   = 172
  nnz(P)        = 0
  nnz(A)        = 836
  cones (total) = 1
    : Nonnegative = 1,  numel = 172

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7841e-01  +5.2872e+01  5.24e+01  8.92e-01  8.44e+00  1.00e+00  1.09e+00   ------   
  1  +4.5554e-01  +1.1636e+01  1.12e+01  3.85e-01  4.65e+00  3.99e-03  5.95e-01  5.95e-01  
  2  +3.6120e-01  +2.2320e+00  1.87e+00  7.99e-02  1.33e+00  2.09e-02  2.05e-01  9.27e-01  
  3  +2.9905e-01  +8.6131e-01  5.62e-01  2.03e-02  3.45e-01  7.09e-03  6.02e-02  7.75e-01  
  4  +2.6309e-01  +5.5244e-01  2.89e-01  9.74e-03  1.63e-01  3.04e-03  3.25e-02  6.03e-01  
  5  +2.3992e-01  +3.9194e-01  1.52e-01  4.59e-03  7.78e-02  1.62e-03  1.65e-02  5.38e-01  
  6  +2.2284e-01  +2.8565e-01  6.28e-02  1.80e-03  3.07e-02  6.39e-04  6.83e-03  6.08e-01  
  7  +2.1183e-01  +2.1487e-01  3.04e-03  8.71e-05  1.48e-03  1.64e-05  3.49e-04  9.65e-01  
  8  +2.1126e-01  +2.1205e-01  7.97e-04  2.38e-05  3.98e-04  2.67e-06  1.05e-04  9.40e-01  
  9  +2.1105e-01  +2.1118e-01  1.33e-04  3.96e-06  6.62e-05  4.17e-07  1.84e-05  8.57e-01  
 10  +2.1100e-01  +2.1100e-01  2.23e-06  6.65e-08  1.11e-06  6.42e-09  3.16e-07  9.85e-01  
 11  +2.1100e-01  +2.1100e-01  2.23e-08  6.65e-10  1.11e-08  6.42e-11  3.16e-09  9.90e-01  
 12  +2.1100e-01  +2.1100e-01  2.23e-10  6.65e-12  1.11e-10  6.43e-13  3.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 684.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:01 PM: Optimal value: 2.110e-01
(CVXPY) Sep 20 03:09:01 PM: Compilation took 3.582e-03 seconds
(CVXPY) Sep 20 03:09:01 PM: Solver (including time spent in interface) took 1.008e-03 seconds
FULL MODEL:
  Accruacy: 0.77
  Our objective: 0.54

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)                       <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.14)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 1)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.06)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.170475959777832
Best over terms:
  Our final objective: 0.14000000000000004
    Its accruacy: 0.57
    Its hamming distance: 2
  Shortest hamming distance: 1
    Its our objective: 0.07999999999999996
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

