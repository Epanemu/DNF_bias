Command:
python test_script.py -s linear_dependence -d 5 -n 100 --seed 21 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.32
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.48
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:25 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:25 PM: Finished problem compilation (took 5.252e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9634e-01  +5.1211e+01  5.07e+01  8.62e-01  8.47e+00  1.00e+00  1.04e+00   ------   
  1  +5.9168e-01  +1.0445e+01  9.85e+00  3.17e-01  4.66e+00  3.97e-03  5.21e-01  6.50e-01  
  2  +5.2015e-01  +1.4570e+00  9.37e-01  5.96e-02  1.06e+00  1.18e-02  1.51e-01  9.90e-01  
  3  +5.0615e-01  +1.3843e+00  8.78e-01  3.69e-02  6.74e-01  1.49e-02  9.54e-02  4.22e-01  
  4  +4.6191e-01  +1.0430e+00  5.81e-01  1.39e-02  2.58e-01  1.42e-02  3.97e-02  6.36e-01  
  5  +4.1901e-01  +6.0364e-01  1.85e-01  5.16e-03  9.23e-02  1.21e-03  1.86e-02  7.30e-01  
  6  +3.8627e-01  +4.4810e-01  6.18e-02  1.36e-03  2.41e-02  3.46e-04  6.15e-03  7.63e-01  
  7  +3.7101e-01  +3.7415e-01  3.14e-03  6.73e-05  1.19e-03  1.13e-05  3.38e-04  9.69e-01  
  8  +3.7011e-01  +3.7014e-01  3.15e-05  6.75e-07  1.19e-05  1.13e-07  3.41e-06  9.90e-01  
  9  +3.7010e-01  +3.7010e-01  3.15e-07  6.75e-09  1.19e-07  1.13e-09  3.41e-08  9.90e-01  
 10  +3.7010e-01  +3.7010e-01  3.15e-09  6.75e-11  1.19e-09  1.13e-11  3.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 384.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:25 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:25 PM: Optimal value: 3.701e-01
(CVXPY) Sep 20 03:07:25 PM: Compilation took 5.252e-03 seconds
(CVXPY) Sep 20 03:07:25 PM: Solver (including time spent in interface) took 1.036e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:25 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:25 PM: Finished problem compilation (took 4.791e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 540
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9105e-01  +5.1476e+01  5.10e+01  8.70e-01  8.92e+00  1.00e+00  1.06e+00   ------   
  1  +5.6985e-01  +1.0635e+01  1.01e+01  3.35e-01  4.85e+00  3.94e-03  5.44e-01  6.39e-01  
  2  +5.0158e-01  +1.7210e+00  1.22e+00  7.03e-02  1.29e+00  1.38e-02  1.76e-01  9.45e-01  
  3  +4.4089e-01  +1.3796e+00  9.39e-01  2.90e-02  5.50e-01  1.51e-02  7.99e-02  6.66e-01  
  4  +3.7544e-01  +7.6389e-01  3.88e-01  9.02e-03  1.70e-01  7.41e-03  2.84e-02  6.83e-01  
  5  +3.4138e-01  +5.5773e-01  2.16e-01  4.00e-03  7.66e-02  4.71e-03  1.30e-02  6.66e-01  
  6  +3.1803e-01  +4.1723e-01  9.92e-02  2.18e-03  4.09e-02  3.64e-05  7.90e-03  9.47e-01  
  7  +2.8606e-01  +3.0222e-01  1.62e-02  3.10e-04  5.81e-03  1.23e-05  1.21e-03  8.59e-01  
  8  +2.8044e-01  +2.8078e-01  3.38e-04  6.53e-06  1.22e-04  3.49e-07  2.67e-05  9.80e-01  
  9  +2.8031e-01  +2.8032e-01  1.65e-05  3.21e-07  5.96e-06  1.82e-08  1.33e-06  9.52e-01  
 10  +2.8030e-01  +2.8030e-01  1.67e-07  3.26e-09  6.05e-08  1.87e-10  1.35e-08  9.90e-01  
 11  +2.8030e-01  +2.8030e-01  1.67e-09  3.26e-11  6.05e-10  1.87e-12  1.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3349ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:25 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:25 PM: Optimal value: 2.803e-01
(CVXPY) Sep 20 03:07:25 PM: Compilation took 4.791e-03 seconds
(CVXPY) Sep 20 03:07:25 PM: Solver (including time spent in interface) took 1.792e-03 seconds
Iteration: 2, Objective: 0.2803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:25 PM: Your problem has 72 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:25 PM: Finished problem compilation (took 3.320e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 122
  nnz(P)        = 0
  nnz(A)        = 558
  cones (total) = 1
    : Nonnegative = 1,  numel = 122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9018e-01  +5.1609e+01  5.11e+01  8.70e-01  9.01e+00  1.00e+00  1.06e+00   ------   
  1  +5.6656e-01  +1.0713e+01  1.01e+01  3.39e-01  4.94e+00  3.92e-03  5.48e-01  6.35e-01  
  2  +5.0073e-01  +1.8326e+00  1.33e+00  7.69e-02  1.43e+00  1.40e-02  1.90e-01  9.21e-01  
  3  +4.4029e-01  +1.3728e+00  9.33e-01  3.02e-02  5.81e-01  1.39e-02  8.29e-02  6.92e-01  
  4  +3.7653e-01  +8.5195e-01  4.75e-01  1.08e-02  2.08e-01  9.13e-03  3.27e-02  6.53e-01  
  5  +3.4571e-01  +6.7252e-01  3.27e-01  6.41e-03  1.26e-01  6.48e-03  2.02e-02  4.50e-01  
  6  +2.9993e-01  +3.8601e-01  8.61e-02  1.82e-03  3.52e-02  5.22e-05  6.74e-03  9.50e-01  
  7  +2.7281e-01  +2.7884e-01  6.02e-03  1.24e-04  2.37e-03  5.97e-06  5.23e-04  9.35e-01  
  8  +2.7034e-01  +2.7045e-01  1.06e-04  2.20e-06  4.17e-05  1.18e-07  9.76e-06  9.83e-01  
  9  +2.7030e-01  +2.7030e-01  1.20e-06  2.50e-08  4.71e-07  1.17e-09  1.12e-07  9.89e-01  
 10  +2.7030e-01  +2.7030e-01  1.20e-08  2.50e-10  4.71e-09  1.17e-11  1.12e-09  9.90e-01  
 11  +2.7030e-01  +2.7030e-01  1.20e-10  2.50e-12  4.72e-11  1.17e-13  1.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 401.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:25 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:25 PM: Optimal value: 2.703e-01
(CVXPY) Sep 20 03:07:25 PM: Compilation took 3.320e-03 seconds
(CVXPY) Sep 20 03:07:25 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Iteration: 3, Objective: 0.2703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:26 PM: Your problem has 82 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:26 PM: Finished problem compilation (took 6.469e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 82
  constraints   = 132
  nnz(P)        = 0
  nnz(A)        = 617
  cones (total) = 1
    : Nonnegative = 1,  numel = 132

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8784e-01  +5.1660e+01  5.12e+01  8.75e-01  8.85e+00  1.00e+00  1.07e+00   ------   
  1  +5.4890e-01  +1.0956e+01  1.04e+01  3.56e-01  4.89e+00  3.91e-03  5.68e-01  6.20e-01  
  2  +4.8360e-01  +1.9339e+00  1.45e+00  8.17e-02  1.46e+00  1.56e-02  2.05e-01  9.19e-01  
  3  +4.1313e-01  +1.2197e+00  8.07e-01  2.75e-02  5.09e-01  1.28e-02  7.75e-02  6.95e-01  
  4  +3.4177e-01  +7.5582e-01  4.14e-01  9.68e-03  1.82e-01  7.50e-03  3.04e-02  6.96e-01  
  5  +2.8710e-01  +3.9304e-01  1.06e-01  2.55e-03  4.72e-02  6.06e-04  9.77e-03  8.49e-01  
  6  +2.6325e-01  +2.7245e-01  9.21e-03  2.23e-04  4.05e-03  2.88e-05  9.69e-04  9.11e-01  
  7  +2.6109e-01  +2.6307e-01  1.98e-03  4.84e-05  8.78e-04  6.49e-06  2.16e-04  8.03e-01  
  8  +2.6070e-01  +2.6149e-01  7.90e-04  1.81e-05  3.33e-04  3.40e-06  8.12e-05  9.08e-01  
  9  +2.6047e-01  +2.6064e-01  1.75e-04  4.05e-06  7.42e-05  6.88e-07  1.86e-05  9.90e-01  
 10  +2.6040e-01  +2.6041e-01  5.90e-06  1.35e-07  2.46e-06  1.94e-08  6.38e-07  9.68e-01  
 11  +2.6040e-01  +2.6040e-01  5.92e-08  1.35e-09  2.47e-08  1.94e-10  6.42e-09  9.90e-01  
 12  +2.6040e-01  +2.6040e-01  5.93e-10  1.35e-11  2.47e-10  1.94e-12  6.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 540.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:26 PM: Optimal value: 2.604e-01
(CVXPY) Sep 20 03:07:26 PM: Compilation took 6.469e-03 seconds
(CVXPY) Sep 20 03:07:26 PM: Solver (including time spent in interface) took 2.999e-03 seconds
Iteration: 4, Objective: 0.2604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:26 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:26 PM: Finished problem compilation (took 3.240e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 670
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8733e-01  +5.1630e+01  5.11e+01  8.79e-01  8.80e+00  1.00e+00  1.07e+00   ------   
  1  +5.4523e-01  +1.0981e+01  1.04e+01  3.64e-01  4.82e+00  3.90e-03  5.71e-01  6.18e-01  
  2  +4.7951e-01  +2.0475e+00  1.57e+00  8.72e-02  1.53e+00  1.58e-02  2.20e-01  8.91e-01  
  3  +4.0803e-01  +1.2751e+00  8.67e-01  2.97e-02  5.40e-01  1.29e-02  8.50e-02  6.89e-01  
  4  +3.3925e-01  +8.0410e-01  4.65e-01  1.16e-02  2.13e-01  7.87e-03  3.64e-02  6.15e-01  
  5  +2.8661e-01  +4.0065e-01  1.14e-01  2.93e-03  5.27e-02  1.14e-03  1.10e-02  7.78e-01  
  6  +2.6538e-01  +2.8587e-01  2.05e-02  5.28e-04  9.43e-03  1.68e-04  2.25e-03  8.31e-01  
  7  +2.6087e-01  +2.6234e-01  1.47e-03  3.82e-05  6.80e-04  1.08e-05  1.71e-04  9.27e-01  
  8  +2.6079e-01  +2.6200e-01  1.21e-03  2.95e-05  5.34e-04  8.23e-06  1.33e-04  4.43e-01  
  9  +2.6055e-01  +2.6099e-01  4.48e-04  1.07e-05  1.94e-04  2.97e-06  4.91e-05  6.44e-01  
 10  +2.6042e-01  +2.6046e-01  4.46e-05  1.07e-06  1.93e-05  2.43e-07  5.04e-06  9.24e-01  
 11  +2.6040e-01  +2.6040e-01  5.50e-07  1.32e-08  2.38e-07  2.78e-09  6.29e-08  9.88e-01  
 12  +2.6040e-01  +2.6040e-01  5.51e-09  1.32e-10  2.38e-09  2.78e-11  6.29e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 545.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:26 PM: Optimal value: 2.604e-01
(CVXPY) Sep 20 03:07:26 PM: Compilation took 3.240e-03 seconds
(CVXPY) Sep 20 03:07:26 PM: Solver (including time spent in interface) took 6.368e-04 seconds
FULL MODEL:
  Accruacy: 0.74
  Our objective: 0.4799999999999999

IF 
    (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.32)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.14)
 OR (x0 = 1 AND x1 = 0 AND x4 = 0)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.6000847816467285
Best over terms:
  Our final objective: 0.32
    Its accruacy: 0.66
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.32
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

