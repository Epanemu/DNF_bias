Command:
python test_script.py -s linear_dependence -d 3 -n 5000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30479999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.30479999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:05 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:05 PM: Finished problem compilation (took 7.621e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5009e+03  2.50e+03  9.77e-01  5.55e+01  1.00e+00  1.00e+00   ------   
  1  +6.2002e-01  +4.6378e+02  4.63e+02  3.04e-01  2.88e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5553e-01  +7.9354e+01  7.88e+01  1.33e-01  1.50e+01  6.69e-03  2.20e-01  6.65e-01  
  3  +5.0740e-01  +1.1807e+01  1.13e+01  8.07e-02  8.71e+00  9.71e-06  2.17e-01  7.79e-02  
  4  +4.9994e-01  +1.1314e+00  6.31e-01  5.97e-03  6.62e-01  6.17e-06  1.38e-01  7.44e-01  
  5  +4.9877e-01  +9.1263e-01  4.14e-01  3.45e-03  3.86e-01  1.71e-05  2.12e-02  9.03e-01  
  6  +4.5965e-01  +7.5637e-01  2.97e-01  1.94e-04  2.20e-02  4.21e-04  5.65e-04  9.77e-01  
  7  +4.2357e-01  +5.3676e-01  1.13e-01  5.72e-05  6.43e-03  1.09e-04  1.98e-04  6.96e-01  
  8  +3.9631e-01  +4.0745e-01  1.11e-02  4.98e-06  5.59e-04  1.22e-06  2.23e-05  9.21e-01  
  9  +3.9316e-01  +3.9336e-01  2.02e-04  8.98e-08  1.01e-05  2.09e-08  4.12e-07  9.82e-01  
 10  +3.9310e-01  +3.9310e-01  2.02e-06  8.98e-10  1.01e-07  2.09e-10  4.12e-09  9.90e-01  
 11  +3.9310e-01  +3.9310e-01  2.02e-08  8.98e-12  1.01e-09  2.09e-12  4.13e-11  9.90e-01  
 12  +3.9310e-01  +3.9310e-01  2.02e-10  8.99e-14  1.01e-11  2.10e-14  4.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.7ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:05 PM: Optimal value: 3.931e-01
(CVXPY) Sep 20 03:05:05 PM: Compilation took 7.621e-03 seconds
(CVXPY) Sep 20 03:05:05 PM: Solver (including time spent in interface) took 1.462e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3931
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:05 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:05 PM: Finished problem compilation (took 8.941e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 17837
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +2.5014e+03  2.50e+03  9.77e-01  5.92e+01  1.00e+00  1.00e+00   ------   
  1  +6.1950e-01  +4.6453e+02  4.64e+02  3.05e-01  3.08e+01  4.25e-03  4.37e-01  6.93e-01  
  2  +5.5505e-01  +7.8856e+01  7.83e+01  1.32e-01  1.59e+01  6.76e-03  2.19e-01  6.70e-01  
  3  +5.0710e-01  +1.1494e+01  1.10e+01  7.92e-02  9.11e+00  9.61e-06  2.16e-01  8.49e-02  
  4  +5.0070e-01  +2.2743e+00  1.77e+00  1.67e-02  1.94e+00  6.80e-06  1.76e-01  3.52e-01  
  5  +5.0010e-01  +1.0921e+00  5.92e-01  5.54e-03  6.57e-01  3.66e-06  6.59e-02  6.85e-01  
  6  +4.9534e-01  +1.8436e+00  1.35e+00  2.71e-03  3.32e-01  5.74e-05  7.20e-03  9.90e-01  
  7  +4.7872e-01  +1.4667e+00  9.88e-01  5.96e-04  7.32e-02  1.61e-04  1.53e-03  7.89e-01  
  8  +4.7034e-01  +1.2934e+00  8.23e-01  3.92e-04  4.81e-02  1.51e-04  1.00e-03  4.24e-01  
  9  +4.7877e-01  +1.1459e+00  6.67e-01  3.63e-04  4.46e-02  7.75e-05  9.21e-04  4.27e-01  
 10  +4.6479e-01  +1.0176e+00  5.53e-01  2.43e-04  2.98e-02  7.28e-05  6.30e-04  3.76e-01  
 11  +4.3463e-01  +7.0849e-01  2.74e-01  1.08e-04  1.31e-02  2.30e-05  2.99e-04  9.90e-01  
 12  +3.6801e-01  +4.1292e-01  4.49e-02  1.63e-05  1.95e-03  5.49e-07  5.42e-05  9.21e-01  
 13  +3.4828e-01  +3.4959e-01  1.30e-03  4.75e-07  5.67e-05  6.70e-08  1.76e-06  9.79e-01  
 14  +3.4771e-01  +3.4772e-01  1.31e-05  4.75e-09  5.67e-07  6.69e-10  1.77e-08  9.90e-01  
 15  +3.4770e-01  +3.4770e-01  1.31e-07  4.75e-11  5.67e-09  6.70e-12  1.77e-10  9.90e-01  
 16  +3.4770e-01  +3.4770e-01  1.31e-09  4.75e-13  5.67e-11  6.71e-14  1.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.6299ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:05 PM: Optimal value: 3.477e-01
(CVXPY) Sep 20 03:05:05 PM: Compilation took 8.941e-03 seconds
(CVXPY) Sep 20 03:05:05 PM: Solver (including time spent in interface) took 2.054e-02 seconds
FULL MODEL:
  Accruacy: 0.6524
  Our objective: 0.30479999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3048)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.0281445980072021
Best over terms:
  Our final objective: 0.30479999999999996
    Its accruacy: 0.6524
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30479999999999996
  Highest accruacy: 0.6524
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

