Command:
python test_script.py -s linear_dependence -d 4 -n 50000 --seed 56 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30504
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.30504
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:43 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:43 PM: Finished problem compilation (took 8.953e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  1.94e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5116e-01  +7.5384e+02  7.53e+02  1.44e-01  5.61e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1141e-01  +1.6765e+02  1.67e+02  1.31e-01  5.09e+01  1.84e-05  2.26e-01  5.85e-02  
  4  +5.0015e-01  +2.6096e+00  2.11e+00  6.31e-03  2.43e+00  1.79e-06  1.54e-01  9.90e-01  
  5  +4.9999e-01  +8.1804e-01  3.18e-01  9.49e-04  3.69e-01  3.79e-06  3.51e-02  9.90e-01  
  6  +4.9774e-01  +1.2129e+00  7.15e-01  3.94e-04  1.56e-01  2.54e-04  1.12e-03  9.79e-01  
  7  +4.8119e-01  +1.0649e+00  5.84e-01  4.48e-05  1.78e-02  1.81e-03  1.21e-04  8.92e-01  
  8  +4.4751e-01  +6.9248e-01  2.45e-01  1.17e-05  4.60e-03  9.45e-04  3.42e-05  7.93e-01  
  9  +4.0868e-01  +4.5667e-01  4.80e-02  2.48e-06  9.65e-04  6.99e-06  9.08e-06  9.79e-01  
 10  +3.9840e-01  +4.0011e-01  1.71e-03  8.80e-08  3.43e-05  1.60e-07  3.43e-07  9.66e-01  
 11  +3.9791e-01  +3.9801e-01  9.93e-05  4.45e-09  1.73e-06  2.46e-09  2.00e-08  9.88e-01  
 12  +3.9788e-01  +3.9788e-01  1.01e-06  4.51e-11  1.75e-08  2.51e-11  2.03e-10  9.90e-01  
 13  +3.9788e-01  +3.9788e-01  1.01e-08  4.51e-13  1.75e-10  2.51e-13  2.03e-12  9.90e-01  
 14  +3.9788e-01  +3.9788e-01  1.04e-10  4.65e-15  1.80e-12  5.87e-15  4.52e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 219.0484ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:43 PM: Optimal value: 3.979e-01
(CVXPY) Sep 20 03:06:43 PM: Compilation took 8.953e-02 seconds
(CVXPY) Sep 20 03:06:43 PM: Solver (including time spent in interface) took 2.446e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3979
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:43 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:43 PM: Finished problem compilation (took 7.929e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 222979
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5003e+04  2.50e+04  9.93e-01  2.08e+02  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +4.8431e+03  4.84e+03  3.42e-01  1.16e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5109e-01  +7.5305e+02  7.52e+02  1.44e-01  6.02e+01  8.22e-03  2.28e-01  7.24e-01  
  3  +5.1137e-01  +1.6724e+02  1.67e+02  1.31e-01  5.45e+01  1.84e-05  2.26e-01  5.90e-02  
  4  +5.0015e-01  +2.6448e+00  2.14e+00  6.41e-03  2.65e+00  1.89e-06  1.54e-01  9.90e-01  
  5  +5.0002e-01  +1.1392e+00  6.39e-01  1.91e-03  7.93e-01  2.38e-06  6.43e-02  7.01e-01  
  6  +4.9989e-01  +1.2119e+00  7.12e-01  1.82e-03  7.65e-01  1.32e-05  9.68e-03  8.98e-01  
  7  +4.9295e-01  +1.1520e+00  6.59e-01  8.00e-05  3.43e-02  5.57e-04  1.98e-04  9.80e-01  
  8  +4.7999e-01  +1.0599e+00  5.80e-01  3.10e-05  1.33e-02  1.12e-03  7.69e-05  6.21e-01  
  9  +4.7548e-01  +1.0061e+00  5.31e-01  2.66e-05  1.14e-02  8.81e-04  6.66e-05  2.61e-01  
 10  +4.5990e-01  +8.3209e-01  3.72e-01  1.67e-05  7.10e-03  9.53e-06  4.32e-05  8.72e-01  
 11  +3.9960e-01  +5.3843e-01  1.39e-01  4.90e-06  2.06e-03  1.83e-06  1.44e-05  8.15e-01  
 12  +3.5366e-01  +3.6861e-01  1.49e-02  5.50e-07  2.30e-04  9.70e-08  1.95e-06  9.40e-01  
 13  +3.4767e-01  +3.4787e-01  2.06e-04  7.53e-09  3.14e-06  1.23e-09  2.77e-08  9.88e-01  
 14  +3.4758e-01  +3.4758e-01  2.06e-06  7.52e-11  3.14e-08  1.23e-11  2.77e-10  9.90e-01  
 15  +3.4758e-01  +3.4758e-01  2.06e-08  7.53e-13  3.14e-10  1.24e-13  2.80e-12  9.90e-01  
 16  +3.4758e-01  +3.4758e-01  2.06e-10  7.53e-15  3.14e-12  1.26e-15  2.83e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 289.0002ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:44 PM: Optimal value: 3.476e-01
(CVXPY) Sep 20 03:06:44 PM: Compilation took 7.929e-02 seconds
(CVXPY) Sep 20 03:06:44 PM: Solver (including time spent in interface) took 3.194e-01 seconds
FULL MODEL:
  Accruacy: 0.65252
  Our objective: 0.30504

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.30504)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.4853689670562744
Best over terms:
  Our final objective: 0.30504
    Its accruacy: 0.65252
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30504
  Highest accruacy: 0.65252
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

