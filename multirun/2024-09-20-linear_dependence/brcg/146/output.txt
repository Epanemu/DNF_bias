Command:
python test_script.py -s linear_dependence -d 4 -n 5000 --seed 56 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.312
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.312
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:22 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:22 PM: Finished problem compilation (took 9.652e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5009e+03  2.50e+03  9.78e-01  6.07e+01  1.00e+00  1.00e+00   ------   
  1  +6.0810e-01  +4.8464e+02  4.84e+02  3.36e-01  3.37e+01  4.10e-03  4.73e-01  6.68e-01  
  2  +5.5075e-01  +7.5380e+01  7.48e+01  1.37e-01  1.68e+01  8.24e-03  2.26e-01  7.27e-01  
  3  +5.0942e-01  +1.5051e+01  1.45e+01  9.38e-02  1.11e+01  1.62e-05  2.23e-01  8.37e-02  
  4  +4.9999e-01  +1.1329e+00  6.33e-01  6.01e-03  7.29e-01  7.71e-06  1.37e-01  8.09e-01  
  5  +4.9918e-01  +8.9676e-01  3.98e-01  3.48e-03  4.25e-01  1.71e-05  2.48e-02  8.79e-01  
  6  +4.6735e-01  +7.9651e-01  3.29e-01  2.32e-04  2.89e-02  4.73e-04  6.75e-04  9.75e-01  
  7  +4.3791e-01  +5.9621e-01  1.58e-01  8.46e-05  1.04e-02  2.01e-04  2.72e-04  6.48e-01  
  8  +4.0907e-01  +4.3690e-01  2.78e-02  1.41e-05  1.73e-03  1.80e-06  5.35e-05  8.90e-01  
  9  +4.0226e-01  +4.0463e-01  2.37e-03  1.18e-06  1.44e-04  1.45e-07  4.75e-06  9.14e-01  
 10  +4.0153e-01  +4.0165e-01  1.16e-04  5.14e-08  6.30e-06  8.53e-09  2.35e-07  9.85e-01  
 11  +4.0150e-01  +4.0150e-01  1.16e-06  5.16e-10  6.33e-08  8.57e-11  2.36e-09  9.90e-01  
 12  +4.0150e-01  +4.0150e-01  1.16e-08  5.16e-12  6.33e-10  8.57e-13  2.36e-11  9.90e-01  
 13  +4.0150e-01  +4.0150e-01  1.17e-10  5.17e-14  6.33e-12  8.87e-15  2.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.7735ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:23 PM: Optimal value: 4.015e-01
(CVXPY) Sep 20 03:06:23 PM: Compilation took 9.652e-03 seconds
(CVXPY) Sep 20 03:06:23 PM: Solver (including time spent in interface) took 1.770e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4015
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:23 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:23 PM: Finished problem compilation (took 1.321e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22366
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9998e-01  +2.5014e+03  2.50e+03  9.78e-01  6.52e+01  1.00e+00  1.00e+00   ------   
  1  +6.0751e-01  +4.8524e+02  4.85e+02  3.37e-01  3.62e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5002e-01  +7.4587e+01  7.40e+01  1.35e-01  1.78e+01  8.33e-03  2.25e-01  7.34e-01  
  3  +5.0898e-01  +1.4596e+01  1.41e+01  9.19e-02  1.17e+01  1.61e-05  2.21e-01  9.36e-02  
  4  +5.0054e-01  +2.0374e+00  1.54e+00  1.45e-02  1.87e+00  9.01e-06  1.68e-01  4.67e-01  
  5  +5.0008e-01  +1.1852e+00  6.85e-01  6.42e-03  8.36e-01  6.28e-06  6.79e-02  6.64e-01  
  6  +4.9517e-01  +1.5646e+00  1.07e+00  2.42e-03  3.26e-01  7.56e-05  6.52e-03  9.78e-01  
  7  +4.8077e-01  +1.2606e+00  7.80e-01  6.07e-04  8.20e-02  1.84e-04  1.57e-03  7.63e-01  
  8  +4.7083e-01  +1.1994e+00  7.29e-01  3.88e-04  5.24e-02  2.32e-04  9.92e-04  3.97e-01  
  9  +4.7408e-01  +1.1129e+00  6.39e-01  3.18e-04  4.31e-02  1.52e-04  8.07e-04  4.69e-01  
 10  +4.6140e-01  +8.8950e-01  4.28e-01  2.10e-04  2.82e-02  4.92e-05  5.49e-04  7.03e-01  
 11  +4.5773e-01  +8.7565e-01  4.18e-01  1.93e-04  2.60e-02  4.91e-05  5.10e-04  1.46e-01  
 12  +4.5546e-01  +8.3371e-01  3.78e-01  1.86e-04  2.50e-02  3.93e-05  5.04e-04  1.48e-01  
 13  +4.0855e-01  +6.0392e-01  1.95e-01  7.26e-05  9.66e-03  2.23e-05  2.11e-04  6.47e-01  
 14  +3.6978e-01  +4.4239e-01  7.26e-02  2.69e-05  3.54e-03  7.14e-06  8.93e-05  8.03e-01  
 15  +3.4617e-01  +3.5150e-01  5.33e-03  1.94e-06  2.55e-04  3.69e-07  7.16e-06  9.40e-01  
 16  +3.4412e-01  +3.4418e-01  5.71e-05  2.08e-08  2.73e-06  3.87e-09  7.78e-08  9.89e-01  
 17  +3.4410e-01  +3.4410e-01  5.71e-07  2.08e-10  2.73e-08  3.87e-11  7.78e-10  9.90e-01  
 18  +3.4410e-01  +3.4410e-01  5.71e-09  2.08e-12  2.73e-10  3.87e-13  7.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.9637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:23 PM: Optimal value: 3.441e-01
(CVXPY) Sep 20 03:06:23 PM: Compilation took 1.321e-02 seconds
(CVXPY) Sep 20 03:06:23 PM: Solver (including time spent in interface) took 3.282e-02 seconds
FULL MODEL:
  Accruacy: 0.656
  Our objective: 0.312

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.312)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5107653141021729
Best over terms:
  Our final objective: 0.312
    Its accruacy: 0.656
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.312
  Highest accruacy: 0.656
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

