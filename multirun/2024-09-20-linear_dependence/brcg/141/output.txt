Command:
python test_script.py -s linear_dependence -d 4 -n 1000 --seed 56 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.354
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.354
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:12 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:12 PM: Finished problem compilation (took 4.933e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9966e-01  +5.0106e+02  5.01e+02  9.51e-01  2.68e+01  1.00e+00  1.00e+00   ------   
  1  +6.0743e-01  +9.7279e+01  9.67e+01  3.26e-01  1.47e+01  4.10e-03  4.75e-01  6.68e-01  
  2  +5.4849e-01  +1.4982e+01  1.44e+01  1.21e-01  6.63e+00  8.40e-03  2.19e-01  7.49e-01  
  3  +5.0192e-01  +2.1344e+00  1.63e+00  3.33e-02  1.74e+00  9.31e-04  2.01e-01  3.70e-01  
  4  +4.9898e-01  +8.8778e-01  3.89e-01  7.48e-03  4.07e-01  5.16e-04  3.89e-02  8.83e-01  
  5  +4.6397e-01  +8.8480e-01  4.21e-01  1.08e-03  6.09e-02  6.86e-03  2.92e-03  9.47e-01  
  6  +4.3446e-01  +6.9843e-01  2.64e-01  6.87e-04  3.80e-02  2.37e-03  2.14e-03  3.73e-01  
  7  +3.9004e-01  +4.6970e-01  7.97e-02  1.89e-04  1.03e-02  2.00e-05  7.73e-04  7.88e-01  
  8  +3.6962e-01  +3.7826e-01  8.64e-03  1.95e-05  1.06e-03  1.70e-06  9.18e-05  8.94e-01  
  9  +3.6717e-01  +3.6739e-01  2.21e-04  4.97e-07  2.70e-05  6.84e-08  2.38e-06  9.90e-01  
 10  +3.6710e-01  +3.6710e-01  2.21e-06  4.97e-09  2.70e-07  6.84e-10  2.38e-08  9.90e-01  
 11  +3.6710e-01  +3.6710e-01  2.21e-08  4.97e-11  2.70e-09  6.84e-12  2.38e-10  9.90e-01  
 12  +3.6710e-01  +3.6710e-01  2.21e-10  4.97e-13  2.70e-11  6.84e-14  2.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5673ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:12 PM: Optimal value: 3.671e-01
(CVXPY) Sep 20 03:06:12 PM: Compilation took 4.933e-03 seconds
(CVXPY) Sep 20 03:06:12 PM: Solver (including time spent in interface) took 3.025e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3671
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:12 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:12 PM: Finished problem compilation (took 3.899e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4548
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0111e+02  5.01e+02  9.51e-01  2.88e+01  1.00e+00  1.01e+00   ------   
  1  +6.0493e-01  +9.7774e+01  9.72e+01  3.30e-01  1.59e+01  4.09e-03  4.79e-01  6.65e-01  
  2  +5.4614e-01  +1.4484e+01  1.39e+01  1.18e-01  6.90e+00  8.75e-03  2.14e-01  7.72e-01  
  3  +5.0062e-01  +1.8817e+00  1.38e+00  2.83e-02  1.60e+00  9.02e-04  1.87e-01  5.19e-01  
  4  +4.9827e-01  +1.0977e+00  5.99e-01  1.11e-02  6.51e-01  7.48e-04  5.17e-02  7.82e-01  
  5  +4.8045e-01  +1.0701e+00  5.90e-01  3.20e-03  1.94e-01  3.68e-03  8.70e-03  8.48e-01  
  6  +4.7259e-01  +1.0395e+00  5.67e-01  2.28e-03  1.38e-01  4.17e-03  6.08e-03  3.94e-01  
  7  +4.6457e-01  +9.8804e-01  5.23e-01  1.47e-03  8.95e-02  1.11e-03  3.83e-03  9.90e-01  
  8  +4.1367e-01  +6.9468e-01  2.81e-01  5.23e-04  3.14e-02  5.58e-04  1.44e-03  7.95e-01  
  9  +3.5808e-01  +4.7204e-01  1.14e-01  2.12e-04  1.25e-02  4.75e-06  6.89e-04  9.19e-01  
 10  +3.2792e-01  +3.4065e-01  1.27e-02  2.36e-05  1.38e-03  1.91e-06  8.84e-05  8.97e-01  
 11  +3.2378e-01  +3.2551e-01  1.73e-03  3.20e-06  1.87e-04  9.63e-07  1.25e-05  9.90e-01  
 12  +3.2311e-01  +3.2313e-01  2.08e-05  3.86e-08  2.26e-06  1.16e-08  1.51e-07  9.88e-01  
 13  +3.2310e-01  +3.2310e-01  2.08e-07  3.86e-10  2.26e-08  1.16e-10  1.51e-09  9.90e-01  
 14  +3.2310e-01  +3.2310e-01  2.08e-09  3.86e-12  2.26e-10  1.16e-12  1.51e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.129ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:12 PM: Optimal value: 3.231e-01
(CVXPY) Sep 20 03:06:12 PM: Compilation took 3.899e-03 seconds
(CVXPY) Sep 20 03:06:12 PM: Solver (including time spent in interface) took 3.198e-03 seconds
FULL MODEL:
  Accruacy: 0.677
  Our objective: 0.3539999999999999

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.354)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3367862701416016
Best over terms:
  Our final objective: 0.3539999999999999
    Its accruacy: 0.677
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.3539999999999999
  Highest accruacy: 0.677
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

