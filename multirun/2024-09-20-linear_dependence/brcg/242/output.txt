Command:
python test_script.py -s linear_dependence -d 7 -n 10 --seed 73 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 7.

Computed total variation: 0.8
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:33 PM: Your problem has 20 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:33 PM: Finished problem compilation (took 4.133e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 20
  constraints   = 25
  nnz(P)        = 0
  nnz(A)        = 65
  cones (total) = 1
    : Nonnegative = 1,  numel = 25

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.9219e-01  +6.3794e+00  5.99e+00  7.56e-01  2.66e+00  1.00e+00  1.35e+00   ------   
  1  +3.4474e-01  +1.0425e+00  6.98e-01  2.28e-01  9.82e-01  3.53e-03  5.34e-01  8.08e-01  
  2  +1.7148e-01  +3.9793e-01  2.26e-01  6.17e-02  2.88e-01  9.94e-03  2.08e-01  7.56e-01  
  3  +1.0952e-01  +1.4014e-01  3.06e-02  7.17e-03  3.55e-02  2.26e-03  3.18e-02  9.63e-01  
  4  +1.0043e-01  +1.0119e-01  7.59e-04  1.77e-04  8.79e-04  5.50e-05  8.19e-04  9.77e-01  
  5  +1.0021e-01  +1.0023e-01  1.84e-05  4.61e-06  2.27e-05  5.34e-07  2.16e-05  9.74e-01  
  6  +1.0020e-01  +1.0020e-01  2.26e-07  5.94e-08  2.86e-07  8.39e-09  2.87e-07  9.87e-01  
  7  +1.0020e-01  +1.0020e-01  2.26e-09  5.94e-10  2.86e-09  8.38e-11  2.87e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:33 PM: Optimal value: 1.002e-01
(CVXPY) Sep 20 03:10:33 PM: Compilation took 4.133e-03 seconds
(CVXPY) Sep 20 03:10:33 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:33 PM: Your problem has 26 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:33 PM: Finished problem compilation (took 2.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 26
  constraints   = 31
  nnz(P)        = 0
  nnz(A)        = 84
  cones (total) = 1
    : Nonnegative = 1,  numel = 31

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.7653e-01  +6.3196e+00  5.94e+00  7.82e-01  2.73e+00  1.00e+00  1.35e+00   ------   
  1  +3.0036e-01  +1.0012e+00  7.01e-01  2.50e-01  1.01e+00  3.54e-03  5.36e-01  8.02e-01  
  2  +1.3479e-01  +3.1820e-01  1.83e-01  5.25e-02  2.54e-01  9.41e-03  1.70e-01  8.17e-01  
  3  +1.0641e-01  +1.3375e-01  2.73e-02  7.48e-03  3.78e-02  1.73e-03  2.80e-02  8.57e-01  
  4  +1.0029e-01  +1.0068e-01  3.90e-04  1.08e-04  5.46e-04  2.30e-05  4.15e-04  9.85e-01  
  5  +1.0021e-01  +1.0024e-01  3.08e-05  9.32e-06  4.51e-05  1.17e-06  3.69e-05  9.14e-01  
  6  +1.0020e-01  +1.0020e-01  6.92e-07  2.12e-07  1.02e-06  2.82e-08  8.56e-07  9.78e-01  
  7  +1.0020e-01  +1.0020e-01  6.92e-09  2.13e-09  1.02e-08  2.82e-10  8.56e-09  9.90e-01  
  8  +1.0020e-01  +1.0020e-01  6.93e-11  2.13e-11  1.02e-10  2.83e-12  8.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:33 PM: Optimal value: 1.002e-01
(CVXPY) Sep 20 03:10:33 PM: Compilation took 2.993e-03 seconds
(CVXPY) Sep 20 03:10:33 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:33 PM: Your problem has 27 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:33 PM: Finished problem compilation (took 3.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 27
  constraints   = 32
  nnz(P)        = 0
  nnz(A)        = 90
  cones (total) = 1
    : Nonnegative = 1,  numel = 32

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3913e-01  +6.5343e+00  6.20e+00  7.88e-01  2.86e+00  1.00e+00  1.39e+00   ------   
  1  +2.5031e-01  +9.5975e-01  7.09e-01  2.50e-01  1.05e+00  3.46e-03  5.47e-01  8.17e-01  
  2  +1.2334e-01  +2.6138e-01  1.38e-01  4.78e-02  2.38e-01  5.16e-03  1.48e-01  8.03e-01  
  3  +1.0271e-01  +1.1700e-01  1.43e-02  4.93e-03  2.51e-02  6.45e-04  1.72e-02  9.05e-01  
  4  +1.0020e-01  +1.0053e-01  3.33e-04  1.18e-04  5.95e-04  1.26e-05  4.16e-04  9.76e-01  
  5  +1.0011e-01  +1.0015e-01  3.25e-05  1.30e-05  6.00e-05  4.89e-07  5.36e-05  9.36e-01  
  6  +1.0010e-01  +1.0010e-01  1.15e-06  4.24e-07  1.98e-06  3.93e-08  2.21e-06  9.80e-01  
  7  +1.0010e-01  +1.0010e-01  1.15e-08  4.23e-09  1.98e-08  3.92e-10  2.21e-08  9.90e-01  
  8  +1.0010e-01  +1.0010e-01  1.15e-10  4.23e-11  1.98e-10  3.92e-12  2.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:33 PM: Optimal value: 1.001e-01
(CVXPY) Sep 20 03:10:33 PM: Compilation took 3.511e-03 seconds
(CVXPY) Sep 20 03:10:33 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.8

IF 
    (x3 = 1 AND x6 = 1) <-- (term's our objective: 0.8)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4744884967803955
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.8
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

