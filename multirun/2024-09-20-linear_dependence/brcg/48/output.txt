Command:
python test_script.py -s linear_dependence -d 2 -n 50 --seed 34 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.56
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 2.

Computed total variation: 0.56
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:32 PM: Your problem has 30 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:32 PM: Finished problem compilation (took 1.917e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 55
  nnz(P)        = 0
  nnz(A)        = 130
  cones (total) = 1
    : Nonnegative = 1,  numel = 55

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7682e-01  +2.6641e+01  2.62e+01  8.02e-01  4.63e+00  1.00e+00  1.12e+00   ------   
  1  +5.9538e-01  +4.7474e+00  4.15e+00  2.13e-01  1.97e+00  4.41e-03  4.20e-01  7.46e-01  
  2  +4.3766e-01  +1.2234e+00  7.86e-01  4.28e-02  4.43e-01  7.26e-03  1.13e-01  8.06e-01  
  3  +3.0105e-01  +5.9198e-01  2.91e-01  1.30e-02  1.30e-01  1.61e-03  4.51e-02  6.53e-01  
  4  +2.2892e-01  +2.6542e-01  3.65e-02  1.76e-03  1.67e-02  2.55e-04  9.47e-03  8.74e-01  
  5  +2.2028e-01  +2.2096e-01  6.78e-04  3.28e-05  3.11e-04  3.23e-06  1.94e-04  9.81e-01  
  6  +2.2010e-01  +2.2011e-01  6.76e-06  3.28e-07  3.10e-06  3.22e-08  1.95e-06  9.90e-01  
  7  +2.2010e-01  +2.2010e-01  6.76e-08  3.28e-09  3.10e-08  3.22e-10  1.95e-08  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  6.76e-10  3.28e-11  3.10e-10  3.22e-12  1.95e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 170.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:32 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 03:03:32 PM: Compilation took 1.917e-03 seconds
(CVXPY) Sep 20 03:03:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:32 PM: Your problem has 31 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:32 PM: Finished problem compilation (took 2.560e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 31
  constraints   = 56
  nnz(P)        = 0
  nnz(A)        = 141
  cones (total) = 1
    : Nonnegative = 1,  numel = 56

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7794e-01  +2.6691e+01  2.62e+01  8.04e-01  4.77e+00  1.00e+00  1.13e+00   ------   
  1  +5.9456e-01  +4.7923e+00  4.20e+00  2.19e-01  2.05e+00  4.35e-03  4.31e-01  7.42e-01  
  2  +4.5218e-01  +1.4188e+00  9.67e-01  5.34e-02  5.65e-01  7.15e-03  1.37e-01  7.51e-01  
  3  +3.1607e-01  +7.2187e-01  4.06e-01  1.73e-02  1.81e-01  2.78e-03  5.51e-02  6.37e-01  
  4  +2.3708e-01  +3.1295e-01  7.59e-02  3.64e-03  3.58e-02  5.64e-04  1.72e-02  7.71e-01  
  5  +2.2105e-01  +2.2454e-01  3.48e-03  1.70e-04  1.66e-03  1.41e-05  9.78e-04  9.49e-01  
  6  +2.2011e-01  +2.2014e-01  3.47e-05  1.70e-06  1.65e-05  1.53e-07  1.02e-05  9.90e-01  
  7  +2.2010e-01  +2.2010e-01  3.47e-07  1.70e-08  1.65e-07  1.53e-09  1.02e-07  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  3.47e-09  1.70e-10  1.65e-09  1.53e-11  1.02e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 128.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:32 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 03:03:32 PM: Compilation took 2.560e-03 seconds
(CVXPY) Sep 20 03:03:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:32 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:32 PM: Finished problem compilation (took 9.506e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 151
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7201e-01  +2.6824e+01  2.64e+01  8.07e-01  4.88e+00  1.00e+00  1.14e+00   ------   
  1  +5.7393e-01  +4.8498e+00  4.28e+00  2.28e-01  2.16e+00  4.25e-03  4.53e-01  7.35e-01  
  2  +4.1034e-01  +1.1301e+00  7.20e-01  3.78e-02  4.09e-01  7.54e-03  1.03e-01  8.47e-01  
  3  +3.2795e-01  +7.6621e-01  4.38e-01  1.97e-02  2.09e-01  4.36e-03  6.37e-02  4.41e-01  
  4  +2.3667e-01  +2.9807e-01  6.14e-02  3.06e-03  3.06e-02  9.16e-05  1.46e-02  8.69e-01  
  5  +2.2083e-01  +2.2333e-01  2.50e-03  1.26e-04  1.25e-03  4.78e-06  7.20e-04  9.59e-01  
  6  +2.2015e-01  +2.2030e-01  1.55e-04  7.74e-06  7.66e-05  3.06e-07  4.67e-05  9.38e-01  
  7  +2.2010e-01  +2.2010e-01  1.64e-06  8.12e-08  8.05e-07  3.49e-09  4.99e-07  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  1.64e-08  8.12e-10  8.04e-09  3.49e-11  4.99e-09  9.90e-01  
  9  +2.2010e-01  +2.2010e-01  1.64e-10  8.12e-12  8.04e-11  3.50e-13  4.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 140.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:32 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 03:03:32 PM: Compilation took 9.506e-04 seconds
(CVXPY) Sep 20 03:03:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.78
  Our objective: 0.56

IF 
    (x0 = 0) <-- (term's our objective: 0.56)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8864719867706299
Best over terms:
  Our final objective: 0.56
    Its accruacy: 0.78
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.56
  Highest accruacy: 0.78
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

