Command:
python test_script.py -s linear_dependence -d 4 -n 1000 --seed 34 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30000000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.31
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:16 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:16 PM: Finished problem compilation (took 5.277e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0090e+02  5.00e+02  9.51e-01  2.66e+01  1.00e+00  1.00e+00   ------   
  1  +6.0763e-01  +9.7283e+01  9.67e+01  3.26e-01  1.47e+01  4.10e-03  4.74e-01  6.68e-01  
  2  +5.4908e-01  +1.5118e+01  1.46e+01  1.22e-01  6.67e+00  8.36e-03  2.21e-01  7.43e-01  
  3  +5.0219e-01  +1.9530e+00  1.45e+00  2.99e-02  1.56e+00  2.92e-04  2.06e-01  3.40e-01  
  4  +5.0008e-01  +7.8225e-01  2.82e-01  5.87e-03  3.16e-01  8.80e-05  4.95e-02  8.38e-01  
  5  +4.8186e-01  +1.1129e+00  6.31e-01  1.86e-03  1.03e-01  1.63e-03  5.37e-03  9.48e-01  
  6  +4.5141e-01  +6.2814e-01  1.77e-01  4.36e-04  2.39e-02  1.72e-05  1.43e-03  8.60e-01  
  7  +4.3465e-01  +5.5092e-01  1.16e-01  2.69e-04  1.47e-02  2.76e-05  9.86e-04  5.65e-01  
  8  +4.2146e-01  +4.8743e-01  6.60e-02  1.46e-04  7.96e-03  3.11e-05  5.86e-04  9.90e-01  
  9  +4.0534e-01  +4.1317e-01  7.83e-03  1.67e-05  9.11e-04  2.91e-06  7.49e-05  8.83e-01  
 10  +4.0321e-01  +4.0357e-01  3.55e-04  7.58e-07  4.12e-05  1.47e-07  3.44e-06  9.90e-01  
 11  +4.0310e-01  +4.0310e-01  3.55e-06  7.58e-09  4.12e-07  1.47e-09  3.44e-08  9.90e-01  
 12  +4.0310e-01  +4.0310e-01  3.55e-08  7.58e-11  4.12e-09  1.47e-11  3.44e-10  9.90e-01  
 13  +4.0310e-01  +4.0310e-01  3.55e-10  7.57e-13  4.12e-11  1.47e-13  3.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0884ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:16 PM: Optimal value: 4.031e-01
(CVXPY) Sep 20 03:06:16 PM: Compilation took 5.277e-03 seconds
(CVXPY) Sep 20 03:06:16 PM: Solver (including time spent in interface) took 4.038e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4031
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:16 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:16 PM: Finished problem compilation (took 3.547e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4532
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9913e-01  +5.0144e+02  5.01e+02  9.52e-01  2.87e+01  1.00e+00  1.01e+00   ------   
  1  +6.0320e-01  +9.8084e+01  9.75e+01  3.32e-01  1.58e+01  4.08e-03  4.82e-01  6.63e-01  
  2  +5.4522e-01  +1.4307e+01  1.38e+01  1.16e-01  6.77e+00  8.94e-03  2.11e-01  7.83e-01  
  3  +5.0236e-01  +2.2954e+00  1.79e+00  3.65e-02  2.04e+00  9.67e-04  1.91e-01  3.99e-01  
  4  +4.9959e-01  +1.4574e+00  9.58e-01  1.80e-02  1.04e+00  8.33e-04  7.68e-02  7.02e-01  
  5  +4.8151e-01  +1.6826e+00  1.20e+00  5.60e-03  3.36e-01  3.73e-03  1.60e-02  8.99e-01  
  6  +4.6960e-01  +1.1878e+00  7.18e-01  3.09e-03  1.84e-01  1.80e-03  9.11e-03  5.32e-01  
  7  +4.6129e-01  +1.0759e+00  6.15e-01  2.11e-03  1.26e-01  1.81e-03  5.97e-03  3.85e-01  
  8  +4.5512e-01  +1.0324e+00  5.77e-01  1.45e-03  8.69e-02  1.78e-03  3.97e-03  4.95e-01  
  9  +4.5715e-01  +1.0077e+00  5.51e-01  1.26e-03  7.58e-02  1.31e-03  3.39e-03  4.01e-01  
 10  +4.3907e-01  +7.6980e-01  3.31e-01  6.27e-04  3.74e-02  1.14e-04  1.74e-03  9.64e-01  
 11  +4.2061e-01  +6.6071e-01  2.40e-01  4.89e-04  2.90e-02  8.71e-05  1.43e-03  3.59e-01  
 12  +3.7387e-01  +4.4438e-01  7.05e-02  1.25e-04  7.35e-03  2.09e-05  4.13e-04  7.66e-01  
 13  +3.5272e-01  +3.5924e-01  6.52e-03  1.17e-05  6.82e-04  3.96e-06  4.31e-05  9.90e-01  
 14  +3.5016e-01  +3.5031e-01  1.47e-04  2.64e-07  1.54e-05  8.35e-08  1.00e-06  9.90e-01  
 15  +3.5010e-01  +3.5010e-01  1.47e-06  2.64e-09  1.54e-07  8.35e-10  1.01e-08  9.90e-01  
 16  +3.5010e-01  +3.5010e-01  1.47e-08  2.64e-11  1.54e-09  8.35e-12  1.01e-10  9.90e-01  
 17  +3.5010e-01  +3.5010e-01  1.47e-10  2.64e-13  1.54e-11  8.35e-14  1.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.8387ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:16 PM: Optimal value: 3.501e-01
(CVXPY) Sep 20 03:06:16 PM: Compilation took 3.547e-03 seconds
(CVXPY) Sep 20 03:06:16 PM: Solver (including time spent in interface) took 4.991e-03 seconds
Iteration: 2, Objective: 0.3501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:16 PM: Your problem has 520 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:16 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 520
  constraints   = 1020
  nnz(P)        = 0
  nnz(A)        = 4567
  cones (total) = 1
    : Nonnegative = 1,  numel = 1020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0138e+02  5.01e+02  9.52e-01  2.87e+01  1.00e+00  1.01e+00   ------   
  1  +6.0325e-01  +9.8084e+01  9.75e+01  3.32e-01  1.58e+01  4.08e-03  4.83e-01  6.63e-01  
  2  +5.4519e-01  +1.4304e+01  1.38e+01  1.16e-01  6.75e+00  8.95e-03  2.11e-01  7.83e-01  
  3  +5.0215e-01  +2.2419e+00  1.74e+00  3.55e-02  1.98e+00  9.49e-04  1.90e-01  4.15e-01  
  4  +4.9963e-01  +1.5237e+00  1.02e+00  1.93e-02  1.11e+00  8.64e-04  8.21e-02  6.65e-01  
  5  +4.7948e-01  +1.7118e+00  1.23e+00  5.37e-03  3.22e-01  4.10e-03  1.52e-02  9.09e-01  
  6  +4.6802e-01  +1.3520e+00  8.84e-01  3.23e-03  1.94e-01  2.91e-03  9.16e-03  4.85e-01  
  7  +4.6067e-01  +1.2173e+00  7.57e-01  2.13e-03  1.28e-01  2.25e-03  5.82e-03  5.83e-01  
  8  +4.6207e-01  +1.0251e+00  5.63e-01  1.60e-03  9.61e-02  2.31e-04  4.36e-03  8.30e-01  
  9  +4.5189e-01  +9.6804e-01  5.16e-01  1.09e-03  6.55e-02  2.66e-04  3.00e-03  3.69e-01  
 10  +4.3901e-01  +8.3269e-01  3.94e-01  9.46e-04  5.63e-02  1.73e-04  2.69e-03  4.26e-01  
 11  +4.1304e-01  +6.8278e-01  2.70e-01  5.36e-04  3.17e-02  1.33e-04  1.59e-03  6.34e-01  
 12  +3.7493e-01  +4.7853e-01  1.04e-01  1.99e-04  1.16e-02  4.04e-05  6.68e-04  6.53e-01  
 13  +3.4990e-01  +3.6385e-01  1.40e-02  2.66e-05  1.55e-03  4.20e-06  1.01e-04  8.71e-01  
 14  +3.4577e-01  +3.4725e-01  1.48e-03  2.81e-06  1.64e-04  7.91e-07  1.13e-05  9.90e-01  
 15  +3.4521e-01  +3.4522e-01  1.53e-05  2.90e-08  1.69e-06  8.10e-09  1.17e-07  9.90e-01  
 16  +3.4520e-01  +3.4520e-01  1.53e-07  2.90e-10  1.69e-08  8.10e-11  1.17e-09  9.90e-01  
 17  +3.4520e-01  +3.4520e-01  1.53e-09  2.90e-12  1.69e-10  8.10e-13  1.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0888ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:16 PM: Optimal value: 3.452e-01
(CVXPY) Sep 20 03:06:16 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 03:06:16 PM: Solver (including time spent in interface) took 5.156e-03 seconds
FULL MODEL:
  Accruacy: 0.655
  Our objective: 0.30999999999999994

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.3)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.01)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.9505860805511475
Best over terms:
  Our final objective: 0.30000000000000004
    Its accruacy: 0.65
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30000000000000004
  Highest accruacy: 0.65
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

