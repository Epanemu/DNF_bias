Command:
python test_script.py -s linear_dependence -d 5 -n 500 --seed 43 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.28400000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.33999999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:28 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:28 PM: Finished problem compilation (took 4.737e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +2.5101e+02  2.51e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9837e-01  +5.0513e+01  4.99e+01  3.43e-01  1.15e+01  3.99e-03  5.06e-01  6.46e-01  
  2  +5.4192e-01  +7.1630e+00  6.62e+00  1.13e-01  4.61e+00  1.02e-02  2.20e-01  8.21e-01  
  3  +5.0074e-01  +1.4605e+00  9.60e-01  2.83e-02  1.12e+00  1.87e-03  1.83e-01  5.88e-01  
  4  +4.9693e-01  +8.0564e-01  3.09e-01  8.00e-03  3.28e-01  1.43e-03  3.62e-02  8.55e-01  
  5  +4.5916e-01  +7.6523e-01  3.06e-01  1.54e-03  6.44e-02  9.31e-03  4.66e-03  9.20e-01  
  6  +4.3447e-01  +6.1007e-01  1.76e-01  8.19e-04  3.39e-02  3.60e-03  2.88e-03  4.72e-01  
  7  +4.1186e-01  +4.8826e-01  7.64e-02  3.38e-04  1.39e-02  9.70e-04  1.38e-03  6.30e-01  
  8  +3.9623e-01  +4.1022e-01  1.40e-02  6.04e-05  2.48e-03  1.41e-05  2.74e-04  9.90e-01  
  9  +3.9216e-01  +3.9237e-01  2.09e-04  8.97e-07  3.68e-05  1.95e-07  4.20e-06  9.86e-01  
 10  +3.9210e-01  +3.9210e-01  2.09e-06  8.97e-09  3.68e-07  1.95e-09  4.20e-08  9.90e-01  
 11  +3.9210e-01  +3.9210e-01  2.09e-08  8.97e-11  3.68e-09  1.95e-11  4.21e-10  9.90e-01  
 12  +3.9210e-01  +3.9210e-01  2.09e-10  8.97e-13  3.68e-11  1.95e-13  4.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4932ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:28 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:28 PM: Optimal value: 3.921e-01
(CVXPY) Sep 20 03:07:28 PM: Compilation took 4.737e-03 seconds
(CVXPY) Sep 20 03:07:28 PM: Solver (including time spent in interface) took 1.679e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3921
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:28 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:28 PM: Finished problem compilation (took 3.378e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2522
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9892e-01  +2.5107e+02  2.51e+02  9.34e-01  2.11e+01  1.00e+00  1.01e+00   ------   
  1  +5.9457e-01  +5.0822e+01  5.02e+01  3.50e-01  1.20e+01  3.98e-03  5.12e-01  6.42e-01  
  2  +5.3823e-01  +6.7761e+00  6.24e+00  1.07e-01  4.58e+00  1.08e-02  2.11e-01  8.58e-01  
  3  +4.9973e-01  +1.4458e+00  9.46e-01  2.82e-02  1.17e+00  2.31e-03  1.58e-01  7.53e-01  
  4  +4.9059e-01  +1.2062e+00  7.16e-01  1.28e-02  5.55e-01  4.10e-03  4.15e-02  8.64e-01  
  5  +4.6478e-01  +9.3453e-01  4.70e-01  3.49e-03  1.54e-01  7.35e-03  1.05e-02  7.54e-01  
  6  +4.5809e-01  +9.2097e-01  4.63e-01  2.77e-03  1.22e-01  7.62e-03  8.14e-03  3.21e-01  
  7  +4.5672e-01  +8.9156e-01  4.35e-01  2.53e-03  1.12e-01  5.80e-03  7.41e-03  2.48e-01  
  8  +4.5410e-01  +8.0281e-01  3.49e-01  1.97e-03  8.69e-02  6.03e-05  5.78e-03  8.62e-01  
  9  +4.2907e-01  +6.7039e-01  2.41e-01  9.40e-04  4.13e-02  6.43e-05  2.81e-03  5.34e-01  
 10  +4.0639e-01  +5.4852e-01  1.42e-01  5.89e-04  2.56e-02  1.84e-04  1.90e-03  9.90e-01  
 11  +3.7545e-01  +4.2685e-01  5.14e-02  1.83e-04  7.91e-03  6.19e-05  6.36e-04  6.87e-01  
 12  +3.6015e-01  +3.6561e-01  5.46e-03  1.94e-05  8.35e-04  5.64e-06  7.24e-05  8.97e-01  
 13  +3.5875e-01  +3.6035e-01  1.59e-03  5.63e-06  2.43e-04  1.90e-06  2.14e-05  9.24e-01  
 14  +3.5811e-01  +3.5813e-01  1.91e-05  6.74e-08  2.90e-06  2.27e-08  2.57e-07  9.88e-01  
 15  +3.5810e-01  +3.5810e-01  1.91e-07  6.74e-10  2.90e-08  2.27e-10  2.57e-09  9.90e-01  
 16  +3.5810e-01  +3.5810e-01  1.91e-09  6.74e-12  2.90e-10  2.27e-12  2.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3618ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:28 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:28 PM: Optimal value: 3.581e-01
(CVXPY) Sep 20 03:07:28 PM: Compilation took 3.378e-03 seconds
(CVXPY) Sep 20 03:07:28 PM: Solver (including time spent in interface) took 3.810e-03 seconds
Iteration: 2, Objective: 0.3581
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:28 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:28 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2771
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9855e-01  +2.5136e+02  2.51e+02  9.35e-01  2.12e+01  1.00e+00  1.02e+00   ------   
  1  +5.9108e-01  +5.1114e+01  5.05e+01  3.55e-01  1.21e+01  3.96e-03  5.18e-01  6.39e-01  
  2  +5.3558e-01  +6.5052e+00  5.97e+00  1.03e-01  4.39e+00  1.13e-02  2.05e-01  8.86e-01  
  3  +4.9997e-01  +1.5661e+00  1.07e+00  3.16e-02  1.32e+00  2.84e-03  1.45e-01  7.82e-01  
  4  +4.8296e-01  +1.0979e+00  6.15e-01  7.51e-03  3.33e-01  6.45e-03  2.19e-02  9.35e-01  
  5  +4.7370e-01  +1.0737e+00  6.00e-01  5.09e-03  2.27e-01  8.33e-03  1.44e-02  3.85e-01  
  6  +4.7187e-01  +1.0413e+00  5.69e-01  4.43e-03  1.97e-01  4.33e-03  1.25e-02  5.32e-01  
  7  +4.5381e-01  +9.3499e-01  4.81e-01  2.75e-03  1.22e-01  4.52e-03  7.81e-03  3.93e-01  
  8  +4.0323e-01  +6.3017e-01  2.27e-01  9.13e-04  4.01e-02  7.07e-04  2.82e-03  9.21e-01  
  9  +3.8993e-01  +5.7290e-01  1.83e-01  7.58e-04  3.31e-02  4.31e-04  2.47e-03  3.35e-01  
 10  +3.5942e-01  +4.3103e-01  7.16e-02  2.89e-04  1.25e-02  1.42e-04  1.07e-03  6.14e-01  
 11  +3.4089e-01  +3.4879e-01  7.90e-03  3.19e-05  1.37e-03  1.21e-05  1.32e-04  8.86e-01  
 12  +3.3912e-01  +3.4146e-01  2.34e-03  9.44e-06  4.06e-04  2.66e-06  4.03e-05  9.24e-01  
 13  +3.3831e-01  +3.3834e-01  3.28e-05  1.32e-07  5.69e-06  3.68e-08  5.70e-07  9.86e-01  
 14  +3.3830e-01  +3.3830e-01  3.28e-07  1.32e-09  5.69e-08  3.68e-10  5.71e-09  9.90e-01  
 15  +3.3830e-01  +3.3830e-01  3.28e-09  1.32e-11  5.69e-10  3.68e-12  5.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4611ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:28 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:28 PM: Optimal value: 3.383e-01
(CVXPY) Sep 20 03:07:28 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 03:07:28 PM: Solver (including time spent in interface) took 2.231e-03 seconds
Iteration: 3, Objective: 0.3383
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:29 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:29 PM: Finished problem compilation (took 3.039e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 2799
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9866e-01  +2.5192e+02  2.51e+02  9.35e-01  2.12e+01  1.00e+00  1.02e+00   ------   
  1  +5.9059e-01  +5.1127e+01  5.05e+01  3.55e-01  1.20e+01  3.96e-03  5.18e-01  6.40e-01  
  2  +5.3523e-01  +6.4703e+00  5.94e+00  1.01e-01  4.32e+00  1.13e-02  2.02e-01  8.91e-01  
  3  +5.0176e-01  +1.8773e+00  1.38e+00  3.97e-02  1.66e+00  3.65e-03  1.50e-01  6.58e-01  
  4  +4.8113e-01  +1.4844e+00  1.00e+00  9.42e-03  4.21e-01  9.41e-03  2.53e-02  9.90e-01  
  5  +4.4663e-01  +1.1366e+00  6.90e-01  3.58e-03  1.60e-01  1.09e-02  9.89e-03  6.28e-01  
  6  +4.2516e-01  +9.3723e-01  5.12e-01  2.39e-03  1.06e-01  7.13e-03  7.01e-03  3.58e-01  
  7  +3.9360e-01  +6.4261e-01  2.49e-01  1.18e-03  5.15e-02  6.34e-05  3.89e-03  8.52e-01  
  8  +3.8021e-01  +5.7364e-01  1.93e-01  8.71e-04  3.79e-02  5.94e-05  3.00e-03  2.83e-01  
  9  +3.4682e-01  +3.9236e-01  4.55e-02  1.97e-04  8.49e-03  4.22e-05  7.82e-04  9.77e-01  
 10  +3.4621e-01  +3.9137e-01  4.52e-02  1.87e-04  8.08e-03  4.36e-05  7.38e-04  1.10e-01  
 11  +3.3881e-01  +3.5815e-01  1.93e-02  8.06e-05  3.47e-03  2.05e-05  3.36e-04  9.90e-01  
 12  +3.3337e-01  +3.3624e-01  2.87e-03  1.19e-05  5.11e-04  2.78e-06  5.20e-05  9.02e-01  
 13  +3.3243e-01  +3.3251e-01  8.04e-05  3.32e-07  1.43e-05  7.41e-08  1.47e-06  9.90e-01  
 14  +3.3240e-01  +3.3240e-01  8.04e-07  3.32e-09  1.43e-07  7.41e-10  1.47e-08  9.90e-01  
 15  +3.3240e-01  +3.3240e-01  8.04e-09  3.32e-11  1.43e-09  7.41e-12  1.47e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.761ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:29 PM: Optimal value: 3.324e-01
(CVXPY) Sep 20 03:07:29 PM: Compilation took 3.039e-03 seconds
(CVXPY) Sep 20 03:07:29 PM: Solver (including time spent in interface) took 3.138e-03 seconds
Iteration: 4, Objective: 0.3324
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:29 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:29 PM: Finished problem compilation (took 3.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 2827
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +2.5207e+02  2.52e+02  9.35e-01  2.12e+01  1.00e+00  1.02e+00   ------   
  1  +5.8947e-01  +5.1193e+01  5.06e+01  3.56e-01  1.20e+01  3.96e-03  5.19e-01  6.39e-01  
  2  +5.3465e-01  +6.4105e+00  5.88e+00  9.99e-02  4.27e+00  1.14e-02  2.00e-01  8.97e-01  
  3  +5.0218e-01  +1.9771e+00  1.47e+00  4.18e-02  1.75e+00  4.00e-03  1.48e-01  6.43e-01  
  4  +4.8030e-01  +1.4562e+00  9.76e-01  8.74e-03  3.92e-01  9.98e-03  2.32e-02  9.90e-01  
  5  +4.5107e-01  +1.1742e+00  7.23e-01  3.95e-03  1.77e-01  1.03e-02  1.08e-02  5.86e-01  
  6  +4.2437e-01  +9.0504e-01  4.81e-01  2.37e-03  1.05e-01  5.34e-03  6.97e-03  4.47e-01  
  7  +3.8554e-01  +5.8696e-01  2.01e-01  9.49e-04  4.14e-02  4.94e-05  3.19e-03  8.89e-01  
  8  +3.6441e-01  +4.8781e-01  1.23e-01  5.53e-04  2.40e-02  6.44e-05  2.01e-03  6.11e-01  
  9  +3.4375e-01  +3.8226e-01  3.85e-02  1.66e-04  7.15e-03  2.16e-05  6.65e-04  7.10e-01  
 10  +3.4320e-01  +3.7765e-01  3.44e-02  1.52e-04  6.54e-03  1.82e-05  6.44e-04  9.11e-02  
 11  +3.4321e-01  +3.7858e-01  3.54e-02  1.55e-04  6.68e-03  2.03e-05  6.38e-04  7.67e-02  
 12  +3.4139e-01  +3.7270e-01  3.13e-02  1.31e-04  5.62e-03  2.05e-05  5.30e-04  2.81e-01  
 13  +3.3417e-01  +3.3984e-01  5.66e-03  2.36e-05  1.01e-03  3.99e-06  1.01e-04  8.48e-01  
 14  +3.3298e-01  +3.3470e-01  1.72e-03  7.12e-06  3.06e-04  1.50e-06  3.13e-05  9.21e-01  
 15  +3.3241e-01  +3.3243e-01  2.37e-05  9.83e-08  4.22e-06  2.06e-08  4.35e-07  9.86e-01  
 16  +3.3240e-01  +3.3240e-01  2.37e-07  9.83e-10  4.22e-08  2.06e-10  4.35e-09  9.90e-01  
 17  +3.3240e-01  +3.3240e-01  2.37e-09  9.83e-12  4.22e-10  2.06e-12  4.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4839ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:29 PM: Optimal value: 3.324e-01
(CVXPY) Sep 20 03:07:29 PM: Compilation took 3.007e-03 seconds
(CVXPY) Sep 20 03:07:29 PM: Solver (including time spent in interface) took 3.000e-03 seconds
FULL MODEL:
  Accruacy: 0.668
  Our objective: 0.336

IF 
    (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.284)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7954518795013428
Best over terms:
  Our final objective: 0.28400000000000003
    Its accruacy: 0.642
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.28400000000000003
  Highest accruacy: 0.642
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

