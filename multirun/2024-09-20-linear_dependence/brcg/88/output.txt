Command:
python test_script.py -s linear_dependence -d 3 -n 50 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.36000000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 3.

Computed total variation: 0.36
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:33 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:33 PM: Finished problem compilation (took 4.081e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 157
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9005e-01  +2.5956e+01  2.55e+01  8.08e-01  5.02e+00  1.00e+00  1.08e+00   ------   
  1  +6.0463e-01  +5.0702e+00  4.47e+00  2.53e-01  2.39e+00  4.20e-03  4.69e-01  6.99e-01  
  2  +5.1305e-01  +1.0111e+00  4.98e-01  4.59e-02  4.90e-01  8.85e-03  1.27e-01  9.09e-01  
  3  +4.6602e-01  +8.9755e-01  4.32e-01  1.92e-02  2.12e-01  1.20e-02  5.86e-02  6.11e-01  
  4  +4.0424e-01  +5.4874e-01  1.44e-01  6.11e-03  6.64e-02  2.09e-03  2.36e-02  6.76e-01  
  5  +3.6475e-01  +3.7944e-01  1.47e-02  6.06e-04  6.51e-03  1.24e-04  2.97e-03  9.56e-01  
  6  +3.6015e-01  +3.6031e-01  1.56e-04  6.41e-06  6.88e-05  1.22e-06  3.22e-05  9.89e-01  
  7  +3.6010e-01  +3.6010e-01  1.56e-06  6.41e-08  6.88e-07  1.22e-08  3.22e-07  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  1.56e-08  6.41e-10  6.88e-09  1.22e-10  3.22e-09  9.90e-01  
  9  +3.6010e-01  +3.6010e-01  1.56e-10  6.41e-12  6.88e-11  1.22e-12  3.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 189.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:33 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 03:04:33 PM: Compilation took 4.081e-03 seconds
(CVXPY) Sep 20 03:04:33 PM: Solver (including time spent in interface) took 3.924e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:33 PM: Your problem has 33 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:33 PM: Finished problem compilation (took 3.380e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 33
  constraints   = 58
  nnz(P)        = 0
  nnz(A)        = 168
  cones (total) = 1
    : Nonnegative = 1,  numel = 58

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8611e-01  +2.6265e+01  2.58e+01  8.11e-01  5.15e+00  1.00e+00  1.10e+00   ------   
  1  +5.9294e-01  +5.1317e+00  4.54e+00  2.59e-01  2.48e+00  4.16e-03  4.85e-01  6.96e-01  
  2  +5.1010e-01  +1.1399e+00  6.30e-01  5.51e-02  6.05e-01  9.12e-03  1.48e-01  8.57e-01  
  3  +4.5059e-01  +8.9523e-01  4.45e-01  1.93e-02  2.20e-01  1.10e-02  5.81e-02  6.64e-01  
  4  +3.8674e-01  +5.8520e-01  1.98e-01  6.70e-03  7.61e-02  5.38e-03  2.26e-02  6.36e-01  
  5  +3.3208e-01  +3.6214e-01  3.01e-02  1.05e-03  1.17e-02  4.58e-05  4.12e-03  9.08e-01  
  6  +3.2070e-01  +3.2188e-01  1.18e-03  4.16e-05  4.59e-04  1.76e-06  1.79e-04  9.59e-01  
  7  +3.2011e-01  +3.2012e-01  1.17e-05  4.13e-07  4.56e-06  1.76e-08  1.80e-06  9.90e-01  
  8  +3.2010e-01  +3.2010e-01  1.17e-07  4.13e-09  4.56e-08  1.76e-10  1.80e-08  9.90e-01  
  9  +3.2010e-01  +3.2010e-01  1.17e-09  4.13e-11  4.56e-10  1.76e-12  1.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 167.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:33 PM: Optimal value: 3.201e-01
(CVXPY) Sep 20 03:04:33 PM: Compilation took 3.380e-03 seconds
(CVXPY) Sep 20 03:04:33 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:33 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:33 PM: Finished problem compilation (took 2.990e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 175
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8595e-01  +2.6187e+01  2.57e+01  8.12e-01  5.17e+00  1.00e+00  1.10e+00   ------   
  1  +5.9058e-01  +5.1306e+00  4.54e+00  2.61e-01  2.48e+00  4.17e-03  4.84e-01  6.94e-01  
  2  +5.1031e-01  +1.1498e+00  6.39e-01  5.56e-02  6.13e-01  9.19e-03  1.48e-01  8.54e-01  
  3  +4.5108e-01  +9.2176e-01  4.71e-01  2.03e-02  2.33e-01  1.13e-02  6.03e-02  6.71e-01  
  4  +3.8767e-01  +6.0260e-01  2.15e-01  7.26e-03  8.30e-02  5.75e-03  2.39e-02  6.21e-01  
  5  +3.3259e-01  +3.6901e-01  3.64e-02  1.25e-03  1.41e-02  3.49e-04  4.70e-03  8.77e-01  
  6  +3.2037e-01  +3.2101e-01  6.33e-04  2.21e-05  2.47e-04  5.54e-06  8.68e-05  9.88e-01  
  7  +3.2011e-01  +3.2014e-01  2.25e-05  7.99e-07  8.84e-06  5.36e-08  3.34e-06  9.62e-01  
  8  +3.2010e-01  +3.2010e-01  2.27e-07  8.08e-09  8.93e-08  6.41e-10  3.54e-08  9.90e-01  
  9  +3.2010e-01  +3.2010e-01  2.27e-09  8.08e-11  8.93e-10  6.41e-12  3.54e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 154.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:33 PM: Optimal value: 3.201e-01
(CVXPY) Sep 20 03:04:33 PM: Compilation took 2.990e-03 seconds
(CVXPY) Sep 20 03:04:33 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.68
  Our objective: 0.36000000000000004

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.36)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.2241144180297852
Best over terms:
  Our final objective: 0.36000000000000004
    Its accruacy: 0.68
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.36000000000000004
  Highest accruacy: 0.68
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

