Command:
python test_script.py -s linear_dependence -d 7 -n 1000 --seed 43 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.158
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 7.

Computed total variation: 0.33199999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 515 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 6.106e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 515
  constraints   = 1015
  nnz(P)        = 0
  nnz(A)        = 5015
  cones (total) = 1
    : Nonnegative = 1,  numel = 1015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9992e-01  +5.0081e+02  5.00e+02  9.54e-01  3.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.8779e-01  +1.0547e+02  1.05e+02  3.89e-01  2.00e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3661e-01  +1.3225e+01  1.27e+01  1.34e-01  8.70e+00  1.33e-02  2.49e-01  8.82e-01  
  3  +5.0594e-01  +3.0319e+00  2.53e+00  5.17e-02  3.22e+00  2.89e-05  2.28e-01  3.37e-01  
  4  +5.0054e-01  +7.6787e-01  2.67e-01  5.86e-03  3.83e-01  9.49e-06  6.86e-02  8.29e-01  
  5  +4.9954e-01  +7.1274e-01  2.13e-01  3.62e-03  2.39e-01  2.33e-05  1.56e-02  8.47e-01  
  6  +4.8956e-01  +6.4909e-01  1.60e-01  4.64e-04  3.11e-02  1.61e-04  1.42e-03  9.13e-01  
  7  +4.7728e-01  +5.8012e-01  1.03e-01  2.64e-04  1.76e-02  8.13e-05  8.69e-04  5.05e-01  
  8  +4.6205e-01  +5.0100e-01  3.90e-02  9.08e-05  6.04e-03  1.58e-05  3.37e-04  7.83e-01  
  9  +4.5121e-01  +4.5437e-01  3.17e-03  6.46e-06  4.29e-04  9.42e-07  2.72e-05  9.44e-01  
 10  +4.5011e-01  +4.5015e-01  3.57e-05  7.19e-08  4.78e-06  1.05e-08  3.08e-07  9.89e-01  
 11  +4.5010e-01  +4.5010e-01  3.57e-07  7.19e-10  4.78e-08  1.05e-10  3.08e-09  9.90e-01  
 12  +4.5010e-01  +4.5010e-01  3.57e-09  7.19e-12  4.78e-10  1.05e-12  3.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.106ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 4.501e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 6.106e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 2.312e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 4.251e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 6045
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +5.0136e+02  5.01e+02  9.55e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.8647e-01  +1.0579e+02  1.05e+02  3.92e-01  2.09e+01  3.85e-03  5.53e-01  6.09e-01  
  2  +5.3479e-01  +1.2886e+01  1.24e+01  1.32e-01  8.83e+00  1.37e-02  2.47e-01  9.02e-01  
  3  +5.0501e-01  +2.8428e+00  2.34e+00  4.84e-02  3.15e+00  2.94e-05  2.18e-01  4.31e-01  
  4  +5.0106e-01  +1.0503e+00  5.49e-01  1.20e-02  8.14e-01  1.16e-05  9.41e-02  6.29e-01  
  5  +4.9923e-01  +7.7005e-01  2.71e-01  4.60e-03  3.18e-01  2.05e-05  1.78e-02  8.95e-01  
  6  +4.8982e-01  +7.0723e-01  2.17e-01  9.38e-04  6.64e-02  9.35e-05  2.68e-03  8.58e-01  
  7  +4.8675e-01  +7.0252e-01  2.16e-01  6.90e-04  4.87e-02  1.14e-04  1.95e-03  3.61e-01  
  8  +4.8100e-01  +6.7582e-01  1.95e-01  5.18e-04  3.65e-02  1.08e-04  1.47e-03  4.44e-01  
  9  +4.7161e-01  +6.3181e-01  1.60e-01  3.57e-04  2.52e-02  8.51e-05  1.01e-03  7.31e-01  
 10  +4.6598e-01  +6.0991e-01  1.44e-01  3.26e-04  2.30e-02  7.15e-05  9.41e-04  3.50e-01  
 11  +4.4648e-01  +5.3198e-01  8.55e-02  1.55e-04  1.10e-02  4.80e-05  4.58e-04  6.06e-01  
 12  +4.2087e-01  +4.3125e-01  1.04e-02  1.77e-05  1.25e-03  4.15e-06  5.53e-05  9.64e-01  
 13  +4.1840e-01  +4.2293e-01  4.53e-03  7.61e-06  5.43e-04  2.05e-06  2.38e-05  6.26e-01  
 14  +4.1720e-01  +4.1924e-01  2.04e-03  3.32e-06  2.42e-04  1.58e-06  1.05e-05  9.90e-01  
 15  +4.1632e-01  +4.1636e-01  3.80e-05  6.17e-08  4.50e-06  3.02e-08  1.95e-07  9.82e-01  
 16  +4.1630e-01  +4.1630e-01  3.80e-07  6.17e-10  4.51e-08  3.02e-10  1.95e-09  9.90e-01  
 17  +4.1630e-01  +4.1630e-01  3.80e-09  6.17e-12  4.51e-10  3.02e-12  1.95e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2055ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 4.163e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 4.251e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 3.694e-03 seconds
Iteration: 2, Objective: 0.4163
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 4.024e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 6363
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9966e-01  +5.0154e+02  5.01e+02  9.55e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.8527e-01  +1.0587e+02  1.05e+02  3.93e-01  2.09e+01  3.85e-03  5.54e-01  6.09e-01  
  2  +5.3361e-01  +1.2644e+01  1.21e+01  1.29e-01  8.66e+00  1.39e-02  2.42e-01  9.15e-01  
  3  +5.0438e-01  +2.7167e+00  2.21e+00  4.60e-02  3.02e+00  2.98e-05  2.07e-01  5.05e-01  
  4  +5.0120e-01  +1.2531e+00  7.52e-01  1.62e-02  1.10e+00  1.46e-05  9.94e-02  5.51e-01  
  5  +4.9672e-01  +9.6367e-01  4.67e-01  4.81e-03  3.41e-01  4.97e-05  1.42e-02  9.78e-01  
  6  +4.8662e-01  +8.6324e-01  3.77e-01  1.73e-03  1.23e-01  9.80e-05  4.77e-03  6.91e-01  
  7  +4.8019e-01  +8.4113e-01  3.61e-01  1.17e-03  8.34e-02  1.26e-04  3.22e-03  4.50e-01  
  8  +4.6113e-01  +7.2339e-01  2.62e-01  6.36e-04  4.54e-02  1.16e-04  1.80e-03  6.98e-01  
  9  +4.3182e-01  +5.6334e-01  1.32e-01  2.91e-04  2.06e-02  5.06e-05  8.87e-04  6.11e-01  
 10  +4.0709e-01  +4.4480e-01  3.77e-02  7.89e-05  5.60e-03  1.93e-05  2.57e-04  9.90e-01  
 11  +4.0105e-01  +4.1925e-01  1.82e-02  3.65e-05  2.60e-03  9.91e-06  1.21e-04  5.89e-01  
 12  +3.9915e-01  +4.1140e-01  1.22e-02  2.33e-05  1.68e-03  7.32e-06  7.63e-05  5.46e-01  
 13  +3.9809e-01  +4.0706e-01  8.97e-03  1.76e-05  1.27e-03  5.44e-06  5.87e-05  8.93e-01  
 14  +3.9557e-01  +3.9791e-01  2.33e-03  4.27e-06  3.16e-04  1.61e-06  1.42e-05  7.98e-01  
 15  +3.9463e-01  +3.9470e-01  6.96e-05  1.26e-07  9.37e-06  4.75e-08  4.24e-07  9.77e-01  
 16  +3.9460e-01  +3.9460e-01  7.02e-07  1.27e-09  9.45e-08  4.79e-10  4.28e-09  9.90e-01  
 17  +3.9460e-01  +3.9460e-01  7.02e-09  1.27e-11  9.45e-10  4.79e-12  4.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.5378ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 3.946e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 4.024e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 3.914e-03 seconds
Iteration: 3, Objective: 0.3946
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 543 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 4.056e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 543
  constraints   = 1043
  nnz(P)        = 0
  nnz(A)        = 6723
  cones (total) = 1
    : Nonnegative = 1,  numel = 1043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0142e+02  5.01e+02  9.55e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.8465e-01  +1.0581e+02  1.05e+02  3.94e-01  2.08e+01  3.86e-03  5.53e-01  6.09e-01  
  2  +5.3319e-01  +1.2543e+01  1.20e+01  1.28e-01  8.52e+00  1.40e-02  2.40e-01  9.20e-01  
  3  +5.0430e-01  +2.6975e+00  2.19e+00  4.57e-02  3.00e+00  3.01e-05  2.04e-01  5.20e-01  
  4  +5.0106e-01  +1.2061e+00  7.05e-01  1.52e-02  1.03e+00  1.43e-05  9.14e-02  5.81e-01  
  5  +4.9579e-01  +1.1084e+00  6.13e-01  5.06e-03  3.61e-01  6.63e-05  1.42e-02  9.90e-01  
  6  +4.8290e-01  +9.4072e-01  4.58e-01  1.73e-03  1.24e-01  1.14e-04  4.72e-03  6.81e-01  
  7  +4.7702e-01  +9.1197e-01  4.35e-01  1.20e-03  8.59e-02  1.54e-04  3.25e-03  5.44e-01  
  8  +4.6014e-01  +7.6379e-01  3.04e-01  7.25e-04  5.18e-02  1.26e-04  2.03e-03  6.86e-01  
  9  +4.2705e-01  +5.7601e-01  1.49e-01  3.16e-04  2.25e-02  5.57e-05  9.60e-04  6.31e-01  
 10  +3.9441e-01  +4.2452e-01  3.01e-02  6.11e-05  4.32e-03  8.60e-06  2.06e-04  8.30e-01  
 11  +3.8635e-01  +3.9275e-01  6.40e-03  1.27e-05  8.98e-04  2.27e-06  4.47e-05  8.35e-01  
 12  +3.8423e-01  +3.8433e-01  9.38e-05  1.86e-07  1.31e-05  3.30e-08  6.62e-07  9.86e-01  
 13  +3.8420e-01  +3.8420e-01  9.38e-07  1.86e-09  1.31e-07  3.30e-10  6.62e-09  9.90e-01  
 14  +3.8420e-01  +3.8420e-01  9.38e-09  1.86e-11  1.31e-09  3.30e-12  6.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2365ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 3.842e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 4.056e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 8.487e-03 seconds
Iteration: 4, Objective: 0.3842
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 553 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 3.506e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 553
  constraints   = 1053
  nnz(P)        = 0
  nnz(A)        = 6912
  cones (total) = 1
    : Nonnegative = 1,  numel = 1053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0150e+02  5.01e+02  9.55e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.8316e-01  +1.0591e+02  1.05e+02  3.96e-01  2.07e+01  3.85e-03  5.54e-01  6.09e-01  
  2  +5.3223e-01  +1.2354e+01  1.18e+01  1.26e-01  8.31e+00  1.42e-02  2.36e-01  9.32e-01  
  3  +5.0400e-01  +2.6400e+00  2.14e+00  4.46e-02  2.93e+00  3.10e-05  1.95e-01  5.72e-01  
  4  +5.0097e-01  +1.2861e+00  7.85e-01  1.67e-02  1.13e+00  1.65e-05  8.79e-02  5.67e-01  
  5  +4.9125e-01  +1.2454e+00  7.54e-01  4.18e-03  3.00e-01  1.04e-04  1.12e-02  9.90e-01  
  6  +4.6596e-01  +9.3442e-01  4.68e-01  1.21e-03  8.66e-02  1.51e-04  3.28e-03  7.22e-01  
  7  +4.5301e-01  +8.4219e-01  3.89e-01  9.01e-04  6.43e-02  1.41e-04  2.49e-03  3.60e-01  
  8  +4.2510e-01  +6.4384e-01  2.19e-01  4.90e-04  3.47e-02  8.10e-05  1.46e-03  6.00e-01  
  9  +3.9000e-01  +4.5410e-01  6.41e-02  1.36e-04  9.59e-03  2.04e-05  4.54e-04  7.63e-01  
 10  +3.7813e-01  +4.0028e-01  2.22e-02  4.64e-05  3.27e-03  9.63e-06  1.63e-04  8.14e-01  
 11  +3.7281e-01  +3.7847e-01  5.65e-03  1.18e-05  8.27e-04  2.61e-06  4.22e-05  7.97e-01  
 12  +3.7103e-01  +3.7112e-01  9.06e-05  1.88e-07  1.32e-05  4.26e-08  6.82e-07  9.87e-01  
 13  +3.7100e-01  +3.7100e-01  9.06e-07  1.88e-09  1.32e-07  4.26e-10  6.82e-09  9.90e-01  
 14  +3.7100e-01  +3.7100e-01  9.06e-09  1.88e-11  1.32e-09  4.26e-12  6.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.0615ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 3.710e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 3.506e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 4.360e-03 seconds
Iteration: 5, Objective: 0.3710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 563 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 4.214e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 563
  constraints   = 1063
  nnz(P)        = 0
  nnz(A)        = 7102
  cones (total) = 1
    : Nonnegative = 1,  numel = 1063

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0143e+02  5.01e+02  9.56e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.8173e-01  +1.0596e+02  1.05e+02  3.97e-01  2.06e+01  3.86e-03  5.54e-01  6.09e-01  
  2  +5.3100e-01  +1.2088e+01  1.16e+01  1.23e-01  8.08e+00  1.43e-02  2.31e-01  9.45e-01  
  3  +5.0364e-01  +2.5647e+00  2.06e+00  4.31e-02  2.83e+00  3.22e-05  1.83e-01  6.35e-01  
  4  +5.0037e-01  +1.2259e+00  7.26e-01  1.49e-02  1.02e+00  1.94e-05  6.84e-02  6.48e-01  
  5  +4.8394e-01  +1.2659e+00  7.82e-01  3.21e-03  2.30e-01  1.40e-04  8.48e-03  9.34e-01  
  6  +4.6382e-01  +1.0487e+00  5.85e-01  1.60e-03  1.14e-01  1.58e-04  4.36e-03  5.66e-01  
  7  +4.5088e-01  +9.2471e-01  4.74e-01  1.18e-03  8.40e-02  1.49e-04  3.32e-03  3.91e-01  
  8  +4.1903e-01  +6.4951e-01  2.30e-01  5.48e-04  3.85e-02  8.95e-05  1.69e-03  8.41e-01  
  9  +3.8277e-01  +4.5221e-01  6.94e-02  1.55e-04  1.08e-02  2.73e-05  5.43e-04  9.27e-01  
 10  +3.6975e-01  +3.9398e-01  2.42e-02  5.27e-05  3.68e-03  1.12e-05  1.96e-04  8.49e-01  
 11  +3.6397e-01  +3.7094e-01  6.97e-03  1.45e-05  1.03e-03  3.59e-06  5.58e-05  8.50e-01  
 12  +3.6160e-01  +3.6218e-01  5.73e-04  1.16e-06  8.28e-05  2.94e-07  4.60e-06  9.33e-01  
 13  +3.6140e-01  +3.6141e-01  5.94e-06  1.20e-08  8.58e-07  3.05e-09  4.77e-08  9.90e-01  
 14  +3.6140e-01  +3.6140e-01  5.94e-08  1.20e-10  8.58e-09  3.05e-11  4.77e-10  9.90e-01  
 15  +3.6140e-01  +3.6140e-01  5.94e-10  1.20e-12  8.58e-11  3.05e-13  4.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8076ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 3.614e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 4.214e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 4.189e-03 seconds
Iteration: 6, Objective: 0.3614
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 572 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 4.209e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 572
  constraints   = 1072
  nnz(P)        = 0
  nnz(A)        = 7283
  cones (total) = 1
    : Nonnegative = 1,  numel = 1072

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0141e+02  5.01e+02  9.56e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.8105e-01  +1.0604e+02  1.05e+02  3.98e-01  2.05e+01  3.86e-03  5.54e-01  6.08e-01  
  2  +5.3065e-01  +1.2011e+01  1.15e+01  1.22e-01  7.98e+00  1.44e-02  2.29e-01  9.49e-01  
  3  +5.0358e-01  +2.5567e+00  2.05e+00  4.30e-02  2.82e+00  3.27e-05  1.81e-01  6.49e-01  
  4  +5.0020e-01  +1.2162e+00  7.16e-01  1.46e-02  9.93e-01  2.07e-05  6.42e-02  6.68e-01  
  5  +4.8375e-01  +1.2867e+00  8.03e-01  3.36e-03  2.40e-01  1.42e-04  8.93e-03  9.25e-01  
  6  +4.6478e-01  +1.0676e+00  6.03e-01  1.71e-03  1.22e-01  1.59e-04  4.68e-03  5.64e-01  
  7  +4.5247e-01  +9.5613e-01  5.04e-01  1.26e-03  8.92e-02  1.60e-04  3.53e-03  4.01e-01  
  8  +4.4236e-01  +8.2514e-01  3.83e-01  1.03e-03  7.27e-02  1.37e-04  3.04e-03  5.48e-01  
  9  +4.0047e-01  +5.6445e-01  1.64e-01  3.67e-04  2.55e-02  5.49e-05  1.20e-03  6.56e-01  
 10  +3.8871e-01  +5.0337e-01  1.15e-01  2.53e-04  1.76e-02  4.66e-05  8.72e-04  4.91e-01  
 11  +3.6773e-01  +3.9896e-01  3.12e-02  6.80e-05  4.74e-03  1.36e-05  2.58e-04  8.07e-01  
 12  +3.6282e-01  +3.7937e-01  1.65e-02  3.50e-05  2.48e-03  7.46e-06  1.36e-04  5.73e-01  
 13  +3.5792e-01  +3.5921e-01  1.28e-03  2.68e-06  1.91e-04  5.69e-07  1.08e-05  9.37e-01  
 14  +3.5751e-01  +3.5752e-01  1.58e-05  3.29e-08  2.34e-06  6.93e-09  1.33e-07  9.89e-01  
 15  +3.5750e-01  +3.5750e-01  1.58e-07  3.29e-10  2.34e-08  6.93e-11  1.33e-09  9.90e-01  
 16  +3.5750e-01  +3.5750e-01  1.58e-09  3.29e-12  2.34e-10  6.94e-13  1.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5616ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 3.575e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 4.209e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 8.403e-03 seconds
Iteration: 7, Objective: 0.3575
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 582 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 4.166e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 582
  constraints   = 1082
  nnz(P)        = 0
  nnz(A)        = 7514
  cones (total) = 1
    : Nonnegative = 1,  numel = 1082

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0157e+02  5.01e+02  9.56e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.7983e-01  +1.0619e+02  1.06e+02  4.00e-01  2.04e+01  3.86e-03  5.54e-01  6.08e-01  
  2  +5.2960e-01  +1.1798e+01  1.13e+01  1.20e-01  7.79e+00  1.46e-02  2.25e-01  9.62e-01  
  3  +5.0324e-01  +2.4867e+00  1.98e+00  4.15e-02  2.73e+00  3.40e-05  1.70e-01  7.13e-01  
  4  +4.9965e-01  +1.2725e+00  7.73e-01  1.47e-02  1.01e+00  2.84e-05  5.59e-02  7.10e-01  
  5  +4.8091e-01  +1.2639e+00  7.83e-01  3.17e-03  2.27e-01  1.66e-04  8.30e-03  9.27e-01  
  6  +4.5897e-01  +1.0404e+00  5.81e-01  1.57e-03  1.12e-01  1.80e-04  4.27e-03  5.77e-01  
  7  +4.4585e-01  +8.9556e-01  4.50e-01  1.25e-03  8.85e-02  1.38e-04  3.54e-03  3.58e-01  
  8  +4.1002e-01  +6.4393e-01  2.34e-01  5.70e-04  3.98e-02  8.70e-05  1.79e-03  8.46e-01  
  9  +3.7638e-01  +4.5524e-01  7.89e-02  1.83e-04  1.27e-02  2.61e-05  6.62e-04  7.11e-01  
 10  +3.6677e-01  +4.0727e-01  4.05e-02  9.29e-05  6.46e-03  1.60e-05  3.55e-04  6.97e-01  
 11  +3.6172e-01  +3.8491e-01  2.32e-02  5.21e-05  3.64e-03  9.98e-06  2.04e-04  5.86e-01  
 12  +3.5600e-01  +3.6012e-01  4.12e-03  8.91e-06  6.35e-04  2.00e-06  3.65e-05  9.14e-01  
 13  +3.5468e-01  +3.5491e-01  2.23e-04  4.83e-07  3.44e-05  9.99e-08  2.02e-06  9.90e-01  
 14  +3.5460e-01  +3.5460e-01  2.26e-06  4.88e-09  3.47e-07  1.00e-09  2.04e-08  9.90e-01  
 15  +3.5460e-01  +3.5460e-01  2.26e-08  4.88e-11  3.47e-09  1.00e-11  2.04e-10  9.90e-01  
 16  +3.5460e-01  +3.5460e-01  2.26e-10  4.88e-13  3.47e-11  1.00e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8172ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 3.546e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 4.166e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 8.876e-03 seconds
Iteration: 8, Objective: 0.3546
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 4.201e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 7607
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0160e+02  5.01e+02  9.56e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.7924e-01  +1.0625e+02  1.06e+02  4.00e-01  2.03e+01  3.86e-03  5.53e-01  6.07e-01  
  2  +5.2919e-01  +1.1709e+01  1.12e+01  1.18e-01  7.70e+00  1.46e-02  2.23e-01  9.66e-01  
  3  +5.0316e-01  +2.4728e+00  1.97e+00  4.12e-02  2.70e+00  3.46e-05  1.67e-01  7.30e-01  
  4  +4.9928e-01  +1.2523e+00  7.53e-01  1.38e-02  9.50e-01  3.19e-05  5.00e-02  7.49e-01  
  5  +4.7919e-01  +1.1837e+00  7.05e-01  2.81e-03  2.01e-01  1.72e-04  7.36e-03  9.15e-01  
  6  +4.6323e-01  +1.0668e+00  6.04e-01  1.67e-03  1.19e-01  2.06e-04  4.48e-03  5.36e-01  
  7  +4.3852e-01  +8.2987e-01  3.91e-01  1.09e-03  7.66e-02  1.24e-04  3.14e-03  5.86e-01  
  8  +4.0513e-01  +6.2396e-01  2.19e-01  5.42e-04  3.77e-02  7.00e-05  1.74e-03  5.84e-01  
  9  +3.7250e-01  +4.4495e-01  7.24e-02  1.70e-04  1.18e-02  2.23e-05  6.30e-04  7.36e-01  
 10  +3.5879e-01  +3.7862e-01  1.98e-02  4.55e-05  3.13e-03  8.54e-06  1.86e-04  9.60e-01  
 11  +3.5440e-01  +3.6036e-01  5.96e-03  1.34e-05  9.25e-04  2.61e-06  5.72e-05  7.89e-01  
 12  +3.5265e-01  +3.5280e-01  1.55e-04  3.47e-07  2.39e-05  6.12e-08  1.52e-06  9.76e-01  
 13  +3.5260e-01  +3.5260e-01  1.66e-06  3.72e-09  2.56e-07  6.54e-10  1.63e-08  9.89e-01  
 14  +3.5260e-01  +3.5260e-01  1.66e-08  3.72e-11  2.56e-09  6.54e-12  1.63e-10  9.90e-01  
 15  +3.5260e-01  +3.5260e-01  1.66e-10  3.72e-13  2.56e-11  6.54e-14  1.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1051ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 3.526e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 4.201e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 4.266e-03 seconds
Iteration: 9, Objective: 0.3526
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 597 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 4.714e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 597
  constraints   = 1097
  nnz(P)        = 0
  nnz(A)        = 7729
  cones (total) = 1
    : Nonnegative = 1,  numel = 1097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0162e+02  5.01e+02  9.56e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.7817e-01  +1.0642e+02  1.06e+02  4.02e-01  2.02e+01  3.86e-03  5.55e-01  6.06e-01  
  2  +5.2838e-01  +1.1547e+01  1.10e+01  1.17e-01  7.56e+00  1.48e-02  2.21e-01  9.75e-01  
  3  +5.0295e-01  +2.4312e+00  1.93e+00  4.02e-02  2.64e+00  3.60e-05  1.59e-01  7.75e-01  
  4  +4.9898e-01  +1.4031e+00  9.04e-01  1.55e-02  1.06e+00  3.94e-05  5.18e-02  7.23e-01  
  5  +4.8035e-01  +1.3935e+00  9.13e-01  3.83e-03  2.72e-01  1.83e-04  1.00e-02  9.42e-01  
  6  +4.5939e-01  +1.1175e+00  6.58e-01  1.94e-03  1.37e-01  1.88e-04  5.29e-03  5.87e-01  
  7  +4.4523e-01  +1.0031e+00  5.58e-01  1.41e-03  9.91e-02  1.85e-04  3.96e-03  3.76e-01  
  8  +4.1127e-01  +6.8155e-01  2.70e-01  7.02e-04  4.85e-02  8.69e-05  2.24e-03  7.25e-01  
  9  +3.7859e-01  +4.8162e-01  1.03e-01  2.51e-04  1.72e-02  2.97e-05  9.12e-04  6.75e-01  
 10  +3.6943e-01  +4.3744e-01  6.80e-02  1.60e-04  1.09e-02  2.14e-05  6.10e-04  4.25e-01  
 11  +3.5803e-01  +3.8274e-01  2.47e-02  5.61e-05  3.82e-03  8.50e-06  2.32e-04  7.10e-01  
 12  +3.5185e-01  +3.5422e-01  2.37e-03  5.32e-06  3.62e-04  7.91e-07  2.33e-05  9.14e-01  
 13  +3.5116e-01  +3.5120e-01  3.99e-05  8.92e-08  6.07e-06  1.25e-08  3.98e-07  9.86e-01  
 14  +3.5115e-01  +3.5115e-01  4.06e-07  9.09e-10  6.19e-08  1.28e-10  4.06e-09  9.90e-01  
 15  +3.5115e-01  +3.5115e-01  4.06e-09  9.09e-12  6.19e-10  1.28e-12  4.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.5685ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 3.512e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 4.714e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 8.348e-03 seconds
Iteration: 10, Objective: 0.3512
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:26 PM: Your problem has 600 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:26 PM: Finished problem compilation (took 3.453e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 600
  constraints   = 1100
  nnz(P)        = 0
  nnz(A)        = 7757
  cones (total) = 1
    : Nonnegative = 1,  numel = 1100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0162e+02  5.01e+02  9.56e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.7773e-01  +1.0645e+02  1.06e+02  4.02e-01  2.02e+01  3.86e-03  5.55e-01  6.06e-01  
  2  +5.2811e-01  +1.1491e+01  1.10e+01  1.16e-01  7.50e+00  1.48e-02  2.20e-01  9.78e-01  
  3  +5.0286e-01  +2.4137e+00  1.91e+00  3.98e-02  2.61e+00  3.65e-05  1.56e-01  7.91e-01  
  4  +4.9886e-01  +1.4421e+00  9.43e-01  1.58e-02  1.08e+00  4.13e-05  5.16e-02  7.15e-01  
  5  +4.7989e-01  +1.4078e+00  9.28e-01  3.86e-03  2.74e-01  1.86e-04  1.01e-02  9.39e-01  
  6  +4.5672e-01  +1.1261e+00  6.69e-01  1.90e-03  1.34e-01  1.95e-04  5.20e-03  5.91e-01  
  7  +4.4563e-01  +1.0132e+00  5.68e-01  1.52e-03  1.06e-01  1.79e-04  4.28e-03  3.18e-01  
  8  +4.0715e-01  +6.4900e-01  2.42e-01  6.30e-04  4.34e-02  8.87e-05  2.05e-03  9.90e-01  
  9  +3.7461e-01  +4.6230e-01  8.77e-02  2.15e-04  1.47e-02  2.77e-05  8.04e-04  6.95e-01  
 10  +3.6526e-01  +4.1808e-01  5.28e-02  1.26e-04  8.56e-03  1.76e-05  4.98e-04  4.95e-01  
 11  +3.5493e-01  +3.6951e-01  1.46e-02  3.36e-05  2.28e-03  5.17e-06  1.44e-04  7.94e-01  
 12  +3.5139e-01  +3.5360e-01  2.21e-03  4.95e-06  3.35e-04  8.23e-07  2.25e-05  8.87e-01  
 13  +3.5079e-01  +3.5104e-01  2.54e-04  5.65e-07  3.82e-05  1.00e-07  2.62e-06  9.90e-01  
 14  +3.5070e-01  +3.5070e-01  2.80e-06  6.24e-09  4.22e-07  1.09e-09  2.90e-08  9.89e-01  
 15  +3.5070e-01  +3.5070e-01  2.81e-08  6.25e-11  4.23e-09  1.10e-11  2.91e-10  9.90e-01  
 16  +3.5070e-01  +3.5070e-01  2.81e-10  6.25e-13  4.23e-11  1.10e-13  2.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0333ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:26 PM: Optimal value: 3.507e-01
(CVXPY) Sep 20 03:11:26 PM: Compilation took 3.453e-03 seconds
(CVXPY) Sep 20 03:11:26 PM: Solver (including time spent in interface) took 1.291e-02 seconds
Iteration: 11, Objective: 0.3507
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:27 PM: Your problem has 602 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:27 PM: Finished problem compilation (took 1.974e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 602
  constraints   = 1102
  nnz(P)        = 0
  nnz(A)        = 7782
  cones (total) = 1
    : Nonnegative = 1,  numel = 1102

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0161e+02  5.01e+02  9.56e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.7765e-01  +1.0643e+02  1.06e+02  4.02e-01  2.02e+01  3.86e-03  5.54e-01  6.06e-01  
  2  +5.2801e-01  +1.1469e+01  1.09e+01  1.16e-01  7.46e+00  1.48e-02  2.19e-01  9.80e-01  
  3  +5.0283e-01  +2.4042e+00  1.90e+00  3.96e-02  2.60e+00  3.67e-05  1.54e-01  7.99e-01  
  4  +4.9887e-01  +1.4581e+00  9.59e-01  1.59e-02  1.09e+00  4.19e-05  5.18e-02  7.09e-01  
  5  +4.8023e-01  +1.4403e+00  9.60e-01  3.98e-03  2.83e-01  1.90e-04  1.04e-02  9.46e-01  
  6  +4.5542e-01  +1.1226e+00  6.67e-01  1.87e-03  1.31e-01  1.95e-04  5.12e-03  6.10e-01  
  7  +4.4604e-01  +1.0233e+00  5.77e-01  1.54e-03  1.08e-01  1.85e-04  4.35e-03  3.15e-01  
  8  +4.1189e-01  +6.8252e-01  2.71e-01  7.20e-04  4.96e-02  1.00e-04  2.30e-03  9.90e-01  
  9  +3.7626e-01  +4.7196e-01  9.57e-02  2.34e-04  1.59e-02  2.91e-05  8.56e-04  6.93e-01  
 10  +3.6817e-01  +4.3570e-01  6.75e-02  1.57e-04  1.07e-02  2.33e-05  5.94e-04  4.55e-01  
 11  +3.5686e-01  +3.8292e-01  2.61e-02  5.89e-05  4.00e-03  1.04e-05  2.40e-04  7.88e-01  
 12  +3.5018e-01  +3.5311e-01  2.93e-03  6.53e-06  4.44e-04  1.15e-06  2.82e-05  9.04e-01  
 13  +3.4928e-01  +3.4936e-01  8.31e-05  1.84e-07  1.25e-05  3.12e-08  8.10e-07  9.79e-01  
 14  +3.4925e-01  +3.4925e-01  8.47e-07  1.88e-09  1.28e-07  3.18e-10  8.27e-09  9.90e-01  
 15  +3.4925e-01  +3.4925e-01  8.47e-09  1.88e-11  1.28e-09  3.18e-12  8.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0961ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:27 PM: Optimal value: 3.493e-01
(CVXPY) Sep 20 03:11:27 PM: Compilation took 1.974e-03 seconds
(CVXPY) Sep 20 03:11:27 PM: Solver (including time spent in interface) took 1.131e-02 seconds
Iteration: 12, Objective: 0.3493
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:27 PM: Your problem has 603 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:27 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 603
  constraints   = 1103
  nnz(P)        = 0
  nnz(A)        = 7792
  cones (total) = 1
    : Nonnegative = 1,  numel = 1103

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0161e+02  5.01e+02  9.56e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.7763e-01  +1.0642e+02  1.06e+02  4.02e-01  2.02e+01  3.86e-03  5.54e-01  6.07e-01  
  2  +5.2798e-01  +1.1460e+01  1.09e+01  1.16e-01  7.45e+00  1.48e-02  2.19e-01  9.80e-01  
  3  +5.0282e-01  +2.4016e+00  1.90e+00  3.95e-02  2.59e+00  3.67e-05  1.54e-01  8.01e-01  
  4  +4.9884e-01  +1.4541e+00  9.55e-01  1.58e-02  1.09e+00  4.20e-05  5.13e-02  7.11e-01  
  5  +4.8010e-01  +1.4319e+00  9.52e-01  3.94e-03  2.80e-01  1.89e-04  1.03e-02  9.46e-01  
  6  +4.5554e-01  +1.1222e+00  6.67e-01  1.87e-03  1.31e-01  1.95e-04  5.11e-03  6.05e-01  
  7  +4.4621e-01  +1.0237e+00  5.78e-01  1.54e-03  1.08e-01  1.85e-04  4.35e-03  3.11e-01  
  8  +4.1205e-01  +6.8309e-01  2.71e-01  7.21e-04  4.96e-02  1.01e-04  2.31e-03  9.90e-01  
  9  +3.7663e-01  +4.7407e-01  9.74e-02  2.38e-04  1.62e-02  2.98e-05  8.69e-04  6.87e-01  
 10  +3.6759e-01  +4.3312e-01  6.55e-02  1.52e-04  1.03e-02  2.26e-05  5.76e-04  4.73e-01  
 11  +3.5630e-01  +3.8030e-01  2.40e-02  5.41e-05  3.68e-03  9.73e-06  2.20e-04  8.14e-01  
 12  +3.5032e-01  +3.5377e-01  3.46e-03  7.69e-06  5.23e-04  1.41e-06  3.29e-05  8.96e-01  
 13  +3.4930e-01  +3.4947e-01  1.69e-04  3.75e-07  2.55e-05  6.76e-08  1.63e-06  9.63e-01  
 14  +3.4925e-01  +3.4925e-01  1.73e-06  3.85e-09  2.61e-07  6.92e-10  1.67e-08  9.90e-01  
 15  +3.4925e-01  +3.4925e-01  1.73e-08  3.85e-11  2.61e-09  6.92e-12  1.67e-10  9.90e-01  
 16  +3.4925e-01  +3.4925e-01  1.74e-10  3.85e-13  2.62e-11  6.94e-14  1.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4922ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:27 PM: Optimal value: 3.493e-01
(CVXPY) Sep 20 03:11:27 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 03:11:27 PM: Solver (including time spent in interface) took 1.000e-02 seconds
FULL MODEL:
  Accruacy: 0.616
  Our objective: 0.23199999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.158)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0)                                  <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1)            <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.018)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.6381804943084717
Best over terms:
  Our final objective: 0.15799999999999997
    Its accruacy: 0.579
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15799999999999997
  Highest accruacy: 0.579
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

