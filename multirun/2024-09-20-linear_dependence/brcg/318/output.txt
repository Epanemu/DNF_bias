Command:
python test_script.py -s linear_dependence -d 8 -n 50000 --seed 34 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15380000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.1616
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:07 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:07 PM: Finished problem compilation (took 1.088e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3196e+02  6.31e+02  1.70e-01  8.23e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6455e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0121e-01  +1.5743e+01  1.52e+01  4.25e-02  2.04e+01  4.79e-06  1.95e-01  4.49e-01  
  5  +5.0000e-01  +1.1612e+00  6.61e-01  1.98e-03  9.85e-01  2.74e-05  1.88e-01  3.05e-01  
  6  +4.9999e-01  +6.3655e-01  1.37e-01  4.07e-04  2.03e-01  9.16e-06  3.34e-02  8.38e-01  
  7  +4.9974e-01  +7.5605e-01  2.56e-01  6.22e-04  3.11e-01  1.40e-04  3.66e-03  9.29e-01  
  8  +4.9030e-01  +7.1870e-01  2.28e-01  2.94e-05  1.47e-02  4.73e-03  9.11e-05  9.75e-01  
  9  +4.7432e-01  +6.2355e-01  1.49e-01  7.98e-06  4.00e-03  7.83e-03  2.49e-05  7.48e-01  
 10  +4.6484e-01  +5.1470e-01  4.99e-02  2.67e-06  1.34e-03  8.70e-04  8.87e-06  7.62e-01  
 11  +4.5633e-01  +4.6531e-01  8.98e-03  4.40e-07  2.20e-04  1.29e-04  1.57e-06  8.34e-01  
 12  +4.5342e-01  +4.5400e-01  5.79e-04  2.42e-08  1.21e-05  2.17e-06  1.02e-07  9.82e-01  
 13  +4.5326e-01  +4.5327e-01  5.82e-06  2.43e-10  1.22e-07  2.18e-08  1.03e-09  9.90e-01  
 14  +4.5326e-01  +4.5326e-01  5.82e-08  2.43e-12  1.22e-09  2.18e-10  1.03e-11  9.90e-01  
 15  +4.5326e-01  +4.5326e-01  5.83e-10  2.44e-14  1.22e-11  2.40e-12  1.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 308.5302ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:07 PM: Optimal value: 4.533e-01
(CVXPY) Sep 20 03:16:07 PM: Compilation took 1.088e-01 seconds
(CVXPY) Sep 20 03:16:07 PM: Solver (including time spent in interface) took 3.401e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:07 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:08 PM: Finished problem compilation (took 1.024e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 319090
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3164e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6437e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5605e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.55e-01  
  5  +5.0004e-01  +1.6871e+00  1.19e+00  3.56e-03  1.84e+00  2.99e-05  1.88e-01  2.20e-01  
  6  +5.0001e-01  +7.8178e-01  2.82e-01  8.41e-04  4.36e-01  7.56e-06  5.82e-02  7.31e-01  
  7  +5.0001e-01  +9.4734e-01  4.47e-01  1.33e-03  6.87e-01  1.31e-05  3.24e-02  8.41e-01  
  8  +4.9993e-01  +7.5366e-01  2.54e-01  6.38e-04  3.32e-01  4.48e-05  3.66e-03  8.97e-01  
  9  +4.9812e-01  +7.4523e-01  2.47e-01  5.93e-05  3.11e-02  9.29e-04  1.64e-04  9.55e-01  
 10  +4.9795e-01  +7.3520e-01  2.37e-01  4.69e-05  2.46e-02  9.51e-04  1.29e-04  3.38e-01  
 11  +4.9969e-01  +7.0096e-01  2.01e-01  4.05e-05  2.13e-02  9.59e-06  1.09e-04  9.63e-01  
 12  +4.9880e-01  +6.9384e-01  1.95e-01  1.42e-05  7.44e-03  2.42e-05  3.75e-05  7.42e-01  
 13  +4.9827e-01  +6.9104e-01  1.93e-01  1.19e-05  6.25e-03  2.45e-05  3.14e-05  2.89e-01  
 14  +4.9814e-01  +6.9041e-01  1.92e-01  1.19e-05  6.23e-03  2.36e-05  3.13e-05  3.72e-02  
 15  +4.9745e-01  +6.8743e-01  1.90e-01  1.03e-05  5.42e-03  2.44e-05  2.72e-05  2.00e-01  
 16  +4.9651e-01  +6.8242e-01  1.86e-01  1.02e-05  5.34e-03  1.97e-05  2.70e-05  1.70e-01  
 17  +4.9597e-01  +6.7723e-01  1.81e-01  1.02e-05  5.33e-03  1.81e-05  2.69e-05  4.04e-02  
 18  +4.9435e-01  +6.7112e-01  1.77e-01  8.88e-06  4.66e-03  1.73e-05  2.36e-05  2.31e-01  
 19  +4.9408e-01  +6.7035e-01  1.76e-01  8.86e-06  4.64e-03  1.67e-05  2.35e-05  2.86e-02  
 20  +4.8793e-01  +6.4963e-01  1.62e-01  7.13e-06  3.73e-03  2.85e-06  1.93e-05  9.14e-01  
 21  +4.8519e-01  +6.3939e-01  1.54e-01  6.87e-06  3.59e-03  2.45e-06  1.92e-05  1.21e-01  
 22  +4.6712e-01  +5.6649e-01  9.94e-02  3.99e-06  2.08e-03  9.03e-07  1.16e-05  9.18e-01  
 23  +4.6077e-01  +5.5028e-01  8.95e-02  3.27e-06  1.70e-03  8.82e-07  9.49e-06  2.48e-01  
 24  +4.4254e-01  +4.8998e-01  4.74e-02  1.55e-06  8.09e-04  5.82e-07  4.68e-06  8.17e-01  
 25  +4.2468e-01  +4.2786e-01  3.18e-03  1.01e-07  5.24e-05  2.93e-08  3.19e-07  9.73e-01  
 26  +4.2322e-01  +4.2325e-01  3.28e-05  1.03e-09  5.38e-07  2.97e-10  3.29e-09  9.90e-01  
 27  +4.2320e-01  +4.2320e-01  3.28e-07  1.03e-11  5.38e-09  2.97e-12  3.29e-11  9.90e-01  
 28  +4.2320e-01  +4.2320e-01  3.28e-09  1.03e-13  5.38e-11  3.04e-14  3.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 620.8352ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:08 PM: Optimal value: 4.232e-01
(CVXPY) Sep 20 03:16:08 PM: Compilation took 1.024e-01 seconds
(CVXPY) Sep 20 03:16:08 PM: Solver (including time spent in interface) took 6.557e-01 seconds
Iteration: 2, Objective: 0.4232
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:08 PM: Your problem has 25033 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:08 PM: Finished problem compilation (took 1.009e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25033
  constraints   = 50033
  nnz(P)        = 0
  nnz(A)        = 320712
  cones (total) = 1
    : Nonnegative = 1,  numel = 50033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3153e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0120e-01  +1.5606e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.55e-01  
  5  +5.0004e-01  +1.7100e+00  1.21e+00  3.63e-03  1.87e+00  2.99e-05  1.88e-01  2.16e-01  
  6  +5.0001e-01  +8.1901e-01  3.19e-01  9.52e-04  4.94e-01  8.38e-06  6.48e-02  6.89e-01  
  7  +5.0000e-01  +7.9082e-01  2.91e-01  8.67e-04  4.49e-01  1.08e-05  3.40e-02  5.61e-01  
  8  +4.9994e-01  +7.5173e-01  2.52e-01  6.94e-04  3.60e-01  4.21e-05  5.51e-03  8.77e-01  
  9  +4.9607e-01  +7.2984e-01  2.34e-01  3.75e-05  1.97e-02  1.94e-03  1.04e-04  9.83e-01  
 10  +4.9421e-01  +7.1736e-01  2.23e-01  2.34e-05  1.23e-02  2.50e-03  6.46e-05  4.86e-01  
 11  +4.9451e-01  +7.1599e-01  2.21e-01  2.31e-05  1.21e-02  2.34e-03  6.35e-05  7.97e-02  
 12  +4.9403e-01  +7.1001e-01  2.16e-01  1.92e-05  1.00e-02  2.33e-03  5.23e-05  2.94e-01  
 13  +4.9517e-01  +7.0161e-01  2.06e-01  1.82e-05  9.55e-03  1.46e-03  4.92e-05  3.75e-01  
 14  +4.9034e-01  +6.8194e-01  1.92e-01  1.02e-05  5.36e-03  2.10e-03  2.77e-05  4.77e-01  
 15  +4.8836e-01  +6.7105e-01  1.83e-01  9.11e-06  4.77e-03  1.83e-03  2.47e-05  2.14e-01  
 16  +4.8649e-01  +6.6259e-01  1.76e-01  8.33e-06  4.36e-03  1.71e-03  2.27e-05  1.35e-01  
 17  +4.8540e-01  +6.5610e-01  1.71e-01  8.13e-06  4.25e-03  1.42e-03  2.26e-05  9.94e-02  
 18  +4.8042e-01  +6.3376e-01  1.53e-01  6.76e-06  3.53e-03  1.20e-03  1.90e-05  2.27e-01  
 19  +4.7814e-01  +6.2028e-01  1.42e-01  6.49e-06  3.39e-03  7.02e-04  1.87e-05  2.57e-01  
 20  +4.7493e-01  +6.0494e-01  1.30e-01  5.87e-06  3.06e-03  5.07e-04  1.70e-05  2.33e-01  
 21  +4.7466e-01  +6.0399e-01  1.29e-01  5.81e-06  3.03e-03  4.85e-04  1.68e-05  4.50e-02  
 22  +4.7400e-01  +6.0203e-01  1.28e-01  5.67e-06  2.96e-03  3.71e-04  1.62e-05  2.24e-01  
 23  +4.6058e-01  +5.5224e-01  9.17e-02  3.54e-06  1.84e-03  2.30e-04  1.03e-05  4.49e-01  
 24  +4.4035e-01  +4.8298e-01  4.26e-02  1.44e-06  7.48e-04  7.80e-05  4.39e-06  6.59e-01  
 25  +4.2350e-01  +4.2603e-01  2.52e-03  8.07e-08  4.20e-05  7.86e-07  2.58e-07  9.62e-01  
 26  +4.2231e-01  +4.2234e-01  2.86e-05  9.12e-10  4.74e-07  8.59e-09  2.93e-09  9.89e-01  
 27  +4.2230e-01  +4.2230e-01  2.86e-07  9.12e-12  4.74e-09  8.59e-11  2.93e-11  9.90e-01  
 28  +4.2230e-01  +4.2230e-01  2.86e-09  9.13e-14  4.74e-11  8.83e-13  3.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 647.7743ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:09 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:09 PM: Optimal value: 4.223e-01
(CVXPY) Sep 20 03:16:09 PM: Compilation took 1.009e-01 seconds
(CVXPY) Sep 20 03:16:09 PM: Solver (including time spent in interface) took 6.857e-01 seconds
Iteration: 3, Objective: 0.4223
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:09 PM: Your problem has 25040 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:09 PM: Finished problem compilation (took 1.146e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25040
  constraints   = 50040
  nnz(P)        = 0
  nnz(A)        = 322228
  cones (total) = 1
    : Nonnegative = 1,  numel = 50040

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3144e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6431e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0120e-01  +1.5607e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.55e-01  
  5  +5.0004e-01  +1.7044e+00  1.20e+00  3.61e-03  1.86e+00  3.00e-05  1.88e-01  2.19e-01  
  6  +5.0001e-01  +8.1695e-01  3.17e-01  9.46e-04  4.90e-01  8.45e-06  6.41e-02  6.93e-01  
  7  +5.0000e-01  +7.8647e-01  2.86e-01  8.52e-04  4.42e-01  1.33e-05  2.46e-02  7.40e-01  
  8  +4.9981e-01  +7.5684e-01  2.57e-01  5.28e-04  2.75e-01  1.02e-04  2.26e-03  9.29e-01  
  9  +4.9890e-01  +7.5302e-01  2.54e-01  1.41e-04  7.35e-02  5.43e-04  4.11e-04  8.18e-01  
 10  +4.9825e-01  +7.4243e-01  2.44e-01  8.11e-05  4.25e-02  8.22e-04  2.29e-04  5.29e-01  
 11  +4.9934e-01  +7.0889e-01  2.10e-01  5.58e-05  2.93e-02  2.28e-04  1.52e-04  9.90e-01  
 12  +4.9684e-01  +6.9759e-01  2.01e-01  1.31e-05  6.90e-03  9.09e-04  3.50e-05  7.87e-01  
 13  +4.9677e-01  +6.9540e-01  1.99e-01  1.23e-05  6.44e-03  5.43e-04  3.26e-05  4.67e-01  
 14  +4.9639e-01  +6.9352e-01  1.97e-01  1.20e-05  6.28e-03  5.01e-04  3.18e-05  1.05e-01  
 15  +4.9375e-01  +6.7975e-01  1.86e-01  9.64e-06  5.06e-03  6.34e-05  2.60e-05  9.45e-01  
 16  +4.8935e-01  +6.6058e-01  1.71e-01  7.96e-06  4.17e-03  4.39e-05  2.16e-05  4.17e-01  
 17  +4.8702e-01  +6.5160e-01  1.65e-01  7.67e-06  4.02e-03  3.27e-05  2.10e-05  2.03e-01  
 18  +4.8394e-01  +6.3979e-01  1.56e-01  6.94e-06  3.63e-03  2.94e-05  1.91e-05  1.45e-01  
 19  +4.7570e-01  +6.0936e-01  1.34e-01  6.05e-06  3.16e-03  2.68e-07  1.80e-05  7.56e-01  
 20  +4.6883e-01  +5.8110e-01  1.12e-01  4.84e-06  2.52e-03  4.79e-07  1.45e-05  3.90e-01  
 21  +4.6337e-01  +5.6115e-01  9.78e-02  4.03e-06  2.10e-03  5.77e-07  1.20e-05  3.51e-01  
 22  +4.5182e-01  +5.2354e-01  7.17e-02  2.61e-06  1.36e-03  7.00e-07  7.79e-06  7.25e-01  
 23  +4.4863e-01  +5.1263e-01  6.40e-02  2.28e-06  1.19e-03  6.42e-07  6.87e-06  1.86e-01  
 24  +4.4072e-01  +4.8554e-01  4.48e-02  1.52e-06  7.93e-04  5.09e-07  4.67e-06  5.48e-01  
 25  +4.4044e-01  +4.8440e-01  4.40e-02  1.48e-06  7.70e-04  5.40e-07  4.53e-06  2.46e-01  
 26  +4.2845e-01  +4.4386e-01  1.54e-02  5.01e-07  2.61e-04  1.98e-07  1.59e-06  7.63e-01  
 27  +4.2620e-01  +4.3592e-01  9.73e-03  3.12e-07  1.62e-04  1.54e-07  9.92e-07  9.90e-01  
 28  +4.2297e-01  +4.2559e-01  2.63e-03  8.45e-08  4.39e-05  4.20e-08  2.72e-07  8.11e-01  
 29  +4.2178e-01  +4.2182e-01  4.14e-05  1.33e-09  6.92e-07  6.54e-10  4.31e-09  9.90e-01  
 30  +4.2176e-01  +4.2176e-01  4.14e-07  1.33e-11  6.92e-09  6.54e-12  4.31e-11  9.90e-01  
 31  +4.2176e-01  +4.2176e-01  4.23e-09  1.36e-13  7.08e-11  6.59e-14  4.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 770.0459ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:10 PM: Optimal value: 4.218e-01
(CVXPY) Sep 20 03:16:10 PM: Compilation took 1.146e-01 seconds
(CVXPY) Sep 20 03:16:10 PM: Solver (including time spent in interface) took 8.047e-01 seconds
Iteration: 4, Objective: 0.4218
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:10 PM: Your problem has 25041 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:10 PM: Finished problem compilation (took 1.189e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25041
  constraints   = 50041
  nnz(P)        = 0
  nnz(A)        = 322431
  cones (total) = 1
    : Nonnegative = 1,  numel = 50041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3140e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0958e-01  +1.6430e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0120e-01  +1.5608e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.55e-01  
  5  +5.0004e-01  +1.7009e+00  1.20e+00  3.60e-03  1.86e+00  3.00e-05  1.88e-01  2.20e-01  
  6  +5.0001e-01  +8.3434e-01  3.34e-01  9.98e-04  5.17e-01  8.92e-06  6.71e-02  6.77e-01  
  7  +5.0000e-01  +7.8156e-01  2.82e-01  8.38e-04  4.35e-01  1.30e-05  2.54e-02  7.31e-01  
  8  +4.9984e-01  +7.6018e-01  2.60e-01  5.72e-04  2.98e-01  9.21e-05  2.63e-03  9.21e-01  
  9  +4.9882e-01  +7.5590e-01  2.57e-01  1.37e-04  7.17e-02  5.82e-04  4.00e-04  8.48e-01  
 10  +4.9829e-01  +7.4819e-01  2.50e-01  8.88e-05  4.65e-02  8.13e-04  2.52e-04  4.35e-01  
 11  +4.9945e-01  +7.1127e-01  2.12e-01  6.26e-05  3.28e-02  1.92e-04  1.71e-04  9.90e-01  
 12  +4.9691e-01  +6.9989e-01  2.03e-01  1.26e-05  6.61e-03  9.04e-04  3.35e-05  8.17e-01  
 13  +4.9651e-01  +6.9750e-01  2.01e-01  1.12e-05  5.87e-03  7.13e-04  2.97e-05  3.77e-01  
 14  +4.9626e-01  +6.9574e-01  1.99e-01  1.11e-05  5.84e-03  6.75e-04  2.96e-05  4.54e-02  
 15  +4.9400e-01  +6.8559e-01  1.92e-01  9.32e-06  4.89e-03  5.93e-04  2.49e-05  3.28e-01  
 16  +4.8696e-01  +6.5600e-01  1.69e-01  6.76e-06  3.54e-03  5.35e-04  1.83e-05  3.61e-01  
 17  +4.8539e-01  +6.4955e-01  1.64e-01  6.69e-06  3.50e-03  4.73e-04  1.82e-05  5.25e-02  
 18  +4.8097e-01  +6.3256e-01  1.52e-01  5.98e-06  3.13e-03  4.05e-04  1.65e-05  1.49e-01  
 19  +4.7542e-01  +6.1059e-01  1.35e-01  5.55e-06  2.90e-03  2.40e-04  1.63e-05  1.87e-01  
 20  +4.7539e-01  +6.1051e-01  1.35e-01  5.55e-06  2.90e-03  2.37e-04  1.63e-05  7.91e-03  
 21  +4.7235e-01  +5.9827e-01  1.26e-01  5.20e-06  2.71e-03  1.74e-04  1.52e-05  2.15e-01  
 22  +4.6344e-01  +5.6285e-01  9.94e-02  3.97e-06  2.07e-03  1.16e-04  1.18e-05  3.01e-01  
 23  +4.5931e-01  +5.4858e-01  8.93e-02  3.47e-06  1.81e-03  9.25e-05  1.03e-05  2.13e-01  
 24  +4.4754e-01  +5.0993e-01  6.24e-02  2.20e-06  1.15e-03  3.78e-05  6.64e-06  6.10e-01  
 25  +4.4206e-01  +4.9069e-01  4.86e-02  1.64e-06  8.51e-04  1.03e-05  4.98e-06  7.35e-01  
 26  +4.4175e-01  +4.8955e-01  4.78e-02  1.60e-06  8.33e-04  8.50e-06  4.88e-06  1.88e-01  
 27  +4.2917e-01  +4.4664e-01  1.75e-02  5.71e-07  2.97e-04  2.35e-06  1.81e-06  7.09e-01  
 28  +4.2607e-01  +4.3575e-01  9.68e-03  3.12e-07  1.62e-04  2.03e-07  9.97e-07  9.90e-01  
 29  +4.2290e-01  +4.2556e-01  2.66e-03  8.58e-08  4.46e-05  5.41e-08  2.78e-07  7.54e-01  
 30  +4.2173e-01  +4.2179e-01  5.95e-05  1.92e-09  9.99e-07  1.19e-09  6.26e-09  9.78e-01  
 31  +4.2170e-01  +4.2170e-01  5.95e-07  1.92e-11  1.00e-08  1.19e-11  6.26e-11  9.90e-01  
 32  +4.2170e-01  +4.2170e-01  5.95e-09  1.92e-13  1.00e-10  1.19e-13  6.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 738.3243ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:11 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:11 PM: Optimal value: 4.217e-01
(CVXPY) Sep 20 03:16:11 PM: Compilation took 1.189e-01 seconds
(CVXPY) Sep 20 03:16:11 PM: Solver (including time spent in interface) took 7.733e-01 seconds
FULL MODEL:
  Accruacy: 0.57864
  Our objective: 0.15727999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.1538)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.00076)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.00072)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1)                       <-- (term's our objective: 0.002)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.329208374023438
Best over terms:
  Our final objective: 0.15380000000000002
    Its accruacy: 0.5769
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15380000000000002
  Highest accruacy: 0.5769
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

