Command:
python test_script.py -s linear_dependence -d 9 -n 1000 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.158
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.5740000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:28 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:28 PM: Finished problem compilation (took 5.363e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9997e-01  +5.0086e+02  5.00e+02  9.56e-01  3.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.8059e-01  +1.0889e+02  1.08e+02  4.15e-01  2.30e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3039e-01  +1.2458e+01  1.19e+01  1.43e-01  1.01e+01  1.65e-02  2.71e-01  9.49e-01  
  3  +5.0586e-01  +3.0869e+00  2.58e+00  5.39e-02  3.71e+00  4.15e-05  2.34e-01  4.77e-01  
  4  +5.0069e-01  +8.0144e-01  3.01e-01  6.71e-03  4.84e-01  1.10e-05  7.32e-02  8.04e-01  
  5  +4.9979e-01  +7.0855e-01  2.09e-01  3.83e-03  2.79e-01  2.19e-05  1.73e-02  8.39e-01  
  6  +4.9182e-01  +6.6037e-01  1.69e-01  5.58e-04  4.13e-02  1.51e-04  1.69e-03  9.07e-01  
  7  +4.7870e-01  +5.8216e-01  1.03e-01  2.80e-04  2.06e-02  7.43e-05  9.26e-04  5.86e-01  
  8  +4.6929e-01  +5.3472e-01  6.54e-02  1.67e-04  1.23e-02  3.08e-05  5.91e-04  6.31e-01  
  9  +4.5552e-01  +4.7242e-01  1.69e-02  3.64e-05  2.67e-03  6.66e-06  1.45e-04  7.81e-01  
 10  +4.5049e-01  +4.5162e-01  1.13e-03  2.29e-06  1.67e-04  4.85e-07  9.76e-06  9.90e-01  
 11  +4.5010e-01  +4.5012e-01  1.14e-05  2.31e-08  1.69e-06  4.89e-09  9.90e-08  9.90e-01  
 12  +4.5010e-01  +4.5010e-01  1.14e-07  2.31e-10  1.69e-08  4.89e-11  9.90e-10  9.90e-01  
 13  +4.5010e-01  +4.5010e-01  1.14e-09  2.31e-12  1.69e-10  4.90e-13  9.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.659ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:28 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:28 PM: Optimal value: 4.501e-01
(CVXPY) Sep 20 03:17:28 PM: Compilation took 5.363e-03 seconds
(CVXPY) Sep 20 03:17:28 PM: Solver (including time spent in interface) took 6.521e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:29 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Finished problem compilation (took 5.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 7049
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9977e-01  +5.0137e+02  5.01e+02  9.56e-01  3.73e+01  1.00e+00  1.01e+00   ------   
  1  +5.7949e-01  +1.0912e+02  1.09e+02  4.19e-01  2.38e+01  3.78e-03  5.81e-01  5.85e-01  
  2  +5.2881e-01  +1.2179e+01  1.17e+01  1.42e-01  1.02e+01  1.70e-02  2.69e-01  9.68e-01  
  3  +5.0522e-01  +2.9454e+00  2.44e+00  5.16e-02  3.67e+00  4.33e-05  2.21e-01  5.71e-01  
  4  +5.0110e-01  +1.0573e+00  5.56e-01  1.25e-02  9.23e-01  1.54e-05  9.41e-02  6.36e-01  
  5  +4.9932e-01  +7.8656e-01  2.87e-01  5.01e-03  3.80e-01  2.59e-05  1.92e-02  8.83e-01  
  6  +4.9007e-01  +7.2039e-01  2.30e-01  1.01e-03  7.85e-02  1.16e-04  2.89e-03  8.58e-01  
  7  +4.8562e-01  +7.0425e-01  2.19e-01  7.10e-04  5.49e-02  1.33e-04  2.02e-03  3.83e-01  
  8  +4.7972e-01  +6.7482e-01  1.95e-01  5.27e-04  4.07e-02  1.19e-04  1.50e-03  4.66e-01  
  9  +4.6958e-01  +6.2460e-01  1.55e-01  3.38e-04  2.61e-02  8.96e-05  9.61e-04  7.18e-01  
 10  +4.6373e-01  +6.0024e-01  1.37e-01  3.06e-04  2.36e-02  7.06e-05  8.86e-04  3.77e-01  
 11  +4.4342e-01  +5.1986e-01  7.64e-02  1.37e-04  1.06e-02  4.40e-05  4.09e-04  5.78e-01  
 12  +4.2038e-01  +4.2976e-01  9.38e-03  1.60e-05  1.24e-03  4.04e-06  5.00e-05  9.40e-01  
 13  +4.1828e-01  +4.2261e-01  4.33e-03  7.27e-06  5.68e-04  2.16e-06  2.27e-05  6.29e-01  
 14  +4.1702e-01  +4.1863e-01  1.61e-03  2.63e-06  2.09e-04  1.24e-06  8.29e-06  9.90e-01  
 15  +4.1631e-01  +4.1633e-01  2.28e-05  3.71e-08  2.96e-06  1.81e-08  1.17e-07  9.86e-01  
 16  +4.1630e-01  +4.1630e-01  2.28e-07  3.71e-10  2.96e-08  1.81e-10  1.17e-09  9.90e-01  
 17  +4.1630e-01  +4.1630e-01  2.28e-09  3.71e-12  2.96e-10  1.81e-12  1.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4367ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:29 PM: Optimal value: 4.163e-01
(CVXPY) Sep 20 03:17:29 PM: Compilation took 5.002e-03 seconds
(CVXPY) Sep 20 03:17:29 PM: Solver (including time spent in interface) took 1.107e-02 seconds
Iteration: 2, Objective: 0.4163
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:29 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7465
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9971e-01  +5.0140e+02  5.01e+02  9.56e-01  3.73e+01  1.00e+00  1.01e+00   ------   
  1  +5.7861e-01  +1.0912e+02  1.09e+02  4.20e-01  2.37e+01  3.78e-03  5.82e-01  5.85e-01  
  2  +5.2782e-01  +1.1989e+01  1.15e+01  1.39e-01  9.97e+00  1.72e-02  2.65e-01  9.81e-01  
  3  +5.0471e-01  +2.8301e+00  2.33e+00  4.94e-02  3.53e+00  4.46e-05  2.07e-01  6.50e-01  
  4  +5.0093e-01  +1.1116e+00  6.11e-01  1.36e-02  1.01e+00  1.82e-05  8.24e-02  6.41e-01  
  5  +4.9481e-01  +9.7770e-01  4.83e-01  3.68e-03  2.87e-01  8.50e-05  1.02e-02  9.58e-01  
  6  +4.7884e-01  +8.2169e-01  3.43e-01  1.16e-03  9.04e-02  1.47e-04  3.17e-03  7.04e-01  
  7  +4.6385e-01  +7.3941e-01  2.76e-01  6.58e-04  5.12e-02  1.50e-04  1.83e-03  5.22e-01  
  8  +4.3699e-01  +5.8819e-01  1.51e-01  3.31e-04  2.57e-02  6.31e-05  9.74e-04  8.36e-01  
  9  +4.3016e-01  +5.5901e-01  1.29e-01  2.68e-04  2.08e-02  5.69e-05  8.00e-04  2.64e-01  
 10  +4.1631e-01  +4.9708e-01  8.08e-02  1.59e-04  1.23e-02  4.16e-05  4.86e-04  6.45e-01  
 11  +3.9617e-01  +4.1109e-01  1.49e-02  2.80e-05  2.18e-03  7.59e-06  8.99e-05  8.77e-01  
 12  +3.9293e-01  +3.9898e-01  6.05e-03  1.11e-05  8.74e-04  3.33e-06  3.58e-05  6.85e-01  
 13  +3.9167e-01  +3.9449e-01  2.82e-03  5.00e-06  4.02e-04  1.86e-06  1.63e-05  8.64e-01  
 14  +3.9061e-01  +3.9085e-01  2.44e-04  4.29e-07  3.46e-05  1.62e-07  1.42e-06  9.27e-01  
 15  +3.9050e-01  +3.9050e-01  2.94e-06  5.15e-09  4.15e-07  1.94e-09  1.71e-08  9.89e-01  
 16  +3.9050e-01  +3.9050e-01  2.94e-08  5.15e-11  4.15e-09  1.94e-11  1.71e-10  9.90e-01  
 17  +3.9050e-01  +3.9050e-01  2.94e-10  5.15e-13  4.15e-11  1.95e-13  1.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.6157ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:29 PM: Optimal value: 3.905e-01
(CVXPY) Sep 20 03:17:29 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 03:17:29 PM: Solver (including time spent in interface) took 8.509e-03 seconds
Iteration: 3, Objective: 0.3905
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:29 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Finished problem compilation (took 4.996e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7802
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0145e+02  5.01e+02  9.57e-01  3.73e+01  1.00e+00  1.01e+00   ------   
  1  +5.7659e-01  +1.0921e+02  1.09e+02  4.22e-01  2.36e+01  3.78e-03  5.82e-01  5.85e-01  
  2  +5.2626e-01  +1.1976e+01  1.14e+01  1.37e-01  9.81e+00  1.75e-02  2.61e-01  9.90e-01  
  3  +5.0502e-01  +2.6118e+00  2.11e+00  4.65e-02  3.40e+00  5.25e-05  1.60e-01  8.04e-01  
  4  +5.0036e-01  +1.2156e+00  7.15e-01  1.49e-02  1.12e+00  3.93e-05  5.54e-02  6.89e-01  
  5  +4.8683e-01  +1.1791e+00  6.92e-01  3.30e-03  2.60e-01  1.99e-04  8.63e-03  8.78e-01  
  6  +4.6964e-01  +9.8051e-01  5.11e-01  1.73e-03  1.35e-01  1.87e-04  4.66e-03  5.76e-01  
  7  +4.4546e-01  +7.8234e-01  3.37e-01  8.80e-04  6.84e-02  1.42e-04  2.47e-03  5.56e-01  
  8  +4.3351e-01  +7.1931e-01  2.86e-01  6.45e-04  5.00e-02  1.33e-04  1.85e-03  3.82e-01  
  9  +4.1047e-01  +5.7404e-01  1.64e-01  3.82e-04  2.94e-02  7.63e-05  1.18e-03  9.90e-01  
 10  +3.7672e-01  +4.1804e-01  4.13e-02  8.36e-05  6.44e-03  1.69e-05  2.84e-04  7.96e-01  
 11  +3.6865e-01  +3.8718e-01  1.85e-02  3.64e-05  2.82e-03  8.80e-06  1.30e-04  7.07e-01  
 12  +3.6259e-01  +3.6377e-01  1.18e-03  2.30e-06  1.78e-04  5.67e-07  8.55e-06  9.55e-01  
 13  +3.6216e-01  +3.6218e-01  2.09e-05  4.05e-08  3.13e-06  9.45e-09  1.53e-07  9.89e-01  
 14  +3.6215e-01  +3.6215e-01  2.09e-07  4.06e-10  3.14e-08  9.46e-11  1.54e-09  9.90e-01  
 15  +3.6215e-01  +3.6215e-01  2.09e-09  4.06e-12  3.14e-10  9.46e-13  1.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6104ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:29 PM: Optimal value: 3.622e-01
(CVXPY) Sep 20 03:17:29 PM: Compilation took 4.996e-03 seconds
(CVXPY) Sep 20 03:17:29 PM: Solver (including time spent in interface) took 1.013e-02 seconds
Iteration: 4, Objective: 0.3622
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:29 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Finished problem compilation (took 9.157e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 8046
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0163e+02  5.01e+02  9.57e-01  3.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.7375e-01  +1.0938e+02  1.09e+02  4.23e-01  2.35e+01  3.78e-03  5.83e-01  5.84e-01  
  2  +5.2483e-01  +1.2214e+01  1.17e+01  1.37e-01  9.76e+00  1.79e-02  2.60e-01  9.90e-01  
  3  +5.0548e-01  +2.1284e+00  1.62e+00  3.55e-02  2.68e+00  6.18e-05  1.05e-01  9.28e-01  
  4  +5.0343e-01  +2.0724e+00  1.57e+00  1.88e-02  1.48e+00  1.37e-04  4.67e-02  6.29e-01  
  5  +4.9172e-01  +1.6837e+00  1.19e+00  5.33e-03  4.27e-01  2.77e-04  1.29e-02  7.37e-01  
  6  +4.7427e-01  +1.2920e+00  8.18e-01  2.94e-03  2.32e-01  2.22e-04  7.45e-03  5.40e-01  
  7  +4.5522e-01  +1.1031e+00  6.48e-01  1.75e-03  1.37e-01  2.24e-04  4.56e-03  4.75e-01  
  8  +4.3381e-01  +8.9501e-01  4.61e-01  1.16e-03  9.03e-02  1.66e-04  3.17e-03  4.49e-01  
  9  +4.1751e-01  +7.6601e-01  3.49e-01  8.61e-04  6.70e-02  1.42e-04  2.46e-03  5.49e-01  
 10  +3.7184e-01  +4.7541e-01  1.04e-01  2.34e-04  1.81e-02  3.19e-05  7.61e-04  7.97e-01  
 11  +3.5490e-01  +3.9864e-01  4.37e-02  9.58e-05  7.39e-03  1.48e-05  3.41e-04  6.22e-01  
 12  +3.4740e-01  +3.6637e-01  1.90e-02  4.06e-05  3.14e-03  7.32e-06  1.53e-04  6.69e-01  
 13  +3.4185e-01  +3.4296e-01  1.11e-03  2.35e-06  1.81e-04  5.18e-07  9.40e-06  9.90e-01  
 14  +3.4145e-01  +3.4147e-01  1.15e-05  2.42e-08  1.87e-06  5.32e-09  9.75e-08  9.90e-01  
 15  +3.4145e-01  +3.4145e-01  1.15e-07  2.42e-10  1.87e-08  5.32e-11  9.75e-10  9.90e-01  
 16  +3.4145e-01  +3.4145e-01  1.15e-09  2.42e-12  1.87e-10  5.33e-13  9.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.6284ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:29 PM: Optimal value: 3.415e-01
(CVXPY) Sep 20 03:17:29 PM: Compilation took 9.157e-03 seconds
(CVXPY) Sep 20 03:17:29 PM: Solver (including time spent in interface) took 1.102e-02 seconds
Iteration: 5, Objective: 0.3415
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:29 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Finished problem compilation (took 5.226e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 8264
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0181e+02  5.01e+02  9.57e-01  3.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.7232e-01  +1.0940e+02  1.09e+02  4.24e-01  2.34e+01  3.78e-03  5.82e-01  5.84e-01  
  2  +5.2389e-01  +1.2332e+01  1.18e+01  1.37e-01  9.67e+00  1.80e-02  2.59e-01  9.90e-01  
  3  +5.0636e-01  +2.2938e+00  1.79e+00  3.62e-02  2.77e+00  7.67e-04  9.76e-02  8.59e-01  
  4  +5.0625e-01  +2.3712e+00  1.86e+00  2.71e-02  2.12e+00  1.14e-03  6.66e-02  3.55e-01  
  5  +5.0290e-01  +2.2022e+00  1.70e+00  2.32e-02  1.79e+00  7.16e-04  6.30e-02  2.94e-01  
  6  +4.9032e-01  +1.7652e+00  1.27e+00  4.92e-03  3.96e-01  2.09e-03  1.16e-02  8.29e-01  
  7  +4.7669e-01  +1.5255e+00  1.05e+00  3.48e-03  2.77e-01  1.62e-03  8.51e-03  3.62e-01  
  8  +4.5947e-01  +1.2986e+00  8.39e-01  2.25e-03  1.78e-01  1.13e-03  5.71e-03  5.07e-01  
  9  +4.3682e-01  +1.0062e+00  5.69e-01  1.58e-03  1.23e-01  3.92e-04  4.24e-03  5.27e-01  
 10  +3.9633e-01  +6.8402e-01  2.88e-01  7.03e-04  5.44e-02  1.68e-04  2.07e-03  5.76e-01  
 11  +3.5831e-01  +4.5167e-01  9.34e-02  2.23e-04  1.71e-02  3.78e-05  7.48e-04  9.00e-01  
 12  +3.4475e-01  +3.8200e-01  3.72e-02  8.50e-05  6.57e-03  1.84e-05  2.99e-04  8.38e-01  
 13  +3.4083e-01  +3.6472e-01  2.39e-02  5.31e-05  4.11e-03  1.20e-05  1.92e-04  4.61e-01  
 14  +3.3473e-01  +3.3825e-01  3.51e-03  7.59e-06  5.87e-04  1.71e-06  2.91e-05  8.78e-01  
 15  +3.3366e-01  +3.3398e-01  3.16e-04  6.63e-07  5.09e-05  1.57e-07  2.64e-06  9.47e-01  
 16  +3.3355e-01  +3.3355e-01  3.53e-06  7.36e-09  5.66e-07  1.75e-09  2.95e-08  9.89e-01  
 17  +3.3355e-01  +3.3355e-01  3.53e-08  7.36e-11  5.66e-09  1.75e-11  2.95e-10  9.90e-01  
 18  +3.3355e-01  +3.3355e-01  3.53e-10  7.36e-13  5.66e-11  1.76e-13  2.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.453ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:29 PM: Optimal value: 3.336e-01
(CVXPY) Sep 20 03:17:29 PM: Compilation took 5.226e-03 seconds
(CVXPY) Sep 20 03:17:29 PM: Solver (including time spent in interface) took 1.251e-02 seconds
Iteration: 6, Objective: 0.3336
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:29 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:29 PM: Finished problem compilation (took 5.018e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8390
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0169e+02  5.01e+02  9.57e-01  3.70e+01  1.00e+00  1.01e+00   ------   
  1  +5.7127e-01  +1.0939e+02  1.09e+02  4.25e-01  2.32e+01  3.79e-03  5.82e-01  5.84e-01  
  2  +5.2312e-01  +1.2422e+01  1.19e+01  1.37e-01  9.60e+00  1.81e-02  2.58e-01  9.90e-01  
  3  +5.0802e-01  +3.1257e+00  2.62e+00  4.79e-02  3.64e+00  2.42e-03  1.18e-01  6.96e-01  
  4  +5.0493e-01  +2.5736e+00  2.07e+00  2.82e-02  2.20e+00  3.22e-03  6.85e-02  4.53e-01  
  5  +5.0204e-01  +2.4205e+00  1.92e+00  2.40e-02  1.85e+00  1.83e-03  6.25e-02  3.97e-01  
  6  +4.8560e-01  +1.7903e+00  1.30e+00  4.60e-03  3.70e-01  5.03e-03  1.08e-02  8.36e-01  
  7  +4.7059e-01  +1.5606e+00  1.09e+00  3.22e-03  2.57e-01  3.97e-03  7.81e-03  3.74e-01  
  8  +4.5371e-01  +1.3115e+00  8.58e-01  2.33e-03  1.84e-01  2.30e-03  5.85e-03  4.19e-01  
  9  +4.2983e-01  +1.0074e+00  5.78e-01  1.61e-03  1.25e-01  7.19e-04  4.30e-03  5.22e-01  
 10  +3.9614e-01  +7.3778e-01  3.42e-01  8.65e-04  6.68e-02  3.65e-04  2.50e-03  4.69e-01  
 11  +3.5731e-01  +4.7810e-01  1.21e-01  2.97e-04  2.27e-02  7.34e-05  9.78e-04  7.73e-01  
 12  +3.4743e-01  +4.2598e-01  7.85e-02  1.89e-04  1.45e-02  4.72e-05  6.47e-04  4.15e-01  
 13  +3.3674e-01  +3.7187e-01  3.51e-02  8.14e-05  6.28e-03  2.06e-05  2.93e-04  7.10e-01  
 14  +3.3240e-01  +3.5185e-01  1.95e-02  4.40e-05  3.40e-03  1.07e-05  1.62e-04  6.38e-01  
 15  +3.2749e-01  +3.2987e-01  2.38e-03  5.32e-06  4.11e-04  1.26e-06  2.04e-05  8.99e-01  
 16  +3.2682e-01  +3.2701e-01  1.92e-04  4.23e-07  3.25e-05  9.01e-08  1.67e-06  9.90e-01  
 17  +3.2675e-01  +3.2675e-01  2.35e-06  5.16e-09  3.97e-07  1.09e-09  2.05e-08  9.88e-01  
 18  +3.2675e-01  +3.2675e-01  2.37e-08  5.18e-11  3.99e-09  1.10e-11  2.06e-10  9.90e-01  
 19  +3.2675e-01  +3.2675e-01  2.42e-10  5.31e-13  4.09e-11  1.13e-13  2.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.599ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:29 PM: Optimal value: 3.268e-01
(CVXPY) Sep 20 03:17:29 PM: Compilation took 5.018e-03 seconds
(CVXPY) Sep 20 03:17:29 PM: Solver (including time spent in interface) took 1.402e-02 seconds
Iteration: 7, Objective: 0.3268
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:30 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Finished problem compilation (took 5.078e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8549
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +5.0161e+02  5.01e+02  9.57e-01  3.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.7052e-01  +1.0939e+02  1.09e+02  4.26e-01  2.31e+01  3.79e-03  5.82e-01  5.84e-01  
  2  +5.2251e-01  +1.2478e+01  1.20e+01  1.37e-01  9.50e+00  1.82e-02  2.57e-01  9.90e-01  
  3  +5.0853e-01  +3.4144e+00  2.91e+00  5.06e-02  3.82e+00  3.06e-03  1.21e-01  6.51e-01  
  4  +5.0479e-01  +2.7051e+00  2.20e+00  2.92e-02  2.27e+00  3.82e-03  7.04e-02  4.68e-01  
  5  +5.0178e-01  +2.6098e+00  2.11e+00  2.37e-02  1.83e+00  2.20e-03  5.97e-02  5.26e-01  
  6  +4.8456e-01  +1.8888e+00  1.40e+00  4.85e-03  3.88e-01  5.32e-03  1.14e-02  8.16e-01  
  7  +4.6878e-01  +1.6416e+00  1.17e+00  3.36e-03  2.67e-01  4.24e-03  8.12e-03  3.84e-01  
  8  +4.4957e-01  +1.3308e+00  8.81e-01  2.36e-03  1.85e-01  2.14e-03  5.94e-03  4.57e-01  
  9  +4.2128e-01  +9.7277e-01  5.51e-01  1.49e-03  1.15e-01  5.27e-04  4.05e-03  5.99e-01  
 10  +3.8147e-01  +6.6587e-01  2.84e-01  7.05e-04  5.39e-02  2.22e-04  2.11e-03  5.29e-01  
 11  +3.5958e-01  +5.3180e-01  1.72e-01  4.19e-04  3.19e-02  1.23e-04  1.35e-03  4.54e-01  
 12  +3.3721e-01  +4.0415e-01  6.69e-02  1.59e-04  1.21e-02  4.22e-05  5.59e-04  7.17e-01  
 13  +3.2952e-01  +3.6469e-01  3.52e-02  8.06e-05  6.17e-03  2.10e-05  2.96e-04  6.82e-01  
 14  +3.2487e-01  +3.4308e-01  1.82e-02  4.09e-05  3.13e-03  1.03e-05  1.56e-04  6.47e-01  
 15  +3.2021e-01  +3.2273e-01  2.53e-03  5.58e-06  4.27e-04  1.36e-06  2.22e-05  8.80e-01  
 16  +3.1947e-01  +3.1967e-01  1.99e-04  4.33e-07  3.31e-05  9.33e-08  1.78e-06  9.78e-01  
 17  +3.1940e-01  +3.1940e-01  2.59e-06  5.60e-09  4.28e-07  1.20e-09  2.32e-08  9.88e-01  
 18  +3.1940e-01  +3.1940e-01  2.59e-08  5.60e-11  4.28e-09  1.20e-11  2.32e-10  9.90e-01  
 19  +3.1940e-01  +3.1940e-01  2.60e-10  5.62e-13  4.29e-11  1.21e-13  2.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.9898ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:30 PM: Optimal value: 3.194e-01
(CVXPY) Sep 20 03:17:30 PM: Compilation took 5.078e-03 seconds
(CVXPY) Sep 20 03:17:30 PM: Solver (including time spent in interface) took 1.631e-02 seconds
Iteration: 8, Objective: 0.3194
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:30 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Finished problem compilation (took 6.019e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 8757
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0157e+02  5.01e+02  9.58e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.6962e-01  +1.0937e+02  1.09e+02  4.27e-01  2.29e+01  3.79e-03  5.81e-01  5.85e-01  
  2  +5.2192e-01  +1.2533e+01  1.20e+01  1.36e-01  9.42e+00  1.83e-02  2.56e-01  9.90e-01  
  3  +5.0867e-01  +3.5379e+00  3.03e+00  5.07e-02  3.82e+00  3.41e-03  1.20e-01  6.34e-01  
  4  +5.0519e-01  +2.8601e+00  2.35e+00  3.09e-02  2.39e+00  4.04e-03  7.35e-02  4.24e-01  
  5  +5.0186e-01  +2.7260e+00  2.22e+00  2.50e-02  1.93e+00  2.37e-03  6.24e-02  5.08e-01  
  6  +4.8456e-01  +1.9108e+00  1.43e+00  5.11e-03  4.10e-01  5.40e-03  1.19e-02  8.14e-01  
  7  +4.6726e-01  +1.6707e+00  1.20e+00  3.39e-03  2.70e-01  4.71e-03  8.15e-03  3.98e-01  
  8  +4.5070e-01  +1.4148e+00  9.64e-01  2.51e-03  1.98e-01  2.84e-03  6.24e-03  4.00e-01  
  9  +4.1377e-01  +8.9937e-01  4.86e-01  1.34e-03  1.03e-01  2.43e-05  3.67e-03  7.51e-01  
 10  +3.5818e-01  +5.1848e-01  1.60e-01  3.89e-04  2.95e-02  2.57e-05  1.22e-03  7.52e-01  
 11  +3.3448e-01  +4.0459e-01  7.01e-02  1.66e-04  1.27e-02  1.78e-05  5.67e-04  6.53e-01  
 12  +3.2518e-01  +3.6139e-01  3.62e-02  8.37e-05  6.43e-03  1.12e-05  3.00e-04  5.82e-01  
 13  +3.1780e-01  +3.2761e-01  9.81e-03  2.23e-05  1.72e-03  3.53e-06  8.42e-05  7.97e-01  
 14  +3.1614e-01  +3.1997e-01  3.83e-03  8.68e-06  6.67e-04  1.62e-06  3.33e-05  8.10e-01  
 15  +3.1501e-01  +3.1534e-01  3.33e-04  7.50e-07  5.77e-05  1.45e-07  2.91e-06  9.35e-01  
 16  +3.1490e-01  +3.1491e-01  3.77e-06  8.49e-09  6.52e-07  1.63e-09  3.30e-08  9.89e-01  
 17  +3.1490e-01  +3.1490e-01  3.77e-08  8.49e-11  6.52e-09  1.64e-11  3.30e-10  9.90e-01  
 18  +3.1490e-01  +3.1490e-01  3.78e-10  8.51e-13  6.54e-11  1.64e-13  3.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.5438ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:30 PM: Optimal value: 3.149e-01
(CVXPY) Sep 20 03:17:30 PM: Compilation took 6.019e-03 seconds
(CVXPY) Sep 20 03:17:30 PM: Solver (including time spent in interface) took 2.006e-02 seconds
Iteration: 9, Objective: 0.3149
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:30 PM: Your problem has 609 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Finished problem compilation (took 7.120e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 609
  constraints   = 1109
  nnz(P)        = 0
  nnz(A)        = 8965
  cones (total) = 1
    : Nonnegative = 1,  numel = 1109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0161e+02  5.01e+02  9.58e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.6796e-01  +1.0943e+02  1.09e+02  4.27e-01  2.28e+01  3.79e-03  5.81e-01  5.84e-01  
  2  +5.2084e-01  +1.2654e+01  1.21e+01  1.36e-01  9.33e+00  1.85e-02  2.55e-01  9.90e-01  
  3  +5.0837e-01  +3.5322e+00  3.02e+00  4.78e-02  3.61e+00  3.67e-03  1.11e-01  6.36e-01  
  4  +5.0640e-01  +3.1878e+00  2.68e+00  3.47e-02  2.68e+00  4.19e-03  8.06e-02  2.86e-01  
  5  +5.0266e-01  +2.9271e+00  2.42e+00  2.97e-02  2.27e+00  2.56e-03  7.37e-02  3.41e-01  
  6  +4.8621e-01  +1.9597e+00  1.47e+00  5.99e-03  4.82e-01  5.54e-03  1.39e-02  8.20e-01  
  7  +4.6490e-01  +1.6098e+00  1.14e+00  3.52e-03  2.80e-01  4.41e-03  8.46e-03  4.83e-01  
  8  +4.4804e-01  +1.3799e+00  9.32e-01  2.56e-03  2.02e-01  2.75e-03  6.35e-03  4.22e-01  
  9  +4.1028e-01  +9.3244e-01  5.22e-01  1.45e-03  1.12e-01  9.49e-05  3.96e-03  7.71e-01  
 10  +3.5270e-01  +5.2003e-01  1.67e-01  4.17e-04  3.17e-02  3.08e-05  1.31e-03  7.26e-01  
 11  +3.3214e-01  +4.2078e-01  8.86e-02  2.17e-04  1.66e-02  2.14e-05  7.31e-04  5.35e-01  
 12  +3.1869e-01  +3.5616e-01  3.75e-02  8.92e-05  6.89e-03  1.06e-05  3.21e-04  6.30e-01  
 13  +3.1346e-01  +3.3177e-01  1.83e-02  4.30e-05  3.34e-03  5.93e-06  1.60e-04  5.99e-01  
 14  +3.0971e-01  +3.1418e-01  4.47e-03  1.04e-05  8.13e-04  2.10e-06  4.00e-05  9.90e-01  
 15  +3.0917e-01  +3.1208e-01  2.92e-03  6.73e-06  5.29e-04  1.38e-06  2.59e-05  4.93e-01  
 16  +3.0825e-01  +3.0849e-01  2.40e-04  5.48e-07  4.33e-05  1.14e-07  2.13e-06  9.29e-01  
 17  +3.0817e-01  +3.0817e-01  2.49e-06  5.69e-09  4.50e-07  1.19e-09  2.21e-08  9.90e-01  
 18  +3.0817e-01  +3.0817e-01  2.49e-08  5.69e-11  4.50e-09  1.19e-11  2.21e-10  9.90e-01  
 19  +3.0817e-01  +3.0817e-01  2.49e-10  5.70e-13  4.50e-11  1.19e-13  2.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.6071ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:30 PM: Optimal value: 3.082e-01
(CVXPY) Sep 20 03:17:30 PM: Compilation took 7.120e-03 seconds
(CVXPY) Sep 20 03:17:30 PM: Solver (including time spent in interface) took 1.721e-02 seconds
Iteration: 10, Objective: 0.3082
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:30 PM: Your problem has 619 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 619
  constraints   = 1119
  nnz(P)        = 0
  nnz(A)        = 9192
  cones (total) = 1
    : Nonnegative = 1,  numel = 1119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9924e-01  +5.0175e+02  5.01e+02  9.58e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.6654e-01  +1.0943e+02  1.09e+02  4.27e-01  2.26e+01  3.80e-03  5.79e-01  5.85e-01  
  2  +5.1987e-01  +1.2728e+01  1.22e+01  1.35e-01  9.25e+00  1.85e-02  2.53e-01  9.90e-01  
  3  +5.0782e-01  +3.4001e+00  2.89e+00  4.37e-02  3.33e+00  3.68e-03  1.01e-01  6.53e-01  
  4  +5.0661e-01  +3.2320e+00  2.73e+00  3.45e-02  2.67e+00  4.15e-03  7.92e-02  2.24e-01  
  5  +5.0278e-01  +3.0122e+00  2.51e+00  3.00e-02  2.30e+00  2.67e-03  7.30e-02  3.26e-01  
  6  +4.8639e-01  +2.0706e+00  1.58e+00  6.48e-03  5.22e-01  5.61e-03  1.49e-02  8.03e-01  
  7  +4.6574e-01  +1.7270e+00  1.26e+00  4.02e-03  3.20e-01  4.43e-03  9.57e-03  4.53e-01  
  8  +4.4539e-01  +1.5185e+00  1.07e+00  2.75e-03  2.17e-01  3.71e-03  6.71e-03  4.01e-01  
  9  +4.0320e-01  +9.3178e-01  5.29e-01  1.49e-03  1.14e-01  3.02e-05  4.08e-03  7.19e-01  
 10  +3.4626e-01  +5.1711e-01  1.71e-01  4.38e-04  3.31e-02  2.21e-05  1.40e-03  7.23e-01  
 11  +3.2284e-01  +4.0077e-01  7.79e-02  1.94e-04  1.47e-02  1.98e-05  6.86e-04  6.77e-01  
 12  +3.1451e-01  +3.6102e-01  4.65e-02  1.11e-04  8.50e-03  1.76e-05  4.17e-04  7.19e-01  
 13  +3.0700e-01  +3.2596e-01  1.90e-02  4.29e-05  3.31e-03  8.33e-06  1.71e-04  7.98e-01  
 14  +3.0207e-01  +3.0539e-01  3.32e-03  7.25e-06  5.62e-04  1.43e-06  3.08e-05  8.40e-01  
 15  +3.0104e-01  +3.0115e-01  1.13e-04  2.46e-07  1.91e-05  4.74e-08  1.06e-06  9.81e-01  
 16  +3.0100e-01  +3.0100e-01  1.13e-06  2.46e-09  1.91e-07  4.74e-10  1.06e-08  9.90e-01  
 17  +3.0100e-01  +3.0100e-01  1.13e-08  2.46e-11  1.91e-09  4.74e-12  1.06e-10  9.90e-01  
 18  +3.0100e-01  +3.0100e-01  1.13e-10  2.46e-13  1.91e-11  4.74e-14  1.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.8087ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:30 PM: Optimal value: 3.010e-01
(CVXPY) Sep 20 03:17:30 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 03:17:30 PM: Solver (including time spent in interface) took 1.502e-02 seconds
Iteration: 11, Objective: 0.3010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:30 PM: Your problem has 629 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Finished problem compilation (took 7.500e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 629
  constraints   = 1129
  nnz(P)        = 0
  nnz(A)        = 9280
  cones (total) = 1
    : Nonnegative = 1,  numel = 1129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0164e+02  5.01e+02  9.58e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.6548e-01  +1.0937e+02  1.09e+02  4.28e-01  2.25e+01  3.80e-03  5.78e-01  5.86e-01  
  2  +5.1935e-01  +1.2818e+01  1.23e+01  1.34e-01  9.13e+00  1.86e-02  2.51e-01  9.90e-01  
  3  +5.0731e-01  +3.2534e+00  2.75e+00  4.03e-02  3.07e+00  3.61e-03  9.31e-02  6.73e-01  
  4  +5.0643e-01  +3.1754e+00  2.67e+00  3.30e-02  2.55e+00  4.07e-03  7.54e-02  1.97e-01  
  5  +5.0258e-01  +3.0824e+00  2.58e+00  2.88e-02  2.21e+00  2.81e-03  6.88e-02  3.61e-01  
  6  +4.8444e-01  +2.2322e+00  1.75e+00  6.42e-03  5.18e-01  6.24e-03  1.46e-02  7.95e-01  
  7  +4.5306e-01  +1.7192e+00  1.27e+00  3.40e-03  2.70e-01  4.57e-03  8.06e-03  5.54e-01  
  8  +4.2296e-01  +1.1396e+00  7.17e-01  2.20e-03  1.71e-01  1.02e-04  5.72e-03  6.40e-01  
  9  +3.7870e-01  +7.8691e-01  4.08e-01  1.12e-03  8.54e-02  8.16e-05  3.21e-03  5.56e-01  
 10  +3.3246e-01  +4.8275e-01  1.50e-01  3.92e-04  2.94e-02  3.27e-05  1.31e-03  6.72e-01  
 11  +3.1814e-01  +4.0698e-01  8.88e-02  2.26e-04  1.70e-02  2.85e-05  8.04e-04  6.21e-01  
 12  +3.0381e-01  +3.3254e-01  2.87e-02  7.06e-05  5.37e-03  1.06e-05  2.73e-04  7.74e-01  
 13  +3.0156e-01  +3.2167e-01  2.01e-02  4.83e-05  3.69e-03  7.92e-06  1.90e-04  4.88e-01  
 14  +2.9711e-01  +3.0313e-01  6.03e-03  1.35e-05  1.04e-03  2.50e-06  5.68e-05  8.18e-01  
 15  +2.9529e-01  +2.9554e-01  2.57e-04  5.68e-07  4.41e-05  1.00e-07  2.47e-06  9.66e-01  
 16  +2.9520e-01  +2.9520e-01  2.59e-06  5.73e-09  4.44e-07  1.01e-09  2.50e-08  9.90e-01  
 17  +2.9520e-01  +2.9520e-01  2.59e-08  5.73e-11  4.44e-09  1.01e-11  2.50e-10  9.90e-01  
 18  +2.9520e-01  +2.9520e-01  2.59e-10  5.73e-13  4.44e-11  1.01e-13  2.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.0182ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:30 PM: Optimal value: 2.952e-01
(CVXPY) Sep 20 03:17:30 PM: Compilation took 7.500e-03 seconds
(CVXPY) Sep 20 03:17:30 PM: Solver (including time spent in interface) took 1.853e-02 seconds
Iteration: 12, Objective: 0.2952
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:30 PM: Your problem has 639 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:30 PM: Finished problem compilation (took 7.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 639
  constraints   = 1139
  nnz(P)        = 0
  nnz(A)        = 9431
  cones (total) = 1
    : Nonnegative = 1,  numel = 1139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +5.0194e+02  5.01e+02  9.58e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.6409e-01  +1.0947e+02  1.09e+02  4.29e-01  2.23e+01  3.81e-03  5.78e-01  5.85e-01  
  2  +5.1844e-01  +1.2930e+01  1.24e+01  1.34e-01  9.06e+00  1.88e-02  2.51e-01  9.90e-01  
  3  +5.0642e-01  +2.9895e+00  2.48e+00  3.50e-02  2.68e+00  3.43e-03  8.12e-02  7.09e-01  
  4  +5.0600e-01  +3.0667e+00  2.56e+00  3.05e-02  2.36e+00  3.87e-03  6.95e-02  1.91e-01  
  5  +5.0129e-01  +3.3608e+00  2.86e+00  2.43e-02  1.89e+00  3.42e-03  5.54e-02  5.65e-01  
  6  +4.8228e-01  +2.5164e+00  2.03e+00  7.16e-03  5.76e-01  5.82e-03  1.62e-02  7.12e-01  
  7  +4.5962e-01  +2.1172e+00  1.66e+00  4.71e-03  3.75e-01  4.82e-03  1.10e-02  3.99e-01  
  8  +4.3738e-01  +1.6924e+00  1.26e+00  3.28e-03  2.58e-01  2.93e-03  7.94e-03  3.99e-01  
  9  +3.9651e-01  +9.9281e-01  5.96e-01  1.73e-03  1.32e-01  2.35e-05  4.71e-03  7.59e-01  
 10  +3.4284e-01  +5.6409e-01  2.21e-01  5.92e-04  4.44e-02  2.87e-05  1.87e-03  6.86e-01  
 11  +3.2368e-01  +4.5965e-01  1.36e-01  3.55e-04  2.66e-02  2.41e-05  1.21e-03  4.39e-01  
 12  +3.0486e-01  +3.5848e-01  5.36e-02  1.36e-04  1.02e-02  1.25e-05  5.13e-04  6.63e-01  
 13  +2.9666e-01  +3.1609e-01  1.94e-02  4.85e-05  3.65e-03  5.16e-06  1.95e-04  6.88e-01  
 14  +2.9323e-01  +2.9857e-01  5.34e-03  1.32e-05  9.97e-04  1.66e-06  5.53e-05  8.07e-01  
 15  +2.9213e-01  +2.9349e-01  1.36e-03  3.34e-06  2.53e-04  4.42e-07  1.44e-05  8.06e-01  
 16  +2.9178e-01  +2.9195e-01  1.72e-04  4.19e-07  3.19e-05  6.48e-08  1.85e-06  9.90e-01  
 17  +2.9173e-01  +2.9173e-01  1.84e-06  4.47e-09  3.41e-07  6.90e-10  1.98e-08  9.89e-01  
 18  +2.9173e-01  +2.9173e-01  1.84e-08  4.48e-11  3.42e-09  6.91e-12  1.98e-10  9.90e-01  
 19  +2.9173e-01  +2.9173e-01  1.84e-10  4.49e-13  3.42e-11  6.93e-14  1.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.3797ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:30 PM: Optimal value: 2.917e-01
(CVXPY) Sep 20 03:17:30 PM: Compilation took 7.510e-03 seconds
(CVXPY) Sep 20 03:17:30 PM: Solver (including time spent in interface) took 1.708e-02 seconds
Iteration: 13, Objective: 0.2917
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:31 PM: Your problem has 649 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Finished problem compilation (took 6.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 649
  constraints   = 1149
  nnz(P)        = 0
  nnz(A)        = 9515
  cones (total) = 1
    : Nonnegative = 1,  numel = 1149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +5.0181e+02  5.01e+02  9.58e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.6241e-01  +1.0944e+02  1.09e+02  4.28e-01  2.22e+01  3.81e-03  5.77e-01  5.86e-01  
  2  +5.1768e-01  +1.3037e+01  1.25e+01  1.33e-01  8.93e+00  1.89e-02  2.49e-01  9.90e-01  
  3  +5.0548e-01  +2.6896e+00  2.18e+00  2.97e-02  2.28e+00  3.17e-03  6.90e-02  7.53e-01  
  4  +5.0509e-01  +2.8473e+00  2.34e+00  2.63e-02  2.04e+00  3.60e-03  5.97e-02  2.27e-01  
  5  +4.9790e-01  +3.4623e+00  2.96e+00  1.77e-02  1.39e+00  4.35e-03  3.93e-02  7.13e-01  
  6  +4.7416e-01  +2.5488e+00  2.07e+00  6.31e-03  5.05e-01  5.68e-03  1.42e-02  6.47e-01  
  7  +4.4828e-01  +2.0902e+00  1.64e+00  4.19e-03  3.33e-01  4.17e-03  9.75e-03  4.29e-01  
  8  +4.2377e-01  +1.5599e+00  1.14e+00  3.03e-03  2.37e-01  1.81e-03  7.45e-03  4.08e-01  
  9  +3.6623e-01  +7.4184e-01  3.76e-01  1.03e-03  7.78e-02  8.61e-05  2.93e-03  8.03e-01  
 10  +3.2578e-01  +4.9716e-01  1.71e-01  4.54e-04  3.42e-02  5.27e-05  1.49e-03  6.52e-01  
 11  +3.1154e-01  +4.2219e-01  1.11e-01  2.83e-04  2.15e-02  3.75e-05  9.83e-04  4.50e-01  
 12  +2.9407e-01  +3.3157e-01  3.75e-02  9.15e-05  7.03e-03  1.34e-05  3.50e-04  7.07e-01  
 13  +2.8712e-01  +2.9816e-01  1.10e-02  2.60e-05  2.01e-03  4.39e-06  1.06e-04  8.39e-01  
 14  +2.8474e-01  +2.8750e-01  2.76e-03  6.45e-06  4.98e-04  1.11e-06  2.71e-05  8.15e-01  
 15  +2.8433e-01  +2.8572e-01  1.39e-03  3.25e-06  2.51e-04  5.67e-07  1.38e-05  6.45e-01  
 16  +2.8392e-01  +2.8405e-01  1.33e-04  3.09e-07  2.39e-05  5.37e-08  1.32e-06  9.40e-01  
 17  +2.8388e-01  +2.8388e-01  1.67e-06  3.89e-09  3.01e-07  6.73e-10  1.67e-08  9.88e-01  
 18  +2.8388e-01  +2.8388e-01  1.67e-08  3.91e-11  3.02e-09  6.75e-12  1.67e-10  9.90e-01  
 19  +2.8388e-01  +2.8388e-01  1.68e-10  3.91e-13  3.02e-11  6.76e-14  1.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.9624ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:31 PM: Optimal value: 2.839e-01
(CVXPY) Sep 20 03:17:31 PM: Compilation took 6.000e-03 seconds
(CVXPY) Sep 20 03:17:31 PM: Solver (including time spent in interface) took 1.604e-02 seconds
Iteration: 14, Objective: 0.2839
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:31 PM: Your problem has 651 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Finished problem compilation (took 6.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 651
  constraints   = 1151
  nnz(P)        = 0
  nnz(A)        = 9584
  cones (total) = 1
    : Nonnegative = 1,  numel = 1151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +5.0184e+02  5.01e+02  9.58e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.6205e-01  +1.0944e+02  1.09e+02  4.29e-01  2.22e+01  3.81e-03  5.77e-01  5.86e-01  
  2  +5.1744e-01  +1.3060e+01  1.25e+01  1.33e-01  8.91e+00  1.89e-02  2.48e-01  9.90e-01  
  3  +5.0513e-01  +2.5776e+00  2.07e+00  2.79e-02  2.14e+00  3.07e-03  6.49e-02  7.69e-01  
  4  +5.0466e-01  +2.7628e+00  2.26e+00  2.46e-02  1.91e+00  3.52e-03  5.58e-02  2.54e-01  
  5  +4.9618e-01  +3.3593e+00  2.86e+00  1.53e-02  1.21e+00  4.70e-03  3.40e-02  7.32e-01  
  6  +4.7090e-01  +2.3884e+00  1.92e+00  5.93e-03  4.74e-01  4.96e-03  1.35e-02  6.32e-01  
  7  +4.4603e-01  +2.0075e+00  1.56e+00  4.02e-03  3.19e-01  3.76e-03  9.41e-03  4.22e-01  
  8  +4.2382e-01  +1.5514e+00  1.13e+00  3.04e-03  2.38e-01  1.78e-03  7.47e-03  3.76e-01  
  9  +3.6558e-01  +7.3603e-01  3.70e-01  1.02e-03  7.71e-02  1.95e-05  2.91e-03  8.52e-01  
 10  +3.2452e-01  +4.9053e-01  1.66e-01  4.42e-04  3.33e-02  3.26e-05  1.45e-03  6.58e-01  
 11  +3.1076e-01  +4.1987e-01  1.09e-01  2.80e-04  2.13e-02  2.68e-05  9.74e-04  4.44e-01  
 12  +2.9790e-01  +3.5387e-01  5.60e-02  1.38e-04  1.06e-02  1.62e-05  5.10e-04  5.71e-01  
 13  +2.9307e-01  +3.3107e-01  3.80e-02  9.10e-05  7.10e-03  1.20e-05  3.45e-04  4.34e-01  
 14  +2.8724e-01  +3.0288e-01  1.56e-02  3.62e-05  2.84e-03  7.07e-06  1.44e-04  9.90e-01  
 15  +2.8244e-01  +2.8346e-01  1.02e-03  2.32e-06  1.82e-04  4.19e-07  9.67e-06  9.48e-01  
 16  +2.8210e-01  +2.8212e-01  1.27e-05  2.89e-08  2.27e-06  5.10e-09  1.21e-07  9.88e-01  
 17  +2.8210e-01  +2.8210e-01  1.27e-07  2.89e-10  2.27e-08  5.10e-11  1.21e-09  9.90e-01  
 18  +2.8210e-01  +2.8210e-01  1.27e-09  2.89e-12  2.27e-10  5.11e-13  1.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.7665ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:31 PM: Optimal value: 2.821e-01
(CVXPY) Sep 20 03:17:31 PM: Compilation took 6.508e-03 seconds
(CVXPY) Sep 20 03:17:31 PM: Solver (including time spent in interface) took 1.451e-02 seconds
Iteration: 15, Objective: 0.2821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:31 PM: Your problem has 661 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Finished problem compilation (took 6.100e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 661
  constraints   = 1161
  nnz(P)        = 0
  nnz(A)        = 9678
  cones (total) = 1
    : Nonnegative = 1,  numel = 1161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +5.0189e+02  5.01e+02  9.59e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.6146e-01  +1.0943e+02  1.09e+02  4.29e-01  2.20e+01  3.81e-03  5.77e-01  5.86e-01  
  2  +5.1686e-01  +1.3110e+01  1.26e+01  1.33e-01  8.83e+00  1.90e-02  2.48e-01  9.90e-01  
  3  +5.0451e-01  +2.3772e+00  1.87e+00  2.46e-02  1.90e+00  2.88e-03  5.75e-02  7.97e-01  
  4  +5.0360e-01  +2.6463e+00  2.14e+00  2.10e-02  1.64e+00  3.46e-03  4.75e-02  3.49e-01  
  5  +4.9124e-01  +2.9766e+00  2.49e+00  1.06e-02  8.48e-01  5.45e-03  2.36e-02  7.43e-01  
  6  +4.5925e-01  +2.0028e+00  1.54e+00  4.57e-03  3.62e-01  3.80e-03  1.06e-02  6.36e-01  
  7  +4.3589e-01  +1.6574e+00  1.22e+00  3.25e-03  2.55e-01  2.43e-03  7.81e-03  4.04e-01  
  8  +3.9052e-01  +9.9743e-01  6.07e-01  1.79e-03  1.36e-01  1.95e-05  4.85e-03  8.04e-01  
  9  +3.3216e-01  +5.1961e-01  1.87e-01  5.09e-04  3.80e-02  2.67e-05  1.61e-03  7.52e-01  
 10  +3.2460e-01  +4.8562e-01  1.61e-01  4.27e-04  3.21e-02  2.83e-05  1.38e-03  2.21e-01  
 11  +3.0541e-01  +3.9242e-01  8.70e-02  2.20e-04  1.67e-02  1.96e-05  7.71e-04  5.30e-01  
 12  +2.9799e-01  +3.5964e-01  6.17e-02  1.49e-04  1.15e-02  1.76e-05  5.39e-04  4.63e-01  
 13  +2.8911e-01  +3.1796e-01  2.89e-02  6.77e-05  5.24e-03  1.09e-05  2.59e-04  7.54e-01  
 14  +2.8307e-01  +2.9198e-01  8.91e-03  2.04e-05  1.58e-03  3.78e-06  8.23e-05  8.86e-01  
 15  +2.8023e-01  +2.8059e-01  3.61e-04  8.17e-07  6.34e-05  1.41e-07  3.41e-06  9.72e-01  
 16  +2.8010e-01  +2.8010e-01  3.70e-06  8.36e-09  6.49e-07  1.43e-09  3.51e-08  9.90e-01  
 17  +2.8010e-01  +2.8010e-01  3.70e-08  8.37e-11  6.49e-09  1.44e-11  3.51e-10  9.90e-01  
 18  +2.8010e-01  +2.8010e-01  3.70e-10  8.37e-13  6.49e-11  1.44e-13  3.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.4638ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:31 PM: Optimal value: 2.801e-01
(CVXPY) Sep 20 03:17:31 PM: Compilation took 6.100e-03 seconds
(CVXPY) Sep 20 03:17:31 PM: Solver (including time spent in interface) took 1.514e-02 seconds
Iteration: 16, Objective: 0.2801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:31 PM: Your problem has 671 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Finished problem compilation (took 5.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 671
  constraints   = 1171
  nnz(P)        = 0
  nnz(A)        = 9787
  cones (total) = 1
    : Nonnegative = 1,  numel = 1171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9913e-01  +5.0187e+02  5.01e+02  9.59e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.5981e-01  +1.0950e+02  1.09e+02  4.30e-01  2.19e+01  3.82e-03  5.76e-01  5.86e-01  
  2  +5.1587e-01  +1.3212e+01  1.27e+01  1.32e-01  8.76e+00  1.92e-02  2.47e-01  9.90e-01  
  3  +5.0367e-01  +2.3607e+00  1.86e+00  2.33e-02  1.79e+00  3.09e-03  5.42e-02  8.06e-01  
  4  +4.9559e-01  +2.7485e+00  2.25e+00  1.32e-02  1.04e+00  5.12e-03  2.95e-02  6.79e-01  
  5  +4.7017e-01  +2.1343e+00  1.66e+00  5.30e-03  4.23e-01  6.21e-03  1.20e-02  6.41e-01  
  6  +4.4187e-01  +1.8594e+00  1.42e+00  3.49e-03  2.76e-01  5.50e-03  8.14e-03  4.10e-01  
  7  +4.0523e-01  +1.1565e+00  7.51e-01  2.35e-03  1.79e-01  3.88e-05  6.14e-03  5.81e-01  
  8  +3.4418e-01  +6.2546e-01  2.81e-01  7.71e-04  5.74e-02  4.49e-05  2.31e-03  7.24e-01  
  9  +3.1426e-01  +4.5958e-01  1.45e-01  3.82e-04  2.84e-02  3.51e-05  1.27e-03  5.79e-01  
 10  +2.9838e-01  +3.7855e-01  8.02e-02  2.00e-04  1.51e-02  2.55e-05  7.14e-04  6.05e-01  
 11  +2.9044e-01  +3.4111e-01  5.07e-02  1.22e-04  9.37e-03  1.70e-05  4.54e-04  4.35e-01  
 12  +2.8181e-01  +2.9921e-01  1.74e-02  4.05e-05  3.12e-03  8.01e-06  1.61e-04  9.90e-01  
 13  +2.7720e-01  +2.8019e-01  2.98e-03  6.85e-06  5.30e-04  1.32e-06  2.85e-05  8.47e-01  
 14  +2.7622e-01  +2.7629e-01  6.52e-05  1.49e-07  1.15e-05  2.67e-08  6.32e-07  9.84e-01  
 15  +2.7620e-01  +2.7620e-01  6.52e-07  1.49e-09  1.15e-07  2.67e-10  6.33e-09  9.90e-01  
 16  +2.7620e-01  +2.7620e-01  6.52e-09  1.49e-11  1.15e-09  2.67e-12  6.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.2443ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:31 PM: Optimal value: 2.762e-01
(CVXPY) Sep 20 03:17:31 PM: Compilation took 5.008e-03 seconds
(CVXPY) Sep 20 03:17:31 PM: Solver (including time spent in interface) took 1.667e-02 seconds
Iteration: 17, Objective: 0.2762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:31 PM: Your problem has 681 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Finished problem compilation (took 6.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 681
  constraints   = 1181
  nnz(P)        = 0
  nnz(A)        = 9891
  cones (total) = 1
    : Nonnegative = 1,  numel = 1181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +5.0211e+02  5.02e+02  9.59e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.5808e-01  +1.0959e+02  1.09e+02  4.31e-01  2.17e+01  3.82e-03  5.76e-01  5.86e-01  
  2  +5.1456e-01  +1.3322e+01  1.28e+01  1.32e-01  8.68e+00  1.93e-02  2.46e-01  9.90e-01  
  3  +5.0262e-01  +2.4755e+00  1.97e+00  2.33e-02  1.80e+00  3.55e-03  5.38e-02  8.05e-01  
  4  +4.8887e-01  +2.6017e+00  2.11e+00  9.99e-03  7.97e-01  6.99e-03  2.22e-02  7.06e-01  
  5  +4.5886e-01  +1.9509e+00  1.49e+00  4.94e-03  3.91e-01  5.19e-03  1.14e-02  5.98e-01  
  6  +4.3534e-01  +1.6870e+00  1.25e+00  3.48e-03  2.73e-01  3.80e-03  8.29e-03  4.19e-01  
  7  +3.8915e-01  +1.0116e+00  6.22e-01  1.88e-03  1.42e-01  3.12e-05  5.03e-03  7.26e-01  
  8  +3.2772e-01  +5.3312e-01  2.05e-01  5.62e-04  4.17e-02  3.10e-05  1.75e-03  7.40e-01  
  9  +3.1075e-01  +4.5470e-01  1.44e-01  3.78e-04  2.82e-02  3.08e-05  1.25e-03  4.18e-01  
 10  +2.9065e-01  +3.5614e-01  6.55e-02  1.64e-04  1.23e-02  1.67e-05  5.92e-04  6.01e-01  
 11  +2.8246e-01  +3.1746e-01  3.50e-02  8.53e-05  6.48e-03  1.01e-05  3.22e-04  5.47e-01  
 12  +2.7873e-01  +2.9980e-01  2.11e-02  5.04e-05  3.86e-03  7.28e-06  1.95e-04  5.96e-01  
 13  +2.7461e-01  +2.8171e-01  7.10e-03  1.65e-05  1.28e-03  2.71e-06  6.64e-05  7.71e-01  
 14  +2.7264e-01  +2.7383e-01  1.19e-03  2.70e-06  2.09e-04  4.96e-07  1.13e-05  9.64e-01  
 15  +2.7221e-01  +2.7224e-01  3.10e-05  6.95e-08  5.40e-06  1.27e-08  2.97e-07  9.80e-01  
 16  +2.7220e-01  +2.7220e-01  3.11e-07  6.96e-10  5.41e-08  1.27e-10  2.98e-09  9.90e-01  
 17  +2.7220e-01  +2.7220e-01  3.11e-09  6.97e-12  5.42e-10  1.28e-12  2.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.3438ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:31 PM: Optimal value: 2.722e-01
(CVXPY) Sep 20 03:17:31 PM: Compilation took 6.008e-03 seconds
(CVXPY) Sep 20 03:17:31 PM: Solver (including time spent in interface) took 1.405e-02 seconds
Iteration: 18, Objective: 0.2722
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:31 PM: Your problem has 691 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Finished problem compilation (took 4.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 691
  constraints   = 1191
  nnz(P)        = 0
  nnz(A)        = 9992
  cones (total) = 1
    : Nonnegative = 1,  numel = 1191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0197e+02  5.01e+02  9.59e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.5695e-01  +1.0957e+02  1.09e+02  4.31e-01  2.16e+01  3.83e-03  5.75e-01  5.86e-01  
  2  +5.1388e-01  +1.3411e+01  1.29e+01  1.31e-01  8.57e+00  1.94e-02  2.44e-01  9.90e-01  
  3  +5.0182e-01  +2.4542e+00  1.95e+00  2.23e-02  1.72e+00  3.69e-03  5.12e-02  8.19e-01  
  4  +4.8595e-01  +2.5069e+00  2.02e+00  9.00e-03  7.20e-01  7.55e-03  2.00e-02  7.01e-01  
  5  +4.5915e-01  +2.0451e+00  1.59e+00  5.16e-03  4.10e-01  6.40e-03  1.18e-02  4.99e-01  
  6  +4.3297e-01  +1.6988e+00  1.27e+00  3.54e-03  2.78e-01  4.37e-03  8.38e-03  4.19e-01  
  7  +3.8125e-01  +9.7909e-01  5.98e-01  1.77e-03  1.34e-01  3.66e-05  4.74e-03  7.57e-01  
  8  +3.2322e-01  +5.2124e-01  1.98e-01  5.53e-04  4.10e-02  3.43e-05  1.74e-03  7.39e-01  
  9  +3.0531e-01  +4.3791e-01  1.33e-01  3.52e-04  2.64e-02  2.99e-05  1.17e-03  4.36e-01  
 10  +2.8636e-01  +3.4474e-01  5.84e-02  1.48e-04  1.13e-02  1.53e-05  5.38e-04  6.14e-01  
 11  +2.8140e-01  +3.2221e-01  4.08e-02  1.00e-04  7.75e-03  1.29e-05  3.75e-04  4.88e-01  
 12  +2.7305e-01  +2.8491e-01  1.19e-02  2.82e-05  2.20e-03  4.03e-06  1.13e-04  7.78e-01  
 13  +2.6967e-01  +2.7045e-01  7.81e-04  1.83e-06  1.43e-04  2.59e-07  7.77e-06  9.54e-01  
 14  +2.6940e-01  +2.6942e-01  1.24e-05  2.90e-08  2.26e-06  4.07e-09  1.24e-07  9.85e-01  
 15  +2.6940e-01  +2.6940e-01  1.24e-07  2.90e-10  2.26e-08  4.07e-11  1.24e-09  9.90e-01  
 16  +2.6940e-01  +2.6940e-01  1.24e-09  2.90e-12  2.27e-10  4.08e-13  1.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0448ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:31 PM: Optimal value: 2.694e-01
(CVXPY) Sep 20 03:17:31 PM: Compilation took 4.992e-03 seconds
(CVXPY) Sep 20 03:17:31 PM: Solver (including time spent in interface) took 1.271e-02 seconds
Iteration: 19, Objective: 0.2694
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:31 PM: Your problem has 701 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Finished problem compilation (took 5.665e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 701
  constraints   = 1201
  nnz(P)        = 0
  nnz(A)        = 10124
  cones (total) = 1
    : Nonnegative = 1,  numel = 1201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +5.0206e+02  5.02e+02  9.59e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.5554e-01  +1.0958e+02  1.09e+02  4.31e-01  2.15e+01  3.83e-03  5.75e-01  5.87e-01  
  2  +5.1278e-01  +1.3507e+01  1.30e+01  1.31e-01  8.49e+00  1.95e-02  2.43e-01  9.90e-01  
  3  +5.0046e-01  +2.4573e+00  1.96e+00  2.12e-02  1.63e+00  3.97e-03  4.85e-02  8.30e-01  
  4  +4.8103e-01  +2.3854e+00  1.90e+00  8.01e-03  6.41e-01  8.21e-03  1.78e-02  6.97e-01  
  5  +4.4983e-01  +1.9727e+00  1.52e+00  4.67e-03  3.70e-01  7.05e-03  1.08e-02  4.87e-01  
  6  +4.2707e-01  +1.6235e+00  1.20e+00  3.55e-03  2.77e-01  3.90e-03  8.50e-03  3.70e-01  
  7  +3.6653e-01  +8.5344e-01  4.87e-01  1.40e-03  1.05e-01  3.54e-05  3.82e-03  8.07e-01  
  8  +3.1779e-01  +5.3016e-01  2.12e-01  5.87e-04  4.36e-02  4.55e-05  1.86e-03  6.77e-01  
  9  +2.9681e-01  +4.1834e-01  1.22e-01  3.20e-04  2.41e-02  3.27e-05  1.09e-03  5.33e-01  
 10  +2.8155e-01  +3.3973e-01  5.82e-02  1.47e-04  1.12e-02  1.92e-05  5.33e-04  6.56e-01  
 11  +2.7342e-01  +2.9977e-01  2.64e-02  6.50e-05  5.00e-03  9.64e-06  2.47e-04  6.72e-01  
 12  +2.6723e-01  +2.7167e-01  4.44e-03  1.07e-05  8.23e-04  1.65e-06  4.35e-05  8.83e-01  
 13  +2.6587e-01  +2.6620e-01  3.32e-04  7.84e-07  6.07e-05  1.23e-07  3.35e-06  9.61e-01  
 14  +2.6575e-01  +2.6575e-01  3.58e-06  8.46e-09  6.54e-07  1.31e-09  3.63e-08  9.89e-01  
 15  +2.6575e-01  +2.6575e-01  3.59e-08  8.46e-11  6.55e-09  1.31e-11  3.63e-10  9.90e-01  
 16  +2.6575e-01  +2.6575e-01  3.60e-10  8.51e-13  6.58e-11  1.32e-13  3.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.2392ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:31 PM: Optimal value: 2.658e-01
(CVXPY) Sep 20 03:17:31 PM: Compilation took 5.665e-03 seconds
(CVXPY) Sep 20 03:17:31 PM: Solver (including time spent in interface) took 1.505e-02 seconds
Iteration: 20, Objective: 0.2658
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:31 PM: Your problem has 711 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Finished problem compilation (took 5.521e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 711
  constraints   = 1211
  nnz(P)        = 0
  nnz(A)        = 10229
  cones (total) = 1
    : Nonnegative = 1,  numel = 1211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9904e-01  +5.0206e+02  5.02e+02  9.59e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.5483e-01  +1.0956e+02  1.09e+02  4.31e-01  2.13e+01  3.84e-03  5.74e-01  5.87e-01  
  2  +5.1201e-01  +1.3525e+01  1.30e+01  1.30e-01  8.40e+00  1.96e-02  2.42e-01  9.90e-01  
  3  +4.9962e-01  +2.4928e+00  1.99e+00  2.10e-02  1.61e+00  4.19e-03  4.79e-02  8.32e-01  
  4  +4.7834e-01  +2.3343e+00  1.86e+00  7.73e-03  6.17e-01  8.38e-03  1.73e-02  6.92e-01  
  5  +4.4574e-01  +1.9760e+00  1.53e+00  4.57e-03  3.60e-01  7.60e-03  1.05e-02  4.76e-01  
  6  +4.1751e-01  +1.5099e+00  1.09e+00  3.26e-03  2.52e-01  2.98e-03  7.93e-03  4.54e-01  
  7  +3.4973e-01  +7.1615e-01  3.66e-01  1.03e-03  7.67e-02  1.70e-04  2.88e-03  7.85e-01  
  8  +3.1765e-01  +5.4234e-01  2.25e-01  6.11e-04  4.55e-02  1.06e-04  1.89e-03  4.58e-01  
  9  +2.9364e-01  +4.1642e-01  1.23e-01  3.22e-04  2.42e-02  6.01e-05  1.09e-03  6.53e-01  
 10  +2.7688e-01  +3.2769e-01  5.08e-02  1.28e-04  9.68e-03  2.53e-05  4.67e-04  7.68e-01  
 11  +2.7062e-01  +2.9811e-01  2.75e-02  6.74e-05  5.13e-03  1.34e-05  2.57e-04  5.42e-01  
 12  +2.6538e-01  +2.7405e-01  8.68e-03  2.09e-05  1.59e-03  4.08e-06  8.37e-05  7.08e-01  
 13  +2.6328e-01  +2.6466e-01  1.38e-03  3.30e-06  2.50e-04  5.83e-07  1.38e-05  9.47e-01  
 14  +2.6282e-01  +2.6286e-01  4.38e-05  1.04e-07  7.88e-06  1.69e-08  4.46e-07  9.83e-01  
 15  +2.6280e-01  +2.6280e-01  4.39e-07  1.05e-09  7.90e-08  1.69e-10  4.48e-09  9.90e-01  
 16  +2.6280e-01  +2.6280e-01  4.40e-09  1.05e-11  7.91e-10  1.70e-12  4.48e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.1661ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:31 PM: Optimal value: 2.628e-01
(CVXPY) Sep 20 03:17:31 PM: Compilation took 5.521e-03 seconds
(CVXPY) Sep 20 03:17:31 PM: Solver (including time spent in interface) took 1.665e-02 seconds
Iteration: 21, Objective: 0.2628
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:31 PM: Your problem has 721 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:31 PM: Finished problem compilation (took 5.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 721
  constraints   = 1221
  nnz(P)        = 0
  nnz(A)        = 10295
  cones (total) = 1
    : Nonnegative = 1,  numel = 1221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9900e-01  +5.0203e+02  5.02e+02  9.60e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.5333e-01  +1.0961e+02  1.09e+02  4.31e-01  2.12e+01  3.84e-03  5.73e-01  5.87e-01  
  2  +5.1103e-01  +1.3624e+01  1.31e+01  1.30e-01  8.33e+00  1.97e-02  2.41e-01  9.90e-01  
  3  +4.9845e-01  +2.4941e+00  2.00e+00  2.02e-02  1.55e+00  4.41e-03  4.61e-02  8.37e-01  
  4  +4.7491e-01  +2.2633e+00  1.79e+00  7.31e-03  5.81e-01  8.57e-03  1.64e-02  6.89e-01  
  5  +4.4142e-01  +1.9807e+00  1.54e+00  4.43e-03  3.49e-01  8.29e-03  1.02e-02  4.63e-01  
  6  +4.0238e-01  +1.2388e+00  8.36e-01  2.68e-03  2.04e-01  1.82e-04  6.80e-03  6.48e-01  
  7  +3.3367e-01  +6.3200e-01  2.98e-01  8.46e-04  6.24e-02  7.05e-05  2.47e-03  7.41e-01  
  8  +3.1193e-01  +5.2256e-01  2.11e-01  5.73e-04  4.24e-02  6.00e-05  1.78e-03  3.96e-01  
  9  +2.9140e-01  +4.1710e-01  1.26e-01  3.28e-04  2.46e-02  4.37e-05  1.10e-03  5.55e-01  
 10  +2.7613e-01  +3.3944e-01  6.33e-02  1.58e-04  1.20e-02  2.45e-05  5.62e-04  6.14e-01  
 11  +2.6757e-01  +2.9927e-01  3.17e-02  7.64e-05  5.85e-03  1.26e-05  2.85e-04  5.61e-01  
 12  +2.6187e-01  +2.7313e-01  1.13e-02  2.66e-05  2.04e-03  4.60e-06  1.04e-04  7.28e-01  
 13  +2.5916e-01  +2.6151e-01  2.35e-03  5.52e-06  4.23e-04  9.42e-07  2.24e-05  8.23e-01  
 14  +2.5842e-01  +2.5848e-01  5.91e-05  1.38e-07  1.06e-05  2.22e-08  5.72e-07  9.78e-01  
 15  +2.5840e-01  +2.5840e-01  5.95e-07  1.39e-09  1.07e-07  2.23e-10  5.76e-09  9.90e-01  
 16  +2.5840e-01  +2.5840e-01  5.95e-09  1.39e-11  1.07e-09  2.23e-12  5.76e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.5617ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:31 PM: Optimal value: 2.584e-01
(CVXPY) Sep 20 03:17:31 PM: Compilation took 5.991e-03 seconds
(CVXPY) Sep 20 03:17:31 PM: Solver (including time spent in interface) took 1.797e-02 seconds
Iteration: 22, Objective: 0.2584
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:32 PM: Your problem has 731 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Finished problem compilation (took 5.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 731
  constraints   = 1231
  nnz(P)        = 0
  nnz(A)        = 10343
  cones (total) = 1
    : Nonnegative = 1,  numel = 1231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9899e-01  +5.0200e+02  5.02e+02  9.60e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.5217e-01  +1.0973e+02  1.09e+02  4.32e-01  2.11e+01  3.85e-03  5.73e-01  5.86e-01  
  2  +5.1024e-01  +1.3676e+01  1.32e+01  1.29e-01  8.27e+00  1.98e-02  2.41e-01  9.90e-01  
  3  +4.9747e-01  +2.5239e+00  2.03e+00  1.99e-02  1.52e+00  4.62e-03  4.55e-02  8.40e-01  
  4  +4.7207e-01  +2.2342e+00  1.76e+00  7.17e-03  5.67e-01  8.65e-03  1.61e-02  6.84e-01  
  5  +4.3588e-01  +2.0079e+00  1.57e+00  4.38e-03  3.42e-01  8.70e-03  1.01e-02  4.78e-01  
  6  +4.0071e-01  +1.2666e+00  8.66e-01  2.88e-03  2.18e-01  6.61e-05  7.40e-03  6.03e-01  
  7  +3.3444e-01  +6.7181e-01  3.37e-01  9.76e-04  7.16e-02  6.95e-05  2.86e-03  7.55e-01  
  8  +3.0446e-01  +4.9687e-01  1.92e-01  5.34e-04  3.92e-02  4.60e-05  1.71e-03  4.73e-01  
  9  +2.8785e-01  +4.1020e-01  1.22e-01  3.27e-04  2.43e-02  3.75e-05  1.11e-03  5.26e-01  
 10  +2.7374e-01  +3.3732e-01  6.36e-02  1.63e-04  1.22e-02  2.17e-05  5.84e-04  5.73e-01  
 11  +2.6514e-01  +2.9561e-01  3.05e-02  7.56e-05  5.72e-03  1.09e-05  2.84e-04  5.84e-01  
 12  +2.5956e-01  +2.6951e-01  9.95e-03  2.41e-05  1.83e-03  3.76e-06  9.50e-05  7.58e-01  
 13  +2.5762e-01  +2.6111e-01  3.48e-03  8.36e-06  6.36e-04  1.34e-06  3.39e-05  7.32e-01  
 14  +2.5657e-01  +2.5679e-01  2.13e-04  5.07e-07  3.85e-05  7.99e-08  2.11e-06  9.53e-01  
 15  +2.5650e-01  +2.5650e-01  2.58e-06  6.13e-09  4.65e-07  9.71e-10  2.56e-08  9.88e-01  
 16  +2.5650e-01  +2.5650e-01  2.58e-08  6.14e-11  4.66e-09  9.73e-12  2.57e-10  9.90e-01  
 17  +2.5650e-01  +2.5650e-01  2.59e-10  6.15e-13  4.67e-11  9.77e-14  2.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.1286ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:32 PM: Optimal value: 2.565e-01
(CVXPY) Sep 20 03:17:32 PM: Compilation took 5.514e-03 seconds
(CVXPY) Sep 20 03:17:32 PM: Solver (including time spent in interface) took 1.829e-02 seconds
Iteration: 23, Objective: 0.2565
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:32 PM: Your problem has 735 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Finished problem compilation (took 6.049e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 735
  constraints   = 1235
  nnz(P)        = 0
  nnz(A)        = 10368
  cones (total) = 1
    : Nonnegative = 1,  numel = 1235

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9896e-01  +5.0199e+02  5.01e+02  9.60e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.5090e-01  +1.0981e+02  1.09e+02  4.32e-01  2.10e+01  3.85e-03  5.74e-01  5.86e-01  
  2  +5.0945e-01  +1.3769e+01  1.33e+01  1.29e-01  8.24e+00  2.00e-02  2.41e-01  9.90e-01  
  3  +4.9647e-01  +2.5601e+00  2.06e+00  1.97e-02  1.51e+00  4.85e-03  4.49e-02  8.44e-01  
  4  +4.6839e-01  +2.2194e+00  1.75e+00  6.92e-03  5.46e-01  8.96e-03  1.56e-02  6.87e-01  
  5  +4.3136e-01  +1.9932e+00  1.56e+00  4.28e-03  3.34e-01  9.02e-03  9.94e-03  4.61e-01  
  6  +3.9486e-01  +1.2639e+00  8.69e-01  2.90e-03  2.18e-01  6.67e-05  7.52e-03  6.07e-01  
  7  +3.2882e-01  +6.3471e-01  3.06e-01  8.92e-04  6.52e-02  3.79e-05  2.64e-03  7.07e-01  
  8  +3.0349e-01  +4.9854e-01  1.95e-01  5.45e-04  3.99e-02  3.31e-05  1.74e-03  4.22e-01  
  9  +2.8732e-01  +4.1611e-01  1.29e-01  3.47e-04  2.57e-02  3.33e-05  1.18e-03  5.19e-01  
 10  +2.7267e-01  +3.4002e-01  6.73e-02  1.74e-04  1.30e-02  1.97e-05  6.30e-04  5.50e-01  
 11  +2.6359e-01  +2.9560e-01  3.20e-02  7.97e-05  6.02e-03  1.02e-05  3.03e-04  5.95e-01  
 12  +2.5812e-01  +2.6986e-01  1.17e-02  2.87e-05  2.17e-03  4.07e-06  1.14e-04  7.21e-01  
 13  +2.5571e-01  +2.5928e-01  3.57e-03  8.64e-06  6.54e-04  1.26e-06  3.56e-05  7.49e-01  
 14  +2.5464e-01  +2.5477e-01  1.26e-04  3.03e-07  2.29e-05  4.47e-08  1.28e-06  9.83e-01  
 15  +2.5460e-01  +2.5460e-01  1.28e-06  3.09e-09  2.33e-07  4.55e-10  1.30e-08  9.90e-01  
 16  +2.5460e-01  +2.5460e-01  1.28e-08  3.09e-11  2.34e-09  4.55e-12  1.31e-10  9.90e-01  
 17  +2.5460e-01  +2.5460e-01  1.28e-10  3.09e-13  2.34e-11  4.56e-14  1.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.8098ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:32 PM: Optimal value: 2.546e-01
(CVXPY) Sep 20 03:17:32 PM: Compilation took 6.049e-03 seconds
(CVXPY) Sep 20 03:17:32 PM: Solver (including time spent in interface) took 1.921e-02 seconds
Iteration: 24, Objective: 0.2546
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:32 PM: Your problem has 745 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Finished problem compilation (took 5.539e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 745
  constraints   = 1245
  nnz(P)        = 0
  nnz(A)        = 10438
  cones (total) = 1
    : Nonnegative = 1,  numel = 1245

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9895e-01  +5.0200e+02  5.02e+02  9.60e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5019e-01  +1.0986e+02  1.09e+02  4.33e-01  2.09e+01  3.85e-03  5.74e-01  5.86e-01  
  2  +5.0885e-01  +1.3814e+01  1.33e+01  1.29e-01  8.19e+00  2.01e-02  2.41e-01  9.90e-01  
  3  +4.9563e-01  +2.6150e+00  2.12e+00  1.98e-02  1.51e+00  5.06e-03  4.51e-02  8.45e-01  
  4  +4.6540e-01  +2.2076e+00  1.74e+00  6.75e-03  5.30e-01  9.15e-03  1.53e-02  6.92e-01  
  5  +4.2824e-01  +1.9853e+00  1.56e+00  4.25e-03  3.31e-01  9.03e-03  9.90e-03  4.54e-01  
  6  +3.9431e-01  +1.2575e+00  8.63e-01  2.93e-03  2.19e-01  6.54e-05  7.63e-03  5.85e-01  
  7  +3.2879e-01  +6.5902e-01  3.30e-01  9.70e-04  7.06e-02  5.85e-05  2.87e-03  7.35e-01  
  8  +2.9971e-01  +4.8963e-01  1.90e-01  5.33e-04  3.88e-02  4.27e-05  1.73e-03  4.92e-01  
  9  +2.8436e-01  +4.0778e-01  1.23e-01  3.34e-04  2.46e-02  3.71e-05  1.14e-03  5.34e-01  
 10  +2.6820e-01  +3.2250e-01  5.43e-02  1.40e-04  1.04e-02  1.80e-05  5.15e-04  6.27e-01  
 11  +2.5938e-01  +2.7897e-01  1.96e-02  4.90e-05  3.67e-03  6.88e-06  1.91e-04  7.14e-01  
 12  +2.5625e-01  +2.6424e-01  7.99e-03  1.97e-05  1.48e-03  2.99e-06  7.82e-05  6.83e-01  
 13  +2.5517e-01  +2.5949e-01  4.31e-03  1.05e-05  7.97e-04  1.67e-06  4.24e-05  6.58e-01  
 14  +2.5413e-01  +2.5534e-01  1.21e-03  2.89e-06  2.22e-04  4.80e-07  1.19e-05  7.86e-01  
 15  +2.5372e-01  +2.5377e-01  5.15e-05  1.22e-07  9.38e-06  2.03e-08  5.06e-07  9.59e-01  
 16  +2.5370e-01  +2.5370e-01  5.16e-07  1.22e-09  9.40e-08  2.03e-10  5.07e-09  9.90e-01  
 17  +2.5370e-01  +2.5370e-01  5.17e-09  1.22e-11  9.41e-10  2.03e-12  5.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.1369ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:32 PM: Optimal value: 2.537e-01
(CVXPY) Sep 20 03:17:32 PM: Compilation took 5.539e-03 seconds
(CVXPY) Sep 20 03:17:32 PM: Solver (including time spent in interface) took 2.005e-02 seconds
Iteration: 25, Objective: 0.2537
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:32 PM: Your problem has 755 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Finished problem compilation (took 6.115e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 755
  constraints   = 1255
  nnz(P)        = 0
  nnz(A)        = 10547
  cones (total) = 1
    : Nonnegative = 1,  numel = 1255

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +5.0206e+02  5.02e+02  9.60e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.4891e-01  +1.0992e+02  1.09e+02  4.33e-01  2.08e+01  3.85e-03  5.73e-01  5.86e-01  
  2  +5.0767e-01  +1.3876e+01  1.34e+01  1.28e-01  8.10e+00  2.01e-02  2.40e-01  9.90e-01  
  3  +4.9389e-01  +2.6193e+00  2.13e+00  1.91e-02  1.45e+00  5.30e-03  4.35e-02  8.52e-01  
  4  +4.6128e-01  +2.1340e+00  1.67e+00  6.55e-03  5.12e-01  8.82e-03  1.50e-02  6.87e-01  
  5  +4.2441e-01  +1.9713e+00  1.55e+00  4.25e-03  3.29e-01  9.00e-03  9.96e-03  4.43e-01  
  6  +3.9354e-01  +1.2646e+00  8.71e-01  3.03e-03  2.25e-01  6.40e-05  7.93e-03  5.68e-01  
  7  +3.2738e-01  +6.6408e-01  3.37e-01  9.94e-04  7.20e-02  5.74e-05  2.95e-03  7.34e-01  
  8  +2.9830e-01  +4.9774e-01  1.99e-01  5.61e-04  4.07e-02  4.61e-05  1.81e-03  5.04e-01  
  9  +2.7789e-01  +3.8564e-01  1.08e-01  2.90e-04  2.13e-02  3.39e-05  1.01e-03  6.36e-01  
 10  +2.6250e-01  +3.0445e-01  4.20e-02  1.09e-04  8.04e-03  1.38e-05  4.08e-04  6.47e-01  
 11  +2.5781e-01  +2.8053e-01  2.27e-02  5.79e-05  4.30e-03  8.02e-06  2.24e-04  5.87e-01  
 12  +2.5315e-01  +2.5851e-01  5.36e-03  1.35e-05  1.00e-03  1.89e-06  5.47e-05  7.99e-01  
 13  +2.5249e-01  +2.5537e-01  2.88e-03  7.16e-06  5.35e-04  1.09e-06  2.96e-05  7.23e-01  
 14  +2.5164e-01  +2.5191e-01  2.71e-04  6.68e-07  5.00e-05  1.02e-07  2.83e-06  9.15e-01  
 15  +2.5155e-01  +2.5155e-01  3.48e-06  8.58e-09  6.42e-07  1.30e-09  3.65e-08  9.87e-01  
 16  +2.5155e-01  +2.5155e-01  3.49e-08  8.60e-11  6.43e-09  1.30e-11  3.65e-10  9.90e-01  
 17  +2.5155e-01  +2.5155e-01  3.50e-10  8.62e-13  6.45e-11  1.30e-13  3.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.3058ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:32 PM: Optimal value: 2.516e-01
(CVXPY) Sep 20 03:17:32 PM: Compilation took 6.115e-03 seconds
(CVXPY) Sep 20 03:17:32 PM: Solver (including time spent in interface) took 2.203e-02 seconds
Iteration: 26, Objective: 0.2516
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:32 PM: Your problem has 765 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Finished problem compilation (took 7.538e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 765
  constraints   = 1265
  nnz(P)        = 0
  nnz(A)        = 10658
  cones (total) = 1
    : Nonnegative = 1,  numel = 1265

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9889e-01  +5.0206e+02  5.02e+02  9.60e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.4679e-01  +1.1009e+02  1.10e+02  4.34e-01  2.07e+01  3.86e-03  5.73e-01  5.85e-01  
  2  +5.0578e-01  +1.4010e+01  1.35e+01  1.28e-01  8.05e+00  2.04e-02  2.40e-01  9.90e-01  
  3  +4.9119e-01  +2.6390e+00  2.15e+00  1.83e-02  1.39e+00  5.65e-03  4.18e-02  8.61e-01  
  4  +4.5544e-01  +2.0459e+00  1.59e+00  6.35e-03  4.93e-01  8.31e-03  1.46e-02  6.79e-01  
  5  +4.2391e-01  +2.0051e+00  1.58e+00  4.55e-03  3.50e-01  8.50e-03  1.07e-02  4.24e-01  
  6  +3.8211e-01  +1.2399e+00  8.58e-01  2.82e-03  2.08e-01  6.70e-05  7.38e-03  6.66e-01  
  7  +3.2155e-01  +6.2378e-01  3.02e-01  9.11e-04  6.57e-02  3.14e-05  2.74e-03  6.73e-01  
  8  +3.0129e-01  +5.2187e-01  2.21e-01  6.34e-04  4.59e-02  3.69e-05  2.02e-03  3.92e-01  
  9  +2.7716e-01  +3.9152e-01  1.14e-01  3.13e-04  2.29e-02  2.94e-05  1.09e-03  6.29e-01  
 10  +2.6116e-01  +3.0840e-01  4.72e-02  1.23e-04  9.11e-03  1.41e-05  4.63e-04  6.71e-01  
 11  +2.5732e-01  +2.8896e-01  3.16e-02  8.14e-05  6.03e-03  1.02e-05  3.13e-04  4.58e-01  
 12  +2.5101e-01  +2.5906e-01  8.05e-03  2.03e-05  1.51e-03  2.60e-06  8.26e-05  7.71e-01  
 13  +2.5035e-01  +2.5579e-01  5.44e-03  1.36e-05  1.02e-03  1.92e-06  5.60e-05  5.68e-01  
 14  +2.4928e-01  +2.5129e-01  2.01e-03  4.96e-06  3.73e-04  7.29e-07  2.08e-05  6.87e-01  
 15  +2.4888e-01  +2.4969e-01  8.12e-04  1.95e-06  1.48e-04  3.08e-07  8.30e-06  7.54e-01  
 16  +2.4864e-01  +2.4876e-01  1.13e-04  2.70e-07  2.05e-05  4.46e-08  1.16e-06  9.90e-01  
 17  +2.4860e-01  +2.4860e-01  1.22e-06  2.91e-09  2.22e-07  4.80e-10  1.25e-08  9.89e-01  
 18  +2.4860e-01  +2.4860e-01  1.22e-08  2.91e-11  2.22e-09  4.81e-12  1.25e-10  9.90e-01  
 19  +2.4860e-01  +2.4860e-01  1.23e-10  2.94e-13  2.24e-11  4.86e-14  1.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.7787ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:32 PM: Optimal value: 2.486e-01
(CVXPY) Sep 20 03:17:32 PM: Compilation took 7.538e-03 seconds
(CVXPY) Sep 20 03:17:32 PM: Solver (including time spent in interface) took 2.556e-02 seconds
Iteration: 27, Objective: 0.2486
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:32 PM: Your problem has 775 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:32 PM: Finished problem compilation (took 5.531e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 775
  constraints   = 1275
  nnz(P)        = 0
  nnz(A)        = 10718
  cones (total) = 1
    : Nonnegative = 1,  numel = 1275

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9889e-01  +5.0206e+02  5.02e+02  9.60e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.4568e-01  +1.1025e+02  1.10e+02  4.34e-01  2.06e+01  3.87e-03  5.73e-01  5.85e-01  
  2  +5.0498e-01  +1.4029e+01  1.35e+01  1.28e-01  7.97e+00  2.04e-02  2.40e-01  9.90e-01  
  3  +4.8981e-01  +2.5174e+00  2.03e+00  1.69e-02  1.28e+00  5.62e-03  3.88e-02  8.75e-01  
  4  +4.5551e-01  +2.0185e+00  1.56e+00  6.55e-03  5.04e-01  7.77e-03  1.52e-02  6.47e-01  
  5  +4.2472e-01  +1.9644e+00  1.54e+00  4.67e-03  3.57e-01  7.90e-03  1.10e-02  4.24e-01  
  6  +3.8106e-01  +1.2238e+00  8.43e-01  2.79e-03  2.05e-01  6.53e-05  7.34e-03  6.90e-01  
  7  +3.1566e-01  +5.8411e-01  2.68e-01  8.09e-04  5.78e-02  3.70e-05  2.47e-03  7.37e-01  
  8  +2.9605e-01  +4.9416e-01  1.98e-01  5.65e-04  4.08e-02  3.98e-05  1.83e-03  4.01e-01  
  9  +2.8047e-01  +4.1317e-01  1.33e-01  3.66e-04  2.67e-02  3.28e-05  1.26e-03  4.33e-01  
 10  +2.6120e-01  +3.1122e-01  5.00e-02  1.32e-04  9.69e-03  1.37e-05  4.96e-04  6.65e-01  
 11  +2.5722e-01  +2.9192e-01  3.47e-02  9.00e-05  6.64e-03  1.03e-05  3.45e-04  4.11e-01  
 12  +2.4994e-01  +2.5724e-01  7.30e-03  1.86e-05  1.38e-03  2.23e-06  7.55e-05  8.23e-01  
 13  +2.4936e-01  +2.5450e-01  5.14e-03  1.30e-05  9.69e-04  1.72e-06  5.33e-05  4.91e-01  
 14  +2.4828e-01  +2.4994e-01  1.66e-03  4.13e-06  3.11e-04  5.95e-07  1.74e-05  7.83e-01  
 15  +2.4788e-01  +2.4840e-01  5.17e-04  1.25e-06  9.52e-05  1.92e-07  5.37e-06  8.04e-01  
 16  +2.4772e-01  +2.4778e-01  6.10e-05  1.48e-07  1.12e-05  2.38e-08  6.36e-07  9.90e-01  
 17  +2.4770e-01  +2.4770e-01  6.39e-07  1.54e-09  1.17e-07  2.48e-10  6.66e-09  9.90e-01  
 18  +2.4770e-01  +2.4770e-01  6.39e-09  1.55e-11  1.17e-09  2.49e-12  6.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.6193ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:32 PM: Optimal value: 2.477e-01
(CVXPY) Sep 20 03:17:32 PM: Compilation took 5.531e-03 seconds
(CVXPY) Sep 20 03:17:32 PM: Solver (including time spent in interface) took 2.272e-02 seconds
FULL MODEL:
  Accruacy: 0.71
  Our objective: 0.42000000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.158)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.034)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.034)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.3082685470581055
Best over terms:
  Our final objective: 0.15799999999999997
    Its accruacy: 0.579
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15799999999999997
  Highest accruacy: 0.579
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

