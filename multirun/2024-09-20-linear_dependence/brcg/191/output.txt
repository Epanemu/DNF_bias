Command:
python test_script.py -s linear_dependence -d 5 -n 10000 --seed 56 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29800000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.298
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:05 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:05 PM: Finished problem compilation (took 1.661e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  9.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.9957e-01  +1.0020e+03  1.00e+03  3.64e-01  5.44e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4622e-01  +1.4296e+02  1.42e+02  1.45e-01  2.70e+01  9.85e-03  2.35e-01  7.78e-01  
  3  +5.1067e-01  +3.3611e+01  3.31e+01  1.15e-01  2.11e+01  2.32e-05  2.31e-01  9.15e-02  
  4  +5.0013e-01  +1.2807e+00  7.81e-01  5.26e-03  9.76e-01  5.29e-06  1.32e-01  9.90e-01  
  5  +4.9987e-01  +8.6364e-01  3.64e-01  2.39e-03  4.45e-01  8.06e-06  2.59e-02  8.68e-01  
  6  +4.8915e-01  +9.9253e-01  5.03e-01  3.05e-04  5.81e-02  3.14e-04  8.45e-04  9.75e-01  
  7  +4.6339e-01  +7.6342e-01  3.00e-01  7.71e-05  1.46e-02  4.92e-04  2.20e-04  7.60e-01  
  8  +4.2746e-01  +5.2187e-01  9.44e-02  2.43e-05  4.56e-03  3.99e-06  8.55e-05  7.51e-01  
  9  +4.0648e-01  +4.1690e-01  1.04e-02  2.43e-06  4.54e-04  2.51e-07  1.03e-05  8.96e-01  
 10  +4.0325e-01  +4.0341e-01  1.64e-04  3.63e-08  6.79e-06  4.02e-09  1.64e-07  9.86e-01  
 11  +4.0320e-01  +4.0320e-01  1.64e-06  3.62e-10  6.79e-08  4.02e-11  1.64e-09  9.90e-01  
 12  +4.0320e-01  +4.0320e-01  1.64e-08  3.62e-12  6.79e-10  4.09e-13  1.67e-11  9.90e-01  
 13  +4.0320e-01  +4.0320e-01  1.64e-10  3.62e-14  6.79e-12  4.16e-15  1.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.5346ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:05 PM: Optimal value: 4.032e-01
(CVXPY) Sep 20 03:08:05 PM: Compilation took 1.661e-02 seconds
(CVXPY) Sep 20 03:08:05 PM: Solver (including time spent in interface) took 3.890e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4032
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:05 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:05 PM: Finished problem compilation (took 1.586e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 49646
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0014e+03  5.00e+03  9.85e-01  9.87e+01  1.00e+00  1.00e+00   ------   
  1  +5.9940e-01  +1.0022e+03  1.00e+03  3.65e-01  5.77e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4599e-01  +1.4244e+02  1.42e+02  1.44e-01  2.85e+01  9.87e-03  2.34e-01  7.81e-01  
  3  +5.1050e-01  +3.3254e+01  3.27e+01  1.14e-01  2.22e+01  2.32e-05  2.31e-01  9.53e-02  
  4  +5.0033e-01  +1.9857e+00  1.49e+00  9.99e-03  1.95e+00  6.20e-06  1.61e-01  6.76e-01  
  5  +4.9997e-01  +8.3711e-01  3.37e-01  2.24e-03  4.43e-01  3.84e-06  3.42e-02  9.32e-01  
  6  +4.9654e-01  +1.1332e+00  6.37e-01  9.90e-04  2.01e-01  8.58e-05  2.71e-03  9.73e-01  
  7  +4.8110e-01  +9.7001e-01  4.89e-01  1.78e-04  3.63e-02  3.44e-04  4.60e-04  8.35e-01  
  8  +4.7563e-01  +9.5809e-01  4.82e-01  1.26e-04  2.56e-02  3.87e-04  3.19e-04  4.46e-01  
  9  +4.6313e-01  +8.3097e-01  3.68e-01  8.83e-05  1.79e-02  3.59e-05  2.32e-04  8.17e-01  
 10  +4.2163e-01  +6.3670e-01  2.15e-01  3.97e-05  7.99e-03  1.94e-05  1.13e-04  6.43e-01  
 11  +3.6706e-01  +4.0612e-01  3.91e-02  7.21e-06  1.43e-03  1.61e-07  2.47e-05  8.63e-01  
 12  +3.5170e-01  +3.5306e-01  1.36e-03  2.48e-07  4.93e-05  1.09e-08  9.16e-07  9.66e-01  
 13  +3.5111e-01  +3.5112e-01  1.37e-05  2.49e-09  4.94e-07  1.09e-10  9.23e-09  9.90e-01  
 14  +3.5110e-01  +3.5110e-01  1.37e-07  2.49e-11  4.94e-09  1.09e-12  9.25e-11  9.90e-01  
 15  +3.5110e-01  +3.5110e-01  1.37e-09  2.49e-13  4.94e-11  1.10e-14  9.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.2253ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:05 PM: Optimal value: 3.511e-01
(CVXPY) Sep 20 03:08:05 PM: Compilation took 1.586e-02 seconds
(CVXPY) Sep 20 03:08:05 PM: Solver (including time spent in interface) took 5.217e-02 seconds
FULL MODEL:
  Accruacy: 0.649
  Our objective: 0.29800000000000004

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.298)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4249207973480225
Best over terms:
  Our final objective: 0.29800000000000004
    Its accruacy: 0.649
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29800000000000004
  Highest accruacy: 0.649
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

