Command:
python test_script.py -s linear_dependence -d 9 -n 10000 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1424
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 9.

Computed total variation: 0.2506
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:31 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:31 PM: Finished problem compilation (took 2.153e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 60019
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +1.0852e+03  1.08e+03  4.32e-01  7.57e+01  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3194e-01  +1.2310e+02  1.23e+02  1.71e-01  3.84e+01  1.63e-02  2.77e-01  9.30e-01  
  3  +5.0880e-01  +3.1989e+01  3.15e+01  1.23e-01  2.76e+01  4.48e-05  2.59e-01  2.74e-01  
  4  +5.0102e-01  +3.0818e+00  2.58e+00  1.75e-02  3.99e+00  5.84e-06  1.66e-01  6.15e-01  
  5  +5.0012e-01  +9.9671e-01  4.97e-01  3.33e-03  7.74e-01  3.88e-05  9.07e-02  9.90e-01  
  6  +4.9999e-01  +6.1670e-01  1.17e-01  7.75e-04  1.81e-01  2.80e-05  1.47e-02  8.53e-01  
  7  +4.9756e-01  +7.4190e-01  2.44e-01  2.05e-04  4.82e-02  1.28e-03  6.30e-04  9.82e-01  
  8  +4.9183e-01  +7.0264e-01  2.11e-01  6.70e-05  1.58e-02  3.03e-03  2.03e-04  6.94e-01  
  9  +4.8538e-01  +6.1768e-01  1.32e-01  4.42e-05  1.04e-02  7.92e-04  1.39e-04  5.04e-01  
 10  +4.7776e-01  +5.6039e-01  8.26e-02  2.39e-05  5.60e-03  1.65e-04  7.85e-05  7.41e-01  
 11  +4.7445e-01  +5.3994e-01  6.55e-02  1.75e-05  4.10e-03  1.73e-06  5.94e-05  9.02e-01  
 12  +4.6374e-01  +4.8900e-01  2.53e-02  5.95e-06  1.39e-03  6.44e-07  2.21e-05  6.64e-01  
 13  +4.6215e-01  +4.8113e-01  1.90e-02  4.25e-06  9.95e-04  8.67e-07  1.63e-05  9.90e-01  
 14  +4.5644e-01  +4.5710e-01  6.65e-04  1.39e-07  3.25e-05  2.50e-08  5.86e-07  9.76e-01  
 15  +4.5620e-01  +4.5621e-01  6.76e-06  1.41e-09  3.29e-07  2.54e-10  5.97e-09  9.90e-01  
 16  +4.5620e-01  +4.5620e-01  6.76e-08  1.41e-11  3.29e-09  2.54e-12  5.97e-11  9.90e-01  
 17  +4.5620e-01  +4.5620e-01  6.77e-10  1.41e-13  3.29e-11  2.65e-14  6.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.1441ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:31 PM: Optimal value: 4.562e-01
(CVXPY) Sep 20 03:19:31 PM: Compilation took 2.153e-02 seconds
(CVXPY) Sep 20 03:19:31 PM: Solver (including time spent in interface) took 7.869e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:31 PM: Your problem has 5029 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:31 PM: Finished problem compilation (took 2.280e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5029
  constraints   = 10029
  nnz(P)        = 0
  nnz(A)        = 68603
  cones (total) = 1
    : Nonnegative = 1,  numel = 10029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.8087e-01  +1.0856e+03  1.08e+03  4.32e-01  7.82e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3179e-01  +1.2285e+02  1.22e+02  1.71e-01  3.96e+01  1.63e-02  2.78e-01  9.31e-01  
  3  +5.0873e-01  +3.1841e+01  3.13e+01  1.23e-01  2.85e+01  4.49e-05  2.59e-01  2.80e-01  
  4  +5.0098e-01  +2.9890e+00  2.49e+00  1.69e-02  3.99e+00  5.94e-06  1.61e-01  6.40e-01  
  5  +5.0018e-01  +1.1083e+00  6.08e-01  4.09e-03  9.78e-01  3.40e-05  8.64e-02  9.03e-01  
  6  +5.0003e-01  +7.4007e-01  2.40e-01  1.58e-03  3.79e-01  3.25e-05  1.92e-02  9.90e-01  
  7  +4.9799e-01  +8.6650e-01  3.69e-01  2.65e-04  6.46e-02  1.09e-03  7.59e-04  9.83e-01  
  8  +4.9348e-01  +8.1433e-01  3.21e-01  9.73e-05  2.37e-02  2.30e-03  2.75e-04  6.65e-01  
  9  +4.8938e-01  +7.5188e-01  2.62e-01  7.45e-05  1.81e-02  1.55e-03  2.14e-04  3.38e-01  
 10  +4.8935e-01  +7.0442e-01  2.15e-01  6.71e-05  1.63e-02  3.63e-04  1.93e-04  5.25e-01  
 11  +4.8834e-01  +6.9067e-01  2.02e-01  6.08e-05  1.48e-02  2.61e-04  1.75e-04  2.87e-01  
 12  +4.8207e-01  +6.4643e-01  1.64e-01  4.38e-05  1.06e-02  1.37e-04  1.27e-04  5.21e-01  
 13  +4.6151e-01  +5.3474e-01  7.32e-02  1.46e-05  3.54e-03  1.91e-05  4.35e-05  9.15e-01  
 14  +4.6003e-01  +5.3322e-01  7.32e-02  1.27e-05  3.07e-03  2.03e-05  3.73e-05  2.00e-01  
 15  +4.5133e-01  +5.0235e-01  5.10e-02  1.08e-05  2.61e-03  5.46e-06  3.67e-05  2.26e-01  
 16  +4.3776e-01  +4.5313e-01  1.54e-02  2.47e-06  5.96e-04  2.83e-06  7.63e-06  8.96e-01  
 17  +4.3153e-01  +4.3657e-01  5.05e-03  8.16e-07  1.97e-04  2.87e-07  2.59e-06  9.24e-01  
 18  +4.2894e-01  +4.2901e-01  7.17e-05  1.12e-08  2.72e-06  3.72e-09  3.58e-08  9.86e-01  
 19  +4.2890e-01  +4.2890e-01  7.17e-07  1.12e-10  2.72e-08  3.72e-11  3.58e-10  9.90e-01  
 20  +4.2890e-01  +4.2890e-01  7.18e-09  1.13e-12  2.72e-10  3.80e-13  3.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.948ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:31 PM: Optimal value: 4.289e-01
(CVXPY) Sep 20 03:19:31 PM: Compilation took 2.280e-02 seconds
(CVXPY) Sep 20 03:19:31 PM: Solver (including time spent in interface) took 8.759e-02 seconds
Iteration: 2, Objective: 0.4289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:31 PM: Your problem has 5039 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:31 PM: Finished problem compilation (took 2.453e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5039
  constraints   = 10039
  nnz(P)        = 0
  nnz(A)        = 74933
  cones (total) = 1
    : Nonnegative = 1,  numel = 10039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8083e-01  +1.0857e+03  1.09e+03  4.32e-01  7.94e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3173e-01  +1.2273e+02  1.22e+02  1.71e-01  4.02e+01  1.63e-02  2.78e-01  9.31e-01  
  3  +5.0872e-01  +3.1812e+01  3.13e+01  1.23e-01  2.89e+01  4.50e-05  2.58e-01  2.81e-01  
  4  +5.0099e-01  +2.9904e+00  2.49e+00  1.70e-02  4.05e+00  5.94e-06  1.61e-01  6.41e-01  
  5  +5.0015e-01  +1.0380e+00  5.38e-01  3.61e-03  8.79e-01  3.53e-05  7.90e-02  9.87e-01  
  6  +5.0005e-01  +8.1776e-01  3.18e-01  2.07e-03  5.06e-01  4.18e-05  2.18e-02  9.24e-01  
  7  +4.9793e-01  +8.4151e-01  3.44e-01  2.50e-04  6.19e-02  1.11e-03  7.22e-04  9.89e-01  
  8  +4.9359e-01  +7.8615e-01  2.93e-01  9.79e-05  2.43e-02  2.07e-03  2.79e-04  6.53e-01  
  9  +4.9029e-01  +7.4114e-01  2.51e-01  7.35e-05  1.82e-02  1.55e-03  2.10e-04  3.83e-01  
 10  +4.8956e-01  +7.2832e-01  2.39e-01  6.51e-05  1.61e-02  1.28e-03  1.85e-04  2.61e-01  
 11  +4.8887e-01  +7.0500e-01  2.16e-01  6.16e-05  1.52e-02  6.97e-04  1.75e-04  3.17e-01  
 12  +4.8161e-01  +6.5563e-01  1.74e-01  4.31e-05  1.07e-02  4.46e-04  1.24e-04  4.58e-01  
 13  +4.6152e-01  +5.4345e-01  8.19e-02  1.58e-05  3.89e-03  9.18e-05  4.66e-05  8.37e-01  
 14  +4.6031e-01  +5.3829e-01  7.80e-02  1.56e-05  3.84e-03  8.18e-05  4.66e-05  1.16e-02  
 15  +4.5388e-01  +5.1684e-01  6.30e-02  1.14e-05  2.81e-03  5.98e-05  3.41e-05  3.60e-01  
 16  +4.5387e-01  +5.1694e-01  6.31e-02  1.14e-05  2.80e-03  5.79e-05  3.39e-05  4.36e-02  
 17  +4.5335e-01  +5.1525e-01  6.19e-02  1.12e-05  2.76e-03  5.34e-05  3.35e-05  5.64e-02  
 18  +4.5190e-01  +5.1031e-01  5.84e-02  1.04e-05  2.55e-03  4.29e-05  3.10e-05  2.13e-01  
 19  +4.4465e-01  +4.8444e-01  3.98e-02  6.75e-06  1.66e-03  2.69e-05  2.05e-05  3.81e-01  
 20  +4.3254e-01  +4.4090e-01  8.36e-03  1.32e-06  3.25e-04  3.45e-07  4.17e-06  9.90e-01  
 21  +4.2903e-01  +4.2932e-01  2.92e-04  4.59e-08  1.13e-05  1.35e-08  1.46e-07  9.71e-01  
 22  +4.2890e-01  +4.2890e-01  2.93e-06  4.60e-10  1.13e-07  1.36e-10  1.47e-09  9.90e-01  
 23  +4.2890e-01  +4.2890e-01  2.93e-08  4.60e-12  1.13e-09  1.36e-12  1.47e-11  9.90e-01  
 24  +4.2890e-01  +4.2890e-01  2.93e-10  4.60e-14  1.13e-11  1.37e-14  1.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.771ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:31 PM: Optimal value: 4.289e-01
(CVXPY) Sep 20 03:19:31 PM: Compilation took 2.453e-02 seconds
(CVXPY) Sep 20 03:19:31 PM: Solver (including time spent in interface) took 1.164e-01 seconds
Iteration: 3, Objective: 0.4289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:31 PM: Your problem has 5049 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:31 PM: Finished problem compilation (took 2.452e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5049
  constraints   = 10049
  nnz(P)        = 0
  nnz(A)        = 77075
  cones (total) = 1
    : Nonnegative = 1,  numel = 10049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8075e-01  +1.0859e+03  1.09e+03  4.33e-01  7.95e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3166e-01  +1.2260e+02  1.22e+02  1.71e-01  4.01e+01  1.64e-02  2.78e-01  9.32e-01  
  3  +5.0870e-01  +3.1773e+01  3.13e+01  1.23e-01  2.89e+01  4.51e-05  2.58e-01  2.84e-01  
  4  +5.0098e-01  +2.9864e+00  2.49e+00  1.69e-02  4.05e+00  5.96e-06  1.60e-01  6.44e-01  
  5  +5.0018e-01  +1.1297e+00  6.30e-01  4.23e-03  1.03e+00  3.46e-05  8.38e-02  9.09e-01  
  6  +5.0004e-01  +7.7348e-01  2.73e-01  1.79e-03  4.38e-01  3.80e-05  1.99e-02  8.78e-01  
  7  +4.9797e-01  +8.8307e-01  3.85e-01  2.90e-04  7.21e-02  1.10e-03  8.26e-04  9.86e-01  
  8  +4.9321e-01  +8.2428e-01  3.31e-01  1.03e-04  2.57e-02  2.34e-03  2.89e-04  6.81e-01  
  9  +4.9260e-01  +8.1264e-01  3.20e-01  9.59e-05  2.38e-02  2.18e-03  2.68e-04  1.29e-01  
 10  +4.8968e-01  +7.7851e-01  2.89e-01  7.35e-05  1.82e-02  1.93e-03  2.05e-04  3.38e-01  
 11  +4.8848e-01  +7.5069e-01  2.62e-01  7.18e-05  1.78e-02  1.31e-03  2.02e-04  1.51e-01  
 12  +4.7838e-01  +6.7741e-01  1.99e-01  4.42e-05  1.09e-02  8.63e-04  1.26e-04  5.17e-01  
 13  +4.7321e-01  +6.2685e-01  1.54e-01  3.69e-05  9.12e-03  7.82e-06  1.08e-04  7.22e-01  
 14  +4.5453e-01  +5.4381e-01  8.93e-02  1.77e-05  4.36e-03  4.67e-06  5.38e-05  6.01e-01  
 15  +4.4877e-01  +5.2077e-01  7.20e-02  1.34e-05  3.30e-03  3.91e-06  4.12e-05  3.08e-01  
 16  +4.4846e-01  +5.1960e-01  7.11e-02  1.34e-05  3.29e-03  3.82e-06  4.12e-05  9.90e-03  
 17  +4.4222e-01  +4.9539e-01  5.32e-02  9.71e-06  2.39e-03  2.92e-06  3.04e-05  4.23e-01  
 18  +4.2806e-01  +4.4129e-01  1.32e-02  2.29e-06  5.62e-04  6.81e-07  7.48e-06  7.72e-01  
 19  +4.2414e-01  +4.2701e-01  2.87e-03  4.86e-07  1.19e-04  1.52e-07  1.63e-06  8.04e-01  
 20  +4.2311e-01  +4.2335e-01  2.39e-04  4.01e-08  9.84e-06  1.63e-08  1.36e-07  9.90e-01  
 21  +4.2301e-01  +4.2303e-01  2.19e-05  3.68e-09  9.03e-07  1.50e-09  1.25e-08  9.15e-01  
 22  +4.2300e-01  +4.2300e-01  2.34e-07  3.92e-11  9.63e-09  1.60e-11  1.34e-10  9.90e-01  
 23  +4.2300e-01  +4.2300e-01  2.34e-09  3.92e-13  9.63e-11  1.61e-13  1.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 111.698ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:31 PM: Optimal value: 4.230e-01
(CVXPY) Sep 20 03:19:31 PM: Compilation took 2.452e-02 seconds
(CVXPY) Sep 20 03:19:31 PM: Solver (including time spent in interface) took 1.191e-01 seconds
Iteration: 4, Objective: 0.4230
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:31 PM: Your problem has 5059 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:32 PM: Finished problem compilation (took 3.112e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5059
  constraints   = 10059
  nnz(P)        = 0
  nnz(A)        = 78556
  cones (total) = 1
    : Nonnegative = 1,  numel = 10059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8069e-01  +1.0859e+03  1.09e+03  4.33e-01  7.95e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3160e-01  +1.2249e+02  1.22e+02  1.71e-01  4.01e+01  1.64e-02  2.77e-01  9.33e-01  
  3  +5.0868e-01  +3.1737e+01  3.12e+01  1.23e-01  2.88e+01  4.51e-05  2.58e-01  2.85e-01  
  4  +5.0098e-01  +2.9805e+00  2.48e+00  1.69e-02  4.05e+00  5.98e-06  1.59e-01  6.46e-01  
  5  +5.0017e-01  +1.1016e+00  6.01e-01  4.04e-03  9.85e-01  3.58e-05  7.83e-02  9.57e-01  
  6  +5.0004e-01  +8.3702e-01  3.37e-01  2.17e-03  5.30e-01  4.68e-05  1.92e-02  9.23e-01  
  7  +4.9793e-01  +8.3204e-01  3.34e-01  2.41e-04  5.99e-02  1.10e-03  6.76e-04  9.81e-01  
  8  +4.9378e-01  +7.9087e-01  2.97e-01  9.98e-05  2.48e-02  2.09e-03  2.76e-04  6.29e-01  
  9  +4.9401e-01  +7.7746e-01  2.83e-01  9.02e-05  2.24e-02  1.52e-03  2.48e-04  3.30e-01  
 10  +4.9114e-01  +7.5404e-01  2.63e-01  7.07e-05  1.76e-02  1.43e-03  1.95e-04  3.07e-01  
 11  +4.9067e-01  +7.4872e-01  2.58e-01  7.04e-05  1.75e-02  1.33e-03  1.94e-04  3.40e-02  
 12  +4.8635e-01  +7.1491e-01  2.29e-01  5.66e-05  1.40e-02  8.87e-04  1.58e-04  4.02e-01  
 13  +4.7311e-01  +6.3949e-01  1.66e-01  3.59e-05  8.89e-03  3.21e-04  1.03e-04  6.32e-01  
 14  +4.6720e-01  +6.1233e-01  1.45e-01  3.11e-05  7.69e-03  1.62e-04  9.12e-05  3.95e-01  
 15  +4.4552e-01  +5.2227e-01  7.68e-02  1.45e-05  3.58e-03  6.12e-05  4.52e-05  5.92e-01  
 16  +4.3363e-01  +4.7639e-01  4.28e-02  7.80e-06  1.92e-03  3.05e-05  2.52e-05  4.76e-01  
 17  +4.2586e-01  +4.4679e-01  2.09e-02  3.70e-06  9.11e-04  1.09e-05  1.23e-05  6.52e-01  
 18  +4.2364e-01  +4.3762e-01  1.40e-02  2.40e-06  5.89e-04  1.36e-06  8.00e-06  9.90e-01  
 19  +4.1822e-01  +4.1921e-01  9.88e-04  1.69e-07  4.15e-05  9.25e-08  5.80e-07  9.37e-01  
 20  +4.1780e-01  +4.1782e-01  1.12e-05  1.91e-09  4.70e-07  1.05e-09  6.59e-09  9.89e-01  
 21  +4.1780e-01  +4.1780e-01  1.12e-07  1.91e-11  4.71e-09  1.05e-11  6.60e-11  9.90e-01  
 22  +4.1780e-01  +4.1780e-01  1.12e-09  1.92e-13  4.71e-11  1.05e-13  6.61e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 122.643ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:32 PM: Optimal value: 4.178e-01
(CVXPY) Sep 20 03:19:32 PM: Compilation took 3.112e-02 seconds
(CVXPY) Sep 20 03:19:32 PM: Solver (including time spent in interface) took 1.309e-01 seconds
Iteration: 5, Objective: 0.4178
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:32 PM: Your problem has 5069 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:32 PM: Finished problem compilation (took 2.965e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5069
  constraints   = 10069
  nnz(P)        = 0
  nnz(A)        = 79684
  cones (total) = 1
    : Nonnegative = 1,  numel = 10069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8063e-01  +1.0860e+03  1.09e+03  4.33e-01  7.95e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3154e-01  +1.2238e+02  1.22e+02  1.71e-01  4.00e+01  1.64e-02  2.77e-01  9.34e-01  
  3  +5.0867e-01  +3.1704e+01  3.12e+01  1.23e-01  2.87e+01  4.52e-05  2.57e-01  2.87e-01  
  4  +5.0098e-01  +2.9764e+00  2.48e+00  1.69e-02  4.04e+00  5.99e-06  1.58e-01  6.48e-01  
  5  +5.0024e-01  +1.2596e+00  7.59e-01  5.12e-03  1.24e+00  3.38e-05  8.85e-02  8.23e-01  
  6  +5.0005e-01  +8.1560e-01  3.16e-01  2.07e-03  5.06e-01  3.76e-05  2.22e-02  8.49e-01  
  7  +4.9837e-01  +9.0893e-01  4.11e-01  3.56e-04  8.87e-02  8.98e-04  1.01e-03  9.87e-01  
  8  +4.9419e-01  +8.5733e-01  3.63e-01  1.24e-04  3.08e-02  2.08e-03  3.42e-04  6.88e-01  
  9  +4.9235e-01  +8.1622e-01  3.24e-01  9.70e-05  2.41e-02  1.64e-03  2.66e-04  3.83e-01  
 10  +4.8959e-01  +7.9266e-01  3.03e-01  7.71e-05  1.92e-02  1.59e-03  2.12e-04  2.78e-01  
 11  +4.8828e-01  +7.6736e-01  2.79e-01  7.51e-05  1.87e-02  1.09e-03  2.08e-04  1.72e-01  
 12  +4.7336e-01  +6.7355e-01  2.00e-01  4.06e-05  1.01e-02  7.49e-04  1.16e-04  5.70e-01  
 13  +4.6842e-01  +6.4940e-01  1.81e-01  3.58e-05  8.86e-03  6.02e-04  1.04e-04  1.80e-01  
 14  +4.6426e-01  +6.2553e-01  1.61e-01  3.26e-05  8.06e-03  3.94e-04  9.58e-05  2.44e-01  
 15  +4.4527e-01  +5.3841e-01  9.31e-02  1.79e-05  4.41e-03  1.24e-04  5.58e-05  5.83e-01  
 16  +4.2187e-01  +4.4196e-01  2.01e-02  3.59e-06  8.83e-04  1.23e-06  1.21e-05  9.33e-01  
 17  +4.2075e-01  +4.3805e-01  1.73e-02  3.06e-06  7.53e-04  1.07e-06  1.04e-05  2.21e-01  
 18  +4.1913e-01  +4.3195e-01  1.28e-02  2.24e-06  5.51e-04  8.73e-07  7.68e-06  9.90e-01  
 19  +4.1615e-01  +4.2194e-01  5.79e-03  1.01e-06  2.47e-04  3.98e-07  3.50e-06  6.43e-01  
 20  +4.1388e-01  +4.1430e-01  4.24e-04  7.36e-08  1.81e-05  2.89e-08  2.60e-07  9.37e-01  
 21  +4.1370e-01  +4.1371e-01  7.81e-06  1.36e-09  3.34e-07  5.28e-10  4.79e-09  9.86e-01  
 22  +4.1370e-01  +4.1370e-01  7.81e-08  1.36e-11  3.34e-09  5.28e-12  4.79e-11  9.90e-01  
 23  +4.1370e-01  +4.1370e-01  7.81e-10  1.36e-13  3.34e-11  5.28e-14  4.79e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 117.6187ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:32 PM: Optimal value: 4.137e-01
(CVXPY) Sep 20 03:19:32 PM: Compilation took 2.965e-02 seconds
(CVXPY) Sep 20 03:19:32 PM: Solver (including time spent in interface) took 1.256e-01 seconds
Iteration: 6, Objective: 0.4137
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:32 PM: Your problem has 5079 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:32 PM: Finished problem compilation (took 2.853e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5079
  constraints   = 10079
  nnz(P)        = 0
  nnz(A)        = 80317
  cones (total) = 1
    : Nonnegative = 1,  numel = 10079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8057e-01  +1.0859e+03  1.09e+03  4.33e-01  7.94e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3150e-01  +1.2228e+02  1.22e+02  1.70e-01  3.99e+01  1.64e-02  2.77e-01  9.34e-01  
  3  +5.0866e-01  +3.1677e+01  3.12e+01  1.23e-01  2.87e+01  4.52e-05  2.57e-01  2.88e-01  
  4  +5.0098e-01  +2.9717e+00  2.47e+00  1.69e-02  4.03e+00  6.00e-06  1.58e-01  6.50e-01  
  5  +5.0029e-01  +1.3739e+00  8.74e-01  5.89e-03  1.43e+00  3.25e-05  9.43e-02  7.43e-01  
  6  +5.0005e-01  +8.0422e-01  3.04e-01  2.01e-03  4.90e-01  3.52e-05  2.28e-02  8.33e-01  
  7  +4.9819e-01  +9.5229e-01  4.54e-01  3.66e-04  9.11e-02  9.95e-04  1.02e-03  9.85e-01  
  8  +4.9369e-01  +8.9501e-01  4.01e-01  1.29e-04  3.21e-02  2.26e-03  3.54e-04  6.82e-01  
  9  +4.9077e-01  +8.4045e-01  3.50e-01  9.97e-05  2.48e-02  1.75e-03  2.75e-04  3.58e-01  
 10  +4.9068e-01  +8.2519e-01  3.35e-01  9.85e-05  2.45e-02  1.44e-03  2.72e-04  1.02e-01  
 11  +4.8532e-01  +7.7837e-01  2.93e-01  7.16e-05  1.78e-02  1.23e-03  2.00e-04  3.75e-01  
 12  +4.7100e-01  +6.5920e-01  1.88e-01  4.41e-05  1.09e-02  1.63e-04  1.28e-04  7.07e-01  
 13  +4.6843e-01  +6.4819e-01  1.80e-01  4.04e-05  9.98e-03  1.34e-04  1.18e-04  2.01e-01  
 14  +4.5917e-01  +6.0352e-01  1.44e-01  3.13e-05  7.73e-03  3.38e-05  9.46e-05  6.43e-01  
 15  +4.3409e-01  +4.9953e-01  6.54e-02  1.24e-05  3.04e-03  1.16e-05  4.02e-05  6.40e-01  
 16  +4.2086e-01  +4.4761e-01  2.67e-02  4.80e-06  1.18e-03  1.64e-06  1.64e-05  9.90e-01  
 17  +4.1751e-01  +4.3551e-01  1.80e-02  3.21e-06  7.89e-04  1.12e-06  1.11e-05  3.66e-01  
 18  +4.1625e-01  +4.3012e-01  1.39e-02  2.46e-06  6.05e-04  9.28e-07  8.58e-06  9.90e-01  
 19  +4.1259e-01  +4.1759e-01  5.00e-03  8.85e-07  2.18e-04  3.40e-07  3.15e-06  7.58e-01  
 20  +4.1060e-01  +4.1085e-01  2.45e-04  4.34e-08  1.07e-05  1.60e-08  1.56e-07  9.90e-01  
 21  +4.1050e-01  +4.1050e-01  2.46e-06  4.36e-10  1.07e-07  1.60e-10  1.57e-09  9.90e-01  
 22  +4.1050e-01  +4.1050e-01  2.46e-08  4.36e-12  1.07e-09  1.60e-12  1.57e-11  9.90e-01  
 23  +4.1050e-01  +4.1050e-01  2.46e-10  4.36e-14  1.07e-11  1.60e-14  1.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.4114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:32 PM: Optimal value: 4.105e-01
(CVXPY) Sep 20 03:19:32 PM: Compilation took 2.853e-02 seconds
(CVXPY) Sep 20 03:19:32 PM: Solver (including time spent in interface) took 1.205e-01 seconds
Iteration: 7, Objective: 0.4105
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:32 PM: Your problem has 5089 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:32 PM: Finished problem compilation (took 2.638e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5089
  constraints   = 10089
  nnz(P)        = 0
  nnz(A)        = 81212
  cones (total) = 1
    : Nonnegative = 1,  numel = 10089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8050e-01  +1.0859e+03  1.09e+03  4.33e-01  7.93e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3142e-01  +1.2211e+02  1.22e+02  1.70e-01  3.98e+01  1.64e-02  2.77e-01  9.35e-01  
  3  +5.0864e-01  +3.1617e+01  3.11e+01  1.23e-01  2.86e+01  4.52e-05  2.57e-01  2.90e-01  
  4  +5.0098e-01  +2.9656e+00  2.46e+00  1.68e-02  4.03e+00  6.02e-06  1.57e-01  6.53e-01  
  5  +5.0033e-01  +1.4668e+00  9.66e-01  6.53e-03  1.58e+00  3.17e-05  9.67e-02  6.96e-01  
  6  +5.0006e-01  +8.2079e-01  3.21e-01  2.12e-03  5.16e-01  3.55e-05  2.35e-02  8.29e-01  
  7  +4.9844e-01  +9.4365e-01  4.45e-01  4.05e-04  1.01e-01  8.68e-04  1.13e-03  9.82e-01  
  8  +4.9385e-01  +8.9489e-01  4.01e-01  1.29e-04  3.22e-02  2.28e-03  3.51e-04  7.10e-01  
  9  +4.9228e-01  +8.5833e-01  3.66e-01  1.07e-04  2.65e-02  1.86e-03  2.90e-04  3.18e-01  
 10  +4.8856e-01  +7.9944e-01  3.11e-01  8.02e-05  2.00e-02  1.16e-03  2.20e-04  4.82e-01  
 11  +4.8462e-01  +7.6918e-01  2.85e-01  6.94e-05  1.73e-02  9.29e-04  1.92e-04  2.31e-01  
 12  +4.7754e-01  +7.1814e-01  2.41e-01  5.77e-05  1.43e-02  5.02e-04  1.64e-04  3.69e-01  
 13  +4.5431e-01  +5.9538e-01  1.41e-01  2.92e-05  7.21e-03  1.32e-04  8.85e-05  6.75e-01  
 14  +4.4292e-01  +5.4655e-01  1.04e-01  2.08e-05  5.11e-03  5.44e-05  6.54e-05  5.27e-01  
 15  +4.3199e-01  +5.0235e-01  7.04e-02  1.36e-05  3.35e-03  3.26e-05  4.46e-05  3.75e-01  
 16  +4.1479e-01  +4.3457e-01  1.98e-02  3.61e-06  8.86e-04  4.29e-06  1.26e-05  8.60e-01  
 17  +4.1418e-01  +4.3227e-01  1.81e-02  3.28e-06  8.05e-04  3.70e-06  1.15e-05  1.72e-01  
 18  +4.1263e-01  +4.2582e-01  1.32e-02  2.37e-06  5.82e-04  9.32e-07  8.34e-06  9.90e-01  
 19  +4.0986e-01  +4.1634e-01  6.48e-03  1.16e-06  2.85e-04  4.55e-07  4.14e-06  5.73e-01  
 20  +4.0729e-01  +4.0750e-01  2.13e-04  3.80e-08  9.34e-06  1.44e-08  1.38e-07  9.75e-01  
 21  +4.0720e-01  +4.0720e-01  2.13e-06  3.81e-10  9.36e-08  1.44e-10  1.38e-09  9.90e-01  
 22  +4.0720e-01  +4.0720e-01  2.13e-08  3.81e-12  9.36e-10  1.44e-12  1.38e-11  9.90e-01  
 23  +4.0720e-01  +4.0720e-01  2.14e-10  3.81e-14  9.37e-12  1.44e-14  1.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 111.1025ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:32 PM: Optimal value: 4.072e-01
(CVXPY) Sep 20 03:19:32 PM: Compilation took 2.638e-02 seconds
(CVXPY) Sep 20 03:19:32 PM: Solver (including time spent in interface) took 1.197e-01 seconds
Iteration: 8, Objective: 0.4072
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:33 PM: Your problem has 5099 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:33 PM: Finished problem compilation (took 2.909e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5099
  constraints   = 10099
  nnz(P)        = 0
  nnz(A)        = 81952
  cones (total) = 1
    : Nonnegative = 1,  numel = 10099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8045e-01  +1.0860e+03  1.09e+03  4.33e-01  7.93e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3137e-01  +1.2201e+02  1.21e+02  1.70e-01  3.97e+01  1.64e-02  2.76e-01  9.36e-01  
  3  +5.0862e-01  +3.1585e+01  3.11e+01  1.22e-01  2.85e+01  4.53e-05  2.56e-01  2.92e-01  
  4  +5.0097e-01  +2.9630e+00  2.46e+00  1.68e-02  4.02e+00  6.03e-06  1.56e-01  6.55e-01  
  5  +5.0033e-01  +1.4719e+00  9.72e-01  6.56e-03  1.59e+00  3.20e-05  9.51e-02  7.04e-01  
  6  +5.0008e-01  +8.6888e-01  3.69e-01  2.43e-03  5.93e-01  3.68e-05  2.57e-02  7.93e-01  
  7  +4.9892e-01  +9.7666e-01  4.78e-01  5.53e-04  1.38e-01  6.32e-04  1.56e-03  9.90e-01  
  8  +4.9510e-01  +9.2911e-01  4.34e-01  1.60e-04  3.99e-02  1.90e-03  4.35e-04  7.37e-01  
  9  +4.9269e-01  +8.8408e-01  3.91e-01  1.20e-04  2.99e-02  1.73e-03  3.26e-04  3.64e-01  
 10  +4.9132e-01  +8.6098e-01  3.70e-01  1.04e-04  2.60e-02  1.55e-03  2.84e-04  2.23e-01  
 11  +4.9012e-01  +8.0096e-01  3.11e-01  9.40e-05  2.34e-02  5.19e-04  2.57e-04  4.84e-01  
 12  +4.8486e-01  +7.6356e-01  2.79e-01  7.34e-05  1.82e-02  4.24e-04  2.04e-04  3.39e-01  
 13  +4.7726e-01  +7.1694e-01  2.40e-01  5.80e-05  1.44e-02  2.79e-04  1.64e-04  3.66e-01  
 14  +4.6383e-01  +6.4468e-01  1.81e-01  4.08e-05  1.01e-02  1.13e-04  1.20e-04  5.21e-01  
 15  +4.4411e-01  +5.5538e-01  1.11e-01  2.29e-05  5.63e-03  4.07e-05  7.16e-05  5.79e-01  
 16  +4.2970e-01  +4.9647e-01  6.68e-02  1.30e-05  3.20e-03  2.08e-05  4.27e-05  4.63e-01  
 17  +4.2429e-01  +4.7517e-01  5.09e-02  9.68e-06  2.38e-03  1.43e-05  3.24e-05  3.29e-01  
 18  +4.1330e-01  +4.3183e-01  1.85e-02  3.35e-06  8.24e-04  1.32e-06  1.17e-05  9.90e-01  
 19  +4.1287e-01  +4.3025e-01  1.74e-02  3.14e-06  7.70e-04  1.23e-06  1.10e-05  1.23e-01  
 20  +4.0957e-01  +4.1807e-01  8.50e-03  1.53e-06  3.75e-04  5.64e-07  5.43e-06  9.90e-01  
 21  +4.0639e-01  +4.0707e-01  6.85e-04  1.23e-07  3.02e-05  4.34e-08  4.48e-07  9.90e-01  
 22  +4.0610e-01  +4.0611e-01  7.55e-06  1.36e-09  3.33e-07  4.78e-10  4.95e-09  9.89e-01  
 23  +4.0610e-01  +4.0610e-01  7.55e-08  1.36e-11  3.33e-09  4.78e-12  4.95e-11  9.90e-01  
 24  +4.0610e-01  +4.0610e-01  7.55e-10  1.36e-13  3.33e-11  4.79e-14  4.95e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.0211ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:33 PM: Optimal value: 4.061e-01
(CVXPY) Sep 20 03:19:33 PM: Compilation took 2.909e-02 seconds
(CVXPY) Sep 20 03:19:33 PM: Solver (including time spent in interface) took 1.271e-01 seconds
Iteration: 9, Objective: 0.4061
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:33 PM: Your problem has 5109 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:33 PM: Finished problem compilation (took 3.006e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5109
  constraints   = 10109
  nnz(P)        = 0
  nnz(A)        = 82568
  cones (total) = 1
    : Nonnegative = 1,  numel = 10109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8036e-01  +1.0862e+03  1.09e+03  4.34e-01  7.92e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3129e-01  +1.2190e+02  1.21e+02  1.70e-01  3.96e+01  1.64e-02  2.76e-01  9.37e-01  
  3  +5.0861e-01  +3.1558e+01  3.10e+01  1.22e-01  2.85e+01  4.54e-05  2.56e-01  2.94e-01  
  4  +5.0098e-01  +2.9671e+00  2.47e+00  1.69e-02  4.03e+00  6.04e-06  1.55e-01  6.56e-01  
  5  +5.0031e-01  +1.4444e+00  9.44e-01  6.38e-03  1.55e+00  3.33e-05  9.10e-02  7.43e-01  
  6  +5.0007e-01  +8.8882e-01  3.89e-01  2.54e-03  6.20e-01  4.14e-05  2.36e-02  7.83e-01  
  7  +4.9833e-01  +9.7204e-01  4.74e-01  3.87e-04  9.65e-02  9.22e-04  1.07e-03  9.87e-01  
  8  +4.9403e-01  +9.1001e-01  4.16e-01  1.40e-04  3.49e-02  1.99e-03  3.80e-04  6.84e-01  
  9  +4.9227e-01  +8.8704e-01  3.95e-01  1.16e-04  2.89e-02  1.90e-03  3.14e-04  2.59e-01  
 10  +4.9060e-01  +8.2578e-01  3.35e-01  9.70e-05  2.41e-02  8.17e-04  2.64e-04  5.06e-01  
 11  +4.8405e-01  +7.6470e-01  2.81e-01  7.40e-05  1.84e-02  4.25e-04  2.05e-04  5.06e-01  
 12  +4.7668e-01  +7.2410e-01  2.47e-01  5.94e-05  1.47e-02  3.49e-04  1.68e-04  2.49e-01  
 13  +4.6585e-01  +6.5934e-01  1.93e-01  4.63e-05  1.14e-02  5.70e-05  1.36e-04  6.53e-01  
 14  +4.4273e-01  +5.5448e-01  1.12e-01  2.32e-05  5.70e-03  1.54e-05  7.28e-05  7.10e-01  
 15  +4.2931e-01  +4.9932e-01  7.00e-02  1.39e-05  3.40e-03  8.62e-06  4.56e-05  4.31e-01  
 16  +4.2432e-01  +4.7945e-01  5.51e-02  1.07e-05  2.61e-03  6.26e-06  3.57e-05  3.33e-01  
 17  +4.1533e-01  +4.4342e-01  2.81e-02  5.18e-06  1.27e-03  2.01e-06  1.79e-05  9.31e-01  
 18  +4.1282e-01  +4.3416e-01  2.13e-02  3.91e-06  9.58e-04  1.52e-06  1.37e-05  2.66e-01  
 19  +4.1086e-01  +4.2601e-01  1.52e-02  2.76e-06  6.77e-04  9.93e-07  9.75e-06  9.90e-01  
 20  +4.0774e-01  +4.1510e-01  7.36e-03  1.33e-06  3.27e-04  4.82e-07  4.81e-06  5.45e-01  
 21  +4.0513e-01  +4.0594e-01  8.10e-04  1.47e-07  3.60e-05  5.21e-08  5.39e-07  9.20e-01  
 22  +4.0480e-01  +4.0481e-01  1.02e-05  1.85e-09  4.54e-07  6.48e-10  6.82e-09  9.90e-01  
 23  +4.0480e-01  +4.0480e-01  1.02e-07  1.85e-11  4.54e-09  6.48e-12  6.82e-11  9.90e-01  
 24  +4.0480e-01  +4.0480e-01  1.02e-09  1.85e-13  4.54e-11  6.48e-14  6.82e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 115.4218ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:33 PM: Optimal value: 4.048e-01
(CVXPY) Sep 20 03:19:33 PM: Compilation took 3.006e-02 seconds
(CVXPY) Sep 20 03:19:33 PM: Solver (including time spent in interface) took 1.231e-01 seconds
Iteration: 10, Objective: 0.4048
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:33 PM: Your problem has 5119 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:33 PM: Finished problem compilation (took 2.862e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5119
  constraints   = 10119
  nnz(P)        = 0
  nnz(A)        = 83009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8030e-01  +1.0862e+03  1.09e+03  4.34e-01  7.92e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3124e-01  +1.2179e+02  1.21e+02  1.70e-01  3.95e+01  1.64e-02  2.76e-01  9.38e-01  
  3  +5.0860e-01  +3.1530e+01  3.10e+01  1.22e-01  2.84e+01  4.55e-05  2.56e-01  2.95e-01  
  4  +5.0098e-01  +2.9664e+00  2.47e+00  1.69e-02  4.03e+00  6.05e-06  1.55e-01  6.57e-01  
  5  +5.0030e-01  +1.4240e+00  9.24e-01  6.24e-03  1.51e+00  3.41e-05  8.80e-02  7.69e-01  
  6  +5.0007e-01  +8.9368e-01  3.94e-01  2.55e-03  6.23e-01  4.45e-05  2.19e-02  7.89e-01  
  7  +4.9827e-01  +9.4871e-01  4.50e-01  3.60e-04  8.98e-02  9.46e-04  9.93e-04  9.79e-01  
  8  +4.9379e-01  +8.9283e-01  3.99e-01  1.31e-04  3.27e-02  2.06e-03  3.55e-04  6.83e-01  
  9  +4.9105e-01  +8.5190e-01  3.61e-01  9.82e-05  2.45e-02  1.61e-03  2.66e-04  4.56e-01  
 10  +4.8722e-01  +8.0302e-01  3.16e-01  8.40e-05  2.09e-02  9.14e-04  2.31e-04  3.84e-01  
 11  +4.7948e-01  +7.4589e-01  2.66e-01  6.67e-05  1.65e-02  5.20e-04  1.87e-04  4.06e-01  
 12  +4.6316e-01  +6.5517e-01  1.92e-01  4.29e-05  1.06e-02  1.56e-04  1.26e-04  6.36e-01  
 13  +4.4716e-01  +5.7993e-01  1.33e-01  2.81e-05  6.91e-03  6.60e-05  8.68e-05  4.99e-01  
 14  +4.2931e-01  +5.0273e-01  7.34e-02  1.46e-05  3.58e-03  2.72e-05  4.78e-05  5.47e-01  
 15  +4.2468e-01  +4.8329e-01  5.86e-02  1.13e-05  2.77e-03  1.62e-05  3.76e-05  4.56e-01  
 16  +4.1499e-01  +4.4376e-01  2.88e-02  5.32e-06  1.31e-03  2.31e-06  1.84e-05  9.73e-01  
 17  +4.1215e-01  +4.3322e-01  2.11e-02  3.87e-06  9.49e-04  1.68e-06  1.36e-05  3.00e-01  
 18  +4.1022e-01  +4.2513e-01  1.49e-02  2.73e-06  6.69e-04  9.81e-07  9.66e-06  9.90e-01  
 19  +4.0718e-01  +4.1443e-01  7.25e-03  1.32e-06  3.24e-04  4.77e-07  4.78e-06  5.50e-01  
 20  +4.0455e-01  +4.0518e-01  6.26e-04  1.14e-07  2.80e-05  4.02e-08  4.20e-07  9.37e-01  
 21  +4.0430e-01  +4.0431e-01  6.87e-06  1.25e-09  3.07e-07  4.38e-10  4.62e-09  9.90e-01  
 22  +4.0430e-01  +4.0430e-01  6.87e-08  1.25e-11  3.07e-09  4.38e-12  4.62e-11  9.90e-01  
 23  +4.0430e-01  +4.0430e-01  6.87e-10  1.25e-13  3.07e-11  4.39e-14  4.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.9451ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:33 PM: Optimal value: 4.043e-01
(CVXPY) Sep 20 03:19:33 PM: Compilation took 2.862e-02 seconds
(CVXPY) Sep 20 03:19:33 PM: Solver (including time spent in interface) took 1.207e-01 seconds
Iteration: 11, Objective: 0.4043
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:33 PM: Your problem has 5129 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:33 PM: Finished problem compilation (took 3.153e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5129
  constraints   = 10129
  nnz(P)        = 0
  nnz(A)        = 83618
  cones (total) = 1
    : Nonnegative = 1,  numel = 10129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8025e-01  +1.0863e+03  1.09e+03  4.34e-01  7.91e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3120e-01  +1.2172e+02  1.21e+02  1.70e-01  3.94e+01  1.65e-02  2.76e-01  9.38e-01  
  3  +5.0859e-01  +3.1513e+01  3.10e+01  1.22e-01  2.84e+01  4.55e-05  2.55e-01  2.96e-01  
  4  +5.0098e-01  +2.9678e+00  2.47e+00  1.69e-02  4.03e+00  6.06e-06  1.55e-01  6.57e-01  
  5  +5.0032e-01  +1.4551e+00  9.55e-01  6.45e-03  1.56e+00  3.40e-05  8.89e-02  7.54e-01  
  6  +5.0010e-01  +9.6276e-01  4.63e-01  3.02e-03  7.35e-01  4.37e-05  2.65e-02  7.40e-01  
  7  +4.9839e-01  +9.5718e-01  4.59e-01  3.77e-04  9.40e-02  8.89e-04  1.04e-03  9.80e-01  
  8  +4.9394e-01  +9.0284e-01  4.09e-01  1.32e-04  3.30e-02  2.04e-03  3.58e-04  6.96e-01  
  9  +4.9233e-01  +8.7142e-01  3.79e-01  1.17e-04  2.91e-02  1.58e-03  3.17e-04  2.65e-01  
 10  +4.8922e-01  +8.3889e-01  3.50e-01  9.42e-05  2.34e-02  1.36e-03  2.57e-04  3.18e-01  
 11  +4.8274e-01  +7.5881e-01  2.76e-01  7.72e-05  1.91e-02  2.10e-04  2.15e-04  6.52e-01  
 12  +4.8024e-01  +7.4573e-01  2.65e-01  7.13e-05  1.77e-02  1.96e-04  2.00e-04  1.08e-01  
 13  +4.7324e-01  +7.0118e-01  2.28e-01  5.99e-05  1.48e-02  1.96e-06  1.73e-04  8.32e-01  
 14  +4.6017e-01  +6.3958e-01  1.79e-01  4.17e-05  1.03e-02  2.12e-06  1.24e-04  3.32e-01  
 15  +4.4039e-01  +5.5207e-01  1.12e-01  2.34e-05  5.74e-03  2.91e-06  7.38e-05  6.10e-01  
 16  +4.3008e-01  +5.0925e-01  7.92e-02  1.59e-05  3.91e-03  2.17e-06  5.22e-05  3.38e-01  
 17  +4.2282e-01  +4.7941e-01  5.66e-02  1.10e-05  2.70e-03  2.01e-06  3.69e-05  4.69e-01  
 18  +4.1490e-01  +4.4763e-01  3.27e-02  6.19e-06  1.52e-03  1.43e-06  2.14e-05  6.02e-01  
 19  +4.1170e-01  +4.3478e-01  2.31e-02  4.29e-06  1.05e-03  1.18e-06  1.50e-05  5.63e-01  
 20  +4.0958e-01  +4.2586e-01  1.63e-02  3.00e-06  7.35e-04  1.04e-06  1.06e-05  9.90e-01  
 21  +4.0627e-01  +4.1409e-01  7.81e-03  1.43e-06  3.51e-04  4.99e-07  5.17e-06  5.75e-01  
 22  +4.0344e-01  +4.0405e-01  6.07e-04  1.11e-07  2.72e-05  3.82e-08  4.10e-07  9.33e-01  
 23  +4.0320e-01  +4.0321e-01  6.40e-06  1.17e-09  2.87e-07  4.02e-10  4.33e-09  9.90e-01  
 24  +4.0320e-01  +4.0320e-01  6.40e-08  1.17e-11  2.87e-09  4.02e-12  4.33e-11  9.90e-01  
 25  +4.0320e-01  +4.0320e-01  6.40e-10  1.17e-13  2.87e-11  4.04e-14  4.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.9006ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:34 PM: Optimal value: 4.032e-01
(CVXPY) Sep 20 03:19:34 PM: Compilation took 3.153e-02 seconds
(CVXPY) Sep 20 03:19:34 PM: Solver (including time spent in interface) took 1.340e-01 seconds
Iteration: 12, Objective: 0.4032
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:34 PM: Your problem has 5139 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:34 PM: Finished problem compilation (took 3.141e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5139
  constraints   = 10139
  nnz(P)        = 0
  nnz(A)        = 84072
  cones (total) = 1
    : Nonnegative = 1,  numel = 10139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8022e-01  +1.0862e+03  1.09e+03  4.34e-01  7.90e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3119e-01  +1.2168e+02  1.21e+02  1.70e-01  3.94e+01  1.65e-02  2.76e-01  9.38e-01  
  3  +5.0859e-01  +3.1502e+01  3.10e+01  1.22e-01  2.83e+01  4.55e-05  2.55e-01  2.97e-01  
  4  +5.0098e-01  +2.9665e+00  2.47e+00  1.69e-02  4.03e+00  6.06e-06  1.54e-01  6.58e-01  
  5  +5.0032e-01  +1.4548e+00  9.54e-01  6.45e-03  1.56e+00  3.42e-05  8.81e-02  7.59e-01  
  6  +5.0009e-01  +9.4550e-01  4.45e-01  2.89e-03  7.05e-01  4.49e-05  2.46e-02  7.52e-01  
  7  +4.9833e-01  +9.6369e-01  4.65e-01  3.77e-04  9.39e-02  9.18e-04  1.04e-03  9.73e-01  
  8  +4.9374e-01  +9.0835e-01  4.15e-01  1.32e-04  3.29e-02  2.10e-03  3.58e-04  6.95e-01  
  9  +4.9131e-01  +8.6221e-01  3.71e-01  1.10e-04  2.74e-02  1.43e-03  3.00e-04  3.72e-01  
 10  +4.8714e-01  +8.1284e-01  3.26e-01  8.80e-05  2.19e-02  9.10e-04  2.42e-04  4.31e-01  
 11  +4.7147e-01  +7.0373e-01  2.32e-01  5.36e-05  1.33e-02  3.51e-04  1.53e-04  6.32e-01  
 12  +4.6789e-01  +6.8297e-01  2.15e-01  5.13e-05  1.27e-02  2.75e-04  1.53e-04  6.58e-02  
 13  +4.6726e-01  +6.8025e-01  2.13e-01  5.08e-05  1.26e-02  2.48e-04  1.51e-04  8.54e-02  
 14  +4.5743e-01  +6.3132e-01  1.74e-01  3.98e-05  9.82e-03  1.85e-04  1.21e-04  2.39e-01  
 15  +4.4761e-01  +5.9179e-01  1.44e-01  3.06e-05  7.52e-03  4.80e-05  9.47e-05  7.24e-01  
 16  +4.2692e-01  +5.0077e-01  7.38e-02  1.47e-05  3.60e-03  1.43e-05  4.87e-05  6.57e-01  
 17  +4.1880e-01  +4.6736e-01  4.86e-02  9.41e-06  2.31e-03  8.22e-06  3.23e-05  4.43e-01  
 18  +4.1192e-01  +4.3971e-01  2.78e-02  5.28e-06  1.29e-03  4.17e-06  1.86e-05  5.20e-01  
 19  +4.1018e-01  +4.3259e-01  2.24e-02  4.21e-06  1.03e-03  3.07e-06  1.50e-05  3.28e-01  
 20  +4.0825e-01  +4.2379e-01  1.55e-02  2.89e-06  7.08e-04  1.04e-06  1.04e-05  9.90e-01  
 21  +4.0511e-01  +4.1257e-01  7.47e-03  1.38e-06  3.39e-04  5.00e-07  5.07e-06  5.45e-01  
 22  +4.0229e-01  +4.0253e-01  2.36e-04  4.37e-08  1.07e-05  1.50e-08  1.64e-07  9.77e-01  
 23  +4.0220e-01  +4.0220e-01  2.37e-06  4.39e-10  1.07e-07  1.51e-10  1.64e-09  9.90e-01  
 24  +4.0220e-01  +4.0220e-01  2.37e-08  4.39e-12  1.07e-09  1.51e-12  1.64e-11  9.90e-01  
 25  +4.0220e-01  +4.0220e-01  2.37e-10  4.38e-14  1.08e-11  1.51e-14  1.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.7773ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:34 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 03:19:34 PM: Compilation took 3.141e-02 seconds
(CVXPY) Sep 20 03:19:34 PM: Solver (including time spent in interface) took 1.351e-01 seconds
Iteration: 13, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:34 PM: Your problem has 5148 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:34 PM: Finished problem compilation (took 3.793e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5148
  constraints   = 10148
  nnz(P)        = 0
  nnz(A)        = 84460
  cones (total) = 1
    : Nonnegative = 1,  numel = 10148

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8019e-01  +1.0862e+03  1.09e+03  4.34e-01  7.90e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3115e-01  +1.2160e+02  1.21e+02  1.70e-01  3.93e+01  1.65e-02  2.76e-01  9.39e-01  
  3  +5.0858e-01  +3.1488e+01  3.10e+01  1.22e-01  2.83e+01  4.55e-05  2.55e-01  2.97e-01  
  4  +5.0098e-01  +2.9669e+00  2.47e+00  1.69e-02  4.03e+00  6.07e-06  1.54e-01  6.58e-01  
  5  +5.0032e-01  +1.4674e+00  9.67e-01  6.54e-03  1.58e+00  3.43e-05  8.81e-02  7.56e-01  
  6  +5.0007e-01  +9.1116e-01  4.11e-01  2.65e-03  6.47e-01  4.63e-05  2.16e-02  7.86e-01  
  7  +4.9828e-01  +9.7448e-01  4.76e-01  3.76e-04  9.37e-02  9.43e-04  1.04e-03  9.83e-01  
  8  +4.9362e-01  +9.1679e-01  4.23e-01  1.34e-04  3.33e-02  2.12e-03  3.62e-04  6.91e-01  
  9  +4.9098e-01  +8.6707e-01  3.76e-01  1.08e-04  2.68e-02  1.40e-03  2.94e-04  4.17e-01  
 10  +4.8817e-01  +8.1759e-01  3.29e-01  9.83e-05  2.44e-02  6.86e-04  2.71e-04  3.72e-01  
 11  +4.7639e-01  +7.3530e-01  2.59e-01  6.33e-05  1.57e-02  3.69e-04  1.79e-04  5.91e-01  
 12  +4.7180e-01  +7.1229e-01  2.40e-01  5.66e-05  1.40e-02  3.18e-04  1.62e-04  1.49e-01  
 13  +4.5930e-01  +6.4394e-01  1.85e-01  4.32e-05  1.06e-02  5.71e-05  1.30e-04  6.41e-01  
 14  +4.4158e-01  +5.6363e-01  1.22e-01  2.61e-05  6.41e-03  1.27e-05  8.29e-05  7.38e-01  
 15  +4.2298e-01  +4.8525e-01  6.23e-02  1.25e-05  3.06e-03  5.55e-06  4.23e-05  5.41e-01  
 16  +4.1214e-01  +4.4123e-01  2.91e-02  5.59e-06  1.37e-03  2.21e-06  1.98e-05  7.10e-01  
 17  +4.1047e-01  +4.3403e-01  2.36e-02  4.46e-06  1.09e-03  1.67e-06  1.59e-05  5.38e-01  
 18  +4.0885e-01  +4.2703e-01  1.82e-02  3.42e-06  8.37e-04  1.14e-06  1.23e-05  9.90e-01  
 19  +4.0456e-01  +4.1140e-01  6.84e-03  1.29e-06  3.15e-04  4.30e-07  4.76e-06  6.92e-01  
 20  +4.0230e-01  +4.0329e-01  9.90e-04  1.86e-07  4.55e-05  5.48e-08  7.00e-07  9.90e-01  
 21  +4.0193e-01  +4.0200e-01  7.04e-05  1.32e-08  3.23e-06  3.95e-09  4.98e-08  9.53e-01  
 22  +4.0190e-01  +4.0190e-01  7.05e-07  1.32e-10  3.23e-08  3.96e-11  4.99e-10  9.90e-01  
 23  +4.0190e-01  +4.0190e-01  7.05e-09  1.32e-12  3.23e-10  3.97e-13  5.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 114.9072ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:34 PM: Optimal value: 4.019e-01
(CVXPY) Sep 20 03:19:34 PM: Compilation took 3.793e-02 seconds
(CVXPY) Sep 20 03:19:34 PM: Solver (including time spent in interface) took 1.229e-01 seconds
Iteration: 14, Objective: 0.4019
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:34 PM: Your problem has 5158 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:34 PM: Finished problem compilation (took 3.156e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5158
  constraints   = 10158
  nnz(P)        = 0
  nnz(A)        = 84796
  cones (total) = 1
    : Nonnegative = 1,  numel = 10158

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8013e-01  +1.0863e+03  1.09e+03  4.35e-01  7.89e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3110e-01  +1.2151e+02  1.21e+02  1.70e-01  3.92e+01  1.65e-02  2.76e-01  9.39e-01  
  3  +5.0857e-01  +3.1466e+01  3.10e+01  1.22e-01  2.82e+01  4.56e-05  2.55e-01  2.99e-01  
  4  +5.0098e-01  +2.9709e+00  2.47e+00  1.69e-02  4.03e+00  6.07e-06  1.54e-01  6.59e-01  
  5  +5.0030e-01  +1.4229e+00  9.23e-01  6.24e-03  1.51e+00  3.57e-05  8.40e-02  7.99e-01  
  6  +5.0007e-01  +9.3154e-01  4.31e-01  2.72e-03  6.64e-01  5.44e-05  1.90e-02  8.29e-01  
  7  +4.9818e-01  +9.5442e-01  4.56e-01  3.53e-04  8.78e-02  9.79e-04  9.76e-04  9.60e-01  
  8  +4.9499e-01  +9.1423e-01  4.19e-01  1.69e-04  4.21e-02  1.68e-03  4.61e-04  5.70e-01  
  9  +4.9329e-01  +8.8188e-01  3.89e-01  1.40e-04  3.47e-02  1.40e-03  3.81e-04  3.27e-01  
 10  +4.9006e-01  +8.4901e-01  3.59e-01  1.02e-04  2.54e-02  1.29e-03  2.79e-04  4.24e-01  
 11  +4.8750e-01  +8.1469e-01  3.27e-01  9.63e-05  2.39e-02  7.73e-04  2.66e-04  2.81e-01  
 12  +4.7927e-01  +7.5707e-01  2.78e-01  7.27e-05  1.80e-02  4.69e-04  2.05e-04  4.54e-01  
 13  +4.7255e-01  +7.2190e-01  2.49e-01  6.05e-05  1.49e-02  4.15e-04  1.74e-04  1.77e-01  
 14  +4.6019e-01  +6.5047e-01  1.90e-01  4.60e-05  1.13e-02  3.98e-06  1.38e-04  7.77e-01  
 15  +4.4335e-01  +5.7601e-01  1.33e-01  2.86e-05  7.03e-03  4.06e-06  9.05e-05  5.68e-01  
 16  +4.2631e-01  +5.0263e-01  7.63e-02  1.55e-05  3.79e-03  2.49e-06  5.18e-05  5.23e-01  
 17  +4.1318e-01  +4.4803e-01  3.48e-02  6.74e-06  1.65e-03  1.49e-06  2.37e-05  7.37e-01  
 18  +4.0796e-01  +4.2726e-01  1.93e-02  3.66e-06  8.95e-04  9.23e-07  1.32e-05  5.99e-01  
 19  +4.0579e-01  +4.1836e-01  1.26e-02  2.36e-06  5.77e-04  7.25e-07  8.62e-06  9.05e-01  
 20  +4.0261e-01  +4.0666e-01  4.05e-03  7.57e-07  1.85e-04  2.41e-07  2.83e-06  8.56e-01  
 21  +4.0117e-01  +4.0159e-01  4.17e-04  7.77e-08  1.90e-05  2.37e-08  2.93e-07  9.90e-01  
 22  +4.0100e-01  +4.0101e-01  4.80e-06  8.93e-10  2.18e-07  2.73e-10  3.38e-09  9.89e-01  
 23  +4.0100e-01  +4.0100e-01  4.80e-08  8.93e-12  2.18e-09  2.73e-12  3.38e-11  9.90e-01  
 24  +4.0100e-01  +4.0100e-01  4.80e-10  8.93e-14  2.18e-11  2.75e-14  3.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 125.4067ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:34 PM: Optimal value: 4.010e-01
(CVXPY) Sep 20 03:19:34 PM: Compilation took 3.156e-02 seconds
(CVXPY) Sep 20 03:19:34 PM: Solver (including time spent in interface) took 1.333e-01 seconds
Iteration: 15, Objective: 0.4010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:35 PM: Your problem has 5162 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:35 PM: Finished problem compilation (took 3.433e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5162
  constraints   = 10162
  nnz(P)        = 0
  nnz(A)        = 84975
  cones (total) = 1
    : Nonnegative = 1,  numel = 10162

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8005e-01  +1.0866e+03  1.09e+03  4.35e-01  7.89e+01  3.78e-03  5.75e-01  5.85e-01  
  2  +5.3104e-01  +1.2142e+02  1.21e+02  1.70e-01  3.92e+01  1.65e-02  2.76e-01  9.40e-01  
  3  +5.0856e-01  +3.1454e+01  3.09e+01  1.22e-01  2.82e+01  4.57e-05  2.55e-01  3.00e-01  
  4  +5.0098e-01  +2.9769e+00  2.48e+00  1.70e-02  4.04e+00  6.08e-06  1.54e-01  6.59e-01  
  5  +5.0027e-01  +1.3587e+00  8.58e-01  5.80e-03  1.40e+00  3.78e-05  7.80e-02  8.63e-01  
  6  +5.0003e-01  +9.1935e-01  4.19e-01  2.47e-03  6.05e-01  7.16e-05  1.36e-02  9.01e-01  
  7  +4.9793e-01  +9.2306e-01  4.25e-01  3.03e-04  7.55e-02  1.08e-03  8.39e-04  9.45e-01  
  8  +4.9358e-01  +8.7272e-01  3.79e-01  1.35e-04  3.35e-02  1.86e-03  3.67e-04  6.22e-01  
  9  +4.9266e-01  +8.5332e-01  3.61e-01  1.26e-04  3.13e-02  1.35e-03  3.45e-04  2.65e-01  
 10  +4.9051e-01  +8.3941e-01  3.49e-01  9.95e-05  2.47e-02  1.14e-03  2.71e-04  4.35e-01  
 11  +4.8974e-01  +8.3126e-01  3.42e-01  9.83e-05  2.44e-02  1.03e-03  2.69e-04  6.76e-02  
 12  +4.8429e-01  +7.7941e-01  2.95e-01  8.44e-05  2.09e-02  2.31e-04  2.35e-04  6.49e-01  
 13  +4.7048e-01  +7.0442e-01  2.34e-01  5.57e-05  1.37e-02  1.56e-04  1.60e-04  4.59e-01  
 14  +4.5423e-01  +6.2441e-01  1.70e-01  3.95e-05  9.71e-03  1.35e-05  1.21e-04  7.45e-01  
 15  +4.4249e-01  +5.7357e-01  1.31e-01  2.85e-05  7.01e-03  7.96e-06  9.06e-05  5.83e-01  
 16  +4.2477e-01  +4.9767e-01  7.29e-02  1.48e-05  3.63e-03  4.03e-06  5.00e-05  5.09e-01  
 17  +4.1565e-01  +4.5996e-01  4.43e-02  8.72e-06  2.13e-03  2.42e-06  3.05e-05  4.88e-01  
 18  +4.1193e-01  +4.4317e-01  3.12e-02  5.96e-06  1.46e-03  1.87e-06  2.10e-05  8.38e-01  
 19  +4.0934e-01  +4.3332e-01  2.40e-02  4.54e-06  1.11e-03  1.44e-06  1.63e-05  2.67e-01  
 20  +4.0722e-01  +4.2461e-01  1.74e-02  3.27e-06  8.00e-04  1.08e-06  1.18e-05  8.98e-01  
 21  +4.0392e-01  +4.1265e-01  8.72e-03  1.63e-06  4.00e-04  5.40e-07  6.04e-06  5.22e-01  
 22  +4.0148e-01  +4.0376e-01  2.28e-03  4.27e-07  1.04e-04  1.40e-07  1.61e-06  7.63e-01  
 23  +4.0062e-01  +4.0066e-01  4.16e-05  7.76e-09  1.90e-06  2.47e-09  2.95e-08  9.90e-01  
 24  +4.0060e-01  +4.0060e-01  4.16e-07  7.76e-11  1.90e-08  2.47e-11  2.95e-10  9.90e-01  
 25  +4.0060e-01  +4.0060e-01  4.16e-09  7.76e-13  1.90e-10  2.48e-13  2.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.2181ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:35 PM: Optimal value: 4.006e-01
(CVXPY) Sep 20 03:19:35 PM: Compilation took 3.433e-02 seconds
(CVXPY) Sep 20 03:19:35 PM: Solver (including time spent in interface) took 1.381e-01 seconds
Iteration: 16, Objective: 0.4006
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:35 PM: Your problem has 5172 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:35 PM: Finished problem compilation (took 3.180e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5172
  constraints   = 10172
  nnz(P)        = 0
  nnz(A)        = 85469
  cones (total) = 1
    : Nonnegative = 1,  numel = 10172

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.8005e-01  +1.0864e+03  1.09e+03  4.35e-01  7.88e+01  3.78e-03  5.75e-01  5.85e-01  
  2  +5.3101e-01  +1.2137e+02  1.21e+02  1.70e-01  3.91e+01  1.65e-02  2.75e-01  9.40e-01  
  3  +5.0855e-01  +3.1417e+01  3.09e+01  1.22e-01  2.81e+01  4.58e-05  2.54e-01  3.02e-01  
  4  +5.0097e-01  +2.9640e+00  2.46e+00  1.69e-02  4.02e+00  6.10e-06  1.53e-01  6.62e-01  
  5  +5.0026e-01  +1.3457e+00  8.45e-01  5.71e-03  1.38e+00  3.99e-05  7.24e-02  9.04e-01  
  6  +5.0001e-01  +9.8271e-01  4.83e-01  2.59e-03  6.34e-01  9.41e-05  1.18e-02  9.05e-01  
  7  +4.9768e-01  +9.7271e-01  4.75e-01  3.06e-04  7.62e-02  1.19e-03  8.39e-04  9.34e-01  
  8  +4.9444e-01  +9.2991e-01  4.35e-01  1.74e-04  4.32e-02  1.68e-03  4.74e-04  4.89e-01  
  9  +4.9063e-01  +8.6855e-01  3.78e-01  1.28e-04  3.18e-02  1.14e-03  3.51e-04  4.94e-01  
 10  +4.8998e-01  +8.4918e-01  3.59e-01  1.19e-04  2.97e-02  6.95e-04  3.28e-04  3.63e-01  
 11  +4.8681e-01  +8.2817e-01  3.41e-01  1.01e-04  2.50e-02  6.57e-04  2.77e-04  2.29e-01  
 12  +4.8079e-01  +7.7303e-01  2.92e-01  8.72e-05  2.16e-02  1.29e-04  2.45e-04  6.42e-01  
 13  +4.7401e-01  +7.3753e-01  2.64e-01  7.07e-05  1.75e-02  1.11e-04  2.02e-04  2.46e-01  
 14  +4.6602e-01  +6.9817e-01  2.32e-01  5.86e-05  1.45e-02  2.07e-05  1.72e-04  7.43e-01  
 15  +4.5177e-01  +6.2953e-01  1.78e-01  4.08e-05  1.00e-02  1.52e-05  1.25e-04  3.01e-01  
 16  +4.2722e-01  +5.1660e-01  8.94e-02  1.85e-05  4.54e-03  5.69e-06  6.17e-05  6.37e-01  
 17  +4.1570e-01  +4.6766e-01  5.20e-02  1.04e-05  2.54e-03  3.13e-06  3.62e-05  5.56e-01  
 18  +4.1292e-01  +4.5612e-01  4.32e-02  8.54e-06  2.09e-03  2.60e-06  3.01e-05  2.42e-01  
 19  +4.0902e-01  +4.3817e-01  2.92e-02  5.59e-06  1.37e-03  1.79e-06  1.99e-05  9.90e-01  
 20  +4.0726e-01  +4.3154e-01  2.43e-02  4.64e-06  1.13e-03  1.50e-06  1.67e-05  2.00e-01  
 21  +4.0388e-01  +4.1840e-01  1.45e-02  2.76e-06  6.75e-04  8.99e-07  1.01e-05  9.90e-01  
 22  +3.9994e-01  +4.0396e-01  4.02e-03  7.63e-07  1.87e-04  2.43e-07  2.88e-06  8.44e-01  
 23  +3.9850e-01  +3.9874e-01  2.45e-04  4.63e-08  1.13e-05  1.44e-08  1.77e-07  9.62e-01  
 24  +3.9840e-01  +3.9840e-01  2.47e-06  4.68e-10  1.14e-07  1.45e-10  1.79e-09  9.90e-01  
 25  +3.9840e-01  +3.9840e-01  2.47e-08  4.68e-12  1.14e-09  1.45e-12  1.79e-11  9.90e-01  
 26  +3.9840e-01  +3.9840e-01  2.47e-10  4.67e-14  1.14e-11  1.46e-14  1.80e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 130.623ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:35 PM: Optimal value: 3.984e-01
(CVXPY) Sep 20 03:19:35 PM: Compilation took 3.180e-02 seconds
(CVXPY) Sep 20 03:19:35 PM: Solver (including time spent in interface) took 1.389e-01 seconds
Iteration: 17, Objective: 0.3984
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:35 PM: Your problem has 5182 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:35 PM: Finished problem compilation (took 3.406e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5182
  constraints   = 10182
  nnz(P)        = 0
  nnz(A)        = 86031
  cones (total) = 1
    : Nonnegative = 1,  numel = 10182

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7998e-01  +1.0866e+03  1.09e+03  4.35e-01  7.88e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3097e-01  +1.2130e+02  1.21e+02  1.70e-01  3.90e+01  1.65e-02  2.75e-01  9.41e-01  
  3  +5.0854e-01  +3.1396e+01  3.09e+01  1.22e-01  2.81e+01  4.58e-05  2.54e-01  3.03e-01  
  4  +5.0097e-01  +2.9644e+00  2.46e+00  1.69e-02  4.02e+00  6.11e-06  1.52e-01  6.63e-01  
  5  +5.0035e-01  +1.5578e+00  1.06e+00  7.15e-03  1.73e+00  3.64e-05  8.42e-02  7.64e-01  
  6  +5.0009e-01  +1.0330e+00  5.33e-01  3.27e-03  7.97e-01  6.06e-05  1.99e-02  8.32e-01  
  7  +4.9833e-01  +1.0347e+00  5.36e-01  4.11e-04  1.02e-01  9.10e-04  1.13e-03  9.66e-01  
  8  +4.9426e-01  +9.6285e-01  4.69e-01  1.68e-04  4.18e-02  1.67e-03  4.55e-04  6.58e-01  
  9  +4.9189e-01  +9.0890e-01  4.17e-01  1.41e-04  3.50e-02  9.74e-04  3.82e-04  4.26e-01  
 10  +4.8901e-01  +8.6886e-01  3.80e-01  1.19e-04  2.96e-02  7.00e-04  3.27e-04  3.36e-01  
 11  +4.8629e-01  +8.4304e-01  3.57e-01  1.08e-04  2.67e-02  5.31e-04  2.97e-04  2.55e-01  
 12  +4.7798e-01  +7.8662e-01  3.09e-01  8.17e-05  2.02e-02  4.13e-04  2.31e-04  3.35e-01  
 13  +4.5999e-01  +6.7165e-01  2.12e-01  5.08e-05  1.25e-02  5.97e-05  1.52e-04  7.35e-01  
 14  +4.5003e-01  +6.2399e-01  1.74e-01  3.99e-05  9.81e-03  3.87e-05  1.23e-04  3.31e-01  
 15  +4.3883e-01  +5.7198e-01  1.33e-01  2.92e-05  7.16e-03  1.43e-05  9.38e-05  6.41e-01  
 16  +4.1799e-01  +4.8129e-01  6.33e-02  1.30e-05  3.17e-03  5.56e-06  4.50e-05  5.74e-01  
 17  +4.1160e-01  +4.5420e-01  4.26e-02  8.45e-06  2.07e-03  3.31e-06  3.02e-05  5.65e-01  
 18  +4.0980e-01  +4.4592e-01  3.61e-02  7.07e-06  1.73e-03  2.54e-06  2.54e-05  5.52e-01  
 19  +4.0438e-01  +4.2481e-01  2.04e-02  3.95e-06  9.67e-04  1.41e-06  1.46e-05  4.75e-01  
 20  +4.0292e-01  +4.1808e-01  1.52e-02  2.92e-06  7.14e-04  9.03e-07  1.09e-05  9.90e-01  
 21  +4.0020e-01  +4.0813e-01  7.94e-03  1.52e-06  3.73e-04  4.73e-07  5.79e-06  5.20e-01  
 22  +3.9729e-01  +3.9752e-01  2.32e-04  4.46e-08  1.09e-05  1.30e-08  1.74e-07  9.90e-01  
 23  +3.9720e-01  +3.9720e-01  2.32e-06  4.46e-10  1.09e-07  1.30e-10  1.74e-09  9.90e-01  
 24  +3.9720e-01  +3.9720e-01  2.32e-08  4.46e-12  1.09e-09  1.30e-12  1.74e-11  9.90e-01  
 25  +3.9720e-01  +3.9720e-01  2.32e-10  4.46e-14  1.09e-11  1.30e-14  1.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.4621ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:35 PM: Optimal value: 3.972e-01
(CVXPY) Sep 20 03:19:35 PM: Compilation took 3.406e-02 seconds
(CVXPY) Sep 20 03:19:35 PM: Solver (including time spent in interface) took 1.371e-01 seconds
Iteration: 18, Objective: 0.3972
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:35 PM: Your problem has 5192 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:35 PM: Finished problem compilation (took 3.705e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5192
  constraints   = 10192
  nnz(P)        = 0
  nnz(A)        = 86480
  cones (total) = 1
    : Nonnegative = 1,  numel = 10192

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7995e-01  +1.0866e+03  1.09e+03  4.35e-01  7.87e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3095e-01  +1.2128e+02  1.21e+02  1.70e-01  3.89e+01  1.65e-02  2.75e-01  9.41e-01  
  3  +5.0854e-01  +3.1390e+01  3.09e+01  1.22e-01  2.80e+01  4.58e-05  2.54e-01  3.04e-01  
  4  +5.0097e-01  +2.9656e+00  2.46e+00  1.69e-02  4.02e+00  6.12e-06  1.52e-01  6.64e-01  
  5  +5.0035e-01  +1.5512e+00  1.05e+00  7.11e-03  1.71e+00  3.66e-05  8.34e-02  7.71e-01  
  6  +5.0009e-01  +1.0278e+00  5.28e-01  3.22e-03  7.85e-01  6.20e-05  1.91e-02  8.35e-01  
  7  +4.9830e-01  +1.0302e+00  5.32e-01  4.04e-04  1.01e-01  9.22e-04  1.11e-03  9.62e-01  
  8  +4.9414e-01  +9.5935e-01  4.65e-01  1.65e-04  4.10e-02  1.70e-03  4.46e-04  6.59e-01  
  9  +4.9198e-01  +9.1123e-01  4.19e-01  1.40e-04  3.47e-02  1.03e-03  3.79e-04  4.11e-01  
 10  +4.8773e-01  +8.5394e-01  3.66e-01  1.10e-04  2.73e-02  6.31e-04  3.03e-04  4.57e-01  
 11  +4.8567e-01  +8.3193e-01  3.46e-01  1.05e-04  2.60e-02  4.34e-04  2.90e-04  2.46e-01  
 12  +4.7683e-01  +7.7633e-01  2.99e-01  7.85e-05  1.94e-02  3.52e-04  2.22e-04  3.27e-01  
 13  +4.5915e-01  +6.7142e-01  2.12e-01  4.99e-05  1.23e-02  1.07e-04  1.49e-04  6.26e-01  
 14  +4.4653e-01  +6.1120e-01  1.65e-01  3.68e-05  9.04e-03  6.24e-05  1.15e-04  3.69e-01  
 15  +4.2951e-01  +5.3404e-01  1.05e-01  2.21e-05  5.40e-03  3.01e-05  7.30e-05  4.69e-01  
 16  +4.1327e-01  +4.6404e-01  5.08e-02  1.02e-05  2.50e-03  1.11e-05  3.61e-05  6.06e-01  
 17  +4.1055e-01  +4.5258e-01  4.20e-02  8.35e-06  2.04e-03  8.42e-06  2.98e-05  2.72e-01  
 18  +4.0802e-01  +4.4070e-01  3.27e-02  6.36e-06  1.55e-03  3.80e-06  2.29e-05  7.24e-01  
 19  +4.0475e-01  +4.2805e-01  2.33e-02  4.50e-06  1.10e-03  2.65e-06  1.65e-05  3.11e-01  
 20  +4.0256e-01  +4.1869e-01  1.61e-02  3.10e-06  7.58e-04  1.02e-06  1.15e-05  9.90e-01  
 21  +3.9949e-01  +4.0744e-01  7.95e-03  1.52e-06  3.73e-04  5.02e-07  5.78e-06  5.29e-01  
 22  +3.9660e-01  +3.9688e-01  2.73e-04  5.24e-08  1.28e-05  1.62e-08  2.03e-07  9.75e-01  
 23  +3.9650e-01  +3.9650e-01  2.73e-06  5.25e-10  1.28e-07  1.63e-10  2.04e-09  9.90e-01  
 24  +3.9650e-01  +3.9650e-01  2.74e-08  5.25e-12  1.28e-09  1.63e-12  2.04e-11  9.90e-01  
 25  +3.9650e-01  +3.9650e-01  2.74e-10  5.25e-14  1.28e-11  1.63e-14  2.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.3511ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:36 PM: Optimal value: 3.965e-01
(CVXPY) Sep 20 03:19:36 PM: Compilation took 3.705e-02 seconds
(CVXPY) Sep 20 03:19:36 PM: Solver (including time spent in interface) took 1.408e-01 seconds
Iteration: 19, Objective: 0.3965
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:36 PM: Your problem has 5196 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:36 PM: Finished problem compilation (took 3.337e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5196
  constraints   = 10196
  nnz(P)        = 0
  nnz(A)        = 86558
  cones (total) = 1
    : Nonnegative = 1,  numel = 10196

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7994e-01  +1.0866e+03  1.09e+03  4.35e-01  7.87e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3096e-01  +1.2130e+02  1.21e+02  1.70e-01  3.89e+01  1.65e-02  2.75e-01  9.41e-01  
  3  +5.0854e-01  +3.1389e+01  3.09e+01  1.22e-01  2.80e+01  4.58e-05  2.54e-01  3.04e-01  
  4  +5.0097e-01  +2.9641e+00  2.46e+00  1.69e-02  4.02e+00  6.12e-06  1.52e-01  6.64e-01  
  5  +5.0035e-01  +1.5591e+00  1.06e+00  7.17e-03  1.73e+00  3.65e-05  8.38e-02  7.66e-01  
  6  +5.0010e-01  +1.0551e+00  5.55e-01  3.42e-03  8.32e-01  6.03e-05  2.08e-02  8.15e-01  
  7  +4.9839e-01  +1.0438e+00  5.45e-01  4.21e-04  1.05e-01  8.84e-04  1.16e-03  9.74e-01  
  8  +4.9443e-01  +9.7056e-01  4.76e-01  1.72e-04  4.27e-02  1.62e-03  4.65e-04  6.59e-01  
  9  +4.9153e-01  +9.1117e-01  4.20e-01  1.42e-04  3.53e-02  1.00e-03  3.86e-04  4.02e-01  
 10  +4.8977e-01  +8.8289e-01  3.93e-01  1.27e-04  3.14e-02  7.74e-04  3.46e-04  2.66e-01  
 11  +4.8662e-01  +8.5146e-01  3.65e-01  1.07e-04  2.66e-02  5.99e-04  2.95e-04  3.14e-01  
 12  +4.7862e-01  +7.7651e-01  2.98e-01  8.41e-05  2.08e-02  1.57e-04  2.37e-04  6.33e-01  
 13  +4.6610e-01  +7.0658e-01  2.40e-01  5.92e-05  1.46e-02  9.86e-05  1.73e-04  4.40e-01  
 14  +4.5553e-01  +6.5343e-01  1.98e-01  4.66e-05  1.14e-02  5.37e-05  1.41e-04  4.06e-01  
 15  +4.3552e-01  +5.5956e-01  1.24e-01  2.68e-05  6.56e-03  1.20e-05  8.67e-05  7.34e-01  
 16  +4.1674e-01  +4.7844e-01  6.17e-02  1.26e-05  3.07e-03  4.92e-06  4.37e-05  5.78e-01  
 17  +4.1133e-01  +4.5533e-01  4.40e-02  8.73e-06  2.13e-03  3.24e-06  3.10e-05  5.11e-01  
 18  +4.0990e-01  +4.4858e-01  3.87e-02  7.58e-06  1.85e-03  2.66e-06  2.70e-05  4.84e-01  
 19  +4.0414e-01  +4.2596e-01  2.18e-02  4.23e-06  1.03e-03  1.48e-06  1.56e-05  4.84e-01  
 20  +4.0189e-01  +4.1653e-01  1.46e-02  2.83e-06  6.92e-04  8.79e-07  1.06e-05  8.28e-01  
 21  +4.0021e-01  +4.1002e-01  9.81e-03  1.89e-06  4.63e-04  5.82e-07  7.18e-06  6.15e-01  
 22  +3.9921e-01  +4.0629e-01  7.08e-03  1.37e-06  3.34e-04  4.19e-07  5.21e-06  3.75e-01  
 23  +3.9834e-01  +4.0321e-01  4.87e-03  9.34e-07  2.28e-04  2.87e-07  3.57e-06  4.67e-01  
 24  +3.9654e-01  +3.9665e-01  1.08e-04  2.08e-08  5.07e-06  6.21e-09  8.06e-08  9.81e-01  
 25  +3.9650e-01  +3.9650e-01  1.08e-06  2.08e-10  5.07e-08  6.22e-11  8.07e-10  9.90e-01  
 26  +3.9650e-01  +3.9650e-01  1.08e-08  2.08e-12  5.08e-10  6.23e-13  8.08e-12  9.90e-01  
 27  +3.9650e-01  +3.9650e-01  1.09e-10  2.08e-14  5.09e-12  6.24e-15  8.10e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 133.6863ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:36 PM: Optimal value: 3.965e-01
(CVXPY) Sep 20 03:19:36 PM: Compilation took 3.337e-02 seconds
(CVXPY) Sep 20 03:19:36 PM: Solver (including time spent in interface) took 1.424e-01 seconds
Iteration: 20, Objective: 0.3965
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:19:36 PM: Your problem has 5197 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:19:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:19:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:19:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:19:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:19:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:19:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:19:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:19:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:19:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:19:36 PM: Finished problem compilation (took 3.472e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5197
  constraints   = 10197
  nnz(P)        = 0
  nnz(A)        = 86582
  cones (total) = 1
    : Nonnegative = 1,  numel = 10197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.22e+02  1.00e+00  1.00e+00   ------   
  1  +5.7994e-01  +1.0865e+03  1.09e+03  4.35e-01  7.87e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3096e-01  +1.2130e+02  1.21e+02  1.70e-01  3.89e+01  1.65e-02  2.75e-01  9.41e-01  
  3  +5.0854e-01  +3.1389e+01  3.09e+01  1.22e-01  2.80e+01  4.58e-05  2.54e-01  3.04e-01  
  4  +5.0097e-01  +2.9637e+00  2.46e+00  1.69e-02  4.02e+00  6.12e-06  1.52e-01  6.64e-01  
  5  +5.0035e-01  +1.5596e+00  1.06e+00  7.17e-03  1.73e+00  3.65e-05  8.38e-02  7.66e-01  
  6  +5.0010e-01  +1.0569e+00  5.57e-01  3.43e-03  8.35e-01  6.02e-05  2.09e-02  8.13e-01  
  7  +4.9839e-01  +1.0446e+00  5.46e-01  4.22e-04  1.05e-01  8.82e-04  1.16e-03  9.74e-01  
  8  +4.9444e-01  +9.7131e-01  4.77e-01  1.72e-04  4.28e-02  1.62e-03  4.66e-04  6.59e-01  
  9  +4.9159e-01  +9.1234e-01  4.21e-01  1.43e-04  3.54e-02  1.01e-03  3.88e-04  3.97e-01  
 10  +4.8977e-01  +8.8346e-01  3.94e-01  1.27e-04  3.15e-02  7.80e-04  3.47e-04  2.65e-01  
 11  +4.8668e-01  +8.5213e-01  3.65e-01  1.08e-04  2.67e-02  5.99e-04  2.96e-04  3.18e-01  
 12  +4.7840e-01  +7.7274e-01  2.94e-01  8.36e-05  2.07e-02  1.15e-04  2.36e-04  6.86e-01  
 13  +4.6659e-01  +7.0823e-01  2.42e-01  5.99e-05  1.48e-02  7.75e-05  1.75e-04  4.11e-01  
 14  +4.5550e-01  +6.5279e-01  1.97e-01  4.65e-05  1.14e-02  4.20e-05  1.41e-04  4.22e-01  
 15  +4.3569e-01  +5.6031e-01  1.25e-01  2.69e-05  6.60e-03  1.02e-05  8.71e-05  7.37e-01  
 16  +4.1687e-01  +4.7910e-01  6.22e-02  1.27e-05  3.10e-03  4.31e-06  4.41e-05  5.73e-01  
 17  +4.1116e-01  +4.5489e-01  4.37e-02  8.67e-06  2.12e-03  2.89e-06  3.08e-05  5.21e-01  
 18  +4.0980e-01  +4.4839e-01  3.86e-02  7.56e-06  1.85e-03  2.47e-06  2.70e-05  4.80e-01  
 19  +4.0412e-01  +4.2615e-01  2.20e-02  4.27e-06  1.04e-03  1.40e-06  1.57e-05  4.79e-01  
 20  +4.0155e-01  +4.1544e-01  1.39e-02  2.68e-06  6.55e-04  8.10e-07  1.01e-05  9.18e-01  
 21  +3.9990e-01  +4.0910e-01  9.20e-03  1.77e-06  4.34e-04  5.36e-07  6.74e-06  6.15e-01  
 22  +3.9897e-01  +4.0565e-01  6.68e-03  1.29e-06  3.15e-04  3.89e-07  4.92e-06  3.68e-01  
 23  +3.9817e-01  +4.0281e-01  4.64e-03  8.90e-07  2.18e-04  2.70e-07  3.41e-06  4.69e-01  
 24  +3.9643e-01  +3.9652e-01  8.72e-05  1.67e-08  4.09e-06  4.96e-09  6.50e-08  9.83e-01  
 25  +3.9640e-01  +3.9640e-01  8.73e-07  1.67e-10  4.09e-08  4.96e-11  6.51e-10  9.90e-01  
 26  +3.9640e-01  +3.9640e-01  8.73e-09  1.68e-12  4.09e-10  4.97e-13  6.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.621ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:19:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:19:36 PM: Optimal value: 3.964e-01
(CVXPY) Sep 20 03:19:36 PM: Compilation took 3.472e-02 seconds
(CVXPY) Sep 20 03:19:36 PM: Solver (including time spent in interface) took 1.416e-01 seconds
FULL MODEL:
  Accruacy: 0.5825
  Our objective: 0.16499999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.1424)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0)                                             <-- (term's our objective: 0.0076)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 11.914137363433838
Best over terms:
  Our final objective: 0.1424
    Its accruacy: 0.5712
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1424
  Highest accruacy: 0.5712
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

