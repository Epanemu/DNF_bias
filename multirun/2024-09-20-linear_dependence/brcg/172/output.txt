Command:
python test_script.py -s linear_dependence -d 5 -n 100 --seed 73 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.38
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.5800000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:20 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Finished problem compilation (took 4.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9566e-01  +5.1345e+01  5.08e+01  8.62e-01  8.54e+00  1.00e+00  1.05e+00   ------   
  1  +5.9049e-01  +1.0450e+01  9.86e+00  3.17e-01  4.69e+00  3.96e-03  5.23e-01  6.50e-01  
  2  +5.1631e-01  +1.4688e+00  9.52e-01  5.91e-02  1.06e+00  1.20e-02  1.50e-01  9.90e-01  
  3  +4.9057e-01  +1.4077e+00  9.17e-01  3.16e-02  5.87e-01  1.70e-02  8.24e-02  5.15e-01  
  4  +4.3410e-01  +9.5777e-01  5.24e-01  1.20e-02  2.23e-01  1.14e-02  3.56e-02  6.13e-01  
  5  +3.8145e-01  +6.2301e-01  2.42e-01  5.04e-03  9.08e-02  4.36e-03  1.88e-02  5.59e-01  
  6  +3.4124e-01  +3.8357e-01  4.23e-02  9.32e-04  1.65e-02  2.04e-04  4.45e-03  9.24e-01  
  7  +3.3036e-01  +3.3126e-01  8.94e-04  1.96e-05  3.45e-04  3.05e-06  1.00e-04  9.88e-01  
  8  +3.3010e-01  +3.3011e-01  8.93e-06  1.96e-07  3.44e-06  3.05e-08  1.00e-06  9.90e-01  
  9  +3.3010e-01  +3.3010e-01  8.93e-08  1.96e-09  3.44e-08  3.05e-10  1.00e-08  9.90e-01  
 10  +3.3010e-01  +3.3010e-01  8.93e-10  1.96e-11  3.44e-10  3.05e-12  1.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 289.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:20 PM: Optimal value: 3.301e-01
(CVXPY) Sep 20 03:07:20 PM: Compilation took 4.992e-03 seconds
(CVXPY) Sep 20 03:07:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:20 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Finished problem compilation (took 4.090e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 537
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9234e-01  +5.1416e+01  5.09e+01  8.69e-01  8.94e+00  1.00e+00  1.06e+00   ------   
  1  +5.7203e-01  +1.0644e+01  1.01e+01  3.36e-01  4.89e+00  3.93e-03  5.43e-01  6.37e-01  
  2  +5.0389e-01  +1.6018e+00  1.10e+00  6.46e-02  1.21e+00  1.39e-02  1.63e-01  9.83e-01  
  3  +4.4863e-01  +1.3264e+00  8.78e-01  2.65e-02  5.12e-01  1.75e-02  7.13e-02  6.32e-01  
  4  +3.7492e-01  +7.6708e-01  3.92e-01  7.98e-03  1.55e-01  9.88e-03  2.36e-02  7.34e-01  
  5  +3.1926e-01  +4.5325e-01  1.34e-01  3.02e-03  5.81e-02  7.80e-05  1.05e-02  7.53e-01  
  6  +2.7752e-01  +2.9725e-01  1.97e-02  4.07e-04  7.88e-03  2.49e-05  1.62e-03  8.72e-01  
  7  +2.7062e-01  +2.7145e-01  8.32e-04  1.72e-05  3.32e-04  1.11e-06  7.26e-05  9.58e-01  
  8  +2.7037e-01  +2.7053e-01  1.67e-04  3.48e-06  6.66e-05  4.87e-07  1.49e-05  8.81e-01  
  9  +2.7030e-01  +2.7031e-01  4.50e-06  9.34e-08  1.79e-06  1.91e-08  4.01e-07  9.90e-01  
 10  +2.7030e-01  +2.7030e-01  4.50e-08  9.34e-10  1.79e-08  1.91e-10  4.01e-09  9.90e-01  
 11  +2.7030e-01  +2.7030e-01  4.50e-10  9.34e-12  1.79e-10  1.91e-12  4.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 395.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:20 PM: Optimal value: 2.703e-01
(CVXPY) Sep 20 03:07:20 PM: Compilation took 4.090e-03 seconds
(CVXPY) Sep 20 03:07:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:20 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Finished problem compilation (took 3.739e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 557
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9140e-01  +5.1526e+01  5.10e+01  8.71e-01  8.85e+00  1.00e+00  1.06e+00   ------   
  1  +5.6153e-01  +1.0639e+01  1.01e+01  3.37e-01  4.80e+00  3.93e-03  5.44e-01  6.39e-01  
  2  +4.9610e-01  +1.7578e+00  1.26e+00  6.83e-02  1.26e+00  1.42e-02  1.68e-01  9.48e-01  
  3  +4.0998e-01  +1.3671e+00  9.57e-01  2.41e-02  4.60e-01  1.82e-02  6.46e-02  7.02e-01  
  4  +3.5592e-01  +9.2408e-01  5.68e-01  1.23e-02  2.36e-01  1.08e-02  3.51e-02  5.15e-01  
  5  +2.9189e-01  +4.6535e-01  1.73e-01  3.81e-03  7.22e-02  1.73e-03  1.26e-02  7.58e-01  
  6  +2.5038e-01  +2.8187e-01  3.15e-02  6.76e-04  1.30e-02  2.17e-04  2.62e-03  8.51e-01  
  7  +2.4081e-01  +2.4173e-01  9.24e-04  2.00e-05  3.83e-04  4.93e-06  8.22e-05  9.70e-01  
  8  +2.4054e-01  +2.4063e-01  9.65e-05  2.12e-06  3.98e-05  4.27e-07  9.09e-06  8.93e-01  
  9  +2.4052e-01  +2.4057e-01  4.89e-05  1.06e-06  2.02e-05  2.34e-07  4.54e-06  7.83e-01  
 10  +2.4050e-01  +2.4050e-01  6.86e-07  1.49e-08  2.83e-07  3.23e-09  6.42e-08  9.86e-01  
 11  +2.4050e-01  +2.4050e-01  6.86e-09  1.49e-10  2.83e-09  3.23e-11  6.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 425.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:20 PM: Optimal value: 2.405e-01
(CVXPY) Sep 20 03:07:20 PM: Compilation took 3.739e-03 seconds
(CVXPY) Sep 20 03:07:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:20 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Finished problem compilation (took 4.252e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 612
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8766e-01  +5.1690e+01  5.12e+01  8.76e-01  8.69e+00  1.00e+00  1.07e+00   ------   
  1  +5.3247e-01  +1.0908e+01  1.04e+01  3.50e-01  4.75e+00  3.95e-03  5.57e-01  6.24e-01  
  2  +4.6392e-01  +1.7600e+00  1.30e+00  6.54e-02  1.18e+00  1.63e-02  1.63e-01  9.77e-01  
  3  +3.4943e-01  +1.1730e+00  8.24e-01  2.10e-02  3.86e-01  1.60e-02  5.83e-02  7.36e-01  
  4  +2.7366e-01  +5.0960e-01  2.36e-01  5.72e-03  1.02e-01  2.56e-03  1.84e-02  7.42e-01  
  5  +2.4069e-01  +3.5466e-01  1.14e-01  2.78e-03  4.91e-02  9.50e-04  1.00e-02  5.86e-01  
  6  +2.1388e-01  +2.2543e-01  1.16e-02  2.77e-04  4.86e-03  6.72e-05  1.14e-03  8.97e-01  
  7  +2.1132e-01  +2.1359e-01  2.27e-03  5.49e-05  9.57e-04  1.26e-05  2.33e-04  8.09e-01  
  8  +2.1095e-01  +2.1186e-01  9.09e-04  2.15e-05  3.81e-04  4.31e-06  9.38e-05  9.26e-01  
  9  +2.1071e-01  +2.1100e-01  2.86e-04  6.56e-06  1.18e-04  1.34e-06  2.95e-05  7.01e-01  
 10  +2.1061e-01  +2.1062e-01  1.53e-05  3.48e-07  6.32e-06  6.75e-08  1.60e-06  9.75e-01  
 11  +2.1060e-01  +2.1060e-01  1.54e-07  3.50e-09  6.35e-08  6.78e-10  1.61e-08  9.90e-01  
 12  +2.1060e-01  +2.1060e-01  1.54e-09  3.50e-11  6.35e-10  6.78e-12  1.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 462.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:20 PM: Optimal value: 2.106e-01
(CVXPY) Sep 20 03:07:20 PM: Compilation took 4.252e-03 seconds
(CVXPY) Sep 20 03:07:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2106
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:20 PM: Your problem has 88 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:20 PM: Finished problem compilation (took 3.586e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 88
  constraints   = 138
  nnz(P)        = 0
  nnz(A)        = 625
  cones (total) = 1
    : Nonnegative = 1,  numel = 138

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8736e-01  +5.1686e+01  5.12e+01  8.77e-01  8.62e+00  1.00e+00  1.06e+00   ------   
  1  +5.2849e-01  +1.0978e+01  1.04e+01  3.54e-01  4.73e+00  3.95e-03  5.61e-01  6.20e-01  
  2  +4.5962e-01  +1.7672e+00  1.31e+00  6.58e-02  1.17e+00  1.68e-02  1.64e-01  9.82e-01  
  3  +3.4846e-01  +1.2269e+00  8.78e-01  2.30e-02  4.17e-01  1.63e-02  6.33e-02  7.29e-01  
  4  +2.7001e-01  +4.9563e-01  2.26e-01  5.54e-03  9.83e-02  2.27e-03  1.78e-02  7.67e-01  
  5  +2.3826e-01  +3.4632e-01  1.08e-01  2.70e-03  4.72e-02  8.34e-04  9.74e-03  5.88e-01  
  6  +2.1359e-01  +2.2458e-01  1.10e-02  2.72e-04  4.70e-03  6.04e-05  1.11e-03  9.00e-01  
  7  +2.1125e-01  +2.1328e-01  2.03e-03  5.07e-05  8.74e-04  1.05e-05  2.15e-04  8.15e-01  
  8  +2.1099e-01  +2.1205e-01  1.06e-03  2.58e-05  4.54e-04  5.13e-06  1.11e-04  8.13e-01  
  9  +2.1074e-01  +2.1111e-01  3.77e-04  8.76e-06  1.57e-04  1.81e-06  3.92e-05  6.73e-01  
 10  +2.1062e-01  +2.1067e-01  4.69e-05  1.08e-06  1.95e-05  1.97e-07  4.98e-06  9.90e-01  
 11  +2.1060e-01  +2.1060e-01  5.32e-07  1.22e-08  2.21e-07  2.21e-09  5.67e-08  9.89e-01  
 12  +2.1060e-01  +2.1060e-01  5.32e-09  1.22e-10  2.21e-09  2.21e-11  5.67e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 481.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:20 PM: Optimal value: 2.106e-01
(CVXPY) Sep 20 03:07:20 PM: Compilation took 3.586e-04 seconds
(CVXPY) Sep 20 03:07:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.77
  Our objective: 0.5399999999999999

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.38)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.14)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8783340454101562
Best over terms:
  Our final objective: 0.37999999999999995
    Its accruacy: 0.69
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.37999999999999995
  Highest accruacy: 0.69
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

