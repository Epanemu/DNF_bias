Command:
python test_script.py -s linear_dependence -d 6 -n 5000 --seed 73 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.152
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 6.

Computed total variation: 0.17959999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:42 PM: Your problem has 2513 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:42 PM: Finished problem compilation (took 9.774e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2513
  constraints   = 5013
  nnz(P)        = 0
  nnz(A)        = 22513
  cones (total) = 1
    : Nonnegative = 1,  numel = 5013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.79e-01  6.98e+01  1.00e+00  1.00e+00   ------   
  1  +5.9310e-01  +5.1464e+02  5.14e+02  3.83e-01  4.23e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4178e-01  +6.8243e+01  6.77e+01  1.46e-01  2.04e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.0990e-01  +1.6712e+01  1.62e+01  1.03e-01  1.39e+01  2.83e-05  2.38e-01  1.34e-01  
  4  +5.0020e-01  +1.0223e+00  5.22e-01  5.02e-03  6.99e-01  7.18e-06  1.16e-01  9.90e-01  
  5  +4.9997e-01  +6.5627e-01  1.56e-01  1.48e-03  2.08e-01  5.01e-06  2.52e-02  8.40e-01  
  6  +4.9489e-01  +9.0578e-01  4.11e-01  5.57e-04  7.91e-02  1.76e-04  1.70e-03  9.70e-01  
  7  +4.8237e-01  +7.2710e-01  2.45e-01  1.36e-04  1.94e-02  2.98e-04  4.16e-04  7.74e-01  
  8  +4.6887e-01  +5.7773e-01  1.09e-01  5.70e-05  8.05e-03  6.17e-05  1.88e-04  6.84e-01  
  9  +4.5251e-01  +4.7361e-01  2.11e-02  9.64e-06  1.36e-03  1.64e-06  3.63e-05  9.35e-01  
 10  +4.4559e-01  +4.4648e-01  8.92e-04  3.69e-07  5.21e-05  6.02e-08  1.57e-06  9.67e-01  
 11  +4.4530e-01  +4.4531e-01  9.11e-06  3.76e-09  5.31e-07  6.13e-10  1.60e-08  9.90e-01  
 12  +4.4530e-01  +4.4530e-01  9.11e-08  3.76e-11  5.31e-09  6.13e-12  1.60e-10  9.90e-01  
 13  +4.4530e-01  +4.4530e-01  9.11e-10  3.77e-13  5.31e-11  6.16e-14  1.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.3817ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:42 PM: Optimal value: 4.453e-01
(CVXPY) Sep 20 03:09:42 PM: Compilation took 9.774e-03 seconds
(CVXPY) Sep 20 03:09:42 PM: Solver (including time spent in interface) took 2.243e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4453
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:42 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:42 PM: Finished problem compilation (took 1.197e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 27063
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5010e+03  2.50e+03  9.79e-01  7.33e+01  1.00e+00  1.00e+00   ------   
  1  +5.9294e-01  +5.1488e+02  5.14e+02  3.84e-01  4.43e+01  3.92e-03  5.27e-01  6.26e-01  
  2  +5.4144e-01  +6.7909e+01  6.74e+01  1.46e-01  2.13e+01  1.16e-02  2.44e-01  8.29e-01  
  3  +5.0973e-01  +1.6538e+01  1.60e+01  1.02e-01  1.45e+01  2.83e-05  2.37e-01  1.40e-01  
  4  +5.0049e-01  +1.5120e+00  1.01e+00  9.73e-03  1.41e+00  8.19e-06  1.50e-01  6.88e-01  
  5  +5.0011e-01  +8.2726e-01  3.27e-01  3.12e-03  4.58e-01  3.78e-06  6.25e-02  6.15e-01  
  6  +4.9997e-01  +7.9257e-01  2.93e-01  2.67e-03  3.92e-01  6.75e-06  2.20e-02  7.35e-01  
  7  +4.9703e-01  +7.5044e-01  2.53e-01  4.69e-04  6.99e-02  7.69e-05  1.38e-03  9.43e-01  
  8  +4.9195e-01  +7.1493e-01  2.23e-01  1.94e-04  2.90e-02  1.48e-04  5.54e-04  6.16e-01  
  9  +4.8880e-01  +6.9461e-01  2.06e-01  1.36e-04  2.03e-02  1.46e-04  3.84e-04  4.49e-01  
 10  +4.8493e-01  +6.7465e-01  1.90e-01  1.04e-04  1.54e-02  1.37e-04  2.92e-04  3.45e-01  
 11  +4.6812e-01  +5.8583e-01  1.18e-01  4.65e-05  6.92e-03  3.72e-05  1.35e-04  8.98e-01  
 12  +4.5503e-01  +5.3551e-01  8.05e-02  2.97e-05  4.41e-03  2.06e-05  8.93e-05  4.67e-01  
 13  +4.5371e-01  +5.3155e-01  7.78e-02  2.79e-05  4.13e-03  1.85e-05  8.39e-05  2.14e-01  
 14  +4.3945e-01  +4.7924e-01  3.98e-02  1.35e-05  1.99e-03  4.57e-06  4.21e-05  9.90e-01  
 15  +4.2466e-01  +4.2836e-01  3.70e-03  1.21e-06  1.79e-04  4.19e-07  3.99e-06  9.90e-01  
 16  +4.2302e-01  +4.2307e-01  5.04e-05  1.65e-08  2.44e-06  5.29e-09  5.51e-08  9.88e-01  
 17  +4.2300e-01  +4.2300e-01  5.04e-07  1.65e-10  2.43e-08  5.29e-11  5.51e-10  9.90e-01  
 18  +4.2300e-01  +4.2300e-01  5.04e-09  1.65e-12  2.43e-10  5.30e-13  5.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.9767ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:42 PM: Optimal value: 4.230e-01
(CVXPY) Sep 20 03:09:42 PM: Compilation took 1.197e-02 seconds
(CVXPY) Sep 20 03:09:42 PM: Solver (including time spent in interface) took 3.478e-02 seconds
Iteration: 2, Objective: 0.4230
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:42 PM: Your problem has 2533 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:42 PM: Finished problem compilation (took 1.034e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2533
  constraints   = 5033
  nnz(P)        = 0
  nnz(A)        = 28056
  cones (total) = 1
    : Nonnegative = 1,  numel = 5033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.34e+01  1.00e+00  1.00e+00   ------   
  1  +5.9284e-01  +5.1487e+02  5.14e+02  3.84e-01  4.43e+01  3.92e-03  5.27e-01  6.27e-01  
  2  +5.4126e-01  +6.7687e+01  6.71e+01  1.46e-01  2.12e+01  1.16e-02  2.43e-01  8.31e-01  
  3  +5.0969e-01  +1.6483e+01  1.60e+01  1.02e-01  1.45e+01  2.83e-05  2.37e-01  1.42e-01  
  4  +5.0051e-01  +1.5536e+00  1.05e+00  1.01e-02  1.47e+00  8.29e-06  1.52e-01  6.73e-01  
  5  +5.0011e-01  +8.2435e-01  3.24e-01  3.09e-03  4.54e-01  3.83e-06  6.01e-02  6.36e-01  
  6  +4.9973e-01  +8.3463e-01  3.35e-01  2.52e-03  3.71e-01  1.33e-05  1.16e-02  9.40e-01  
  7  +4.9152e-01  +7.4376e-01  2.52e-01  1.86e-04  2.78e-02  1.96e-04  5.21e-04  9.56e-01  
  8  +4.9323e-01  +7.5707e-01  2.64e-01  1.50e-04  2.25e-02  1.78e-04  4.09e-04  5.20e-01  
  9  +4.8853e-01  +7.0077e-01  2.12e-01  1.15e-04  1.72e-02  6.74e-05  3.19e-04  6.24e-01  
 10  +4.8790e-01  +6.9691e-01  2.09e-01  1.11e-04  1.66e-02  6.22e-05  3.09e-04  1.13e-01  
 11  +4.8549e-01  +6.7289e-01  1.87e-01  1.02e-04  1.53e-02  2.11e-05  2.90e-04  6.75e-01  
 12  +4.7391e-01  +6.2358e-01  1.50e-01  6.63e-05  9.88e-03  1.85e-05  1.93e-04  4.15e-01  
 13  +4.7378e-01  +6.2320e-01  1.49e-01  6.62e-05  9.86e-03  1.84e-05  1.93e-04  2.88e-02  
 14  +4.6144e-01  +5.7589e-01  1.14e-01  4.63e-05  6.88e-03  1.26e-05  1.38e-04  5.91e-01  
 15  +4.4772e-01  +5.2364e-01  7.59e-02  2.86e-05  4.25e-03  7.95e-06  8.90e-05  3.87e-01  
 16  +4.3063e-01  +4.6013e-01  2.95e-02  1.03e-05  1.53e-03  3.15e-06  3.37e-05  7.88e-01  
 17  +4.3015e-01  +4.5829e-01  2.81e-02  9.86e-06  1.46e-03  3.06e-06  3.24e-05  1.30e-01  
 18  +4.2950e-01  +4.5575e-01  2.62e-02  9.00e-06  1.33e-03  3.25e-06  2.95e-05  4.50e-01  
 19  +4.2116e-01  +4.2681e-01  5.66e-03  1.92e-06  2.85e-04  6.93e-07  6.57e-06  8.23e-01  
 20  +4.1885e-01  +4.1898e-01  1.22e-04  4.12e-08  6.10e-06  1.47e-08  1.43e-07  9.88e-01  
 21  +4.1880e-01  +4.1880e-01  1.22e-06  4.12e-10  6.10e-08  1.47e-10  1.43e-09  9.90e-01  
 22  +4.1880e-01  +4.1880e-01  1.22e-08  4.13e-12  6.11e-10  1.47e-12  1.44e-11  9.90e-01  
 23  +4.1880e-01  +4.1880e-01  1.22e-10  4.13e-14  6.11e-12  1.47e-14  1.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.3163ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:42 PM: Optimal value: 4.188e-01
(CVXPY) Sep 20 03:09:42 PM: Compilation took 1.034e-02 seconds
(CVXPY) Sep 20 03:09:42 PM: Solver (including time spent in interface) took 4.411e-02 seconds
Iteration: 3, Objective: 0.4188
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:43 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:43 PM: Finished problem compilation (took 1.437e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 28590
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5010e+03  2.50e+03  9.79e-01  7.34e+01  1.00e+00  1.00e+00   ------   
  1  +5.9263e-01  +5.1511e+02  5.15e+02  3.84e-01  4.43e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4107e-01  +6.7509e+01  6.70e+01  1.46e-01  2.11e+01  1.16e-02  2.43e-01  8.33e-01  
  3  +5.0964e-01  +1.6438e+01  1.59e+01  1.02e-01  1.44e+01  2.84e-05  2.36e-01  1.44e-01  
  4  +5.0046e-01  +1.4776e+00  9.77e-01  9.42e-03  1.37e+00  8.26e-06  1.45e-01  7.14e-01  
  5  +5.0016e-01  +9.5304e-01  4.53e-01  4.33e-03  6.35e-01  5.25e-06  7.35e-02  5.34e-01  
  6  +5.0008e-01  +9.8065e-01  4.81e-01  4.45e-03  6.52e-01  7.94e-06  3.85e-02  6.28e-01  
  7  +4.9766e-01  +7.7268e-01  2.75e-01  6.34e-04  9.48e-02  6.34e-05  1.91e-03  9.90e-01  
  8  +4.9216e-01  +7.2526e-01  2.33e-01  2.25e-04  3.37e-02  1.36e-04  6.50e-04  6.83e-01  
  9  +4.9094e-01  +7.2019e-01  2.29e-01  1.91e-04  2.86e-02  1.35e-04  5.44e-04  2.69e-01  
 10  +4.9055e-01  +7.2458e-01  2.34e-01  1.59e-04  2.38e-02  1.05e-04  4.45e-04  5.23e-01  
 11  +4.8820e-01  +7.1493e-01  2.27e-01  1.28e-04  1.91e-02  9.20e-05  3.58e-04  4.08e-01  
 12  +4.8113e-01  +6.7727e-01  1.96e-01  1.00e-04  1.50e-02  3.75e-05  2.86e-04  6.83e-01  
 13  +4.5996e-01  +5.8672e-01  1.27e-01  5.00e-05  7.44e-03  2.27e-05  1.50e-04  6.33e-01  
 14  +4.4590e-01  +5.2990e-01  8.40e-02  3.23e-05  4.79e-03  1.14e-05  1.02e-04  5.99e-01  
 15  +4.2785e-01  +4.5909e-01  3.12e-02  1.13e-05  1.68e-03  3.50e-06  3.80e-05  9.16e-01  
 16  +4.2580e-01  +4.5161e-01  2.58e-02  9.22e-06  1.36e-03  3.01e-06  3.12e-05  3.53e-01  
 17  +4.1818e-01  +4.2386e-01  5.67e-03  2.00e-06  2.96e-04  6.61e-07  7.03e-06  8.10e-01  
 18  +4.1815e-01  +4.2367e-01  5.53e-03  1.96e-06  2.90e-04  6.32e-07  6.97e-06  3.58e-02  
 19  +4.1815e-01  +4.2367e-01  5.52e-03  1.96e-06  2.90e-04  6.40e-07  6.93e-06  6.18e-02  
 20  +4.1800e-01  +4.2321e-01  5.21e-03  1.82e-06  2.70e-04  6.21e-07  6.41e-06  1.58e-01  
 21  +4.1659e-01  +4.1820e-01  1.60e-03  5.60e-07  8.29e-05  2.11e-07  1.99e-06  9.90e-01  
 22  +4.1591e-01  +4.1593e-01  2.26e-05  7.90e-09  1.17e-06  2.89e-09  2.83e-08  9.90e-01  
 23  +4.1590e-01  +4.1590e-01  2.26e-07  7.90e-11  1.17e-08  2.89e-11  2.83e-10  9.90e-01  
 24  +4.1590e-01  +4.1590e-01  2.26e-09  7.90e-13  1.17e-10  2.90e-13  2.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.4141ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:43 PM: Optimal value: 4.159e-01
(CVXPY) Sep 20 03:09:43 PM: Compilation took 1.437e-02 seconds
(CVXPY) Sep 20 03:09:43 PM: Solver (including time spent in interface) took 5.469e-02 seconds
Iteration: 4, Objective: 0.4159
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:43 PM: Your problem has 2544 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:43 PM: Finished problem compilation (took 1.130e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2544
  constraints   = 5044
  nnz(P)        = 0
  nnz(A)        = 29031
  cones (total) = 1
    : Nonnegative = 1,  numel = 5044

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5010e+03  2.50e+03  9.79e-01  7.34e+01  1.00e+00  1.00e+00   ------   
  1  +5.9247e-01  +5.1526e+02  5.15e+02  3.85e-01  4.43e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4094e-01  +6.7369e+01  6.68e+01  1.46e-01  2.11e+01  1.16e-02  2.43e-01  8.34e-01  
  3  +5.0961e-01  +1.6416e+01  1.59e+01  1.02e-01  1.44e+01  2.85e-05  2.36e-01  1.46e-01  
  4  +5.0039e-01  +1.3649e+00  8.64e-01  8.34e-03  1.21e+00  8.14e-06  1.37e-01  7.75e-01  
  5  +5.0016e-01  +9.8006e-01  4.80e-01  4.60e-03  6.74e-01  6.06e-06  7.36e-02  5.17e-01  
  6  +5.0012e-01  +1.0178e+00  5.18e-01  4.88e-03  7.16e-01  8.03e-06  4.94e-02  4.55e-01  
  7  +4.9947e-01  +9.4725e-01  4.48e-01  2.56e-03  3.80e-01  2.37e-05  9.44e-03  9.12e-01  
  8  +4.9346e-01  +8.4779e-01  3.54e-01  3.59e-04  5.38e-02  1.49e-04  1.05e-03  8.90e-01  
  9  +4.9117e-01  +8.2126e-01  3.30e-01  2.74e-04  4.11e-02  1.45e-04  7.88e-04  3.44e-01  
 10  +4.9247e-01  +8.2005e-01  3.28e-01  2.58e-04  3.87e-02  1.18e-04  7.23e-04  2.89e-01  
 11  +4.8888e-01  +7.7133e-01  2.82e-01  1.61e-04  2.41e-02  9.80e-05  4.49e-04  6.15e-01  
 12  +4.8784e-01  +7.6178e-01  2.74e-01  1.58e-04  2.36e-02  8.81e-05  4.41e-04  7.88e-02  
 13  +4.8579e-01  +7.1738e-01  2.32e-01  1.32e-04  1.97e-02  6.58e-06  3.73e-04  9.90e-01  
 14  +4.6559e-01  +6.2277e-01  1.57e-01  6.17e-05  9.20e-03  7.62e-06  1.81e-04  5.94e-01  
 15  +4.5695e-01  +5.8600e-01  1.29e-01  5.03e-05  7.49e-03  6.57e-06  1.52e-04  2.09e-01  
 16  +4.4371e-01  +5.3079e-01  8.71e-02  3.33e-05  4.94e-03  6.45e-06  1.06e-04  5.36e-01  
 17  +4.3586e-01  +4.9807e-01  6.22e-02  2.30e-05  3.41e-03  7.35e-06  7.49e-05  8.54e-01  
 18  +4.3045e-01  +4.7752e-01  4.71e-02  1.70e-05  2.52e-03  5.83e-06  5.63e-05  4.89e-01  
 19  +4.2522e-01  +4.5673e-01  3.15e-02  1.12e-05  1.66e-03  4.40e-06  3.77e-05  9.90e-01  
 20  +4.1902e-01  +4.3441e-01  1.54e-02  5.43e-06  8.04e-04  2.15e-06  1.88e-05  5.57e-01  
 21  +4.1591e-01  +4.2326e-01  7.35e-03  2.57e-06  3.80e-04  1.03e-06  9.06e-06  5.55e-01  
 22  +4.1585e-01  +4.2303e-01  7.18e-03  2.51e-06  3.72e-04  1.01e-06  8.85e-06  7.56e-02  
 23  +4.1457e-01  +4.1822e-01  3.65e-03  1.29e-06  1.91e-04  4.73e-07  4.58e-06  9.90e-01  
 24  +4.1350e-01  +4.1466e-01  1.16e-03  4.06e-07  6.01e-05  1.53e-07  1.45e-06  7.44e-01  
 25  +4.1301e-01  +4.1302e-01  1.19e-05  4.16e-09  6.16e-07  1.56e-09  1.49e-08  9.90e-01  
 26  +4.1300e-01  +4.1300e-01  1.19e-07  4.16e-11  6.16e-09  1.56e-11  1.49e-10  9.90e-01  
 27  +4.1300e-01  +4.1300e-01  1.19e-09  4.17e-13  6.17e-11  1.56e-13  1.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.2343ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:43 PM: Optimal value: 4.130e-01
(CVXPY) Sep 20 03:09:43 PM: Compilation took 1.130e-02 seconds
(CVXPY) Sep 20 03:09:43 PM: Solver (including time spent in interface) took 5.079e-02 seconds
Iteration: 5, Objective: 0.4130
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:43 PM: Your problem has 2546 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:43 PM: Finished problem compilation (took 1.296e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2546
  constraints   = 5046
  nnz(P)        = 0
  nnz(A)        = 29152
  cones (total) = 1
    : Nonnegative = 1,  numel = 5046

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.79e-01  7.34e+01  1.00e+00  1.00e+00   ------   
  1  +5.9241e-01  +5.1526e+02  5.15e+02  3.85e-01  4.43e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4086e-01  +6.7275e+01  6.67e+01  1.45e-01  2.11e+01  1.16e-02  2.43e-01  8.35e-01  
  3  +5.0960e-01  +1.6397e+01  1.59e+01  1.02e-01  1.44e+01  2.86e-05  2.36e-01  1.46e-01  
  4  +5.0041e-01  +1.3999e+00  9.00e-01  8.68e-03  1.26e+00  8.21e-06  1.39e-01  7.57e-01  
  5  +5.0016e-01  +9.7377e-01  4.74e-01  4.54e-03  6.65e-01  5.99e-06  7.15e-02  5.34e-01  
  6  +5.0007e-01  +1.0657e+00  5.66e-01  5.16e-03  7.57e-01  1.03e-05  3.90e-02  6.21e-01  
  7  +4.9631e-01  +8.8571e-01  3.89e-01  6.39e-04  9.58e-02  1.00e-04  1.97e-03  9.90e-01  
  8  +4.9370e-01  +8.4535e-01  3.52e-01  4.23e-04  6.34e-02  1.15e-04  1.28e-03  4.06e-01  
  9  +4.9019e-01  +7.9229e-01  3.02e-01  2.59e-04  3.88e-02  1.06e-04  7.53e-04  5.95e-01  
 10  +4.8344e-01  +7.4120e-01  2.58e-01  1.44e-04  2.15e-02  1.15e-04  4.09e-04  5.79e-01  
 11  +4.8048e-01  +7.1935e-01  2.39e-01  1.38e-04  2.06e-02  8.39e-05  3.98e-04  1.81e-01  
 12  +4.7392e-01  +6.8873e-01  2.15e-01  1.06e-04  1.59e-02  7.47e-05  3.11e-04  3.07e-01  
 13  +4.4728e-01  +5.4935e-01  1.02e-01  4.02e-05  5.97e-03  3.41e-06  1.26e-04  9.90e-01  
 14  +4.4393e-01  +5.3676e-01  9.28e-02  3.59e-05  5.33e-03  4.05e-06  1.14e-04  1.94e-01  
 15  +4.4063e-01  +5.2401e-01  8.34e-02  3.19e-05  4.73e-03  4.82e-06  1.02e-04  2.52e-01  
 16  +4.2595e-01  +4.6602e-01  4.01e-02  1.47e-05  2.18e-03  2.92e-06  4.98e-05  6.27e-01  
 17  +4.2502e-01  +4.6202e-01  3.70e-02  1.35e-05  2.00e-03  3.05e-06  4.60e-05  2.36e-01  
 18  +4.1951e-01  +4.3957e-01  2.01e-02  7.16e-06  1.06e-03  2.57e-06  2.49e-05  9.26e-01  
 19  +4.1368e-01  +4.1860e-01  4.92e-03  1.74e-06  2.58e-04  6.43e-07  6.25e-06  8.31e-01  
 20  +4.1345e-01  +4.1774e-01  4.28e-03  1.52e-06  2.26e-04  5.55e-07  5.47e-06  3.09e-01  
 21  +4.1219e-01  +4.1331e-01  1.12e-03  4.02e-07  5.95e-05  1.31e-07  1.46e-06  9.81e-01  
 22  +4.1181e-01  +4.1208e-01  2.70e-04  9.55e-08  1.41e-05  3.27e-08  3.46e-07  8.40e-01  
 23  +4.1170e-01  +4.1170e-01  2.74e-06  9.71e-10  1.44e-07  3.32e-10  3.53e-09  9.90e-01  
 24  +4.1170e-01  +4.1170e-01  2.74e-08  9.71e-12  1.44e-09  3.32e-12  3.53e-11  9.90e-01  
 25  +4.1170e-01  +4.1170e-01  2.74e-10  9.71e-14  1.44e-11  3.32e-14  3.53e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 44.6435ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:43 PM: Optimal value: 4.117e-01
(CVXPY) Sep 20 03:09:43 PM: Compilation took 1.296e-02 seconds
(CVXPY) Sep 20 03:09:43 PM: Solver (including time spent in interface) took 4.726e-02 seconds
FULL MODEL:
  Accruacy: 0.5882
  Our objective: 0.17639999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0)                       <-- (term's our objective: 0.0788)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1)                       <-- (term's our objective: 0.0732)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.6165108680725098
Best over terms:
  Our final objective: 0.07879999999999995
    Its accruacy: 0.5394
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.07879999999999995
  Highest accruacy: 0.5394
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

