Command:
python test_script.py -s linear_dependence -d 6 -n 500 --seed 56 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 6.

Computed total variation: 0.30800000000000005
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 263 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 3.973e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 263
  constraints   = 513
  nnz(P)        = 0
  nnz(A)        = 2263
  cones (total) = 1
    : Nonnegative = 1,  numel = 513

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +2.5099e+02  2.50e+02  9.35e-01  2.14e+01  1.00e+00  1.01e+00   ------   
  1  +5.9220e-01  +5.1862e+01  5.13e+01  3.64e-01  1.27e+01  3.91e-03  5.29e-01  6.27e-01  
  2  +5.3821e-01  +6.9039e+00  6.37e+00  1.17e-01  5.07e+00  1.19e-02  2.31e-01  8.63e-01  
  3  +5.0097e-01  +1.3438e+00  8.43e-01  2.52e-02  1.06e+00  6.93e-04  1.87e-01  6.72e-01  
  4  +4.9906e-01  +6.9141e-01  1.92e-01  5.63e-03  2.45e-01  2.91e-04  3.63e-02  8.51e-01  
  5  +4.7827e-01  +6.5571e-01  1.77e-01  1.14e-03  5.10e-02  2.31e-03  3.53e-03  9.30e-01  
  6  +4.6666e-01  +5.8214e-01  1.15e-01  6.61e-04  2.93e-02  1.38e-03  2.17e-03  4.31e-01  
  7  +4.5429e-01  +5.1669e-01  6.24e-02  3.15e-04  1.39e-02  1.44e-04  1.14e-03  8.74e-01  
  8  +4.4600e-01  +4.7320e-01  2.72e-02  1.27e-04  5.59e-03  2.25e-05  5.06e-04  9.90e-01  
  9  +4.3853e-01  +4.3980e-01  1.27e-03  5.33e-06  2.35e-04  8.76e-07  2.40e-05  9.59e-01  
 10  +4.3810e-01  +4.3812e-01  1.29e-05  5.39e-08  2.38e-06  8.92e-09  2.45e-07  9.90e-01  
 11  +4.3810e-01  +4.3810e-01  1.29e-07  5.39e-10  2.38e-08  8.92e-11  2.45e-09  9.90e-01  
 12  +4.3810e-01  +4.3810e-01  1.29e-09  5.39e-12  2.38e-10  8.94e-13  2.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 4.381e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 3.973e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 2.994e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 273 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 3.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 273
  constraints   = 523
  nnz(P)        = 0
  nnz(A)        = 2750
  cones (total) = 1
    : Nonnegative = 1,  numel = 523

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +2.5124e+02  2.51e+02  9.36e-01  2.24e+01  1.00e+00  1.01e+00   ------   
  1  +5.8948e-01  +5.1990e+01  5.14e+01  3.68e-01  1.32e+01  3.91e-03  5.32e-01  6.26e-01  
  2  +5.3489e-01  +6.5480e+00  6.01e+00  1.11e-01  4.96e+00  1.23e-02  2.20e-01  8.98e-01  
  3  +5.0197e-01  +1.6575e+00  1.16e+00  3.49e-02  1.53e+00  2.02e-03  1.72e-01  6.44e-01  
  4  +4.9554e-01  +9.2824e-01  4.33e-01  9.85e-03  4.52e-01  2.04e-03  3.50e-02  8.58e-01  
  5  +4.6838e-01  +8.1997e-01  3.52e-01  2.42e-03  1.13e-01  6.29e-03  7.42e-03  8.21e-01  
  6  +4.4946e-01  +7.0022e-01  2.51e-01  1.42e-03  6.59e-02  3.64e-03  4.88e-03  4.47e-01  
  7  +4.2433e-01  +5.3500e-01  1.11e-01  5.98e-04  2.74e-02  3.35e-05  2.37e-03  8.34e-01  
  8  +4.0793e-01  +4.3532e-01  2.74e-02  1.45e-04  6.60e-03  8.09e-06  6.59e-04  7.61e-01  
  9  +4.0266e-01  +4.0456e-01  1.90e-03  1.00e-05  4.56e-04  3.20e-07  5.25e-05  9.28e-01  
 10  +4.0221e-01  +4.0224e-01  3.47e-05  1.84e-07  8.36e-06  9.06e-09  1.07e-06  9.84e-01  
 11  +4.0220e-01  +4.0220e-01  3.46e-07  1.83e-09  8.35e-08  9.05e-11  1.07e-08  9.90e-01  
 12  +4.0220e-01  +4.0220e-01  3.46e-09  1.83e-11  8.35e-10  9.05e-13  1.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.032ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 3.002e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 2.815e-03 seconds
Iteration: 2, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 3.594e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 3132
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +2.5132e+02  2.51e+02  9.36e-01  2.29e+01  1.00e+00  1.01e+00   ------   
  1  +5.8824e-01  +5.2147e+01  5.16e+01  3.72e-01  1.34e+01  3.90e-03  5.36e-01  6.24e-01  
  2  +5.3355e-01  +6.4220e+00  5.89e+00  1.09e-01  4.91e+00  1.27e-02  2.18e-01  9.13e-01  
  3  +5.0192e-01  +1.6587e+00  1.16e+00  3.53e-02  1.58e+00  2.09e-03  1.64e-01  6.86e-01  
  4  +4.9521e-01  +9.9276e-01  4.98e-01  1.08e-02  5.05e-01  2.32e-03  3.64e-02  8.41e-01  
  5  +4.7781e-01  +9.0623e-01  4.28e-01  3.88e-03  1.85e-01  5.10e-03  1.16e-02  7.06e-01  
  6  +4.6706e-01  +8.4632e-01  3.79e-01  2.59e-03  1.23e-01  4.54e-03  7.83e-03  4.55e-01  
  7  +4.4824e-01  +7.3114e-01  2.83e-01  1.52e-03  7.22e-02  1.22e-03  4.70e-03  8.13e-01  
  8  +4.2373e-01  +6.0019e-01  1.76e-01  8.77e-04  4.12e-02  1.22e-05  2.94e-03  9.36e-01  
  9  +3.9901e-01  +4.7239e-01  7.34e-02  3.28e-04  1.53e-02  1.05e-05  1.17e-03  6.35e-01  
 10  +3.9633e-01  +4.6162e-01  6.53e-02  2.74e-04  1.28e-02  1.65e-05  9.79e-04  2.61e-01  
 11  +3.8641e-01  +4.1382e-01  2.74e-02  1.11e-04  5.20e-03  2.98e-05  4.10e-04  9.90e-01  
 12  +3.8395e-01  +4.0490e-01  2.09e-02  8.04e-05  3.75e-03  2.37e-05  2.97e-04  3.37e-01  
 13  +3.7822e-01  +3.8306e-01  4.84e-03  1.81e-05  8.46e-04  5.51e-06  7.06e-05  9.90e-01  
 14  +3.7634e-01  +3.7643e-01  9.32e-05  3.44e-07  1.60e-05  9.45e-08  1.37e-06  9.86e-01  
 15  +3.7630e-01  +3.7630e-01  9.32e-07  3.44e-09  1.60e-07  9.45e-10  1.38e-08  9.90e-01  
 16  +3.7630e-01  +3.7630e-01  9.32e-09  3.44e-11  1.60e-09  9.45e-12  1.38e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7532ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 3.763e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 3.594e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 3.096e-03 seconds
Iteration: 3, Objective: 0.3763
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 3.147e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 3382
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9897e-01  +2.5142e+02  2.51e+02  9.37e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.8536e-01  +5.2417e+01  5.18e+01  3.75e-01  1.34e+01  3.91e-03  5.38e-01  6.21e-01  
  2  +5.3138e-01  +6.2007e+00  5.67e+00  1.05e-01  4.74e+00  1.31e-02  2.12e-01  9.36e-01  
  3  +4.9937e-01  +1.4007e+00  9.01e-01  2.74e-02  1.24e+00  2.04e-03  1.30e-01  9.64e-01  
  4  +4.6857e-01  +1.9544e+00  1.49e+00  1.08e-02  5.14e-01  9.84e-03  3.07e-02  9.34e-01  
  5  +4.4405e-01  +1.2244e+00  7.80e-01  4.33e-03  2.06e-01  5.36e-03  1.29e-02  6.44e-01  
  6  +4.2729e-01  +9.9441e-01  5.67e-01  2.79e-03  1.33e-01  3.59e-03  8.56e-03  4.08e-01  
  7  +4.0010e-01  +5.9668e-01  1.97e-01  9.85e-04  4.62e-02  3.12e-05  3.44e-03  8.92e-01  
  8  +3.7573e-01  +4.4971e-01  7.40e-02  3.58e-04  1.67e-02  1.36e-05  1.40e-03  6.16e-01  
  9  +3.7188e-01  +4.2955e-01  5.77e-02  2.69e-04  1.25e-02  2.22e-05  1.07e-03  4.56e-01  
 10  +3.6036e-01  +3.7241e-01  1.21e-02  5.30e-05  2.46e-03  6.54e-06  2.30e-04  8.44e-01  
 11  +3.5686e-01  +3.5798e-01  1.12e-03  4.75e-06  2.21e-04  7.37e-07  2.18e-05  9.48e-01  
 12  +3.5650e-01  +3.5652e-01  1.15e-05  4.86e-08  2.26e-06  7.54e-09  2.24e-07  9.90e-01  
 13  +3.5650e-01  +3.5650e-01  1.15e-07  4.86e-10  2.26e-08  7.53e-11  2.24e-09  9.90e-01  
 14  +3.5650e-01  +3.5650e-01  1.15e-09  4.86e-12  2.26e-10  7.54e-13  2.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6166ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 3.565e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 3.147e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 2.975e-03 seconds
Iteration: 4, Objective: 0.3565
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 303 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 3.919e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 303
  constraints   = 553
  nnz(P)        = 0
  nnz(A)        = 3519
  cones (total) = 1
    : Nonnegative = 1,  numel = 553

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9881e-01  +2.5140e+02  2.51e+02  9.38e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.8285e-01  +5.2492e+01  5.19e+01  3.77e-01  1.32e+01  3.92e-03  5.38e-01  6.21e-01  
  2  +5.2940e-01  +5.9918e+00  5.46e+00  1.01e-01  4.47e+00  1.34e-02  2.03e-01  9.58e-01  
  3  +4.9910e-01  +1.4795e+00  9.80e-01  2.87e-02  1.31e+00  2.83e-03  1.11e-01  9.90e-01  
  4  +4.7795e-01  +1.4186e+00  9.41e-01  9.70e-03  4.63e-01  8.14e-03  2.76e-02  7.98e-01  
  5  +4.4946e-01  +1.0542e+00  6.05e-01  3.66e-03  1.75e-01  6.04e-03  1.07e-02  7.72e-01  
  6  +4.3376e-01  +9.0257e-01  4.69e-01  2.60e-03  1.24e-01  3.84e-03  7.91e-03  3.68e-01  
  7  +3.9859e-01  +6.0188e-01  2.03e-01  1.06e-03  4.96e-02  3.27e-04  3.68e-03  7.77e-01  
  8  +3.8732e-01  +5.3823e-01  1.51e-01  7.66e-04  3.56e-02  2.20e-04  2.79e-03  3.74e-01  
  9  +3.6425e-01  +4.0648e-01  4.22e-02  2.09e-04  9.62e-03  4.69e-05  8.63e-04  7.50e-01  
 10  +3.5638e-01  +3.6335e-01  6.97e-03  3.43e-05  1.58e-03  6.76e-06  1.51e-04  8.95e-01  
 11  +3.5505e-01  +3.5668e-01  1.63e-03  8.01e-06  3.69e-04  1.48e-06  3.58e-05  8.27e-01  
 12  +3.5471e-01  +3.5506e-01  3.53e-04  1.71e-06  7.87e-05  3.08e-07  7.84e-06  8.12e-01  
 13  +3.5462e-01  +3.5471e-01  8.33e-05  3.94e-07  1.81e-05  7.04e-08  1.88e-06  7.97e-01  
 14  +3.5460e-01  +3.5460e-01  2.21e-06  1.04e-08  4.77e-07  1.68e-09  5.00e-08  9.90e-01  
 15  +3.5460e-01  +3.5460e-01  2.21e-08  1.04e-10  4.78e-09  1.69e-11  5.01e-10  9.90e-01  
 16  +3.5460e-01  +3.5460e-01  2.21e-10  1.04e-12  4.78e-11  1.73e-13  5.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4664ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 3.546e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 3.919e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 3.911e-03 seconds
Iteration: 5, Objective: 0.3546
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 312 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 3.969e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 312
  constraints   = 562
  nnz(P)        = 0
  nnz(A)        = 3629
  cones (total) = 1
    : Nonnegative = 1,  numel = 562

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9876e-01  +2.5141e+02  2.51e+02  9.38e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.8149e-01  +5.2618e+01  5.20e+01  3.81e-01  1.31e+01  3.92e-03  5.40e-01  6.19e-01  
  2  +5.2854e-01  +5.9052e+00  5.38e+00  9.93e-02  4.37e+00  1.35e-02  2.01e-01  9.68e-01  
  3  +4.9908e-01  +1.5112e+00  1.01e+00  2.91e-02  1.32e+00  3.11e-03  1.06e-01  9.90e-01  
  4  +4.6926e-01  +1.4241e+00  9.55e-01  7.44e-03  3.55e-01  1.09e-02  2.09e-02  8.50e-01  
  5  +4.4786e-01  +1.1534e+00  7.06e-01  4.11e-03  1.95e-01  7.16e-03  1.20e-02  5.85e-01  
  6  +4.2696e-01  +8.9224e-01  4.65e-01  2.53e-03  1.19e-01  2.45e-03  7.89e-03  5.79e-01  
  7  +3.8271e-01  +5.2298e-01  1.40e-01  7.09e-04  3.27e-02  2.03e-04  2.61e-03  7.77e-01  
  8  +3.6691e-01  +4.4077e-01  7.39e-02  3.67e-04  1.68e-02  9.48e-05  1.51e-03  5.57e-01  
  9  +3.5316e-01  +3.6963e-01  1.65e-02  8.03e-05  3.67e-03  1.80e-05  3.73e-04  8.05e-01  
 10  +3.4914e-01  +3.5003e-01  8.83e-04  4.23e-06  1.93e-04  8.19e-07  2.10e-05  9.59e-01  
 11  +3.4890e-01  +3.4891e-01  9.12e-06  4.36e-08  1.99e-06  8.42e-09  2.18e-07  9.90e-01  
 12  +3.4890e-01  +3.4890e-01  9.12e-08  4.36e-10  1.99e-08  8.42e-11  2.18e-09  9.90e-01  
 13  +3.4890e-01  +3.4890e-01  9.12e-10  4.36e-12  1.99e-10  8.42e-13  2.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.665ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 3.489e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 3.969e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 2.604e-03 seconds
Iteration: 6, Objective: 0.3489
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 313 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 4.532e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 313
  constraints   = 563
  nnz(P)        = 0
  nnz(A)        = 3634
  cones (total) = 1
    : Nonnegative = 1,  numel = 563

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9875e-01  +2.5141e+02  2.51e+02  9.38e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.8127e-01  +5.2654e+01  5.21e+01  3.81e-01  1.31e+01  3.92e-03  5.41e-01  6.19e-01  
  2  +5.2844e-01  +5.8978e+00  5.37e+00  9.91e-02  4.36e+00  1.36e-02  2.01e-01  9.69e-01  
  3  +4.9908e-01  +1.5165e+00  1.02e+00  2.91e-02  1.32e+00  3.16e-03  1.05e-01  9.90e-01  
  4  +4.7022e-01  +1.4229e+00  9.53e-01  7.60e-03  3.62e-01  1.07e-02  2.13e-02  8.43e-01  
  5  +4.4895e-01  +1.1644e+00  7.15e-01  4.21e-03  2.00e-01  7.35e-03  1.22e-02  5.77e-01  
  6  +4.2609e-01  +8.8549e-01  4.59e-01  2.51e-03  1.18e-01  2.42e-03  7.85e-03  5.86e-01  
  7  +3.8114e-01  +5.1710e-01  1.36e-01  6.89e-04  3.17e-02  1.96e-04  2.57e-03  7.76e-01  
  8  +3.6508e-01  +4.3350e-01  6.84e-02  3.42e-04  1.57e-02  8.76e-05  1.42e-03  5.68e-01  
  9  +3.5151e-01  +3.6195e-01  1.04e-02  5.16e-05  2.35e-03  1.14e-05  2.40e-04  8.53e-01  
 10  +3.4900e-01  +3.4942e-01  4.13e-04  2.03e-06  9.27e-05  4.34e-07  9.74e-06  9.61e-01  
 11  +3.4890e-01  +3.4891e-01  4.14e-06  2.04e-08  9.28e-07  4.34e-09  9.78e-08  9.90e-01  
 12  +3.4890e-01  +3.4890e-01  4.14e-08  2.04e-10  9.28e-09  4.34e-11  9.78e-10  9.90e-01  
 13  +3.4890e-01  +3.4890e-01  4.14e-10  2.04e-12  9.29e-11  4.34e-13  9.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4591ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 3.489e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 4.532e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 3.000e-03 seconds
Iteration: 7, Objective: 0.3489
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 316 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 2.980e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 316
  constraints   = 566
  nnz(P)        = 0
  nnz(A)        = 3670
  cones (total) = 1
    : Nonnegative = 1,  numel = 566

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9873e-01  +2.5143e+02  2.51e+02  9.38e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.8023e-01  +5.2798e+01  5.22e+01  3.82e-01  1.31e+01  3.92e-03  5.42e-01  6.17e-01  
  2  +5.2778e-01  +5.8396e+00  5.31e+00  9.80e-02  4.29e+00  1.38e-02  1.99e-01  9.77e-01  
  3  +4.9972e-01  +1.6464e+00  1.15e+00  3.18e-02  1.44e+00  3.67e-03  1.06e-01  9.32e-01  
  4  +4.7449e-01  +1.5228e+00  1.05e+00  8.75e-03  4.17e-01  1.05e-02  2.41e-02  8.29e-01  
  5  +4.4551e-01  +1.1387e+00  6.93e-01  3.89e-03  1.84e-01  7.53e-03  1.13e-02  6.29e-01  
  6  +4.3560e-01  +1.0240e+00  5.88e-01  3.21e-03  1.51e-01  5.33e-03  9.66e-03  2.53e-01  
  7  +4.1430e-01  +7.9251e-01  3.78e-01  2.08e-03  9.67e-02  1.81e-03  6.84e-03  5.05e-01  
  8  +3.7698e-01  +5.0755e-01  1.31e-01  6.74e-04  3.09e-02  3.41e-04  2.60e-03  6.81e-01  
  9  +3.6062e-01  +4.1829e-01  5.77e-02  2.88e-04  1.31e-02  1.16e-04  1.24e-03  6.65e-01  
 10  +3.4976e-01  +3.6033e-01  1.06e-02  5.15e-05  2.35e-03  1.47e-05  2.48e-04  8.90e-01  
 11  +3.4726e-01  +3.4819e-01  9.33e-04  4.51e-06  2.05e-04  1.10e-06  2.28e-05  9.28e-01  
 12  +3.4701e-01  +3.4703e-01  2.45e-05  1.18e-07  5.38e-06  2.40e-08  6.08e-07  9.79e-01  
 13  +3.4700e-01  +3.4700e-01  2.45e-07  1.18e-09  5.37e-08  2.40e-10  6.08e-09  9.90e-01  
 14  +3.4700e-01  +3.4700e-01  2.45e-09  1.18e-11  5.38e-10  2.40e-12  6.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8812ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 3.470e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 2.980e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 2.996e-03 seconds
Iteration: 8, Objective: 0.3470
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 3.525e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 3698
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9873e-01  +2.5144e+02  2.51e+02  9.39e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.7993e-01  +5.2818e+01  5.22e+01  3.83e-01  1.30e+01  3.92e-03  5.42e-01  6.17e-01  
  2  +5.2742e-01  +5.7997e+00  5.27e+00  9.72e-02  4.24e+00  1.38e-02  1.98e-01  9.81e-01  
  3  +4.9980e-01  +1.6876e+00  1.19e+00  3.23e-02  1.46e+00  3.95e-03  1.05e-01  9.20e-01  
  4  +4.7588e-01  +1.6028e+00  1.13e+00  9.61e-03  4.57e-01  1.07e-02  2.64e-02  8.10e-01  
  5  +4.5063e-01  +1.2523e+00  8.02e-01  4.72e-03  2.23e-01  7.88e-03  1.36e-02  5.99e-01  
  6  +4.3292e-01  +1.0130e+00  5.80e-01  3.26e-03  1.53e-01  4.07e-03  9.96e-03  4.04e-01  
  7  +3.8730e-01  +5.6256e-01  1.75e-01  9.13e-04  4.20e-02  1.99e-04  3.31e-03  7.99e-01  
  8  +3.7646e-01  +5.0489e-01  1.28e-01  6.63e-04  3.03e-02  1.38e-04  2.56e-03  3.44e-01  
  9  +3.6048e-01  +4.1759e-01  5.71e-02  2.87e-04  1.31e-02  5.73e-05  1.24e-03  5.69e-01  
 10  +3.4974e-01  +3.6031e-01  1.06e-02  5.18e-05  2.35e-03  9.31e-06  2.47e-04  8.84e-01  
 11  +3.4736e-01  +3.4862e-01  1.26e-03  6.11e-06  2.78e-04  9.64e-07  3.04e-05  9.50e-01  
 12  +3.4702e-01  +3.4707e-01  5.66e-05  2.74e-07  1.24e-05  4.07e-08  1.38e-06  9.60e-01  
 13  +3.4700e-01  +3.4700e-01  5.73e-07  2.77e-09  1.26e-07  4.10e-10  1.40e-08  9.90e-01  
 14  +3.4700e-01  +3.4700e-01  5.73e-09  2.77e-11  1.26e-09  4.11e-12  1.40e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0973ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 3.470e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 3.525e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 3.007e-03 seconds
Iteration: 9, Objective: 0.3470
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:07 PM: Your problem has 320 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:07 PM: Finished problem compilation (took 3.465e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 320
  constraints   = 570
  nnz(P)        = 0
  nnz(A)        = 3705
  cones (total) = 1
    : Nonnegative = 1,  numel = 570

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9872e-01  +2.5144e+02  2.51e+02  9.39e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.8003e-01  +5.2801e+01  5.22e+01  3.83e-01  1.30e+01  3.92e-03  5.42e-01  6.17e-01  
  2  +5.2743e-01  +5.7981e+00  5.27e+00  9.73e-02  4.24e+00  1.38e-02  1.98e-01  9.80e-01  
  3  +4.9985e-01  +1.6941e+00  1.19e+00  3.24e-02  1.47e+00  3.96e-03  1.05e-01  9.16e-01  
  4  +4.7604e-01  +1.6108e+00  1.13e+00  9.70e-03  4.60e-01  1.07e-02  2.66e-02  8.10e-01  
  5  +4.4929e-01  +1.2355e+00  7.86e-01  4.58e-03  2.16e-01  7.98e-03  1.33e-02  6.04e-01  
  6  +4.3213e-01  +1.0015e+00  5.69e-01  3.20e-03  1.50e-01  4.01e-03  9.80e-03  4.03e-01  
  7  +3.8642e-01  +5.5898e-01  1.73e-01  8.93e-04  4.10e-02  2.75e-04  3.25e-03  7.84e-01  
  8  +3.7577e-01  +5.0116e-01  1.25e-01  6.45e-04  2.95e-02  1.84e-04  2.50e-03  3.33e-01  
  9  +3.6029e-01  +4.1669e-01  5.64e-02  2.83e-04  1.29e-02  7.53e-05  1.22e-03  5.67e-01  
 10  +3.4947e-01  +3.5897e-01  9.50e-03  4.65e-05  2.11e-03  9.87e-06  2.22e-04  9.01e-01  
 11  +3.4732e-01  +3.4846e-01  1.14e-03  5.53e-06  2.51e-04  9.74e-07  2.76e-05  9.37e-01  
 12  +3.4701e-01  +3.4705e-01  3.85e-05  1.86e-07  8.45e-06  2.95e-08  9.42e-07  9.72e-01  
 13  +3.4700e-01  +3.4700e-01  3.86e-07  1.87e-09  8.48e-08  2.96e-10  9.47e-09  9.90e-01  
 14  +3.4700e-01  +3.4700e-01  3.87e-09  1.87e-11  8.48e-10  2.96e-12  9.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3019ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:07 PM: Optimal value: 3.470e-01
(CVXPY) Sep 20 03:09:07 PM: Compilation took 3.465e-03 seconds
(CVXPY) Sep 20 03:09:07 PM: Solver (including time spent in interface) took 2.992e-03 seconds
FULL MODEL:
  Accruacy: 0.632
  Our objective: 0.264

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)                       <-- (term's our objective: 0.092)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1)                       <-- (term's our objective: 0.088)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.02)
 OR (x3 = 1 AND x4 = 0 AND x5 = 1)                                  <-- (term's our objective: 0.072)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.2256624698638916
Best over terms:
  Our final objective: 0.092
    Its accruacy: 0.546
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.092
  Highest accruacy: 0.546
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

