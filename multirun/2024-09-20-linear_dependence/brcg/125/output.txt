Command:
python test_script.py -s linear_dependence -d 4 -n 50 --seed 43 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.39999999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.6799999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:35 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:35 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9109e-01  +2.6170e+01  2.57e+01  8.14e-01  5.42e+00  1.00e+00  1.08e+00   ------   
  1  +5.9077e-01  +5.2635e+00  4.67e+00  2.78e-01  2.75e+00  4.04e-03  5.07e-01  6.76e-01  
  2  +5.0335e-01  +1.1367e+00  6.33e-01  5.84e-02  6.68e-01  1.06e-02  1.58e-01  8.82e-01  
  3  +4.4165e-01  +8.1023e-01  3.69e-01  1.85e-02  2.20e-01  9.42e-03  5.67e-02  7.17e-01  
  4  +3.9312e-01  +4.8855e-01  9.54e-02  4.62e-03  5.37e-02  1.69e-03  1.76e-02  7.41e-01  
  5  +3.6259e-01  +3.7148e-01  8.88e-03  3.67e-04  4.25e-03  8.03e-05  1.84e-03  9.48e-01  
  6  +3.6013e-01  +3.6021e-01  8.96e-05  3.70e-06  4.28e-05  7.94e-07  1.88e-05  9.90e-01  
  7  +3.6010e-01  +3.6010e-01  8.96e-07  3.70e-08  4.28e-07  7.94e-09  1.88e-07  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  8.96e-09  3.70e-10  4.28e-09  7.94e-11  1.88e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 190µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:35 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 03:05:35 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 03:05:35 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:35 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:35 PM: Finished problem compilation (took 4.965e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 254
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7343e-01  +2.6713e+01  2.62e+01  8.30e-01  5.68e+00  1.00e+00  1.12e+00   ------   
  1  +5.1778e-01  +5.2761e+00  4.76e+00  2.91e-01  2.76e+00  4.05e-03  5.22e-01  6.78e-01  
  2  +3.9303e-01  +1.5448e+00  1.15e+00  7.14e-02  8.33e-01  1.11e-02  1.88e-01  7.57e-01  
  3  +2.7684e-01  +6.7372e-01  3.97e-01  1.98e-02  2.33e-01  4.98e-03  6.14e-02  8.13e-01  
  4  +2.2107e-01  +4.0366e-01  1.83e-01  8.01e-03  9.86e-02  2.58e-03  2.65e-02  6.65e-01  
  5  +1.8911e-01  +2.7880e-01  8.97e-02  3.65e-03  4.69e-02  1.25e-03  1.30e-02  5.49e-01  
  6  +1.6357e-01  +1.7202e-01  8.45e-03  3.46e-04  4.41e-03  8.17e-05  1.36e-03  9.10e-01  
  7  +1.6046e-01  +1.6060e-01  1.40e-04  5.85e-06  7.38e-05  8.70e-07  2.38e-05  9.83e-01  
  8  +1.6040e-01  +1.6040e-01  1.85e-06  7.98e-08  9.84e-07  8.53e-09  3.35e-07  9.86e-01  
  9  +1.6040e-01  +1.6040e-01  1.84e-08  7.98e-10  9.84e-09  8.52e-11  3.35e-09  9.90e-01  
 10  +1.6040e-01  +1.6040e-01  1.85e-10  8.00e-12  9.86e-11  8.52e-13  3.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1287ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:35 PM: Optimal value: 1.604e-01
(CVXPY) Sep 20 03:05:35 PM: Compilation took 4.965e-03 seconds
(CVXPY) Sep 20 03:05:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:35 PM: Your problem has 47 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:35 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 47
  constraints   = 72
  nnz(P)        = 0
  nnz(A)        = 269
  cones (total) = 1
    : Nonnegative = 1,  numel = 72

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7157e-01  +2.6700e+01  2.62e+01  8.33e-01  5.66e+00  1.00e+00  1.12e+00   ------   
  1  +5.0590e-01  +5.3847e+00  4.88e+00  3.05e-01  2.84e+00  3.99e-03  5.45e-01  6.62e-01  
  2  +3.8365e-01  +1.6913e+00  1.31e+00  8.20e-02  9.34e-01  1.25e-02  2.11e-01  7.38e-01  
  3  +2.6151e-01  +8.0803e-01  5.47e-01  2.68e-02  3.09e-01  6.58e-03  8.24e-02  7.65e-01  
  4  +1.8608e-01  +3.0762e-01  1.22e-01  5.76e-03  6.52e-02  1.31e-03  2.19e-02  8.09e-01  
  5  +1.6336e-01  +1.7416e-01  1.08e-02  5.30e-04  5.88e-03  9.64e-05  2.32e-03  9.53e-01  
  6  +1.6058e-01  +1.6116e-01  5.89e-04  2.92e-05  3.22e-04  4.31e-06  1.33e-04  9.43e-01  
  7  +1.6046e-01  +1.6068e-01  2.13e-04  1.08e-05  1.19e-04  1.70e-06  5.10e-05  8.00e-01  
  8  +1.6040e-01  +1.6041e-01  5.96e-06  3.05e-07  3.33e-06  3.85e-08  1.48e-06  9.71e-01  
  9  +1.6040e-01  +1.6040e-01  6.03e-08  3.08e-09  3.37e-08  3.90e-10  1.49e-08  9.90e-01  
 10  +1.6040e-01  +1.6040e-01  6.03e-10  3.09e-11  3.37e-10  3.90e-12  1.50e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 241.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:35 PM: Optimal value: 1.604e-01
(CVXPY) Sep 20 03:05:35 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:05:35 PM: Solver (including time spent in interface) took 4.091e-03 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.68

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0) <-- (term's our objective: 0.2)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.16)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.9612469673156738
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

