Command:
python test_script.py -s linear_dependence -d 8 -n 500 --seed 34 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.184
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 8.

Computed total variation: 0.5840000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:01 PM: Your problem has 267 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Finished problem compilation (took 4.278e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 267
  constraints   = 517
  nnz(P)        = 0
  nnz(A)        = 2767
  cones (total) = 1
    : Nonnegative = 1,  numel = 517

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +2.5087e+02  2.50e+02  9.37e-01  2.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.8339e-01  +5.3867e+01  5.33e+01  3.95e-01  1.49e+01  3.82e-03  5.64e-01  5.98e-01  
  2  +5.3141e-01  +6.4585e+00  5.93e+00  1.24e-01  5.89e+00  1.52e-02  2.52e-01  9.41e-01  
  3  +5.0207e-01  +1.4133e+00  9.11e-01  2.80e-02  1.31e+00  3.12e-05  1.89e-01  7.82e-01  
  4  +4.9981e-01  +6.9545e-01  1.96e-01  6.00e-03  2.90e-01  1.24e-05  4.29e-02  8.01e-01  
  5  +4.8188e-01  +8.4715e-01  3.65e-01  2.16e-03  1.07e-01  1.45e-04  6.94e-03  9.39e-01  
  6  +4.5435e-01  +5.5913e-01  1.05e-01  4.88e-04  2.40e-02  4.65e-05  1.79e-03  8.41e-01  
  7  +4.3645e-01  +4.7811e-01  4.17e-02  1.82e-04  8.93e-03  2.38e-05  7.67e-04  7.56e-01  
  8  +4.2610e-01  +4.3233e-01  6.23e-03  2.64e-05  1.29e-03  5.05e-06  1.19e-04  9.90e-01  
  9  +4.2412e-01  +4.2419e-01  6.84e-05  2.89e-07  1.41e-05  5.32e-08  1.33e-06  9.89e-01  
 10  +4.2410e-01  +4.2410e-01  6.84e-07  2.89e-09  1.41e-07  5.32e-10  1.33e-08  9.90e-01  
 11  +4.2410e-01  +4.2410e-01  6.84e-09  2.89e-11  1.41e-09  5.32e-12  1.33e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1092ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:01 PM: Optimal value: 4.241e-01
(CVXPY) Sep 20 03:14:01 PM: Compilation took 4.278e-03 seconds
(CVXPY) Sep 20 03:14:01 PM: Solver (including time spent in interface) took 2.506e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:01 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Finished problem compilation (took 4.158e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 3289
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +2.5203e+02  2.52e+02  9.38e-01  2.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.7953e-01  +5.4123e+01  5.35e+01  3.99e-01  1.53e+01  3.81e-03  5.70e-01  5.97e-01  
  2  +5.2714e-01  +6.0577e+00  5.53e+00  1.15e-01  5.65e+00  1.59e-02  2.37e-01  9.90e-01  
  3  +5.0317e-01  +1.8056e+00  1.30e+00  4.08e-02  1.99e+00  2.27e-03  1.58e-01  7.52e-01  
  4  +4.9382e-01  +1.0219e+00  5.28e-01  9.87e-03  5.07e-01  2.78e-03  2.96e-02  9.12e-01  
  5  +4.7516e-01  +8.5575e-01  3.81e-01  3.50e-03  1.81e-01  4.16e-03  1.03e-02  6.65e-01  
  6  +4.5822e-01  +6.9301e-01  2.35e-01  1.85e-03  9.46e-02  1.64e-03  5.96e-03  5.87e-01  
  7  +4.4485e-01  +5.9599e-01  1.51e-01  9.26e-04  4.70e-02  1.10e-03  3.22e-03  5.12e-01  
  8  +4.4316e-01  +5.8189e-01  1.39e-01  9.06e-04  4.60e-02  7.45e-04  3.07e-03  2.45e-01  
  9  +4.2822e-01  +4.9064e-01  6.24e-02  2.88e-04  1.46e-02  4.61e-04  9.68e-04  7.37e-01  
 10  +4.2524e-01  +4.8067e-01  5.54e-02  2.44e-04  1.24e-02  2.99e-04  8.30e-04  3.65e-01  
 11  +4.1754e-01  +4.5855e-01  4.10e-02  1.75e-04  8.85e-03  3.69e-05  6.15e-04  8.11e-01  
 12  +4.0554e-01  +4.1555e-01  1.00e-02  3.52e-05  1.79e-03  1.04e-05  1.30e-04  8.03e-01  
 13  +4.0218e-01  +4.0240e-01  2.16e-04  7.56e-07  3.84e-05  2.00e-07  2.87e-06  9.80e-01  
 14  +4.0210e-01  +4.0210e-01  2.16e-06  7.56e-09  3.83e-07  2.00e-09  2.87e-08  9.90e-01  
 15  +4.0210e-01  +4.0210e-01  2.16e-08  7.56e-11  3.83e-09  2.00e-11  2.87e-10  9.90e-01  
 16  +4.0210e-01  +4.0210e-01  2.16e-10  7.56e-13  3.83e-11  2.00e-13  2.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6376ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:01 PM: Optimal value: 4.021e-01
(CVXPY) Sep 20 03:14:01 PM: Compilation took 4.158e-03 seconds
(CVXPY) Sep 20 03:14:01 PM: Solver (including time spent in interface) took 3.139e-03 seconds
Iteration: 2, Objective: 0.4021
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:01 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Finished problem compilation (took 4.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 3659
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9876e-01  +2.5158e+02  2.51e+02  9.39e-01  2.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.7664e-01  +5.4206e+01  5.36e+01  4.03e-01  1.54e+01  3.81e-03  5.71e-01  5.95e-01  
  2  +5.2467e-01  +6.1871e+00  5.66e+00  1.17e-01  5.72e+00  1.65e-02  2.38e-01  9.90e-01  
  3  +5.0483e-01  +1.7025e+00  1.20e+00  3.63e-02  1.86e+00  2.69e-03  1.05e-01  7.78e-01  
  4  +4.9934e-01  +1.7098e+00  1.21e+00  1.97e-02  1.04e+00  4.58e-03  5.11e-02  5.75e-01  
  5  +4.8238e-01  +1.4026e+00  9.20e-01  8.11e-03  4.31e-01  5.55e-03  2.15e-02  6.23e-01  
  6  +4.6301e-01  +1.0624e+00  5.99e-01  4.35e-03  2.28e-01  3.17e-03  1.23e-02  5.49e-01  
  7  +4.5144e-01  +9.4770e-01  4.96e-01  2.82e-03  1.48e-01  2.35e-03  8.07e-03  5.27e-01  
  8  +4.3448e-01  +8.1404e-01  3.80e-01  1.80e-03  9.42e-02  1.70e-03  5.34e-03  4.32e-01  
  9  +4.1485e-01  +6.4759e-01  2.33e-01  1.13e-03  5.84e-02  5.32e-04  3.56e-03  5.72e-01  
 10  +3.8029e-01  +4.3927e-01  5.90e-02  2.61e-04  1.34e-02  4.51e-05  9.30e-04  8.95e-01  
 11  +3.7314e-01  +4.0838e-01  3.52e-02  1.51e-04  7.78e-03  2.82e-05  5.66e-04  4.65e-01  
 12  +3.6405e-01  +3.6911e-01  5.06e-03  2.10e-05  1.08e-03  4.69e-06  8.50e-05  9.44e-01  
 13  +3.6243e-01  +3.6253e-01  9.92e-05  4.11e-07  2.12e-05  9.06e-08  1.68e-06  9.81e-01  
 14  +3.6240e-01  +3.6240e-01  9.92e-07  4.11e-09  2.12e-07  9.05e-10  1.68e-08  9.90e-01  
 15  +3.6240e-01  +3.6240e-01  9.92e-09  4.11e-11  2.12e-09  9.06e-12  1.68e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8285ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:01 PM: Optimal value: 3.624e-01
(CVXPY) Sep 20 03:14:01 PM: Compilation took 4.007e-03 seconds
(CVXPY) Sep 20 03:14:01 PM: Solver (including time spent in interface) took 3.008e-03 seconds
Iteration: 3, Objective: 0.3624
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:01 PM: Your problem has 297 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Finished problem compilation (took 3.980e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 297
  constraints   = 547
  nnz(P)        = 0
  nnz(A)        = 3846
  cones (total) = 1
    : Nonnegative = 1,  numel = 547

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9873e-01  +2.5161e+02  2.51e+02  9.39e-01  2.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.7507e-01  +5.4195e+01  5.36e+01  4.04e-01  1.53e+01  3.82e-03  5.70e-01  5.96e-01  
  2  +5.2339e-01  +6.2417e+00  5.72e+00  1.16e-01  5.63e+00  1.66e-02  2.36e-01  9.90e-01  
  3  +5.0522e-01  +1.7104e+00  1.21e+00  3.38e-02  1.75e+00  3.11e-03  9.25e-02  7.51e-01  
  4  +5.0195e-01  +1.8682e+00  1.37e+00  2.27e-02  1.20e+00  4.80e-03  5.73e-02  4.95e-01  
  5  +4.8421e-01  +1.6177e+00  1.13e+00  8.99e-03  4.80e-01  6.84e-03  2.30e-02  6.67e-01  
  6  +4.6090e-01  +1.2291e+00  7.68e-01  4.76e-03  2.52e-01  4.33e-03  1.28e-02  5.43e-01  
  7  +4.4336e-01  +1.0882e+00  6.45e-01  3.22e-03  1.70e-01  3.72e-03  8.89e-03  3.85e-01  
  8  +4.0693e-01  +7.2556e-01  3.19e-01  1.58e-03  8.20e-02  3.37e-05  4.87e-03  8.18e-01  
  9  +3.7377e-01  +5.3268e-01  1.59e-01  7.39e-04  3.78e-02  2.55e-05  2.53e-03  5.19e-01  
 10  +3.4700e-01  +3.9539e-01  4.84e-02  2.16e-04  1.10e-02  1.35e-05  8.41e-04  7.21e-01  
 11  +3.3733e-01  +3.5324e-01  1.59e-02  6.89e-05  3.52e-03  1.05e-05  2.87e-04  8.62e-01  
 12  +3.3282e-01  +3.3353e-01  7.13e-04  3.07e-06  1.57e-04  4.58e-07  1.33e-05  9.56e-01  
 13  +3.3260e-01  +3.3261e-01  7.22e-06  3.11e-08  1.59e-06  4.60e-09  1.35e-07  9.90e-01  
 14  +3.3260e-01  +3.3260e-01  7.22e-08  3.11e-10  1.59e-08  4.60e-11  1.35e-09  9.90e-01  
 15  +3.3260e-01  +3.3260e-01  7.22e-10  3.11e-12  1.59e-10  4.60e-13  1.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.281ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:01 PM: Optimal value: 3.326e-01
(CVXPY) Sep 20 03:14:01 PM: Compilation took 3.980e-03 seconds
(CVXPY) Sep 20 03:14:01 PM: Solver (including time spent in interface) took 3.751e-03 seconds
Iteration: 4, Objective: 0.3326
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:01 PM: Your problem has 307 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Finished problem compilation (took 3.116e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 307
  constraints   = 557
  nnz(P)        = 0
  nnz(A)        = 3976
  cones (total) = 1
    : Nonnegative = 1,  numel = 557

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +2.5161e+02  2.51e+02  9.40e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.7314e-01  +5.4164e+01  5.36e+01  4.06e-01  1.51e+01  3.82e-03  5.69e-01  5.96e-01  
  2  +5.2187e-01  +6.3094e+00  5.79e+00  1.16e-01  5.52e+00  1.68e-02  2.34e-01  9.90e-01  
  3  +5.0419e-01  +1.5111e+00  1.01e+00  2.60e-02  1.36e+00  3.01e-03  6.95e-02  7.87e-01  
  4  +4.9594e-01  +1.7687e+00  1.27e+00  1.36e-02  7.27e-01  6.29e-03  3.34e-02  6.90e-01  
  5  +4.6997e-01  +1.3721e+00  9.02e-01  5.75e-03  3.07e-01  5.77e-03  1.46e-02  6.63e-01  
  6  +4.4598e-01  +1.2091e+00  7.63e-01  3.54e-03  1.88e-01  5.56e-03  9.24e-03  4.37e-01  
  7  +4.0803e-01  +8.4991e-01  4.42e-01  2.12e-03  1.10e-01  1.56e-03  6.16e-03  5.03e-01  
  8  +3.6041e-01  +5.2835e-01  1.68e-01  7.90e-04  4.01e-02  2.87e-04  2.70e-03  6.91e-01  
  9  +3.3437e-01  +3.9124e-01  5.69e-02  2.63e-04  1.32e-02  7.76e-05  1.02e-03  7.29e-01  
 10  +3.2521e-01  +3.4696e-01  2.17e-02  9.96e-05  4.99e-03  2.84e-05  4.13e-04  6.41e-01  
 11  +3.2028e-01  +3.2530e-01  5.02e-03  2.19e-05  1.11e-03  5.23e-06  9.67e-05  9.37e-01  
 12  +3.1874e-01  +3.1885e-01  1.12e-04  4.87e-07  2.47e-05  1.06e-07  2.19e-06  9.77e-01  
 13  +3.1870e-01  +3.1870e-01  1.12e-06  4.88e-09  2.48e-07  1.06e-09  2.20e-08  9.90e-01  
 14  +3.1870e-01  +3.1870e-01  1.12e-08  4.88e-11  2.48e-09  1.06e-11  2.20e-10  9.90e-01  
 15  +3.1870e-01  +3.1870e-01  1.12e-10  4.88e-13  2.48e-11  1.06e-13  2.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.185ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:01 PM: Optimal value: 3.187e-01
(CVXPY) Sep 20 03:14:01 PM: Compilation took 3.116e-03 seconds
(CVXPY) Sep 20 03:14:01 PM: Solver (including time spent in interface) took 5.023e-03 seconds
Iteration: 5, Objective: 0.3187
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:01 PM: Your problem has 317 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Finished problem compilation (took 4.113e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 317
  constraints   = 567
  nnz(P)        = 0
  nnz(A)        = 4078
  cones (total) = 1
    : Nonnegative = 1,  numel = 567

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9832e-01  +2.5191e+02  2.51e+02  9.40e-01  2.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.6782e-01  +5.4301e+01  5.37e+01  4.08e-01  1.49e+01  3.82e-03  5.72e-01  5.95e-01  
  2  +5.1853e-01  +6.4968e+00  5.98e+00  1.15e-01  5.45e+00  1.73e-02  2.33e-01  9.90e-01  
  3  +5.0252e-01  +1.7346e+00  1.23e+00  2.65e-02  1.38e+00  4.62e-03  6.66e-02  7.37e-01  
  4  +4.8815e-01  +1.8619e+00  1.37e+00  1.35e-02  7.22e-01  8.16e-03  3.28e-02  6.47e-01  
  5  +4.5930e-01  +1.4048e+00  9.45e-01  6.42e-03  3.40e-01  6.35e-03  1.63e-02  5.76e-01  
  6  +4.3777e-01  +1.2358e+00  7.98e-01  4.26e-03  2.25e-01  5.16e-03  1.12e-02  4.39e-01  
  7  +3.9058e-01  +7.8330e-01  3.93e-01  2.10e-03  1.07e-01  4.52e-05  6.32e-03  7.70e-01  
  8  +3.3983e-01  +4.6745e-01  1.28e-01  6.34e-04  3.17e-02  2.94e-05  2.27e-03  7.02e-01  
  9  +3.2793e-01  +4.1363e-01  8.57e-02  4.13e-04  2.06e-02  3.99e-05  1.59e-03  5.29e-01  
 10  +3.1110e-01  +3.3300e-01  2.19e-02  1.03e-04  5.13e-03  1.07e-05  4.49e-04  7.55e-01  
 11  +3.0531e-01  +3.0634e-01  1.03e-03  4.77e-06  2.38e-04  5.38e-07  2.23e-05  9.65e-01  
 12  +3.0503e-01  +3.0511e-01  8.37e-05  3.87e-07  1.93e-05  4.20e-08  1.86e-06  9.21e-01  
 13  +3.0500e-01  +3.0500e-01  8.80e-07  4.07e-09  2.03e-07  4.40e-10  1.97e-08  9.90e-01  
 14  +3.0500e-01  +3.0500e-01  8.79e-09  4.07e-11  2.03e-09  4.40e-12  1.97e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9661ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:01 PM: Optimal value: 3.050e-01
(CVXPY) Sep 20 03:14:01 PM: Compilation took 4.113e-03 seconds
(CVXPY) Sep 20 03:14:01 PM: Solver (including time spent in interface) took 3.732e-03 seconds
Iteration: 6, Objective: 0.3050
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:01 PM: Your problem has 327 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Finished problem compilation (took 3.627e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 327
  constraints   = 577
  nnz(P)        = 0
  nnz(A)        = 4201
  cones (total) = 1
    : Nonnegative = 1,  numel = 577

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9826e-01  +2.5200e+02  2.52e+02  9.41e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.6531e-01  +5.4369e+01  5.38e+01  4.10e-01  1.47e+01  3.83e-03  5.72e-01  5.95e-01  
  2  +5.1638e-01  +6.5823e+00  6.07e+00  1.14e-01  5.36e+00  1.76e-02  2.32e-01  9.90e-01  
  3  +5.0030e-01  +1.8842e+00  1.38e+00  2.67e-02  1.39e+00  5.63e-03  6.62e-02  7.37e-01  
  4  +4.7846e-01  +1.9659e+00  1.49e+00  1.26e-02  6.67e-01  9.69e-03  3.07e-02  6.82e-01  
  5  +4.5163e-01  +1.5416e+00  1.09e+00  7.13e-03  3.75e-01  7.29e-03  1.82e-02  4.72e-01  
  6  +4.2217e-01  +1.2570e+00  8.35e-01  4.39e-03  2.29e-01  5.78e-03  1.17e-02  4.07e-01  
  7  +3.6865e-01  +6.9765e-01  3.29e-01  1.77e-03  8.94e-02  4.80e-05  5.59e-03  7.66e-01  
  8  +3.3271e-01  +4.8186e-01  1.49e-01  7.71e-04  3.83e-02  4.57e-05  2.80e-03  6.08e-01  
  9  +3.1633e-01  +3.9104e-01  7.47e-02  3.79e-04  1.87e-02  2.82e-05  1.51e-03  5.34e-01  
 10  +3.0593e-01  +3.3465e-01  2.87e-02  1.43e-04  7.06e-03  1.29e-05  6.12e-04  6.61e-01  
 11  +3.0057e-01  +3.0638e-01  5.82e-03  2.89e-05  1.42e-03  3.40e-06  1.30e-04  8.78e-01  
 12  +2.9957e-01  +3.0143e-01  1.86e-03  9.13e-06  4.49e-04  1.39e-06  4.18e-05  9.90e-01  
 13  +2.9913e-01  +2.9955e-01  4.20e-04  2.05e-06  1.01e-04  3.14e-07  9.55e-06  7.82e-01  
 14  +2.9900e-01  +2.9901e-01  8.01e-06  3.90e-08  1.92e-06  5.91e-09  1.82e-07  9.82e-01  
 15  +2.9900e-01  +2.9900e-01  8.01e-08  3.91e-10  1.92e-08  5.91e-11  1.83e-09  9.90e-01  
 16  +2.9900e-01  +2.9900e-01  8.01e-10  3.91e-12  1.92e-10  5.92e-13  1.83e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0368ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:01 PM: Optimal value: 2.990e-01
(CVXPY) Sep 20 03:14:01 PM: Compilation took 3.627e-03 seconds
(CVXPY) Sep 20 03:14:01 PM: Solver (including time spent in interface) took 4.106e-03 seconds
Iteration: 7, Objective: 0.2990
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:01 PM: Your problem has 337 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 4.775e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 337
  constraints   = 587
  nnz(P)        = 0
  nnz(A)        = 4316
  cones (total) = 1
    : Nonnegative = 1,  numel = 587

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9791e-01  +2.5237e+02  2.52e+02  9.41e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.5926e-01  +5.4489e+01  5.39e+01  4.11e-01  1.46e+01  3.84e-03  5.73e-01  5.95e-01  
  2  +5.1145e-01  +6.7916e+00  6.28e+00  1.13e-01  5.26e+00  1.81e-02  2.29e-01  9.90e-01  
  3  +4.9346e-01  +2.1027e+00  1.61e+00  2.56e-02  1.34e+00  7.39e-03  6.19e-02  7.51e-01  
  4  +4.5471e-01  +1.9018e+00  1.45e+00  1.05e-02  5.56e-01  1.00e-02  2.57e-02  7.47e-01  
  5  +4.2393e-01  +1.5375e+00  1.11e+00  6.44e-03  3.36e-01  6.57e-03  1.65e-02  5.30e-01  
  6  +3.8838e-01  +1.0802e+00  6.92e-01  3.93e-03  2.00e-01  2.18e-03  1.10e-02  5.31e-01  
  7  +3.3011e-01  +5.4998e-01  2.20e-01  1.19e-03  5.88e-02  2.10e-04  4.01e-03  8.04e-01  
  8  +3.0546e-01  +4.1627e-01  1.11e-01  5.85e-04  2.87e-02  1.02e-04  2.25e-03  6.07e-01  
  9  +2.9386e-01  +3.5342e-01  5.96e-02  3.04e-04  1.49e-02  5.52e-05  1.26e-03  5.32e-01  
 10  +2.8584e-01  +3.1195e-01  2.61e-02  1.30e-04  6.39e-03  2.23e-05  5.79e-04  7.49e-01  
 11  +2.7993e-01  +2.8275e-01  2.82e-03  1.39e-05  6.81e-04  2.19e-06  6.59e-05  8.91e-01  
 12  +2.7924e-01  +2.7938e-01  1.40e-04  6.92e-07  3.38e-05  8.74e-08  3.42e-06  9.49e-01  
 13  +2.7920e-01  +2.7920e-01  1.46e-06  7.18e-09  3.51e-07  8.85e-10  3.59e-08  9.90e-01  
 14  +2.7920e-01  +2.7920e-01  1.46e-08  7.18e-11  3.51e-09  8.86e-12  3.59e-10  9.90e-01  
 15  +2.7920e-01  +2.7920e-01  1.46e-10  7.18e-13  3.51e-11  8.87e-14  3.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2348ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.792e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 4.775e-03 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 4.900e-03 seconds
Iteration: 8, Objective: 0.2792
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:02 PM: Your problem has 347 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 4.716e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 347
  constraints   = 597
  nnz(P)        = 0
  nnz(A)        = 4406
  cones (total) = 1
    : Nonnegative = 1,  numel = 597

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9784e-01  +2.5229e+02  2.52e+02  9.42e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.5544e-01  +5.4484e+01  5.39e+01  4.12e-01  1.44e+01  3.85e-03  5.71e-01  5.95e-01  
  2  +5.0827e-01  +6.9271e+00  6.42e+00  1.11e-01  5.15e+00  1.85e-02  2.25e-01  9.90e-01  
  3  +4.8808e-01  +2.1680e+00  1.68e+00  2.39e-02  1.25e+00  8.29e-03  5.70e-02  7.67e-01  
  4  +4.5215e-01  +1.7906e+00  1.34e+00  1.04e-02  5.46e-01  1.00e-02  2.53e-02  6.22e-01  
  5  +4.1210e-01  +1.4278e+00  1.02e+00  5.62e-03  2.92e-01  8.57e-03  1.44e-02  4.97e-01  
  6  +3.5313e-01  +7.5835e-01  4.05e-01  2.37e-03  1.18e-01  4.69e-04  7.16e-03  7.17e-01  
  7  +3.2214e-01  +5.6319e-01  2.41e-01  1.33e-03  6.51e-02  2.59e-04  4.46e-03  4.60e-01  
  8  +2.9686e-01  +4.1570e-01  1.19e-01  6.25e-04  3.04e-02  1.21e-04  2.34e-03  5.29e-01  
  9  +2.8402e-01  +3.4817e-01  6.42e-02  3.18e-04  1.56e-02  6.65e-05  1.27e-03  5.30e-01  
 10  +2.7610e-01  +3.0830e-01  3.22e-02  1.56e-04  7.64e-03  3.14e-05  6.55e-04  6.52e-01  
 11  +2.6831e-01  +2.7105e-01  2.74e-03  1.31e-05  6.41e-04  2.13e-06  5.90e-05  9.43e-01  
 12  +2.6755e-01  +2.6769e-01  1.47e-04  7.04e-07  3.43e-05  9.20e-08  3.31e-06  9.46e-01  
 13  +2.6750e-01  +2.6750e-01  1.55e-06  7.43e-09  3.62e-07  9.50e-10  3.54e-08  9.90e-01  
 14  +2.6750e-01  +2.6750e-01  1.55e-08  7.44e-11  3.63e-09  9.51e-12  3.54e-10  9.90e-01  
 15  +2.6750e-01  +2.6750e-01  1.55e-10  7.44e-13  3.63e-11  9.51e-14  3.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.691ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.675e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 4.716e-03 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 4.968e-03 seconds
Iteration: 9, Objective: 0.2675
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:02 PM: Your problem has 357 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 3.753e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 357
  constraints   = 607
  nnz(P)        = 0
  nnz(A)        = 4519
  cones (total) = 1
    : Nonnegative = 1,  numel = 607

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9776e-01  +2.5252e+02  2.52e+02  9.42e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.5205e-01  +5.4583e+01  5.40e+01  4.13e-01  1.42e+01  3.86e-03  5.70e-01  5.95e-01  
  2  +5.0534e-01  +7.0449e+00  6.54e+00  1.10e-01  5.03e+00  1.88e-02  2.22e-01  9.90e-01  
  3  +4.8216e-01  +2.3081e+00  1.83e+00  2.34e-02  1.22e+00  9.36e-03  5.56e-02  7.72e-01  
  4  +4.3754e-01  +1.7517e+00  1.31e+00  9.32e-03  4.88e-01  1.03e-02  2.29e-02  6.44e-01  
  5  +4.0299e-01  +1.3963e+00  9.93e-01  5.81e-03  3.00e-01  7.14e-03  1.50e-02  4.42e-01  
  6  +3.4597e-01  +7.9397e-01  4.48e-01  2.59e-03  1.29e-01  1.16e-03  7.72e-03  6.63e-01  
  7  +3.1223e-01  +5.6970e-01  2.57e-01  1.43e-03  6.99e-02  5.77e-04  4.79e-03  4.51e-01  
  8  +2.8679e-01  +4.1535e-01  1.29e-01  6.93e-04  3.36e-02  2.54e-04  2.61e-03  5.20e-01  
  9  +2.7226e-01  +3.3344e-01  6.12e-02  3.18e-04  1.54e-02  1.08e-04  1.31e-03  5.93e-01  
 10  +2.6515e-01  +2.9616e-01  3.10e-02  1.57e-04  7.65e-03  4.91e-05  6.84e-04  5.75e-01  
 11  +2.5834e-01  +2.6114e-01  2.80e-03  1.40e-05  6.82e-04  3.37e-06  6.56e-05  9.26e-01  
 12  +2.5764e-01  +2.5779e-01  1.45e-04  7.28e-07  3.52e-05  1.37e-07  3.56e-06  9.47e-01  
 13  +2.5760e-01  +2.5760e-01  1.53e-06  7.72e-09  3.73e-07  1.41e-09  3.81e-08  9.89e-01  
 14  +2.5760e-01  +2.5760e-01  1.53e-08  7.72e-11  3.74e-09  1.41e-11  3.81e-10  9.90e-01  
 15  +2.5760e-01  +2.5760e-01  1.53e-10  7.72e-13  3.74e-11  1.42e-13  3.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1385ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.576e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 3.753e-03 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 5.079e-03 seconds
Iteration: 10, Objective: 0.2576
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:02 PM: Your problem has 367 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 3.631e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 367
  constraints   = 617
  nnz(P)        = 0
  nnz(A)        = 4611
  cones (total) = 1
    : Nonnegative = 1,  numel = 617

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9760e-01  +2.5251e+02  2.52e+02  9.43e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.4902e-01  +5.4655e+01  5.41e+01  4.14e-01  1.41e+01  3.86e-03  5.70e-01  5.95e-01  
  2  +5.0278e-01  +7.1258e+00  6.62e+00  1.10e-01  4.97e+00  1.91e-02  2.21e-01  9.90e-01  
  3  +4.7761e-01  +2.2885e+00  1.81e+00  2.22e-02  1.15e+00  9.59e-03  5.25e-02  7.86e-01  
  4  +4.2980e-01  +1.7370e+00  1.31e+00  9.04e-03  4.70e-01  1.00e-02  2.22e-02  6.45e-01  
  5  +3.8736e-01  +1.2824e+00  8.95e-01  5.21e-03  2.66e-01  5.50e-03  1.36e-02  5.11e-01  
  6  +3.2833e-01  +6.9497e-01  3.67e-01  2.12e-03  1.04e-01  1.16e-03  6.47e-03  6.25e-01  
  7  +3.0300e-01  +5.4260e-01  2.40e-01  1.35e-03  6.57e-02  6.74e-04  4.49e-03  3.92e-01  
  8  +2.7718e-01  +3.8855e-01  1.11e-01  6.03e-04  2.95e-02  2.85e-04  2.26e-03  5.42e-01  
  9  +2.6661e-01  +3.3014e-01  6.35e-02  3.36e-04  1.64e-02  1.45e-04  1.35e-03  5.05e-01  
 10  +2.5640e-01  +2.7452e-01  1.81e-02  9.44e-05  4.60e-03  2.76e-05  4.11e-04  8.43e-01  
 11  +2.5226e-01  +2.5407e-01  1.81e-03  9.39e-06  4.56e-04  2.38e-06  4.33e-05  9.00e-01  
 12  +2.5190e-01  +2.5242e-01  5.20e-04  2.66e-06  1.30e-04  5.79e-07  1.28e-05  8.00e-01  
 13  +2.5175e-01  +2.5176e-01  9.54e-06  4.88e-08  2.37e-06  9.24e-09  2.38e-07  9.84e-01  
 14  +2.5175e-01  +2.5175e-01  9.54e-08  4.88e-10  2.37e-08  9.24e-11  2.38e-09  9.90e-01  
 15  +2.5175e-01  +2.5175e-01  9.54e-10  4.88e-12  2.37e-10  9.25e-13  2.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.7692ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.518e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 3.631e-03 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 4.037e-03 seconds
Iteration: 11, Objective: 0.2518
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:02 PM: Your problem has 377 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 3.814e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 377
  constraints   = 627
  nnz(P)        = 0
  nnz(A)        = 4716
  cones (total) = 1
    : Nonnegative = 1,  numel = 627

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9760e-01  +2.5255e+02  2.52e+02  9.43e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.4621e-01  +5.4648e+01  5.41e+01  4.14e-01  1.39e+01  3.88e-03  5.69e-01  5.96e-01  
  2  +4.9866e-01  +7.2228e+00  6.72e+00  1.08e-01  4.84e+00  1.93e-02  2.18e-01  9.90e-01  
  3  +4.6893e-01  +2.3791e+00  1.91e+00  2.12e-02  1.09e+00  1.05e-02  5.03e-02  7.89e-01  
  4  +4.2256e-01  +1.8038e+00  1.38e+00  9.60e-03  4.94e-01  9.77e-03  2.38e-02  5.96e-01  
  5  +3.7420e-01  +1.2540e+00  8.80e-01  5.15e-03  2.60e-01  4.79e-03  1.37e-02  5.58e-01  
  6  +3.1584e-01  +6.5558e-01  3.40e-01  2.00e-03  9.74e-02  9.79e-04  6.23e-03  6.58e-01  
  7  +2.8663e-01  +4.7177e-01  1.85e-01  1.06e-03  5.14e-02  4.67e-04  3.67e-03  4.98e-01  
  8  +2.7208e-01  +3.8774e-01  1.16e-01  6.43e-04  3.14e-02  2.79e-04  2.37e-03  3.97e-01  
  9  +2.5943e-01  +3.1706e-01  5.76e-02  3.11e-04  1.53e-02  1.28e-04  1.24e-03  5.34e-01  
 10  +2.4883e-01  +2.5865e-01  9.83e-03  5.20e-05  2.55e-03  1.11e-05  2.28e-04  9.45e-01  
 11  +2.4670e-01  +2.4874e-01  2.04e-03  1.07e-05  5.23e-04  2.05e-06  4.98e-05  8.09e-01  
 12  +2.4631e-01  +2.4696e-01  6.53e-04  3.39e-06  1.65e-04  4.46e-07  1.65e-05  9.90e-01  
 13  +2.4611e-01  +2.4612e-01  1.60e-05  8.29e-08  4.03e-06  1.03e-08  4.10e-07  9.75e-01  
 14  +2.4610e-01  +2.4610e-01  1.60e-07  8.29e-10  4.03e-08  1.03e-10  4.10e-09  9.90e-01  
 15  +2.4610e-01  +2.4610e-01  1.60e-09  8.29e-12  4.03e-10  1.03e-12  4.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0803ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.461e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 3.814e-03 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 5.859e-03 seconds
Iteration: 12, Objective: 0.2461
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:02 PM: Your problem has 387 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 2.329e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 387
  constraints   = 637
  nnz(P)        = 0
  nnz(A)        = 4801
  cones (total) = 1
    : Nonnegative = 1,  numel = 637

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9758e-01  +2.5260e+02  2.52e+02  9.44e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.4394e-01  +5.4685e+01  5.41e+01  4.14e-01  1.37e+01  3.88e-03  5.68e-01  5.96e-01  
  2  +4.9527e-01  +7.2697e+00  6.77e+00  1.06e-01  4.77e+00  1.95e-02  2.17e-01  9.90e-01  
  3  +4.6255e-01  +2.3878e+00  1.93e+00  2.06e-02  1.06e+00  1.06e-02  4.91e-02  7.94e-01  
  4  +4.1907e-01  +1.8826e+00  1.46e+00  1.03e-02  5.28e-01  9.69e-03  2.57e-02  5.53e-01  
  5  +3.7261e-01  +1.2838e+00  9.11e-01  5.45e-03  2.73e-01  4.55e-03  1.45e-02  5.70e-01  
  6  +3.1217e-01  +6.3468e-01  3.23e-01  1.93e-03  9.30e-02  6.08e-04  6.02e-03  7.48e-01  
  7  +2.8740e-01  +4.8193e-01  1.95e-01  1.13e-03  5.46e-02  3.38e-04  3.83e-03  4.44e-01  
  8  +2.7183e-01  +3.8895e-01  1.17e-01  6.63e-04  3.22e-02  1.96e-04  2.40e-03  4.16e-01  
  9  +2.5918e-01  +3.1661e-01  5.74e-02  3.16e-04  1.54e-02  8.91e-05  1.23e-03  5.54e-01  
 10  +2.4940e-01  +2.6192e-01  1.25e-02  6.77e-05  3.31e-03  1.34e-05  2.87e-04  8.95e-01  
 11  +2.4681e-01  +2.4923e-01  2.42e-03  1.30e-05  6.33e-04  2.23e-06  5.88e-05  8.34e-01  
 12  +2.4627e-01  +2.4683e-01  5.59e-04  2.94e-06  1.42e-04  4.31e-07  1.43e-05  8.81e-01  
 13  +2.4610e-01  +2.4612e-01  1.45e-05  7.56e-08  3.65e-06  1.04e-08  3.77e-07  9.76e-01  
 14  +2.4610e-01  +2.4610e-01  1.45e-07  7.57e-10  3.66e-08  1.04e-10  3.78e-09  9.90e-01  
 15  +2.4610e-01  +2.4610e-01  1.45e-09  7.57e-12  3.66e-10  1.04e-12  3.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.2046ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.461e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 2.329e-04 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 1.025e-02 seconds
Iteration: 13, Objective: 0.2461
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:02 PM: Your problem has 397 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 3.808e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 397
  constraints   = 647
  nnz(P)        = 0
  nnz(A)        = 4928
  cones (total) = 1
    : Nonnegative = 1,  numel = 647

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9754e-01  +2.5255e+02  2.52e+02  9.44e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.4189e-01  +5.4736e+01  5.42e+01  4.15e-01  1.36e+01  3.89e-03  5.68e-01  5.95e-01  
  2  +4.9349e-01  +7.3091e+00  6.82e+00  1.06e-01  4.72e+00  1.96e-02  2.16e-01  9.90e-01  
  3  +4.5886e-01  +2.4365e+00  1.98e+00  2.07e-02  1.05e+00  1.09e-02  4.94e-02  7.92e-01  
  4  +4.0958e-01  +1.9235e+00  1.51e+00  1.01e-02  5.11e-01  1.06e-02  2.51e-02  5.56e-01  
  5  +3.5643e-01  +1.1145e+00  7.58e-01  4.70e-03  2.32e-01  1.87e-03  1.29e-02  7.12e-01  
  6  +2.9839e-01  +5.6240e-01  2.64e-01  1.59e-03  7.59e-02  4.06e-04  5.10e-03  6.98e-01  
  7  +2.8435e-01  +4.8758e-01  2.03e-01  1.19e-03  5.74e-02  2.98e-04  4.01e-03  3.08e-01  
  8  +2.6720e-01  +3.8966e-01  1.22e-01  6.96e-04  3.36e-02  1.74e-04  2.51e-03  4.13e-01  
  9  +2.5383e-01  +3.1617e-01  6.23e-02  3.42e-04  1.66e-02  8.22e-05  1.33e-03  5.47e-01  
 10  +2.4325e-01  +2.6097e-01  1.77e-02  9.40e-05  4.55e-03  2.07e-05  4.02e-04  7.57e-01  
 11  +2.3938e-01  +2.4243e-01  3.05e-03  1.58e-05  7.65e-04  2.89e-06  7.25e-05  8.84e-01  
 12  +2.3858e-01  +2.3884e-01  2.63e-04  1.36e-06  6.56e-05  2.24e-07  6.49e-06  9.15e-01  
 13  +2.3850e-01  +2.3850e-01  2.97e-06  1.54e-08  7.40e-07  2.44e-09  7.40e-08  9.89e-01  
 14  +2.3850e-01  +2.3850e-01  2.97e-08  1.54e-10  7.40e-09  2.44e-11  7.40e-10  9.90e-01  
 15  +2.3850e-01  +2.3850e-01  2.97e-10  1.54e-12  7.40e-11  2.44e-13  7.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0165ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.385e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 3.808e-03 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 9.018e-03 seconds
Iteration: 14, Objective: 0.2385
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:02 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 5.920e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 4944
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9750e-01  +2.5261e+02  2.52e+02  9.44e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.4097e-01  +5.4779e+01  5.42e+01  4.16e-01  1.36e+01  3.89e-03  5.68e-01  5.95e-01  
  2  +4.9287e-01  +7.3382e+00  6.85e+00  1.06e-01  4.72e+00  1.97e-02  2.17e-01  9.90e-01  
  3  +4.5761e-01  +2.4213e+00  1.96e+00  2.04e-02  1.04e+00  1.09e-02  4.88e-02  7.96e-01  
  4  +4.0880e-01  +1.9315e+00  1.52e+00  1.01e-02  5.14e-01  1.06e-02  2.53e-02  5.47e-01  
  5  +3.5144e-01  +1.0387e+00  6.87e-01  4.29e-03  2.11e-01  9.88e-04  1.19e-02  7.75e-01  
  6  +2.9385e-01  +5.4184e-01  2.48e-01  1.50e-03  7.13e-02  2.53e-04  4.87e-03  7.10e-01  
  7  +2.7916e-01  +4.6063e-01  1.81e-01  1.07e-03  5.13e-02  1.83e-04  3.64e-03  3.37e-01  
  8  +2.6593e-01  +3.8482e-01  1.19e-01  6.81e-04  3.29e-02  1.18e-04  2.46e-03  3.63e-01  
  9  +2.5176e-01  +3.0580e-01  5.40e-02  2.99e-04  1.45e-02  5.18e-05  1.17e-03  5.81e-01  
 10  +2.4338e-01  +2.6214e-01  1.88e-02  1.01e-04  4.89e-03  1.72e-05  4.26e-04  6.77e-01  
 11  +2.3954e-01  +2.4313e-01  3.58e-03  1.89e-05  9.15e-04  2.86e-06  8.49e-05  8.77e-01  
 12  +2.3865e-01  +2.3915e-01  4.98e-04  2.59e-06  1.25e-04  3.64e-07  1.23e-05  8.80e-01  
 13  +2.3850e-01  +2.3851e-01  7.20e-06  3.74e-08  1.80e-06  4.83e-09  1.80e-07  9.88e-01  
 14  +2.3850e-01  +2.3850e-01  7.20e-08  3.74e-10  1.80e-08  4.83e-11  1.80e-09  9.90e-01  
 15  +2.3850e-01  +2.3850e-01  7.20e-10  3.74e-12  1.80e-10  4.84e-13  1.80e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.6121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.385e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 5.920e-03 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 7.319e-03 seconds
Iteration: 15, Objective: 0.2385
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:02 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 3.040e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 5040
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9750e-01  +2.5262e+02  2.52e+02  9.45e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.4049e-01  +5.4735e+01  5.42e+01  4.17e-01  1.35e+01  3.89e-03  5.68e-01  5.96e-01  
  2  +4.9138e-01  +7.3462e+00  6.85e+00  1.06e-01  4.63e+00  1.97e-02  2.15e-01  9.90e-01  
  3  +4.5470e-01  +2.4823e+00  2.03e+00  2.07e-02  1.04e+00  1.10e-02  4.97e-02  7.94e-01  
  4  +4.0442e-01  +1.9474e+00  1.54e+00  1.02e-02  5.13e-01  1.02e-02  2.56e-02  5.61e-01  
  5  +3.5938e-01  +1.2172e+00  8.58e-01  5.40e-03  2.65e-01  2.66e-03  1.48e-02  6.34e-01  
  6  +3.0020e-01  +5.8492e-01  2.85e-01  1.73e-03  8.22e-02  5.16e-04  5.51e-03  7.09e-01  
  7  +2.8578e-01  +5.0899e-01  2.23e-01  1.32e-03  6.31e-02  3.80e-04  4.40e-03  3.03e-01  
  8  +2.6386e-01  +3.8241e-01  1.19e-01  6.75e-04  3.23e-02  1.90e-04  2.45e-03  4.98e-01  
  9  +2.5157e-01  +3.1496e-01  6.34e-02  3.51e-04  1.68e-02  9.04e-05  1.37e-03  5.55e-01  
 10  +2.4084e-01  +2.5752e-01  1.67e-02  9.02e-05  4.31e-03  1.98e-05  3.88e-04  7.88e-01  
 11  +2.3738e-01  +2.4028e-01  2.89e-03  1.54e-05  7.34e-04  2.38e-06  7.11e-05  9.30e-01  
 12  +2.3666e-01  +2.3718e-01  5.22e-04  2.75e-06  1.30e-04  3.78e-07  1.35e-05  8.71e-01  
 13  +2.3650e-01  +2.3651e-01  9.16e-06  4.81e-08  2.27e-06  5.67e-09  2.42e-07  9.85e-01  
 14  +2.3650e-01  +2.3650e-01  9.16e-08  4.81e-10  2.27e-08  5.66e-11  2.42e-09  9.90e-01  
 15  +2.3650e-01  +2.3650e-01  9.16e-10  4.81e-12  2.27e-10  5.67e-13  2.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.3659ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.365e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 3.040e-03 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 9.519e-03 seconds
Iteration: 16, Objective: 0.2365
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:02 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:02 PM: Finished problem compilation (took 1.935e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 5128
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9748e-01  +2.5262e+02  2.52e+02  9.45e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.3855e-01  +5.4796e+01  5.43e+01  4.17e-01  1.34e+01  3.90e-03  5.67e-01  5.95e-01  
  2  +4.8901e-01  +7.3662e+00  6.88e+00  1.05e-01  4.55e+00  1.98e-02  2.15e-01  9.90e-01  
  3  +4.4993e-01  +2.4229e+00  1.97e+00  1.98e-02  9.92e-01  1.07e-02  4.81e-02  8.02e-01  
  4  +3.9824e-01  +1.9633e+00  1.57e+00  1.02e-02  5.07e-01  1.02e-02  2.58e-02  5.58e-01  
  5  +3.5766e-01  +1.2501e+00  8.92e-01  5.71e-03  2.78e-01  2.57e-03  1.57e-02  6.22e-01  
  6  +2.9904e-01  +5.8053e-01  2.81e-01  1.73e-03  8.14e-02  4.81e-04  5.50e-03  7.18e-01  
  7  +2.8538e-01  +5.0865e-01  2.23e-01  1.34e-03  6.33e-02  3.63e-04  4.41e-03  2.89e-01  
  8  +2.6405e-01  +3.8565e-01  1.22e-01  6.99e-04  3.33e-02  1.88e-04  2.50e-03  4.87e-01  
  9  +2.5199e-01  +3.1893e-01  6.69e-02  3.74e-04  1.78e-02  9.26e-05  1.43e-03  5.48e-01  
 10  +2.4023e-01  +2.5436e-01  1.41e-02  7.77e-05  3.70e-03  1.47e-05  3.24e-04  8.67e-01  
 11  +2.3776e-01  +2.4188e-01  4.12e-03  2.24e-05  1.06e-03  2.90e-06  1.00e-04  9.90e-01  
 12  +2.3674e-01  +2.3751e-01  7.71e-04  4.14e-06  1.95e-04  5.06e-07  1.96e-05  8.52e-01  
 13  +2.3651e-01  +2.3654e-01  3.25e-05  1.74e-07  8.17e-06  1.99e-08  8.51e-07  9.82e-01  
 14  +2.3650e-01  +2.3650e-01  3.31e-07  1.77e-09  8.32e-08  2.02e-10  8.69e-09  9.90e-01  
 15  +2.3650e-01  +2.3650e-01  3.32e-09  1.78e-11  8.34e-10  2.03e-12  8.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.3394ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:02 PM: Optimal value: 2.365e-01
(CVXPY) Sep 20 03:14:02 PM: Compilation took 1.935e-03 seconds
(CVXPY) Sep 20 03:14:02 PM: Solver (including time spent in interface) took 9.851e-03 seconds
Iteration: 17, Objective: 0.2365
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:03 PM: Your problem has 429 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:03 PM: Finished problem compilation (took 3.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 429
  constraints   = 679
  nnz(P)        = 0
  nnz(A)        = 5199
  cones (total) = 1
    : Nonnegative = 1,  numel = 679

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9732e-01  +2.5262e+02  2.52e+02  9.46e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.3568e-01  +5.4863e+01  5.43e+01  4.19e-01  1.32e+01  3.90e-03  5.67e-01  5.95e-01  
  2  +4.8600e-01  +7.4865e+00  7.00e+00  1.04e-01  4.50e+00  2.02e-02  2.14e-01  9.90e-01  
  3  +4.4410e-01  +2.5418e+00  2.10e+00  2.03e-02  1.01e+00  1.13e-02  4.90e-02  7.95e-01  
  4  +3.9706e-01  +2.0603e+00  1.66e+00  1.11e-02  5.53e-01  1.04e-02  2.81e-02  5.01e-01  
  5  +3.5787e-01  +1.3596e+00  1.00e+00  6.34e-03  3.09e-01  4.45e-03  1.72e-02  5.14e-01  
  6  +2.9882e-01  +5.9315e-01  2.94e-01  1.84e-03  8.65e-02  5.78e-04  5.80e-03  7.75e-01  
  7  +2.8561e-01  +5.2282e-01  2.37e-01  1.45e-03  6.85e-02  4.37e-04  4.73e-03  2.79e-01  
  8  +2.5721e-01  +3.5713e-01  9.99e-02  5.76e-04  2.73e-02  1.61e-04  2.09e-03  6.59e-01  
  9  +2.4772e-01  +3.0413e-01  5.64e-02  3.18e-04  1.51e-02  8.00e-05  1.22e-03  5.44e-01  
 10  +2.3835e-01  +2.5300e-01  1.46e-02  8.13e-05  3.86e-03  1.75e-05  3.36e-04  7.90e-01  
 11  +2.3567e-01  +2.3914e-01  3.46e-03  1.91e-05  8.99e-04  2.36e-06  8.42e-05  9.90e-01  
 12  +2.3478e-01  +2.3537e-01  5.84e-04  3.17e-06  1.48e-04  3.68e-07  1.50e-05  8.89e-01  
 13  +2.3461e-01  +2.3463e-01  2.36e-05  1.27e-07  5.94e-06  1.44e-08  6.21e-07  9.88e-01  
 14  +2.3460e-01  +2.3460e-01  2.38e-07  1.28e-09  5.99e-08  1.45e-10  6.28e-09  9.90e-01  
 15  +2.3460e-01  +2.3460e-01  2.38e-09  1.28e-11  6.00e-10  1.45e-12  6.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.544ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:03 PM: Optimal value: 2.346e-01
(CVXPY) Sep 20 03:14:03 PM: Compilation took 3.510e-03 seconds
(CVXPY) Sep 20 03:14:03 PM: Solver (including time spent in interface) took 9.051e-03 seconds
Iteration: 18, Objective: 0.2346
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:03 PM: Your problem has 431 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:03 PM: Finished problem compilation (took 4.737e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 431
  constraints   = 681
  nnz(P)        = 0
  nnz(A)        = 5218
  cones (total) = 1
    : Nonnegative = 1,  numel = 681

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9733e-01  +2.5262e+02  2.52e+02  9.46e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.3546e-01  +5.4880e+01  5.43e+01  4.19e-01  1.32e+01  3.90e-03  5.67e-01  5.95e-01  
  2  +4.8564e-01  +7.4898e+00  7.00e+00  1.04e-01  4.49e+00  2.02e-02  2.14e-01  9.90e-01  
  3  +4.4367e-01  +2.5539e+00  2.11e+00  2.04e-02  1.01e+00  1.12e-02  4.95e-02  7.94e-01  
  4  +3.9596e-01  +2.0654e+00  1.67e+00  1.12e-02  5.52e-01  1.04e-02  2.82e-02  5.02e-01  
  5  +3.5792e-01  +1.3785e+00  1.02e+00  6.47e-03  3.15e-01  4.54e-03  1.75e-02  5.06e-01  
  6  +2.9884e-01  +5.9289e-01  2.94e-01  1.84e-03  8.65e-02  5.35e-04  5.81e-03  7.88e-01  
  7  +2.8591e-01  +5.2451e-01  2.39e-01  1.46e-03  6.90e-02  4.10e-04  4.77e-03  2.74e-01  
  8  +2.5692e-01  +3.5449e-01  9.76e-02  5.63e-04  2.67e-02  1.50e-04  2.04e-03  6.54e-01  
  9  +2.4769e-01  +3.0352e-01  5.58e-02  3.15e-04  1.50e-02  7.58e-05  1.21e-03  5.44e-01  
 10  +2.3830e-01  +2.5265e-01  1.44e-02  7.98e-05  3.78e-03  1.64e-05  3.30e-04  7.96e-01  
 11  +2.3564e-01  +2.3899e-01  3.35e-03  1.85e-05  8.71e-04  2.33e-06  8.17e-05  9.79e-01  
 12  +2.3477e-01  +2.3532e-01  5.44e-04  2.96e-06  1.38e-04  3.44e-07  1.40e-05  8.94e-01  
 13  +2.3461e-01  +2.3463e-01  2.33e-05  1.26e-07  5.88e-06  1.43e-08  6.16e-07  9.87e-01  
 14  +2.3460e-01  +2.3460e-01  2.35e-07  1.27e-09  5.92e-08  1.44e-10  6.22e-09  9.90e-01  
 15  +2.3460e-01  +2.3460e-01  2.35e-09  1.27e-11  5.93e-10  1.44e-12  6.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.435ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:03 PM: Optimal value: 2.346e-01
(CVXPY) Sep 20 03:14:03 PM: Compilation took 4.737e-03 seconds
(CVXPY) Sep 20 03:14:03 PM: Solver (including time spent in interface) took 1.230e-02 seconds
FULL MODEL:
  Accruacy: 0.742
  Our objective: 0.484

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.184)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x6 = 1 AND x7 = 0)                                             <-- (term's our objective: 0.028)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1)                       <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.02)
 OR (x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.028)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.737717628479004
Best over terms:
  Our final objective: 0.184
    Its accruacy: 0.592
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.184
  Highest accruacy: 0.592
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

