Command:
python test_script.py -s linear_dependence -d 9 -n 50000 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.156
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.17244
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:30 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:30 PM: Finished problem compilation (took 1.237e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1481e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6046e+02  1.60e+02  1.50e-01  7.61e+01  4.51e-05  2.60e-01  2.61e-01  
  4  +5.0135e-01  +1.7470e+01  1.70e+01  4.67e-02  2.35e+01  5.22e-06  1.96e-01  4.49e-01  
  5  +5.0000e-01  +1.1839e+00  6.84e-01  2.04e-03  1.07e+00  2.59e-05  1.90e-01  2.50e-01  
  6  +4.9999e-01  +6.3992e-01  1.40e-01  4.17e-04  2.18e-01  8.19e-06  3.46e-02  8.35e-01  
  7  +4.9865e-01  +1.3499e+00  8.51e-01  6.87e-04  3.61e-01  6.54e-04  2.31e-03  9.77e-01  
  8  +4.9958e-01  +9.0080e-01  4.01e-01  3.14e-04  1.65e-01  1.89e-04  9.83e-04  7.97e-01  
  9  +4.9345e-01  +8.5127e-01  3.58e-01  2.18e-05  1.15e-02  2.57e-03  6.23e-05  9.37e-01  
 10  +4.8601e-01  +6.5961e-01  1.74e-01  1.18e-05  6.21e-03  2.20e-05  3.56e-05  6.65e-01  
 11  +4.8047e-01  +5.9267e-01  1.12e-01  7.34e-06  3.86e-03  2.21e-07  2.29e-05  8.21e-01  
 12  +4.6690e-01  +5.1438e-01  4.75e-02  2.61e-06  1.37e-03  2.79e-07  8.66e-06  9.05e-01  
 13  +4.5561e-01  +4.6272e-01  7.11e-03  3.44e-07  1.80e-04  3.59e-08  1.25e-06  8.77e-01  
 14  +4.5309e-01  +4.5350e-01  4.08e-04  1.70e-08  8.93e-06  2.95e-09  7.14e-08  9.75e-01  
 15  +4.5296e-01  +4.5297e-01  4.10e-06  1.71e-10  8.97e-08  2.97e-11  7.20e-10  9.90e-01  
 16  +4.5296e-01  +4.5296e-01  4.10e-08  1.71e-12  8.97e-10  2.97e-13  7.20e-12  9.90e-01  
 17  +4.5296e-01  +4.5296e-01  4.12e-10  1.71e-14  9.00e-12  3.52e-15  8.47e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 475.9291ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:30 PM: Optimal value: 4.530e-01
(CVXPY) Sep 20 03:20:30 PM: Compilation took 1.237e-01 seconds
(CVXPY) Sep 20 03:20:30 PM: Solver (including time spent in interface) took 5.129e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4530
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:30 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:31 PM: Finished problem compilation (took 1.654e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 344252
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4251e+03  5.42e+03  4.36e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1452e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6029e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7350e+01  1.68e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.54e-01  
  5  +4.9998e-01  +1.1044e+00  6.04e-01  1.81e-03  9.77e-01  2.93e-05  1.86e-01  3.71e-01  
  6  +4.9998e-01  +8.1099e-01  3.11e-01  9.28e-04  5.03e-01  1.86e-05  7.81e-02  6.00e-01  
  7  +5.0000e-01  +1.0881e+00  5.88e-01  1.75e-03  9.46e-01  2.38e-05  4.99e-02  9.90e-01  
  8  +4.9993e-01  +7.1975e-01  2.20e-01  6.24e-04  3.39e-01  4.11e-05  6.24e-03  8.77e-01  
  9  +4.9671e-01  +7.1082e-01  2.14e-01  5.47e-05  2.99e-02  1.52e-03  1.54e-04  9.76e-01  
 10  +4.9545e-01  +7.0597e-01  2.11e-01  3.83e-05  2.10e-02  2.00e-03  1.07e-04  3.53e-01  
 11  +4.9874e-01  +6.9491e-01  1.96e-01  3.22e-05  1.77e-02  2.68e-04  8.62e-05  9.78e-01  
 12  +4.9788e-01  +6.9168e-01  1.94e-01  2.12e-05  1.16e-02  3.93e-04  5.63e-05  3.59e-01  
 13  +4.9812e-01  +6.9105e-01  1.93e-01  2.04e-05  1.12e-02  2.87e-04  5.42e-05  3.15e-01  
 14  +4.9648e-01  +6.8421e-01  1.88e-01  1.22e-05  6.70e-03  3.68e-04  3.23e-05  5.81e-01  
 15  +4.9411e-01  +6.7491e-01  1.81e-01  9.24e-06  5.06e-03  3.63e-04  2.45e-05  4.07e-01  
 16  +4.8913e-01  +6.5533e-01  1.66e-01  7.16e-06  3.92e-03  3.01e-04  1.92e-05  3.91e-01  
 17  +4.8561e-01  +6.4254e-01  1.57e-01  6.82e-06  3.73e-03  1.94e-04  1.90e-05  2.31e-01  
 18  +4.6150e-01  +5.4489e-01  8.34e-02  3.21e-06  1.75e-03  2.09e-06  9.38e-06  8.56e-01  
 19  +4.5094e-01  +5.1556e-01  6.46e-02  2.26e-06  1.23e-03  1.55e-06  6.66e-06  3.74e-01  
 20  +4.2596e-01  +4.3402e-01  8.06e-03  2.57e-07  1.39e-04  6.36e-08  8.07e-07  9.42e-01  
 21  +4.2214e-01  +4.2223e-01  8.84e-05  2.79e-09  1.52e-06  6.33e-10  8.88e-09  9.89e-01  
 22  +4.2210e-01  +4.2210e-01  8.84e-07  2.79e-11  1.52e-08  6.33e-12  8.88e-11  9.90e-01  
 23  +4.2210e-01  +4.2210e-01  8.84e-09  2.79e-13  1.52e-10  6.52e-14  9.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 740.6445ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:31 PM: Optimal value: 4.221e-01
(CVXPY) Sep 20 03:20:31 PM: Compilation took 1.654e-01 seconds
(CVXPY) Sep 20 03:20:31 PM: Solver (including time spent in interface) took 7.780e-01 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:32 PM: Your problem has 25038 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:32 PM: Finished problem compilation (took 1.594e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25038
  constraints   = 50038
  nnz(P)        = 0
  nnz(A)        = 345854
  cones (total) = 1
    : Nonnegative = 1,  numel = 50038

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1443e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6026e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7351e+01  1.68e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.54e-01  
  5  +4.9998e-01  +1.1032e+00  6.03e-01  1.80e-03  9.75e-01  2.94e-05  1.86e-01  3.73e-01  
  6  +4.9998e-01  +7.3832e-01  2.38e-01  7.11e-04  3.86e-01  1.63e-05  5.78e-02  6.97e-01  
  7  +4.9997e-01  +1.0411e+00  5.41e-01  1.60e-03  8.66e-01  3.45e-05  3.23e-02  9.90e-01  
  8  +4.9970e-01  +7.2309e-01  2.23e-01  4.77e-04  2.59e-01  1.45e-04  2.16e-03  9.34e-01  
  9  +4.9631e-01  +7.1272e-01  2.16e-01  6.09e-05  3.33e-02  1.68e-03  1.74e-04  9.20e-01  
 10  +4.9487e-01  +7.0591e-01  2.11e-01  3.94e-05  2.16e-02  2.22e-03  1.11e-04  4.71e-01  
 11  +4.9189e-01  +6.8944e-01  1.98e-01  1.97e-05  1.08e-02  2.98e-03  5.42e-05  7.34e-01  
 12  +4.9247e-01  +6.7878e-01  1.86e-01  1.36e-05  7.42e-03  1.52e-03  3.67e-05  8.52e-01  
 13  +4.9019e-01  +6.6275e-01  1.73e-01  9.11e-06  4.99e-03  3.82e-04  2.45e-05  9.90e-01  
 14  +4.7751e-01  +6.1475e-01  1.37e-01  5.26e-06  2.87e-03  3.27e-04  1.45e-05  5.27e-01  
 15  +4.4287e-01  +4.8893e-01  4.61e-02  1.56e-06  8.49e-04  3.40e-06  4.69e-06  8.31e-01  
 16  +4.3881e-01  +4.7632e-01  3.75e-02  1.25e-06  6.78e-04  2.50e-06  3.79e-06  2.86e-01  
 17  +4.3852e-01  +4.7549e-01  3.70e-02  1.23e-06  6.67e-04  2.36e-06  3.73e-06  6.78e-02  
 18  +4.3738e-01  +4.7216e-01  3.48e-02  1.14e-06  6.19e-04  1.89e-06  3.48e-06  2.64e-01  
 19  +4.2871e-01  +4.4487e-01  1.62e-02  5.14e-07  2.79e-04  2.78e-07  1.61e-06  9.90e-01  
 20  +4.2277e-01  +4.2559e-01  2.83e-03  8.99e-08  4.88e-05  4.80e-08  2.87e-07  8.43e-01  
 21  +4.2154e-01  +4.2163e-01  8.81e-05  2.80e-09  1.52e-06  1.48e-09  8.99e-09  9.71e-01  
 22  +4.2150e-01  +4.2150e-01  8.82e-07  2.81e-11  1.52e-08  1.48e-11  9.00e-11  9.90e-01  
 23  +4.2150e-01  +4.2150e-01  8.82e-09  2.81e-13  1.52e-10  1.48e-13  9.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 772.9958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:33 PM: Optimal value: 4.215e-01
(CVXPY) Sep 20 03:20:33 PM: Compilation took 1.594e-01 seconds
(CVXPY) Sep 20 03:20:33 PM: Solver (including time spent in interface) took 8.076e-01 seconds
Iteration: 3, Objective: 0.4215
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:33 PM: Your problem has 25047 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:33 PM: Finished problem compilation (took 1.573e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25047
  constraints   = 50047
  nnz(P)        = 0
  nnz(A)        = 346943
  cones (total) = 1
    : Nonnegative = 1,  numel = 50047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4251e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1439e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6025e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7349e+01  1.68e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.54e-01  
  5  +4.9998e-01  +1.1011e+00  6.01e-01  1.80e-03  9.71e-01  2.95e-05  1.86e-01  3.76e-01  
  6  +4.9998e-01  +7.1837e-01  2.18e-01  6.52e-04  3.53e-01  1.59e-05  5.22e-02  7.25e-01  
  7  +4.9995e-01  +1.0303e+00  5.30e-01  1.56e-03  8.45e-01  4.26e-05  2.68e-02  9.90e-01  
  8  +4.9947e-01  +7.5114e-01  2.52e-01  4.13e-04  2.25e-01  2.53e-04  1.55e-03  9.43e-01  
  9  +4.9226e-01  +7.2984e-01  2.38e-01  3.60e-05  1.97e-02  3.50e-03  1.02e-04  9.34e-01  
 10  +4.9040e-01  +7.1029e-01  2.20e-01  2.30e-05  1.25e-02  3.76e-03  6.41e-05  5.54e-01  
 11  +4.8073e-01  +6.7148e-01  1.91e-01  1.02e-05  5.60e-03  5.64e-03  2.86e-05  6.41e-01  
 12  +4.8081e-01  +6.6878e-01  1.88e-01  9.97e-06  5.45e-03  5.20e-03  2.78e-05  8.86e-02  
 13  +4.8460e-01  +6.6120e-01  1.77e-01  9.66e-06  5.28e-03  2.02e-03  2.67e-05  4.97e-01  
 14  +4.6173e-01  +5.6679e-01  1.05e-01  3.59e-06  1.96e-03  1.58e-03  1.03e-05  6.97e-01  
 15  +4.4459e-01  +5.0263e-01  5.80e-02  1.96e-06  1.07e-03  5.77e-04  5.88e-06  5.31e-01  
 16  +4.4311e-01  +4.9633e-01  5.32e-02  1.76e-06  9.55e-04  2.63e-04  5.28e-06  5.56e-01  
 17  +4.4187e-01  +4.9196e-01  5.01e-02  1.64e-06  8.94e-04  2.15e-04  4.96e-06  1.88e-01  
 18  +4.3842e-01  +4.7996e-01  4.15e-02  1.35e-06  7.33e-04  1.37e-04  4.11e-06  3.65e-01  
 19  +4.3319e-01  +4.6179e-01  2.86e-02  9.17e-07  4.98e-04  4.76e-05  2.83e-06  6.64e-01  
 20  +4.3065e-01  +4.5305e-01  2.24e-02  7.15e-07  3.88e-04  2.53e-05  2.23e-06  4.82e-01  
 21  +4.2211e-01  +4.2480e-01  2.68e-03  8.58e-08  4.66e-05  1.70e-06  2.75e-07  9.29e-01  
 22  +4.2096e-01  +4.2104e-01  8.04e-05  2.57e-09  1.40e-06  4.68e-08  8.29e-09  9.72e-01  
 23  +4.2092e-01  +4.2092e-01  8.05e-07  2.57e-11  1.40e-08  4.68e-10  8.30e-11  9.90e-01  
 24  +4.2092e-01  +4.2092e-01  8.05e-09  2.57e-13  1.40e-10  4.68e-12  8.30e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 815.5183ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:34 PM: Optimal value: 4.209e-01
(CVXPY) Sep 20 03:20:34 PM: Compilation took 1.573e-01 seconds
(CVXPY) Sep 20 03:20:34 PM: Solver (including time spent in interface) took 8.629e-01 seconds
Iteration: 4, Objective: 0.4209
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:34 PM: Your problem has 25056 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:34 PM: Finished problem compilation (took 2.035e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25056
  constraints   = 50056
  nnz(P)        = 0
  nnz(A)        = 348340
  cones (total) = 1
    : Nonnegative = 1,  numel = 50056

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4251e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1435e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7349e+01  1.68e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.54e-01  
  5  +4.9999e-01  +1.1105e+00  6.11e-01  1.82e-03  9.87e-01  2.95e-05  1.86e-01  3.71e-01  
  6  +4.9998e-01  +7.1073e-01  2.11e-01  6.29e-04  3.41e-01  1.54e-05  4.97e-02  7.37e-01  
  7  +4.9992e-01  +1.0065e+00  5.07e-01  1.48e-03  7.97e-01  5.76e-05  1.97e-02  9.90e-01  
  8  +4.9863e-01  +7.5814e-01  2.60e-01  2.26e-04  1.23e-01  6.38e-04  7.19e-04  9.64e-01  
  9  +4.9516e-01  +7.4795e-01  2.53e-01  6.88e-05  3.76e-02  2.16e-03  2.00e-04  7.23e-01  
 10  +4.9347e-01  +7.3300e-01  2.40e-01  4.37e-05  2.39e-02  2.73e-03  1.25e-04  4.89e-01  
 11  +4.9295e-01  +7.0294e-01  2.10e-01  2.40e-05  1.31e-02  2.36e-03  6.61e-05  8.23e-01  
 12  +4.9414e-01  +6.8584e-01  1.92e-01  1.53e-05  8.39e-03  8.89e-04  4.13e-05  9.90e-01  
 13  +4.8519e-01  +6.5263e-01  1.67e-01  7.26e-06  3.97e-03  1.36e-03  1.97e-05  5.63e-01  
 14  +4.5761e-01  +5.4494e-01  8.73e-02  2.92e-06  1.59e-03  5.09e-04  8.40e-06  7.11e-01  
 15  +4.4932e-01  +5.1691e-01  6.76e-02  2.26e-06  1.23e-03  3.06e-04  6.67e-06  3.47e-01  
 16  +4.4501e-01  +5.0280e-01  5.78e-02  1.91e-06  1.04e-03  1.26e-04  5.71e-06  5.77e-01  
 17  +4.4334e-01  +4.9715e-01  5.38e-02  1.76e-06  9.59e-04  8.37e-05  5.30e-06  3.45e-01  
 18  +4.3563e-01  +4.7092e-01  3.53e-02  1.14e-06  6.20e-04  2.53e-05  3.51e-06  7.00e-01  
 19  +4.2391e-01  +4.3134e-01  7.43e-03  2.39e-07  1.30e-04  2.72e-06  7.64e-07  8.84e-01  
 20  +4.2090e-01  +4.2140e-01  5.02e-04  1.62e-08  8.77e-06  1.75e-07  5.22e-08  9.34e-01  
 21  +4.2069e-01  +4.2072e-01  2.50e-05  8.04e-10  4.37e-07  2.48e-09  2.60e-09  9.87e-01  
 22  +4.2068e-01  +4.2068e-01  2.73e-07  8.78e-12  4.77e-09  2.70e-11  2.84e-11  9.89e-01  
 23  +4.2068e-01  +4.2068e-01  2.80e-09  9.00e-14  4.89e-11  2.74e-13  2.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 750.0492ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:35 PM: Optimal value: 4.207e-01
(CVXPY) Sep 20 03:20:35 PM: Compilation took 2.035e-01 seconds
(CVXPY) Sep 20 03:20:35 PM: Solver (including time spent in interface) took 7.878e-01 seconds
Iteration: 5, Objective: 0.4207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:35 PM: Your problem has 25058 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:35 PM: Finished problem compilation (took 1.760e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25058
  constraints   = 50058
  nnz(P)        = 0
  nnz(A)        = 348503
  cones (total) = 1
    : Nonnegative = 1,  numel = 50058

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4251e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3202e-01  +6.1432e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7349e+01  1.68e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.54e-01  
  5  +4.9999e-01  +1.1143e+00  6.14e-01  1.84e-03  9.93e-01  2.95e-05  1.86e-01  3.69e-01  
  6  +4.9998e-01  +7.3191e-01  2.32e-01  6.92e-04  3.75e-01  1.60e-05  5.52e-02  7.08e-01  
  7  +4.9995e-01  +1.0178e+00  5.18e-01  1.52e-03  8.23e-01  4.40e-05  2.54e-02  9.90e-01  
  8  +4.9934e-01  +7.4177e-01  2.42e-01  3.50e-04  1.91e-01  3.11e-04  1.25e-03  9.52e-01  
  9  +4.9514e-01  +7.2997e-01  2.35e-01  5.77e-05  3.15e-02  2.19e-03  1.66e-04  8.67e-01  
 10  +4.9273e-01  +7.1835e-01  2.26e-01  3.47e-05  1.90e-02  3.06e-03  9.83e-05  4.98e-01  
 11  +4.8932e-01  +7.0233e-01  2.13e-01  2.10e-05  1.15e-02  3.92e-03  5.88e-05  5.14e-01  
 12  +4.9207e-01  +6.8020e-01  1.88e-01  1.38e-05  7.57e-03  1.05e-03  3.75e-05  9.90e-01  
 13  +4.8299e-01  +6.4601e-01  1.63e-01  7.44e-06  4.07e-03  1.36e-03  2.04e-05  5.00e-01  
 14  +4.5707e-01  +5.4463e-01  8.76e-02  2.99e-06  1.63e-03  5.40e-04  8.64e-06  7.29e-01  
 15  +4.4833e-01  +5.1446e-01  6.61e-02  2.24e-06  1.22e-03  3.32e-04  6.63e-06  3.38e-01  
 16  +4.4622e-01  +5.0736e-01  6.11e-02  2.05e-06  1.11e-03  2.21e-04  6.11e-06  3.33e-01  
 17  +4.4255e-01  +4.9484e-01  5.23e-02  1.74e-06  9.44e-04  1.69e-04  5.24e-06  2.27e-01  
 18  +4.3949e-01  +4.8438e-01  4.49e-02  1.48e-06  8.03e-04  1.20e-04  4.50e-06  2.90e-01  
 19  +4.3019e-01  +4.5249e-01  2.23e-02  7.18e-07  3.90e-04  2.17e-06  2.25e-06  9.90e-01  
 20  +4.2262e-01  +4.2733e-01  4.71e-03  1.52e-07  8.24e-05  3.50e-07  4.87e-07  8.42e-01  
 21  +4.2072e-01  +4.2107e-01  3.57e-04  1.15e-08  6.25e-06  2.58e-08  3.73e-08  9.26e-01  
 22  +4.2056e-01  +4.2057e-01  9.31e-06  3.00e-10  1.63e-07  3.46e-10  9.73e-10  9.90e-01  
 23  +4.2056e-01  +4.2056e-01  1.07e-07  3.46e-12  1.88e-09  3.99e-12  1.12e-11  9.88e-01  
 24  +4.2056e-01  +4.2056e-01  1.10e-09  3.54e-14  1.92e-11  4.03e-14  1.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 778.6053ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:36 PM: Optimal value: 4.206e-01
(CVXPY) Sep 20 03:20:36 PM: Compilation took 1.760e-01 seconds
(CVXPY) Sep 20 03:20:36 PM: Solver (including time spent in interface) took 8.159e-01 seconds
Iteration: 6, Objective: 0.4206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:36 PM: Your problem has 25060 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:37 PM: Finished problem compilation (took 1.397e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25060
  constraints   = 50060
  nnz(P)        = 0
  nnz(A)        = 348816
  cones (total) = 1
    : Nonnegative = 1,  numel = 50060

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4250e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3202e-01  +6.1431e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6022e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7348e+01  1.68e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.54e-01  
  5  +4.9999e-01  +1.1279e+00  6.28e-01  1.88e-03  1.01e+00  2.95e-05  1.86e-01  3.62e-01  
  6  +4.9998e-01  +7.3789e-01  2.38e-01  7.10e-04  3.85e-01  1.58e-05  5.62e-02  7.04e-01  
  7  +4.9997e-01  +1.0702e+00  5.70e-01  1.69e-03  9.12e-01  3.43e-05  3.27e-02  9.90e-01  
  8  +4.9971e-01  +7.3153e-01  2.32e-01  4.89e-04  2.66e-01  1.41e-04  2.18e-03  9.35e-01  
  9  +4.9295e-01  +7.1317e-01  2.20e-01  3.12e-05  1.71e-02  3.21e-03  8.77e-05  9.60e-01  
 10  +4.8946e-01  +6.9877e-01  2.09e-01  1.86e-05  1.02e-02  4.18e-03  5.17e-05  5.32e-01  
 11  +4.8282e-01  +6.5697e-01  1.74e-01  8.34e-06  4.56e-03  3.51e-03  2.29e-05  9.23e-01  
 12  +4.5739e-01  +5.5276e-01  9.54e-02  3.13e-06  1.71e-03  2.05e-03  9.00e-06  7.05e-01  
 13  +4.4900e-01  +5.2096e-01  7.20e-02  2.39e-06  1.30e-03  1.05e-03  7.07e-06  4.23e-01  
 14  +4.4687e-01  +5.1270e-01  6.58e-02  2.18e-06  1.19e-03  7.13e-04  6.50e-06  3.16e-01  
 15  +4.3852e-01  +4.8257e-01  4.40e-02  1.44e-06  7.84e-04  2.96e-04  4.41e-06  5.67e-01  
 16  +4.3709e-01  +4.7713e-01  4.00e-02  1.31e-06  7.10e-04  1.95e-04  4.00e-06  3.50e-01  
 17  +4.3101e-01  +4.5619e-01  2.52e-02  8.18e-07  4.44e-04  1.12e-04  2.56e-06  4.11e-01  
 18  +4.2828e-01  +4.4613e-01  1.78e-02  5.74e-07  3.12e-04  2.79e-05  1.81e-06  7.77e-01  
 19  +4.2337e-01  +4.2988e-01  6.51e-03  2.10e-07  1.14e-04  9.06e-06  6.73e-07  6.70e-01  
 20  +4.2322e-01  +4.2919e-01  5.97e-03  1.93e-07  1.05e-04  3.79e-06  6.20e-07  5.90e-01  
 21  +4.2314e-01  +4.2891e-01  5.77e-03  1.86e-07  1.01e-04  3.07e-06  5.99e-07  1.98e-01  
 22  +4.2179e-01  +4.2457e-01  2.78e-03  8.99e-08  4.88e-05  1.27e-06  2.90e-07  5.89e-01  
 23  +4.2064e-01  +4.2091e-01  2.68e-04  8.67e-09  4.71e-06  1.48e-08  2.82e-08  9.90e-01  
 24  +4.2052e-01  +4.2053e-01  4.98e-06  1.61e-10  8.74e-08  2.63e-10  5.23e-10  9.83e-01  
 25  +4.2052e-01  +4.2052e-01  5.89e-08  1.91e-12  1.03e-09  3.11e-12  6.19e-12  9.88e-01  
 26  +4.2052e-01  +4.2052e-01  9.51e-10  3.08e-14  1.67e-11  5.06e-14  1.00e-13  9.84e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 863.0969ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:37 PM: Optimal value: 4.205e-01
(CVXPY) Sep 20 03:20:37 PM: Compilation took 1.397e-01 seconds
(CVXPY) Sep 20 03:20:37 PM: Solver (including time spent in interface) took 9.006e-01 seconds
FULL MODEL:
  Accruacy: 0.57996
  Our objective: 0.15992

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.156)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00064)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00064)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00052)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00044)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.00072)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00052)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 15.031803846359253
Best over terms:
  Our final objective: 0.15600000000000006
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15600000000000006
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

