Command:
python test_script.py -s linear_dependence -d 4 -n 1000 --seed 73 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.37
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.37
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:14 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:14 PM: Finished problem compilation (took 6.065e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0109e+02  5.01e+02  9.51e-01  2.68e+01  1.00e+00  1.00e+00   ------   
  1  +6.0738e-01  +9.7277e+01  9.67e+01  3.26e-01  1.47e+01  4.10e-03  4.75e-01  6.68e-01  
  2  +5.4836e-01  +1.4951e+01  1.44e+01  1.21e-01  6.62e+00  8.41e-03  2.18e-01  7.50e-01  
  3  +5.0173e-01  +2.1429e+00  1.64e+00  3.34e-02  1.74e+00  1.06e-03  2.00e-01  3.86e-01  
  4  +4.9849e-01  +9.0710e-01  4.09e-01  7.60e-03  4.15e-01  6.82e-04  3.58e-02  8.96e-01  
  5  +4.6254e-01  +8.4561e-01  3.83e-01  1.03e-03  5.82e-02  7.59e-03  2.75e-03  9.35e-01  
  6  +4.3684e-01  +6.9900e-01  2.62e-01  7.01e-04  3.89e-02  3.55e-03  2.08e-03  3.21e-01  
  7  +3.9566e-01  +4.8573e-01  9.01e-02  2.38e-04  1.30e-02  2.89e-05  8.90e-04  7.50e-01  
  8  +3.7382e-01  +3.8227e-01  8.45e-03  2.06e-05  1.12e-03  1.57e-06  9.22e-05  9.14e-01  
  9  +3.7113e-01  +3.7125e-01  1.17e-04  2.67e-07  1.45e-05  2.69e-08  1.30e-06  9.90e-01  
 10  +3.7110e-01  +3.7110e-01  1.16e-06  2.66e-09  1.45e-07  2.69e-10  1.30e-08  9.90e-01  
 11  +3.7110e-01  +3.7110e-01  1.16e-08  2.66e-11  1.45e-09  2.70e-12  1.31e-10  9.90e-01  
 12  +3.7110e-01  +3.7110e-01  1.16e-10  2.66e-13  1.45e-11  2.70e-14  1.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6528ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:14 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:14 PM: Optimal value: 3.711e-01
(CVXPY) Sep 20 03:06:14 PM: Compilation took 6.065e-03 seconds
(CVXPY) Sep 20 03:06:14 PM: Solver (including time spent in interface) took 2.933e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3711
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:14 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:14 PM: Finished problem compilation (took 3.067e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4681
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9911e-01  +5.0139e+02  5.01e+02  9.52e-01  2.93e+01  1.00e+00  1.01e+00   ------   
  1  +6.0396e-01  +9.8062e+01  9.75e+01  3.32e-01  1.62e+01  4.08e-03  4.83e-01  6.63e-01  
  2  +5.4530e-01  +1.4323e+01  1.38e+01  1.17e-01  6.96e+00  8.93e-03  2.13e-01  7.80e-01  
  3  +5.0157e-01  +2.2604e+00  1.76e+00  3.58e-02  2.04e+00  1.35e-03  1.89e-01  4.52e-01  
  4  +4.9844e-01  +1.2763e+00  7.78e-01  1.40e-02  8.34e-01  1.12e-03  5.51e-02  7.98e-01  
  5  +4.6843e-01  +1.1158e+00  6.47e-01  2.24e-03  1.39e-01  6.92e-03  5.80e-03  9.22e-01  
  6  +4.5139e-01  +1.0971e+00  6.46e-01  1.30e-03  8.07e-02  9.53e-03  3.25e-03  5.55e-01  
  7  +4.4287e-01  +1.0045e+00  5.62e-01  1.14e-03  7.08e-02  6.02e-03  2.92e-03  2.65e-01  
  8  +3.9788e-01  +6.6573e-01  2.68e-01  5.32e-04  3.24e-02  5.65e-05  1.50e-03  7.64e-01  
  9  +3.7811e-01  +5.8736e-01  2.09e-01  3.92e-04  2.37e-02  7.06e-05  1.16e-03  4.38e-01  
 10  +3.2733e-01  +3.5976e-01  3.24e-02  5.97e-05  3.56e-03  1.06e-05  2.08e-04  9.17e-01  
 11  +3.1716e-01  +3.2252e-01  5.36e-03  9.90e-06  5.87e-04  3.33e-06  3.80e-05  9.90e-01  
 12  +3.1514e-01  +3.1523e-01  9.10e-05  1.68e-07  9.99e-06  5.48e-08  6.60e-07  9.83e-01  
 13  +3.1510e-01  +3.1510e-01  9.10e-07  1.68e-09  9.98e-08  5.48e-10  6.60e-09  9.90e-01  
 14  +3.1510e-01  +3.1510e-01  9.10e-09  1.68e-11  9.98e-10  5.48e-12  6.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4971ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:14 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:14 PM: Optimal value: 3.151e-01
(CVXPY) Sep 20 03:06:14 PM: Compilation took 3.067e-03 seconds
(CVXPY) Sep 20 03:06:14 PM: Solver (including time spent in interface) took 5.000e-03 seconds
FULL MODEL:
  Accruacy: 0.685
  Our objective: 0.37000000000000005

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.37)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7189154624938965
Best over terms:
  Our final objective: 0.37000000000000005
    Its accruacy: 0.685
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.37000000000000005
  Highest accruacy: 0.685
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

