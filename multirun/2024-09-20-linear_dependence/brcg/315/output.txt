Command:
python test_script.py -s linear_dependence -d 8 -n 50000 --seed 43 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14412
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.15344000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:40 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:40 PM: Finished problem compilation (took 1.050e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3196e+02  6.31e+02  1.70e-01  8.23e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6456e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0121e-01  +1.5765e+01  1.53e+01  4.26e-02  2.05e+01  4.78e-06  1.95e-01  4.48e-01  
  5  +5.0000e-01  +1.1494e+00  6.49e-01  1.94e-03  9.67e-01  2.69e-05  1.88e-01  2.98e-01  
  6  +4.9999e-01  +6.3039e-01  1.30e-01  3.89e-04  1.94e-01  8.32e-06  3.35e-02  8.36e-01  
  7  +4.9979e-01  +7.5387e-01  2.54e-01  6.47e-04  3.23e-01  1.12e-04  4.27e-03  9.21e-01  
  8  +4.9165e-01  +7.1705e-01  2.25e-01  3.14e-05  1.57e-02  4.09e-03  9.76e-05  9.77e-01  
  9  +4.7598e-01  +6.2523e-01  1.49e-01  7.85e-06  3.93e-03  7.71e-03  2.46e-05  7.68e-01  
 10  +4.6648e-01  +5.0841e-01  4.19e-02  2.26e-06  1.13e-03  7.41e-05  7.56e-06  8.38e-01  
 11  +4.5698e-01  +4.6068e-01  3.70e-03  1.80e-07  8.99e-05  4.38e-06  6.45e-07  9.21e-01  
 12  +4.5600e-01  +4.5660e-01  5.99e-04  2.73e-08  1.36e-05  6.42e-07  1.04e-07  8.54e-01  
 13  +4.5576e-01  +4.5578e-01  1.31e-05  5.45e-10  2.72e-07  8.61e-09  2.29e-09  9.87e-01  
 14  +4.5576e-01  +4.5576e-01  1.31e-07  5.44e-12  2.72e-09  8.63e-11  2.29e-11  9.90e-01  
 15  +4.5576e-01  +4.5576e-01  1.37e-09  5.68e-14  2.84e-11  2.75e-12  6.73e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 316.6802ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:41 PM: Optimal value: 4.558e-01
(CVXPY) Sep 20 03:15:41 PM: Compilation took 1.050e-01 seconds
(CVXPY) Sep 20 03:15:41 PM: Solver (including time spent in interface) took 3.457e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4558
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:41 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:41 PM: Finished problem compilation (took 1.225e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 317535
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3165e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6439e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5636e+01  1.51e+01  4.23e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0004e-01  +1.6969e+00  1.20e+00  3.59e-03  1.85e+00  2.91e-05  1.89e-01  2.05e-01  
  6  +5.0001e-01  +6.9852e-01  1.99e-01  5.92e-04  3.06e-01  5.11e-06  4.39e-02  8.17e-01  
  7  +5.0001e-01  +7.9197e-01  2.92e-01  8.69e-04  4.50e-01  7.95e-06  3.21e-02  5.86e-01  
  8  +4.9995e-01  +7.0837e-01  2.08e-01  5.50e-04  2.85e-01  3.52e-05  3.68e-03  9.09e-01  
  9  +4.9824e-01  +7.0298e-01  2.05e-01  5.03e-05  2.62e-02  8.68e-04  1.41e-04  9.62e-01  
 10  +4.9719e-01  +6.9614e-01  1.99e-01  3.04e-05  1.59e-02  1.27e-03  8.38e-05  4.77e-01  
 11  +4.9722e-01  +6.8077e-01  1.84e-01  1.93e-05  1.01e-02  9.03e-04  5.21e-05  8.11e-01  
 12  +4.9724e-01  +6.7726e-01  1.80e-01  1.59e-05  8.30e-03  6.75e-04  4.27e-05  5.16e-01  
 13  +4.9588e-01  +6.7169e-01  1.76e-01  1.16e-05  6.05e-03  7.85e-04  3.11e-05  3.68e-01  
 14  +4.9470e-01  +6.6506e-01  1.70e-01  9.61e-06  5.02e-03  5.80e-04  2.59e-05  4.72e-01  
 15  +4.9039e-01  +6.4533e-01  1.55e-01  7.24e-06  3.78e-03  3.40e-04  1.96e-05  6.04e-01  
 16  +4.6799e-01  +5.5845e-01  9.05e-02  2.97e-06  1.54e-03  1.29e-04  8.39e-06  8.24e-01  
 17  +4.6377e-01  +5.4233e-01  7.86e-02  2.71e-06  1.41e-03  9.24e-05  8.39e-06  2.15e-02  
 18  +4.5806e-01  +5.2178e-01  6.37e-02  2.21e-06  1.15e-03  6.16e-05  6.88e-06  3.18e-01  
 19  +4.5093e-01  +4.9742e-01  4.65e-02  1.60e-06  8.28e-04  3.99e-05  4.95e-06  3.74e-01  
 20  +4.4419e-01  +4.8173e-01  3.75e-02  1.19e-06  6.19e-04  2.99e-05  3.60e-06  3.95e-01  
 21  +4.2881e-01  +4.3046e-01  1.64e-03  5.17e-08  2.68e-05  2.89e-07  1.63e-07  9.70e-01  
 22  +4.2805e-01  +4.2806e-01  1.66e-05  5.21e-10  2.70e-07  2.90e-09  1.65e-09  9.90e-01  
 23  +4.2804e-01  +4.2804e-01  1.66e-07  5.21e-12  2.70e-09  3.00e-11  1.70e-11  9.90e-01  
 24  +4.2804e-01  +4.2804e-01  1.66e-09  5.22e-14  2.70e-11  3.11e-13  1.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 529.4577ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:41 PM: Optimal value: 4.280e-01
(CVXPY) Sep 20 03:15:41 PM: Compilation took 1.225e-01 seconds
(CVXPY) Sep 20 03:15:41 PM: Solver (including time spent in interface) took 5.608e-01 seconds
Iteration: 2, Objective: 0.4280
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:42 PM: Your problem has 25033 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:42 PM: Finished problem compilation (took 1.129e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25033
  constraints   = 50033
  nnz(P)        = 0
  nnz(A)        = 318574
  cones (total) = 1
    : Nonnegative = 1,  numel = 50033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3157e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6436e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5638e+01  1.51e+01  4.23e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0004e-01  +1.6983e+00  1.20e+00  3.59e-03  1.85e+00  2.92e-05  1.89e-01  2.06e-01  
  6  +5.0001e-01  +7.5816e-01  2.58e-01  7.70e-04  3.98e-01  6.58e-06  5.56e-02  7.50e-01  
  7  +5.0001e-01  +9.3101e-01  4.31e-01  1.28e-03  6.62e-01  1.07e-05  3.53e-02  8.07e-01  
  8  +4.9995e-01  +7.0548e-01  2.06e-01  5.45e-04  2.82e-01  3.17e-05  3.69e-03  9.05e-01  
  9  +4.9867e-01  +7.0172e-01  2.03e-01  6.02e-05  3.14e-02  6.58e-04  1.69e-04  9.54e-01  
 10  +4.9780e-01  +6.9545e-01  1.98e-01  3.40e-05  1.77e-02  1.01e-03  9.35e-05  5.44e-01  
 11  +4.9729e-01  +6.8053e-01  1.83e-01  1.86e-05  9.74e-03  9.24e-04  5.04e-05  8.60e-01  
 12  +4.9696e-01  +6.7891e-01  1.82e-01  1.62e-05  8.47e-03  9.39e-04  4.37e-05  2.27e-01  
 13  +4.9774e-01  +6.7592e-01  1.78e-01  1.36e-05  7.11e-03  1.89e-04  3.65e-05  9.32e-01  
 14  +4.9733e-01  +6.7423e-01  1.77e-01  1.17e-05  6.12e-03  1.56e-04  3.14e-05  4.06e-01  
 15  +4.9577e-01  +6.6779e-01  1.72e-01  9.38e-06  4.90e-03  1.40e-04  2.52e-05  4.04e-01  
 16  +4.9066e-01  +6.4652e-01  1.56e-01  6.94e-06  3.62e-03  9.37e-05  1.88e-05  5.64e-01  
 17  +4.7573e-01  +5.8938e-01  1.14e-01  4.11e-06  2.14e-03  6.10e-05  1.15e-05  5.09e-01  
 18  +4.7394e-01  +5.8306e-01  1.09e-01  4.05e-06  2.11e-03  5.47e-05  1.15e-05  2.10e-02  
 19  +4.6626e-01  +5.5922e-01  9.30e-02  3.46e-06  1.80e-03  7.22e-06  9.99e-06  7.28e-01  
 20  +4.3749e-01  +4.5849e-01  2.10e-02  6.86e-07  3.56e-04  4.07e-07  2.12e-06  8.68e-01  
 21  +4.3225e-01  +4.4189e-01  9.65e-03  3.10e-07  1.61e-04  1.83e-07  9.74e-07  5.75e-01  
 22  +4.3223e-01  +4.4183e-01  9.60e-03  3.08e-07  1.60e-04  1.81e-07  9.67e-07  5.54e-02  
 23  +4.3221e-01  +4.4176e-01  9.55e-03  3.06e-07  1.59e-04  1.78e-07  9.61e-07  7.42e-02  
 24  +4.3082e-01  +4.3736e-01  6.54e-03  2.07e-07  1.07e-04  1.13e-07  6.53e-07  7.19e-01  
 25  +4.2913e-01  +4.3206e-01  2.93e-03  9.26e-08  4.80e-05  5.01e-08  2.94e-07  6.42e-01  
 26  +4.2780e-01  +4.2788e-01  8.29e-05  2.62e-09  1.36e-06  1.36e-09  8.36e-09  9.90e-01  
 27  +4.2776e-01  +4.2776e-01  8.30e-07  2.62e-11  1.36e-08  1.36e-11  8.36e-11  9.90e-01  
 28  +4.2776e-01  +4.2776e-01  8.38e-09  2.65e-13  1.37e-10  1.36e-13  8.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 634.7929ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:42 PM: Optimal value: 4.278e-01
(CVXPY) Sep 20 03:15:42 PM: Compilation took 1.129e-01 seconds
(CVXPY) Sep 20 03:15:42 PM: Solver (including time spent in interface) took 6.667e-01 seconds
Iteration: 3, Objective: 0.4278
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:42 PM: Your problem has 25035 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:43 PM: Finished problem compilation (took 1.066e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25035
  constraints   = 50035
  nnz(P)        = 0
  nnz(A)        = 318942
  cones (total) = 1
    : Nonnegative = 1,  numel = 50035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3153e+02  6.31e+02  1.70e-01  8.52e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6435e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5639e+01  1.51e+01  4.23e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0004e-01  +1.6945e+00  1.19e+00  3.58e-03  1.84e+00  2.92e-05  1.89e-01  2.06e-01  
  6  +5.0001e-01  +7.6322e-01  2.63e-01  7.85e-04  4.06e-01  6.73e-06  5.65e-02  7.45e-01  
  7  +5.0001e-01  +8.8799e-01  3.88e-01  1.15e-03  5.95e-01  1.12e-05  3.13e-02  8.05e-01  
  8  +4.9992e-01  +6.9860e-01  1.99e-01  4.87e-04  2.53e-01  4.59e-05  2.67e-03  9.25e-01  
  9  +4.9879e-01  +6.9495e-01  1.96e-01  6.91e-05  3.60e-02  6.01e-04  1.95e-04  9.27e-01  
 10  +4.9784e-01  +6.9053e-01  1.93e-01  3.76e-05  1.97e-02  1.00e-03  1.04e-04  5.38e-01  
 11  +4.9762e-01  +6.8382e-01  1.86e-01  2.53e-05  1.32e-02  9.33e-04  6.89e-05  6.58e-01  
 12  +4.9655e-01  +6.7973e-01  1.83e-01  1.75e-05  9.14e-03  1.20e-03  4.74e-05  3.86e-01  
 13  +4.9725e-01  +6.7688e-01  1.80e-01  1.56e-05  8.15e-03  5.38e-04  4.21e-05  6.58e-01  
 14  +4.9696e-01  +6.7574e-01  1.79e-01  1.39e-05  7.24e-03  5.13e-04  3.74e-05  2.47e-01  
 15  +4.9663e-01  +6.7216e-01  1.76e-01  1.18e-05  6.16e-03  2.22e-04  3.16e-05  7.16e-01  
 16  +4.9482e-01  +6.6299e-01  1.68e-01  9.70e-06  5.07e-03  6.06e-05  2.62e-05  8.40e-01  
 17  +4.9338e-01  +6.5785e-01  1.64e-01  8.68e-06  4.53e-03  5.79e-05  2.35e-05  1.85e-01  
 18  +4.9239e-01  +6.5285e-01  1.60e-01  8.57e-06  4.47e-03  4.83e-05  2.34e-05  1.14e-01  
 19  +4.8365e-01  +6.1992e-01  1.36e-01  5.56e-06  2.90e-03  4.12e-05  1.54e-05  4.86e-01  
 20  +4.8242e-01  +6.1585e-01  1.33e-01  5.41e-06  2.82e-03  3.75e-05  1.50e-05  8.10e-02  
 21  +4.7377e-01  +5.8595e-01  1.12e-01  4.75e-06  2.47e-03  3.47e-07  1.36e-05  7.56e-01  
 22  +4.5510e-01  +5.1986e-01  6.48e-02  2.30e-06  1.19e-03  2.97e-07  6.83e-06  5.73e-01  
 23  +4.3561e-01  +4.5361e-01  1.80e-02  5.90e-07  3.06e-04  1.04e-07  1.84e-06  7.84e-01  
 24  +4.3520e-01  +4.5213e-01  1.69e-02  5.48e-07  2.84e-04  1.43e-07  1.71e-06  3.16e-01  
 25  +4.3251e-01  +4.4339e-01  1.09e-02  3.49e-07  1.81e-04  9.64e-08  1.10e-06  3.92e-01  
 26  +4.3179e-01  +4.4096e-01  9.17e-03  2.93e-07  1.52e-04  1.04e-07  9.23e-07  4.57e-01  
 27  +4.3147e-01  +4.3989e-01  8.42e-03  2.68e-07  1.39e-04  1.07e-07  8.45e-07  3.29e-01  
 28  +4.3029e-01  +4.3608e-01  5.80e-03  1.84e-07  9.54e-05  7.87e-08  5.83e-07  4.92e-01  
 29  +4.2923e-01  +4.3272e-01  3.48e-03  1.11e-07  5.74e-05  4.95e-08  3.52e-07  5.48e-01  
 30  +4.2819e-01  +4.2940e-01  1.21e-03  3.85e-08  2.00e-05  1.88e-08  1.23e-07  9.12e-01  
 31  +4.2763e-01  +4.2765e-01  1.70e-05  5.42e-10  2.81e-07  2.65e-10  1.73e-09  9.88e-01  
 32  +4.2762e-01  +4.2762e-01  1.70e-07  5.42e-12  2.81e-09  2.65e-12  1.73e-11  9.90e-01  
 33  +4.2762e-01  +4.2762e-01  1.73e-09  5.48e-14  2.84e-11  2.65e-14  1.73e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 731.348ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:43 PM: Optimal value: 4.276e-01
(CVXPY) Sep 20 03:15:43 PM: Compilation took 1.066e-01 seconds
(CVXPY) Sep 20 03:15:43 PM: Solver (including time spent in interface) took 7.618e-01 seconds
Iteration: 4, Objective: 0.4276
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:43 PM: Your problem has 25039 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:44 PM: Finished problem compilation (took 1.138e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25039
  constraints   = 50039
  nnz(P)        = 0
  nnz(A)        = 319843
  cones (total) = 1
    : Nonnegative = 1,  numel = 50039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3146e+02  6.31e+02  1.70e-01  8.52e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6433e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0120e-01  +1.5640e+01  1.51e+01  4.23e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0004e-01  +1.7105e+00  1.21e+00  3.63e-03  1.87e+00  2.92e-05  1.89e-01  2.04e-01  
  6  +5.0001e-01  +7.6937e-01  2.69e-01  8.04e-04  4.16e-01  6.84e-06  5.76e-02  7.33e-01  
  7  +5.0000e-01  +7.6480e-01  2.65e-01  7.87e-04  4.07e-01  1.18e-05  2.23e-02  7.50e-01  
  8  +4.9979e-01  +7.2641e-01  2.27e-01  4.13e-04  2.14e-01  1.10e-04  1.61e-03  9.45e-01  
  9  +4.9919e-01  +7.2336e-01  2.24e-01  1.44e-04  7.53e-02  4.01e-04  4.30e-04  7.38e-01  
 10  +4.9831e-01  +6.9719e-01  1.99e-01  5.12e-05  2.67e-02  7.71e-04  1.43e-04  8.86e-01  
 11  +4.9830e-01  +6.9074e-01  1.92e-01  3.56e-05  1.86e-02  6.91e-04  9.74e-05  6.47e-01  
 12  +4.9872e-01  +6.8898e-01  1.90e-01  3.35e-05  1.75e-02  4.59e-04  9.13e-05  4.14e-01  
 13  +4.9721e-01  +6.8167e-01  1.84e-01  1.57e-05  8.19e-03  8.19e-04  4.22e-05  6.55e-01  
 14  +4.9709e-01  +6.7716e-01  1.80e-01  1.14e-05  5.94e-03  2.48e-04  3.05e-05  9.90e-01  
 15  +4.9543e-01  +6.6950e-01  1.74e-01  9.51e-06  4.97e-03  1.72e-04  2.55e-05  4.99e-01  
 16  +4.9077e-01  +6.4966e-01  1.59e-01  7.72e-06  4.03e-03  2.87e-05  2.10e-05  8.54e-01  
 17  +4.8407e-01  +6.2414e-01  1.40e-01  5.91e-06  3.08e-03  2.45e-05  1.63e-05  3.07e-01  
 18  +4.8306e-01  +6.2076e-01  1.38e-01  5.87e-06  3.06e-03  2.24e-05  1.63e-05  4.81e-02  
 19  +4.6100e-01  +5.3905e-01  7.80e-02  2.78e-06  1.44e-03  9.27e-06  8.11e-06  6.14e-01  
 20  +4.5357e-01  +5.1412e-01  6.05e-02  2.11e-06  1.09e-03  6.42e-06  6.29e-06  2.85e-01  
 21  +4.5191e-01  +5.0946e-01  5.75e-02  1.94e-06  1.01e-03  2.18e-06  5.81e-06  7.41e-01  
 22  +4.4860e-01  +4.9875e-01  5.01e-02  1.65e-06  8.59e-04  1.13e-06  4.99e-06  7.24e-01  
 23  +4.4111e-01  +4.7327e-01  3.22e-02  1.05e-06  5.42e-04  6.12e-07  3.22e-06  6.98e-01  
 24  +4.3376e-01  +4.4836e-01  1.46e-02  4.70e-07  2.44e-04  2.55e-07  1.48e-06  8.15e-01  
 25  +4.3211e-01  +4.4275e-01  1.06e-02  3.40e-07  1.76e-04  1.81e-07  1.08e-06  5.97e-01  
 26  +4.3182e-01  +4.4169e-01  9.88e-03  3.17e-07  1.64e-04  1.65e-07  1.00e-06  3.85e-01  
 27  +4.3017e-01  +4.3620e-01  6.03e-03  1.93e-07  1.00e-04  9.81e-08  6.16e-07  9.90e-01  
 28  +4.2964e-01  +4.3454e-01  4.90e-03  1.57e-07  8.12e-05  7.94e-08  5.01e-07  3.37e-01  
 29  +4.2759e-01  +4.2803e-01  4.47e-04  1.43e-08  7.43e-06  7.09e-09  4.63e-08  9.79e-01  
 30  +4.2738e-01  +4.2739e-01  4.88e-06  1.56e-10  8.11e-08  7.71e-11  5.05e-10  9.90e-01  
 31  +4.2738e-01  +4.2738e-01  4.88e-08  1.56e-12  8.11e-10  7.71e-13  5.05e-12  9.90e-01  
 32  +4.2738e-01  +4.2738e-01  5.00e-10  1.60e-14  8.31e-12  7.78e-15  5.10e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 705.6999ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:44 PM: Optimal value: 4.274e-01
(CVXPY) Sep 20 03:15:44 PM: Compilation took 1.138e-01 seconds
(CVXPY) Sep 20 03:15:44 PM: Solver (including time spent in interface) took 7.347e-01 seconds
FULL MODEL:
  Accruacy: 0.57316
  Our objective: 0.14632

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.14412)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.00048)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.00044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.00048)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.210844278335571
Best over terms:
  Our final objective: 0.14412000000000003
    Its accruacy: 0.57206
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14412000000000003
  Highest accruacy: 0.57206
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

