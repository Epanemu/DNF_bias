Command:
python test_script.py -s linear_dependence -d 3 -n 5000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.27199999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.272
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:59 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:59 PM: Finished problem compilation (took 8.935e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5009e+03  2.50e+03  9.77e-01  5.53e+01  1.00e+00  1.00e+00   ------   
  1  +6.2004e-01  +4.6377e+02  4.63e+02  3.04e-01  2.87e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5557e-01  +7.9403e+01  7.88e+01  1.33e-01  1.50e+01  6.69e-03  2.20e-01  6.65e-01  
  3  +5.0772e-01  +1.2170e+01  1.17e+01  8.22e-02  8.86e+00  1.00e-05  2.18e-01  7.34e-02  
  4  +4.9997e-01  +1.1155e+00  6.16e-01  5.82e-03  6.44e-01  5.91e-06  1.46e-01  7.10e-01  
  5  +4.9947e-01  +7.9574e-01  2.96e-01  2.71e-03  3.01e-01  8.60e-06  2.79e-02  8.55e-01  
  6  +4.7119e-01  +8.4468e-01  3.73e-01  2.93e-04  3.31e-02  3.17e-04  8.82e-04  9.82e-01  
  7  +4.3541e-01  +5.5355e-01  1.18e-01  5.68e-05  6.38e-03  1.53e-04  1.88e-04  8.02e-01  
  8  +4.0939e-01  +4.2541e-01  1.60e-02  6.91e-06  7.72e-04  1.01e-05  2.95e-05  8.91e-01  
  9  +4.0516e-01  +4.0537e-01  2.10e-04  9.03e-08  1.01e-05  9.75e-08  3.99e-07  9.89e-01  
 10  +4.0510e-01  +4.0510e-01  2.10e-06  9.03e-10  1.01e-07  9.75e-10  3.99e-09  9.90e-01  
 11  +4.0510e-01  +4.0510e-01  2.10e-08  9.03e-12  1.01e-09  9.76e-12  4.00e-11  9.90e-01  
 12  +4.0510e-01  +4.0510e-01  2.10e-10  9.03e-14  1.01e-11  9.77e-14  4.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.129ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:59 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:59 PM: Optimal value: 4.051e-01
(CVXPY) Sep 20 03:04:59 PM: Compilation took 8.935e-03 seconds
(CVXPY) Sep 20 03:04:59 PM: Solver (including time spent in interface) took 1.584e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4051
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:59 PM: Your problem has 2512 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:59 PM: Finished problem compilation (took 9.098e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2512
  constraints   = 5012
  nnz(P)        = 0
  nnz(A)        = 18355
  cones (total) = 1
    : Nonnegative = 1,  numel = 5012

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9996e-01  +2.5014e+03  2.50e+03  9.77e-01  5.93e+01  1.00e+00  1.00e+00   ------   
  1  +6.1950e-01  +4.6460e+02  4.64e+02  3.05e-01  3.09e+01  4.25e-03  4.37e-01  6.93e-01  
  2  +5.5507e-01  +7.8875e+01  7.83e+01  1.32e-01  1.60e+01  6.77e-03  2.19e-01  6.70e-01  
  3  +5.0741e-01  +1.1854e+01  1.13e+01  8.08e-02  9.32e+00  9.92e-06  2.17e-01  8.01e-02  
  4  +5.0075e-01  +2.2863e+00  1.79e+00  1.68e-02  1.96e+00  6.67e-06  1.82e-01  3.21e-01  
  5  +5.0007e-01  +9.1899e-01  4.19e-01  3.94e-03  4.69e-01  2.74e-06  5.68e-02  7.68e-01  
  6  +4.9684e-01  +1.7104e+00  1.21e+00  3.03e-03  3.70e-01  4.32e-05  8.41e-03  9.63e-01  
  7  +4.8113e-01  +1.3199e+00  8.39e-01  5.04e-04  6.18e-02  1.53e-04  1.32e-03  8.43e-01  
  8  +4.8490e-01  +1.1617e+00  6.77e-01  3.61e-04  4.43e-02  1.06e-04  9.24e-04  5.59e-01  
  9  +4.8620e-01  +1.0224e+00  5.36e-01  2.85e-04  3.51e-02  6.27e-05  7.30e-04  5.53e-01  
 10  +4.7813e-01  +8.2938e-01  3.51e-01  1.80e-04  2.21e-02  3.02e-05  4.72e-04  9.90e-01  
 11  +4.6263e-01  +7.5968e-01  2.97e-01  1.27e-04  1.55e-02  2.89e-05  3.42e-04  3.57e-01  
 12  +4.0642e-01  +5.1343e-01  1.07e-01  3.81e-05  4.60e-03  8.68e-06  1.17e-04  9.34e-01  
 13  +3.6666e-01  +3.7225e-01  5.59e-03  2.00e-06  2.39e-04  1.53e-07  7.16e-06  9.90e-01  
 14  +3.6413e-01  +3.6419e-01  5.83e-05  2.07e-08  2.48e-06  1.52e-09  7.51e-08  9.90e-01  
 15  +3.6410e-01  +3.6410e-01  5.83e-07  2.07e-10  2.48e-08  1.52e-11  7.51e-10  9.90e-01  
 16  +3.6410e-01  +3.6410e-01  5.83e-09  2.07e-12  2.48e-10  1.52e-13  7.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.0368ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:59 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:59 PM: Optimal value: 3.641e-01
(CVXPY) Sep 20 03:04:59 PM: Compilation took 9.098e-03 seconds
(CVXPY) Sep 20 03:04:59 PM: Solver (including time spent in interface) took 2.111e-02 seconds
FULL MODEL:
  Accruacy: 0.636
  Our objective: 0.27199999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.272)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.0415081977844238
Best over terms:
  Our final objective: 0.27199999999999996
    Its accruacy: 0.636
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.27199999999999996
  Highest accruacy: 0.636
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

