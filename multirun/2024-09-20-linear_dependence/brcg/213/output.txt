Command:
python test_script.py -s linear_dependence -d 6 -n 100 --seed 34 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 6.

Computed total variation: 0.6200000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:57 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:57 PM: Finished problem compilation (took 3.823e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 463
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9719e-01  +5.0898e+01  5.04e+01  8.65e-01  8.98e+00  1.00e+00  1.04e+00   ------   
  1  +5.8828e-01  +1.0703e+01  1.01e+01  3.38e-01  5.11e+00  3.90e-03  5.44e-01  6.28e-01  
  2  +5.2380e-01  +1.5310e+00  1.01e+00  7.14e-02  1.31e+00  1.33e-02  1.83e-01  9.90e-01  
  3  +4.9957e-01  +7.2786e-01  2.28e-01  1.48e-02  2.78e-01  5.83e-03  4.72e-02  8.01e-01  
  4  +4.8442e-01  +6.8962e-01  2.05e-01  7.10e-03  1.37e-01  7.73e-03  2.31e-02  6.05e-01  
  5  +4.6675e-01  +5.7157e-01  1.05e-01  3.07e-03  5.87e-02  2.90e-03  1.12e-02  6.02e-01  
  6  +4.4606e-01  +4.9559e-01  4.95e-02  1.04e-03  1.99e-02  1.24e-03  4.36e-03  6.86e-01  
  7  +4.3293e-01  +4.4078e-01  7.86e-03  1.60e-04  3.06e-03  1.19e-05  7.39e-04  9.85e-01  
  8  +4.3014e-01  +4.3025e-01  1.12e-04  2.25e-06  4.31e-05  1.61e-07  1.06e-05  9.86e-01  
  9  +4.3010e-01  +4.3010e-01  1.12e-06  2.25e-08  4.31e-07  1.61e-09  1.06e-07  9.90e-01  
 10  +4.3010e-01  +4.3010e-01  1.12e-08  2.25e-10  4.31e-09  1.61e-11  1.06e-09  9.90e-01  
 11  +4.3010e-01  +4.3010e-01  1.12e-10  2.25e-12  4.31e-11  1.61e-13  1.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 436.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:57 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:57 PM: Optimal value: 4.301e-01
(CVXPY) Sep 20 03:08:57 PM: Compilation took 3.823e-03 seconds
(CVXPY) Sep 20 03:08:57 PM: Solver (including time spent in interface) took 9.837e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:58 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Finished problem compilation (took 3.294e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 570
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9261e-01  +5.1768e+01  5.13e+01  8.72e-01  9.13e+00  1.00e+00  1.06e+00   ------   
  1  +5.6305e-01  +1.0797e+01  1.02e+01  3.46e-01  5.06e+00  3.89e-03  5.54e-01  6.31e-01  
  2  +4.9738e-01  +1.9174e+00  1.42e+00  8.35e-02  1.57e+00  1.45e-02  2.05e-01  9.06e-01  
  3  +4.4659e-01  +1.2146e+00  7.68e-01  2.99e-02  5.81e-01  1.01e-02  8.28e-02  7.38e-01  
  4  +3.9864e-01  +6.7764e-01  2.79e-01  8.54e-03  1.62e-01  3.34e-03  3.11e-02  7.60e-01  
  5  +3.6666e-01  +4.6027e-01  9.36e-02  2.51e-03  4.71e-02  8.48e-04  1.16e-02  6.91e-01  
  6  +3.5284e-01  +3.6461e-01  1.18e-02  3.23e-04  6.02e-03  3.84e-05  1.76e-03  9.90e-01  
  7  +3.5025e-01  +3.5045e-01  1.98e-04  5.40e-06  1.00e-04  4.35e-07  3.08e-05  9.83e-01  
  8  +3.5020e-01  +3.5021e-01  4.98e-06  1.36e-07  2.53e-06  7.74e-09  8.30e-07  9.73e-01  
  9  +3.5020e-01  +3.5020e-01  4.96e-08  1.36e-09  2.52e-08  7.71e-11  8.31e-09  9.90e-01  
 10  +3.5020e-01  +3.5020e-01  4.97e-10  1.36e-11  2.53e-10  7.72e-13  8.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 390.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:58 PM: Optimal value: 3.502e-01
(CVXPY) Sep 20 03:08:58 PM: Compilation took 3.294e-03 seconds
(CVXPY) Sep 20 03:08:58 PM: Solver (including time spent in interface) took 9.573e-04 seconds
Iteration: 2, Objective: 0.3502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:58 PM: Your problem has 83 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Finished problem compilation (took 2.854e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 133
  nnz(P)        = 0
  nnz(A)        = 669
  cones (total) = 1
    : Nonnegative = 1,  numel = 133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9214e-01  +5.1789e+01  5.13e+01  8.77e-01  9.20e+00  1.00e+00  1.06e+00   ------   
  1  +5.5933e-01  +1.0801e+01  1.02e+01  3.57e-01  5.00e+00  3.88e-03  5.57e-01  6.30e-01  
  2  +4.9159e-01  +1.6748e+00  1.18e+00  6.74e-02  1.28e+00  1.55e-02  1.69e-01  9.90e-01  
  3  +4.2547e-01  +1.2041e+00  7.79e-01  2.42e-02  4.82e-01  1.43e-02  6.76e-02  7.27e-01  
  4  +3.7626e-01  +6.3915e-01  2.63e-01  6.94e-03  1.38e-01  4.72e-03  2.22e-02  7.25e-01  
  5  +3.5919e-01  +5.6318e-01  2.04e-01  4.70e-03  9.50e-02  3.67e-03  1.53e-02  3.90e-01  
  6  +3.2852e-01  +4.0077e-01  7.23e-02  1.63e-03  3.34e-02  5.95e-04  5.83e-03  8.75e-01  
  7  +3.1201e-01  +3.2907e-01  1.71e-02  3.77e-04  7.62e-03  6.90e-05  1.43e-03  9.90e-01  
  8  +3.0575e-01  +3.0655e-01  7.99e-04  1.73e-05  3.51e-04  3.13e-06  6.73e-05  9.59e-01  
  9  +3.0546e-01  +3.0548e-01  2.51e-05  5.54e-07  1.11e-05  6.91e-08  2.20e-06  9.68e-01  
 10  +3.0545e-01  +3.0545e-01  2.55e-07  5.66e-09  1.13e-07  7.02e-10  2.25e-08  9.90e-01  
 11  +3.0545e-01  +3.0545e-01  2.55e-09  5.66e-11  1.13e-09  7.03e-12  2.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 542.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:58 PM: Optimal value: 3.055e-01
(CVXPY) Sep 20 03:08:58 PM: Compilation took 2.854e-03 seconds
(CVXPY) Sep 20 03:08:58 PM: Solver (including time spent in interface) took 1.048e-03 seconds
Iteration: 3, Objective: 0.3055
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:58 PM: Your problem has 93 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Finished problem compilation (took 2.278e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 717
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8960e-01  +5.2079e+01  5.16e+01  8.81e-01  8.99e+00  1.00e+00  1.07e+00   ------   
  1  +5.3709e-01  +1.0977e+01  1.04e+01  3.65e-01  4.87e+00  3.91e-03  5.65e-01  6.23e-01  
  2  +4.6740e-01  +1.9323e+00  1.46e+00  7.50e-02  1.37e+00  1.66e-02  1.90e-01  9.41e-01  
  3  +3.9036e-01  +1.1000e+00  7.10e-01  2.27e-02  4.33e-01  9.97e-03  6.52e-02  8.06e-01  
  4  +3.4080e-01  +7.2637e-01  3.86e-01  9.78e-03  1.89e-01  5.22e-03  3.05e-02  6.38e-01  
  5  +2.9633e-01  +3.9898e-01  1.03e-01  2.58e-03  4.97e-02  1.01e-03  9.08e-03  8.00e-01  
  6  +2.8346e-01  +3.5250e-01  6.90e-02  1.56e-03  3.17e-02  6.47e-04  5.48e-03  5.62e-01  
  7  +2.6611e-01  +2.7955e-01  1.34e-02  2.98e-04  6.04e-03  5.69e-05  1.10e-03  9.90e-01  
  8  +2.6146e-01  +2.6327e-01  1.81e-03  3.98e-05  8.08e-04  7.34e-06  1.50e-04  8.67e-01  
  9  +2.6077e-01  +2.6093e-01  1.54e-04  3.40e-06  6.85e-05  7.20e-07  1.33e-05  9.90e-01  
 10  +2.6070e-01  +2.6070e-01  1.97e-06  4.37e-08  8.76e-07  8.36e-09  1.73e-07  9.87e-01  
 11  +2.6070e-01  +2.6070e-01  1.97e-08  4.37e-10  8.76e-09  8.36e-11  1.73e-09  9.90e-01  
 12  +2.6070e-01  +2.6070e-01  1.97e-10  4.37e-12  8.76e-11  8.36e-13  1.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 529.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:58 PM: Optimal value: 2.607e-01
(CVXPY) Sep 20 03:08:58 PM: Compilation took 2.278e-03 seconds
(CVXPY) Sep 20 03:08:58 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:58 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Finished problem compilation (took 2.409e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 739
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8796e-01  +5.2115e+01  5.16e+01  8.83e-01  8.93e+00  1.00e+00  1.08e+00   ------   
  1  +5.2413e-01  +1.0984e+01  1.05e+01  3.67e-01  4.82e+00  3.91e-03  5.69e-01  6.22e-01  
  2  +4.4740e-01  +2.2146e+00  1.77e+00  8.20e-02  1.47e+00  1.71e-02  2.06e-01  8.90e-01  
  3  +3.5459e-01  +1.1138e+00  7.59e-01  2.28e-02  4.25e-01  9.26e-03  6.66e-02  8.25e-01  
  4  +3.0614e-01  +6.2063e-01  3.14e-01  8.59e-03  1.60e-01  3.60e-03  2.76e-02  6.44e-01  
  5  +2.6722e-01  +3.6764e-01  1.00e-01  2.58e-03  4.92e-02  1.13e-03  9.11e-03  7.52e-01  
  6  +2.5403e-01  +3.2234e-01  6.83e-02  1.56e-03  3.15e-02  7.38e-04  5.54e-03  5.27e-01  
  7  +2.3707e-01  +2.5153e-01  1.45e-02  3.21e-04  6.50e-03  5.53e-05  1.21e-03  9.90e-01  
  8  +2.3174e-01  +2.3363e-01  1.89e-03  4.13e-05  8.40e-04  6.90e-06  1.60e-04  8.72e-01  
  9  +2.3099e-01  +2.3116e-01  1.73e-04  3.80e-06  7.66e-05  8.13e-07  1.52e-05  9.90e-01  
 10  +2.3090e-01  +2.3090e-01  2.30e-06  5.05e-08  1.01e-06  9.57e-09  2.05e-07  9.87e-01  
 11  +2.3090e-01  +2.3090e-01  2.30e-08  5.05e-10  1.01e-08  9.56e-11  2.05e-09  9.90e-01  
 12  +2.3090e-01  +2.3090e-01  2.30e-10  5.05e-12  1.01e-10  9.57e-13  2.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 581.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:58 PM: Optimal value: 2.309e-01
(CVXPY) Sep 20 03:08:58 PM: Compilation took 2.409e-03 seconds
(CVXPY) Sep 20 03:08:58 PM: Solver (including time spent in interface) took 9.987e-04 seconds
Iteration: 5, Objective: 0.2309
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:58 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Finished problem compilation (took 3.721e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 781
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8561e-01  +5.2220e+01  5.17e+01  8.87e-01  8.72e+00  1.00e+00  1.08e+00   ------   
  1  +5.0200e-01  +1.1172e+01  1.07e+01  3.74e-01  4.71e+00  3.95e-03  5.74e-01  6.13e-01  
  2  +4.1768e-01  +2.2946e+00  1.88e+00  8.38e-02  1.46e+00  1.82e-02  2.11e-01  8.85e-01  
  3  +3.2990e-01  +1.0694e+00  7.39e-01  2.34e-02  4.21e-01  8.90e-03  6.85e-02  7.93e-01  
  4  +2.8414e-01  +6.0956e-01  3.25e-01  9.88e-03  1.76e-01  3.27e-03  3.21e-02  6.01e-01  
  5  +2.5048e-01  +3.7570e-01  1.25e-01  3.49e-03  6.29e-02  1.22e-03  1.26e-02  6.99e-01  
  6  +2.3069e-01  +2.8374e-01  5.31e-02  1.34e-03  2.52e-02  4.59e-04  4.98e-03  7.30e-01  
  7  +2.2481e-01  +2.5808e-01  3.33e-02  8.67e-04  1.59e-02  1.82e-04  3.43e-03  5.28e-01  
  8  +2.1726e-01  +2.3424e-01  1.70e-02  4.05e-04  7.73e-03  9.07e-05  1.60e-03  7.16e-01  
  9  +2.1187e-01  +2.1391e-01  2.04e-03  4.77e-05  9.14e-04  9.36e-06  1.92e-04  9.90e-01  
 10  +2.1108e-01  +2.1128e-01  2.01e-04  4.71e-06  8.97e-05  8.55e-07  1.94e-05  9.06e-01  
 11  +2.1100e-01  +2.1101e-01  3.71e-06  8.77e-08  1.66e-06  1.49e-08  3.63e-07  9.81e-01  
 12  +2.1100e-01  +2.1100e-01  3.71e-08  8.77e-10  1.66e-08  1.49e-10  3.63e-09  9.90e-01  
 13  +2.1100e-01  +2.1100e-01  3.72e-10  8.78e-12  1.66e-10  1.49e-12  3.64e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 880.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:58 PM: Optimal value: 2.110e-01
(CVXPY) Sep 20 03:08:58 PM: Compilation took 3.721e-03 seconds
(CVXPY) Sep 20 03:08:58 PM: Solver (including time spent in interface) took 1.184e-03 seconds
Iteration: 6, Objective: 0.2110
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:58 PM: Your problem has 109 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Finished problem compilation (took 4.412e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 109
  constraints   = 159
  nnz(P)        = 0
  nnz(A)        = 793
  cones (total) = 1
    : Nonnegative = 1,  numel = 159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8464e-01  +5.1926e+01  5.14e+01  8.88e-01  8.70e+00  1.00e+00  1.07e+00   ------   
  1  +4.9117e-01  +1.1181e+01  1.07e+01  3.74e-01  4.68e+00  3.97e-03  5.73e-01  6.10e-01  
  2  +4.0114e-01  +2.4195e+00  2.02e+00  8.76e-02  1.49e+00  1.85e-02  2.19e-01  8.64e-01  
  3  +3.2229e-01  +1.0717e+00  7.49e-01  2.45e-02  4.31e-01  8.65e-03  7.19e-02  7.58e-01  
  4  +2.7102e-01  +5.4174e-01  2.71e-01  8.38e-03  1.46e-01  2.69e-03  2.79e-02  6.70e-01  
  5  +2.4485e-01  +4.0951e-01  1.65e-01  4.51e-03  8.04e-02  1.52e-03  1.62e-02  5.72e-01  
  6  +2.2184e-01  +3.0081e-01  7.90e-02  1.99e-03  3.60e-02  6.83e-04  7.72e-03  5.69e-01  
  7  +2.0370e-01  +2.1211e-01  8.41e-03  2.06e-04  3.73e-03  4.28e-05  8.71e-04  9.44e-01  
  8  +2.0134e-01  +2.0232e-01  9.83e-04  2.42e-05  4.35e-04  4.52e-06  1.05e-04  8.83e-01  
  9  +2.0105e-01  +2.0117e-01  1.27e-04  3.12e-06  5.56e-05  5.20e-07  1.44e-05  9.11e-01  
 10  +2.0100e-01  +2.0100e-01  1.78e-06  4.38e-08  7.77e-07  6.48e-09  2.05e-07  9.86e-01  
 11  +2.0100e-01  +2.0100e-01  1.78e-08  4.38e-10  7.77e-09  6.48e-11  2.06e-09  9.90e-01  
 12  +2.0100e-01  +2.0100e-01  1.79e-10  4.39e-12  7.79e-11  6.49e-13  2.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 651.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:58 PM: Optimal value: 2.010e-01
(CVXPY) Sep 20 03:08:58 PM: Compilation took 4.412e-03 seconds
(CVXPY) Sep 20 03:08:58 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.2010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:58 PM: Your problem has 115 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Finished problem compilation (took 3.859e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 165
  nnz(P)        = 0
  nnz(A)        = 817
  cones (total) = 1
    : Nonnegative = 1,  numel = 165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8391e-01  +5.1923e+01  5.14e+01  8.90e-01  8.58e+00  1.00e+00  1.08e+00   ------   
  1  +4.7869e-01  +1.1341e+01  1.09e+01  3.78e-01  4.63e+00  4.01e-03  5.77e-01  6.02e-01  
  2  +3.8512e-01  +2.4609e+00  2.08e+00  9.04e-02  1.49e+00  1.91e-02  2.29e-01  8.55e-01  
  3  +3.0924e-01  +1.1376e+00  8.28e-01  2.77e-02  4.72e-01  9.62e-03  8.20e-02  7.41e-01  
  4  +2.5666e-01  +5.1484e-01  2.58e-01  8.20e-03  1.38e-01  2.47e-03  2.79e-02  7.23e-01  
  5  +2.2617e-01  +3.4969e-01  1.24e-01  3.48e-03  6.04e-02  9.96e-04  1.30e-02  7.51e-01  
  6  +2.0326e-01  +2.4733e-01  4.41e-02  1.12e-03  1.99e-02  3.05e-04  4.56e-03  7.23e-01  
  7  +1.9205e-01  +1.9509e-01  3.04e-03  7.61e-05  1.34e-03  1.56e-05  3.27e-04  9.46e-01  
  8  +1.9120e-01  +1.9148e-01  2.84e-04  7.20e-06  1.26e-04  1.21e-06  3.20e-05  9.04e-01  
  9  +1.9110e-01  +1.9112e-01  1.16e-05  2.95e-07  5.15e-06  4.23e-08  1.37e-06  9.81e-01  
 10  +1.9110e-01  +1.9110e-01  1.16e-07  2.97e-09  5.17e-08  4.23e-10  1.37e-08  9.90e-01  
 11  +1.9110e-01  +1.9110e-01  1.16e-09  2.97e-11  5.17e-10  4.23e-12  1.37e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 643µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:58 PM: Optimal value: 1.911e-01
(CVXPY) Sep 20 03:08:58 PM: Compilation took 3.859e-03 seconds
(CVXPY) Sep 20 03:08:58 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.1911
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:58 PM: Your problem has 118 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Finished problem compilation (took 3.961e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 118
  constraints   = 168
  nnz(P)        = 0
  nnz(A)        = 829
  cones (total) = 1
    : Nonnegative = 1,  numel = 168

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8372e-01  +5.1940e+01  5.15e+01  8.91e-01  8.53e+00  1.00e+00  1.08e+00   ------   
  1  +4.7416e-01  +1.1335e+01  1.09e+01  3.78e-01  4.57e+00  4.02e-03  5.76e-01  6.03e-01  
  2  +3.7560e-01  +2.3282e+00  1.95e+00  8.37e-02  1.38e+00  1.92e-02  2.16e-01  8.81e-01  
  3  +3.0562e-01  +1.1987e+00  8.93e-01  3.00e-02  5.07e-01  1.04e-02  8.87e-02  6.86e-01  
  4  +2.5444e-01  +5.1790e-01  2.63e-01  8.46e-03  1.42e-01  2.60e-03  2.87e-02  7.26e-01  
  5  +2.2860e-01  +3.8593e-01  1.57e-01  4.54e-03  7.80e-02  1.34e-03  1.65e-02  6.26e-01  
  6  +2.1255e-01  +3.0344e-01  9.09e-02  2.47e-03  4.27e-02  7.55e-04  9.53e-03  4.54e-01  
  7  +1.9406e-01  +2.0347e-01  9.41e-03  2.49e-04  4.29e-03  3.35e-05  1.04e-03  9.79e-01  
  8  +1.9150e-01  +1.9271e-01  1.21e-03  3.22e-05  5.52e-04  3.87e-06  1.40e-04  8.72e-01  
  9  +1.9122e-01  +1.9160e-01  3.76e-04  1.01e-05  1.72e-04  1.23e-06  4.56e-05  7.45e-01  
 10  +1.9110e-01  +1.9112e-01  1.12e-05  3.00e-07  5.11e-06  3.15e-08  1.39e-06  9.75e-01  
 11  +1.9110e-01  +1.9110e-01  1.12e-07  3.02e-09  5.14e-08  3.17e-10  1.41e-08  9.90e-01  
 12  +1.9110e-01  +1.9110e-01  1.12e-09  3.03e-11  5.15e-10  3.17e-12  1.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 770.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:58 PM: Optimal value: 1.911e-01
(CVXPY) Sep 20 03:08:58 PM: Compilation took 3.961e-03 seconds
(CVXPY) Sep 20 03:08:58 PM: Solver (including time spent in interface) took 7.656e-04 seconds
Iteration: 9, Objective: 0.1911
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:58 PM: Your problem has 120 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:58 PM: Finished problem compilation (took 3.051e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 120
  constraints   = 170
  nnz(P)        = 0
  nnz(A)        = 841
  cones (total) = 1
    : Nonnegative = 1,  numel = 170

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8365e-01  +5.1945e+01  5.15e+01  8.91e-01  8.51e+00  1.00e+00  1.08e+00   ------   
  1  +4.7331e-01  +1.1329e+01  1.09e+01  3.79e-01  4.55e+00  4.02e-03  5.76e-01  6.03e-01  
  2  +3.7246e-01  +2.3392e+00  1.97e+00  8.34e-02  1.37e+00  1.92e-02  2.17e-01  8.78e-01  
  3  +3.0265e-01  +1.2130e+00  9.10e-01  3.04e-02  5.11e-01  1.05e-02  9.05e-02  6.71e-01  
  4  +2.5243e-01  +5.1916e-01  2.67e-01  8.66e-03  1.44e-01  2.58e-03  2.97e-02  7.21e-01  
  5  +2.2213e-01  +3.5746e-01  1.35e-01  3.93e-03  6.64e-02  1.04e-03  1.49e-02  7.24e-01  
  6  +2.0422e-01  +2.6073e-01  5.65e-02  1.55e-03  2.63e-02  3.80e-04  6.33e-03  6.62e-01  
  7  +1.9193e-01  +1.9480e-01  2.87e-03  7.78e-05  1.31e-03  1.08e-05  3.39e-04  9.72e-01  
  8  +1.9140e-01  +1.9258e-01  1.18e-03  3.18e-05  5.36e-04  4.20e-06  1.50e-04  7.92e-01  
  9  +1.9104e-01  +1.9116e-01  1.12e-04  3.02e-06  5.05e-05  3.07e-07  1.55e-05  9.02e-01  
 10  +1.9100e-01  +1.9101e-01  3.60e-06  9.61e-08  1.60e-06  1.08e-08  5.16e-07  9.90e-01  
 11  +1.9100e-01  +1.9100e-01  3.60e-08  9.61e-10  1.60e-08  1.08e-10  5.16e-09  9.90e-01  
 12  +1.9100e-01  +1.9100e-01  3.60e-10  9.61e-12  1.60e-10  1.08e-12  5.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 848.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:58 PM: Optimal value: 1.910e-01
(CVXPY) Sep 20 03:08:58 PM: Compilation took 3.051e-03 seconds
(CVXPY) Sep 20 03:08:58 PM: Solver (including time spent in interface) took 1.529e-03 seconds
FULL MODEL:
  Accruacy: 0.79
  Our objective: 0.58

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1)                                  <-- (term's our objective: 0.1)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1)                       <-- (term's our objective: 0.16)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1)                       <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.3052778244018555
Best over terms:
  Our final objective: 0.16000000000000006
    Its accruacy: 0.58
    Its hamming distance: 7
  Shortest hamming distance: 2
    Its our objective: 0.04000000000000005
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

