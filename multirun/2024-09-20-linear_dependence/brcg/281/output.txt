Command:
python test_script.py -s linear_dependence -d 8 -n 10 --seed 56 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 8.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:15 PM: Your problem has 22 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:15 PM: Finished problem compilation (took 2.692e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 22
  constraints   = 27
  nnz(P)        = 0
  nnz(A)        = 72
  cones (total) = 1
    : Nonnegative = 1,  numel = 27

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5774e-01  +6.1291e+00  5.67e+00  7.60e-01  2.61e+00  1.00e+00  1.29e+00   ------   
  1  +4.4776e-01  +1.2501e+00  8.02e-01  2.89e-01  1.17e+00  3.59e-03  6.14e-01  7.10e-01  
  2  +2.9860e-01  +4.8024e-01  1.82e-01  6.96e-02  3.10e-01  8.87e-03  2.09e-01  7.71e-01  
  3  +2.1653e-01  +2.7422e-01  5.77e-02  1.49e-02  7.67e-02  3.81e-03  6.27e-02  8.80e-01  
  4  +2.0060e-01  +2.0192e-01  1.32e-03  3.49e-04  1.79e-03  8.09e-05  1.58e-03  9.75e-01  
  5  +2.0020e-01  +2.0022e-01  1.32e-05  3.49e-06  1.79e-05  8.08e-07  1.58e-05  9.90e-01  
  6  +2.0020e-01  +2.0020e-01  1.32e-07  3.49e-08  1.79e-07  8.08e-09  1.58e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  1.32e-09  3.49e-10  1.79e-09  8.08e-11  1.58e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 112.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:15 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:15 PM: Optimal value: 2.002e-01
(CVXPY) Sep 20 03:13:15 PM: Compilation took 2.692e-03 seconds
(CVXPY) Sep 20 03:13:15 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:15 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:15 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 104
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.4196e-01  +6.2716e+00  5.93e+00  7.93e-01  2.76e+00  1.00e+00  1.30e+00   ------   
  1  +1.4375e-01  +1.0057e+00  8.62e-01  3.01e-01  1.10e+00  4.10e-03  5.52e-01  7.14e-01  
  2  +5.8151e-02  +2.0857e-01  1.50e-01  6.35e-02  2.50e-01  8.40e-03  1.56e-01  8.22e-01  
  3  +1.2454e-02  +5.2492e-02  4.00e-02  1.39e-02  6.19e-02  2.65e-03  4.05e-02  7.98e-01  
  4  +3.7982e-04  +9.3608e-04  5.56e-04  1.95e-04  8.71e-04  3.11e-05  5.86e-04  9.87e-01  
  5  +2.1577e-04  +2.4745e-04  3.17e-05  1.31e-05  5.36e-05  2.82e-07  4.01e-05  9.32e-01  
  6  +2.0022e-04  +2.0072e-04  5.01e-07  2.22e-07  8.53e-07  1.40e-08  7.36e-07  9.85e-01  
  7  +2.0000e-04  +2.0001e-04  5.01e-09  2.22e-09  8.52e-09  1.40e-10  7.36e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 90.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:15 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:15 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 03:13:15 PM: Compilation took 2.999e-03 seconds
(CVXPY) Sep 20 03:13:15 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:16 PM: Your problem has 36 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:16 PM: Finished problem compilation (took 3.024e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 41
  nnz(P)        = 0
  nnz(A)        = 118
  cones (total) = 1
    : Nonnegative = 1,  numel = 41

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.1091e-01  +6.1950e+00  5.88e+00  8.04e-01  2.83e+00  1.00e+00  1.28e+00   ------   
  1  +7.5164e-02  +9.6560e-01  8.90e-01  3.20e-01  1.13e+00  4.22e-03  5.50e-01  6.97e-01  
  2  +2.4620e-02  +1.4202e-01  1.17e-01  5.40e-02  2.09e-01  9.62e-03  1.28e-01  8.99e-01  
  3  +7.5875e-04  +4.4181e-03  3.66e-03  1.67e-03  6.61e-03  2.99e-04  4.35e-03  9.90e-01  
  4  +2.5015e-04  +3.9057e-04  1.40e-04  6.70e-05  2.61e-04  8.78e-06  1.74e-04  9.60e-01  
  5  +2.0841e-04  +2.3661e-04  2.82e-05  1.36e-05  5.17e-05  1.25e-06  4.21e-05  8.97e-01  
  6  +2.0033e-04  +2.0100e-04  6.73e-07  3.15e-07  1.22e-06  2.39e-08  1.07e-06  9.76e-01  
  7  +2.0000e-04  +2.0001e-04  6.72e-09  3.14e-09  1.21e-08  2.39e-10  1.07e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  6.72e-11  3.14e-11  1.21e-10  2.39e-12  1.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 125.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:16 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 03:13:16 PM: Compilation took 3.024e-03 seconds
(CVXPY) Sep 20 03:13:16 PM: Solver (including time spent in interface) took 9.830e-04 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x4 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.6)
 OR (x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8343539237976074
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 6
  Shortest hamming distance: 5
    Its our objective: 0.4
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

