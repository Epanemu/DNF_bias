Command:
python test_script.py -s linear_dependence -d 2 -n 50000 --seed 73 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.59356
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 2.

Computed total variation: 0.5935600000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:14 PM: Your problem has 25005 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:14 PM: Finished problem compilation (took 5.833e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25005
  constraints   = 50005
  nnz(P)        = 0
  nnz(A)        = 125005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5002e+04  2.50e+04  9.92e-01  1.64e+02  1.00e+00  1.00e+00   ------   
  1  +6.3754e-01  +4.3679e+03  4.37e+03  2.69e-01  7.76e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5916e-01  +8.1477e+02  8.14e+02  1.36e-01  4.52e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0598e-01  +8.5366e+01  8.49e+01  1.11e-01  3.62e+01  5.55e-06  2.14e-01  5.74e-02  
  4  +5.0015e-01  +5.7211e+00  5.22e+00  1.54e-02  4.94e+00  2.44e-06  1.92e-01  3.15e-01  
  5  +4.9969e-01  +2.1659e+00  1.67e+00  4.46e-03  1.48e+00  4.11e-06  2.31e-02  9.90e-01  
  6  +4.8410e-01  +2.3166e+00  1.83e+00  3.37e-04  1.22e-01  1.48e-04  6.95e-04  9.78e-01  
  7  +4.0664e-01  +1.6770e+00  1.27e+00  5.16e-05  1.86e-02  5.82e-04  1.07e-04  8.51e-01  
  8  +2.9206e-01  +8.1770e-01  5.26e-01  3.14e-05  1.06e-02  2.77e-06  9.27e-05  2.93e-01  
  9  +2.1887e-01  +3.0350e-01  8.46e-02  5.23e-06  1.72e-03  1.63e-08  2.53e-05  8.11e-01  
 10  +2.0390e-01  +2.0714e-01  3.24e-03  2.02e-07  6.61e-05  5.12e-09  1.25e-06  9.64e-01  
 11  +2.0333e-01  +2.0336e-01  3.25e-05  2.02e-09  6.61e-07  5.13e-11  1.27e-08  9.90e-01  
 12  +2.0332e-01  +2.0332e-01  3.25e-07  2.02e-11  6.61e-09  5.13e-13  1.27e-10  9.90e-01  
 13  +2.0332e-01  +2.0332e-01  3.25e-09  2.02e-13  6.61e-11  5.15e-15  1.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 182.0192ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:14 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:14 PM: Optimal value: 2.033e-01
(CVXPY) Sep 20 03:04:14 PM: Compilation took 5.833e-02 seconds
(CVXPY) Sep 20 03:04:14 PM: Solver (including time spent in interface) took 2.005e-01 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.79678
  Our objective: 0.59356

IF 
    (x0 = 0) <-- (term's our objective: 0.59356)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.240830421447754
Best over terms:
  Our final objective: 0.59356
    Its accruacy: 0.79678
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.59356
  Highest accruacy: 0.79678
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

