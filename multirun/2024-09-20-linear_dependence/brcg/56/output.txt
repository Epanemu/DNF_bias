Command:
python test_script.py -s linear_dependence -d 2 -n 500 --seed 56 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6000000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 2.

Computed total variation: 0.6000000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:42 PM: Your problem has 255 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:42 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 255
  constraints   = 505
  nnz(P)        = 0
  nnz(A)        = 1255
  cones (total) = 1
    : Nonnegative = 1,  numel = 505

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9673e-01  +2.5208e+02  2.52e+02  9.27e-01  1.58e+01  1.00e+00  1.02e+00   ------   
  1  +6.3150e-01  +4.4036e+01  4.34e+01  2.51e-01  7.33e+00  4.49e-03  3.92e-01  7.28e-01  
  2  +5.4100e-01  +6.5184e+00  5.98e+00  7.95e-02  2.71e+00  6.08e-03  1.55e-01  7.64e-01  
  3  +5.3012e-01  +6.1274e+00  5.60e+00  4.48e-02  1.58e+00  1.21e-02  8.77e-02  4.53e-01  
  4  +5.0664e-01  +5.5178e+00  5.01e+00  3.33e-02  1.18e+00  1.03e-02  6.66e-02  4.46e-01  
  5  +4.5163e-01  +4.2365e+00  3.78e+00  1.26e-02  4.57e-01  1.43e-02  2.59e-02  6.21e-01  
  6  +3.4802e-01  +1.6566e+00  1.31e+00  6.65e-03  2.28e-01  7.84e-05  1.64e-02  6.05e-01  
  7  +2.4123e-01  +4.6676e-01  2.26e-01  1.30e-03  4.17e-02  1.51e-04  4.94e-03  8.67e-01  
  8  +2.0280e-01  +2.2169e-01  1.89e-02  1.15e-04  3.59e-03  3.58e-05  7.39e-04  9.60e-01  
  9  +2.0014e-01  +2.0037e-01  2.33e-04  1.41e-06  4.42e-05  3.58e-07  9.55e-06  9.87e-01  
 10  +2.0010e-01  +2.0010e-01  2.33e-06  1.41e-08  4.42e-07  3.58e-09  9.55e-08  9.90e-01  
 11  +2.0010e-01  +2.0010e-01  2.33e-08  1.41e-10  4.42e-09  3.58e-11  9.55e-10  9.90e-01  
 12  +2.0010e-01  +2.0010e-01  2.33e-10  1.41e-12  4.42e-11  3.58e-13  9.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 974.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:42 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 03:03:42 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:42 PM: Your problem has 256 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:42 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 256
  constraints   = 506
  nnz(P)        = 0
  nnz(A)        = 1368
  cones (total) = 1
    : Nonnegative = 1,  numel = 506

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9624e-01  +2.5228e+02  2.52e+02  9.27e-01  1.65e+01  1.00e+00  1.02e+00   ------   
  1  +6.2895e-01  +4.4361e+01  4.37e+01  2.55e-01  7.70e+00  4.46e-03  3.99e-01  7.25e-01  
  2  +5.4045e-01  +6.4818e+00  5.94e+00  7.85e-02  2.79e+00  6.29e-03  1.54e-01  7.75e-01  
  3  +5.3318e-01  +6.4761e+00  5.94e+00  4.80e-02  1.76e+00  1.18e-02  9.40e-02  4.10e-01  
  4  +5.0771e-01  +5.7358e+00  5.23e+00  3.58e-02  1.32e+00  1.00e-02  7.20e-02  4.30e-01  
  5  +4.5682e-01  +4.2693e+00  3.81e+00  1.46e-02  5.47e-01  1.22e-02  3.01e-02  5.92e-01  
  6  +3.8120e-01  +2.6093e+00  2.23e+00  9.33e-03  3.42e-01  6.13e-03  2.10e-02  4.47e-01  
  7  +3.0351e-01  +1.2260e+00  9.23e-01  5.09e-03  1.76e-01  1.00e-03  1.45e-02  7.02e-01  
  8  +2.2810e-01  +4.0001e-01  1.72e-01  1.01e-03  3.35e-02  6.18e-06  4.37e-03  7.64e-01  
  9  +2.0155e-01  +2.1243e-01  1.09e-02  6.63e-05  2.16e-03  4.36e-06  4.34e-04  9.54e-01  
 10  +2.0012e-01  +2.0024e-01  1.19e-04  7.25e-07  2.36e-05  4.64e-08  4.94e-06  9.89e-01  
 11  +2.0010e-01  +2.0010e-01  1.19e-06  7.25e-09  2.36e-07  4.64e-10  4.94e-08  9.90e-01  
 12  +2.0010e-01  +2.0010e-01  1.19e-08  7.25e-11  2.36e-09  4.64e-12  4.94e-10  9.90e-01  
 13  +2.0010e-01  +2.0010e-01  1.19e-10  7.25e-13  2.36e-11  4.64e-14  4.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0479ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:42 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 03:03:42 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:42 PM: Solver (including time spent in interface) took 5.157e-03 seconds
Iteration: 2, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:42 PM: Your problem has 257 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:42 PM: Finished problem compilation (took 4.550e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 257
  constraints   = 507
  nnz(P)        = 0
  nnz(A)        = 1460
  cones (total) = 1
    : Nonnegative = 1,  numel = 507

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9614e-01  +2.5227e+02  2.52e+02  9.28e-01  1.69e+01  1.00e+00  1.02e+00   ------   
  1  +6.1995e-01  +4.5395e+01  4.48e+01  2.71e-01  8.28e+00  4.34e-03  4.19e-01  7.13e-01  
  2  +5.4164e-01  +6.7001e+00  6.16e+00  8.15e-02  2.97e+00  6.75e-03  1.59e-01  7.86e-01  
  3  +5.3146e-01  +6.3279e+00  5.80e+00  5.01e-02  1.89e+00  1.21e-02  9.80e-02  4.03e-01  
  4  +5.0171e-01  +5.5604e+00  5.06e+00  3.37e-02  1.28e+00  1.09e-02  6.78e-02  5.21e-01  
  5  +4.4361e-01  +3.9573e+00  3.51e+00  1.29e-02  4.98e-01  1.28e-02  2.68e-02  6.15e-01  
  6  +3.9120e-01  +2.9171e+00  2.53e+00  9.78e-03  3.72e-01  8.27e-03  2.14e-02  2.77e-01  
  7  +2.8298e-01  +8.6754e-01  5.85e-01  3.25e-03  1.15e-01  4.18e-05  9.83e-03  8.38e-01  
  8  +2.0810e-01  +2.5197e-01  4.39e-02  2.67e-04  8.99e-03  3.32e-05  1.51e-03  9.82e-01  
  9  +2.0031e-01  +2.0151e-01  1.20e-03  7.31e-06  2.45e-04  9.25e-07  4.93e-05  9.79e-01  
 10  +2.0010e-01  +2.0011e-01  1.27e-05  7.75e-08  2.60e-06  9.48e-09  5.26e-07  9.90e-01  
 11  +2.0010e-01  +2.0010e-01  1.27e-07  7.75e-10  2.60e-08  9.48e-11  5.26e-09  9.90e-01  
 12  +2.0010e-01  +2.0010e-01  1.27e-09  7.75e-12  2.60e-10  9.49e-13  5.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 958.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:42 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 03:03:42 PM: Compilation took 4.550e-03 seconds
(CVXPY) Sep 20 03:03:42 PM: Solver (including time spent in interface) took 2.601e-03 seconds
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6000000000000001

IF 
    (x0 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7793045043945312
Best over terms:
  Our final objective: 0.6000000000000001
    Its accruacy: 0.8
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6000000000000001
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

