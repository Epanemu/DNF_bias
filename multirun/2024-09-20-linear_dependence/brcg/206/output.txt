Command:
python test_script.py -s linear_dependence -d 6 -n 50 --seed 56 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 6.

Computed total variation: 0.8400000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:40 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Finished problem compilation (took 4.673e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 238
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9347e-01  +2.6024e+01  2.55e+01  8.25e-01  6.13e+00  1.00e+00  1.08e+00   ------   
  1  +5.8208e-01  +5.5616e+00  4.98e+00  3.25e-01  3.38e+00  3.87e-03  5.64e-01  6.31e-01  
  2  +5.0706e-01  +1.0535e+00  5.46e-01  6.26e-02  7.82e-01  1.45e-02  1.78e-01  9.90e-01  
  3  +4.7078e-01  +8.2563e-01  3.55e-01  2.27e-02  2.96e-01  1.36e-02  7.45e-02  6.77e-01  
  4  +4.3251e-01  +5.4675e-01  1.14e-01  5.89e-03  7.69e-02  4.05e-03  2.28e-02  7.18e-01  
  5  +4.0714e-01  +4.3153e-01  2.44e-02  1.04e-03  1.36e-02  6.06e-04  5.13e-03  8.58e-01  
  6  +4.0024e-01  +4.0065e-01  4.15e-04  1.77e-05  2.31e-04  5.86e-06  9.17e-05  9.90e-01  
  7  +4.0010e-01  +4.0011e-01  4.15e-06  1.77e-07  2.30e-06  5.86e-08  9.18e-07  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  4.15e-08  1.77e-09  2.30e-08  5.86e-10  9.18e-09  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  4.15e-10  1.77e-11  2.30e-10  5.86e-12  9.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 210.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:40 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 03:08:40 PM: Compilation took 4.673e-03 seconds
(CVXPY) Sep 20 03:08:40 PM: Solver (including time spent in interface) took 9.992e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:40 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Finished problem compilation (took 1.995e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 315
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7573e-01  +2.6864e+01  2.64e+01  8.39e-01  6.37e+00  1.00e+00  1.12e+00   ------   
  1  +5.0176e-01  +5.6582e+00  5.16e+00  3.34e-01  3.40e+00  3.92e-03  5.81e-01  6.32e-01  
  2  +3.9969e-01  +1.4067e+00  1.01e+00  7.74e-02  9.90e-01  1.71e-02  2.01e-01  8.62e-01  
  3  +2.7287e-01  +7.4555e-01  4.73e-01  2.31e-02  3.01e-01  1.02e-02  7.15e-02  7.54e-01  
  4  +2.1504e-01  +3.2752e-01  1.12e-01  5.50e-03  7.10e-02  2.11e-03  1.93e-02  7.58e-01  
  5  +1.9703e-01  +2.5307e-01  5.60e-02  2.64e-03  3.48e-02  8.79e-04  9.53e-03  6.19e-01  
  6  +1.8129e-01  +1.8463e-01  3.34e-03  1.53e-04  2.05e-03  3.92e-05  5.78e-04  9.50e-01  
  7  +1.8046e-01  +1.8063e-01  1.71e-04  7.98e-06  1.06e-04  1.30e-06  3.11e-05  9.46e-01  
  8  +1.8040e-01  +1.8041e-01  5.31e-06  2.53e-07  3.29e-06  3.25e-08  1.08e-06  9.75e-01  
  9  +1.8040e-01  +1.8040e-01  5.29e-08  2.52e-09  3.28e-08  3.24e-10  1.09e-08  9.90e-01  
 10  +1.8040e-01  +1.8040e-01  5.31e-10  2.53e-11  3.29e-10  3.25e-12  1.09e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 287.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:40 PM: Optimal value: 1.804e-01
(CVXPY) Sep 20 03:08:40 PM: Compilation took 1.995e-03 seconds
(CVXPY) Sep 20 03:08:40 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Iteration: 2, Objective: 0.1804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:40 PM: Your problem has 58 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Finished problem compilation (took 3.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 58
  constraints   = 83
  nnz(P)        = 0
  nnz(A)        = 350
  cones (total) = 1
    : Nonnegative = 1,  numel = 83

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6830e-01  +2.7139e+01  2.67e+01  8.48e-01  6.14e+00  1.00e+00  1.13e+00   ------   
  1  +4.4350e-01  +5.7020e+00  5.26e+00  3.36e-01  3.16e+00  4.04e-03  5.74e-01  6.32e-01  
  2  +3.0220e-01  +1.2337e+00  9.31e-01  6.17e-02  7.60e-01  1.73e-02  1.62e-01  9.04e-01  
  3  +2.0992e-01  +5.6627e-01  3.56e-01  1.92e-02  2.39e-01  7.30e-03  5.78e-02  7.07e-01  
  4  +1.6182e-01  +2.8896e-01  1.27e-01  6.12e-03  7.94e-02  2.95e-03  1.94e-02  6.98e-01  
  5  +1.3467e-01  +2.1543e-01  8.08e-02  3.24e-03  4.57e-02  1.66e-03  1.03e-02  6.71e-01  
  6  +1.0579e-01  +1.1816e-01  1.24e-02  4.51e-04  6.52e-03  2.32e-04  1.50e-03  8.75e-01  
  7  +1.0094e-01  +1.0122e-01  2.78e-04  1.04e-05  1.48e-04  2.35e-06  3.50e-05  9.77e-01  
  8  +1.0080e-01  +1.0081e-01  8.64e-06  3.49e-07  4.81e-06  7.12e-08  1.25e-06  9.66e-01  
  9  +1.0080e-01  +1.0080e-01  8.64e-08  3.50e-09  4.81e-08  7.12e-10  1.26e-08  9.90e-01  
 10  +1.0080e-01  +1.0080e-01  8.65e-10  3.51e-11  4.82e-10  7.12e-12  1.26e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 334µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:40 PM: Optimal value: 1.008e-01
(CVXPY) Sep 20 03:08:40 PM: Compilation took 3.003e-03 seconds
(CVXPY) Sep 20 03:08:40 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 3, Objective: 0.1008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:40 PM: Your problem has 68 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 68
  constraints   = 93
  nnz(P)        = 0
  nnz(A)        = 383
  cones (total) = 1
    : Nonnegative = 1,  numel = 93

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6336e-01  +2.7320e+01  2.69e+01  8.55e-01  5.94e+00  1.00e+00  1.13e+00   ------   
  1  +4.0172e-01  +5.8724e+00  5.47e+00  3.47e-01  3.07e+00  4.12e-03  5.82e-01  6.17e-01  
  2  +2.4490e-01  +1.2504e+00  1.01e+00  6.56e-02  7.62e-01  1.87e-02  1.72e-01  8.97e-01  
  3  +1.6759e-01  +4.9910e-01  3.32e-01  1.92e-02  2.28e-01  6.26e-03  5.73e-02  7.53e-01  
  4  +1.2532e-01  +2.3945e-01  1.14e-01  5.80e-03  7.25e-02  2.46e-03  1.82e-02  7.42e-01  
  5  +1.0630e-01  +1.7768e-01  7.14e-02  3.18e-03  4.19e-02  1.08e-03  1.03e-02  7.38e-01  
  6  +8.4077e-02  +9.3566e-02  9.49e-03  3.92e-04  5.25e-03  1.47e-04  1.31e-03  8.80e-01  
  7  +8.1008e-02  +8.1286e-02  2.78e-04  1.19e-05  1.57e-04  1.49e-06  4.05e-05  9.69e-01  
  8  +8.0907e-02  +8.0929e-02  2.17e-05  9.91e-07  1.27e-05  1.44e-07  3.56e-06  9.18e-01  
  9  +8.0900e-02  +8.0900e-02  2.21e-07  1.02e-08  1.30e-07  1.47e-09  3.66e-08  9.90e-01  
 10  +8.0900e-02  +8.0900e-02  2.21e-09  1.02e-10  1.30e-09  1.47e-11  3.66e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 292.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:40 PM: Optimal value: 8.090e-02
(CVXPY) Sep 20 03:08:40 PM: Compilation took 2.999e-03 seconds
(CVXPY) Sep 20 03:08:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.0809
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:40 PM: Your problem has 69 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Finished problem compilation (took 2.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 94
  nnz(P)        = 0
  nnz(A)        = 390
  cones (total) = 1
    : Nonnegative = 1,  numel = 94

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6051e-01  +2.7328e+01  2.69e+01  8.56e-01  5.95e+00  1.00e+00  1.14e+00   ------   
  1  +3.8979e-01  +5.9658e+00  5.58e+00  3.53e-01  3.10e+00  4.16e-03  5.88e-01  6.08e-01  
  2  +2.3252e-01  +1.2815e+00  1.05e+00  6.88e-02  7.89e-01  1.96e-02  1.79e-01  8.94e-01  
  3  +1.5265e-01  +5.2795e-01  3.75e-01  2.19e-02  2.55e-01  7.24e-03  6.56e-02  7.26e-01  
  4  +1.0639e-01  +2.3622e-01  1.30e-01  6.94e-03  8.16e-02  2.46e-03  2.35e-02  6.89e-01  
  5  +8.7296e-02  +1.1998e-01  3.27e-02  1.70e-03  1.99e-02  5.82e-04  6.07e-03  7.92e-01  
  6  +8.0932e-02  +8.1756e-02  8.24e-04  4.32e-05  5.04e-04  8.79e-06  1.59e-04  9.75e-01  
  7  +8.0733e-02  +8.0824e-02  9.07e-05  5.07e-06  5.64e-05  5.58e-07  2.27e-05  8.79e-01  
  8  +8.0701e-02  +8.0703e-02  2.00e-06  1.12e-07  1.24e-06  1.31e-08  5.46e-07  9.80e-01  
  9  +8.0700e-02  +8.0700e-02  2.00e-08  1.12e-09  1.24e-08  1.31e-10  5.46e-09  9.90e-01  
 10  +8.0700e-02  +8.0700e-02  2.00e-10  1.12e-11  1.24e-10  1.31e-12  5.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 310.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:40 PM: Optimal value: 8.070e-02
(CVXPY) Sep 20 03:08:40 PM: Compilation took 2.003e-03 seconds
(CVXPY) Sep 20 03:08:40 PM: Solver (including time spent in interface) took 9.971e-04 seconds
Iteration: 5, Objective: 0.0807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:40 PM: Your problem has 71 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:40 PM: Finished problem compilation (took 2.520e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 96
  nnz(P)        = 0
  nnz(A)        = 398
  cones (total) = 1
    : Nonnegative = 1,  numel = 96

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6019e-01  +2.7267e+01  2.68e+01  8.58e-01  5.92e+00  1.00e+00  1.13e+00   ------   
  1  +3.8438e-01  +5.9577e+00  5.57e+00  3.53e-01  3.06e+00  4.17e-03  5.86e-01  6.07e-01  
  2  +2.2152e-01  +1.3148e+00  1.09e+00  7.02e-02  7.94e-01  1.95e-02  1.83e-01  8.80e-01  
  3  +1.4313e-01  +5.1546e-01  3.72e-01  2.15e-02  2.47e-01  7.09e-03  6.54e-02  7.20e-01  
  4  +9.8651e-02  +1.9226e-01  9.36e-02  5.04e-03  5.81e-02  1.80e-03  1.73e-02  7.59e-01  
  5  +8.1803e-02  +8.6719e-02  4.92e-03  2.64e-04  3.02e-03  7.62e-05  9.53e-04  9.51e-01  
  6  +8.0922e-02  +8.1682e-02  7.60e-04  4.24e-05  4.76e-04  9.02e-06  1.61e-04  8.38e-01  
  7  +8.0734e-02  +8.0829e-02  9.54e-05  5.42e-06  5.96e-05  5.79e-07  2.50e-05  9.55e-01  
  8  +8.0701e-02  +8.0703e-02  2.50e-06  1.42e-07  1.56e-06  1.32e-08  6.98e-07  9.73e-01  
  9  +8.0700e-02  +8.0700e-02  2.50e-08  1.42e-09  1.55e-08  1.31e-10  6.99e-09  9.90e-01  
 10  +8.0700e-02  +8.0700e-02  2.50e-10  1.42e-11  1.55e-10  1.32e-12  6.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 321.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:40 PM: Optimal value: 8.070e-02
(CVXPY) Sep 20 03:08:40 PM: Compilation took 2.520e-03 seconds
(CVXPY) Sep 20 03:08:40 PM: Solver (including time spent in interface) took 1.015e-03 seconds
FULL MODEL:
  Accruacy: 0.92
  Our objective: 0.84

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 1)            <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x3 = 0 AND x5 = 0)                       <-- (term's our objective: 0.24)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 1 AND x5 = 0)                       <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1)            <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1)            <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.9454281330108643
Best over terms:
  Our final objective: 0.24
    Its accruacy: 0.62
    Its hamming distance: 4
  Shortest hamming distance: 1
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.62
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

