Command:
python test_script.py -s linear_dependence -d 6 -n 50 --seed 21 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 6.

Computed total variation: 0.6799999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:47 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:47 PM: Finished problem compilation (took 4.970e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 238
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9039e-01  +2.6647e+01  2.62e+01  8.26e-01  6.16e+00  1.00e+00  1.11e+00   ------   
  1  +5.7072e-01  +5.5616e+00  4.99e+00  3.20e-01  3.37e+00  3.83e-03  5.73e-01  6.42e-01  
  2  +4.7584e-01  +1.3036e+00  8.28e-01  7.61e-02  9.57e-01  1.48e-02  2.05e-01  8.75e-01  
  3  +4.0093e-01  +7.7553e-01  3.75e-01  2.34e-02  3.02e-01  7.39e-03  7.63e-02  7.01e-01  
  4  +3.6940e-01  +4.7574e-01  1.06e-01  6.76e-03  8.48e-02  1.93e-03  2.68e-02  6.77e-01  
  5  +3.5304e-01  +4.1011e-01  5.71e-02  2.71e-03  3.45e-02  9.72e-04  1.34e-02  6.46e-01  
  6  +3.4165e-01  +3.4834e-01  6.70e-03  3.05e-04  3.88e-03  1.06e-04  1.68e-03  8.78e-01  
  7  +3.4012e-01  +3.4018e-01  6.88e-05  3.13e-06  3.98e-05  1.06e-06  1.75e-05  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  6.88e-07  3.13e-08  3.98e-07  1.06e-08  1.75e-07  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  6.88e-09  3.13e-10  3.98e-09  1.06e-10  1.75e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:47 PM: Optimal value: 3.401e-01
(CVXPY) Sep 20 03:08:47 PM: Compilation took 4.970e-03 seconds
(CVXPY) Sep 20 03:08:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:47 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:47 PM: Finished problem compilation (took 3.317e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 303
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7911e-01  +2.6790e+01  2.63e+01  8.38e-01  6.23e+00  1.00e+00  1.12e+00   ------   
  1  +5.0947e-01  +5.5803e+00  5.07e+00  3.29e-01  3.30e+00  3.89e-03  5.75e-01  6.39e-01  
  2  +3.7235e-01  +1.3437e+00  9.71e-01  6.55e-02  8.15e-01  1.71e-02  1.78e-01  8.86e-01  
  3  +2.7679e-01  +6.1851e-01  3.42e-01  1.81e-02  2.24e-01  6.18e-03  5.86e-02  7.56e-01  
  4  +2.3208e-01  +3.7735e-01  1.45e-01  7.17e-03  8.82e-02  2.27e-03  2.60e-02  6.65e-01  
  5  +2.0341e-01  +2.1534e-01  1.19e-02  6.03e-04  7.31e-03  1.17e-04  2.44e-03  9.29e-01  
  6  +2.0049e-01  +2.0111e-01  6.14e-04  3.13e-05  3.77e-04  5.19e-06  1.31e-04  9.47e-01  
  7  +2.0032e-01  +2.0036e-01  4.51e-05  2.19e-06  2.62e-05  2.19e-07  1.10e-05  9.82e-01  
  8  +2.0030e-01  +2.0030e-01  5.98e-07  2.89e-08  3.47e-07  2.88e-09  1.53e-07  9.87e-01  
  9  +2.0030e-01  +2.0030e-01  5.97e-09  2.89e-10  3.47e-09  2.88e-11  1.53e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 236µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:47 PM: Optimal value: 2.003e-01
(CVXPY) Sep 20 03:08:47 PM: Compilation took 3.317e-03 seconds
(CVXPY) Sep 20 03:08:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:47 PM: Your problem has 58 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:47 PM: Finished problem compilation (took 3.254e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 58
  constraints   = 83
  nnz(P)        = 0
  nnz(A)        = 344
  cones (total) = 1
    : Nonnegative = 1,  numel = 83

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7311e-01  +2.6964e+01  2.65e+01  8.48e-01  6.05e+00  1.00e+00  1.12e+00   ------   
  1  +4.7183e-01  +5.6262e+00  5.15e+00  3.37e-01  3.15e+00  3.94e-03  5.75e-01  6.35e-01  
  2  +3.0833e-01  +1.4906e+00  1.18e+00  7.32e-02  8.69e-01  1.72e-02  1.93e-01  8.36e-01  
  3  +2.2864e-01  +5.9308e-01  3.64e-01  2.02e-02  2.41e-01  5.63e-03  6.31e-02  7.60e-01  
  4  +1.8438e-01  +3.0813e-01  1.24e-01  6.71e-03  7.97e-02  1.69e-03  2.30e-02  7.21e-01  
  5  +1.6252e-01  +1.7075e-01  8.23e-03  4.54e-04  5.33e-03  6.88e-05  1.66e-03  9.69e-01  
  6  +1.6073e-01  +1.6174e-01  1.01e-03  5.62e-05  6.57e-04  7.33e-06  2.13e-04  8.74e-01  
  7  +1.6047e-01  +1.6067e-01  2.06e-04  1.12e-05  1.31e-04  1.49e-06  4.97e-05  9.15e-01  
  8  +1.6040e-01  +1.6041e-01  9.50e-06  5.18e-07  6.03e-06  5.30e-08  2.46e-06  9.52e-01  
  9  +1.6040e-01  +1.6040e-01  9.53e-08  5.20e-09  6.05e-08  5.30e-10  2.49e-08  9.90e-01  
 10  +1.6040e-01  +1.6040e-01  9.54e-10  5.21e-11  6.05e-10  5.30e-12  2.49e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 279.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:47 PM: Optimal value: 1.604e-01
(CVXPY) Sep 20 03:08:47 PM: Compilation took 3.254e-03 seconds
(CVXPY) Sep 20 03:08:47 PM: Solver (including time spent in interface) took 7.472e-04 seconds
Iteration: 3, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:47 PM: Your problem has 59 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:47 PM: Finished problem compilation (took 1.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 84
  nnz(P)        = 0
  nnz(A)        = 347
  cones (total) = 1
    : Nonnegative = 1,  numel = 84

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7189e-01  +2.7137e+01  2.67e+01  8.49e-01  6.03e+00  1.00e+00  1.13e+00   ------   
  1  +4.6104e-01  +5.6207e+00  5.16e+00  3.34e-01  3.11e+00  3.95e-03  5.74e-01  6.39e-01  
  2  +2.8690e-01  +1.5405e+00  1.25e+00  7.48e-02  8.81e-01  1.62e-02  1.97e-01  8.12e-01  
  3  +2.2583e-01  +5.9628e-01  3.70e-01  2.14e-02  2.54e-01  5.75e-03  6.55e-02  7.28e-01  
  4  +1.8139e-01  +2.9451e-01  1.13e-01  6.32e-03  7.48e-02  1.51e-03  2.14e-02  7.74e-01  
  5  +1.6197e-01  +1.6829e-01  6.32e-03  3.56e-04  4.18e-03  5.44e-05  1.29e-03  9.71e-01  
  6  +1.6071e-01  +1.6163e-01  9.28e-04  5.27e-05  6.15e-04  6.84e-06  2.00e-04  8.49e-01  
  7  +1.6046e-01  +1.6063e-01  1.74e-04  9.53e-06  1.11e-04  1.24e-06  4.31e-05  9.23e-01  
  8  +1.6040e-01  +1.6041e-01  6.93e-06  3.78e-07  4.40e-06  3.88e-08  1.83e-06  9.59e-01  
  9  +1.6040e-01  +1.6040e-01  6.93e-08  3.79e-09  4.40e-08  3.87e-10  1.84e-08  9.90e-01  
 10  +1.6040e-01  +1.6040e-01  6.94e-10  3.79e-11  4.40e-10  3.87e-12  1.84e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 291.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:47 PM: Optimal value: 1.604e-01
(CVXPY) Sep 20 03:08:47 PM: Compilation took 1.999e-03 seconds
(CVXPY) Sep 20 03:08:47 PM: Solver (including time spent in interface) took 1.207e-03 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.68

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1)            <-- (term's our objective: 0.12)
 OR (x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8230853080749512
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

