Command:
python test_script.py -s linear_dependence -d 5 -n 500 --seed 21 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.33199999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.376
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:37 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Finished problem compilation (took 6.603e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +2.5120e+02  2.51e+02  9.33e-01  2.01e+01  1.00e+00  1.01e+00   ------   
  1  +5.9803e-01  +5.0516e+01  4.99e+01  3.43e-01  1.15e+01  3.99e-03  5.06e-01  6.46e-01  
  2  +5.4087e-01  +7.0437e+00  6.50e+00  1.10e-01  4.54e+00  1.03e-02  2.16e-01  8.31e-01  
  3  +4.9950e-01  +1.5179e+00  1.02e+00  2.97e-02  1.18e+00  2.93e-03  1.67e-01  7.03e-01  
  4  +4.8844e-01  +9.3953e-01  4.51e-01  7.95e-03  3.33e-01  4.80e-03  2.57e-02  8.93e-01  
  5  +4.4404e-01  +7.6628e-01  3.22e-01  1.74e-03  7.38e-02  1.31e-02  5.13e-03  8.16e-01  
  6  +4.1173e-01  +5.7682e-01  1.65e-01  7.89e-04  3.26e-02  3.59e-03  2.89e-03  5.55e-01  
  7  +3.9724e-01  +5.0047e-01  1.03e-01  5.15e-04  2.12e-02  3.24e-05  2.05e-03  9.40e-01  
  8  +3.7269e-01  +3.8245e-01  9.76e-03  4.33e-05  1.78e-03  3.08e-06  2.05e-04  9.21e-01  
  9  +3.7013e-01  +3.7024e-01  1.13e-04  4.99e-07  2.05e-05  3.49e-08  2.41e-06  9.88e-01  
 10  +3.7010e-01  +3.7010e-01  1.13e-06  4.99e-09  2.04e-07  3.49e-10  2.41e-08  9.90e-01  
 11  +3.7010e-01  +3.7010e-01  1.13e-08  4.99e-11  2.04e-09  3.49e-12  2.41e-10  9.90e-01  
 12  +3.7010e-01  +3.7010e-01  1.13e-10  4.99e-13  2.04e-11  3.49e-14  2.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4397ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:37 PM: Optimal value: 3.701e-01
(CVXPY) Sep 20 03:07:37 PM: Compilation took 6.603e-03 seconds
(CVXPY) Sep 20 03:07:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:37 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Finished problem compilation (took 2.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2548
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9856e-01  +2.5136e+02  2.51e+02  9.34e-01  2.14e+01  1.00e+00  1.01e+00   ------   
  1  +5.9412e-01  +5.0787e+01  5.02e+01  3.49e-01  1.22e+01  3.98e-03  5.12e-01  6.43e-01  
  2  +5.3695e-01  +6.6295e+00  6.09e+00  1.04e-01  4.49e+00  1.09e-02  2.05e-01  8.71e-01  
  3  +4.9966e-01  +1.7362e+00  1.24e+00  3.54e-02  1.50e+00  4.12e-03  1.44e-01  7.62e-01  
  4  +4.6985e-01  +1.4458e+00  9.76e-01  8.11e-03  3.67e-01  1.34e-02  2.19e-02  9.49e-01  
  5  +4.4184e-01  +1.0878e+00  6.46e-01  3.86e-03  1.73e-01  9.72e-03  1.11e-02  5.49e-01  
  6  +4.2173e-01  +8.6019e-01  4.38e-01  2.34e-03  1.04e-01  4.57e-03  7.09e-03  5.37e-01  
  7  +4.0506e-01  +6.9558e-01  2.91e-01  1.44e-03  6.38e-02  1.95e-03  4.49e-03  6.11e-01  
  8  +3.8057e-01  +5.3642e-01  1.56e-01  6.03e-04  2.65e-02  1.26e-03  1.93e-03  6.04e-01  
  9  +3.6930e-01  +4.7113e-01  1.02e-01  4.28e-04  1.87e-02  1.11e-05  1.44e-03  8.69e-01  
 10  +3.4906e-01  +3.9395e-01  4.49e-02  1.62e-04  7.08e-03  7.73e-06  5.77e-04  6.22e-01  
 11  +3.3660e-01  +3.4302e-01  6.42e-03  2.35e-05  1.02e-03  7.77e-06  9.08e-05  9.90e-01  
 12  +3.3415e-01  +3.3428e-01  1.29e-04  4.71e-07  2.04e-05  1.47e-07  1.86e-06  9.90e-01  
 13  +3.3410e-01  +3.3410e-01  1.29e-06  4.71e-09  2.04e-07  1.47e-09  1.86e-08  9.90e-01  
 14  +3.3410e-01  +3.3410e-01  1.29e-08  4.71e-11  2.04e-09  1.47e-11  1.86e-10  9.90e-01  
 15  +3.3410e-01  +3.3410e-01  1.29e-10  4.71e-13  2.04e-11  1.47e-13  1.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.225ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:37 PM: Optimal value: 3.341e-01
(CVXPY) Sep 20 03:07:37 PM: Compilation took 2.991e-03 seconds
(CVXPY) Sep 20 03:07:37 PM: Solver (including time spent in interface) took 2.467e-03 seconds
Iteration: 2, Objective: 0.3341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:37 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Finished problem compilation (took 2.987e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2910
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9839e-01  +2.5158e+02  2.51e+02  9.35e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +5.9112e-01  +5.1180e+01  5.06e+01  3.57e-01  1.25e+01  3.95e-03  5.21e-01  6.38e-01  
  2  +5.3561e-01  +6.5237e+00  5.99e+00  1.03e-01  4.51e+00  1.14e-02  2.05e-01  8.88e-01  
  3  +4.9805e-01  +1.5772e+00  1.08e+00  3.12e-02  1.35e+00  4.08e-03  1.28e-01  9.09e-01  
  4  +4.5397e-01  +1.5470e+00  1.09e+00  7.58e-03  3.50e-01  1.84e-02  2.04e-02  9.06e-01  
  5  +4.2744e-01  +1.1200e+00  6.93e-01  3.72e-03  1.71e-01  1.21e-02  1.05e-02  5.38e-01  
  6  +4.1101e-01  +9.6923e-01  5.58e-01  2.49e-03  1.14e-01  8.87e-03  7.07e-03  4.56e-01  
  7  +3.8162e-01  +6.2693e-01  2.45e-01  1.16e-03  5.21e-02  7.50e-05  3.73e-03  8.23e-01  
  8  +3.5626e-01  +4.7675e-01  1.20e-01  5.36e-04  2.39e-02  4.48e-05  1.89e-03  5.44e-01  
  9  +3.3738e-01  +3.7647e-01  3.91e-02  1.66e-04  7.33e-03  1.76e-05  6.41e-04  7.02e-01  
 10  +3.2788e-01  +3.3302e-01  5.13e-03  2.13e-05  9.39e-04  2.87e-06  8.90e-05  9.02e-01  
 11  +3.2727e-01  +3.3035e-01  3.08e-03  1.22e-05  5.38e-04  2.39e-06  5.06e-05  6.87e-01  
 12  +3.2647e-01  +3.2717e-01  7.03e-04  2.77e-06  1.22e-04  6.98e-07  1.16e-05  9.90e-01  
 13  +3.2620e-01  +3.2621e-01  7.93e-06  3.12e-08  1.38e-06  7.61e-09  1.31e-07  9.90e-01  
 14  +3.2620e-01  +3.2620e-01  7.93e-08  3.12e-10  1.38e-08  7.61e-11  1.31e-09  9.90e-01  
 15  +3.2620e-01  +3.2620e-01  7.93e-10  3.12e-12  1.38e-10  7.63e-13  1.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3952ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:37 PM: Optimal value: 3.262e-01
(CVXPY) Sep 20 03:07:37 PM: Compilation took 2.987e-03 seconds
(CVXPY) Sep 20 03:07:37 PM: Solver (including time spent in interface) took 3.007e-03 seconds
Iteration: 3, Objective: 0.3262
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:37 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Finished problem compilation (took 4.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 2985
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9835e-01  +2.5174e+02  2.51e+02  9.35e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.8981e-01  +5.1361e+01  5.08e+01  3.59e-01  1.26e+01  3.94e-03  5.25e-01  6.36e-01  
  2  +5.3470e-01  +6.4391e+00  5.90e+00  1.02e-01  4.48e+00  1.16e-02  2.05e-01  8.98e-01  
  3  +4.9778e-01  +1.5575e+00  1.06e+00  3.05e-02  1.33e+00  4.13e-03  1.22e-01  9.46e-01  
  4  +4.5250e-01  +1.5685e+00  1.12e+00  7.53e-03  3.49e-01  1.89e-02  2.02e-02  8.97e-01  
  5  +4.3775e-01  +1.4164e+00  9.79e-01  4.99e-03  2.31e-01  1.53e-02  1.34e-02  5.10e-01  
  6  +4.0213e-01  +8.1802e-01  4.16e-01  2.02e-03  9.20e-02  1.48e-04  6.01e-03  8.11e-01  
  7  +3.4752e-01  +4.5206e-01  1.05e-01  4.88e-04  2.17e-02  3.92e-05  1.80e-03  7.84e-01  
  8  +3.3128e-01  +3.7259e-01  4.13e-02  1.92e-04  8.47e-03  1.74e-05  8.18e-04  5.96e-01  
  9  +3.2278e-01  +3.3119e-01  8.42e-03  3.90e-05  1.72e-03  3.76e-06  1.87e-04  7.99e-01  
 10  +3.2054e-01  +3.2068e-01  1.37e-04  6.32e-07  2.78e-05  5.99e-08  3.19e-06  9.87e-01  
 11  +3.2050e-01  +3.2050e-01  1.37e-06  6.31e-09  2.78e-07  5.99e-10  3.19e-08  9.90e-01  
 12  +3.2050e-01  +3.2050e-01  1.37e-08  6.31e-11  2.78e-09  5.99e-12  3.19e-10  9.90e-01  
 13  +3.2050e-01  +3.2050e-01  1.37e-10  6.31e-13  2.78e-11  5.99e-14  3.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3357ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:37 PM: Optimal value: 3.205e-01
(CVXPY) Sep 20 03:07:37 PM: Compilation took 4.004e-03 seconds
(CVXPY) Sep 20 03:07:37 PM: Solver (including time spent in interface) took 3.016e-03 seconds
Iteration: 4, Objective: 0.3205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:37 PM: Your problem has 288 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Finished problem compilation (took 3.501e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 288
  constraints   = 538
  nnz(P)        = 0
  nnz(A)        = 3089
  cones (total) = 1
    : Nonnegative = 1,  numel = 538

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9821e-01  +2.5163e+02  2.51e+02  9.36e-01  2.20e+01  1.00e+00  1.02e+00   ------   
  1  +5.8787e-01  +5.1450e+01  5.09e+01  3.62e-01  1.26e+01  3.94e-03  5.27e-01  6.34e-01  
  2  +5.3371e-01  +6.3386e+00  5.80e+00  1.01e-01  4.38e+00  1.18e-02  2.02e-01  9.09e-01  
  3  +4.9814e-01  +1.6609e+00  1.16e+00  3.26e-02  1.42e+00  4.57e-03  1.18e-01  9.22e-01  
  4  +4.5703e-01  +1.6538e+00  1.20e+00  8.17e-03  3.79e-01  1.84e-02  2.15e-02  8.86e-01  
  5  +4.2650e-01  +1.3196e+00  8.93e-01  4.41e-03  2.04e-01  1.59e-02  1.20e-02  4.83e-01  
  6  +3.9538e-01  +8.8461e-01  4.89e-01  2.33e-03  1.06e-01  5.54e-03  7.00e-03  5.22e-01  
  7  +3.4853e-01  +4.6898e-01  1.20e-01  5.78e-04  2.57e-02  4.57e-05  2.11e-03  8.55e-01  
  8  +3.3480e-01  +3.9672e-01  6.19e-02  2.93e-04  1.29e-02  2.70e-05  1.17e-03  5.03e-01  
  9  +3.2760e-01  +3.6187e-01  3.43e-02  1.58e-04  6.98e-03  1.67e-05  6.74e-04  4.85e-01  
 10  +3.1980e-01  +3.2411e-01  4.31e-03  1.95e-05  8.57e-04  2.32e-06  9.10e-05  8.93e-01  
 11  +3.1869e-01  +3.1898e-01  2.90e-04  1.31e-06  5.77e-05  2.19e-07  6.24e-06  9.90e-01  
 12  +3.1860e-01  +3.1860e-01  2.94e-06  1.33e-08  5.83e-07  2.22e-09  6.32e-08  9.90e-01  
 13  +3.1860e-01  +3.1860e-01  2.94e-08  1.33e-10  5.83e-09  2.22e-11  6.32e-10  9.90e-01  
 14  +3.1860e-01  +3.1860e-01  2.94e-10  1.33e-12  5.83e-11  2.22e-13  6.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0704ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:37 PM: Optimal value: 3.186e-01
(CVXPY) Sep 20 03:07:37 PM: Compilation took 3.501e-03 seconds
(CVXPY) Sep 20 03:07:37 PM: Solver (including time spent in interface) took 2.007e-03 seconds
Iteration: 5, Objective: 0.3186
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:37 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:37 PM: Finished problem compilation (took 4.303e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3098
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9819e-01  +2.5165e+02  2.51e+02  9.36e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.8710e-01  +5.1504e+01  5.09e+01  3.62e-01  1.26e+01  3.94e-03  5.28e-01  6.34e-01  
  2  +5.3285e-01  +6.2427e+00  5.71e+00  9.89e-02  4.33e+00  1.19e-02  2.00e-01  9.17e-01  
  3  +4.9789e-01  +1.7141e+00  1.22e+00  3.29e-02  1.44e+00  5.09e-03  1.11e-01  9.33e-01  
  4  +4.6202e-01  +1.7794e+00  1.32e+00  9.86e-03  4.56e-01  1.72e-02  2.61e-02  8.47e-01  
  5  +4.3055e-01  +1.4250e+00  9.94e-01  5.04e-03  2.33e-01  1.59e-02  1.37e-02  5.30e-01  
  6  +3.9874e-01  +8.8251e-01  4.84e-01  2.43e-03  1.10e-01  1.28e-03  7.33e-03  7.17e-01  
  7  +3.4718e-01  +4.7932e-01  1.32e-01  6.44e-04  2.86e-02  1.19e-04  2.39e-03  7.80e-01  
  8  +3.3125e-01  +3.8947e-01  5.82e-02  2.79e-04  1.23e-02  5.40e-05  1.16e-03  5.90e-01  
  9  +3.2559e-01  +3.6171e-01  3.61e-02  1.70e-04  7.49e-03  3.32e-05  7.46e-04  4.28e-01  
 10  +3.1794e-01  +3.2273e-01  4.79e-03  2.24e-05  9.85e-04  3.99e-06  1.08e-04  8.88e-01  
 11  +3.1672e-01  +3.1678e-01  6.21e-05  2.91e-07  1.28e-05  4.83e-08  1.44e-06  9.87e-01  
 12  +3.1670e-01  +3.1670e-01  6.21e-07  2.90e-09  1.28e-07  4.82e-10  1.44e-08  9.90e-01  
 13  +3.1670e-01  +3.1670e-01  6.21e-09  2.90e-11  1.28e-09  4.82e-12  1.44e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2316ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:37 PM: Optimal value: 3.167e-01
(CVXPY) Sep 20 03:07:37 PM: Compilation took 4.303e-03 seconds
(CVXPY) Sep 20 03:07:37 PM: Solver (including time spent in interface) took 2.001e-03 seconds
FULL MODEL:
  Accruacy: 0.682
  Our objective: 0.36400000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x4 = 0)                       <-- (term's our objective: 0.172)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1)                       <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.563131332397461
Best over terms:
  Our final objective: 0.17199999999999996
    Its accruacy: 0.586
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.15999999999999998
  Highest accruacy: 0.586
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

