Command:
python test_script.py -s linear_dependence -d 8 -n 5000 --seed 21 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1452
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 8.

Computed total variation: 0.2348
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:00 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Finished problem compilation (took 8.114e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 27517
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3494e+02  5.34e+02  4.16e-01  4.97e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3467e-01  +6.3337e+01  6.28e+01  1.58e-01  2.42e+01  1.47e-02  2.65e-01  9.02e-01  
  3  +5.0893e-01  +1.6254e+01  1.57e+01  1.05e-01  1.58e+01  3.90e-05  2.51e-01  2.31e-01  
  4  +5.0045e-01  +1.0943e+00  5.94e-01  5.76e-03  8.97e-01  6.44e-06  1.04e-01  9.90e-01  
  5  +5.0012e-01  +6.8004e-01  1.80e-01  1.71e-03  2.68e-01  7.72e-06  2.69e-02  8.22e-01  
  6  +4.9979e-01  +1.0187e+00  5.19e-01  9.58e-04  1.52e-01  1.76e-04  2.94e-03  9.65e-01  
  7  +4.9784e-01  +8.8660e-01  3.89e-01  2.76e-04  4.38e-02  3.78e-04  8.22e-04  7.72e-01  
  8  +4.8939e-01  +6.3867e-01  1.49e-01  8.62e-05  1.37e-02  3.21e-05  2.68e-04  9.67e-01  
  9  +4.7868e-01  +5.9053e-01  1.12e-01  5.66e-05  8.94e-03  2.08e-05  1.89e-04  3.87e-01  
 10  +4.7326e-01  +5.6718e-01  9.39e-02  5.06e-05  7.99e-03  1.14e-05  1.80e-04  3.46e-01  
 11  +4.6024e-01  +5.1129e-01  5.10e-02  2.41e-05  3.79e-03  5.00e-06  9.34e-05  5.98e-01  
 12  +4.4974e-01  +4.6736e-01  1.76e-02  7.60e-06  1.20e-03  1.51e-06  3.15e-05  7.79e-01  
 13  +4.4760e-01  +4.5811e-01  1.05e-02  4.44e-06  6.99e-04  9.73e-07  1.85e-05  9.90e-01  
 14  +4.4423e-01  +4.4461e-01  3.80e-04  1.60e-07  2.52e-05  3.37e-08  6.91e-07  9.77e-01  
 15  +4.4410e-01  +4.4411e-01  3.82e-06  1.60e-09  2.53e-07  3.38e-10  6.94e-09  9.90e-01  
 16  +4.4410e-01  +4.4410e-01  3.82e-08  1.60e-11  2.53e-09  3.38e-12  6.94e-11  9.90e-01  
 17  +4.4410e-01  +4.4410e-01  3.82e-10  1.60e-13  2.53e-11  3.38e-14  6.95e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.3808ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:00 PM: Optimal value: 4.441e-01
(CVXPY) Sep 20 03:15:00 PM: Compilation took 8.114e-03 seconds
(CVXPY) Sep 20 03:15:00 PM: Solver (including time spent in interface) took 3.409e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:00 PM: Your problem has 2527 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Finished problem compilation (took 8.525e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2527
  constraints   = 5027
  nnz(P)        = 0
  nnz(A)        = 31878
  cones (total) = 1
    : Nonnegative = 1,  numel = 5027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5013e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8400e-01  +5.3521e+02  5.35e+02  4.16e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3438e-01  +6.3076e+01  6.25e+01  1.58e-01  2.50e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0878e-01  +1.6100e+01  1.56e+01  1.05e-01  1.62e+01  3.91e-05  2.50e-01  2.40e-01  
  4  +5.0066e-01  +1.4974e+00  9.97e-01  9.68e-03  1.55e+00  7.69e-06  1.32e-01  7.79e-01  
  5  +5.0023e-01  +9.6137e-01  4.61e-01  4.40e-03  7.10e-01  7.46e-06  7.06e-02  6.47e-01  
  6  +5.0006e-01  +8.4353e-01  3.43e-01  3.09e-03  5.01e-01  1.16e-05  2.31e-02  7.47e-01  
  7  +4.9609e-01  +8.1696e-01  3.21e-01  3.31e-04  5.47e-02  2.10e-04  9.67e-04  9.80e-01  
  8  +4.8649e-01  +6.8551e-01  1.99e-01  1.22e-04  2.00e-02  1.96e-04  3.56e-04  7.37e-01  
  9  +4.8554e-01  +6.8151e-01  1.96e-01  1.02e-04  1.68e-02  1.34e-04  2.97e-04  4.86e-01  
 10  +4.8515e-01  +6.7858e-01  1.93e-01  1.02e-04  1.68e-02  1.28e-04  2.96e-04  2.23e-02  
 11  +4.7937e-01  +6.4526e-01  1.66e-01  7.16e-05  1.18e-02  1.08e-04  2.06e-04  4.15e-01  
 12  +4.7775e-01  +6.3505e-01  1.57e-01  6.66e-05  1.09e-02  7.92e-05  1.91e-04  2.79e-01  
 13  +4.6877e-01  +5.9071e-01  1.22e-01  4.68e-05  7.67e-03  5.22e-05  1.36e-04  4.15e-01  
 14  +4.6627e-01  +5.7643e-01  1.10e-01  4.24e-05  6.94e-03  2.84e-05  1.23e-04  4.79e-01  
 15  +4.6244e-01  +5.6010e-01  9.77e-02  3.50e-05  5.73e-03  1.60e-05  1.02e-04  6.87e-01  
 16  +4.3849e-01  +4.6525e-01  2.68e-02  8.68e-06  1.42e-03  2.95e-06  2.70e-05  8.39e-01  
 17  +4.2889e-01  +4.3188e-01  2.99e-03  9.42e-07  1.54e-04  4.22e-07  3.01e-06  9.90e-01  
 18  +4.2751e-01  +4.2754e-01  3.06e-05  9.60e-09  1.57e-06  4.22e-09  3.08e-08  9.90e-01  
 19  +4.2750e-01  +4.2750e-01  3.06e-07  9.60e-11  1.57e-08  4.22e-11  3.08e-10  9.90e-01  
 20  +4.2750e-01  +4.2750e-01  3.06e-09  9.60e-13  1.57e-10  4.23e-13  3.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.2393ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:00 PM: Optimal value: 4.275e-01
(CVXPY) Sep 20 03:15:00 PM: Compilation took 8.525e-03 seconds
(CVXPY) Sep 20 03:15:00 PM: Solver (including time spent in interface) took 4.593e-02 seconds
Iteration: 2, Objective: 0.4275
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:00 PM: Your problem has 2537 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Finished problem compilation (took 1.268e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2537
  constraints   = 5037
  nnz(P)        = 0
  nnz(A)        = 32596
  cones (total) = 1
    : Nonnegative = 1,  numel = 5037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5013e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8387e-01  +5.3534e+02  5.35e+02  4.17e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3426e-01  +6.2971e+01  6.24e+01  1.58e-01  2.49e+01  1.48e-02  2.65e-01  9.06e-01  
  3  +5.0875e-01  +1.6066e+01  1.56e+01  1.05e-01  1.62e+01  3.92e-05  2.50e-01  2.44e-01  
  4  +5.0063e-01  +1.4402e+00  9.40e-01  9.14e-03  1.47e+00  7.62e-06  1.27e-01  8.09e-01  
  5  +5.0021e-01  +9.2131e-01  4.21e-01  4.02e-03  6.49e-01  7.40e-06  6.13e-02  6.80e-01  
  6  +4.9984e-01  +7.7434e-01  2.74e-01  1.98e-03  3.23e-01  2.17e-05  8.69e-03  9.37e-01  
  7  +4.9436e-01  +7.3874e-01  2.44e-01  1.83e-04  3.02e-02  3.00e-04  5.17e-04  9.42e-01  
  8  +4.9071e-01  +7.0865e-01  2.18e-01  1.43e-04  2.35e-02  2.53e-04  4.00e-04  3.41e-01  
  9  +4.8741e-01  +6.9340e-01  2.06e-01  1.09e-04  1.79e-02  2.72e-04  3.02e-04  2.87e-01  
 10  +4.8644e-01  +6.9014e-01  2.04e-01  9.99e-05  1.65e-02  2.26e-04  2.78e-04  2.61e-01  
 11  +4.8283e-01  +6.7102e-01  1.88e-01  8.80e-05  1.45e-02  1.67e-04  2.47e-04  2.80e-01  
 12  +4.8014e-01  +6.5761e-01  1.77e-01  8.18e-05  1.35e-02  1.06e-04  2.32e-04  3.32e-01  
 13  +4.6305e-01  +5.8373e-01  1.21e-01  4.62e-05  7.58e-03  4.10e-05  1.36e-04  6.90e-01  
 14  +4.5440e-01  +5.4998e-01  9.56e-02  3.49e-05  5.73e-03  3.04e-05  1.05e-04  2.70e-01  
 15  +4.4883e-01  +5.2367e-01  7.48e-02  2.73e-05  4.47e-03  7.55e-06  8.41e-05  9.90e-01  
 16  +4.2983e-01  +4.5523e-01  2.54e-02  8.68e-06  1.42e-03  2.43e-06  2.82e-05  7.15e-01  
 17  +4.2017e-01  +4.2168e-01  1.52e-03  5.07e-07  8.29e-05  1.42e-07  1.71e-06  9.59e-01  
 18  +4.1951e-01  +4.1953e-01  1.77e-05  5.93e-09  9.69e-07  1.63e-09  2.02e-08  9.89e-01  
 19  +4.1950e-01  +4.1950e-01  1.77e-07  5.93e-11  9.69e-09  1.63e-11  2.02e-10  9.90e-01  
 20  +4.1950e-01  +4.1950e-01  1.77e-09  5.93e-13  9.69e-11  1.64e-13  2.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.8567ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:00 PM: Optimal value: 4.195e-01
(CVXPY) Sep 20 03:15:00 PM: Compilation took 1.268e-02 seconds
(CVXPY) Sep 20 03:15:00 PM: Solver (including time spent in interface) took 4.659e-02 seconds
Iteration: 3, Objective: 0.4195
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:00 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Finished problem compilation (took 1.269e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 33354
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8361e-01  +5.3550e+02  5.35e+02  4.17e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3406e-01  +6.2787e+01  6.23e+01  1.58e-01  2.48e+01  1.49e-02  2.64e-01  9.09e-01  
  3  +5.0870e-01  +1.6014e+01  1.55e+01  1.04e-01  1.61e+01  3.94e-05  2.49e-01  2.49e-01  
  4  +5.0062e-01  +1.4350e+00  9.34e-01  9.10e-03  1.46e+00  7.68e-06  1.24e-01  8.16e-01  
  5  +5.0021e-01  +9.2678e-01  4.27e-01  4.07e-03  6.58e-01  8.00e-06  5.52e-02  7.08e-01  
  6  +4.9984e-01  +8.6717e-01  3.67e-01  2.55e-03  4.17e-01  2.61e-05  1.04e-02  8.53e-01  
  7  +4.9330e-01  +8.1748e-01  3.24e-01  2.20e-04  3.65e-02  3.58e-04  6.09e-04  9.45e-01  
  8  +4.8628e-01  +7.5467e-01  2.68e-01  1.42e-04  2.35e-02  2.97e-04  3.96e-04  4.87e-01  
  9  +4.8247e-01  +7.2905e-01  2.47e-01  1.24e-04  2.05e-02  2.42e-04  3.49e-04  2.21e-01  
 10  +4.8190e-01  +7.2387e-01  2.42e-01  1.23e-04  2.03e-02  2.14e-04  3.46e-04  8.40e-02  
 11  +4.7616e-01  +6.9444e-01  2.18e-01  1.02e-04  1.68e-02  1.90e-04  2.92e-04  1.90e-01  
 12  +4.7522e-01  +6.8706e-01  2.12e-01  9.98e-05  1.64e-02  1.50e-04  2.86e-04  1.72e-01  
 13  +4.5899e-01  +6.0983e-01  1.51e-01  6.17e-05  1.01e-02  9.54e-05  1.85e-04  4.25e-01  
 14  +4.5260e-01  +5.8152e-01  1.29e-01  5.13e-05  8.40e-03  7.32e-05  1.56e-04  2.26e-01  
 15  +4.4154e-01  +5.2737e-01  8.58e-02  3.31e-05  5.42e-03  3.32e-06  1.05e-04  9.90e-01  
 16  +4.2088e-01  +4.4739e-01  2.65e-02  9.69e-06  1.58e-03  1.27e-06  3.29e-05  7.41e-01  
 17  +4.1207e-01  +4.1455e-01  2.48e-03  8.88e-07  1.45e-04  1.60e-07  3.15e-06  9.30e-01  
 18  +4.1112e-01  +4.1115e-01  3.83e-05  1.37e-08  2.24e-06  3.22e-09  4.92e-08  9.90e-01  
 19  +4.1110e-01  +4.1110e-01  3.83e-07  1.37e-10  2.24e-08  3.22e-11  4.92e-10  9.90e-01  
 20  +4.1110e-01  +4.1110e-01  3.83e-09  1.37e-12  2.24e-10  3.23e-13  4.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:00 PM: Optimal value: 4.111e-01
(CVXPY) Sep 20 03:15:00 PM: Compilation took 1.269e-02 seconds
(CVXPY) Sep 20 03:15:00 PM: Solver (including time spent in interface) took 4.553e-02 seconds
Iteration: 4, Objective: 0.4111
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:00 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Finished problem compilation (took 1.671e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 33954
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8343e-01  +5.3565e+02  5.35e+02  4.18e-01  5.14e+01  3.81e-03  5.63e-01  5.97e-01  
  2  +5.3395e-01  +6.2684e+01  6.21e+01  1.58e-01  2.47e+01  1.49e-02  2.64e-01  9.10e-01  
  3  +5.0867e-01  +1.5985e+01  1.55e+01  1.04e-01  1.61e+01  3.95e-05  2.48e-01  2.52e-01  
  4  +5.0067e-01  +1.5260e+00  1.03e+00  9.99e-03  1.60e+00  7.91e-06  1.29e-01  7.78e-01  
  5  +5.0018e-01  +9.2792e-01  4.28e-01  4.08e-03  6.59e-01  8.31e-06  5.44e-02  7.45e-01  
  6  +4.9939e-01  +9.4853e-01  4.49e-01  2.08e-03  3.42e-01  4.87e-05  6.86e-03  9.45e-01  
  7  +4.9184e-01  +8.6837e-01  3.77e-01  2.60e-04  4.29e-02  3.53e-04  7.21e-04  8.95e-01  
  8  +4.8492e-01  +7.8518e-01  3.00e-01  1.67e-04  2.76e-02  2.39e-04  4.68e-04  5.37e-01  
  9  +4.8400e-01  +7.7176e-01  2.88e-01  1.61e-04  2.66e-02  2.00e-04  4.53e-04  1.29e-01  
 10  +4.7603e-01  +7.0274e-01  2.27e-01  1.10e-04  1.81e-02  5.63e-05  3.15e-04  7.62e-01  
 11  +4.7182e-01  +6.8032e-01  2.09e-01  9.80e-05  1.61e-02  4.24e-05  2.84e-04  3.00e-01  
 12  +4.4616e-01  +5.5555e-01  1.09e-01  4.41e-05  7.21e-03  7.62e-06  1.37e-04  9.30e-01  
 13  +4.2734e-01  +4.7956e-01  5.22e-02  1.99e-05  3.25e-03  4.16e-06  6.63e-05  6.78e-01  
 14  +4.1751e-01  +4.4166e-01  2.41e-02  8.95e-06  1.46e-03  2.04e-06  3.11e-05  6.02e-01  
 15  +4.1579e-01  +4.3501e-01  1.92e-02  7.06e-06  1.15e-03  1.74e-06  2.48e-05  3.14e-01  
 16  +4.1151e-01  +4.1852e-01  7.01e-03  2.54e-06  4.14e-04  8.88e-07  9.14e-06  9.90e-01  
 17  +4.0884e-01  +4.0919e-01  3.43e-04  1.24e-07  2.03e-05  4.09e-08  4.58e-07  9.66e-01  
 18  +4.0870e-01  +4.0870e-01  3.46e-06  1.25e-09  2.04e-07  4.10e-10  4.64e-09  9.90e-01  
 19  +4.0870e-01  +4.0870e-01  3.46e-08  1.25e-11  2.04e-09  4.10e-12  4.64e-11  9.90e-01  
 20  +4.0870e-01  +4.0870e-01  3.46e-10  1.25e-13  2.04e-11  4.12e-14  4.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 44.9803ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:00 PM: Optimal value: 4.087e-01
(CVXPY) Sep 20 03:15:00 PM: Compilation took 1.671e-02 seconds
(CVXPY) Sep 20 03:15:00 PM: Solver (including time spent in interface) took 4.583e-02 seconds
Iteration: 5, Objective: 0.4087
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:00 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Finished problem compilation (took 1.241e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 34611
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8324e-01  +5.3577e+02  5.35e+02  4.18e-01  5.14e+01  3.81e-03  5.63e-01  5.97e-01  
  2  +5.3379e-01  +6.2531e+01  6.20e+01  1.57e-01  2.46e+01  1.50e-02  2.63e-01  9.12e-01  
  3  +5.0863e-01  +1.5948e+01  1.54e+01  1.04e-01  1.60e+01  3.97e-05  2.47e-01  2.55e-01  
  4  +5.0063e-01  +1.4573e+00  9.57e-01  9.34e-03  1.50e+00  7.79e-06  1.23e-01  8.11e-01  
  5  +5.0017e-01  +9.2545e-01  4.25e-01  4.04e-03  6.54e-01  9.51e-06  4.66e-02  8.22e-01  
  6  +4.9894e-01  +1.0560e+00  5.57e-01  1.65e-03  2.72e-01  8.33e-05  4.88e-03  9.90e-01  
  7  +4.9248e-01  +9.6268e-01  4.70e-01  3.45e-04  5.71e-02  3.23e-04  9.51e-04  8.06e-01  
  8  +4.8706e-01  +8.7092e-01  3.84e-01  2.24e-04  3.71e-02  2.56e-04  6.21e-04  4.83e-01  
  9  +4.8028e-01  +8.1995e-01  3.40e-01  1.62e-04  2.68e-02  2.45e-04  4.55e-04  3.16e-01  
 10  +4.7760e-01  +7.6488e-01  2.87e-01  1.50e-04  2.47e-02  1.26e-04  4.27e-04  2.85e-01  
 11  +4.7206e-01  +7.1768e-01  2.46e-01  1.21e-04  2.00e-02  7.82e-05  3.52e-04  3.93e-01  
 12  +4.4863e-01  +5.8546e-01  1.37e-01  5.53e-05  9.06e-03  2.47e-05  1.69e-04  7.64e-01  
 13  +4.2920e-01  +4.9815e-01  6.90e-02  2.67e-05  4.36e-03  1.04e-05  8.76e-05  5.43e-01  
 14  +4.1283e-01  +4.2901e-01  1.62e-02  6.02e-06  9.80e-04  1.99e-06  2.12e-05  8.65e-01  
 15  +4.0813e-01  +4.1112e-01  2.99e-03  1.10e-06  1.79e-04  3.61e-07  4.03e-06  8.77e-01  
 16  +4.0703e-01  +4.0711e-01  7.55e-05  2.76e-08  4.50e-06  8.42e-09  1.03e-07  9.77e-01  
 17  +4.0700e-01  +4.0700e-01  7.55e-07  2.76e-10  4.50e-08  8.41e-11  1.03e-09  9.90e-01  
 18  +4.0700e-01  +4.0700e-01  7.55e-09  2.76e-12  4.50e-10  8.41e-13  1.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.4461ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:00 PM: Optimal value: 4.070e-01
(CVXPY) Sep 20 03:15:00 PM: Compilation took 1.241e-02 seconds
(CVXPY) Sep 20 03:15:00 PM: Solver (including time spent in interface) took 5.036e-02 seconds
Iteration: 6, Objective: 0.4070
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:00 PM: Your problem has 2577 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:00 PM: Finished problem compilation (took 8.800e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2577
  constraints   = 5077
  nnz(P)        = 0
  nnz(A)        = 35115
  cones (total) = 1
    : Nonnegative = 1,  numel = 5077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8321e-01  +5.3572e+02  5.35e+02  4.19e-01  5.13e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3372e-01  +6.2445e+01  6.19e+01  1.57e-01  2.45e+01  1.50e-02  2.63e-01  9.13e-01  
  3  +5.0861e-01  +1.5919e+01  1.54e+01  1.04e-01  1.60e+01  3.97e-05  2.47e-01  2.56e-01  
  4  +5.0069e-01  +1.5584e+00  1.06e+00  1.03e-02  1.65e+00  8.05e-06  1.29e-01  7.69e-01  
  5  +5.0019e-01  +9.6587e-01  4.66e-01  4.44e-03  7.17e-01  9.19e-06  5.35e-02  7.76e-01  
  6  +4.9899e-01  +9.8066e-01  4.82e-01  1.73e-03  2.85e-01  6.68e-05  5.31e-03  9.72e-01  
  7  +4.9253e-01  +9.0054e-01  4.08e-01  3.40e-04  5.62e-02  2.88e-04  9.42e-04  8.23e-01  
  8  +4.8874e-01  +8.6358e-01  3.75e-01  2.49e-04  4.12e-02  2.91e-04  6.90e-04  3.40e-01  
  9  +4.8358e-01  +8.1517e-01  3.32e-01  1.74e-04  2.87e-02  2.50e-04  4.85e-04  4.48e-01  
 10  +4.7723e-01  +7.4399e-01  2.67e-01  1.39e-04  2.30e-02  1.05e-04  3.97e-04  4.92e-01  
 11  +4.5637e-01  +6.3259e-01  1.76e-01  7.31e-05  1.20e-02  6.36e-05  2.18e-04  5.50e-01  
 12  +4.3856e-01  +5.4835e-01  1.10e-01  4.37e-05  7.15e-03  3.20e-05  1.39e-04  4.39e-01  
 13  +4.2872e-01  +5.0475e-01  7.60e-02  2.94e-05  4.79e-03  1.93e-05  9.62e-05  4.27e-01  
 14  +4.2367e-01  +4.7816e-01  5.45e-02  2.03e-05  3.31e-03  7.39e-06  6.75e-05  9.90e-01  
 15  +4.1389e-01  +4.4076e-01  2.69e-02  9.90e-06  1.61e-03  3.61e-06  3.43e-05  5.87e-01  
 16  +4.0626e-01  +4.1185e-01  5.59e-03  2.05e-06  3.33e-04  7.43e-07  7.36e-06  8.00e-01  
 17  +4.0569e-01  +4.0979e-01  4.09e-03  1.48e-06  2.41e-04  5.45e-07  5.32e-06  3.62e-01  
 18  +4.0532e-01  +4.0832e-01  3.00e-03  1.08e-06  1.76e-04  3.80e-07  3.89e-06  7.14e-01  
 19  +4.0432e-01  +4.0486e-01  5.40e-04  1.92e-07  3.13e-05  6.86e-08  6.99e-07  8.44e-01  
 20  +4.0410e-01  +4.0411e-01  5.62e-06  2.00e-09  3.25e-07  7.13e-10  7.27e-09  9.90e-01  
 21  +4.0410e-01  +4.0410e-01  5.62e-08  2.00e-11  3.25e-09  7.13e-12  7.27e-11  9.90e-01  
 22  +4.0410e-01  +4.0410e-01  5.62e-10  2.00e-13  3.25e-11  7.14e-14  7.29e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.9789ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:01 PM: Optimal value: 4.041e-01
(CVXPY) Sep 20 03:15:01 PM: Compilation took 8.800e-03 seconds
(CVXPY) Sep 20 03:15:01 PM: Solver (including time spent in interface) took 5.440e-02 seconds
Iteration: 7, Objective: 0.4041
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:01 PM: Your problem has 2587 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Finished problem compilation (took 9.967e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2587
  constraints   = 5087
  nnz(P)        = 0
  nnz(A)        = 35587
  cones (total) = 1
    : Nonnegative = 1,  numel = 5087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8310e-01  +5.3568e+02  5.35e+02  4.19e-01  5.12e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3360e-01  +6.2307e+01  6.18e+01  1.57e-01  2.44e+01  1.50e-02  2.63e-01  9.14e-01  
  3  +5.0858e-01  +1.5877e+01  1.54e+01  1.03e-01  1.59e+01  3.98e-05  2.46e-01  2.59e-01  
  4  +5.0066e-01  +1.5094e+00  1.01e+00  9.86e-03  1.58e+00  7.98e-06  1.25e-01  7.92e-01  
  5  +5.0024e-01  +1.0284e+00  5.28e-01  5.05e-03  8.14e-01  9.46e-06  5.62e-02  7.00e-01  
  6  +4.9939e-01  +9.3687e-01  4.37e-01  1.98e-03  3.26e-01  4.89e-05  6.33e-03  9.32e-01  
  7  +4.9312e-01  +8.7134e-01  3.78e-01  3.05e-04  5.06e-02  2.94e-04  8.39e-04  8.68e-01  
  8  +4.8778e-01  +8.2704e-01  3.39e-01  2.08e-04  3.43e-02  2.89e-04  5.71e-04  4.26e-01  
  9  +4.8317e-01  +8.0057e-01  3.17e-01  1.62e-04  2.67e-02  2.82e-04  4.48e-04  2.92e-01  
 10  +4.8157e-01  +7.8756e-01  3.06e-01  1.55e-04  2.56e-02  2.48e-04  4.31e-04  1.05e-01  
 11  +4.7267e-01  +7.0650e-01  2.34e-01  1.22e-04  2.00e-02  2.34e-06  3.50e-04  8.19e-01  
 12  +4.4727e-01  +5.8977e-01  1.43e-01  5.74e-05  9.40e-03  3.12e-06  1.75e-04  5.56e-01  
 13  +4.2963e-01  +5.1398e-01  8.43e-02  3.29e-05  5.36e-03  3.02e-06  1.07e-04  4.80e-01  
 14  +4.2602e-01  +4.9913e-01  7.31e-02  2.81e-05  4.58e-03  3.26e-06  9.25e-05  2.18e-01  
 15  +4.1484e-01  +4.5336e-01  3.85e-02  1.44e-05  2.34e-03  3.10e-06  4.95e-05  7.02e-01  
 16  +4.0331e-01  +4.0866e-01  5.35e-03  1.96e-06  3.19e-04  4.87e-07  7.17e-06  9.09e-01  
 17  +4.0172e-01  +4.0278e-01  1.06e-03  3.88e-07  6.31e-05  1.12e-07  1.44e-06  8.95e-01  
 18  +4.0130e-01  +4.0132e-01  1.11e-05  4.06e-09  6.61e-07  1.17e-09  1.51e-08  9.90e-01  
 19  +4.0130e-01  +4.0130e-01  1.11e-07  4.06e-11  6.61e-09  1.17e-11  1.51e-10  9.90e-01  
 20  +4.0130e-01  +4.0130e-01  1.11e-09  4.06e-13  6.61e-11  1.18e-13  1.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.3505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:01 PM: Optimal value: 4.013e-01
(CVXPY) Sep 20 03:15:01 PM: Compilation took 9.967e-03 seconds
(CVXPY) Sep 20 03:15:01 PM: Solver (including time spent in interface) took 5.406e-02 seconds
Iteration: 8, Objective: 0.4013
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:01 PM: Your problem has 2597 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Finished problem compilation (took 1.265e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2597
  constraints   = 5097
  nnz(P)        = 0
  nnz(A)        = 36012
  cones (total) = 1
    : Nonnegative = 1,  numel = 5097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8306e-01  +5.3554e+02  5.35e+02  4.19e-01  5.11e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3355e-01  +6.2229e+01  6.17e+01  1.57e-01  2.43e+01  1.50e-02  2.62e-01  9.15e-01  
  3  +5.0856e-01  +1.5854e+01  1.53e+01  1.03e-01  1.58e+01  3.97e-05  2.46e-01  2.60e-01  
  4  +5.0065e-01  +1.4912e+00  9.91e-01  9.70e-03  1.55e+00  7.95e-06  1.23e-01  8.01e-01  
  5  +5.0024e-01  +1.0188e+00  5.19e-01  4.96e-03  7.99e-01  9.57e-06  5.34e-02  7.00e-01  
  6  +4.9937e-01  +1.1704e+00  6.71e-01  2.42e-03  3.99e-01  6.06e-05  7.30e-03  9.90e-01  
  7  +4.9310e-01  +1.0517e+00  5.59e-01  4.17e-04  6.91e-02  2.84e-04  1.14e-03  8.44e-01  
  8  +4.8831e-01  +9.6255e-01  4.74e-01  3.04e-04  5.02e-02  2.31e-04  8.37e-04  3.65e-01  
  9  +4.8251e-01  +8.3264e-01  3.50e-01  1.82e-04  3.00e-02  1.02e-04  5.07e-04  7.08e-01  
 10  +4.8152e-01  +8.2106e-01  3.40e-01  1.78e-04  2.93e-02  9.30e-05  4.97e-04  6.79e-02  
 11  +4.7242e-01  +7.2526e-01  2.53e-01  1.31e-04  2.15e-02  2.72e-05  3.76e-04  7.03e-01  
 12  +4.4329e-01  +5.8165e-01  1.38e-01  5.50e-05  8.99e-03  1.55e-05  1.70e-04  6.44e-01  
 13  +4.2991e-01  +5.2351e-01  9.36e-02  3.65e-05  5.95e-03  1.00e-05  1.19e-04  3.64e-01  
 14  +4.2521e-01  +5.0388e-01  7.87e-02  3.03e-05  4.94e-03  8.45e-06  1.00e-04  1.94e-01  
 15  +4.2161e-01  +4.8413e-01  6.25e-02  2.36e-05  3.84e-03  8.15e-06  7.92e-05  9.90e-01  
 16  +4.0766e-01  +4.3005e-01  2.24e-02  8.34e-06  1.36e-03  2.92e-06  2.98e-05  7.83e-01  
 17  +4.0047e-01  +4.0294e-01  2.47e-03  9.18e-07  1.49e-04  2.96e-07  3.42e-06  9.61e-01  
 18  +3.9953e-01  +3.9959e-01  6.46e-05  2.39e-08  3.89e-06  7.49e-09  9.03e-08  9.89e-01  
 19  +3.9950e-01  +3.9950e-01  6.48e-07  2.40e-10  3.90e-08  7.50e-11  9.05e-10  9.90e-01  
 20  +3.9950e-01  +3.9950e-01  6.48e-09  2.40e-12  3.90e-10  7.51e-13  9.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.5353ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:01 PM: Optimal value: 3.995e-01
(CVXPY) Sep 20 03:15:01 PM: Compilation took 1.265e-02 seconds
(CVXPY) Sep 20 03:15:01 PM: Solver (including time spent in interface) took 4.542e-02 seconds
Iteration: 9, Objective: 0.3995
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:01 PM: Your problem has 2606 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Finished problem compilation (took 1.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2606
  constraints   = 5106
  nnz(P)        = 0
  nnz(A)        = 36467
  cones (total) = 1
    : Nonnegative = 1,  numel = 5106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8296e-01  +5.3561e+02  5.35e+02  4.19e-01  5.11e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3346e-01  +6.2156e+01  6.16e+01  1.57e-01  2.42e+01  1.50e-02  2.62e-01  9.16e-01  
  3  +5.0854e-01  +1.5828e+01  1.53e+01  1.03e-01  1.58e+01  3.98e-05  2.45e-01  2.63e-01  
  4  +5.0063e-01  +1.4627e+00  9.62e-01  9.43e-03  1.51e+00  7.92e-06  1.21e-01  8.15e-01  
  5  +5.0026e-01  +1.0586e+00  5.58e-01  5.32e-03  8.57e-01  1.08e-05  5.14e-02  7.34e-01  
  6  +4.9926e-01  +1.1360e+00  6.37e-01  2.11e-03  3.47e-01  6.75e-05  6.24e-03  9.90e-01  
  7  +4.9324e-01  +1.0456e+00  5.52e-01  4.13e-04  6.84e-02  2.92e-04  1.13e-03  8.20e-01  
  8  +4.8438e-01  +8.8427e-01  4.00e-01  2.37e-04  3.91e-02  1.99e-04  6.58e-04  5.52e-01  
  9  +4.7736e-01  +8.2140e-01  3.44e-01  1.69e-04  2.79e-02  1.56e-04  4.76e-04  4.28e-01  
 10  +4.7708e-01  +8.1756e-01  3.40e-01  1.69e-04  2.78e-02  1.51e-04  4.74e-04  1.87e-02  
 11  +4.7228e-01  +7.5084e-01  2.79e-01  1.51e-04  2.48e-02  5.56e-05  4.38e-04  4.40e-01  
 12  +4.5107e-01  +6.3611e-01  1.85e-01  8.09e-05  1.32e-02  3.55e-05  2.46e-04  5.34e-01  
 13  +4.2078e-01  +4.8932e-01  6.85e-02  2.74e-05  4.45e-03  8.85e-06  9.21e-05  6.89e-01  
 14  +4.1950e-01  +4.8402e-01  6.45e-02  2.54e-05  4.14e-03  8.34e-06  8.60e-05  1.49e-01  
 15  +4.1391e-01  +4.5898e-01  4.51e-02  1.72e-05  2.80e-03  5.70e-06  5.99e-05  8.50e-01  
 16  +4.0223e-01  +4.1359e-01  1.14e-02  4.30e-06  6.97e-04  1.37e-06  1.59e-05  8.15e-01  
 17  +3.9861e-01  +3.9973e-01  1.12e-03  4.20e-07  6.83e-05  1.30e-07  1.60e-06  9.13e-01  
 18  +3.9821e-01  +3.9823e-01  2.19e-05  8.24e-09  1.34e-06  2.49e-09  3.16e-08  9.90e-01  
 19  +3.9820e-01  +3.9820e-01  2.20e-07  8.26e-11  1.34e-08  2.50e-11  3.17e-10  9.90e-01  
 20  +3.9820e-01  +3.9820e-01  2.20e-09  8.26e-13  1.34e-10  2.51e-13  3.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.183ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:01 PM: Optimal value: 3.982e-01
(CVXPY) Sep 20 03:15:01 PM: Compilation took 1.249e-02 seconds
(CVXPY) Sep 20 03:15:01 PM: Solver (including time spent in interface) took 5.080e-02 seconds
Iteration: 10, Objective: 0.3982
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:01 PM: Your problem has 2616 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Finished problem compilation (took 1.285e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2616
  constraints   = 5116
  nnz(P)        = 0
  nnz(A)        = 36859
  cones (total) = 1
    : Nonnegative = 1,  numel = 5116

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8286e-01  +5.3575e+02  5.35e+02  4.20e-01  5.10e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3338e-01  +6.2069e+01  6.15e+01  1.57e-01  2.41e+01  1.50e-02  2.62e-01  9.17e-01  
  3  +5.0853e-01  +1.5813e+01  1.53e+01  1.03e-01  1.58e+01  3.99e-05  2.45e-01  2.64e-01  
  4  +5.0062e-01  +1.4328e+00  9.32e-01  9.15e-03  1.46e+00  7.85e-06  1.18e-01  8.30e-01  
  5  +5.0027e-01  +1.0852e+00  5.85e-01  5.55e-03  8.94e-01  1.19e-05  4.88e-02  7.68e-01  
  6  +4.9888e-01  +1.0385e+00  5.40e-01  1.47e-03  2.42e-01  8.74e-05  4.24e-03  9.77e-01  
  7  +4.9554e-01  +9.9614e-01  5.01e-01  5.63e-04  9.31e-02  2.05e-04  1.55e-03  6.37e-01  
  8  +4.9432e-01  +8.6574e-01  3.71e-01  3.40e-04  5.63e-02  6.14e-05  9.32e-04  8.96e-01  
  9  +4.8891e-01  +8.1500e-01  3.26e-01  2.09e-04  3.45e-02  5.49e-05  5.73e-04  7.10e-01  
 10  +4.8486e-01  +7.9429e-01  3.09e-01  1.72e-04  2.84e-02  5.46e-05  4.77e-04  2.49e-01  
 11  +4.8208e-01  +7.7765e-01  2.96e-01  1.64e-04  2.70e-02  4.63e-05  4.59e-04  1.85e-01  
 12  +4.6381e-01  +6.8270e-01  2.19e-01  1.01e-04  1.66e-02  3.11e-05  2.96e-04  5.39e-01  
 13  +4.2749e-01  +5.1377e-01  8.63e-02  3.54e-05  5.76e-03  7.21e-06  1.17e-04  7.20e-01  
 14  +4.2098e-01  +4.8882e-01  6.78e-02  2.71e-05  4.40e-03  5.99e-06  9.16e-05  3.25e-01  
 15  +4.1815e-01  +4.7804e-01  5.99e-02  2.35e-05  3.82e-03  6.31e-06  8.07e-05  5.70e-01  
 16  +4.0904e-01  +4.4256e-01  3.35e-02  1.29e-05  2.09e-03  3.65e-06  4.62e-05  5.46e-01  
 17  +4.0131e-01  +4.1260e-01  1.13e-02  4.31e-06  6.99e-04  1.22e-06  1.61e-05  6.99e-01  
 18  +3.9762e-01  +3.9851e-01  8.84e-04  3.36e-07  5.45e-05  9.41e-08  1.29e-06  9.28e-01  
 19  +3.9730e-01  +3.9731e-01  9.58e-06  3.64e-09  5.91e-07  1.02e-09  1.40e-08  9.89e-01  
 20  +3.9730e-01  +3.9730e-01  9.66e-08  3.67e-11  5.95e-09  1.03e-11  1.41e-10  9.90e-01  
 21  +3.9730e-01  +3.9730e-01  9.87e-10  3.75e-13  6.08e-11  1.05e-13  1.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.7781ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:01 PM: Optimal value: 3.973e-01
(CVXPY) Sep 20 03:15:01 PM: Compilation took 1.285e-02 seconds
(CVXPY) Sep 20 03:15:01 PM: Solver (including time spent in interface) took 5.752e-02 seconds
Iteration: 11, Objective: 0.3973
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:01 PM: Your problem has 2619 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:01 PM: Finished problem compilation (took 9.986e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2619
  constraints   = 5119
  nnz(P)        = 0
  nnz(A)        = 36957
  cones (total) = 1
    : Nonnegative = 1,  numel = 5119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8284e-01  +5.3580e+02  5.35e+02  4.20e-01  5.10e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3336e-01  +6.2063e+01  6.15e+01  1.57e-01  2.41e+01  1.50e-02  2.62e-01  9.17e-01  
  3  +5.0852e-01  +1.5813e+01  1.53e+01  1.03e-01  1.58e+01  3.99e-05  2.45e-01  2.64e-01  
  4  +5.0061e-01  +1.4294e+00  9.29e-01  9.12e-03  1.46e+00  7.84e-06  1.18e-01  8.31e-01  
  5  +5.0027e-01  +1.0889e+00  5.89e-01  5.59e-03  8.99e-01  1.20e-05  4.88e-02  7.68e-01  
  6  +4.9884e-01  +1.0342e+00  5.35e-01  1.40e-03  2.32e-01  9.05e-05  4.05e-03  9.81e-01  
  7  +4.9579e-01  +9.9561e-01  5.00e-01  5.86e-04  9.70e-02  1.96e-04  1.62e-03  6.04e-01  
  8  +4.9450e-01  +8.5587e-01  3.61e-01  3.34e-04  5.53e-02  5.18e-05  9.16e-04  9.60e-01  
  9  +4.8973e-01  +8.1566e-01  3.26e-01  2.14e-04  3.54e-02  4.69e-05  5.88e-04  7.13e-01  
 10  +4.8569e-01  +7.9499e-01  3.09e-01  1.75e-04  2.89e-02  4.70e-05  4.85e-04  2.74e-01  
 11  +4.8373e-01  +7.8364e-01  3.00e-01  1.70e-04  2.80e-02  4.23e-05  4.72e-04  1.38e-01  
 12  +4.7073e-01  +7.1638e-01  2.46e-01  1.20e-04  1.97e-02  3.29e-05  3.45e-04  4.35e-01  
 13  +4.3491e-01  +5.4505e-01  1.10e-01  4.54e-05  7.41e-03  9.69e-06  1.46e-04  7.49e-01  
 14  +4.2700e-01  +5.1370e-01  8.67e-02  3.50e-05  5.70e-03  7.82e-06  1.16e-04  2.94e-01  
 15  +4.2295e-01  +4.9775e-01  7.48e-02  2.98e-05  4.85e-03  6.84e-06  1.00e-04  1.75e-01  
 16  +4.1831e-01  +4.7946e-01  6.12e-02  2.39e-05  3.88e-03  6.45e-06  8.18e-05  5.41e-01  
 17  +4.0554e-01  +4.2942e-01  2.39e-02  9.13e-06  1.48e-03  2.55e-06  3.33e-05  7.23e-01  
 18  +3.9875e-01  +4.0306e-01  4.31e-03  1.63e-06  2.64e-04  5.04e-07  6.21e-06  9.90e-01  
 19  +3.9714e-01  +3.9724e-01  1.00e-04  3.79e-08  6.14e-06  1.14e-08  1.46e-07  9.88e-01  
 20  +3.9710e-01  +3.9710e-01  1.00e-06  3.79e-10  6.14e-08  1.14e-10  1.46e-09  9.90e-01  
 21  +3.9710e-01  +3.9710e-01  1.00e-08  3.79e-12  6.14e-10  1.14e-12  1.47e-11  9.90e-01  
 22  +3.9710e-01  +3.9710e-01  1.00e-10  3.79e-14  6.14e-12  1.14e-14  1.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.2345ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:01 PM: Optimal value: 3.971e-01
(CVXPY) Sep 20 03:15:01 PM: Compilation took 9.986e-03 seconds
(CVXPY) Sep 20 03:15:01 PM: Solver (including time spent in interface) took 6.015e-02 seconds
FULL MODEL:
  Accruacy: 0.5928
  Our objective: 0.1856

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.1452)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0052)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.0064)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0048)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.238783359527588
Best over terms:
  Our final objective: 0.1452
    Its accruacy: 0.5726
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1452
  Highest accruacy: 0.5726
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

