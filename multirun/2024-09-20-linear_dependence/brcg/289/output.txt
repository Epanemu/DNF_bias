Command:
python test_script.py -s linear_dependence -d 8 -n 50 --seed 21 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 8.

Computed total variation: 0.84
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:31 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:31 PM: Finished problem compilation (took 8.242e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 292
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8997e-01  +2.6682e+01  2.62e+01  8.34e-01  6.72e+00  1.00e+00  1.10e+00   ------   
  1  +5.5906e-01  +5.7277e+00  5.17e+00  3.50e-01  3.84e+00  3.72e-03  6.07e-01  6.16e-01  
  2  +4.5344e-01  +1.1944e+00  7.41e-01  7.36e-02  9.86e-01  1.92e-02  2.03e-01  9.78e-01  
  3  +3.9476e-01  +6.5931e-01  2.65e-01  1.88e-02  2.57e-01  6.76e-03  6.55e-02  7.69e-01  
  4  +3.6992e-01  +4.7665e-01  1.07e-01  6.78e-03  9.16e-02  2.37e-03  2.76e-02  6.33e-01  
  5  +3.5012e-01  +3.9289e-01  4.28e-02  2.03e-03  2.79e-02  7.87e-04  1.05e-02  7.37e-01  
  6  +3.4044e-01  +3.4162e-01  1.17e-03  5.52e-05  7.58e-04  9.12e-06  3.08e-04  9.90e-01  
  7  +3.4010e-01  +3.4012e-01  1.17e-05  5.51e-07  7.57e-06  9.12e-08  3.08e-06  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  1.17e-07  5.51e-09  7.57e-08  9.12e-10  3.08e-08  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  1.17e-09  5.51e-11  7.57e-10  9.12e-12  3.08e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 269.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:31 PM: Optimal value: 3.401e-01
(CVXPY) Sep 20 03:13:31 PM: Compilation took 8.242e-03 seconds
(CVXPY) Sep 20 03:13:31 PM: Solver (including time spent in interface) took 1.242e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:32 PM: Your problem has 52 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Finished problem compilation (took 3.970e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 52
  constraints   = 77
  nnz(P)        = 0
  nnz(A)        = 363
  cones (total) = 1
    : Nonnegative = 1,  numel = 77

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7780e-01  +2.6924e+01  2.64e+01  8.45e-01  6.77e+00  1.00e+00  1.11e+00   ------   
  1  +5.0621e-01  +5.7928e+00  5.29e+00  3.63e-01  3.74e+00  3.80e-03  6.08e-01  6.13e-01  
  2  +3.8616e-01  +1.1800e+00  7.94e-01  7.32e-02  9.63e-01  2.04e-02  1.95e-01  9.74e-01  
  3  +3.1691e-01  +6.0926e-01  2.92e-01  1.77e-02  2.42e-01  8.76e-03  5.93e-02  8.42e-01  
  4  +2.8390e-01  +4.0730e-01  1.23e-01  6.63e-03  9.43e-02  2.85e-03  2.35e-02  7.66e-01  
  5  +2.6157e-01  +2.6706e-01  5.48e-03  2.98e-04  4.23e-03  6.82e-05  1.12e-03  9.66e-01  
  6  +2.6037e-01  +2.6072e-01  3.56e-04  1.94e-05  2.74e-04  4.42e-06  7.35e-05  9.35e-01  
  7  +2.6033e-01  +2.6067e-01  3.37e-04  1.44e-05  2.05e-04  4.67e-06  5.64e-05  3.73e-01  
  8  +2.6024e-01  +2.6034e-01  1.05e-04  4.26e-06  6.04e-05  1.35e-06  1.75e-05  7.31e-01  
  9  +2.6020e-01  +2.6021e-01  6.08e-06  2.49e-07  3.51e-06  6.57e-08  1.04e-06  9.90e-01  
 10  +2.6020e-01  +2.6020e-01  6.11e-08  2.49e-09  3.52e-08  6.57e-10  1.05e-08  9.90e-01  
 11  +2.6020e-01  +2.6020e-01  6.11e-10  2.50e-11  3.52e-10  6.58e-12  1.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 313.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:32 PM: Optimal value: 2.602e-01
(CVXPY) Sep 20 03:13:32 PM: Compilation took 3.970e-03 seconds
(CVXPY) Sep 20 03:13:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2602
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:32 PM: Your problem has 62 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Finished problem compilation (took 5.657e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 87
  nnz(P)        = 0
  nnz(A)        = 414
  cones (total) = 1
    : Nonnegative = 1,  numel = 87

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7331e-01  +2.7266e+01  2.68e+01  8.54e-01  6.62e+00  1.00e+00  1.12e+00   ------   
  1  +4.7366e-01  +5.7823e+00  5.31e+00  3.68e-01  3.59e+00  3.81e-03  6.07e-01  6.19e-01  
  2  +3.3220e-01  +1.6146e+00  1.28e+00  9.56e-02  1.23e+00  1.99e-02  2.39e-01  8.23e-01  
  3  +2.4716e-01  +6.7008e-01  4.23e-01  2.32e-02  3.16e-01  1.01e-02  7.07e-02  7.52e-01  
  4  +1.9510e-01  +3.4256e-01  1.47e-01  7.33e-03  9.97e-02  3.18e-03  2.51e-02  7.08e-01  
  5  +1.6645e-01  +1.9022e-01  2.38e-02  1.18e-03  1.60e-02  4.57e-04  4.29e-03  8.54e-01  
  6  +1.6064e-01  +1.6142e-01  7.78e-04  3.91e-05  5.26e-04  1.11e-05  1.45e-04  9.70e-01  
  7  +1.6044e-01  +1.6055e-01  1.09e-04  5.69e-06  7.35e-05  8.49e-07  2.38e-05  9.35e-01  
  8  +1.6040e-01  +1.6040e-01  1.68e-06  8.90e-08  1.14e-06  1.02e-08  3.88e-07  9.84e-01  
  9  +1.6040e-01  +1.6040e-01  1.68e-08  8.90e-10  1.14e-08  1.02e-10  3.88e-09  9.90e-01  
 10  +1.6040e-01  +1.6040e-01  1.68e-10  8.91e-12  1.14e-10  1.02e-12  3.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 305.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:32 PM: Optimal value: 1.604e-01
(CVXPY) Sep 20 03:13:32 PM: Compilation took 5.657e-03 seconds
(CVXPY) Sep 20 03:13:32 PM: Solver (including time spent in interface) took 1.079e-03 seconds
Iteration: 3, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:32 PM: Your problem has 72 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Finished problem compilation (took 4.560e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 97
  nnz(P)        = 0
  nnz(A)        = 455
  cones (total) = 1
    : Nonnegative = 1,  numel = 97

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6404e-01  +2.7334e+01  2.69e+01  8.62e-01  6.44e+00  1.00e+00  1.13e+00   ------   
  1  +4.1690e-01  +5.7713e+00  5.35e+00  3.67e-01  3.37e+00  3.93e-03  5.95e-01  6.21e-01  
  2  +2.2159e-01  +2.0290e+00  1.81e+00  1.08e-01  1.28e+00  1.83e-02  2.68e-01  7.04e-01  
  3  +1.6040e-01  +5.5720e-01  3.97e-01  2.36e-02  2.97e-01  6.67e-03  7.11e-02  7.59e-01  
  4  +1.1590e-01  +2.0828e-01  9.24e-02  5.65e-03  6.99e-02  1.41e-03  1.90e-02  7.87e-01  
  5  +1.0350e-01  +1.2119e-01  1.77e-02  1.09e-03  1.33e-02  2.62e-04  3.84e-03  8.09e-01  
  6  +1.0073e-01  +1.0173e-01  1.01e-03  6.26e-05  7.63e-04  1.22e-05  2.26e-04  9.42e-01  
  7  +1.0057e-01  +1.0085e-01  2.79e-04  1.78e-05  2.11e-04  2.62e-06  7.19e-05  8.00e-01  
  8  +1.0051e-01  +1.0052e-01  1.92e-05  1.23e-06  1.45e-05  1.42e-07  5.30e-06  9.47e-01  
  9  +1.0050e-01  +1.0050e-01  1.98e-07  1.27e-08  1.49e-07  1.45e-09  5.50e-08  9.90e-01  
 10  +1.0050e-01  +1.0050e-01  1.98e-09  1.27e-10  1.49e-09  1.45e-11  5.51e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 389.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:32 PM: Optimal value: 1.005e-01
(CVXPY) Sep 20 03:13:32 PM: Compilation took 4.560e-03 seconds
(CVXPY) Sep 20 03:13:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:32 PM: Your problem has 75 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Finished problem compilation (took 5.178e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 100
  nnz(P)        = 0
  nnz(A)        = 474
  cones (total) = 1
    : Nonnegative = 1,  numel = 100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6177e-01  +2.7289e+01  2.68e+01  8.64e-01  6.43e+00  1.00e+00  1.13e+00   ------   
  1  +4.0423e-01  +5.7823e+00  5.38e+00  3.70e-01  3.34e+00  3.96e-03  5.92e-01  6.19e-01  
  2  +2.0290e-01  +2.0661e+00  1.86e+00  1.09e-01  1.28e+00  1.85e-02  2.70e-01  6.96e-01  
  3  +1.5403e-01  +4.8913e-01  3.35e-01  2.06e-02  2.55e-01  5.97e-03  6.24e-02  7.90e-01  
  4  +1.1370e-01  +2.0769e-01  9.40e-02  5.94e-03  7.25e-02  1.50e-03  1.96e-02  7.66e-01  
  5  +1.0109e-01  +1.0456e-01  3.47e-03  2.23e-04  2.70e-03  4.78e-05  7.68e-04  9.62e-01  
  6  +1.0066e-01  +1.0139e-01  7.30e-04  4.85e-05  5.72e-04  8.13e-06  1.76e-04  7.91e-01  
  7  +1.0053e-01  +1.0068e-01  1.42e-04  9.45e-06  1.09e-04  1.09e-06  3.97e-05  9.19e-01  
  8  +1.0050e-01  +1.0050e-01  3.83e-06  2.56e-07  2.93e-06  2.60e-08  1.11e-06  9.74e-01  
  9  +1.0050e-01  +1.0050e-01  3.84e-08  2.56e-09  2.93e-08  2.60e-10  1.11e-08  9.90e-01  
 10  +1.0050e-01  +1.0050e-01  3.84e-10  2.56e-11  2.93e-10  2.60e-12  1.11e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 346.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:32 PM: Optimal value: 1.005e-01
(CVXPY) Sep 20 03:13:32 PM: Compilation took 5.178e-04 seconds
(CVXPY) Sep 20 03:13:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:32 PM: Your problem has 76 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:32 PM: Finished problem compilation (took 4.240e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 76
  constraints   = 101
  nnz(P)        = 0
  nnz(A)        = 478
  cones (total) = 1
    : Nonnegative = 1,  numel = 101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6071e-01  +2.7297e+01  2.68e+01  8.64e-01  6.42e+00  1.00e+00  1.12e+00   ------   
  1  +3.9404e-01  +5.7987e+00  5.40e+00  3.69e-01  3.33e+00  3.99e-03  5.90e-01  6.18e-01  
  2  +1.8994e-01  +1.9743e+00  1.78e+00  1.05e-01  1.23e+00  1.88e-02  2.57e-01  7.19e-01  
  3  +1.4216e-01  +4.5849e-01  3.16e-01  2.01e-02  2.47e-01  5.65e-03  5.89e-02  7.93e-01  
  4  +9.6493e-02  +1.9639e-01  9.99e-02  6.14e-03  7.63e-02  1.64e-03  1.98e-02  7.99e-01  
  5  +8.1454e-02  +8.5243e-02  3.79e-03  2.37e-04  2.91e-03  4.05e-05  8.03e-04  9.78e-01  
  6  +8.0731e-02  +8.1198e-02  4.68e-04  3.03e-05  3.63e-04  3.70e-06  1.07e-04  8.68e-01  
  7  +8.0654e-02  +8.0868e-02  2.14e-04  1.41e-05  1.65e-04  1.72e-06  5.49e-05  7.60e-01  
  8  +8.0601e-02  +8.0606e-02  5.14e-06  3.42e-07  3.97e-06  3.28e-08  1.38e-06  9.77e-01  
  9  +8.0600e-02  +8.0600e-02  5.15e-08  3.42e-09  3.97e-08  3.29e-10  1.39e-08  9.90e-01  
 10  +8.0600e-02  +8.0600e-02  5.16e-10  3.43e-11  3.98e-10  3.29e-12  1.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 364.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:32 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:32 PM: Optimal value: 8.060e-02
(CVXPY) Sep 20 03:13:32 PM: Compilation took 4.240e-03 seconds
(CVXPY) Sep 20 03:13:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.7999999999999999

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x7 = 1) <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0) <-- (term's our objective: 0.2)
 OR (x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.12)
 OR (x2 = 1 AND x4 = 0 AND x6 = 1)            <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8615782260894775
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

