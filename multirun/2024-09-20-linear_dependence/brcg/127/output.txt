Command:
python test_script.py -s linear_dependence -d 4 -n 50 --seed 73 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24000000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:40 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:40 PM: Finished problem compilation (took 4.050e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8972e-01  +2.6121e+01  2.56e+01  8.15e-01  5.48e+00  1.00e+00  1.09e+00   ------   
  1  +5.9279e-01  +5.2826e+00  4.69e+00  2.81e-01  2.79e+00  4.03e-03  5.13e-01  6.73e-01  
  2  +5.0705e-01  +1.1174e+00  6.10e-01  5.90e-02  6.75e-01  1.07e-02  1.62e-01  8.90e-01  
  3  +4.5312e-01  +8.7216e-01  4.19e-01  2.21e-02  2.62e-01  1.05e-02  7.06e-02  6.48e-01  
  4  +4.0218e-01  +5.0552e-01  1.03e-01  5.36e-03  6.25e-02  1.39e-03  2.15e-02  7.36e-01  
  5  +3.8093e-01  +3.8437e-01  3.44e-03  1.84e-04  2.12e-03  3.47e-05  8.57e-04  9.74e-01  
  6  +3.8011e-01  +3.8014e-01  3.44e-05  1.83e-06  2.11e-05  3.46e-07  8.61e-06  9.90e-01  
  7  +3.8010e-01  +3.8010e-01  3.44e-07  1.83e-08  2.11e-07  3.46e-09  8.61e-08  9.90e-01  
  8  +3.8010e-01  +3.8010e-01  3.44e-09  1.83e-10  2.11e-09  3.46e-11  8.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 182.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:40 PM: Optimal value: 3.801e-01
(CVXPY) Sep 20 03:05:40 PM: Compilation took 4.050e-03 seconds
(CVXPY) Sep 20 03:05:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:40 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:40 PM: Finished problem compilation (took 3.258e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 255
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7533e-01  +2.6481e+01  2.60e+01  8.32e-01  5.75e+00  1.00e+00  1.12e+00   ------   
  1  +5.3274e-01  +5.4668e+00  4.93e+00  3.10e-01  2.94e+00  3.99e-03  5.56e-01  6.51e-01  
  2  +4.3713e-01  +1.2946e+00  8.58e-01  6.76e-02  7.89e-01  1.35e-02  1.85e-01  8.54e-01  
  3  +3.3991e-01  +7.4433e-01  4.04e-01  2.27e-02  2.66e-01  6.53e-03  7.58e-02  7.26e-01  
  4  +2.9602e-01  +4.0709e-01  1.11e-01  5.90e-03  6.89e-02  1.82e-03  2.31e-02  7.53e-01  
  5  +2.8640e-01  +3.8121e-01  9.48e-02  4.34e-03  5.34e-02  1.65e-03  1.67e-02  3.70e-01  
  6  +2.6424e-01  +2.7514e-01  1.09e-02  5.01e-04  6.15e-03  6.19e-05  2.11e-03  9.90e-01  
  7  +2.6048e-01  +2.6067e-01  1.93e-04  8.89e-06  1.09e-04  6.55e-07  3.85e-05  9.82e-01  
  8  +2.6040e-01  +2.6040e-01  2.79e-06  1.31e-07  1.60e-06  6.82e-09  5.96e-07  9.85e-01  
  9  +2.6040e-01  +2.6040e-01  2.79e-08  1.31e-09  1.60e-08  6.81e-11  5.96e-09  9.90e-01  
 10  +2.6040e-01  +2.6040e-01  2.79e-10  1.31e-11  1.60e-10  6.82e-13  5.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 330.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:40 PM: Optimal value: 2.604e-01
(CVXPY) Sep 20 03:05:40 PM: Compilation took 3.258e-03 seconds
(CVXPY) Sep 20 03:05:40 PM: Solver (including time spent in interface) took 8.852e-04 seconds
Iteration: 2, Objective: 0.2604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:40 PM: Your problem has 47 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:40 PM: Finished problem compilation (took 3.575e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 47
  constraints   = 72
  nnz(P)        = 0
  nnz(A)        = 278
  cones (total) = 1
    : Nonnegative = 1,  numel = 72

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7506e-01  +2.6467e+01  2.60e+01  8.36e-01  5.85e+00  1.00e+00  1.13e+00   ------   
  1  +5.2914e-01  +5.4933e+00  4.96e+00  3.19e-01  3.00e+00  3.96e-03  5.65e-01  6.46e-01  
  2  +4.2897e-01  +1.3051e+00  8.76e-01  6.66e-02  7.83e-01  1.44e-02  1.86e-01  8.62e-01  
  3  +3.3080e-01  +7.0424e-01  3.73e-01  2.05e-02  2.42e-01  6.10e-03  6.98e-02  7.43e-01  
  4  +2.9100e-01  +4.6209e-01  1.71e-01  8.76e-03  1.03e-01  2.77e-03  3.33e-02  5.68e-01  
  5  +2.7201e-01  +3.7693e-01  1.05e-01  4.73e-03  5.80e-02  1.89e-03  1.84e-02  5.08e-01  
  6  +2.4753e-01  +2.6590e-01  1.84e-02  8.37e-04  1.02e-02  1.17e-04  3.56e-03  9.79e-01  
  7  +2.4069e-01  +2.4120e-01  5.12e-04  2.30e-05  2.81e-04  2.49e-06  1.01e-04  9.72e-01  
  8  +2.4051e-01  +2.4052e-01  1.44e-05  6.62e-07  8.08e-06  4.30e-08  2.99e-06  9.70e-01  
  9  +2.4050e-01  +2.4050e-01  1.45e-07  6.67e-09  8.13e-08  4.33e-10  3.03e-08  9.90e-01  
 10  +2.4050e-01  +2.4050e-01  1.45e-09  6.67e-11  8.14e-10  4.34e-12  3.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 222.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:40 PM: Optimal value: 2.405e-01
(CVXPY) Sep 20 03:05:40 PM: Compilation took 3.575e-03 seconds
(CVXPY) Sep 20 03:05:40 PM: Solver (including time spent in interface) took 6.573e-04 seconds
FULL MODEL:
  Accruacy: 0.76
  Our objective: 0.52

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0)            <-- (term's our objective: 0.24)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.1255829334259033
Best over terms:
  Our final objective: 0.24000000000000002
    Its accruacy: 0.62
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.15999999999999995
  Highest accruacy: 0.62
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

