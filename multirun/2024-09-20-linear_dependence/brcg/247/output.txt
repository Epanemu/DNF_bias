Command:
python test_script.py -s linear_dependence -d 7 -n 50 --seed 73 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 7.

Computed total variation: 0.92
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:44 PM: Your problem has 40 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Finished problem compilation (took 5.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 65
  nnz(P)        = 0
  nnz(A)        = 265
  cones (total) = 1
    : Nonnegative = 1,  numel = 65

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9343e-01  +2.6202e+01  2.57e+01  8.29e-01  6.40e+00  1.00e+00  1.08e+00   ------   
  1  +5.6919e-01  +5.6217e+00  5.05e+00  3.36e-01  3.59e+00  3.81e-03  5.77e-01  6.24e-01  
  2  +4.8101e-01  +1.1160e+00  6.35e-01  6.59e-02  8.56e-01  1.70e-02  1.81e-01  9.90e-01  
  3  +4.2099e-01  +7.2359e-01  3.03e-01  2.03e-02  2.71e-01  9.43e-03  6.51e-02  7.11e-01  
  4  +3.9468e-01  +4.8423e-01  8.96e-02  5.88e-03  7.73e-02  2.52e-03  2.18e-02  6.95e-01  
  5  +3.8236e-01  +3.9511e-01  1.27e-02  8.25e-04  1.08e-02  3.20e-04  3.32e-03  8.62e-01  
  6  +3.8022e-01  +3.8064e-01  4.18e-04  2.70e-05  3.55e-04  1.06e-05  1.11e-04  9.67e-01  
  7  +3.8018e-01  +3.8039e-01  2.15e-04  1.17e-05  1.54e-04  4.99e-06  5.02e-05  7.07e-01  
  8  +3.8013e-01  +3.8020e-01  7.83e-05  3.35e-06  4.50e-05  1.78e-06  1.63e-05  7.34e-01  
  9  +3.8010e-01  +3.8010e-01  1.37e-06  5.58e-08  7.51e-07  3.03e-08  2.80e-07  9.86e-01  
 10  +3.8010e-01  +3.8010e-01  1.37e-08  5.58e-10  7.51e-09  3.03e-10  2.80e-09  9.90e-01  
 11  +3.8010e-01  +3.8010e-01  1.37e-10  5.58e-12  7.51e-11  3.06e-12  2.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 228.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:44 PM: Optimal value: 3.801e-01
(CVXPY) Sep 20 03:10:44 PM: Compilation took 5.008e-03 seconds
(CVXPY) Sep 20 03:10:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:44 PM: Your problem has 50 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Finished problem compilation (took 2.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 50
  constraints   = 75
  nnz(P)        = 0
  nnz(A)        = 326
  cones (total) = 1
    : Nonnegative = 1,  numel = 75

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8735e-01  +2.6696e+01  2.62e+01  8.41e-01  6.38e+00  1.00e+00  1.10e+00   ------   
  1  +5.4074e-01  +5.6738e+00  5.13e+00  3.50e-01  3.46e+00  3.81e-03  5.90e-01  6.26e-01  
  2  +4.4422e-01  +1.3682e+00  9.24e-01  8.20e-02  1.05e+00  1.77e-02  2.20e-01  8.82e-01  
  3  +3.7922e-01  +6.8609e-01  3.07e-01  2.09e-02  2.74e-01  6.96e-03  6.72e-02  7.36e-01  
  4  +3.4742e-01  +5.2586e-01  1.78e-01  1.03e-02  1.38e-01  3.56e-03  3.74e-02  5.83e-01  
  5  +3.1758e-01  +3.7662e-01  5.90e-02  2.96e-03  4.03e-02  1.08e-03  1.25e-02  6.95e-01  
  6  +3.0267e-01  +3.1039e-01  7.72e-03  3.60e-04  4.90e-03  1.16e-04  1.71e-03  8.89e-01  
  7  +3.0036e-01  +3.0053e-01  1.68e-04  7.83e-06  1.06e-04  1.74e-06  3.82e-05  9.79e-01  
  8  +3.0030e-01  +3.0030e-01  2.77e-06  1.32e-07  1.76e-06  1.67e-08  6.84e-07  9.84e-01  
  9  +3.0030e-01  +3.0030e-01  2.76e-08  1.32e-09  1.75e-08  1.67e-10  6.85e-09  9.90e-01  
 10  +3.0030e-01  +3.0030e-01  2.76e-10  1.32e-11  1.75e-10  1.67e-12  6.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 251.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:44 PM: Optimal value: 3.003e-01
(CVXPY) Sep 20 03:10:44 PM: Compilation took 2.005e-03 seconds
(CVXPY) Sep 20 03:10:44 PM: Solver (including time spent in interface) took 1.170e-03 seconds
Iteration: 2, Objective: 0.3003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:44 PM: Your problem has 60 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 85
  nnz(P)        = 0
  nnz(A)        = 379
  cones (total) = 1
    : Nonnegative = 1,  numel = 85

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7963e-01  +2.6862e+01  2.64e+01  8.51e-01  6.27e+00  1.00e+00  1.11e+00   ------   
  1  +4.9456e-01  +5.6841e+00  5.19e+00  3.57e-01  3.31e+00  3.88e-03  5.85e-01  6.26e-01  
  2  +3.6853e-01  +1.2938e+00  9.25e-01  6.70e-02  8.52e-01  1.95e-02  1.76e-01  9.26e-01  
  3  +2.7336e-01  +6.6179e-01  3.88e-01  2.20e-02  2.84e-01  7.41e-03  6.66e-02  7.89e-01  
  4  +2.1818e-01  +3.6133e-01  1.43e-01  6.91e-03  9.09e-02  2.80e-03  2.35e-02  6.93e-01  
  5  +1.8503e-01  +2.0234e-01  1.73e-02  8.12e-04  1.06e-02  2.69e-04  3.00e-03  8.87e-01  
  6  +1.8058e-01  +1.8110e-01  5.18e-04  2.47e-05  3.18e-04  5.08e-06  9.34e-05  9.69e-01  
  7  +1.8041e-01  +1.8045e-01  3.38e-05  1.69e-06  2.08e-05  1.81e-07  7.76e-06  9.38e-01  
  8  +1.8040e-01  +1.8040e-01  3.63e-07  1.81e-08  2.22e-07  1.97e-09  8.57e-08  9.89e-01  
  9  +1.8040e-01  +1.8040e-01  3.63e-09  1.81e-10  2.23e-09  1.97e-11  8.58e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 281.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:44 PM: Optimal value: 1.804e-01
(CVXPY) Sep 20 03:10:44 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 03:10:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:44 PM: Your problem has 70 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 70
  constraints   = 95
  nnz(P)        = 0
  nnz(A)        = 425
  cones (total) = 1
    : Nonnegative = 1,  numel = 95

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7651e-01  +2.6821e+01  2.63e+01  8.58e-01  6.15e+00  1.00e+00  1.11e+00   ------   
  1  +4.7307e-01  +5.7687e+00  5.30e+00  3.74e-01  3.27e+00  3.88e-03  5.97e-01  6.13e-01  
  2  +3.1420e-01  +1.6651e+00  1.35e+00  8.77e-02  1.05e+00  2.19e-02  2.21e-01  8.38e-01  
  3  +2.0768e-01  +5.3880e-01  3.31e-01  1.82e-02  2.30e-01  6.38e-03  5.37e-02  8.68e-01  
  4  +1.5128e-01  +3.4126e-01  1.90e-01  8.83e-03  1.17e-01  3.60e-03  2.84e-02  6.49e-01  
  5  +1.1026e-01  +1.4340e-01  3.31e-02  1.45e-03  1.91e-02  5.70e-04  5.14e-03  8.30e-01  
  6  +1.0099e-01  +1.0181e-01  8.16e-04  3.63e-05  4.71e-04  9.35e-06  1.33e-04  9.75e-01  
  7  +1.0074e-01  +1.0081e-01  7.94e-05  3.85e-06  4.67e-05  4.96e-07  1.60e-05  8.95e-01  
  8  +1.0070e-01  +1.0070e-01  1.54e-06  7.57e-08  9.08e-07  1.13e-08  3.31e-07  9.84e-01  
  9  +1.0070e-01  +1.0070e-01  1.54e-08  7.57e-10  9.08e-09  1.13e-10  3.31e-09  9.90e-01  
 10  +1.0070e-01  +1.0070e-01  1.54e-10  7.57e-12  9.08e-11  1.13e-12  3.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 331.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:44 PM: Optimal value: 1.007e-01
(CVXPY) Sep 20 03:10:44 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 03:10:44 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Iteration: 4, Objective: 0.1007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:44 PM: Your problem has 80 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Finished problem compilation (took 2.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 80
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 458
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6951e-01  +2.6826e+01  2.64e+01  8.65e-01  5.96e+00  1.00e+00  1.11e+00   ------   
  1  +4.1088e-01  +5.8648e+00  5.45e+00  3.75e-01  3.11e+00  4.05e-03  5.87e-01  6.05e-01  
  2  +2.2289e-01  +1.6904e+00  1.47e+00  9.11e-02  1.01e+00  2.15e-02  2.22e-01  8.09e-01  
  3  +1.4945e-01  +5.4915e-01  4.00e-01  2.45e-02  2.85e-01  6.88e-03  6.89e-02  8.10e-01  
  4  +7.9724e-02  +2.1463e-01  1.35e-01  7.02e-03  8.57e-02  2.49e-03  2.21e-02  8.02e-01  
  5  +5.2296e-02  +8.8617e-02  3.63e-02  1.77e-03  2.19e-02  5.02e-04  5.89e-03  8.47e-01  
  6  +4.1211e-02  +4.2055e-02  8.44e-04  4.11e-05  5.05e-04  7.01e-06  1.41e-04  9.77e-01  
  7  +4.0923e-02  +4.0975e-02  5.12e-05  2.78e-06  3.20e-05  1.62e-07  1.06e-05  9.30e-01  
  8  +4.0900e-02  +4.0901e-02  5.98e-07  3.31e-08  3.77e-07  2.36e-09  1.30e-07  9.89e-01  
  9  +4.0900e-02  +4.0900e-02  5.98e-09  3.31e-10  3.77e-09  2.36e-11  1.30e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 375.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:44 PM: Optimal value: 4.090e-02
(CVXPY) Sep 20 03:10:44 PM: Compilation took 2.000e-03 seconds
(CVXPY) Sep 20 03:10:44 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 5, Objective: 0.0409
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:44 PM: Your problem has 81 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:44 PM: Finished problem compilation (took 2.618e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 464
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6909e-01  +2.6831e+01  2.64e+01  8.65e-01  5.96e+00  1.00e+00  1.11e+00   ------   
  1  +4.0767e-01  +5.8733e+00  5.47e+00  3.76e-01  3.11e+00  4.05e-03  5.87e-01  6.04e-01  
  2  +2.1110e-01  +1.6890e+00  1.48e+00  9.04e-02  1.00e+00  2.17e-02  2.20e-01  8.12e-01  
  3  +1.4315e-01  +4.5815e-01  3.15e-01  1.97e-02  2.28e-01  5.73e-03  5.58e-02  8.70e-01  
  4  +8.4759e-02  +2.3833e-01  1.54e-01  8.16e-03  1.01e-01  2.73e-03  2.50e-02  7.27e-01  
  5  +5.1917e-02  +8.9347e-02  3.74e-02  1.85e-03  2.30e-02  5.94e-04  6.06e-03  8.10e-01  
  6  +4.1196e-02  +4.2035e-02  8.39e-04  4.18e-05  5.12e-04  8.08e-06  1.41e-04  9.78e-01  
  7  +4.0921e-02  +4.0973e-02  5.20e-05  2.91e-06  3.32e-05  2.13e-07  1.08e-05  9.28e-01  
  8  +4.0900e-02  +4.0901e-02  6.11e-07  3.47e-08  3.93e-07  2.85e-09  1.32e-07  9.88e-01  
  9  +4.0900e-02  +4.0900e-02  6.11e-09  3.47e-10  3.93e-09  2.85e-11  1.32e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 368.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:44 PM: Optimal value: 4.090e-02
(CVXPY) Sep 20 03:10:44 PM: Compilation took 2.618e-03 seconds
(CVXPY) Sep 20 03:10:44 PM: Solver (including time spent in interface) took 1.004e-03 seconds
FULL MODEL:
  Accruacy: 0.96
  Our objective: 0.92

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0)                       <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x6 = 1)            <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 0)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 1)                       <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x5 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1)                       <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.9667599201202393
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 4
  Shortest hamming distance: 1
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

