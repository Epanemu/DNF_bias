Command:
python test_script.py -s linear_dependence -d 5 -n 500 --seed 56 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.34400000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.4
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:31 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Finished problem compilation (took 4.951e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +2.5111e+02  2.51e+02  9.33e-01  2.02e+01  1.00e+00  1.01e+00   ------   
  1  +5.9821e-01  +5.0521e+01  4.99e+01  3.43e-01  1.15e+01  3.99e-03  5.06e-01  6.46e-01  
  2  +5.4129e-01  +7.0917e+00  6.55e+00  1.11e-01  4.60e+00  1.03e-02  2.18e-01  8.27e-01  
  3  +5.0023e-01  +1.5100e+00  1.01e+00  2.97e-02  1.18e+00  2.46e-03  1.75e-01  6.39e-01  
  4  +4.9327e-01  +9.6495e-01  4.72e-01  1.01e-02  4.20e-01  3.12e-03  3.67e-02  8.45e-01  
  5  +4.5111e-01  +8.2402e-01  3.73e-01  2.02e-03  8.53e-02  1.20e-02  6.07e-03  8.52e-01  
  6  +4.2728e-01  +6.7020e-01  2.43e-01  1.21e-03  5.03e-02  6.03e-03  4.11e-03  3.81e-01  
  7  +3.9642e-01  +4.9054e-01  9.41e-02  4.48e-04  1.85e-02  5.21e-05  1.89e-03  8.45e-01  
  8  +3.7638e-01  +3.9237e-01  1.60e-02  7.27e-05  2.99e-03  7.17e-06  3.48e-04  8.31e-01  
  9  +3.7237e-01  +3.7329e-01  9.24e-04  4.17e-06  1.72e-04  6.50e-07  2.06e-05  9.90e-01  
 10  +3.7210e-01  +3.7211e-01  9.23e-06  4.17e-08  1.71e-06  6.49e-09  2.06e-07  9.90e-01  
 11  +3.7210e-01  +3.7210e-01  9.23e-08  4.17e-10  1.71e-08  6.49e-11  2.06e-09  9.90e-01  
 12  +3.7210e-01  +3.7210e-01  9.23e-10  4.17e-12  1.71e-10  6.49e-13  2.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5626ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:31 PM: Optimal value: 3.721e-01
(CVXPY) Sep 20 03:07:31 PM: Compilation took 4.951e-03 seconds
(CVXPY) Sep 20 03:07:31 PM: Solver (including time spent in interface) took 1.503e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3721
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:31 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Finished problem compilation (took 4.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2555
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9882e-01  +2.5109e+02  2.51e+02  9.34e-01  2.14e+01  1.00e+00  1.01e+00   ------   
  1  +5.9459e-01  +5.0700e+01  5.01e+01  3.48e-01  1.22e+01  3.98e-03  5.09e-01  6.44e-01  
  2  +5.3759e-01  +6.6885e+00  6.15e+00  1.05e-01  4.57e+00  1.07e-02  2.06e-01  8.64e-01  
  3  +4.9861e-01  +1.4315e+00  9.33e-01  2.74e-02  1.17e+00  2.93e-03  1.43e-01  8.57e-01  
  4  +4.8084e-01  +1.1867e+00  7.06e-01  9.36e-03  4.19e-01  7.54e-03  2.81e-02  8.53e-01  
  5  +4.4157e-01  +8.7609e-01  4.35e-01  2.51e-03  1.13e-01  1.18e-02  7.26e-03  7.55e-01  
  6  +4.3418e-01  +8.7836e-01  4.44e-01  1.96e-03  8.85e-02  1.24e-02  5.50e-03  3.90e-01  
  7  +4.2769e-01  +8.1778e-01  3.90e-01  1.87e-03  8.39e-02  8.11e-03  5.44e-03  1.25e-01  
  8  +3.9167e-01  +6.2796e-01  2.36e-01  8.91e-04  3.97e-02  4.42e-03  2.73e-03  6.04e-01  
  9  +3.6282e-01  +4.8213e-01  1.19e-01  4.47e-04  1.97e-02  1.74e-03  1.51e-03  4.91e-01  
 10  +3.3238e-01  +3.4357e-01  1.12e-02  4.18e-05  1.82e-03  3.76e-05  1.62e-04  9.19e-01  
 11  +3.2852e-01  +3.2959e-01  1.07e-03  3.98e-06  1.74e-04  1.49e-06  1.60e-05  9.90e-01  
 12  +3.2810e-01  +3.2812e-01  1.10e-05  4.10e-08  1.79e-06  1.52e-08  1.65e-07  9.90e-01  
 13  +3.2810e-01  +3.2810e-01  1.10e-07  4.10e-10  1.79e-08  1.52e-10  1.65e-09  9.90e-01  
 14  +3.2810e-01  +3.2810e-01  1.10e-09  4.10e-12  1.79e-10  1.52e-12  1.65e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0139ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:31 PM: Optimal value: 3.281e-01
(CVXPY) Sep 20 03:07:31 PM: Compilation took 4.004e-03 seconds
(CVXPY) Sep 20 03:07:31 PM: Solver (including time spent in interface) took 2.097e-03 seconds
Iteration: 2, Objective: 0.3281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:31 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2800
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9857e-01  +2.5127e+02  2.51e+02  9.35e-01  2.15e+01  1.00e+00  1.01e+00   ------   
  1  +5.9131e-01  +5.0857e+01  5.03e+01  3.52e-01  1.22e+01  3.98e-03  5.12e-01  6.42e-01  
  2  +5.3468e-01  +6.3739e+00  5.84e+00  9.89e-02  4.32e+00  1.11e-02  1.96e-01  8.94e-01  
  3  +4.9889e-01  +1.6235e+00  1.12e+00  3.19e-02  1.37e+00  3.94e-03  1.24e-01  8.70e-01  
  4  +4.5729e-01  +1.2570e+00  8.00e-01  5.01e-03  2.30e-01  1.68e-02  1.34e-02  9.55e-01  
  5  +4.2583e-01  +1.0841e+00  6.58e-01  2.91e-03  1.33e-01  1.69e-02  7.93e-03  4.46e-01  
  6  +3.7738e-01  +6.4911e-01  2.72e-01  1.18e-03  5.25e-02  8.81e-04  3.66e-03  7.32e-01  
  7  +3.4042e-01  +4.7024e-01  1.30e-01  5.40e-04  2.37e-02  2.79e-04  1.91e-03  6.30e-01  
  8  +3.1293e-01  +3.4618e-01  3.33e-02  1.37e-04  5.96e-03  3.13e-05  5.55e-04  9.90e-01  
  9  +3.0439e-01  +3.1078e-01  6.39e-03  2.61e-05  1.14e-03  5.90e-06  1.13e-04  8.21e-01  
 10  +3.0254e-01  +3.0321e-01  6.66e-04  2.72e-06  1.18e-04  6.26e-07  1.20e-05  9.90e-01  
 11  +3.0230e-01  +3.0231e-01  6.73e-06  2.75e-08  1.19e-06  6.32e-09  1.21e-07  9.90e-01  
 12  +3.0230e-01  +3.0230e-01  6.73e-08  2.75e-10  1.19e-08  6.32e-11  1.21e-09  9.90e-01  
 13  +3.0230e-01  +3.0230e-01  6.73e-10  2.75e-12  1.19e-10  6.32e-13  1.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8943ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:31 PM: Optimal value: 3.023e-01
(CVXPY) Sep 20 03:07:31 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 03:07:31 PM: Solver (including time spent in interface) took 2.009e-03 seconds
Iteration: 3, Objective: 0.3023
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:31 PM: Your problem has 288 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Finished problem compilation (took 3.698e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 288
  constraints   = 538
  nnz(P)        = 0
  nnz(A)        = 2945
  cones (total) = 1
    : Nonnegative = 1,  numel = 538

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9852e-01  +2.5164e+02  2.51e+02  9.35e-01  2.16e+01  1.00e+00  1.01e+00   ------   
  1  +5.8987e-01  +5.0950e+01  5.04e+01  3.54e-01  1.21e+01  3.98e-03  5.14e-01  6.42e-01  
  2  +5.3368e-01  +6.2676e+00  5.73e+00  9.69e-02  4.21e+00  1.12e-02  1.93e-01  9.04e-01  
  3  +4.9921e-01  +1.7284e+00  1.23e+00  3.39e-02  1.47e+00  4.40e-03  1.20e-01  8.54e-01  
  4  +4.6220e-01  +1.7269e+00  1.26e+00  8.16e-03  3.75e-01  1.72e-02  2.12e-02  9.19e-01  
  5  +4.1651e-01  +1.2084e+00  7.92e-01  3.33e-03  1.52e-01  1.42e-02  9.05e-03  6.07e-01  
  6  +3.6666e-01  +6.3362e-01  2.67e-01  1.19e-03  5.31e-02  1.15e-04  3.83e-03  7.85e-01  
  7  +3.3751e-01  +4.8324e-01  1.46e-01  6.23e-04  2.74e-02  9.16e-05  2.23e-03  5.89e-01  
  8  +3.1484e-01  +3.6507e-01  5.02e-02  2.15e-04  9.39e-03  5.47e-05  8.75e-04  9.90e-01  
  9  +3.0304e-01  +3.1163e-01  8.59e-03  3.68e-05  1.60e-03  8.76e-06  1.63e-04  8.25e-01  
 10  +3.0215e-01  +3.0764e-01  5.49e-03  2.31e-05  1.00e-03  5.28e-06  1.04e-04  6.88e-01  
 11  +3.0049e-01  +3.0075e-01  2.61e-04  1.10e-06  4.76e-05  2.37e-07  5.01e-06  9.78e-01  
 12  +3.0040e-01  +3.0040e-01  2.61e-06  1.10e-08  4.77e-07  2.37e-09  5.02e-08  9.90e-01  
 13  +3.0040e-01  +3.0040e-01  2.61e-08  1.10e-10  4.77e-09  2.37e-11  5.02e-10  9.90e-01  
 14  +3.0040e-01  +3.0040e-01  2.61e-10  1.10e-12  4.77e-11  2.37e-13  5.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3001ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:31 PM: Optimal value: 3.004e-01
(CVXPY) Sep 20 03:07:31 PM: Compilation took 3.698e-03 seconds
(CVXPY) Sep 20 03:07:31 PM: Solver (including time spent in interface) took 2.309e-03 seconds
Iteration: 4, Objective: 0.3004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:31 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:31 PM: Finished problem compilation (took 3.848e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 2973
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9852e-01  +2.5164e+02  2.51e+02  9.35e-01  2.16e+01  1.00e+00  1.01e+00   ------   
  1  +5.8974e-01  +5.0965e+01  5.04e+01  3.54e-01  1.21e+01  3.98e-03  5.14e-01  6.41e-01  
  2  +5.3347e-01  +6.2441e+00  5.71e+00  9.66e-02  4.19e+00  1.13e-02  1.93e-01  9.06e-01  
  3  +4.9921e-01  +1.7326e+00  1.23e+00  3.39e-02  1.47e+00  4.44e-03  1.19e-01  8.56e-01  
  4  +4.6286e-01  +1.7198e+00  1.26e+00  8.18e-03  3.76e-01  1.70e-02  2.13e-02  9.16e-01  
  5  +4.1745e-01  +1.2244e+00  8.07e-01  3.40e-03  1.56e-01  1.45e-02  9.24e-03  5.98e-01  
  6  +3.6692e-01  +6.3409e-01  2.67e-01  1.19e-03  5.30e-02  1.18e-04  3.81e-03  7.88e-01  
  7  +3.3899e-01  +4.9112e-01  1.52e-01  6.52e-04  2.87e-02  1.04e-04  2.32e-03  6.09e-01  
  8  +3.1466e-01  +3.6469e-01  5.00e-02  2.14e-04  9.35e-03  5.43e-05  8.71e-04  9.90e-01  
  9  +3.0305e-01  +3.1173e-01  8.68e-03  3.72e-05  1.62e-03  8.86e-06  1.64e-04  8.22e-01  
 10  +3.0233e-01  +3.0843e-01  6.10e-03  2.57e-05  1.12e-03  5.89e-06  1.15e-04  6.35e-01  
 11  +3.0070e-01  +3.0163e-01  9.32e-04  3.93e-06  1.71e-04  8.96e-07  1.79e-05  8.47e-01  
 12  +3.0040e-01  +3.0042e-01  1.15e-05  4.84e-08  2.10e-06  1.09e-08  2.21e-07  9.88e-01  
 13  +3.0040e-01  +3.0040e-01  1.15e-07  4.84e-10  2.10e-08  1.09e-10  2.21e-09  9.90e-01  
 14  +3.0040e-01  +3.0040e-01  1.15e-09  4.84e-12  2.10e-10  1.09e-12  2.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.343ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:31 PM: Optimal value: 3.004e-01
(CVXPY) Sep 20 03:07:31 PM: Compilation took 3.848e-03 seconds
(CVXPY) Sep 20 03:07:31 PM: Solver (including time spent in interface) took 2.435e-03 seconds
FULL MODEL:
  Accruacy: 0.7
  Our objective: 0.4

IF 
    (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.344)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5718026161193848
Best over terms:
  Our final objective: 0.344
    Its accruacy: 0.672
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.344
  Highest accruacy: 0.672
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

