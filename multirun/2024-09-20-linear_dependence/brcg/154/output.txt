Command:
python test_script.py -s linear_dependence -d 4 -n 10000 --seed 21 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.3032
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.30319999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:38 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:38 PM: Finished problem compilation (took 1.354e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0010e+03  5.00e+03  9.84e-01  8.62e+01  1.00e+00  1.00e+00   ------   
  1  +6.0817e-01  +9.6883e+02  9.68e+02  3.38e-01  4.80e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5097e-01  +1.5075e+02  1.50e+02  1.40e-01  2.43e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1052e-01  +3.1989e+01  3.15e+01  1.11e-01  1.88e+01  1.74e-05  2.25e-01  6.87e-02  
  4  +5.0000e-01  +1.1532e+00  6.53e-01  4.38e-03  7.54e-01  4.87e-06  1.40e-01  9.68e-01  
  5  +4.9959e-01  +9.2113e-01  4.22e-01  2.71e-03  4.69e-01  1.08e-05  2.61e-02  8.76e-01  
  6  +4.7578e-01  +9.4905e-01  4.73e-01  2.27e-04  4.00e-02  4.47e-04  6.51e-04  9.81e-01  
  7  +4.3504e-01  +6.0645e-01  1.71e-01  4.14e-05  7.24e-03  3.58e-04  1.29e-04  8.24e-01  
  8  +4.0126e-01  +4.3718e-01  3.59e-02  7.98e-06  1.38e-03  3.19e-05  3.38e-05  8.70e-01  
  9  +3.9306e-01  +3.9451e-01  1.45e-03  3.22e-07  5.59e-05  1.10e-06  1.46e-06  9.59e-01  
 10  +3.9270e-01  +3.9272e-01  1.45e-05  3.22e-09  5.58e-07  1.09e-08  1.46e-08  9.90e-01  
 11  +3.9270e-01  +3.9270e-01  1.45e-07  3.22e-11  5.58e-09  1.09e-10  1.46e-10  9.90e-01  
 12  +3.9270e-01  +3.9270e-01  1.45e-09  3.22e-13  5.58e-11  1.09e-12  1.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.7516ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:38 PM: Optimal value: 3.927e-01
(CVXPY) Sep 20 03:06:38 PM: Compilation took 1.354e-02 seconds
(CVXPY) Sep 20 03:06:38 PM: Solver (including time spent in interface) took 3.143e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3927
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:38 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:38 PM: Finished problem compilation (took 1.355e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 44576
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +5.0015e+03  5.00e+03  9.84e-01  9.24e+01  1.00e+00  1.00e+00   ------   
  1  +6.0791e-01  +9.6946e+02  9.69e+02  3.39e-01  5.15e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5063e-01  +1.5001e+02  1.49e+02  1.39e-01  2.59e+01  8.27e-03  2.27e-01  7.28e-01  
  3  +5.1034e-01  +3.1611e+01  3.11e+01  1.10e-01  2.00e+01  1.74e-05  2.24e-01  7.21e-02  
  4  +5.0029e-01  +2.0891e+00  1.59e+00  1.06e-02  1.94e+00  5.69e-06  1.76e-01  5.33e-01  
  5  +5.0004e-01  +1.0818e+00  5.82e-01  3.88e-03  7.16e-01  3.21e-06  6.55e-02  6.93e-01  
  6  +4.9794e-01  +1.7058e+00  1.21e+00  2.74e-03  5.21e-01  4.21e-05  7.79e-03  9.73e-01  
  7  +4.8483e-01  +1.4237e+00  9.39e-01  3.95e-04  7.55e-02  2.19e-04  1.01e-03  8.70e-01  
  8  +4.7590e-01  +1.2709e+00  7.95e-01  2.37e-04  4.52e-02  2.35e-04  6.06e-04  4.56e-01  
  9  +4.8946e-01  +1.0920e+00  6.03e-01  1.82e-04  3.50e-02  2.30e-05  4.50e-04  8.37e-01  
 10  +4.8838e-01  +1.0290e+00  5.41e-01  1.64e-04  3.15e-02  2.23e-05  4.06e-04  4.28e-01  
 11  +4.7673e-01  +9.4435e-01  4.68e-01  1.07e-04  2.05e-02  2.50e-05  2.70e-04  4.63e-01  
 12  +4.3535e-01  +7.0098e-01  2.66e-01  4.78e-05  9.05e-03  1.56e-05  1.29e-04  7.62e-01  
 13  +3.6991e-01  +4.2090e-01  5.10e-02  9.59e-06  1.79e-03  1.20e-07  3.22e-05  9.42e-01  
 14  +3.4944e-01  +3.5144e-01  2.00e-03  3.63e-07  6.75e-05  1.77e-08  1.33e-06  9.64e-01  
 15  +3.4851e-01  +3.4853e-01  2.01e-05  3.65e-09  6.79e-07  1.78e-10  1.35e-08  9.90e-01  
 16  +3.4850e-01  +3.4850e-01  2.01e-07  3.65e-11  6.79e-09  1.78e-12  1.35e-10  9.90e-01  
 17  +3.4850e-01  +3.4850e-01  2.01e-09  3.65e-13  6.79e-11  1.79e-14  1.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.553ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:38 PM: Optimal value: 3.485e-01
(CVXPY) Sep 20 03:06:38 PM: Compilation took 1.355e-02 seconds
(CVXPY) Sep 20 03:06:38 PM: Solver (including time spent in interface) took 5.159e-02 seconds
FULL MODEL:
  Accruacy: 0.6516
  Our objective: 0.3032

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4094328880310059
Best over terms:
  Our final objective: 0.3032
    Its accruacy: 0.6516
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.3032
  Highest accruacy: 0.6516
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

