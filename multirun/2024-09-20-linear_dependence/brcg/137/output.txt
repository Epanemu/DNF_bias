Command:
python test_script.py -s linear_dependence -d 4 -n 500 --seed 73 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.34
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.33999999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:05 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:05 PM: Finished problem compilation (took 4.747e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +2.5106e+02  2.51e+02  9.32e-01  1.87e+01  1.00e+00  1.01e+00   ------   
  1  +6.0673e-01  +4.8869e+01  4.83e+01  3.19e-01  1.02e+01  4.09e-03  4.77e-01  6.68e-01  
  2  +5.4602e-01  +7.4716e+00  6.93e+00  1.09e-01  4.22e+00  8.58e-03  2.11e-01  7.71e-01  
  3  +5.0020e-01  +1.5085e+00  1.01e+00  2.95e-02  1.09e+00  2.98e-03  1.77e-01  5.55e-01  
  4  +4.9330e-01  +9.2269e-01  4.29e-01  9.19e-03  3.55e-01  3.65e-03  3.37e-02  8.65e-01  
  5  +4.5426e-01  +8.0348e-01  3.49e-01  1.95e-03  7.69e-02  1.39e-02  5.88e-03  8.40e-01  
  6  +4.3270e-01  +6.5651e-01  2.24e-01  1.18e-03  4.60e-02  6.41e-03  4.05e-03  3.79e-01  
  7  +4.0085e-01  +4.7235e-01  7.15e-02  3.52e-04  1.35e-02  5.59e-05  1.53e-03  8.26e-01  
  8  +3.8292e-01  +3.8577e-01  2.85e-03  1.31e-05  5.04e-04  5.16e-07  6.59e-05  9.68e-01  
  9  +3.8211e-01  +3.8214e-01  2.91e-05  1.34e-07  5.15e-06  5.26e-09  6.79e-07  9.90e-01  
 10  +3.8210e-01  +3.8210e-01  2.91e-07  1.34e-09  5.15e-08  5.26e-11  6.79e-09  9.90e-01  
 11  +3.8210e-01  +3.8210e-01  2.91e-09  1.34e-11  5.15e-10  5.26e-13  6.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2549ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:05 PM: Optimal value: 3.821e-01
(CVXPY) Sep 20 03:06:05 PM: Compilation took 4.747e-03 seconds
(CVXPY) Sep 20 03:06:05 PM: Solver (including time spent in interface) took 2.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:05 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:05 PM: Finished problem compilation (took 3.013e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 2306
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9850e-01  +2.5116e+02  2.51e+02  9.33e-01  2.03e+01  1.00e+00  1.01e+00   ------   
  1  +6.0146e-01  +4.9373e+01  4.88e+01  3.27e-01  1.11e+01  4.07e-03  4.87e-01  6.62e-01  
  2  +5.4179e-01  +7.0338e+00  6.49e+00  1.03e-01  4.29e+00  9.30e-03  2.02e-01  8.15e-01  
  3  +4.9914e-01  +1.5026e+00  1.00e+00  2.94e-02  1.18e+00  3.41e-03  1.53e-01  7.20e-01  
  4  +4.8685e-01  +1.0731e+00  5.86e-01  9.35e-03  3.93e-01  6.30e-03  2.89e-02  8.78e-01  
  5  +4.6851e-01  +9.6564e-01  4.97e-01  4.18e-03  1.78e-01  1.03e-02  1.20e-02  5.96e-01  
  6  +4.6918e-01  +9.7063e-01  5.01e-01  4.06e-03  1.73e-01  8.56e-03  1.16e-02  2.17e-01  
  7  +4.5491e-01  +9.2975e-01  4.75e-01  2.64e-03  1.13e-01  9.71e-03  7.45e-03  4.59e-01  
  8  +4.1671e-01  +7.1879e-01  3.02e-01  1.21e-03  5.14e-02  3.85e-03  3.54e-03  7.84e-01  
  9  +3.6736e-01  +4.8248e-01  1.15e-01  4.29e-04  1.79e-02  8.06e-04  1.43e-03  6.57e-01  
 10  +3.3421e-01  +3.4451e-01  1.03e-02  3.86e-05  1.59e-03  1.73e-05  1.50e-04  9.20e-01  
 11  +3.3090e-01  +3.3294e-01  2.04e-03  7.62e-06  3.14e-04  2.43e-06  3.06e-05  9.88e-01  
 12  +3.3011e-01  +3.3014e-01  2.69e-05  1.01e-07  4.15e-06  3.19e-08  4.07e-07  9.87e-01  
 13  +3.3010e-01  +3.3010e-01  2.69e-07  1.01e-09  4.15e-08  3.19e-10  4.07e-09  9.90e-01  
 14  +3.3010e-01  +3.3010e-01  2.69e-09  1.01e-11  4.15e-10  3.19e-12  4.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6789ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:05 PM: Optimal value: 3.301e-01
(CVXPY) Sep 20 03:06:05 PM: Compilation took 3.013e-03 seconds
(CVXPY) Sep 20 03:06:05 PM: Solver (including time spent in interface) took 2.501e-03 seconds
FULL MODEL:
  Accruacy: 0.67
  Our objective: 0.33999999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.34)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3632283210754395
Best over terms:
  Our final objective: 0.33999999999999997
    Its accruacy: 0.67
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.33999999999999997
  Highest accruacy: 0.67
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

