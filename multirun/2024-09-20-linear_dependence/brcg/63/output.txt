Command:
python test_script.py -s linear_dependence -d 2 -n 1000 --seed 34 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.55
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 2.

Computed total variation: 0.55
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:52 PM: Your problem has 505 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:52 PM: Finished problem compilation (took 5.164e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 505
  constraints   = 1005
  nnz(P)        = 0
  nnz(A)        = 2505
  cones (total) = 1
    : Nonnegative = 1,  numel = 1005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9879e-01  +5.0167e+02  5.01e+02  9.47e-01  2.23e+01  1.00e+00  1.01e+00   ------   
  1  +6.3523e-01  +8.7736e+01  8.71e+01  2.58e-01  1.05e+01  4.49e-03  3.90e-01  7.26e-01  
  2  +5.5256e-01  +1.5263e+01  1.47e+01  1.07e-01  5.02e+00  5.59e-03  1.94e-01  6.53e-01  
  3  +4.9586e-01  +2.6291e+00  2.13e+00  3.81e-02  1.70e+00  8.15e-03  1.39e-01  7.75e-01  
  4  +3.9400e-01  +3.2202e+00  2.83e+00  7.03e-03  3.44e-01  7.20e-02  1.64e-02  9.09e-01  
  5  +3.6910e-01  +1.5518e+00  1.18e+00  3.14e-03  1.51e-01  6.41e-04  7.88e-03  7.06e-01  
  6  +2.7842e-01  +5.5595e-01  2.78e-01  7.28e-04  3.34e-02  4.85e-06  2.44e-03  7.50e-01  
  7  +2.2871e-01  +2.5520e-01  2.65e-02  7.43e-05  3.33e-03  9.38e-06  4.25e-04  9.50e-01  
  8  +2.2516e-01  +2.2550e-01  3.49e-04  9.80e-07  4.38e-05  9.27e-08  5.94e-06  9.86e-01  
  9  +2.2510e-01  +2.2510e-01  3.49e-06  9.79e-09  4.38e-07  9.26e-10  5.94e-08  9.90e-01  
 10  +2.2510e-01  +2.2510e-01  3.49e-08  9.79e-11  4.38e-09  9.26e-12  5.94e-10  9.90e-01  
 11  +2.2510e-01  +2.2510e-01  3.49e-10  9.79e-13  4.38e-11  9.26e-14  5.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4711ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:52 PM: Optimal value: 2.251e-01
(CVXPY) Sep 20 03:03:52 PM: Compilation took 5.164e-03 seconds
(CVXPY) Sep 20 03:03:52 PM: Solver (including time spent in interface) took 5.291e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.2251
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:52 PM: Your problem has 506 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:52 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 506
  constraints   = 1006
  nnz(P)        = 0
  nnz(A)        = 2706
  cones (total) = 1
    : Nonnegative = 1,  numel = 1006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9870e-01  +5.0173e+02  5.01e+02  9.48e-01  2.32e+01  1.00e+00  1.01e+00   ------   
  1  +6.3439e-01  +8.8067e+01  8.74e+01  2.59e-01  1.09e+01  4.48e-03  3.93e-01  7.24e-01  
  2  +5.5249e-01  +1.5273e+01  1.47e+01  1.07e-01  5.20e+00  5.69e-03  1.94e-01  6.57e-01  
  3  +4.9520e-01  +2.5116e+00  2.02e+00  3.62e-02  1.68e+00  8.23e-03  1.35e-01  8.22e-01  
  4  +3.8964e-01  +3.0469e+00  2.66e+00  6.78e-03  3.42e-01  7.36e-02  1.60e-02  9.03e-01  
  5  +3.7368e-01  +2.2648e+00  1.89e+00  4.78e-03  2.39e-01  3.84e-02  1.17e-02  3.74e-01  
  6  +3.4704e-01  +1.2909e+00  9.44e-01  2.56e-03  1.25e-01  3.30e-04  6.93e-03  7.66e-01  
  7  +2.6299e-01  +4.5153e-01  1.89e-01  5.06e-04  2.38e-02  2.39e-06  1.91e-03  7.89e-01  
  8  +2.2690e-01  +2.3947e-01  1.26e-02  3.54e-05  1.64e-03  4.17e-06  2.08e-04  9.75e-01  
  9  +2.2512e-01  +2.2526e-01  1.38e-04  3.87e-07  1.79e-05  4.24e-08  2.36e-06  9.89e-01  
 10  +2.2510e-01  +2.2510e-01  1.38e-06  3.87e-09  1.79e-07  4.24e-10  2.36e-08  9.90e-01  
 11  +2.2510e-01  +2.2510e-01  1.38e-08  3.87e-11  1.79e-09  4.24e-12  2.36e-10  9.90e-01  
 12  +2.2510e-01  +2.2510e-01  1.38e-10  3.87e-13  1.79e-11  4.24e-14  2.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7116ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:52 PM: Optimal value: 2.251e-01
(CVXPY) Sep 20 03:03:52 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:52 PM: Solver (including time spent in interface) took 1.001e-02 seconds
Iteration: 2, Objective: 0.2251
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:52 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:52 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 2891
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9857e-01  +5.0173e+02  5.01e+02  9.48e-01  2.38e+01  1.00e+00  1.01e+00   ------   
  1  +6.2456e-01  +9.0491e+01  8.99e+01  2.78e-01  1.18e+01  4.34e-03  4.16e-01  7.10e-01  
  2  +5.5253e-01  +1.5454e+01  1.49e+01  1.09e-01  5.43e+00  6.29e-03  1.97e-01  6.86e-01  
  3  +4.9463e-01  +2.3002e+00  1.81e+00  3.34e-02  1.59e+00  7.28e-03  1.36e-01  8.70e-01  
  4  +3.7598e-01  +2.9677e+00  2.59e+00  6.63e-03  3.43e-01  7.37e-02  1.59e-02  9.10e-01  
  5  +3.6109e-01  +2.2549e+00  1.89e+00  4.75e-03  2.44e-01  4.21e-02  1.18e-02  3.48e-01  
  6  +3.1467e-01  +9.3827e-01  6.24e-01  1.65e-03  8.22e-02  3.48e-04  4.80e-03  7.55e-01  
  7  +2.4539e-01  +3.4761e-01  1.02e-01  2.84e-04  1.36e-02  2.13e-06  1.28e-03  8.19e-01  
  8  +2.2583e-01  +2.2996e-01  4.14e-03  1.16e-05  5.54e-04  9.76e-07  6.97e-05  9.83e-01  
  9  +2.2511e-01  +2.2515e-01  4.44e-05  1.25e-07  5.93e-06  1.04e-08  7.58e-07  9.90e-01  
 10  +2.2510e-01  +2.2510e-01  4.44e-07  1.25e-09  5.93e-08  1.04e-10  7.58e-09  9.90e-01  
 11  +2.2510e-01  +2.2510e-01  4.44e-09  1.25e-11  5.93e-10  1.04e-12  7.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3846ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:52 PM: Optimal value: 2.251e-01
(CVXPY) Sep 20 03:03:52 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:52 PM: Solver (including time spent in interface) took 4.687e-03 seconds
FULL MODEL:
  Accruacy: 0.775
  Our objective: 0.55

IF 
    (x0 = 0) <-- (term's our objective: 0.55)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8146655559539795
Best over terms:
  Our final objective: 0.55
    Its accruacy: 0.775
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.55
  Highest accruacy: 0.775
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

