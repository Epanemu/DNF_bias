Command:
python test_script.py -s linear_dependence -d 4 -n 50 --seed 56 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.44
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.4800000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:37 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:37 PM: Finished problem compilation (took 4.185e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9084e-01  +2.6009e+01  2.55e+01  8.14e-01  5.43e+00  1.00e+00  1.08e+00   ------   
  1  +5.9095e-01  +5.2459e+00  4.65e+00  2.79e-01  2.75e+00  4.05e-03  5.06e-01  6.75e-01  
  2  +5.0131e-01  +1.0420e+00  5.41e-01  5.05e-02  5.77e-01  1.08e-02  1.38e-01  9.31e-01  
  3  +4.1454e-01  +8.4221e-01  4.28e-01  1.73e-02  2.04e-01  1.37e-02  5.61e-02  6.87e-01  
  4  +3.4433e-01  +4.1876e-01  7.44e-02  3.29e-03  3.74e-02  9.33e-05  1.48e-02  8.55e-01  
  5  +3.2134e-01  +3.2513e-01  3.80e-03  1.66e-04  1.87e-03  6.56e-06  8.50e-04  9.48e-01  
  6  +3.2011e-01  +3.2015e-01  3.80e-05  1.66e-06  1.87e-05  6.55e-08  8.57e-06  9.90e-01  
  7  +3.2010e-01  +3.2010e-01  3.80e-07  1.66e-08  1.87e-07  6.55e-10  8.57e-08  9.90e-01  
  8  +3.2010e-01  +3.2010e-01  3.80e-09  1.66e-10  1.87e-09  6.55e-12  8.57e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 185µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:37 PM: Optimal value: 3.201e-01
(CVXPY) Sep 20 03:05:37 PM: Compilation took 4.185e-03 seconds
(CVXPY) Sep 20 03:05:37 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:38 PM: Your problem has 40 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:38 PM: Finished problem compilation (took 1.923e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 65
  nnz(P)        = 0
  nnz(A)        = 233
  cones (total) = 1
    : Nonnegative = 1,  numel = 65

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8336e-01  +2.6084e+01  2.56e+01  8.24e-01  5.69e+00  1.00e+00  1.09e+00   ------   
  1  +5.6297e-01  +5.3286e+00  4.77e+00  2.97e-01  2.87e+00  4.02e-03  5.26e-01  6.63e-01  
  2  +4.7787e-01  +1.1131e+00  6.35e-01  5.48e-02  6.51e-01  1.24e-02  1.48e-01  9.18e-01  
  3  +3.9465e-01  +7.6652e-01  3.72e-01  1.71e-02  2.08e-01  1.11e-02  5.25e-02  7.18e-01  
  4  +3.4686e-01  +5.6614e-01  2.19e-01  8.53e-03  1.04e-01  6.29e-03  2.80e-02  5.19e-01  
  5  +2.8870e-01  +3.1205e-01  2.34e-02  9.06e-04  1.08e-02  5.85e-05  3.29e-03  9.39e-01  
  6  +2.8045e-01  +2.8129e-01  8.41e-04  3.29e-05  3.90e-04  1.83e-06  1.23e-04  9.63e-01  
  7  +2.8013e-01  +2.8019e-01  6.01e-05  2.38e-06  2.79e-05  3.20e-07  1.02e-05  9.51e-01  
  8  +2.8010e-01  +2.8010e-01  1.04e-06  4.13e-08  4.82e-07  6.80e-09  1.94e-07  9.82e-01  
  9  +2.8010e-01  +2.8010e-01  1.04e-08  4.12e-10  4.81e-09  6.79e-11  1.94e-09  9.90e-01  
 10  +2.8010e-01  +2.8010e-01  1.04e-10  4.12e-12  4.81e-11  6.80e-13  1.94e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 247.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:38 PM: Optimal value: 2.801e-01
(CVXPY) Sep 20 03:05:38 PM: Compilation took 1.923e-03 seconds
(CVXPY) Sep 20 03:05:38 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 2, Objective: 0.2801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:38 PM: Your problem has 41 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:38 PM: Finished problem compilation (took 2.783e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 41
  constraints   = 66
  nnz(P)        = 0
  nnz(A)        = 237
  cones (total) = 1
    : Nonnegative = 1,  numel = 66

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8203e-01  +2.6198e+01  2.57e+01  8.26e-01  5.68e+00  1.00e+00  1.10e+00   ------   
  1  +5.5587e-01  +5.3436e+00  4.79e+00  2.98e-01  2.86e+00  4.01e-03  5.31e-01  6.63e-01  
  2  +4.6919e-01  +1.1364e+00  6.67e-01  5.50e-02  6.52e-01  1.25e-02  1.49e-01  9.10e-01  
  3  +3.7485e-01  +8.3252e-01  4.58e-01  1.99e-02  2.41e-01  1.25e-02  6.13e-02  6.77e-01  
  4  +3.0519e-01  +4.7401e-01  1.69e-01  6.86e-03  8.15e-02  3.62e-03  2.40e-02  6.56e-01  
  5  +2.6312e-01  +2.7163e-01  8.52e-03  3.58e-04  4.18e-03  4.85e-05  1.41e-03  9.56e-01  
  6  +2.6040e-01  +2.6093e-01  5.23e-04  2.22e-05  2.58e-04  2.44e-06  9.01e-05  9.37e-01  
  7  +2.6021e-01  +2.6024e-01  2.92e-05  1.25e-06  1.43e-05  1.08e-07  5.93e-06  9.59e-01  
  8  +2.6020e-01  +2.6020e-01  3.12e-07  1.34e-08  1.53e-07  1.40e-09  6.74e-08  9.89e-01  
  9  +2.6020e-01  +2.6020e-01  3.12e-09  1.34e-10  1.53e-09  1.40e-11  6.74e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 187.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:38 PM: Optimal value: 2.602e-01
(CVXPY) Sep 20 03:05:38 PM: Compilation took 2.783e-03 seconds
(CVXPY) Sep 20 03:05:38 PM: Solver (including time spent in interface) took 9.990e-04 seconds
Iteration: 3, Objective: 0.2602
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:38 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:38 PM: Finished problem compilation (took 3.361e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 240
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8172e-01  +2.6258e+01  2.58e+01  8.27e-01  5.65e+00  1.00e+00  1.10e+00   ------   
  1  +5.5202e-01  +5.3458e+00  4.79e+00  2.99e-01  2.84e+00  4.02e-03  5.31e-01  6.64e-01  
  2  +4.6258e-01  +1.0857e+00  6.23e-01  5.01e-02  5.93e-01  1.26e-02  1.38e-01  9.32e-01  
  3  +3.7382e-01  +8.1638e-01  4.43e-01  1.99e-02  2.40e-01  1.19e-02  6.15e-02  6.56e-01  
  4  +3.1304e-01  +5.1282e-01  2.00e-01  8.25e-03  9.78e-02  4.69e-03  2.82e-02  6.07e-01  
  5  +2.6461e-01  +2.7779e-01  1.32e-02  5.63e-04  6.53e-03  6.40e-05  2.16e-03  9.53e-01  
  6  +2.6042e-01  +2.6101e-01  5.86e-04  2.53e-05  2.92e-04  2.36e-06  9.97e-05  9.54e-01  
  7  +2.6022e-01  +2.6025e-01  3.56e-05  1.55e-06  1.77e-05  1.34e-07  7.14e-06  9.53e-01  
  8  +2.6020e-01  +2.6020e-01  4.06e-07  1.77e-08  2.02e-07  1.98e-09  8.73e-08  9.89e-01  
  9  +2.6020e-01  +2.6020e-01  4.07e-09  1.77e-10  2.02e-09  1.99e-11  8.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 223.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:38 PM: Optimal value: 2.602e-01
(CVXPY) Sep 20 03:05:38 PM: Compilation took 3.361e-03 seconds
(CVXPY) Sep 20 03:05:38 PM: Solver (including time spent in interface) took 5.808e-04 seconds
FULL MODEL:
  Accruacy: 0.74
  Our objective: 0.48000000000000004

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.44)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.04)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.9268324375152588
Best over terms:
  Our final objective: 0.44
    Its accruacy: 0.72
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.44
  Highest accruacy: 0.72
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

