Command:
python test_script.py -s linear_dependence -d 2 -n 1000 --seed 56 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6239999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 2.

Computed total variation: 0.6240000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:49 PM: Your problem has 505 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:49 PM: Finished problem compilation (took 7.667e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 505
  constraints   = 1005
  nnz(P)        = 0
  nnz(A)        = 2505
  cones (total) = 1
    : Nonnegative = 1,  numel = 1005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9832e-01  +5.0218e+02  5.02e+02  9.48e-01  2.26e+01  1.00e+00  1.01e+00   ------   
  1  +6.3429e-01  +8.7689e+01  8.71e+01  2.57e-01  1.06e+01  4.49e-03  3.90e-01  7.26e-01  
  2  +5.4977e-01  +1.4601e+01  1.41e+01  1.01e-01  4.85e+00  5.71e-03  1.84e-01  6.80e-01  
  3  +4.9103e-01  +3.7849e+00  3.29e+00  3.87e-02  1.86e+00  1.48e-02  9.32e-02  9.90e-01  
  4  +3.9765e-01  +3.5046e+00  3.11e+00  7.13e-03  3.63e-01  6.91e-02  1.52e-02  8.43e-01  
  5  +3.5329e-01  +1.8054e+00  1.45e+00  3.94e-03  1.95e-01  5.40e-04  9.29e-03  5.85e-01  
  6  +2.4745e-01  +6.2151e-01  3.74e-01  1.06e-03  4.95e-02  1.50e-05  3.43e-03  7.10e-01  
  7  +1.9355e-01  +2.3938e-01  4.58e-02  1.43e-04  6.41e-03  1.67e-05  8.52e-04  9.22e-01  
  8  +1.8825e-01  +1.8926e-01  1.00e-03  3.13e-06  1.40e-04  1.83e-07  2.11e-05  9.77e-01  
  9  +1.8810e-01  +1.8811e-01  9.99e-06  3.11e-08  1.40e-06  1.83e-09  2.11e-07  9.90e-01  
 10  +1.8810e-01  +1.8810e-01  9.99e-08  3.11e-10  1.40e-08  1.83e-11  2.11e-09  9.90e-01  
 11  +1.8810e-01  +1.8810e-01  9.99e-10  3.11e-12  1.40e-10  1.83e-13  2.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.021ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:49 PM: Optimal value: 1.881e-01
(CVXPY) Sep 20 03:03:49 PM: Compilation took 7.667e-03 seconds
(CVXPY) Sep 20 03:03:49 PM: Solver (including time spent in interface) took 1.930e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.1881
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:49 PM: Your problem has 506 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 506
  constraints   = 1006
  nnz(P)        = 0
  nnz(A)        = 2725
  cones (total) = 1
    : Nonnegative = 1,  numel = 1006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9834e-01  +5.0219e+02  5.02e+02  9.48e-01  2.36e+01  1.00e+00  1.01e+00   ------   
  1  +6.3365e-01  +8.8094e+01  8.75e+01  2.60e-01  1.11e+01  4.48e-03  3.94e-01  7.24e-01  
  2  +5.4986e-01  +1.4654e+01  1.41e+01  1.02e-01  5.06e+00  5.82e-03  1.85e-01  6.82e-01  
  3  +4.9104e-01  +3.7495e+00  3.26e+00  3.89e-02  1.94e+00  1.46e-02  9.42e-02  9.90e-01  
  4  +3.9705e-01  +3.4875e+00  3.09e+00  7.14e-03  3.77e-01  6.93e-02  1.53e-02  8.44e-01  
  5  +3.6381e-01  +2.2196e+00  1.86e+00  4.86e-03  2.51e-01  1.72e-02  1.12e-02  4.16e-01  
  6  +3.1815e-01  +1.5274e+00  1.21e+00  3.31e-03  1.67e-01  7.70e-03  8.44e-03  3.21e-01  
  7  +2.6482e-01  +9.2322e-01  6.58e-01  1.95e-03  9.46e-02  2.62e-04  6.25e-03  9.01e-01  
  8  +2.0855e-01  +3.3186e-01  1.23e-01  3.77e-04  1.78e-02  7.32e-06  1.73e-03  8.68e-01  
  9  +1.8933e-01  +1.9728e-01  7.95e-03  2.48e-05  1.16e-03  1.34e-06  1.62e-04  9.43e-01  
 10  +1.8811e-01  +1.8820e-01  8.48e-05  2.65e-07  1.24e-05  1.42e-08  1.80e-06  9.89e-01  
 11  +1.8810e-01  +1.8810e-01  8.48e-07  2.65e-09  1.23e-07  1.42e-10  1.80e-08  9.90e-01  
 12  +1.8810e-01  +1.8810e-01  8.48e-09  2.65e-11  1.23e-09  1.42e-12  1.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1628ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:49 PM: Optimal value: 1.881e-01
(CVXPY) Sep 20 03:03:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:49 PM: Solver (including time spent in interface) took 4.723e-03 seconds
Iteration: 2, Objective: 0.1881
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:49 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 2914
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9803e-01  +5.0221e+02  5.02e+02  9.48e-01  2.43e+01  1.00e+00  1.01e+00   ------   
  1  +6.2344e-01  +9.0434e+01  8.98e+01  2.77e-01  1.20e+01  4.34e-03  4.17e-01  7.11e-01  
  2  +5.4996e-01  +1.4845e+01  1.43e+01  1.03e-01  5.28e+00  6.40e-03  1.87e-01  7.10e-01  
  3  +4.9109e-01  +3.5834e+00  3.09e+00  3.97e-02  2.02e+00  1.31e-02  9.93e-02  9.90e-01  
  4  +3.8665e-01  +3.3730e+00  2.99e+00  6.81e-03  3.70e-01  6.97e-02  1.47e-02  8.61e-01  
  5  +3.4395e-01  +1.7301e+00  1.39e+00  3.80e-03  2.00e-01  5.33e-04  9.12e-03  5.82e-01  
  6  +2.4288e-01  +5.9009e-01  3.47e-01  1.00e-03  4.98e-02  1.46e-05  3.32e-03  7.13e-01  
  7  +1.9291e-01  +2.3224e-01  3.93e-02  1.23e-04  5.91e-03  1.34e-05  7.38e-04  9.26e-01  
  8  +1.8830e-01  +1.8973e-01  1.43e-03  4.46e-06  2.14e-04  3.51e-07  3.00e-05  9.62e-01  
  9  +1.8810e-01  +1.8812e-01  1.42e-05  4.44e-08  2.13e-06  3.50e-09  3.01e-07  9.90e-01  
 10  +1.8810e-01  +1.8810e-01  1.42e-07  4.44e-10  2.13e-08  3.50e-11  3.01e-09  9.90e-01  
 11  +1.8810e-01  +1.8810e-01  1.42e-09  4.44e-12  2.13e-10  3.50e-13  3.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1256ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:49 PM: Optimal value: 1.881e-01
(CVXPY) Sep 20 03:03:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:49 PM: Solver (including time spent in interface) took 5.307e-03 seconds
FULL MODEL:
  Accruacy: 0.812
  Our objective: 0.6240000000000001

IF 
    (x0 = 0) <-- (term's our objective: 0.624)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7994182109832764
Best over terms:
  Our final objective: 0.6240000000000001
    Its accruacy: 0.812
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6240000000000001
  Highest accruacy: 0.812
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

