Command:
python test_script.py -s linear_dependence -d 2 -n 5000 --seed 21 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5944
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 2.

Computed total variation: 0.5944
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:01 PM: Your problem has 2505 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:01 PM: Finished problem compilation (took 9.770e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2505
  constraints   = 5005
  nnz(P)        = 0
  nnz(A)        = 12505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +2.5020e+03  2.50e+03  9.76e-01  5.13e+01  1.00e+00  1.00e+00   ------   
  1  +6.3701e-01  +4.3711e+02  4.36e+02  2.65e-01  2.42e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5767e-01  +8.0214e+01  7.97e+01  1.27e-01  1.34e+01  5.35e-03  2.11e-01  6.02e-01  
  3  +5.0074e-01  +5.0121e+00  4.51e+00  3.95e-02  3.93e+00  1.32e-03  2.00e-01  2.83e-01  
  4  +4.9435e-01  +2.1979e+00  1.70e+00  7.65e-03  8.47e-01  3.21e-03  1.91e-02  9.90e-01  
  5  +4.3146e-01  +2.0831e+00  1.65e+00  9.00e-04  1.03e-01  2.96e-02  1.88e-03  9.24e-01  
  6  +3.8809e-01  +1.7000e+00  1.31e+00  6.60e-04  7.40e-02  1.97e-02  1.45e-03  3.13e-01  
  7  +3.0123e-01  +9.0253e-01  6.01e-01  3.47e-04  3.71e-02  1.36e-04  9.78e-04  5.07e-01  
  8  +2.2669e-01  +3.6405e-01  1.37e-01  8.44e-05  8.70e-03  7.89e-07  3.85e-04  7.10e-01  
  9  +2.0425e-01  +2.1200e-01  7.75e-03  4.79e-06  4.90e-04  1.47e-07  2.98e-05  9.45e-01  
 10  +2.0291e-01  +2.0299e-01  8.04e-05  4.97e-08  5.08e-06  1.54e-09  3.20e-07  9.89e-01  
 11  +2.0290e-01  +2.0290e-01  8.04e-07  4.97e-10  5.08e-08  1.54e-11  3.20e-09  9.90e-01  
 12  +2.0290e-01  +2.0290e-01  8.04e-09  4.96e-12  5.08e-10  1.54e-13  3.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.1834ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:01 PM: Optimal value: 2.029e-01
(CVXPY) Sep 20 03:04:01 PM: Compilation took 9.770e-03 seconds
(CVXPY) Sep 20 03:04:01 PM: Solver (including time spent in interface) took 2.006e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.2029
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:01 PM: Your problem has 2506 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:01 PM: Finished problem compilation (took 5.633e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2506
  constraints   = 5006
  nnz(P)        = 0
  nnz(A)        = 13527
  cones (total) = 1
    : Nonnegative = 1,  numel = 5006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9981e-01  +2.5021e+03  2.50e+03  9.76e-01  5.33e+01  1.00e+00  1.00e+00   ------   
  1  +6.3694e-01  +4.3761e+02  4.37e+02  2.66e-01  2.52e+01  4.49e-03  3.90e-01  7.24e-01  
  2  +5.5769e-01  +8.0266e+01  7.97e+01  1.27e-01  1.39e+01  5.38e-03  2.11e-01  6.02e-01  
  3  +5.0077e-01  +5.0551e+00  4.55e+00  3.99e-02  4.11e+00  1.33e-03  2.01e-01  2.81e-01  
  4  +4.9507e-01  +2.3240e+00  1.83e+00  8.82e-03  1.00e+00  2.92e-03  2.26e-02  9.68e-01  
  5  +4.1445e-01  +2.1760e+00  1.76e+00  7.64e-04  9.04e-02  3.70e-02  1.59e-03  9.52e-01  
  6  +3.4032e-01  +1.2259e+00  8.86e-01  5.01e-04  5.67e-02  2.42e-04  1.25e-03  3.96e-01  
  7  +2.4972e-01  +5.2109e-01  2.71e-01  1.62e-04  1.76e-02  1.56e-06  5.94e-04  6.10e-01  
  8  +2.0705e-01  +2.3214e-01  2.51e-02  1.56e-05  1.65e-03  8.88e-07  9.21e-05  9.16e-01  
  9  +2.0296e-01  +2.0334e-01  3.78e-04  2.34e-07  2.48e-05  1.11e-08  1.50e-06  9.84e-01  
 10  +2.0290e-01  +2.0290e-01  3.77e-06  2.33e-09  2.48e-07  1.11e-10  1.50e-08  9.90e-01  
 11  +2.0290e-01  +2.0290e-01  3.77e-08  2.33e-11  2.48e-09  1.11e-12  1.50e-10  9.90e-01  
 12  +2.0290e-01  +2.0290e-01  3.77e-10  2.33e-13  2.48e-11  1.11e-14  1.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.88ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:01 PM: Optimal value: 2.029e-01
(CVXPY) Sep 20 03:04:01 PM: Compilation took 5.633e-03 seconds
(CVXPY) Sep 20 03:04:01 PM: Solver (including time spent in interface) took 2.639e-02 seconds
Iteration: 2, Objective: 0.2029
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:01 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:01 PM: Finished problem compilation (took 9.271e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 14506
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9974e-01  +2.5021e+03  2.50e+03  9.76e-01  5.50e+01  1.00e+00  1.00e+00   ------   
  1  +6.2672e-01  +4.5108e+02  4.50e+02  2.86e-01  2.74e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5722e-01  +8.0644e+01  8.01e+01  1.29e-01  1.45e+01  6.06e-03  2.13e-01  6.40e-01  
  3  +5.0068e-01  +4.9478e+00  4.45e+00  3.90e-02  4.15e+00  9.08e-04  2.01e-01  3.24e-01  
  4  +4.9719e-01  +3.7352e+00  3.24e+00  1.95e-02  2.25e+00  1.69e-03  5.48e-02  8.03e-01  
  5  +4.2455e-01  +3.1642e+00  2.74e+00  1.39e-03  1.70e-01  2.27e-02  2.91e-03  9.51e-01  
  6  +4.1371e-01  +3.0629e+00  2.65e+00  1.23e-03  1.50e-01  2.19e-02  2.58e-03  1.60e-01  
  7  +3.9438e-01  +2.1988e+00  1.80e+00  1.10e-03  1.31e-01  6.57e-03  2.57e-03  9.13e-02  
  8  +3.3204e-01  +1.8158e+00  1.48e+00  7.39e-04  8.66e-02  4.23e-03  1.81e-03  6.61e-01  
  9  +3.0128e-01  +1.2791e+00  9.78e-01  5.34e-04  6.13e-02  1.99e-03  1.47e-03  3.30e-01  
 10  +2.3402e-01  +4.3147e-01  1.97e-01  1.18e-04  1.31e-02  1.24e-05  4.75e-04  7.57e-01  
 11  +2.0476e-01  +2.1836e-01  1.36e-02  8.41e-06  9.21e-04  1.38e-06  5.15e-05  9.53e-01  
 12  +2.0292e-01  +2.0308e-01  1.54e-04  9.54e-08  1.05e-05  1.53e-08  6.14e-07  9.88e-01  
 13  +2.0290e-01  +2.0290e-01  1.54e-06  9.54e-10  1.05e-07  1.53e-10  6.14e-09  9.90e-01  
 14  +2.0290e-01  +2.0290e-01  1.54e-08  9.54e-12  1.05e-09  1.53e-12  6.14e-11  9.90e-01  
 15  +2.0290e-01  +2.0290e-01  1.54e-10  9.53e-14  1.05e-11  1.53e-14  6.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.1951ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:01 PM: Optimal value: 2.029e-01
(CVXPY) Sep 20 03:04:01 PM: Compilation took 9.271e-03 seconds
(CVXPY) Sep 20 03:04:01 PM: Solver (including time spent in interface) took 1.539e-02 seconds
FULL MODEL:
  Accruacy: 0.7972
  Our objective: 0.5944

IF 
    (x0 = 0) <-- (term's our objective: 0.5944)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.1801881790161133
Best over terms:
  Our final objective: 0.5944
    Its accruacy: 0.7972
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5944
  Highest accruacy: 0.7972
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

