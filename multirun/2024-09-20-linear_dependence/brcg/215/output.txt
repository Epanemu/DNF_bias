Command:
python test_script.py -s linear_dependence -d 6 -n 500 --seed 43 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.164
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 6.

Computed total variation: 0.316
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:03 PM: Your problem has 263 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Finished problem compilation (took 5.151e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 263
  constraints   = 513
  nnz(P)        = 0
  nnz(A)        = 2263
  cones (total) = 1
    : Nonnegative = 1,  numel = 513

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +2.5088e+02  2.50e+02  9.35e-01  2.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.9230e-01  +5.1850e+01  5.13e+01  3.64e-01  1.27e+01  3.91e-03  5.29e-01  6.27e-01  
  2  +5.3857e-01  +6.9431e+00  6.40e+00  1.18e-01  5.08e+00  1.18e-02  2.32e-01  8.59e-01  
  3  +5.0107e-01  +1.2953e+00  7.94e-01  2.37e-02  1.00e+00  3.37e-04  1.90e-01  6.62e-01  
  4  +4.9968e-01  +6.6091e-01  1.61e-01  4.82e-03  2.09e-01  1.03e-04  3.82e-02  8.42e-01  
  5  +4.8475e-01  +6.9822e-01  2.13e-01  1.41e-03  6.27e-02  9.63e-04  4.44e-03  9.40e-01  
  6  +4.6687e-01  +5.2583e-01  5.90e-02  3.27e-04  1.44e-02  1.36e-04  1.13e-03  8.10e-01  
  7  +4.5429e-01  +4.7583e-01  2.15e-02  9.08e-05  4.00e-03  4.03e-05  3.68e-04  7.98e-01  
  8  +4.5015e-01  +4.5625e-01  6.09e-03  2.49e-05  1.10e-03  5.87e-06  1.06e-04  9.90e-01  
  9  +4.4813e-01  +4.4820e-01  7.68e-05  3.08e-07  1.36e-05  6.85e-08  1.35e-06  9.88e-01  
 10  +4.4810e-01  +4.4810e-01  7.68e-07  3.08e-09  1.36e-07  6.85e-10  1.35e-08  9.90e-01  
 11  +4.4810e-01  +4.4810e-01  7.68e-09  3.08e-11  1.36e-09  6.85e-12  1.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5797ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:03 PM: Optimal value: 4.481e-01
(CVXPY) Sep 20 03:09:03 PM: Compilation took 5.151e-03 seconds
(CVXPY) Sep 20 03:09:03 PM: Solver (including time spent in interface) took 2.223e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4481
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:03 PM: Your problem has 273 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Finished problem compilation (took 3.120e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 273
  constraints   = 523
  nnz(P)        = 0
  nnz(A)        = 2705
  cones (total) = 1
    : Nonnegative = 1,  numel = 523

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9912e-01  +2.5129e+02  2.51e+02  9.36e-01  2.21e+01  1.00e+00  1.01e+00   ------   
  1  +5.8919e-01  +5.2041e+01  5.15e+01  3.68e-01  1.30e+01  3.91e-03  5.34e-01  6.25e-01  
  2  +5.3522e-01  +6.5936e+00  6.06e+00  1.12e-01  4.93e+00  1.24e-02  2.22e-01  8.95e-01  
  3  +5.0113e-01  +1.4415e+00  9.40e-01  2.86e-02  1.24e+00  1.17e-03  1.70e-01  7.22e-01  
  4  +4.9804e-01  +9.2870e-01  4.31e-01  1.18e-02  5.30e-01  9.45e-04  5.16e-02  7.72e-01  
  5  +4.7434e-01  +7.9901e-01  3.25e-01  2.33e-03  1.09e-01  3.83e-03  6.91e-03  9.10e-01  
  6  +4.6416e-01  +7.2935e-01  2.65e-01  1.49e-03  6.92e-02  3.00e-03  4.46e-03  4.93e-01  
  7  +4.5261e-01  +6.5182e-01  1.99e-01  9.09e-04  4.21e-02  1.95e-03  2.81e-03  5.17e-01  
  8  +4.4345e-01  +5.8688e-01  1.43e-01  6.45e-04  2.98e-02  7.87e-04  2.00e-03  5.55e-01  
  9  +4.1927e-01  +4.5442e-01  3.51e-02  1.30e-04  6.00e-03  1.82e-04  4.15e-04  8.79e-01  
 10  +4.1275e-01  +4.3455e-01  2.18e-02  7.99e-05  3.68e-03  5.91e-05  2.62e-04  5.80e-01  
 11  +4.0526e-01  +4.1211e-01  6.85e-03  2.25e-05  1.04e-03  1.73e-05  7.46e-05  7.47e-01  
 12  +4.0230e-01  +4.0251e-01  2.11e-04  6.89e-07  3.19e-05  3.93e-07  2.32e-06  9.87e-01  
 13  +4.0220e-01  +4.0220e-01  2.12e-06  6.90e-09  3.20e-07  3.93e-09  2.32e-08  9.90e-01  
 14  +4.0220e-01  +4.0220e-01  2.12e-08  6.90e-11  3.20e-09  3.93e-11  2.32e-10  9.90e-01  
 15  +4.0220e-01  +4.0220e-01  2.12e-10  6.90e-13  3.20e-11  3.94e-13  2.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3185ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:03 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 03:09:03 PM: Compilation took 3.120e-03 seconds
(CVXPY) Sep 20 03:09:03 PM: Solver (including time spent in interface) took 3.751e-03 seconds
Iteration: 2, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:03 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Finished problem compilation (took 3.745e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 2946
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +2.5115e+02  2.51e+02  9.36e-01  2.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8783e-01  +5.2089e+01  5.15e+01  3.71e-01  1.30e+01  3.91e-03  5.35e-01  6.24e-01  
  2  +5.3382e-01  +6.4440e+00  5.91e+00  1.09e-01  4.77e+00  1.26e-02  2.17e-01  9.11e-01  
  3  +5.0146e-01  +1.5193e+00  1.02e+00  3.12e-02  1.36e+00  1.48e-03  1.62e-01  7.28e-01  
  4  +4.9722e-01  +9.0336e-01  4.06e-01  1.04e-02  4.71e-01  1.26e-03  3.95e-02  8.21e-01  
  5  +4.7441e-01  +8.1811e-01  3.44e-01  2.49e-03  1.16e-01  4.58e-03  7.13e-03  8.67e-01  
  6  +4.6045e-01  +7.6300e-01  3.03e-01  1.48e-03  6.90e-02  4.74e-03  4.24e-03  5.03e-01  
  7  +4.4826e-01  +6.8365e-01  2.35e-01  1.14e-03  5.29e-02  1.38e-03  3.35e-03  5.83e-01  
  8  +4.1019e-01  +5.0051e-01  9.03e-02  3.53e-04  1.63e-02  4.28e-04  1.13e-03  7.13e-01  
  9  +3.9550e-01  +4.3437e-01  3.89e-02  1.50e-04  6.93e-03  1.63e-04  5.01e-04  6.32e-01  
 10  +3.8984e-01  +4.1101e-01  2.12e-02  7.74e-05  3.63e-03  7.83e-05  2.59e-04  6.28e-01  
 11  +3.8447e-01  +3.8967e-01  5.19e-03  1.91e-05  8.92e-04  7.21e-06  6.54e-05  9.90e-01  
 12  +3.8272e-01  +3.8362e-01  8.99e-04  3.25e-06  1.51e-04  1.30e-06  1.12e-05  8.34e-01  
 13  +3.8238e-01  +3.8254e-01  1.64e-04  5.90e-07  2.74e-05  1.40e-07  2.02e-06  9.77e-01  
 14  +3.8230e-01  +3.8231e-01  1.06e-05  3.67e-08  1.70e-06  1.12e-08  1.27e-07  9.53e-01  
 15  +3.8230e-01  +3.8230e-01  1.07e-07  3.67e-10  1.70e-08  1.12e-10  1.27e-09  9.90e-01  
 16  +3.8230e-01  +3.8230e-01  1.07e-09  3.68e-12  1.71e-10  1.13e-12  1.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5614ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:03 PM: Optimal value: 3.823e-01
(CVXPY) Sep 20 03:09:03 PM: Compilation took 3.745e-03 seconds
(CVXPY) Sep 20 03:09:03 PM: Solver (including time spent in interface) took 3.087e-03 seconds
Iteration: 3, Objective: 0.3823
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:03 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Finished problem compilation (took 3.650e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 3172
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9893e-01  +2.5125e+02  2.51e+02  9.37e-01  2.22e+01  1.00e+00  1.01e+00   ------   
  1  +5.8587e-01  +5.2251e+01  5.17e+01  3.76e-01  1.29e+01  3.90e-03  5.38e-01  6.22e-01  
  2  +5.3216e-01  +6.2775e+00  5.75e+00  1.07e-01  4.64e+00  1.29e-02  2.13e-01  9.28e-01  
  3  +5.0126e-01  +1.5170e+00  1.02e+00  3.13e-02  1.37e+00  1.60e-03  1.51e-01  7.86e-01  
  4  +4.9632e-01  +9.7794e-01  4.82e-01  1.13e-02  5.15e-01  1.64e-03  3.93e-02  7.97e-01  
  5  +4.7072e-01  +9.6617e-01  4.95e-01  3.05e-03  1.43e-01  5.40e-03  8.61e-03  9.27e-01  
  6  +4.5447e-01  +8.5539e-01  4.01e-01  1.95e-03  9.10e-02  4.50e-03  5.60e-03  4.26e-01  
  7  +4.2504e-01  +6.2899e-01  2.04e-01  9.23e-04  4.26e-02  5.38e-04  2.86e-03  7.46e-01  
  8  +3.9255e-01  +4.6618e-01  7.36e-02  3.09e-04  1.42e-02  1.41e-04  1.05e-03  6.90e-01  
  9  +3.7930e-01  +4.0455e-01  2.53e-02  1.02e-04  4.70e-03  3.83e-05  3.56e-04  8.50e-01  
 10  +3.7566e-01  +3.9091e-01  1.53e-02  5.94e-05  2.77e-03  2.33e-05  2.06e-04  4.82e-01  
 11  +3.7077e-01  +3.7170e-01  9.24e-04  3.58e-06  1.67e-04  1.09e-06  1.28e-05  9.90e-01  
 12  +3.7046e-01  +3.7060e-01  1.42e-04  5.41e-07  2.51e-05  1.71e-07  1.98e-06  9.90e-01  
 13  +3.7040e-01  +3.7040e-01  1.57e-06  5.95e-09  2.76e-07  1.88e-09  2.18e-08  9.89e-01  
 14  +3.7040e-01  +3.7040e-01  1.57e-08  5.96e-11  2.77e-09  1.89e-11  2.18e-10  9.90e-01  
 15  +3.7040e-01  +3.7040e-01  1.57e-10  5.96e-13  2.77e-11  1.89e-13  2.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5549ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:03 PM: Optimal value: 3.704e-01
(CVXPY) Sep 20 03:09:03 PM: Compilation took 3.650e-03 seconds
(CVXPY) Sep 20 03:09:03 PM: Solver (including time spent in interface) took 3.065e-03 seconds
Iteration: 4, Objective: 0.3704
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:03 PM: Your problem has 303 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Finished problem compilation (took 4.667e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 303
  constraints   = 553
  nnz(P)        = 0
  nnz(A)        = 3308
  cones (total) = 1
    : Nonnegative = 1,  numel = 553

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9877e-01  +2.5143e+02  2.51e+02  9.38e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.8253e-01  +5.2502e+01  5.19e+01  3.81e-01  1.29e+01  3.89e-03  5.43e-01  6.19e-01  
  2  +5.3030e-01  +6.1036e+00  5.57e+00  1.03e-01  4.47e+00  1.34e-02  2.08e-01  9.51e-01  
  3  +5.0133e-01  +1.5769e+00  1.08e+00  3.29e-02  1.43e+00  1.94e-03  1.39e-01  8.18e-01  
  4  +4.9340e-01  +9.5631e-01  4.63e-01  8.74e-03  4.02e-01  2.44e-03  2.68e-02  8.50e-01  
  5  +4.7651e-01  +9.6854e-01  4.92e-01  3.72e-03  1.74e-01  4.51e-03  1.04e-02  8.34e-01  
  6  +4.5636e-01  +8.5575e-01  3.99e-01  2.09e-03  9.74e-02  4.34e-03  5.96e-03  5.11e-01  
  7  +4.1407e-01  +5.9706e-01  1.83e-01  8.04e-04  3.70e-02  6.47e-04  2.49e-03  7.91e-01  
  8  +3.9808e-01  +5.3157e-01  1.33e-01  5.54e-04  2.55e-02  4.23e-04  1.78e-03  3.89e-01  
  9  +3.7711e-01  +4.4724e-01  7.01e-02  2.74e-04  1.27e-02  1.90e-04  9.28e-04  5.77e-01  
 10  +3.5673e-01  +3.6756e-01  1.08e-02  4.11e-05  1.90e-03  1.69e-05  1.50e-04  9.13e-01  
 11  +3.5290e-01  +3.5344e-01  5.36e-04  2.03e-06  9.37e-05  7.94e-07  7.58e-06  9.52e-01  
 12  +3.5270e-01  +3.5271e-01  5.39e-06  2.05e-08  9.42e-07  7.98e-09  7.63e-08  9.90e-01  
 13  +3.5270e-01  +3.5270e-01  5.39e-08  2.05e-10  9.42e-09  7.98e-11  7.63e-10  9.90e-01  
 14  +3.5270e-01  +3.5270e-01  5.39e-10  2.05e-12  9.42e-11  7.98e-13  7.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7556ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:03 PM: Optimal value: 3.527e-01
(CVXPY) Sep 20 03:09:03 PM: Compilation took 4.667e-03 seconds
(CVXPY) Sep 20 03:09:03 PM: Solver (including time spent in interface) took 3.029e-03 seconds
Iteration: 5, Objective: 0.3527
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:03 PM: Your problem has 304 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Finished problem compilation (took 3.946e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 304
  constraints   = 554
  nnz(P)        = 0
  nnz(A)        = 3324
  cones (total) = 1
    : Nonnegative = 1,  numel = 554

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9864e-01  +2.5150e+02  2.51e+02  9.38e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.8135e-01  +5.2524e+01  5.19e+01  3.81e-01  1.29e+01  3.89e-03  5.43e-01  6.19e-01  
  2  +5.2993e-01  +6.0677e+00  5.54e+00  1.02e-01  4.42e+00  1.34e-02  2.06e-01  9.56e-01  
  3  +5.0161e-01  +1.6534e+00  1.15e+00  3.49e-02  1.52e+00  2.27e-03  1.38e-01  7.95e-01  
  4  +4.9223e-01  +9.8414e-01  4.92e-01  8.38e-03  3.87e-01  3.06e-03  2.47e-02  8.69e-01  
  5  +4.7242e-01  +8.8717e-01  4.15e-01  3.12e-03  1.46e-01  5.59e-03  8.68e-03  6.97e-01  
  6  +4.5853e-01  +8.2530e-01  3.67e-01  2.10e-03  9.77e-02  5.44e-03  5.94e-03  3.89e-01  
  7  +4.2213e-01  +6.4206e-01  2.20e-01  1.04e-03  4.78e-02  6.26e-05  3.14e-03  9.21e-01  
  8  +3.8875e-01  +4.9772e-01  1.09e-01  4.54e-04  2.09e-02  4.54e-05  1.49e-03  6.11e-01  
  9  +3.7757e-01  +4.5688e-01  7.93e-02  3.15e-04  1.46e-02  4.60e-05  1.07e-03  4.34e-01  
 10  +3.5404e-01  +3.6771e-01  1.37e-02  5.21e-05  2.40e-03  9.95e-06  1.92e-04  8.94e-01  
 11  +3.4889e-01  +3.4911e-01  2.22e-04  8.41e-07  3.87e-05  1.44e-07  3.21e-06  9.85e-01  
 12  +3.4880e-01  +3.4880e-01  2.22e-06  8.41e-09  3.87e-07  1.44e-09  3.21e-08  9.90e-01  
 13  +3.4880e-01  +3.4880e-01  2.22e-08  8.41e-11  3.87e-09  1.44e-11  3.21e-10  9.90e-01  
 14  +3.4880e-01  +3.4880e-01  2.22e-10  8.41e-13  3.87e-11  1.44e-13  3.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7697ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:03 PM: Optimal value: 3.488e-01
(CVXPY) Sep 20 03:09:03 PM: Compilation took 3.946e-03 seconds
(CVXPY) Sep 20 03:09:03 PM: Solver (including time spent in interface) took 3.019e-03 seconds
Iteration: 6, Objective: 0.3488
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:03 PM: Your problem has 305 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Finished problem compilation (took 3.996e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 305
  constraints   = 555
  nnz(P)        = 0
  nnz(A)        = 3342
  cones (total) = 1
    : Nonnegative = 1,  numel = 555

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +2.5167e+02  2.51e+02  9.38e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.8084e-01  +5.2509e+01  5.19e+01  3.81e-01  1.29e+01  3.89e-03  5.43e-01  6.20e-01  
  2  +5.2968e-01  +6.0399e+00  5.51e+00  1.01e-01  4.38e+00  1.34e-02  2.04e-01  9.59e-01  
  3  +5.0149e-01  +1.6692e+00  1.17e+00  3.51e-02  1.53e+00  2.49e-03  1.33e-01  8.07e-01  
  4  +4.8821e-01  +1.0117e+00  5.24e-01  6.99e-03  3.26e-01  4.37e-03  1.96e-02  9.13e-01  
  5  +4.6501e-01  +9.0850e-01  4.43e-01  2.92e-03  1.36e-01  6.85e-03  8.12e-03  6.36e-01  
  6  +4.3683e-01  +7.5512e-01  3.18e-01  1.63e-03  7.56e-02  4.38e-03  4.77e-03  5.37e-01  
  7  +3.9954e-01  +5.5967e-01  1.60e-01  7.32e-04  3.38e-02  1.57e-03  2.36e-03  5.77e-01  
  8  +3.9000e-01  +5.2285e-01  1.33e-01  5.80e-04  2.68e-02  1.09e-03  1.92e-03  3.30e-01  
  9  +3.7743e-01  +4.7085e-01  9.34e-02  3.91e-04  1.81e-02  6.76e-04  1.35e-03  3.87e-01  
 10  +3.5865e-01  +3.9386e-01  3.52e-02  1.42e-04  6.59e-03  2.03e-04  5.29e-04  6.66e-01  
 11  +3.4756e-01  +3.4929e-01  1.73e-03  6.93e-06  3.19e-04  4.63e-06  2.76e-05  9.66e-01  
 12  +3.4691e-01  +3.4692e-01  1.77e-05  7.07e-08  3.26e-06  4.61e-08  2.84e-07  9.90e-01  
 13  +3.4690e-01  +3.4690e-01  1.77e-07  7.07e-10  3.26e-08  4.61e-10  2.84e-09  9.90e-01  
 14  +3.4690e-01  +3.4690e-01  1.77e-09  7.07e-12  3.26e-10  4.61e-12  2.84e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8802ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:03 PM: Optimal value: 3.469e-01
(CVXPY) Sep 20 03:09:03 PM: Compilation took 3.996e-03 seconds
(CVXPY) Sep 20 03:09:03 PM: Solver (including time spent in interface) took 4.834e-03 seconds
Iteration: 7, Objective: 0.3469
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:03 PM: Your problem has 307 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Finished problem compilation (took 3.034e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 307
  constraints   = 557
  nnz(P)        = 0
  nnz(A)        = 3362
  cones (total) = 1
    : Nonnegative = 1,  numel = 557

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9864e-01  +2.5159e+02  2.51e+02  9.38e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.8024e-01  +5.2456e+01  5.19e+01  3.81e-01  1.28e+01  3.89e-03  5.43e-01  6.20e-01  
  2  +5.2932e-01  +5.9987e+00  5.47e+00  9.97e-02  4.32e+00  1.35e-02  2.02e-01  9.63e-01  
  3  +5.0139e-01  +1.6772e+00  1.18e+00  3.50e-02  1.53e+00  2.65e-03  1.28e-01  8.20e-01  
  4  +4.8763e-01  +1.1500e+00  6.62e-01  8.41e-03  3.91e-01  5.04e-03  2.33e-02  8.79e-01  
  5  +4.5352e-01  +9.1200e-01  4.58e-01  2.52e-03  1.18e-01  8.12e-03  6.96e-03  7.25e-01  
  6  +4.3327e-01  +7.8173e-01  3.48e-01  1.77e-03  8.20e-02  5.10e-03  5.14e-03  3.51e-01  
  7  +3.9453e-01  +5.5259e-01  1.58e-01  7.25e-04  3.33e-02  1.57e-03  2.35e-03  6.11e-01  
  8  +3.8551e-01  +5.1623e-01  1.31e-01  5.72e-04  2.63e-02  1.07e-03  1.90e-03  3.48e-01  
  9  +3.7383e-01  +4.6627e-01  9.24e-02  3.89e-04  1.79e-02  6.86e-04  1.35e-03  3.61e-01  
 10  +3.5419e-01  +3.8265e-01  2.85e-02  1.15e-04  5.31e-03  1.63e-04  4.35e-04  7.25e-01  
 11  +3.4534e-01  +3.4629e-01  9.45e-04  3.79e-06  1.74e-04  3.21e-06  1.52e-05  9.71e-01  
 12  +3.4500e-01  +3.4501e-01  9.46e-06  3.79e-08  1.74e-06  3.20e-08  1.53e-07  9.90e-01  
 13  +3.4500e-01  +3.4500e-01  9.45e-08  3.79e-10  1.74e-08  3.20e-10  1.53e-09  9.90e-01  
 14  +3.4500e-01  +3.4500e-01  9.45e-10  3.79e-12  1.74e-10  3.20e-12  1.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7341ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:03 PM: Optimal value: 3.450e-01
(CVXPY) Sep 20 03:09:03 PM: Compilation took 3.034e-03 seconds
(CVXPY) Sep 20 03:09:03 PM: Solver (including time spent in interface) took 3.135e-03 seconds
Iteration: 8, Objective: 0.3450
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:03 PM: Your problem has 310 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:03 PM: Finished problem compilation (took 3.602e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 310
  constraints   = 560
  nnz(P)        = 0
  nnz(A)        = 3389
  cones (total) = 1
    : Nonnegative = 1,  numel = 560

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9864e-01  +2.5161e+02  2.51e+02  9.38e-01  2.20e+01  1.00e+00  1.02e+00   ------   
  1  +5.8001e-01  +5.2436e+01  5.19e+01  3.81e-01  1.28e+01  3.89e-03  5.43e-01  6.20e-01  
  2  +5.2908e-01  +5.9711e+00  5.44e+00  9.89e-02  4.27e+00  1.35e-02  2.00e-01  9.66e-01  
  3  +5.0135e-01  +1.6763e+00  1.17e+00  3.48e-02  1.52e+00  2.71e-03  1.25e-01  8.28e-01  
  4  +4.8649e-01  +1.1427e+00  6.56e-01  7.79e-03  3.62e-01  5.39e-03  2.15e-02  8.91e-01  
  5  +4.5413e-01  +9.2040e-01  4.66e-01  2.59e-03  1.21e-01  7.92e-03  7.17e-03  6.95e-01  
  6  +4.3444e-01  +7.9132e-01  3.57e-01  1.85e-03  8.53e-02  5.07e-03  5.36e-03  3.33e-01  
  7  +3.9666e-01  +5.6630e-01  1.70e-01  7.90e-04  3.62e-02  1.71e-03  2.54e-03  5.89e-01  
  8  +3.8855e-01  +5.3278e-01  1.44e-01  6.41e-04  2.94e-02  1.26e-03  2.11e-03  2.99e-01  
  9  +3.7615e-01  +4.7771e-01  1.02e-01  4.35e-04  2.00e-02  7.86e-04  1.49e-03  3.81e-01  
 10  +3.6001e-01  +4.0783e-01  4.78e-02  1.98e-04  9.12e-03  3.02e-04  7.23e-04  5.94e-01  
 11  +3.4605e-01  +3.4882e-01  2.77e-03  1.13e-05  5.19e-04  2.86e-06  4.46e-05  9.81e-01  
 12  +3.4501e-01  +3.4504e-01  2.93e-05  1.19e-07  5.47e-06  2.98e-08  4.76e-07  9.89e-01  
 13  +3.4500e-01  +3.4500e-01  2.93e-07  1.19e-09  5.47e-08  2.98e-10  4.76e-09  9.90e-01  
 14  +3.4500e-01  +3.4500e-01  2.93e-09  1.19e-11  5.47e-10  2.98e-12  4.76e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.697ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:03 PM: Optimal value: 3.450e-01
(CVXPY) Sep 20 03:09:03 PM: Compilation took 3.602e-03 seconds
(CVXPY) Sep 20 03:09:03 PM: Solver (including time spent in interface) took 3.501e-03 seconds
FULL MODEL:
  Accruacy: 0.644
  Our objective: 0.28800000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.164)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.048)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.1087067127227783
Best over terms:
  Our final objective: 0.16399999999999995
    Its accruacy: 0.582
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16399999999999995
  Highest accruacy: 0.582
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

