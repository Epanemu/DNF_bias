Command:
python test_script.py -s linear_dependence -d 3 -n 10000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29960000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 3.

Computed total variation: 0.2996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:11 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:11 PM: Finished problem compilation (took 8.328e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 30007
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +5.0009e+03  5.00e+03  9.84e-01  7.88e+01  1.00e+00  1.00e+00   ------   
  1  +6.2010e-01  +9.2710e+02  9.26e+02  3.06e-01  4.10e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5578e-01  +1.5876e+02  1.58e+02  1.36e-01  2.17e+01  6.68e-03  2.21e-01  6.63e-01  
  3  +5.0916e-01  +2.7126e+01  2.66e+01  1.02e-01  1.59e+01  1.13e-05  2.19e-01  5.63e-02  
  4  +4.9999e-01  +1.2598e+00  7.60e-01  5.07e-03  7.98e-01  4.07e-06  1.64e-01  6.99e-01  
  5  +4.9973e-01  +8.4290e-01  3.43e-01  2.26e-03  3.57e-01  5.24e-06  3.24e-02  8.50e-01  
  6  +4.7864e-01  +1.0846e+00  6.06e-01  3.45e-04  5.55e-02  2.75e-04  1.01e-03  9.84e-01  
  7  +4.3786e-01  +6.2896e-01  1.91e-01  4.69e-05  7.50e-03  2.96e-04  1.44e-04  8.73e-01  
  8  +4.0503e-01  +4.3603e-01  3.10e-02  7.27e-06  1.15e-03  2.66e-06  2.98e-05  9.90e-01  
  9  +3.9715e-01  +3.9767e-01  5.21e-04  1.16e-07  1.85e-05  3.18e-08  5.30e-07  9.86e-01  
 10  +3.9700e-01  +3.9701e-01  5.21e-06  1.16e-09  1.85e-07  3.18e-10  5.30e-09  9.90e-01  
 11  +3.9700e-01  +3.9700e-01  5.21e-08  1.16e-11  1.85e-09  3.18e-12  5.30e-11  9.90e-01  
 12  +3.9700e-01  +3.9700e-01  5.21e-10  1.16e-13  1.85e-11  3.22e-14  5.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.2338ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:11 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:11 PM: Optimal value: 3.970e-01
(CVXPY) Sep 20 03:05:11 PM: Compilation took 8.328e-03 seconds
(CVXPY) Sep 20 03:05:11 PM: Solver (including time spent in interface) took 2.915e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3970
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:11 PM: Your problem has 5012 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:11 PM: Finished problem compilation (took 8.428e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5012
  constraints   = 10012
  nnz(P)        = 0
  nnz(A)        = 37060
  cones (total) = 1
    : Nonnegative = 1,  numel = 10012

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +5.0015e+03  5.00e+03  9.84e-01  8.52e+01  1.00e+00  1.00e+00   ------   
  1  +6.1969e-01  +9.2909e+02  9.28e+02  3.07e-01  4.44e+01  4.25e-03  4.38e-01  6.93e-01  
  2  +5.5542e-01  +1.5808e+02  1.58e+02  1.36e-01  2.34e+01  6.76e-03  2.21e-01  6.67e-01  
  3  +5.0899e-01  +2.6799e+01  2.63e+01  1.02e-01  1.71e+01  1.14e-05  2.19e-01  5.96e-02  
  4  +5.0062e-01  +3.1256e+00  2.63e+00  1.74e-02  2.90e+00  4.95e-06  1.98e-01  2.54e-01  
  5  +5.0004e-01  +9.2204e-01  4.22e-01  2.81e-03  4.79e-01  1.59e-06  5.87e-02  8.00e-01  
  6  +4.9946e-01  +1.1074e+00  6.08e-01  3.04e-03  5.25e-01  9.35e-06  1.26e-02  8.27e-01  
  7  +4.9951e-01  +1.0862e+00  5.87e-01  2.13e-03  3.72e-01  9.05e-06  6.82e-03  8.87e-01  
  8  +4.8883e-01  +1.0038e+00  5.15e-01  1.58e-04  2.79e-02  1.31e-04  3.93e-04  9.42e-01  
  9  +4.8600e-01  +9.8172e-01  4.96e-01  1.33e-04  2.35e-02  1.12e-04  3.30e-04  3.59e-01  
 10  +4.7850e-01  +9.2323e-01  4.45e-01  1.02e-04  1.80e-02  7.15e-05  2.57e-04  5.85e-01  
 11  +4.6095e-01  +8.2978e-01  3.69e-01  7.51e-05  1.32e-02  5.73e-05  1.95e-04  3.11e-01  
 12  +4.1304e-01  +5.9441e-01  1.81e-01  3.41e-05  5.91e-03  1.24e-05  9.96e-05  6.66e-01  
 13  +3.6145e-01  +3.8753e-01  2.61e-02  4.78e-06  8.20e-04  1.06e-07  1.67e-05  9.06e-01  
 14  +3.5050e-01  +3.5095e-01  4.46e-04  8.12e-08  1.39e-05  3.51e-09  3.00e-07  9.84e-01  
 15  +3.5030e-01  +3.5031e-01  4.46e-06  8.11e-10  1.39e-07  3.51e-11  3.00e-09  9.90e-01  
 16  +3.5030e-01  +3.5030e-01  4.46e-08  8.11e-12  1.39e-09  3.52e-13  3.01e-11  9.90e-01  
 17  +3.5030e-01  +3.5030e-01  4.46e-10  8.11e-14  1.39e-11  3.53e-15  3.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.0357ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:12 PM: Optimal value: 3.503e-01
(CVXPY) Sep 20 03:05:12 PM: Compilation took 8.428e-03 seconds
(CVXPY) Sep 20 03:05:12 PM: Solver (including time spent in interface) took 4.198e-02 seconds
FULL MODEL:
  Accruacy: 0.6498
  Our objective: 0.29960000000000003

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2996)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.0594768524169922
Best over terms:
  Our final objective: 0.29960000000000003
    Its accruacy: 0.6498
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29960000000000003
  Highest accruacy: 0.6498
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

