Command:
python test_script.py -s linear_dependence -d 8 -n 1000 --seed 73 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.218
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 8.

Computed total variation: 0.47000000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:20 PM: Your problem has 517 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Finished problem compilation (took 6.555e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 517
  constraints   = 1017
  nnz(P)        = 0
  nnz(A)        = 5517
  cones (total) = 1
    : Nonnegative = 1,  numel = 1017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9992e-01  +5.0102e+02  5.01e+02  9.55e-01  3.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.8372e-01  +1.0733e+02  1.07e+02  4.03e-01  2.16e+01  3.82e-03  5.62e-01  5.98e-01  
  2  +5.3294e-01  +1.2722e+01  1.22e+01  1.38e-01  9.36e+00  1.50e-02  2.58e-01  9.23e-01  
  3  +5.0509e-01  +2.9154e+00  2.41e+00  4.97e-02  3.28e+00  3.40e-05  2.25e-01  4.67e-01  
  4  +5.0063e-01  +8.7493e-01  3.74e-01  8.18e-03  5.63e-01  1.12e-05  6.97e-02  7.63e-01  
  5  +4.9292e-01  +1.0398e+00  5.47e-01  2.77e-03  1.97e-01  1.14e-04  7.90e-03  9.46e-01  
  6  +4.7531e-01  +7.8369e-01  3.08e-01  8.82e-04  6.26e-02  1.18e-04  2.58e-03  7.03e-01  
  7  +4.5933e-01  +6.3865e-01  1.79e-01  4.81e-04  3.38e-02  6.61e-05  1.52e-03  4.98e-01  
  8  +4.4527e-01  +5.3332e-01  8.80e-02  2.26e-04  1.58e-02  3.22e-05  7.71e-04  6.30e-01  
  9  +4.3561e-01  +4.6425e-01  2.86e-02  7.25e-05  5.06e-03  1.32e-05  2.63e-04  9.90e-01  
 10  +4.2951e-01  +4.3358e-01  4.07e-03  9.83e-06  6.86e-04  1.81e-06  3.86e-05  8.67e-01  
 11  +4.2819e-01  +4.2850e-01  3.11e-04  6.58e-07  4.60e-05  1.38e-07  2.95e-06  9.57e-01  
 12  +4.2810e-01  +4.2810e-01  3.13e-06  6.60e-09  4.61e-07  1.38e-09  2.97e-08  9.90e-01  
 13  +4.2810e-01  +4.2810e-01  3.13e-08  6.60e-11  4.61e-09  1.38e-11  2.97e-10  9.90e-01  
 14  +4.2810e-01  +4.2810e-01  3.13e-10  6.60e-13  4.61e-11  1.39e-13  2.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2354ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:20 PM: Optimal value: 4.281e-01
(CVXPY) Sep 20 03:14:20 PM: Compilation took 6.555e-03 seconds
(CVXPY) Sep 20 03:14:20 PM: Solver (including time spent in interface) took 6.527e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:20 PM: Your problem has 527 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 527
  constraints   = 1027
  nnz(P)        = 0
  nnz(A)        = 6724
  cones (total) = 1
    : Nonnegative = 1,  numel = 1027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0126e+02  5.01e+02  9.56e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.8235e-01  +1.0763e+02  1.07e+02  4.07e-01  2.28e+01  3.81e-03  5.70e-01  5.96e-01  
  2  +5.3091e-01  +1.2351e+01  1.18e+01  1.35e-01  9.60e+00  1.55e-02  2.56e-01  9.45e-01  
  3  +5.0412e-01  +2.7104e+00  2.21e+00  4.62e-02  3.22e+00  3.56e-05  2.09e-01  6.00e-01  
  4  +5.0087e-01  +1.1677e+00  6.67e-01  1.44e-02  1.04e+00  1.59e-05  8.55e-02  6.17e-01  
  5  +4.9303e-01  +8.9087e-01  3.98e-01  2.85e-03  2.17e-01  7.46e-05  7.83e-03  9.59e-01  
  6  +4.8362e-01  +8.2496e-01  3.41e-01  1.49e-03  1.13e-01  1.03e-04  4.03e-03  5.20e-01  
  7  +4.7797e-01  +8.0330e-01  3.25e-01  1.14e-03  8.70e-02  1.13e-04  3.08e-03  6.41e-01  
  8  +4.6283e-01  +7.2858e-01  2.66e-01  6.27e-04  4.77e-02  1.29e-04  1.70e-03  5.11e-01  
  9  +4.4715e-01  +6.5699e-01  2.10e-01  4.76e-04  3.61e-02  9.88e-05  1.33e-03  4.76e-01  
 10  +4.3792e-01  +6.2047e-01  1.83e-01  3.85e-04  2.92e-02  8.98e-05  1.08e-03  2.89e-01  
 11  +4.0096e-01  +4.6956e-01  6.86e-02  1.21e-04  9.23e-03  3.58e-05  3.60e-04  8.23e-01  
 12  +3.8194e-01  +3.9627e-01  1.43e-02  2.49e-05  1.92e-03  7.29e-06  7.74e-05  8.07e-01  
 13  +3.7664e-01  +3.7755e-01  9.03e-04  1.56e-06  1.20e-04  5.81e-07  4.98e-06  9.82e-01  
 14  +3.7625e-01  +3.7627e-01  1.12e-05  1.94e-08  1.49e-06  7.20e-09  6.22e-08  9.88e-01  
 15  +3.7625e-01  +3.7625e-01  1.12e-07  1.94e-10  1.49e-08  7.20e-11  6.22e-10  9.90e-01  
 16  +3.7625e-01  +3.7625e-01  1.12e-09  1.94e-12  1.49e-10  7.21e-13  6.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.1432ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:20 PM: Optimal value: 3.763e-01
(CVXPY) Sep 20 03:14:20 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 03:14:20 PM: Solver (including time spent in interface) took 7.529e-03 seconds
Iteration: 2, Objective: 0.3763
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:20 PM: Your problem has 537 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Finished problem compilation (took 4.503e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 537
  constraints   = 1037
  nnz(P)        = 0
  nnz(A)        = 6912
  cones (total) = 1
    : Nonnegative = 1,  numel = 1037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0165e+02  5.01e+02  9.56e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.7987e-01  +1.0777e+02  1.07e+02  4.09e-01  2.26e+01  3.81e-03  5.71e-01  5.95e-01  
  2  +5.2926e-01  +1.2027e+01  1.15e+01  1.30e-01  9.25e+00  1.59e-02  2.48e-01  9.67e-01  
  3  +5.0339e-01  +2.5667e+00  2.06e+00  4.33e-02  3.02e+00  3.76e-05  1.88e-01  7.18e-01  
  4  +5.0017e-01  +1.2540e+00  7.54e-01  1.54e-02  1.12e+00  2.40e-05  6.81e-02  6.61e-01  
  5  +4.8130e-01  +1.1036e+00  6.22e-01  2.59e-03  1.98e-01  1.58e-04  6.65e-03  9.29e-01  
  6  +4.6718e-01  +9.9382e-01  5.27e-01  1.58e-03  1.20e-01  1.76e-04  4.11e-03  4.62e-01  
  7  +4.5050e-01  +8.7348e-01  4.23e-01  1.00e-03  7.62e-02  1.79e-04  2.68e-03  5.63e-01  
  8  +4.2605e-01  +7.0900e-01  2.83e-01  6.35e-04  4.79e-02  1.28e-04  1.79e-03  6.94e-01  
  9  +4.0555e-01  +5.9319e-01  1.88e-01  3.95e-04  2.99e-02  1.06e-04  1.15e-03  9.90e-01  
 10  +3.8137e-01  +4.8684e-01  1.05e-01  2.08e-04  1.57e-02  6.02e-05  6.32e-04  7.91e-01  
 11  +3.5753e-01  +3.8245e-01  2.49e-02  4.74e-05  3.64e-03  1.35e-05  1.53e-04  7.72e-01  
 12  +3.4951e-01  +3.5196e-01  2.45e-03  4.59e-06  3.59e-04  1.35e-06  1.53e-05  9.22e-01  
 13  +3.4866e-01  +3.4874e-01  8.02e-05  1.50e-07  1.17e-05  4.32e-08  5.04e-07  9.68e-01  
 14  +3.4863e-01  +3.4863e-01  1.02e-06  1.92e-09  1.50e-07  5.52e-10  6.43e-09  9.87e-01  
 15  +3.4863e-01  +3.4863e-01  1.03e-08  1.93e-11  1.50e-09  5.54e-12  6.45e-11  9.90e-01  
 16  +3.4863e-01  +3.4863e-01  1.03e-10  1.93e-13  1.51e-11  5.57e-14  6.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.6724ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:20 PM: Optimal value: 3.486e-01
(CVXPY) Sep 20 03:14:20 PM: Compilation took 4.503e-03 seconds
(CVXPY) Sep 20 03:14:20 PM: Solver (including time spent in interface) took 7.393e-03 seconds
Iteration: 3, Objective: 0.3486
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:20 PM: Your problem has 547 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Finished problem compilation (took 4.264e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 547
  constraints   = 1047
  nnz(P)        = 0
  nnz(A)        = 7210
  cones (total) = 1
    : Nonnegative = 1,  numel = 1047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0155e+02  5.01e+02  9.56e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7855e-01  +1.0778e+02  1.07e+02  4.10e-01  2.25e+01  3.81e-03  5.71e-01  5.95e-01  
  2  +5.2798e-01  +1.1759e+01  1.12e+01  1.27e-01  8.95e+00  1.61e-02  2.42e-01  9.83e-01  
  3  +5.0284e-01  +2.4452e+00  1.94e+00  4.07e-02  2.86e+00  3.95e-05  1.70e-01  8.17e-01  
  4  +4.9855e-01  +1.1798e+00  6.81e-01  1.22e-02  8.97e-01  3.60e-05  4.25e-02  7.84e-01  
  5  +4.8750e-01  +1.1031e+00  6.16e-01  4.23e-03  3.22e-01  1.07e-04  1.12e-02  7.58e-01  
  6  +4.7492e-01  +1.0720e+00  5.97e-01  2.29e-03  1.74e-01  1.81e-04  5.95e-03  7.30e-01  
  7  +4.5406e-01  +9.6321e-01  5.09e-01  1.29e-03  9.80e-02  2.27e-04  3.39e-03  6.27e-01  
  8  +4.1166e-01  +7.0207e-01  2.90e-01  6.40e-04  4.81e-02  1.25e-04  1.81e-03  6.70e-01  
  9  +3.8588e-01  +5.7526e-01  1.89e-01  4.01e-04  3.00e-02  7.84e-05  1.20e-03  3.95e-01  
 10  +3.5218e-01  +4.1821e-01  6.60e-02  1.36e-04  1.02e-02  2.80e-05  4.45e-04  7.44e-01  
 11  +3.3758e-01  +3.5636e-01  1.88e-02  3.82e-05  2.87e-03  1.04e-05  1.31e-04  9.14e-01  
 12  +3.3288e-01  +3.3815e-01  5.28e-03  1.04e-05  8.02e-04  3.35e-06  3.65e-05  9.90e-01  
 13  +3.3087e-01  +3.3106e-01  1.90e-04  3.73e-07  2.88e-05  1.19e-07  1.33e-06  9.64e-01  
 14  +3.3080e-01  +3.3080e-01  1.90e-06  3.74e-09  2.89e-07  1.19e-09  1.33e-08  9.90e-01  
 15  +3.3080e-01  +3.3080e-01  1.90e-08  3.74e-11  2.89e-09  1.19e-11  1.33e-10  9.90e-01  
 16  +3.3080e-01  +3.3080e-01  1.90e-10  3.74e-13  2.89e-11  1.19e-13  1.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5834ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:20 PM: Optimal value: 3.308e-01
(CVXPY) Sep 20 03:14:20 PM: Compilation took 4.264e-03 seconds
(CVXPY) Sep 20 03:14:20 PM: Solver (including time spent in interface) took 7.493e-03 seconds
Iteration: 4, Objective: 0.3308
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:20 PM: Your problem has 557 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:20 PM: Finished problem compilation (took 4.824e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 557
  constraints   = 1057
  nnz(P)        = 0
  nnz(A)        = 7332
  cones (total) = 1
    : Nonnegative = 1,  numel = 1057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0154e+02  5.01e+02  9.56e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.7698e-01  +1.0774e+02  1.07e+02  4.10e-01  2.23e+01  3.82e-03  5.70e-01  5.96e-01  
  2  +5.2695e-01  +1.1701e+01  1.12e+01  1.25e-01  8.74e+00  1.62e-02  2.37e-01  9.90e-01  
  3  +5.0315e-01  +2.4011e+00  1.90e+00  4.01e-02  2.84e+00  4.56e-05  1.44e-01  8.79e-01  
  4  +4.9731e-01  +1.4118e+00  9.15e-01  1.26e-02  9.41e-01  6.56e-05  3.55e-02  7.90e-01  
  5  +4.7772e-01  +1.2396e+00  7.62e-01  3.32e-03  2.54e-01  1.94e-04  8.36e-03  7.90e-01  
  6  +4.5522e-01  +1.0766e+00  6.21e-01  1.80e-03  1.36e-01  2.27e-04  4.61e-03  5.18e-01  
  7  +4.3245e-01  +9.3619e-01  5.04e-01  1.21e-03  9.09e-02  2.06e-04  3.21e-03  3.64e-01  
  8  +3.8532e-01  +6.4037e-01  2.55e-01  5.71e-04  4.24e-02  1.06e-04  1.69e-03  8.06e-01  
  9  +3.5601e-01  +4.9930e-01  1.43e-01  3.13e-04  2.31e-02  7.93e-05  1.01e-03  9.90e-01  
 10  +3.2870e-01  +3.6950e-01  4.08e-02  8.55e-05  6.32e-03  2.11e-05  3.00e-04  7.62e-01  
 11  +3.2408e-01  +3.4813e-01  2.40e-02  5.04e-05  3.70e-03  1.29e-05  1.81e-04  6.65e-01  
 12  +3.1760e-01  +3.2197e-01  4.37e-03  9.08e-06  6.70e-04  2.34e-06  3.36e-05  8.51e-01  
 13  +3.1684e-01  +3.1886e-01  2.02e-03  4.18e-06  3.11e-04  1.10e-06  1.53e-05  6.84e-01  
 14  +3.1624e-01  +3.1658e-01  3.40e-04  6.88e-07  5.23e-05  2.00e-07  2.51e-06  8.50e-01  
 15  +3.1610e-01  +3.1611e-01  5.58e-06  1.11e-08  8.56e-07  2.74e-09  4.07e-08  9.88e-01  
 16  +3.1610e-01  +3.1610e-01  5.59e-08  1.11e-10  8.57e-09  2.74e-11  4.08e-10  9.90e-01  
 17  +3.1610e-01  +3.1610e-01  5.59e-10  1.11e-12  8.57e-11  2.74e-13  4.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.4086ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:20 PM: Optimal value: 3.161e-01
(CVXPY) Sep 20 03:14:20 PM: Compilation took 4.824e-03 seconds
(CVXPY) Sep 20 03:14:20 PM: Solver (including time spent in interface) took 8.197e-03 seconds
Iteration: 5, Objective: 0.3161
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 567 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 4.754e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 567
  constraints   = 1067
  nnz(P)        = 0
  nnz(A)        = 7615
  cones (total) = 1
    : Nonnegative = 1,  numel = 1067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0177e+02  5.01e+02  9.56e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.7617e-01  +1.0779e+02  1.07e+02  4.11e-01  2.22e+01  3.82e-03  5.70e-01  5.96e-01  
  2  +5.2652e-01  +1.1750e+01  1.12e+01  1.25e-01  8.65e+00  1.63e-02  2.37e-01  9.90e-01  
  3  +5.0335e-01  +2.2864e+00  1.78e+00  3.78e-02  2.70e+00  4.87e-05  1.26e-01  9.23e-01  
  4  +4.9558e-01  +1.4116e+00  9.16e-01  9.41e-03  7.14e-01  9.68e-05  2.45e-02  8.43e-01  
  5  +4.7361e-01  +1.2107e+00  7.37e-01  2.77e-03  2.12e-01  2.29e-04  6.90e-03  7.47e-01  
  6  +4.5139e-01  +1.1021e+00  6.51e-01  1.65e-03  1.25e-01  2.83e-04  4.17e-03  4.86e-01  
  7  +4.0985e-01  +8.3543e-01  4.26e-01  9.43e-04  7.06e-02  1.82e-04  2.58e-03  5.09e-01  
  8  +3.6186e-01  +5.6241e-01  2.01e-01  4.41e-04  3.24e-02  6.88e-05  1.40e-03  5.48e-01  
  9  +3.2810e-01  +3.9742e-01  6.93e-02  1.51e-04  1.10e-02  2.17e-05  5.53e-04  6.54e-01  
 10  +3.1087e-01  +3.1891e-01  8.04e-03  1.74e-05  1.26e-03  2.71e-06  7.25e-05  9.21e-01  
 11  +3.0836e-01  +3.0855e-01  1.89e-04  4.09e-07  2.95e-05  6.21e-08  1.78e-06  9.80e-01  
 12  +3.0830e-01  +3.0830e-01  1.89e-06  4.09e-09  2.95e-07  6.21e-10  1.78e-08  9.90e-01  
 13  +3.0830e-01  +3.0830e-01  1.89e-08  4.09e-11  2.95e-09  6.21e-12  1.78e-10  9.90e-01  
 14  +3.0830e-01  +3.0830e-01  1.89e-10  4.09e-13  2.95e-11  6.21e-14  1.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8453ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 3.083e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 4.754e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 6.896e-03 seconds
Iteration: 6, Objective: 0.3083
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 577 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 577
  constraints   = 1077
  nnz(P)        = 0
  nnz(A)        = 7837
  cones (total) = 1
    : Nonnegative = 1,  numel = 1077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0172e+02  5.01e+02  9.57e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.7480e-01  +1.0776e+02  1.07e+02  4.11e-01  2.21e+01  3.82e-03  5.69e-01  5.96e-01  
  2  +5.2566e-01  +1.1828e+01  1.13e+01  1.24e-01  8.56e+00  1.64e-02  2.35e-01  9.90e-01  
  3  +5.0396e-01  +2.1706e+00  1.67e+00  3.42e-02  2.49e+00  3.13e-04  1.01e-01  9.41e-01  
  4  +4.9782e-01  +2.1513e+00  1.65e+00  1.31e-02  1.00e+00  7.89e-04  3.17e-02  7.54e-01  
  5  +4.7698e-01  +1.7120e+00  1.24e+00  4.39e-03  3.38e-01  1.27e-03  1.06e-02  6.77e-01  
  6  +4.5439e-01  +1.4058e+00  9.51e-01  2.61e-03  1.99e-01  9.94e-04  6.48e-03  5.25e-01  
  7  +4.3243e-01  +1.1649e+00  7.32e-01  1.72e-03  1.30e-01  6.68e-04  4.43e-03  5.08e-01  
  8  +3.8987e-01  +7.5671e-01  3.67e-01  8.73e-04  6.47e-02  9.31e-05  2.51e-03  8.91e-01  
  9  +3.3373e-01  +4.3625e-01  1.03e-01  2.24e-04  1.63e-02  2.36e-05  7.48e-04  7.67e-01  
 10  +3.1789e-01  +3.6523e-01  4.73e-02  1.02e-04  7.46e-03  1.57e-05  3.66e-04  6.51e-01  
 11  +3.0897e-01  +3.2621e-01  1.72e-02  3.61e-05  2.68e-03  6.97e-06  1.31e-04  7.01e-01  
 12  +3.0786e-01  +3.2096e-01  1.31e-02  2.85e-05  2.05e-03  4.24e-06  1.18e-04  2.60e-01  
 13  +3.0781e-01  +3.2079e-01  1.30e-02  2.82e-05  2.04e-03  4.35e-06  1.16e-04  7.22e-02  
 14  +3.0654e-01  +3.1810e-01  1.16e-02  2.36e-05  1.78e-03  5.31e-06  8.55e-05  5.71e-01  
 15  +3.0279e-01  +3.0358e-01  7.85e-04  1.59e-06  1.20e-04  3.58e-07  5.98e-06  9.48e-01  
 16  +3.0250e-01  +3.0251e-01  1.00e-05  2.03e-08  1.53e-06  4.65e-09  7.69e-08  9.90e-01  
 17  +3.0250e-01  +3.0250e-01  1.00e-07  2.03e-10  1.53e-08  4.66e-11  7.69e-10  9.90e-01  
 18  +3.0250e-01  +3.0250e-01  1.00e-09  2.03e-12  1.53e-10  4.67e-13  7.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.3718ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 3.025e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 1.038e-02 seconds
Iteration: 7, Objective: 0.3025
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 4.242e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 7978
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0175e+02  5.01e+02  9.57e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.7385e-01  +1.0779e+02  1.07e+02  4.12e-01  2.19e+01  3.83e-03  5.68e-01  5.96e-01  
  2  +5.2526e-01  +1.1879e+01  1.14e+01  1.24e-01  8.46e+00  1.65e-02  2.34e-01  9.90e-01  
  3  +5.0425e-01  +2.1385e+00  1.63e+00  3.26e-02  2.39e+00  4.69e-04  9.26e-02  9.35e-01  
  4  +5.0007e-01  +2.2482e+00  1.75e+00  1.50e-02  1.15e+00  1.06e-03  3.60e-02  6.75e-01  
  5  +4.8229e-01  +1.8638e+00  1.38e+00  5.17e-03  3.98e-01  1.79e-03  1.23e-02  6.76e-01  
  6  +4.5394e-01  +1.3477e+00  8.94e-01  2.61e-03  1.98e-01  9.82e-04  6.53e-03  6.46e-01  
  7  +4.4562e-01  +1.2685e+00  8.23e-01  2.19e-03  1.66e-01  8.51e-04  5.52e-03  2.80e-01  
  8  +4.2726e-01  +1.1058e+00  6.79e-01  1.61e-03  1.21e-01  6.10e-04  4.19e-03  4.23e-01  
  9  +3.6594e-01  +6.0527e-01  2.39e-01  5.40e-04  3.96e-02  2.56e-05  1.62e-03  9.36e-01  
 10  +3.2430e-01  +4.0608e-01  8.18e-02  1.79e-04  1.31e-02  2.04e-05  6.12e-04  7.43e-01  
 11  +3.1240e-01  +3.5559e-01  4.32e-02  9.29e-05  6.81e-03  1.24e-05  3.31e-04  5.25e-01  
 12  +3.0184e-01  +3.1078e-01  8.94e-03  1.90e-05  1.39e-03  4.77e-06  7.13e-05  9.90e-01  
 13  +2.9912e-01  +3.0017e-01  1.05e-03  2.22e-06  1.63e-04  5.66e-07  8.48e-06  8.86e-01  
 14  +2.9883e-01  +2.9918e-01  3.45e-04  7.07e-07  5.31e-05  1.87e-07  2.72e-06  7.69e-01  
 15  +2.9870e-01  +2.9871e-01  4.65e-06  9.52e-09  7.16e-07  2.52e-09  3.66e-08  9.87e-01  
 16  +2.9870e-01  +2.9870e-01  4.65e-08  9.52e-11  7.16e-09  2.52e-11  3.66e-10  9.90e-01  
 17  +2.9870e-01  +2.9870e-01  4.65e-10  9.52e-13  7.16e-11  2.53e-13  3.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.0157ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 2.987e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 4.242e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 1.035e-02 seconds
Iteration: 8, Objective: 0.2987
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 597 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 4.287e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 597
  constraints   = 1097
  nnz(P)        = 0
  nnz(A)        = 8103
  cones (total) = 1
    : Nonnegative = 1,  numel = 1097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0175e+02  5.01e+02  9.57e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.7254e-01  +1.0781e+02  1.07e+02  4.13e-01  2.18e+01  3.83e-03  5.68e-01  5.96e-01  
  2  +5.2453e-01  +1.1974e+01  1.14e+01  1.24e-01  8.38e+00  1.66e-02  2.33e-01  9.90e-01  
  3  +5.0427e-01  +1.8674e+00  1.36e+00  2.62e-02  1.94e+00  3.29e-04  7.20e-02  9.71e-01  
  4  +5.0228e-01  +2.0165e+00  1.51e+00  1.43e-02  1.09e+00  6.74e-04  3.40e-02  5.81e-01  
  5  +4.8848e-01  +1.8716e+00  1.38e+00  5.24e-03  4.06e-01  1.32e-03  1.22e-02  7.16e-01  
  6  +4.6049e-01  +1.4084e+00  9.48e-01  2.83e-03  2.15e-01  8.18e-04  6.90e-03  5.92e-01  
  7  +4.4080e-01  +1.2280e+00  7.87e-01  1.97e-03  1.49e-01  5.89e-04  4.99e-03  5.40e-01  
  8  +4.0337e-01  +9.0369e-01  5.00e-01  1.24e-03  9.20e-02  2.13e-04  3.41e-03  7.30e-01  
  9  +3.4352e-01  +5.2396e-01  1.80e-01  3.98e-04  2.89e-02  5.98e-05  1.25e-03  6.87e-01  
 10  +3.1618e-01  +3.9352e-01  7.73e-02  1.71e-04  1.23e-02  3.50e-05  6.11e-04  7.49e-01  
 11  +2.9876e-01  +3.1119e-01  1.24e-02  2.75e-05  1.96e-03  5.05e-06  1.11e-04  8.50e-01  
 12  +2.9570e-01  +2.9815e-01  2.45e-03  5.36e-06  3.83e-04  1.00e-06  2.32e-05  8.45e-01  
 13  +2.9492e-01  +2.9497e-01  5.56e-05  1.21e-07  8.65e-06  2.30e-08  5.36e-07  9.90e-01  
 14  +2.9490e-01  +2.9490e-01  5.56e-07  1.21e-09  8.65e-08  2.30e-10  5.36e-09  9.90e-01  
 15  +2.9490e-01  +2.9490e-01  5.56e-09  1.21e-11  8.65e-10  2.30e-12  5.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.4135ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 2.949e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 4.287e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 8.778e-03 seconds
Iteration: 9, Objective: 0.2949
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 607 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 4.116e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 607
  constraints   = 1107
  nnz(P)        = 0
  nnz(A)        = 8204
  cones (total) = 1
    : Nonnegative = 1,  numel = 1107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0176e+02  5.01e+02  9.57e-01  3.55e+01  1.00e+00  1.02e+00   ------   
  1  +5.7184e-01  +1.0776e+02  1.07e+02  4.13e-01  2.16e+01  3.83e-03  5.68e-01  5.97e-01  
  2  +5.2409e-01  +1.2034e+01  1.15e+01  1.23e-01  8.26e+00  1.66e-02  2.32e-01  9.90e-01  
  3  +5.0441e-01  +1.8167e+00  1.31e+00  2.42e-02  1.80e+00  4.44e-04  6.47e-02  9.61e-01  
  4  +5.0335e-01  +1.9378e+00  1.43e+00  1.49e-02  1.13e+00  7.96e-04  3.54e-02  5.02e-01  
  5  +4.9228e-01  +2.1149e+00  1.62e+00  6.06e-03  4.69e-01  1.74e-03  1.39e-02  7.98e-01  
  6  +4.6577e-01  +1.5416e+00  1.08e+00  3.28e-03  2.50e-01  9.86e-04  7.87e-03  5.89e-01  
  7  +4.4703e-01  +1.3536e+00  9.07e-01  2.35e-03  1.78e-01  7.74e-04  5.81e-03  4.34e-01  
  8  +3.9927e-01  +9.3483e-01  5.36e-01  1.24e-03  9.20e-02  3.01e-04  3.34e-03  6.76e-01  
  9  +3.4804e-01  +5.9804e-01  2.50e-01  5.76e-04  4.18e-02  1.08e-04  1.78e-03  5.74e-01  
 10  +3.1276e-01  +4.0942e-01  9.67e-02  2.21e-04  1.59e-02  4.10e-05  7.87e-04  6.79e-01  
 11  +2.9325e-01  +3.1397e-01  2.07e-02  4.69e-05  3.35e-03  8.91e-06  1.89e-04  8.56e-01  
 12  +2.8806e-01  +2.9061e-01  2.55e-03  5.76e-06  4.10e-04  1.05e-06  2.48e-05  8.89e-01  
 13  +2.8784e-01  +2.8973e-01  1.88e-03  4.23e-06  3.02e-04  7.82e-07  1.82e-05  3.33e-01  
 14  +2.8736e-01  +2.8769e-01  3.28e-04  7.36e-07  5.25e-05  1.40e-07  3.20e-06  9.90e-01  
 15  +2.8725e-01  +2.8726e-01  3.79e-06  8.50e-09  6.07e-07  1.62e-09  3.70e-08  9.89e-01  
 16  +2.8725e-01  +2.8725e-01  3.79e-08  8.50e-11  6.07e-09  1.62e-11  3.70e-10  9.90e-01  
 17  +2.8725e-01  +2.8725e-01  3.79e-10  8.50e-13  6.07e-11  1.62e-13  3.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.9656ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 2.873e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 4.116e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 1.039e-02 seconds
Iteration: 10, Objective: 0.2873
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 617 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 4.737e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 617
  constraints   = 1117
  nnz(P)        = 0
  nnz(A)        = 8274
  cones (total) = 1
    : Nonnegative = 1,  numel = 1117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +5.0195e+02  5.01e+02  9.57e-01  3.53e+01  1.00e+00  1.02e+00   ------   
  1  +5.6958e-01  +1.0788e+02  1.07e+02  4.15e-01  2.15e+01  3.83e-03  5.69e-01  5.96e-01  
  2  +5.2292e-01  +1.2204e+01  1.17e+01  1.23e-01  8.22e+00  1.69e-02  2.32e-01  9.90e-01  
  3  +5.0576e-01  +2.3825e+00  1.88e+00  3.05e-02  2.26e+00  1.71e-03  7.56e-02  8.16e-01  
  4  +5.0550e-01  +2.4710e+00  1.97e+00  2.42e-02  1.82e+00  2.22e-03  5.73e-02  2.76e-01  
  5  +5.0251e-01  +2.4902e+00  1.99e+00  2.23e-02  1.66e+00  1.75e-03  5.48e-02  2.69e-01  
  6  +4.8648e-01  +2.2136e+00  1.73e+00  5.75e-03  4.44e-01  4.91e-03  1.31e-02  7.69e-01  
  7  +4.6462e-01  +1.7610e+00  1.30e+00  3.84e-03  2.93e-01  3.01e-03  9.11e-03  4.30e-01  
  8  +4.4431e-01  +1.5294e+00  1.09e+00  2.67e-03  2.02e-01  2.39e-03  6.49e-03  4.02e-01  
  9  +3.9639e-01  +9.6485e-01  5.68e-01  1.45e-03  1.06e-01  2.11e-04  3.93e-03  7.01e-01  
 10  +3.3077e-01  +5.1387e-01  1.83e-01  4.33e-04  3.11e-02  5.90e-05  1.40e-03  8.36e-01  
 11  +3.1001e-01  +4.1363e-01  1.04e-01  2.45e-04  1.74e-02  4.45e-05  8.79e-04  6.57e-01  
 12  +2.8818e-01  +3.0245e-01  1.43e-02  3.37e-05  2.38e-03  5.30e-06  1.40e-04  8.76e-01  
 13  +2.8466e-01  +2.8617e-01  1.51e-03  3.55e-06  2.50e-04  5.41e-07  1.59e-05  9.28e-01  
 14  +2.8424e-01  +2.8435e-01  1.17e-04  2.74e-07  1.93e-05  4.20e-08  1.25e-06  9.28e-01  
 15  +2.8420e-01  +2.8420e-01  1.19e-06  2.79e-09  1.96e-07  4.28e-10  1.28e-08  9.90e-01  
 16  +2.8420e-01  +2.8420e-01  1.19e-08  2.79e-11  1.96e-09  4.29e-12  1.28e-10  9.90e-01  
 17  +2.8420e-01  +2.8420e-01  1.21e-10  2.82e-13  1.99e-11  4.34e-14  1.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9879ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 2.842e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 4.737e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 1.108e-02 seconds
Iteration: 11, Objective: 0.2842
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 624 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 4.145e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 624
  constraints   = 1124
  nnz(P)        = 0
  nnz(A)        = 8345
  cones (total) = 1
    : Nonnegative = 1,  numel = 1124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0187e+02  5.01e+02  9.58e-01  3.53e+01  1.00e+00  1.02e+00   ------   
  1  +5.6845e-01  +1.0793e+02  1.07e+02  4.16e-01  2.14e+01  3.83e-03  5.70e-01  5.96e-01  
  2  +5.2224e-01  +1.2284e+01  1.18e+01  1.23e-01  8.18e+00  1.70e-02  2.32e-01  9.90e-01  
  3  +5.0610e-01  +2.6057e+00  2.10e+00  3.23e-02  2.38e+00  2.26e-03  7.83e-02  7.72e-01  
  4  +5.0579e-01  +2.6994e+00  2.19e+00  2.64e-02  1.97e+00  2.80e-03  6.18e-02  2.48e-01  
  5  +5.0271e-01  +2.7550e+00  2.25e+00  2.42e-02  1.79e+00  2.23e-03  5.83e-02  3.01e-01  
  6  +4.8716e-01  +2.3846e+00  1.90e+00  6.88e-03  5.28e-01  5.29e-03  1.58e-02  7.37e-01  
  7  +4.6426e-01  +1.7964e+00  1.33e+00  4.33e-03  3.27e-01  2.82e-03  1.04e-02  4.77e-01  
  8  +4.4381e-01  +1.5827e+00  1.14e+00  2.90e-03  2.18e-01  2.61e-03  7.09e-03  3.82e-01  
  9  +4.2358e-01  +1.3258e+00  9.02e-01  2.31e-03  1.72e-01  1.42e-03  5.90e-03  3.55e-01  
 10  +3.7895e-01  +8.9013e-01  5.11e-01  1.25e-03  9.09e-02  3.95e-04  3.53e-03  6.63e-01  
 11  +3.2807e-01  +5.2050e-01  1.92e-01  4.65e-04  3.31e-02  9.80e-05  1.54e-03  6.47e-01  
 12  +2.9737e-01  +3.5113e-01  5.38e-02  1.29e-04  9.07e-03  2.49e-05  5.00e-04  8.14e-01  
 13  +2.8834e-01  +3.0644e-01  1.81e-02  4.28e-05  3.01e-03  8.27e-06  1.81e-04  7.43e-01  
 14  +2.8426e-01  +2.8718e-01  2.92e-03  6.86e-06  4.81e-04  1.25e-06  3.08e-05  9.14e-01  
 15  +2.8405e-01  +2.8629e-01  2.25e-03  5.24e-06  3.68e-04  9.65e-07  2.35e-05  2.89e-01  
 16  +2.8356e-01  +2.8421e-01  6.43e-04  1.50e-06  1.05e-04  2.55e-07  6.82e-06  9.90e-01  
 17  +2.8335e-01  +2.8337e-01  1.17e-05  2.73e-08  1.92e-06  4.60e-09  1.25e-07  9.83e-01  
 18  +2.8335e-01  +2.8335e-01  1.17e-07  2.73e-10  1.92e-08  4.60e-11  1.25e-09  9.90e-01  
 19  +2.8335e-01  +2.8335e-01  1.17e-09  2.73e-12  1.92e-10  4.61e-13  1.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8945ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 2.834e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 4.145e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 1.153e-02 seconds
Iteration: 12, Objective: 0.2834
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 628 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 5.685e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 628
  constraints   = 1128
  nnz(P)        = 0
  nnz(A)        = 8397
  cones (total) = 1
    : Nonnegative = 1,  numel = 1128

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0187e+02  5.01e+02  9.58e-01  3.52e+01  1.00e+00  1.02e+00   ------   
  1  +5.6838e-01  +1.0793e+02  1.07e+02  4.16e-01  2.13e+01  3.83e-03  5.70e-01  5.96e-01  
  2  +5.2208e-01  +1.2288e+01  1.18e+01  1.23e-01  8.15e+00  1.70e-02  2.32e-01  9.90e-01  
  3  +5.0612e-01  +2.6337e+00  2.13e+00  3.24e-02  2.38e+00  2.34e-03  7.84e-02  7.66e-01  
  4  +5.0582e-01  +2.7293e+00  2.22e+00  2.66e-02  1.98e+00  2.89e-03  6.23e-02  2.44e-01  
  5  +5.0270e-01  +2.7985e+00  2.30e+00  2.43e-02  1.80e+00  2.31e-03  5.85e-02  3.13e-01  
  6  +4.8713e-01  +2.4086e+00  1.92e+00  7.01e-03  5.37e-01  5.32e-03  1.61e-02  7.32e-01  
  7  +4.6489e-01  +1.8304e+00  1.37e+00  4.50e-03  3.40e-01  2.88e-03  1.08e-02  4.62e-01  
  8  +4.4462e-01  +1.6103e+00  1.17e+00  3.01e-03  2.26e-01  2.57e-03  7.39e-03  4.05e-01  
  9  +4.2533e-01  +1.3599e+00  9.35e-01  2.39e-03  1.78e-01  1.47e-03  6.10e-03  3.60e-01  
 10  +3.8084e-01  +9.0060e-01  5.20e-01  1.29e-03  9.38e-02  2.73e-04  3.66e-03  7.51e-01  
 11  +3.2384e-01  +4.8615e-01  1.62e-01  3.91e-04  2.78e-02  5.26e-05  1.32e-03  7.27e-01  
 12  +2.9794e-01  +3.5406e-01  5.61e-02  1.34e-04  9.44e-03  2.31e-05  5.21e-04  8.09e-01  
 13  +2.8795e-01  +3.0452e-01  1.66e-02  3.94e-05  2.76e-03  6.77e-06  1.67e-04  7.38e-01  
 14  +2.8424e-01  +2.8712e-01  2.88e-03  6.77e-06  4.74e-04  1.16e-06  3.04e-05  9.02e-01  
 15  +2.8403e-01  +2.8623e-01  2.20e-03  5.14e-06  3.61e-04  8.91e-07  2.31e-05  2.94e-01  
 16  +2.8354e-01  +2.8413e-01  5.86e-04  1.37e-06  9.58e-05  2.31e-07  6.24e-06  9.90e-01  
 17  +2.8335e-01  +2.8336e-01  9.62e-06  2.24e-08  1.57e-06  3.75e-09  1.03e-07  9.85e-01  
 18  +2.8335e-01  +2.8335e-01  9.62e-08  2.24e-10  1.57e-08  3.75e-11  1.03e-09  9.90e-01  
 19  +2.8335e-01  +2.8335e-01  9.62e-10  2.24e-12  1.57e-10  3.76e-13  1.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.7551ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 2.834e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 5.685e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 1.119e-02 seconds
Iteration: 13, Objective: 0.2834
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 632 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 4.286e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 632
  constraints   = 1132
  nnz(P)        = 0
  nnz(A)        = 8434
  cones (total) = 1
    : Nonnegative = 1,  numel = 1132

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0187e+02  5.01e+02  9.58e-01  3.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.6831e-01  +1.0793e+02  1.07e+02  4.17e-01  2.13e+01  3.83e-03  5.70e-01  5.96e-01  
  2  +5.2204e-01  +1.2287e+01  1.18e+01  1.23e-01  8.13e+00  1.70e-02  2.32e-01  9.90e-01  
  3  +5.0615e-01  +2.6448e+00  2.14e+00  3.25e-02  2.39e+00  2.36e-03  7.87e-02  7.64e-01  
  4  +5.0584e-01  +2.7386e+00  2.23e+00  2.67e-02  1.98e+00  2.91e-03  6.25e-02  2.43e-01  
  5  +5.0271e-01  +2.8049e+00  2.30e+00  2.44e-02  1.80e+00  2.32e-03  5.88e-02  3.12e-01  
  6  +4.8704e-01  +2.4113e+00  1.92e+00  6.99e-03  5.34e-01  5.36e-03  1.61e-02  7.33e-01  
  7  +4.6477e-01  +1.8385e+00  1.37e+00  4.50e-03  3.39e-01  2.94e-03  1.08e-02  4.60e-01  
  8  +4.4408e-01  +1.6139e+00  1.17e+00  3.01e-03  2.25e-01  2.61e-03  7.37e-03  4.06e-01  
  9  +4.2456e-01  +1.3563e+00  9.32e-01  2.39e-03  1.78e-01  1.46e-03  6.12e-03  3.56e-01  
 10  +3.8149e-01  +9.1549e-01  5.34e-01  1.33e-03  9.63e-02  3.37e-04  3.75e-03  7.11e-01  
 11  +3.2397e-01  +4.8895e-01  1.65e-01  3.99e-04  2.83e-02  5.79e-05  1.34e-03  7.35e-01  
 12  +3.0012e-01  +3.6801e-01  6.79e-02  1.63e-04  1.14e-02  2.62e-05  6.24e-04  6.71e-01  
 13  +2.8675e-01  +3.0221e-01  1.55e-02  3.66e-05  2.57e-03  5.87e-06  1.57e-04  8.02e-01  
 14  +2.8330e-01  +2.8606e-01  2.76e-03  6.51e-06  4.55e-04  1.06e-06  2.95e-05  8.92e-01  
 15  +2.8309e-01  +2.8519e-01  2.10e-03  4.92e-06  3.45e-04  8.15e-07  2.23e-05  3.02e-01  
 16  +2.8261e-01  +2.8311e-01  4.92e-04  1.15e-06  8.06e-05  1.92e-07  5.29e-06  9.90e-01  
 17  +2.8245e-01  +2.8246e-01  7.05e-06  1.65e-08  1.15e-06  2.73e-09  7.59e-08  9.86e-01  
 18  +2.8245e-01  +2.8245e-01  7.05e-08  1.65e-10  1.15e-08  2.73e-11  7.59e-10  9.90e-01  
 19  +2.8245e-01  +2.8245e-01  7.05e-10  1.65e-12  1.15e-10  2.73e-13  7.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.0427ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 2.825e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 4.286e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 1.236e-02 seconds
Iteration: 14, Objective: 0.2825
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:21 PM: Your problem has 636 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:21 PM: Finished problem compilation (took 5.749e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 636
  constraints   = 1136
  nnz(P)        = 0
  nnz(A)        = 8462
  cones (total) = 1
    : Nonnegative = 1,  numel = 1136

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0188e+02  5.01e+02  9.58e-01  3.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.6737e-01  +1.0797e+02  1.07e+02  4.17e-01  2.12e+01  3.83e-03  5.70e-01  5.95e-01  
  2  +5.2169e-01  +1.2344e+01  1.18e+01  1.23e-01  8.10e+00  1.71e-02  2.32e-01  9.90e-01  
  3  +5.0613e-01  +2.6817e+00  2.18e+00  3.22e-02  2.36e+00  2.53e-03  7.73e-02  7.55e-01  
  4  +5.0584e-01  +2.7900e+00  2.28e+00  2.69e-02  1.99e+00  3.07e-03  6.26e-02  2.35e-01  
  5  +5.0256e-01  +2.9274e+00  2.42e+00  2.43e-02  1.79e+00  2.52e-03  5.78e-02  3.59e-01  
  6  +4.8603e-01  +2.4717e+00  1.99e+00  7.07e-03  5.39e-01  5.53e-03  1.62e-02  7.25e-01  
  7  +4.6245e-01  +1.8519e+00  1.39e+00  4.47e-03  3.37e-01  2.89e-03  1.07e-02  4.76e-01  
  8  +4.4242e-01  +1.6415e+00  1.20e+00  3.05e-03  2.29e-01  2.72e-03  7.48e-03  3.57e-01  
  9  +4.2372e-01  +1.3892e+00  9.65e-01  2.47e-03  1.83e-01  1.52e-03  6.30e-03  3.59e-01  
 10  +3.8194e-01  +9.3596e-01  5.54e-01  1.40e-03  1.01e-01  3.60e-04  3.94e-03  6.77e-01  
 11  +3.2312e-01  +4.8804e-01  1.65e-01  4.03e-04  2.85e-02  5.55e-05  1.35e-03  7.52e-01  
 12  +2.9928e-01  +3.6807e-01  6.88e-02  1.66e-04  1.17e-02  2.60e-05  6.38e-04  6.70e-01  
 13  +2.8587e-01  +3.0153e-01  1.57e-02  3.74e-05  2.61e-03  5.85e-06  1.61e-04  8.01e-01  
 14  +2.8239e-01  +2.8512e-01  2.73e-03  6.50e-06  4.54e-04  1.04e-06  2.96e-05  8.93e-01  
 15  +2.8219e-01  +2.8431e-01  2.12e-03  5.00e-06  3.49e-04  8.08e-07  2.27e-05  2.92e-01  
 16  +2.8173e-01  +2.8226e-01  5.35e-04  1.26e-06  8.82e-05  2.07e-07  5.81e-06  9.90e-01  
 17  +2.8155e-01  +2.8156e-01  8.25e-06  1.94e-08  1.36e-06  3.15e-09  8.98e-08  9.85e-01  
 18  +2.8155e-01  +2.8155e-01  8.25e-08  1.94e-10  1.36e-08  3.15e-11  8.99e-10  9.90e-01  
 19  +2.8155e-01  +2.8155e-01  8.25e-10  1.94e-12  1.36e-10  3.16e-13  9.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.2245ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:21 PM: Optimal value: 2.816e-01
(CVXPY) Sep 20 03:14:21 PM: Compilation took 5.749e-03 seconds
(CVXPY) Sep 20 03:14:21 PM: Solver (including time spent in interface) took 1.175e-02 seconds
Iteration: 15, Objective: 0.2816
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:22 PM: Your problem has 643 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:22 PM: Finished problem compilation (took 4.843e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 643
  constraints   = 1143
  nnz(P)        = 0
  nnz(A)        = 8538
  cones (total) = 1
    : Nonnegative = 1,  numel = 1143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0187e+02  5.01e+02  9.58e-01  3.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.6702e-01  +1.0802e+02  1.07e+02  4.18e-01  2.11e+01  3.83e-03  5.70e-01  5.95e-01  
  2  +5.2153e-01  +1.2359e+01  1.18e+01  1.23e-01  8.06e+00  1.71e-02  2.32e-01  9.90e-01  
  3  +5.0620e-01  +2.7191e+00  2.21e+00  3.25e-02  2.38e+00  2.60e-03  7.78e-02  7.49e-01  
  4  +5.0590e-01  +2.8238e+00  2.32e+00  2.72e-02  2.01e+00  3.14e-03  6.33e-02  2.31e-01  
  5  +5.0257e-01  +2.9633e+00  2.46e+00  2.45e-02  1.80e+00  2.58e-03  5.82e-02  3.65e-01  
  6  +4.8578e-01  +2.4924e+00  2.01e+00  7.07e-03  5.38e-01  5.66e-03  1.62e-02  7.27e-01  
  7  +4.6302e-01  +1.9465e+00  1.48e+00  4.52e-03  3.41e-01  3.56e-03  1.08e-02  4.51e-01  
  8  +4.4318e-01  +1.7070e+00  1.26e+00  3.18e-03  2.38e-01  3.02e-03  7.74e-03  3.70e-01  
  9  +4.1880e-01  +1.3684e+00  9.50e-01  2.39e-03  1.77e-01  1.49e-03  6.13e-03  4.04e-01  
 10  +3.6500e-01  +7.9933e-01  4.34e-01  1.07e-03  7.71e-02  2.68e-04  3.13e-03  7.01e-01  
 11  +3.1963e-01  +4.8869e-01  1.69e-01  4.17e-04  2.95e-02  8.07e-05  1.43e-03  6.07e-01  
 12  +2.9239e-01  +3.3811e-01  4.57e-02  1.12e-04  7.81e-03  2.02e-05  4.45e-04  7.96e-01  
 13  +2.8315e-01  +2.9195e-01  8.80e-03  2.13e-05  1.48e-03  3.69e-06  9.38e-05  8.87e-01  
 14  +2.8131e-01  +2.8350e-01  2.19e-03  5.27e-06  3.67e-04  9.07e-07  2.40e-05  7.96e-01  
 15  +2.8110e-01  +2.8259e-01  1.48e-03  3.57e-06  2.49e-04  5.86e-07  1.64e-05  4.99e-01  
 16  +2.8076e-01  +2.8113e-01  3.70e-04  8.85e-07  6.17e-05  1.46e-07  4.09e-06  7.79e-01  
 17  +2.8065e-01  +2.8066e-01  4.24e-06  1.01e-08  7.06e-07  1.66e-09  4.70e-08  9.89e-01  
 18  +2.8065e-01  +2.8065e-01  4.24e-08  1.01e-10  7.06e-09  1.66e-11  4.70e-10  9.90e-01  
 19  +2.8065e-01  +2.8065e-01  4.24e-10  1.01e-12  7.06e-11  1.66e-13  4.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.2657ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:22 PM: Optimal value: 2.807e-01
(CVXPY) Sep 20 03:14:22 PM: Compilation took 4.843e-03 seconds
(CVXPY) Sep 20 03:14:22 PM: Solver (including time spent in interface) took 1.431e-02 seconds
Iteration: 16, Objective: 0.2807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:22 PM: Your problem has 646 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:22 PM: Finished problem compilation (took 6.516e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 646
  constraints   = 1146
  nnz(P)        = 0
  nnz(A)        = 8558
  cones (total) = 1
    : Nonnegative = 1,  numel = 1146

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0188e+02  5.01e+02  9.58e-01  3.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.6689e-01  +1.0804e+02  1.07e+02  4.18e-01  2.11e+01  3.83e-03  5.70e-01  5.95e-01  
  2  +5.2144e-01  +1.2367e+01  1.18e+01  1.23e-01  8.04e+00  1.71e-02  2.32e-01  9.90e-01  
  3  +5.0617e-01  +2.7194e+00  2.21e+00  3.23e-02  2.36e+00  2.63e-03  7.74e-02  7.48e-01  
  4  +5.0589e-01  +2.8281e+00  2.32e+00  2.71e-02  2.00e+00  3.17e-03  6.32e-02  2.30e-01  
  5  +5.0254e-01  +2.9845e+00  2.48e+00  2.44e-02  1.79e+00  2.62e-03  5.79e-02  3.74e-01  
  6  +4.8577e-01  +2.5041e+00  2.02e+00  7.15e-03  5.43e-01  5.63e-03  1.64e-02  7.22e-01  
  7  +4.6309e-01  +1.9532e+00  1.49e+00  4.60e-03  3.46e-01  3.49e-03  1.10e-02  4.50e-01  
  8  +4.4334e-01  +1.7152e+00  1.27e+00  3.22e-03  2.41e-01  2.97e-03  7.87e-03  3.73e-01  
  9  +4.2108e-01  +1.4020e+00  9.81e-01  2.49e-03  1.84e-01  1.56e-03  6.36e-03  3.85e-01  
 10  +3.6632e-01  +8.0317e-01  4.37e-01  1.09e-03  7.80e-02  1.82e-04  3.17e-03  7.70e-01  
 11  +3.1962e-01  +4.8621e-01  1.67e-01  4.12e-04  2.91e-02  5.66e-05  1.41e-03  6.21e-01  
 12  +2.9223e-01  +3.3685e-01  4.46e-02  1.09e-04  7.63e-03  1.57e-05  4.36e-04  7.83e-01  
 13  +2.8337e-01  +2.9297e-01  9.60e-03  2.33e-05  1.62e-03  3.59e-06  1.02e-04  8.70e-01  
 14  +2.8135e-01  +2.8367e-01  2.32e-03  5.60e-06  3.89e-04  8.80e-07  2.56e-05  8.25e-01  
 15  +2.8111e-01  +2.8262e-01  1.51e-03  3.64e-06  2.53e-04  5.62e-07  1.67e-05  5.17e-01  
 16  +2.8072e-01  +2.8096e-01  2.41e-04  5.77e-07  4.01e-05  8.92e-08  2.67e-06  8.48e-01  
 17  +2.8065e-01  +2.8065e-01  2.59e-06  6.20e-09  4.32e-07  9.58e-10  2.88e-08  9.89e-01  
 18  +2.8065e-01  +2.8065e-01  2.59e-08  6.20e-11  4.32e-09  9.59e-12  2.88e-10  9.90e-01  
 19  +2.8065e-01  +2.8065e-01  2.59e-10  6.20e-13  4.32e-11  9.59e-14  2.88e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6256ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:22 PM: Optimal value: 2.807e-01
(CVXPY) Sep 20 03:14:22 PM: Compilation took 6.516e-03 seconds
(CVXPY) Sep 20 03:14:22 PM: Solver (including time spent in interface) took 1.049e-02 seconds
Iteration: 17, Objective: 0.2807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:22 PM: Your problem has 647 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:22 PM: Finished problem compilation (took 4.217e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 647
  constraints   = 1147
  nnz(P)        = 0
  nnz(A)        = 8560
  cones (total) = 1
    : Nonnegative = 1,  numel = 1147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0188e+02  5.01e+02  9.58e-01  3.49e+01  1.00e+00  1.02e+00   ------   
  1  +5.6684e-01  +1.0804e+02  1.07e+02  4.18e-01  2.11e+01  3.83e-03  5.70e-01  5.95e-01  
  2  +5.2142e-01  +1.2370e+01  1.18e+01  1.23e-01  8.03e+00  1.71e-02  2.32e-01  9.90e-01  
  3  +5.0617e-01  +2.7215e+00  2.22e+00  3.23e-02  2.36e+00  2.63e-03  7.73e-02  7.48e-01  
  4  +5.0589e-01  +2.8304e+00  2.32e+00  2.71e-02  2.00e+00  3.17e-03  6.32e-02  2.29e-01  
  5  +5.0253e-01  +2.9889e+00  2.49e+00  2.44e-02  1.79e+00  2.63e-03  5.78e-02  3.75e-01  
  6  +4.8576e-01  +2.5062e+00  2.02e+00  7.15e-03  5.43e-01  5.63e-03  1.65e-02  7.21e-01  
  7  +4.6306e-01  +1.9536e+00  1.49e+00  4.60e-03  3.46e-01  3.49e-03  1.10e-02  4.50e-01  
  8  +4.4331e-01  +1.7155e+00  1.27e+00  3.23e-03  2.41e-01  2.97e-03  7.87e-03  3.73e-01  
  9  +4.2100e-01  +1.4010e+00  9.80e-01  2.49e-03  1.83e-01  1.55e-03  6.35e-03  3.87e-01  
 10  +3.6651e-01  +8.0579e-01  4.39e-01  1.09e-03  7.84e-02  1.92e-04  3.18e-03  7.64e-01  
 11  +3.1955e-01  +4.8596e-01  1.66e-01  4.12e-04  2.90e-02  5.87e-05  1.41e-03  6.25e-01  
 12  +2.9223e-01  +3.3697e-01  4.47e-02  1.10e-04  7.65e-03  1.61e-05  4.37e-04  7.83e-01  
 13  +2.8363e-01  +2.9426e-01  1.06e-02  2.58e-05  1.79e-03  3.99e-06  1.13e-04  8.42e-01  
 14  +2.8142e-01  +2.8393e-01  2.52e-03  6.08e-06  4.22e-04  9.63e-07  2.77e-05  8.57e-01  
 15  +2.8113e-01  +2.8272e-01  1.59e-03  3.81e-06  2.65e-04  6.02e-07  1.75e-05  5.14e-01  
 16  +2.8067e-01  +2.8074e-01  7.17e-05  1.72e-07  1.19e-05  2.68e-08  7.97e-07  9.90e-01  
 17  +2.8065e-01  +2.8065e-01  7.21e-07  1.73e-09  1.20e-07  2.69e-10  8.02e-09  9.90e-01  
 18  +2.8065e-01  +2.8065e-01  7.21e-09  1.73e-11  1.20e-09  2.69e-12  8.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8147ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:22 PM: Optimal value: 2.807e-01
(CVXPY) Sep 20 03:14:22 PM: Compilation took 4.217e-03 seconds
(CVXPY) Sep 20 03:14:22 PM: Solver (including time spent in interface) took 1.146e-02 seconds
FULL MODEL:
  Accruacy: 0.678
  Our objective: 0.3559999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.218)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x7 = 0)                       <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.022)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.337177038192749
Best over terms:
  Our final objective: 0.218
    Its accruacy: 0.609
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.218
  Highest accruacy: 0.609
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

