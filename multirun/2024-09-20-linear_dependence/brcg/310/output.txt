Command:
python test_script.py -s linear_dependence -d 8 -n 10000 --seed 43 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1378
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 8.

Computed total variation: 0.19539999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:05 PM: Your problem has 5017 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:05 PM: Finished problem compilation (took 1.729e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5017
  constraints   = 10017
  nnz(P)        = 0
  nnz(A)        = 55017
  cones (total) = 1
    : Nonnegative = 1,  numel = 10017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.11e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +1.0695e+03  1.07e+03  4.19e-01  7.08e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3484e-01  +1.2652e+02  1.26e+02  1.63e-01  3.53e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0931e-01  +3.2736e+01  3.22e+01  1.22e-01  2.62e+01  3.95e-05  2.53e-01  2.15e-01  
  4  +5.0083e-01  +2.5876e+00  2.09e+00  1.42e-02  3.09e+00  5.49e-06  1.59e-01  6.71e-01  
  5  +5.0011e-01  +9.0891e-01  4.09e-01  2.74e-03  6.08e-01  2.83e-05  7.58e-02  9.90e-01  
  6  +5.0000e-01  +6.1561e-01  1.16e-01  7.63e-04  1.70e-01  2.85e-05  1.15e-02  8.66e-01  
  7  +4.9809e-01  +6.8112e-01  1.83e-01  1.45e-04  3.26e-02  1.11e-03  4.41e-04  9.78e-01  
  8  +4.9372e-01  +6.6180e-01  1.68e-01  5.22e-05  1.17e-02  2.62e-03  1.56e-04  6.70e-01  
  9  +4.8636e-01  +6.0351e-01  1.17e-01  3.67e-05  8.22e-03  9.77e-04  1.14e-04  4.59e-01  
 10  +4.7679e-01  +5.4854e-01  7.18e-02  2.02e-05  4.51e-03  6.44e-05  6.59e-05  8.10e-01  
 11  +4.7206e-01  +5.2497e-01  5.29e-02  1.38e-05  3.09e-03  6.77e-07  4.63e-05  9.31e-01  
 12  +4.6004e-01  +4.6837e-01  8.33e-03  1.96e-06  4.37e-04  1.91e-07  7.12e-06  9.11e-01  
 13  +4.5738e-01  +4.5786e-01  4.77e-04  9.95e-08  2.22e-05  1.40e-08  4.10e-07  9.60e-01  
 14  +4.5720e-01  +4.5721e-01  4.88e-06  1.00e-09  2.23e-07  1.43e-10  4.19e-09  9.90e-01  
 15  +4.5720e-01  +4.5720e-01  4.88e-08  1.00e-11  2.23e-09  1.43e-12  4.19e-11  9.90e-01  
 16  +4.5720e-01  +4.5720e-01  4.89e-10  1.00e-13  2.24e-11  1.68e-14  4.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.9898ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:05 PM: Optimal value: 4.572e-01
(CVXPY) Sep 20 03:15:05 PM: Compilation took 1.729e-02 seconds
(CVXPY) Sep 20 03:15:05 PM: Solver (including time spent in interface) took 5.400e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4572
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:05 PM: Your problem has 5027 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:05 PM: Finished problem compilation (took 2.139e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5027
  constraints   = 10027
  nnz(P)        = 0
  nnz(A)        = 63368
  cones (total) = 1
    : Nonnegative = 1,  numel = 10027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +1.0697e+03  1.07e+03  4.19e-01  7.33e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3469e-01  +1.2624e+02  1.26e+02  1.63e-01  3.65e+01  1.47e-02  2.66e-01  9.01e-01  
  3  +5.0923e-01  +3.2582e+01  3.21e+01  1.22e-01  2.70e+01  3.96e-05  2.52e-01  2.19e-01  
  4  +5.0079e-01  +2.4912e+00  1.99e+00  1.35e-02  3.06e+00  5.59e-06  1.54e-01  7.03e-01  
  5  +5.0012e-01  +8.9586e-01  3.96e-01  2.65e-03  6.09e-01  2.40e-05  6.45e-02  9.90e-01  
  6  +5.0002e-01  +7.1702e-01  2.17e-01  1.40e-03  3.22e-01  3.82e-05  1.34e-02  8.75e-01  
  7  +4.9822e-01  +7.4162e-01  2.43e-01  1.70e-04  3.96e-02  1.06e-03  4.86e-04  9.71e-01  
  8  +4.9450e-01  +7.1530e-01  2.21e-01  6.88e-05  1.60e-02  2.12e-03  1.94e-04  6.43e-01  
  9  +4.9117e-01  +6.7804e-01  1.87e-01  5.82e-05  1.35e-02  1.25e-03  1.66e-04  3.26e-01  
 10  +4.9045e-01  +6.7088e-01  1.80e-01  5.34e-05  1.24e-02  1.01e-03  1.52e-04  2.47e-01  
 11  +4.8782e-01  +6.5523e-01  1.67e-01  4.44e-05  1.03e-02  8.79e-04  1.26e-04  2.75e-01  
 12  +4.8592e-01  +6.4359e-01  1.58e-01  3.94e-05  9.14e-03  7.00e-04  1.11e-04  2.55e-01  
 13  +4.8250e-01  +6.2029e-01  1.38e-01  3.26e-05  7.55e-03  1.35e-04  9.25e-05  7.04e-01  
 14  +4.8028e-01  +6.1146e-01  1.31e-01  2.88e-05  6.67e-03  1.23e-04  8.17e-05  1.87e-01  
 15  +4.8019e-01  +6.1107e-01  1.31e-01  2.87e-05  6.66e-03  1.21e-04  8.17e-05  1.16e-02  
 16  +4.7223e-01  +5.8088e-01  1.09e-01  2.30e-05  5.32e-03  6.47e-06  6.80e-05  7.90e-01  
 17  +4.4756e-01  +4.8056e-01  3.30e-02  5.36e-06  1.24e-03  2.41e-06  1.63e-05  8.72e-01  
 18  +4.3260e-01  +4.3554e-01  2.94e-03  4.60e-07  1.06e-04  1.74e-07  1.46e-06  9.90e-01  
 19  +4.3121e-01  +4.3124e-01  3.00e-05  4.69e-09  1.08e-06  1.75e-09  1.49e-08  9.90e-01  
 20  +4.3120e-01  +4.3120e-01  3.00e-07  4.69e-11  1.08e-08  1.75e-11  1.49e-10  9.90e-01  
 21  +4.3120e-01  +4.3120e-01  3.00e-09  4.69e-13  1.08e-10  1.76e-13  1.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.3389ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:06 PM: Optimal value: 4.312e-01
(CVXPY) Sep 20 03:15:06 PM: Compilation took 2.139e-02 seconds
(CVXPY) Sep 20 03:15:06 PM: Solver (including time spent in interface) took 8.707e-02 seconds
Iteration: 2, Objective: 0.4312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:06 PM: Your problem has 5037 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:06 PM: Finished problem compilation (took 2.082e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5037
  constraints   = 10037
  nnz(P)        = 0
  nnz(A)        = 65292
  cones (total) = 1
    : Nonnegative = 1,  numel = 10037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8407e-01  +1.0697e+03  1.07e+03  4.19e-01  7.33e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3465e-01  +1.2616e+02  1.26e+02  1.63e-01  3.65e+01  1.48e-02  2.66e-01  9.02e-01  
  3  +5.0922e-01  +3.2546e+01  3.20e+01  1.22e-01  2.70e+01  3.96e-05  2.52e-01  2.20e-01  
  4  +5.0078e-01  +2.4789e+00  1.98e+00  1.35e-02  3.04e+00  5.61e-06  1.52e-01  7.08e-01  
  5  +5.0012e-01  +9.0428e-01  4.04e-01  2.71e-03  6.22e-01  2.41e-05  6.24e-02  9.90e-01  
  6  +5.0001e-01  +7.3784e-01  2.38e-01  1.50e-03  3.46e-01  4.66e-05  1.21e-02  8.67e-01  
  7  +4.9802e-01  +7.4591e-01  2.48e-01  1.61e-04  3.75e-02  1.17e-03  4.54e-04  9.66e-01  
  8  +4.9376e-01  +7.2166e-01  2.28e-01  6.42e-05  1.50e-02  2.43e-03  1.79e-04  6.45e-01  
  9  +4.8815e-01  +6.7439e-01  1.86e-01  5.29e-05  1.23e-02  1.49e-03  1.50e-04  2.92e-01  
 10  +4.8849e-01  +6.7528e-01  1.87e-01  4.71e-05  1.10e-02  1.05e-03  1.31e-04  4.24e-01  
 11  +4.8812e-01  +6.7340e-01  1.85e-01  4.57e-05  1.06e-02  9.97e-04  1.27e-04  7.40e-02  
 12  +4.8518e-01  +6.5944e-01  1.74e-01  4.00e-05  9.30e-03  7.23e-04  1.12e-04  3.25e-01  
 13  +4.8009e-01  +6.3724e-01  1.57e-01  3.32e-05  7.72e-03  5.77e-04  9.39e-05  2.63e-01  
 14  +4.6864e-01  +5.8852e-01  1.20e-01  2.31e-05  5.36e-03  3.09e-04  6.72e-05  4.52e-01  
 15  +4.4149e-01  +4.8187e-01  4.04e-02  6.86e-06  1.59e-03  3.28e-06  2.14e-05  8.77e-01  
 16  +4.2620e-01  +4.2955e-01  3.35e-03  5.45e-07  1.26e-04  1.81e-07  1.78e-06  9.35e-01  
 17  +4.2472e-01  +4.2476e-01  3.94e-05  6.38e-09  1.47e-06  2.10e-09  2.10e-08  9.89e-01  
 18  +4.2470e-01  +4.2470e-01  3.94e-07  6.38e-11  1.47e-08  2.10e-11  2.10e-10  9.90e-01  
 19  +4.2470e-01  +4.2470e-01  3.94e-09  6.38e-13  1.47e-10  2.11e-13  2.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.5363ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:06 PM: Optimal value: 4.247e-01
(CVXPY) Sep 20 03:15:06 PM: Compilation took 2.082e-02 seconds
(CVXPY) Sep 20 03:15:06 PM: Solver (including time spent in interface) took 7.896e-02 seconds
Iteration: 3, Objective: 0.4247
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:06 PM: Your problem has 5047 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:06 PM: Finished problem compilation (took 2.510e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5047
  constraints   = 10047
  nnz(P)        = 0
  nnz(A)        = 66549
  cones (total) = 1
    : Nonnegative = 1,  numel = 10047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8405e-01  +1.0696e+03  1.07e+03  4.19e-01  7.33e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3461e-01  +1.2608e+02  1.26e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.02e-01  
  3  +5.0921e-01  +3.2512e+01  3.20e+01  1.22e-01  2.70e+01  3.96e-05  2.52e-01  2.21e-01  
  4  +5.0078e-01  +2.4715e+00  1.97e+00  1.34e-02  3.03e+00  5.62e-06  1.52e-01  7.10e-01  
  5  +5.0013e-01  +9.1841e-01  4.18e-01  2.81e-03  6.45e-01  2.41e-05  6.22e-02  9.79e-01  
  6  +5.0005e-01  +8.0972e-01  3.10e-01  1.98e-03  4.55e-01  4.37e-05  1.67e-02  8.14e-01  
  7  +4.9825e-01  +7.8955e-01  2.91e-01  1.98e-04  4.61e-02  1.05e-03  5.58e-04  9.72e-01  
  8  +4.9410e-01  +7.6061e-01  2.67e-01  7.32e-05  1.71e-02  2.37e-03  2.03e-04  6.72e-01  
  9  +4.8963e-01  +7.1711e-01  2.27e-01  6.14e-05  1.43e-02  1.66e-03  1.72e-04  2.62e-01  
 10  +4.8631e-01  +6.9312e-01  2.07e-01  5.15e-05  1.20e-02  1.32e-03  1.44e-04  2.85e-01  
 11  +4.8402e-01  +6.7958e-01  1.96e-01  4.55e-05  1.06e-02  1.13e-03  1.28e-04  2.13e-01  
 12  +4.8250e-01  +6.6869e-01  1.86e-01  4.14e-05  9.62e-03  8.54e-04  1.16e-04  2.62e-01  
 13  +4.8126e-01  +6.6099e-01  1.80e-01  4.08e-05  9.50e-03  7.10e-04  1.15e-04  9.75e-02  
 14  +4.6930e-01  +6.0564e-01  1.36e-01  2.66e-05  6.18e-03  3.84e-04  7.72e-05  5.16e-01  
 15  +4.6070e-01  +5.7012e-01  1.09e-01  2.06e-05  4.78e-03  2.72e-04  6.11e-05  2.63e-01  
 16  +4.4228e-01  +4.9544e-01  5.32e-02  9.31e-06  2.15e-03  4.62e-05  2.91e-05  7.50e-01  
 17  +4.2746e-01  +4.4110e-01  1.36e-02  2.25e-06  5.20e-04  4.69e-07  7.34e-06  9.85e-01  
 18  +4.2214e-01  +4.2339e-01  1.25e-03  2.05e-07  4.74e-05  4.56e-08  6.83e-07  9.14e-01  
 19  +4.2161e-01  +4.2162e-01  1.28e-05  2.10e-09  4.86e-07  4.79e-10  7.01e-09  9.90e-01  
 20  +4.2160e-01  +4.2160e-01  1.28e-07  2.10e-11  4.86e-09  4.79e-12  7.01e-11  9.90e-01  
 21  +4.2160e-01  +4.2160e-01  1.28e-09  2.10e-13  4.86e-11  4.80e-14  7.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 85.3458ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:06 PM: Optimal value: 4.216e-01
(CVXPY) Sep 20 03:15:06 PM: Compilation took 2.510e-02 seconds
(CVXPY) Sep 20 03:15:06 PM: Solver (including time spent in interface) took 9.285e-02 seconds
Iteration: 4, Objective: 0.4216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:06 PM: Your problem has 5057 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:06 PM: Finished problem compilation (took 2.046e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5057
  constraints   = 10057
  nnz(P)        = 0
  nnz(A)        = 67143
  cones (total) = 1
    : Nonnegative = 1,  numel = 10057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8394e-01  +1.0697e+03  1.07e+03  4.20e-01  7.32e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3452e-01  +1.2588e+02  1.25e+02  1.63e-01  3.63e+01  1.48e-02  2.65e-01  9.03e-01  
  3  +5.0918e-01  +3.2459e+01  3.19e+01  1.22e-01  2.69e+01  3.97e-05  2.51e-01  2.23e-01  
  4  +5.0078e-01  +2.4676e+00  1.97e+00  1.34e-02  3.03e+00  5.64e-06  1.51e-01  7.13e-01  
  5  +5.0014e-01  +9.6225e-01  4.62e-01  3.11e-03  7.12e-01  2.38e-05  6.40e-02  9.41e-01  
  6  +5.0007e-01  +8.4250e-01  3.42e-01  2.20e-03  5.07e-01  4.01e-05  1.91e-02  7.74e-01  
  7  +4.9849e-01  +8.0440e-01  3.06e-01  2.19e-04  5.11e-02  9.18e-04  6.11e-04  9.86e-01  
  8  +4.9457e-01  +7.7608e-01  2.82e-01  7.74e-05  1.81e-02  2.20e-03  2.12e-04  6.91e-01  
  9  +4.9178e-01  +7.5282e-01  2.61e-01  6.60e-05  1.54e-02  1.97e-03  1.81e-04  2.16e-01  
 10  +4.8936e-01  +7.2685e-01  2.37e-01  5.91e-05  1.38e-02  1.31e-03  1.63e-04  3.01e-01  
 11  +4.8724e-01  +7.0455e-01  2.17e-01  5.48e-05  1.28e-02  7.20e-04  1.52e-04  3.53e-01  
 12  +4.8233e-01  +6.7744e-01  1.95e-01  4.57e-05  1.06e-02  4.97e-04  1.28e-04  3.42e-01  
 13  +4.7791e-01  +6.5540e-01  1.77e-01  4.00e-05  9.30e-03  3.53e-04  1.14e-04  2.71e-01  
 14  +4.6112e-01  +5.8037e-01  1.19e-01  2.39e-05  5.54e-03  9.31e-05  7.10e-05  6.69e-01  
 15  +4.4849e-01  +5.3178e-01  8.33e-02  1.57e-05  3.63e-03  5.26e-05  4.82e-05  4.12e-01  
 16  +4.4270e-01  +5.1019e-01  6.75e-02  1.24e-05  2.86e-03  3.90e-05  3.87e-05  2.56e-01  
 17  +4.2616e-01  +4.4854e-01  2.24e-02  3.81e-06  8.80e-04  4.48e-07  1.25e-05  9.90e-01  
 18  +4.1836e-01  +4.2182e-01  3.47e-03  5.84e-07  1.35e-04  9.25e-08  1.98e-06  8.64e-01  
 19  +4.1693e-01  +4.1701e-01  7.69e-05  1.29e-08  2.98e-06  3.89e-09  4.41e-08  9.90e-01  
 20  +4.1690e-01  +4.1690e-01  7.69e-07  1.29e-10  2.98e-08  3.89e-11  4.41e-10  9.90e-01  
 21  +4.1690e-01  +4.1690e-01  7.69e-09  1.29e-12  2.98e-10  3.89e-13  4.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.3612ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:06 PM: Optimal value: 4.169e-01
(CVXPY) Sep 20 03:15:06 PM: Compilation took 2.046e-02 seconds
(CVXPY) Sep 20 03:15:06 PM: Solver (including time spent in interface) took 8.512e-02 seconds
Iteration: 5, Objective: 0.4169
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:06 PM: Your problem has 5067 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:06 PM: Finished problem compilation (took 2.120e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5067
  constraints   = 10067
  nnz(P)        = 0
  nnz(A)        = 67750
  cones (total) = 1
    : Nonnegative = 1,  numel = 10067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8384e-01  +1.0698e+03  1.07e+03  4.20e-01  7.32e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3444e-01  +1.2573e+02  1.25e+02  1.63e-01  3.62e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0917e-01  +3.2421e+01  3.19e+01  1.21e-01  2.68e+01  3.98e-05  2.51e-01  2.24e-01  
  4  +5.0078e-01  +2.4701e+00  1.97e+00  1.34e-02  3.03e+00  5.66e-06  1.50e-01  7.15e-01  
  5  +5.0020e-01  +1.0931e+00  5.93e-01  3.99e-03  9.14e-01  2.28e-05  7.42e-02  8.19e-01  
  6  +5.0002e-01  +7.3382e-01  2.34e-01  1.46e-03  3.35e-01  3.93e-05  1.04e-02  9.71e-01  
  7  +4.9851e-01  +7.6078e-01  2.62e-01  1.75e-04  4.08e-02  8.86e-04  4.85e-04  9.65e-01  
  8  +4.9460e-01  +7.4451e-01  2.50e-01  6.47e-05  1.51e-02  2.12e-03  1.77e-04  6.79e-01  
  9  +4.8971e-01  +7.1691e-01  2.27e-01  5.29e-05  1.23e-02  1.79e-03  1.46e-04  2.85e-01  
 10  +4.8218e-01  +6.7577e-01  1.94e-01  4.79e-05  1.11e-02  6.48e-04  1.36e-04  4.27e-01  
 11  +4.7870e-01  +6.6494e-01  1.86e-01  4.40e-05  1.02e-02  4.24e-04  1.26e-04  3.32e-01  
 12  +4.6558e-01  +6.0825e-01  1.43e-01  3.07e-05  7.12e-03  1.14e-04  9.08e-05  6.53e-01  
 13  +4.4926e-01  +5.4225e-01  9.30e-02  1.83e-05  4.23e-03  6.17e-05  5.65e-05  4.41e-01  
 14  +4.4393e-01  +5.2180e-01  7.79e-02  1.48e-05  3.42e-03  3.74e-05  4.64e-05  4.01e-01  
 15  +4.3514e-01  +4.8808e-01  5.29e-02  9.50e-06  2.20e-03  9.73e-06  3.05e-05  7.90e-01  
 16  +4.2212e-01  +4.4060e-01  1.85e-02  3.22e-06  7.43e-04  2.70e-06  1.08e-05  7.32e-01  
 17  +4.1658e-01  +4.2094e-01  4.36e-03  7.47e-07  1.73e-04  5.07e-07  2.58e-06  8.53e-01  
 18  +4.1489e-01  +4.1510e-01  2.13e-04  3.64e-08  8.40e-06  1.92e-08  1.26e-07  9.78e-01  
 19  +4.1480e-01  +4.1480e-01  2.13e-06  3.64e-10  8.41e-08  1.92e-10  1.27e-09  9.90e-01  
 20  +4.1480e-01  +4.1480e-01  2.13e-08  3.64e-12  8.41e-10  1.92e-12  1.27e-11  9.90e-01  
 21  +4.1480e-01  +4.1480e-01  2.13e-10  3.64e-14  8.41e-12  1.92e-14  1.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 79.5765ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:06 PM: Optimal value: 4.148e-01
(CVXPY) Sep 20 03:15:06 PM: Compilation took 2.120e-02 seconds
(CVXPY) Sep 20 03:15:06 PM: Solver (including time spent in interface) took 8.785e-02 seconds
Iteration: 6, Objective: 0.4148
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:07 PM: Your problem has 5077 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Finished problem compilation (took 2.591e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5077
  constraints   = 10077
  nnz(P)        = 0
  nnz(A)        = 68249
  cones (total) = 1
    : Nonnegative = 1,  numel = 10077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8381e-01  +1.0698e+03  1.07e+03  4.20e-01  7.31e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3442e-01  +1.2570e+02  1.25e+02  1.63e-01  3.61e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0916e-01  +3.2408e+01  3.19e+01  1.21e-01  2.68e+01  3.98e-05  2.51e-01  2.25e-01  
  4  +5.0078e-01  +2.4675e+00  1.97e+00  1.34e-02  3.03e+00  5.67e-06  1.50e-01  7.16e-01  
  5  +5.0016e-01  +9.9641e-01  4.96e-01  3.34e-03  7.64e-01  2.41e-05  6.42e-02  9.22e-01  
  6  +5.0005e-01  +8.5973e-01  3.60e-01  2.20e-03  5.07e-01  5.17e-05  1.44e-02  8.59e-01  
  7  +4.9840e-01  +8.4162e-01  3.43e-01  2.25e-04  5.26e-02  9.64e-04  6.26e-04  9.87e-01  
  8  +4.9445e-01  +8.0690e-01  3.12e-01  8.41e-05  1.97e-02  2.12e-03  2.30e-04  6.80e-01  
  9  +4.9196e-01  +7.8598e-01  2.94e-01  7.26e-05  1.70e-02  1.95e-03  1.99e-04  2.01e-01  
 10  +4.8811e-01  +7.4471e-01  2.57e-01  6.39e-05  1.49e-02  1.07e-03  1.77e-04  3.60e-01  
 11  +4.7646e-01  +6.6935e-01  1.93e-01  4.39e-05  1.02e-02  4.23e-04  1.26e-04  5.63e-01  
 12  +4.7411e-01  +6.5733e-01  1.83e-01  4.17e-05  9.69e-03  2.83e-04  1.21e-04  2.59e-01  
 13  +4.6181e-01  +6.0203e-01  1.40e-01  2.96e-05  6.85e-03  9.91e-05  8.85e-05  5.76e-01  
 14  +4.4847e-01  +5.4737e-01  9.89e-02  1.95e-05  4.52e-03  4.05e-05  6.09e-05  5.44e-01  
 15  +4.3878e-01  +5.0976e-01  7.10e-02  1.35e-05  3.11e-03  2.71e-05  4.33e-05  3.14e-01  
 16  +4.2990e-01  +4.7361e-01  4.37e-02  7.79e-06  1.80e-03  2.75e-06  2.56e-05  9.90e-01  
 17  +4.1622e-01  +4.2439e-01  8.17e-03  1.43e-06  3.30e-04  5.31e-07  4.97e-06  9.90e-01  
 18  +4.1304e-01  +4.1339e-01  3.48e-04  6.07e-08  1.40e-05  2.24e-08  2.15e-07  9.64e-01  
 19  +4.1290e-01  +4.1290e-01  3.51e-06  6.13e-10  1.41e-07  2.26e-10  2.17e-09  9.90e-01  
 20  +4.1290e-01  +4.1290e-01  3.51e-08  6.13e-12  1.41e-09  2.26e-12  2.17e-11  9.90e-01  
 21  +4.1290e-01  +4.1290e-01  3.51e-10  6.13e-14  1.41e-11  2.27e-14  2.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 83.4033ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:07 PM: Optimal value: 4.129e-01
(CVXPY) Sep 20 03:15:07 PM: Compilation took 2.591e-02 seconds
(CVXPY) Sep 20 03:15:07 PM: Solver (including time spent in interface) took 9.049e-02 seconds
Iteration: 7, Objective: 0.4129
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:07 PM: Your problem has 5087 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Finished problem compilation (took 1.998e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5087
  constraints   = 10087
  nnz(P)        = 0
  nnz(A)        = 68844
  cones (total) = 1
    : Nonnegative = 1,  numel = 10087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8377e-01  +1.0698e+03  1.07e+03  4.20e-01  7.30e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3439e-01  +1.2563e+02  1.25e+02  1.63e-01  3.60e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0915e-01  +3.2387e+01  3.19e+01  1.21e-01  2.67e+01  3.98e-05  2.51e-01  2.26e-01  
  4  +5.0078e-01  +2.4681e+00  1.97e+00  1.34e-02  3.03e+00  5.67e-06  1.49e-01  7.16e-01  
  5  +5.0018e-01  +1.0453e+00  5.45e-01  3.67e-03  8.40e-01  2.37e-05  6.79e-02  8.77e-01  
  6  +5.0003e-01  +7.9832e-01  2.98e-01  1.82e-03  4.18e-01  4.91e-05  1.16e-02  8.95e-01  
  7  +4.9841e-01  +8.1942e-01  3.21e-01  2.10e-04  4.91e-02  9.50e-04  5.82e-04  9.74e-01  
  8  +4.9431e-01  +7.9100e-01  2.97e-01  7.71e-05  1.80e-02  2.18e-03  2.10e-04  6.86e-01  
  9  +4.9225e-01  +7.7385e-01  2.82e-01  6.89e-05  1.61e-02  1.87e-03  1.88e-04  2.18e-01  
 10  +4.8653e-01  +7.3400e-01  2.47e-01  5.74e-05  1.34e-02  1.29e-03  1.59e-04  3.21e-01  
 11  +4.8111e-01  +7.0421e-01  2.23e-01  4.99e-05  1.16e-02  1.02e-03  1.41e-04  2.00e-01  
 12  +4.7545e-01  +6.7552e-01  2.00e-01  4.35e-05  1.01e-02  7.83e-04  1.25e-04  2.03e-01  
 13  +4.6485e-01  +6.1741e-01  1.53e-01  3.46e-05  8.02e-03  7.23e-06  1.03e-04  7.38e-01  
 14  +4.5673e-01  +5.8454e-01  1.28e-01  2.73e-05  6.31e-03  6.03e-06  8.32e-05  2.31e-01  
 15  +4.3618e-01  +5.0245e-01  6.63e-02  1.25e-05  2.88e-03  3.21e-06  4.04e-05  8.23e-01  
 16  +4.2637e-01  +4.6472e-01  3.83e-02  6.87e-06  1.58e-03  2.45e-06  2.30e-05  9.90e-01  
 17  +4.1863e-01  +4.3598e-01  1.73e-02  3.07e-06  7.09e-04  1.17e-06  1.06e-05  8.32e-01  
 18  +4.1493e-01  +4.2317e-01  8.24e-03  1.45e-06  3.34e-04  5.58e-07  5.07e-06  7.68e-01  
 19  +4.1174e-01  +4.1207e-01  3.35e-04  5.89e-08  1.36e-05  2.24e-08  2.10e-07  9.61e-01  
 20  +4.1160e-01  +4.1160e-01  3.36e-06  5.91e-10  1.36e-07  2.25e-10  2.11e-09  9.90e-01  
 21  +4.1160e-01  +4.1160e-01  3.36e-08  5.91e-12  1.36e-09  2.25e-12  2.11e-11  9.90e-01  
 22  +4.1160e-01  +4.1160e-01  3.36e-10  5.91e-14  1.36e-11  2.25e-14  2.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 88.559ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:07 PM: Optimal value: 4.116e-01
(CVXPY) Sep 20 03:15:07 PM: Compilation took 1.998e-02 seconds
(CVXPY) Sep 20 03:15:07 PM: Solver (including time spent in interface) took 1.004e-01 seconds
Iteration: 8, Objective: 0.4116
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:07 PM: Your problem has 5091 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Finished problem compilation (took 2.969e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5091
  constraints   = 10091
  nnz(P)        = 0
  nnz(A)        = 69368
  cones (total) = 1
    : Nonnegative = 1,  numel = 10091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8372e-01  +1.0699e+03  1.07e+03  4.20e-01  7.30e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3435e-01  +1.2556e+02  1.25e+02  1.63e-01  3.60e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0914e-01  +3.2370e+01  3.19e+01  1.21e-01  2.67e+01  3.98e-05  2.51e-01  2.26e-01  
  4  +5.0078e-01  +2.4691e+00  1.97e+00  1.34e-02  3.03e+00  5.68e-06  1.49e-01  7.17e-01  
  5  +5.0017e-01  +1.0374e+00  5.37e-01  3.62e-03  8.28e-01  2.40e-05  6.63e-02  8.90e-01  
  6  +5.0006e-01  +8.7798e-01  3.78e-01  2.24e-03  5.15e-01  5.36e-05  1.29e-02  9.40e-01  
  7  +4.9846e-01  +8.6640e-01  3.68e-01  2.32e-04  5.43e-02  9.28e-04  6.40e-04  9.59e-01  
  8  +4.9460e-01  +8.2727e-01  3.33e-01  8.67e-05  2.03e-02  2.01e-03  2.36e-04  6.85e-01  
  9  +4.9255e-01  +8.0396e-01  3.11e-01  7.76e-05  1.81e-02  1.69e-03  2.12e-04  2.07e-01  
 10  +4.8748e-01  +7.5201e-01  2.65e-01  6.51e-05  1.52e-02  8.80e-04  1.80e-04  4.08e-01  
 11  +4.8293e-01  +7.2181e-01  2.39e-01  5.73e-05  1.33e-02  6.23e-04  1.61e-04  2.58e-01  
 12  +4.7799e-01  +6.9528e-01  2.17e-01  5.02e-05  1.17e-02  4.96e-04  1.43e-04  1.96e-01  
 13  +4.5848e-01  +5.9350e-01  1.35e-01  2.90e-05  6.72e-03  5.03e-06  8.80e-05  8.12e-01  
 14  +4.4759e-01  +5.4953e-01  1.02e-01  2.08e-05  4.80e-03  3.80e-06  6.51e-05  3.13e-01  
 15  +4.3524e-01  +5.0093e-01  6.57e-02  1.27e-05  2.93e-03  2.49e-06  4.14e-05  4.29e-01  
 16  +4.2958e-01  +4.7778e-01  4.82e-02  8.89e-06  2.05e-03  2.75e-06  2.96e-05  8.29e-01  
 17  +4.2162e-01  +4.4774e-01  2.61e-02  4.74e-06  1.09e-03  1.63e-06  1.62e-05  7.37e-01  
 18  +4.1891e-01  +4.3817e-01  1.93e-02  3.46e-06  7.97e-04  1.23e-06  1.19e-05  3.97e-01  
 19  +4.1259e-01  +4.1537e-01  2.78e-03  4.98e-07  1.15e-04  1.73e-07  1.78e-06  8.65e-01  
 20  +4.1155e-01  +4.1168e-01  1.25e-04  2.24e-08  5.17e-06  7.53e-09  8.12e-08  9.58e-01  
 21  +4.1150e-01  +4.1150e-01  1.26e-06  2.25e-10  5.20e-08  7.56e-11  8.18e-10  9.90e-01  
 22  +4.1150e-01  +4.1150e-01  1.26e-08  2.25e-12  5.20e-10  7.56e-13  8.18e-12  9.90e-01  
 23  +4.1150e-01  +4.1150e-01  1.26e-10  2.25e-14  5.20e-12  7.67e-15  8.29e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 85.4078ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:07 PM: Optimal value: 4.115e-01
(CVXPY) Sep 20 03:15:07 PM: Compilation took 2.969e-02 seconds
(CVXPY) Sep 20 03:15:07 PM: Solver (including time spent in interface) took 8.493e-02 seconds
Iteration: 9, Objective: 0.4115
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:07 PM: Your problem has 5101 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Finished problem compilation (took 2.488e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5101
  constraints   = 10101
  nnz(P)        = 0
  nnz(A)        = 70158
  cones (total) = 1
    : Nonnegative = 1,  numel = 10101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8372e-01  +1.0699e+03  1.07e+03  4.20e-01  7.30e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3435e-01  +1.2557e+02  1.25e+02  1.63e-01  3.59e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0914e-01  +3.2366e+01  3.19e+01  1.21e-01  2.67e+01  3.98e-05  2.51e-01  2.27e-01  
  4  +5.0078e-01  +2.4681e+00  1.97e+00  1.34e-02  3.03e+00  5.68e-06  1.49e-01  7.17e-01  
  5  +5.0018e-01  +1.0566e+00  5.56e-01  3.75e-03  8.57e-01  2.38e-05  6.77e-02  8.73e-01  
  6  +5.0007e-01  +8.7274e-01  3.73e-01  2.31e-03  5.31e-01  4.58e-05  1.55e-02  8.59e-01  
  7  +4.9857e-01  +8.6832e-01  3.70e-01  2.54e-04  5.94e-02  8.75e-04  7.03e-04  9.62e-01  
  8  +4.9487e-01  +8.3131e-01  3.36e-01  9.25e-05  2.16e-02  1.98e-03  2.52e-04  6.90e-01  
  9  +4.9263e-01  +8.0522e-01  3.13e-01  8.08e-05  1.89e-02  1.66e-03  2.21e-04  2.34e-01  
 10  +4.8878e-01  +7.6033e-01  2.72e-01  7.02e-05  1.64e-02  8.97e-04  1.94e-04  3.80e-01  
 11  +4.8242e-01  +7.1899e-01  2.37e-01  5.69e-05  1.32e-02  6.14e-04  1.60e-04  3.38e-01  
 12  +4.7757e-01  +6.9336e-01  2.16e-01  5.00e-05  1.16e-02  4.90e-04  1.43e-04  1.97e-01  
 13  +4.5845e-01  +5.9463e-01  1.36e-01  2.92e-05  6.77e-03  4.99e-06  8.87e-05  8.15e-01  
 14  +4.4840e-01  +5.5396e-01  1.06e-01  2.16e-05  4.99e-03  3.89e-06  6.76e-05  2.94e-01  
 15  +4.3510e-01  +5.0121e-01  6.61e-02  1.28e-05  2.95e-03  2.50e-06  4.18e-05  4.59e-01  
 16  +4.2916e-01  +4.7683e-01  4.77e-02  8.77e-06  2.02e-03  2.74e-06  2.91e-05  8.36e-01  
 17  +4.1913e-01  +4.3968e-01  2.05e-02  3.72e-06  8.57e-04  1.22e-06  1.29e-05  6.97e-01  
 18  +4.1282e-01  +4.1670e-01  3.88e-03  6.96e-07  1.60e-04  2.29e-07  2.50e-06  8.43e-01  
 19  +4.1134e-01  +4.1144e-01  1.02e-04  1.83e-08  4.22e-06  5.91e-09  6.66e-08  9.77e-01  
 20  +4.1130e-01  +4.1130e-01  1.03e-06  1.83e-10  4.23e-08  5.91e-11  6.67e-10  9.90e-01  
 21  +4.1130e-01  +4.1130e-01  1.03e-08  1.83e-12  4.23e-10  5.91e-13  6.67e-12  9.90e-01  
 22  +4.1130e-01  +4.1130e-01  1.03e-10  1.83e-14  4.23e-12  5.94e-15  6.69e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 88.9078ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:07 PM: Optimal value: 4.113e-01
(CVXPY) Sep 20 03:15:07 PM: Compilation took 2.488e-02 seconds
(CVXPY) Sep 20 03:15:07 PM: Solver (including time spent in interface) took 9.583e-02 seconds
Iteration: 10, Objective: 0.4113
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:07 PM: Your problem has 5103 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:07 PM: Finished problem compilation (took 2.522e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5103
  constraints   = 10103
  nnz(P)        = 0
  nnz(A)        = 70302
  cones (total) = 1
    : Nonnegative = 1,  numel = 10103

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8373e-01  +1.0698e+03  1.07e+03  4.20e-01  7.30e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3435e-01  +1.2555e+02  1.25e+02  1.63e-01  3.59e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0914e-01  +3.2360e+01  3.19e+01  1.21e-01  2.67e+01  3.98e-05  2.50e-01  2.27e-01  
  4  +5.0078e-01  +2.4668e+00  1.97e+00  1.34e-02  3.03e+00  5.68e-06  1.49e-01  7.18e-01  
  5  +5.0018e-01  +1.0553e+00  5.55e-01  3.74e-03  8.55e-01  2.38e-05  6.74e-02  8.75e-01  
  6  +5.0008e-01  +8.8941e-01  3.89e-01  2.45e-03  5.63e-01  4.33e-05  1.77e-02  8.09e-01  
  7  +4.9885e-01  +8.7561e-01  3.77e-01  3.13e-04  7.31e-02  7.22e-04  8.73e-04  9.64e-01  
  8  +4.9552e-01  +8.4398e-01  3.48e-01  1.05e-04  2.45e-02  1.87e-03  2.86e-04  7.05e-01  
  9  +4.9258e-01  +8.0569e-01  3.13e-01  8.48e-05  1.98e-02  1.53e-03  2.32e-04  3.17e-01  
 10  +4.9039e-01  +7.7168e-01  2.81e-01  7.77e-05  1.81e-02  8.99e-04  2.15e-04  3.22e-01  
 11  +4.8163e-01  +7.1743e-01  2.36e-01  5.40e-05  1.26e-02  6.90e-04  1.52e-04  4.29e-01  
 12  +4.7455e-01  +6.8048e-01  2.06e-01  4.53e-05  1.05e-02  5.09e-04  1.30e-04  2.35e-01  
 13  +4.5653e-01  +5.8764e-01  1.31e-01  2.81e-05  6.51e-03  4.92e-06  8.61e-05  7.81e-01  
 14  +4.3597e-01  +5.0405e-01  6.81e-02  1.32e-05  3.04e-03  2.77e-06  4.29e-05  6.86e-01  
 15  +4.3073e-01  +4.8384e-01  5.31e-02  9.99e-06  2.30e-03  2.43e-06  3.31e-05  4.08e-01  
 16  +4.2234e-01  +4.5210e-01  2.98e-02  5.47e-06  1.26e-03  1.38e-06  1.87e-05  4.86e-01  
 17  +4.1428e-01  +4.2168e-01  7.40e-03  1.33e-06  3.06e-04  4.64e-07  4.71e-06  9.79e-01  
 18  +4.1172e-01  +4.1274e-01  1.02e-03  1.83e-07  4.22e-05  6.36e-08  6.62e-07  8.72e-01  
 19  +4.1130e-01  +4.1132e-01  1.21e-05  2.17e-09  5.01e-07  7.47e-10  7.90e-09  9.89e-01  
 20  +4.1130e-01  +4.1130e-01  1.22e-07  2.19e-11  5.04e-09  7.52e-12  7.95e-11  9.90e-01  
 21  +4.1130e-01  +4.1130e-01  1.22e-09  2.19e-13  5.04e-11  7.53e-14  7.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.3908ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:08 PM: Optimal value: 4.113e-01
(CVXPY) Sep 20 03:15:08 PM: Compilation took 2.522e-02 seconds
(CVXPY) Sep 20 03:15:08 PM: Solver (including time spent in interface) took 9.519e-02 seconds
FULL MODEL:
  Accruacy: 0.5801
  Our objective: 0.16019999999999995

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.1378)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.003)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0026)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.009)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.191569805145264
Best over terms:
  Our final objective: 0.1378
    Its accruacy: 0.5689
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1378
  Highest accruacy: 0.5689
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

