Command:
python test_script.py -s linear_dependence -d 2 -n 5000 --seed 34 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6043999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 2.

Computed total variation: 0.6044
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:59 PM: Your problem has 2505 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:59 PM: Finished problem compilation (took 5.478e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2505
  constraints   = 5005
  nnz(P)        = 0
  nnz(A)        = 12505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +2.5020e+03  2.50e+03  9.76e-01  5.13e+01  1.00e+00  1.00e+00   ------   
  1  +6.3699e-01  +4.3711e+02  4.36e+02  2.65e-01  2.42e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5764e-01  +8.0168e+01  7.96e+01  1.27e-01  1.34e+01  5.35e-03  2.10e-01  6.03e-01  
  3  +5.0071e-01  +5.0664e+00  4.57e+00  3.99e-02  3.97e+00  1.37e-03  2.00e-01  2.86e-01  
  4  +4.9397e-01  +2.2334e+00  1.74e+00  7.56e-03  8.39e-01  3.44e-03  1.87e-02  9.90e-01  
  5  +4.3387e-01  +2.1122e+00  1.68e+00  9.62e-04  1.10e-01  2.89e-02  2.01e-03  9.13e-01  
  6  +3.8923e-01  +1.7442e+00  1.35e+00  6.77e-04  7.62e-02  2.12e-02  1.48e-03  3.47e-01  
  7  +3.0166e-01  +9.3913e-01  6.37e-01  3.64e-04  3.90e-02  1.49e-04  1.00e-03  5.16e-01  
  8  +2.2420e-01  +3.7597e-01  1.52e-01  9.28e-05  9.57e-03  8.71e-07  4.09e-04  6.97e-01  
  9  +1.9957e-01  +2.0909e-01  9.52e-03  5.88e-06  6.01e-04  1.92e-07  3.62e-05  9.38e-01  
 10  +1.9792e-01  +1.9802e-01  1.02e-04  6.26e-08  6.41e-06  2.11e-09  4.02e-07  9.89e-01  
 11  +1.9790e-01  +1.9790e-01  1.01e-06  6.26e-10  6.40e-08  2.11e-11  4.02e-09  9.90e-01  
 12  +1.9790e-01  +1.9790e-01  1.01e-08  6.26e-12  6.40e-10  2.11e-13  4.02e-11  9.90e-01  
 13  +1.9790e-01  +1.9790e-01  1.01e-10  6.26e-14  6.40e-12  2.11e-15  4.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.8787ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:59 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:59 PM: Optimal value: 1.979e-01
(CVXPY) Sep 20 03:03:59 PM: Compilation took 5.478e-02 seconds
(CVXPY) Sep 20 03:03:59 PM: Solver (including time spent in interface) took 8.372e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.1979
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:59 PM: Your problem has 2506 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:59 PM: Finished problem compilation (took 5.100e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2506
  constraints   = 5006
  nnz(P)        = 0
  nnz(A)        = 13535
  cones (total) = 1
    : Nonnegative = 1,  numel = 5006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9980e-01  +2.5021e+03  2.50e+03  9.76e-01  5.33e+01  1.00e+00  1.00e+00   ------   
  1  +6.3691e-01  +4.3759e+02  4.37e+02  2.66e-01  2.52e+01  4.49e-03  3.90e-01  7.24e-01  
  2  +5.5764e-01  +8.0206e+01  7.96e+01  1.27e-01  1.39e+01  5.38e-03  2.11e-01  6.03e-01  
  3  +5.0073e-01  +5.0911e+00  4.59e+00  4.01e-02  4.14e+00  1.37e-03  2.00e-01  2.85e-01  
  4  +4.9437e-01  +2.2843e+00  1.79e+00  8.09e-03  9.27e-01  3.26e-03  2.02e-02  9.80e-01  
  5  +4.1078e-01  +2.1206e+00  1.71e+00  7.26e-04  8.61e-02  3.87e-02  1.51e-03  9.47e-01  
  6  +3.3439e-01  +1.1910e+00  8.57e-01  4.85e-04  5.48e-02  2.47e-04  1.21e-03  3.69e-01  
  7  +2.4348e-01  +5.0503e-01  2.62e-01  1.56e-04  1.69e-02  1.59e-06  5.75e-04  6.13e-01  
  8  +2.0196e-01  +2.2607e-01  2.41e-02  1.49e-05  1.58e-03  7.90e-07  8.76e-05  9.12e-01  
  9  +1.9796e-01  +1.9834e-01  3.75e-04  2.31e-07  2.45e-05  1.06e-08  1.48e-06  9.84e-01  
 10  +1.9790e-01  +1.9790e-01  3.74e-06  2.31e-09  2.45e-07  1.06e-10  1.48e-08  9.90e-01  
 11  +1.9790e-01  +1.9790e-01  3.74e-08  2.31e-11  2.45e-09  1.06e-12  1.48e-10  9.90e-01  
 12  +1.9790e-01  +1.9790e-01  3.74e-10  2.31e-13  2.45e-11  1.06e-14  1.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.924ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:59 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:59 PM: Optimal value: 1.979e-01
(CVXPY) Sep 20 03:03:59 PM: Compilation took 5.100e-03 seconds
(CVXPY) Sep 20 03:03:59 PM: Solver (including time spent in interface) took 1.786e-02 seconds
Iteration: 2, Objective: 0.1979
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:59 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:59 PM: Finished problem compilation (took 1.111e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 14504
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +2.5021e+03  2.50e+03  9.76e-01  5.50e+01  1.00e+00  1.00e+00   ------   
  1  +6.2670e-01  +4.5107e+02  4.50e+02  2.86e-01  2.74e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5718e-01  +8.0605e+01  8.00e+01  1.28e-01  1.45e+01  6.06e-03  2.13e-01  6.41e-01  
  3  +5.0065e-01  +4.9904e+00  4.49e+00  3.93e-02  4.18e+00  9.51e-04  2.00e-01  3.27e-01  
  4  +4.9742e-01  +3.8932e+00  3.40e+00  2.11e-02  2.41e+00  1.70e-03  6.00e-02  7.71e-01  
  5  +4.2271e-01  +3.3320e+00  2.91e+00  1.45e-03  1.77e-01  2.40e-02  3.02e-03  9.55e-01  
  6  +4.1423e-01  +3.2420e+00  2.83e+00  1.31e-03  1.60e-01  2.29e-02  2.73e-03  1.48e-01  
  7  +3.9596e-01  +2.1875e+00  1.79e+00  1.14e-03  1.35e-01  2.46e-03  2.69e-03  2.44e-01  
  8  +3.5709e-01  +1.8053e+00  1.45e+00  8.72e-04  1.02e-01  1.10e-03  2.13e-03  6.39e-01  
  9  +3.5494e-01  +1.7761e+00  1.42e+00  8.55e-04  1.00e-01  1.00e-03  2.10e-03  7.66e-02  
 10  +2.6153e-01  +6.6033e-01  3.99e-01  2.25e-04  2.54e-02  8.45e-06  7.01e-04  7.40e-01  
 11  +2.0407e-01  +2.4974e-01  4.57e-02  2.82e-05  3.10e-03  3.60e-06  1.60e-04  9.25e-01  
 12  +1.9807e-01  +1.9909e-01  1.02e-03  6.31e-07  6.91e-05  3.84e-08  4.03e-06  9.76e-01  
 13  +1.9790e-01  +1.9791e-01  1.02e-05  6.30e-09  6.90e-07  3.84e-10  4.05e-08  9.90e-01  
 14  +1.9790e-01  +1.9790e-01  1.02e-07  6.30e-11  6.90e-09  3.84e-12  4.05e-10  9.90e-01  
 15  +1.9790e-01  +1.9790e-01  1.02e-09  6.30e-13  6.90e-11  3.84e-14  4.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.5413ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:59 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:59 PM: Optimal value: 1.979e-01
(CVXPY) Sep 20 03:03:59 PM: Compilation took 1.111e-02 seconds
(CVXPY) Sep 20 03:03:59 PM: Solver (including time spent in interface) took 1.784e-02 seconds
FULL MODEL:
  Accruacy: 0.8022
  Our objective: 0.6043999999999999

IF 
    (x0 = 0) <-- (term's our objective: 0.6044)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.1149530410766602
Best over terms:
  Our final objective: 0.6043999999999999
    Its accruacy: 0.8022
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6043999999999999
  Highest accruacy: 0.8022
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

