Command:
python test_script.py -s linear_dependence -d 9 -n 50 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:34 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:34 PM: Finished problem compilation (took 4.330e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9449e-01  +2.6299e+01  2.58e+01  8.37e-01  6.94e+00  1.00e+00  1.08e+00   ------   
  1  +5.6049e-01  +5.7783e+00  5.22e+00  3.64e-01  4.02e+00  3.73e-03  6.09e-01  6.01e-01  
  2  +4.7006e-01  +1.2276e+00  7.58e-01  8.12e-02  1.11e+00  2.14e-02  2.20e-01  9.90e-01  
  3  +4.0051e-01  +6.9120e-01  2.91e-01  1.91e-02  2.69e-01  1.06e-02  6.37e-02  7.87e-01  
  4  +3.7078e-01  +5.0125e-01  1.30e-01  6.85e-03  9.67e-02  3.86e-03  2.74e-02  7.33e-01  
  5  +3.4517e-01  +3.6068e-01  1.55e-02  7.34e-04  1.03e-02  2.65e-04  3.64e-03  9.05e-01  
  6  +3.4016e-01  +3.4037e-01  2.04e-04  9.33e-06  1.31e-04  3.19e-06  4.92e-05  9.87e-01  
  7  +3.4010e-01  +3.4010e-01  2.04e-06  9.32e-08  1.31e-06  3.19e-08  4.92e-07  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  2.04e-08  9.32e-10  1.31e-08  3.19e-10  4.92e-09  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  2.04e-10  9.32e-12  1.31e-10  3.19e-12  4.92e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 308.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:34 PM: Optimal value: 3.401e-01
(CVXPY) Sep 20 03:16:34 PM: Compilation took 4.330e-03 seconds
(CVXPY) Sep 20 03:16:34 PM: Solver (including time spent in interface) took 5.932e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:34 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:34 PM: Finished problem compilation (took 1.945e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 388
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8636e-01  +2.6879e+01  2.64e+01  8.48e-01  6.94e+00  1.00e+00  1.11e+00   ------   
  1  +5.1900e-01  +5.8266e+00  5.31e+00  3.74e-01  3.90e+00  3.75e-03  6.17e-01  6.06e-01  
  2  +3.8372e-01  +1.2956e+00  9.12e-01  7.03e-02  9.44e-01  2.51e-02  1.98e-01  9.90e-01  
  3  +3.2538e-01  +7.8436e-01  4.59e-01  2.90e-02  3.93e-01  1.29e-02  9.23e-02  5.99e-01  
  4  +2.8031e-01  +5.6381e-01  2.83e-01  1.33e-02  1.85e-01  8.06e-03  4.68e-02  6.79e-01  
  5  +2.3421e-01  +2.8943e-01  5.52e-02  2.34e-03  3.24e-02  1.27e-03  9.04e-03  8.47e-01  
  6  +2.2079e-01  +2.2261e-01  1.82e-03  7.81e-05  1.08e-03  2.48e-05  3.11e-04  9.82e-01  
  7  +2.2026e-01  +2.2041e-01  1.48e-04  6.53e-06  8.85e-05  1.07e-06  2.80e-05  9.11e-01  
  8  +2.2020e-01  +2.2021e-01  5.45e-06  2.44e-07  3.27e-06  3.99e-08  1.22e-06  9.67e-01  
  9  +2.2020e-01  +2.2020e-01  5.45e-08  2.44e-09  3.27e-08  3.99e-10  1.23e-08  9.90e-01  
 10  +2.2020e-01  +2.2020e-01  5.45e-10  2.44e-11  3.27e-10  3.98e-12  1.23e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 313.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:34 PM: Optimal value: 2.202e-01
(CVXPY) Sep 20 03:16:34 PM: Compilation took 1.945e-03 seconds
(CVXPY) Sep 20 03:16:34 PM: Solver (including time spent in interface) took 9.956e-04 seconds
Iteration: 2, Objective: 0.2202
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:34 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:34 PM: Finished problem compilation (took 1.464e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 435
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8210e-01  +2.7210e+01  2.67e+01  8.56e-01  6.76e+00  1.00e+00  1.12e+00   ------   
  1  +4.8641e-01  +5.9285e+00  5.44e+00  3.85e-01  3.75e+00  3.79e-03  6.25e-01  6.00e-01  
  2  +3.1066e-01  +1.8396e+00  1.53e+00  9.89e-02  1.24e+00  2.69e-02  2.55e-01  8.38e-01  
  3  +1.9517e-01  +6.2122e-01  4.26e-01  2.13e-02  2.82e-01  1.02e-02  6.65e-02  8.31e-01  
  4  +1.4588e-01  +3.1167e-01  1.66e-01  8.06e-03  1.08e-01  3.89e-03  2.67e-02  6.33e-01  
  5  +1.3092e-01  +2.5013e-01  1.19e-01  5.41e-03  7.50e-02  2.65e-03  1.83e-02  4.08e-01  
  6  +1.0546e-01  +1.2052e-01  1.51e-02  6.76e-04  9.37e-03  1.86e-04  2.42e-03  9.62e-01  
  7  +1.0064e-01  +1.0099e-01  3.48e-04  1.58e-05  2.18e-04  2.13e-06  5.79e-05  9.76e-01  
  8  +1.0051e-01  +1.0055e-01  3.24e-05  1.61e-06  2.10e-05  2.20e-07  6.83e-06  9.11e-01  
  9  +1.0050e-01  +1.0050e-01  3.59e-07  1.80e-08  2.33e-07  2.45e-09  7.75e-08  9.89e-01  
 10  +1.0050e-01  +1.0050e-01  3.60e-09  1.81e-10  2.34e-09  2.45e-11  7.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 351.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:34 PM: Optimal value: 1.005e-01
(CVXPY) Sep 20 03:16:34 PM: Compilation took 1.464e-03 seconds
(CVXPY) Sep 20 03:16:34 PM: Solver (including time spent in interface) took 2.104e-03 seconds
Iteration: 3, Objective: 0.1005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:35 PM: Your problem has 70 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:35 PM: Finished problem compilation (took 2.243e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 70
  constraints   = 95
  nnz(P)        = 0
  nnz(A)        = 457
  cones (total) = 1
    : Nonnegative = 1,  numel = 95

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7185e-01  +2.7467e+01  2.70e+01  8.61e-01  6.64e+00  1.00e+00  1.13e+00   ------   
  1  +3.9664e-01  +6.0509e+00  5.65e+00  3.73e-01  3.54e+00  4.06e-03  6.06e-01  5.98e-01  
  2  +1.5532e-01  +1.7235e+00  1.57e+00  9.19e-02  1.07e+00  2.41e-02  2.28e-01  8.20e-01  
  3  +1.1617e-01  +5.0241e-01  3.86e-01  2.24e-02  2.75e-01  9.47e-03  6.48e-02  7.37e-01  
  4  +8.2457e-02  +2.5965e-01  1.77e-01  9.62e-03  1.23e-01  4.23e-03  2.94e-02  6.36e-01  
  5  +6.6916e-02  +1.8389e-01  1.17e-01  5.58e-03  7.74e-02  2.88e-03  1.75e-02  5.05e-01  
  6  +4.9417e-02  +7.4275e-02  2.49e-02  1.21e-03  1.65e-02  2.19e-04  3.95e-03  9.90e-01  
  7  +4.0994e-02  +4.1805e-02  8.11e-04  3.87e-05  5.32e-04  5.12e-06  1.30e-04  9.68e-01  
  8  +4.0740e-02  +4.0835e-02  9.57e-05  5.07e-06  6.55e-05  4.26e-07  1.89e-05  8.71e-01  
  9  +4.0701e-02  +4.0703e-02  2.24e-06  1.22e-07  1.55e-06  1.55e-08  4.77e-07  9.86e-01  
 10  +4.0700e-02  +4.0700e-02  2.24e-08  1.22e-09  1.55e-08  1.54e-10  4.77e-09  9.90e-01  
 11  +4.0700e-02  +4.0700e-02  2.24e-10  1.22e-11  1.56e-10  1.54e-12  4.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 373.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:35 PM: Optimal value: 4.070e-02
(CVXPY) Sep 20 03:16:35 PM: Compilation took 2.243e-03 seconds
(CVXPY) Sep 20 03:16:35 PM: Solver (including time spent in interface) took 9.949e-04 seconds
Iteration: 4, Objective: 0.0407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:35 PM: Your problem has 80 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:35 PM: Finished problem compilation (took 3.058e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 80
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 486
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6050e-01  +2.7569e+01  2.71e+01  8.65e-01  6.43e+00  1.00e+00  1.12e+00   ------   
  1  +2.9715e-01  +6.4038e+00  6.11e+00  3.77e-01  3.37e+00  4.43e-03  5.89e-01  5.73e-01  
  2  +1.1848e-01  +1.5156e+00  1.40e+00  9.66e-02  1.06e+00  2.33e-02  2.18e-01  8.36e-01  
  3  +7.6162e-02  +3.9535e-01  3.19e-01  2.18e-02  2.52e-01  7.51e-03  5.81e-02  7.55e-01  
  4  +3.5609e-02  +1.7960e-01  1.44e-01  8.35e-03  1.05e-01  3.47e-03  2.46e-02  6.68e-01  
  5  +1.8818e-02  +9.3596e-02  7.48e-02  3.91e-03  5.16e-02  1.80e-03  1.20e-02  5.78e-01  
  6  +1.9335e-03  +5.5947e-03  3.66e-03  1.90e-04  2.49e-03  3.31e-05  6.08e-04  9.89e-01  
  7  +1.0219e-03  +1.5627e-03  5.41e-04  3.01e-05  3.77e-04  3.47e-06  1.01e-04  8.39e-01  
  8  +8.3553e-04  +9.3137e-04  9.58e-05  5.61e-06  6.82e-05  7.51e-07  2.17e-05  9.21e-01  
  9  +8.0071e-04  +8.0255e-04  1.85e-06  1.10e-07  1.32e-06  1.27e-08  4.35e-07  9.81e-01  
 10  +8.0001e-04  +8.0003e-04  1.85e-08  1.10e-09  1.32e-08  1.26e-10  4.35e-09  9.90e-01  
 11  +8.0000e-04  +8.0000e-04  1.85e-10  1.10e-11  1.33e-10  1.26e-12  4.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 405.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:35 PM: Optimal value: 8.000e-04
(CVXPY) Sep 20 03:16:35 PM: Compilation took 3.058e-03 seconds
(CVXPY) Sep 20 03:16:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:35 PM: Your problem has 81 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:35 PM: Finished problem compilation (took 3.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 492
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5963e-01  +2.7546e+01  2.71e+01  8.66e-01  6.42e+00  1.00e+00  1.12e+00   ------   
  1  +2.8573e-01  +6.3975e+00  6.11e+00  3.76e-01  3.35e+00  4.47e-03  5.86e-01  5.73e-01  
  2  +1.0018e-01  +1.5799e+00  1.48e+00  1.00e-01  1.09e+00  2.28e-02  2.24e-01  8.13e-01  
  3  +6.8760e-02  +4.1171e-01  3.43e-01  2.41e-02  2.75e-01  7.55e-03  6.34e-02  7.39e-01  
  4  +2.2503e-02  +1.2783e-01  1.05e-01  6.28e-03  7.63e-02  2.38e-03  1.91e-02  7.82e-01  
  5  +8.5655e-03  +4.7703e-02  3.91e-02  2.23e-03  2.75e-02  8.37e-04  7.01e-03  6.73e-01  
  6  +1.1304e-03  +2.3759e-03  1.25e-03  7.15e-05  8.73e-04  1.81e-05  2.31e-04  9.69e-01  
  7  +8.4947e-04  +9.7882e-04  1.29e-04  8.30e-06  9.49e-05  6.43e-07  3.04e-05  9.21e-01  
  8  +8.0159e-04  +8.0610e-04  4.52e-06  2.95e-07  3.35e-06  2.69e-08  1.16e-06  9.74e-01  
  9  +8.0002e-04  +8.0006e-04  4.52e-08  2.95e-09  3.35e-08  2.69e-10  1.16e-08  9.90e-01  
 10  +8.0000e-04  +8.0000e-04  4.52e-10  2.96e-11  3.35e-10  2.69e-12  1.16e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 367.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:35 PM: Optimal value: 8.000e-04
(CVXPY) Sep 20 03:16:35 PM: Compilation took 3.002e-03 seconds
(CVXPY) Sep 20 03:16:35 PM: Solver (including time spent in interface) took 9.971e-04 seconds
Iteration: 6, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:35 PM: Your problem has 85 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:35 PM: Finished problem compilation (took 4.928e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 110
  nnz(P)        = 0
  nnz(A)        = 504
  cones (total) = 1
    : Nonnegative = 1,  numel = 110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5613e-01  +2.7605e+01  2.71e+01  8.68e-01  6.34e+00  1.00e+00  1.12e+00   ------   
  1  +2.4424e-01  +6.5425e+00  6.30e+00  3.77e-01  3.28e+00  4.62e-03  5.84e-01  5.64e-01  
  2  +8.9913e-02  +1.2946e+00  1.20e+00  8.72e-02  9.35e-01  2.33e-02  1.99e-01  8.77e-01  
  3  +5.7773e-02  +3.7023e-01  3.12e-01  2.32e-02  2.56e-01  7.54e-03  6.04e-02  7.17e-01  
  4  +1.7850e-02  +1.0748e-01  8.96e-02  5.64e-03  6.65e-02  2.22e-03  1.70e-02  7.91e-01  
  5  +4.0251e-03  +2.1884e-02  1.79e-02  1.08e-03  1.29e-02  3.56e-04  3.39e-03  8.44e-01  
  6  +1.0421e-03  +2.0091e-03  9.67e-04  6.02e-05  7.05e-04  1.34e-05  1.93e-04  9.43e-01  
  7  +8.5507e-04  +1.0527e-03  1.98e-04  1.35e-05  1.49e-04  1.76e-06  4.91e-05  8.75e-01  
  8  +8.0196e-04  +8.0852e-04  6.55e-06  4.54e-07  4.98e-06  4.77e-08  1.74e-06  9.66e-01  
  9  +8.0002e-04  +8.0009e-04  6.56e-08  4.55e-09  4.99e-08  4.78e-10  1.75e-08  9.90e-01  
 10  +8.0000e-04  +8.0000e-04  6.57e-10  4.55e-11  5.00e-10  4.78e-12  1.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 348.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:35 PM: Optimal value: 8.000e-04
(CVXPY) Sep 20 03:16:35 PM: Compilation took 4.928e-03 seconds
(CVXPY) Sep 20 03:16:35 PM: Solver (including time spent in interface) took 1.011e-03 seconds
FULL MODEL:
  Accruacy: 0.98
  Our objective: 0.96

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x7 = 0)            <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x6 = 0 AND x8 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x3 = 1 AND x7 = 1)                       <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.12)
 OR (x2 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.36)
 OR (x2 = 1 AND x3 = 0 AND x4 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.08)
 OR (x4 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3172948360443115
Best over terms:
  Our final objective: 0.36000000000000004
    Its accruacy: 0.68
    Its hamming distance: 3
  Shortest hamming distance: 1
    Its our objective: 0.12
  Highest accruacy: 0.68
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

