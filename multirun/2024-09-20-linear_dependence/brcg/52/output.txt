Command:
python test_script.py -s linear_dependence -d 2 -n 100 --seed 73 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.7
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 2.

Computed total variation: 0.7
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:37 PM: Your problem has 55 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:37 PM: Finished problem compilation (took 3.889e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 255
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8020e-01  +5.2452e+01  5.20e+01  8.51e-01  6.81e+00  1.00e+00  1.09e+00   ------   
  1  +5.9897e-01  +9.0188e+00  8.42e+00  2.23e-01  2.98e+00  4.43e-03  4.05e-01  7.46e-01  
  2  +4.3744e-01  +2.0863e+00  1.65e+00  4.75e-02  7.31e-01  7.42e-03  1.09e-01  8.04e-01  
  3  +2.7644e-01  +9.9623e-01  7.20e-01  1.67e-02  2.48e-01  2.63e-03  4.56e-02  6.28e-01  
  4  +1.6545e-01  +2.6381e-01  9.84e-02  2.88e-03  3.87e-02  3.00e-04  1.53e-02  8.43e-01  
  5  +1.5128e-01  +1.5754e-01  6.26e-03  1.84e-04  2.45e-03  3.42e-06  1.21e-03  9.25e-01  
  6  +1.5011e-01  +1.5018e-01  6.35e-05  1.87e-06  2.49e-05  4.57e-08  1.31e-05  9.89e-01  
  7  +1.5010e-01  +1.5010e-01  6.34e-07  1.87e-08  2.49e-07  4.57e-10  1.31e-07  9.90e-01  
  8  +1.5010e-01  +1.5010e-01  6.34e-09  1.87e-10  2.49e-09  4.57e-12  1.31e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 222.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:37 PM: Optimal value: 1.501e-01
(CVXPY) Sep 20 03:03:37 PM: Compilation took 3.889e-03 seconds
(CVXPY) Sep 20 03:03:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:37 PM: Your problem has 56 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:37 PM: Finished problem compilation (took 1.348e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 278
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7556e-01  +5.2837e+01  5.24e+01  8.54e-01  7.09e+00  1.00e+00  1.11e+00   ------   
  1  +5.8476e-01  +9.1655e+00  8.58e+00  2.30e-01  3.14e+00  4.37e-03  4.26e-01  7.41e-01  
  2  +4.1336e-01  +2.0960e+00  1.68e+00  4.71e-02  7.42e-01  7.55e-03  1.11e-01  8.09e-01  
  3  +2.9973e-01  +1.3257e+00  1.03e+00  2.41e-02  3.71e-01  4.50e-03  6.57e-02  4.78e-01  
  4  +2.1125e-01  +6.3828e-01  4.27e-01  1.19e-02  1.70e-01  1.74e-03  4.37e-02  5.62e-01  
  5  +1.5661e-01  +1.9246e-01  3.58e-02  1.06e-03  1.46e-02  1.07e-05  6.03e-03  9.59e-01  
  6  +1.5026e-01  +1.5122e-01  9.59e-04  2.87e-05  3.91e-04  1.11e-06  2.04e-04  9.76e-01  
  7  +1.5010e-01  +1.5011e-01  9.56e-06  2.86e-07  3.90e-06  1.11e-08  2.05e-06  9.90e-01  
  8  +1.5010e-01  +1.5010e-01  9.56e-08  2.86e-09  3.90e-08  1.11e-10  2.05e-08  9.90e-01  
  9  +1.5010e-01  +1.5010e-01  9.56e-10  2.86e-11  3.90e-10  1.11e-12  2.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 224.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:37 PM: Optimal value: 1.501e-01
(CVXPY) Sep 20 03:03:37 PM: Compilation took 1.348e-03 seconds
(CVXPY) Sep 20 03:03:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:37 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:37 PM: Finished problem compilation (took 4.211e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 299
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7584e-01  +5.2846e+01  5.24e+01  8.54e-01  7.30e+00  1.00e+00  1.11e+00   ------   
  1  +5.7837e-01  +9.2526e+00  8.67e+00  2.39e-01  3.33e+00  4.27e-03  4.36e-01  7.35e-01  
  2  +4.1434e-01  +2.0900e+00  1.68e+00  4.60e-02  7.56e-01  7.69e-03  1.07e-01  8.22e-01  
  3  +2.9544e-01  +1.2011e+00  9.06e-01  2.18e-02  3.47e-01  3.66e-03  5.88e-02  5.10e-01  
  4  +1.7713e-01  +3.3093e-01  1.54e-01  4.49e-03  6.50e-02  4.85e-05  1.99e-02  7.96e-01  
  5  +1.5226e-01  +1.6448e-01  1.22e-02  3.68e-04  5.21e-03  1.31e-05  2.33e-03  9.13e-01  
  6  +1.5019e-01  +1.5070e-01  5.13e-04  1.54e-05  2.18e-04  5.86e-07  1.08e-04  9.56e-01  
  7  +1.5010e-01  +1.5011e-01  5.83e-06  1.74e-07  2.46e-06  6.93e-09  1.24e-06  9.90e-01  
  8  +1.5010e-01  +1.5010e-01  5.83e-08  1.74e-09  2.46e-08  6.93e-11  1.24e-08  9.90e-01  
  9  +1.5010e-01  +1.5010e-01  5.83e-10  1.74e-11  2.46e-10  6.94e-13  1.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:37 PM: Optimal value: 1.501e-01
(CVXPY) Sep 20 03:03:37 PM: Compilation took 4.211e-03 seconds
(CVXPY) Sep 20 03:03:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.85
  Our objective: 0.7

IF 
    (x0 = 0) <-- (term's our objective: 0.7)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8198432922363281
Best over terms:
  Our final objective: 0.7
    Its accruacy: 0.85
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.7
  Highest accruacy: 0.85
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

