Command:
python test_script.py -s linear_dependence -d 4 -n 100 --seed 56 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.3
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.42
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:50 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:50 PM: Finished problem compilation (took 3.022e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9570e-01  +5.1167e+01  5.07e+01  8.58e-01  7.91e+00  1.00e+00  1.04e+00   ------   
  1  +6.0057e-01  +1.0132e+01  9.53e+00  2.94e-01  4.16e+00  4.07e-03  4.92e-01  6.71e-01  
  2  +5.2564e-01  +1.4354e+00  9.10e-01  5.54e-02  9.30e-01  9.90e-03  1.40e-01  9.57e-01  
  3  +5.2162e-01  +1.4296e+00  9.08e-01  4.25e-02  7.25e-01  1.21e-02  1.07e-01  2.68e-01  
  4  +4.9828e-01  +1.3294e+00  8.31e-01  2.74e-02  4.71e-01  1.08e-02  7.41e-02  5.50e-01  
  5  +4.6215e-01  +9.1692e-01  4.55e-01  1.12e-02  1.95e-01  6.71e-03  3.34e-02  5.60e-01  
  6  +4.1762e-01  +4.7117e-01  5.36e-02  1.56e-03  2.61e-02  3.39e-04  5.99e-03  9.82e-01  
  7  +4.0904e-01  +4.4329e-01  3.42e-02  7.82e-04  1.31e-02  2.03e-04  3.46e-03  6.20e-01  
  8  +4.0113e-01  +4.0440e-01  3.27e-03  6.89e-05  1.16e-03  1.41e-05  3.37e-04  9.90e-01  
  9  +4.0011e-01  +4.0015e-01  3.53e-05  7.35e-07  1.23e-05  1.50e-07  3.64e-06  9.89e-01  
 10  +4.0010e-01  +4.0010e-01  3.53e-07  7.35e-09  1.23e-07  1.50e-09  3.64e-08  9.90e-01  
 11  +4.0010e-01  +4.0010e-01  3.53e-09  7.35e-11  1.23e-09  1.50e-11  3.64e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 310.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:50 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 03:05:50 PM: Compilation took 3.022e-03 seconds
(CVXPY) Sep 20 03:05:50 PM: Solver (including time spent in interface) took 1.610e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:50 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:50 PM: Finished problem compilation (took 2.478e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 491
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8936e-01  +5.1668e+01  5.12e+01  8.67e-01  8.47e+00  1.00e+00  1.08e+00   ------   
  1  +5.7058e-01  +1.0510e+01  9.94e+00  3.22e-01  4.51e+00  3.99e-03  5.35e-01  6.50e-01  
  2  +5.0344e-01  +2.3191e+00  1.82e+00  9.64e-02  1.64e+00  1.19e-02  2.33e-01  7.70e-01  
  3  +4.4459e-01  +1.2125e+00  7.68e-01  2.86e-02  5.06e-01  7.52e-03  8.41e-02  7.14e-01  
  4  +4.0549e-01  +8.0842e-01  4.03e-01  1.15e-02  2.03e-01  4.65e-03  3.69e-02  6.57e-01  
  5  +3.7070e-01  +6.6711e-01  2.96e-01  5.95e-03  1.06e-01  4.08e-03  2.02e-02  5.09e-01  
  6  +3.1941e-01  +3.7431e-01  5.49e-02  1.15e-03  2.00e-02  7.31e-05  4.87e-03  9.39e-01  
  7  +3.0174e-01  +3.0593e-01  4.20e-03  8.58e-05  1.48e-03  5.40e-06  4.06e-04  9.24e-01  
  8  +3.0022e-01  +3.0026e-01  4.36e-05  8.90e-07  1.54e-05  5.51e-08  4.28e-06  9.89e-01  
  9  +3.0020e-01  +3.0020e-01  4.36e-07  8.90e-09  1.53e-07  5.51e-10  4.28e-08  9.90e-01  
 10  +3.0020e-01  +3.0020e-01  4.36e-09  8.90e-11  1.53e-09  5.51e-12  4.28e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 304.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:50 PM: Optimal value: 3.002e-01
(CVXPY) Sep 20 03:05:50 PM: Compilation took 2.478e-03 seconds
(CVXPY) Sep 20 03:05:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:50 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:50 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 519
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8913e-01  +5.1651e+01  5.12e+01  8.69e-01  8.44e+00  1.00e+00  1.08e+00   ------   
  1  +5.6602e-01  +1.0633e+01  1.01e+01  3.30e-01  4.53e+00  3.97e-03  5.43e-01  6.42e-01  
  2  +5.0001e-01  +2.1650e+00  1.66e+00  9.09e-02  1.55e+00  1.27e-02  2.23e-01  8.16e-01  
  3  +4.4117e-01  +1.2012e+00  7.60e-01  2.83e-02  4.98e-01  8.27e-03  8.28e-02  6.93e-01  
  4  +3.9431e-01  +7.7614e-01  3.82e-01  9.77e-03  1.73e-01  5.60e-03  3.11e-02  6.80e-01  
  5  +3.4456e-01  +5.5213e-01  2.08e-01  4.31e-03  7.56e-02  2.30e-03  1.53e-02  6.35e-01  
  6  +3.0069e-01  +3.3377e-01  3.31e-02  7.03e-04  1.21e-02  1.70e-04  3.00e-03  8.56e-01  
  7  +2.9105e-01  +2.9326e-01  2.21e-03  4.71e-05  8.08e-04  1.00e-05  2.15e-04  9.30e-01  
  8  +2.9036e-01  +2.9052e-01  1.54e-04  3.26e-06  5.59e-05  5.98e-07  1.56e-05  9.70e-01  
  9  +2.9030e-01  +2.9030e-01  2.46e-06  5.19e-08  8.89e-07  7.57e-09  2.57e-07  9.84e-01  
 10  +2.9030e-01  +2.9030e-01  2.46e-08  5.19e-10  8.88e-09  7.57e-11  2.57e-09  9.90e-01  
 11  +2.9030e-01  +2.9030e-01  2.46e-10  5.19e-12  8.88e-11  7.57e-13  2.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 514.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:50 PM: Optimal value: 2.903e-01
(CVXPY) Sep 20 03:05:50 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 03:05:50 PM: Solver (including time spent in interface) took 5.031e-04 seconds
Iteration: 3, Objective: 0.2903
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:50 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:50 PM: Finished problem compilation (took 6.208e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 535
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8890e-01  +5.1634e+01  5.11e+01  8.70e-01  8.43e+00  1.00e+00  1.07e+00   ------   
  1  +5.6251e-01  +1.0715e+01  1.02e+01  3.34e-01  4.55e+00  3.97e-03  5.47e-01  6.37e-01  
  2  +4.9604e-01  +2.1634e+00  1.67e+00  9.12e-02  1.55e+00  1.31e-02  2.26e-01  8.21e-01  
  3  +4.3740e-01  +1.1292e+00  6.92e-01  2.63e-02  4.63e-01  7.72e-03  7.82e-02  7.16e-01  
  4  +3.9541e-01  +8.0728e-01  4.12e-01  1.07e-02  1.89e-01  6.08e-03  3.39e-02  6.20e-01  
  5  +3.4539e-01  +5.7140e-01  2.26e-01  4.63e-03  8.13e-02  3.01e-03  1.62e-02  5.98e-01  
  6  +3.0384e-01  +3.5159e-01  4.77e-02  1.02e-03  1.75e-02  4.23e-04  4.23e-03  8.07e-01  
  7  +2.9139e-01  +2.9479e-01  3.40e-03  7.33e-05  1.25e-03  2.59e-05  3.29e-04  9.26e-01  
  8  +2.9053e-01  +2.9113e-01  6.00e-04  1.28e-05  2.19e-04  2.58e-06  6.08e-05  9.90e-01  
  9  +2.9031e-01  +2.9033e-01  1.89e-05  4.03e-07  6.89e-06  5.82e-08  1.99e-06  9.70e-01  
 10  +2.9030e-01  +2.9030e-01  1.91e-07  4.06e-09  6.95e-08  5.83e-10  2.03e-08  9.90e-01  
 11  +2.9030e-01  +2.9030e-01  1.91e-09  4.06e-11  6.94e-10  5.83e-12  2.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 373.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:50 PM: Optimal value: 2.903e-01
(CVXPY) Sep 20 03:05:50 PM: Compilation took 6.208e-03 seconds
(CVXPY) Sep 20 03:05:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.71
  Our objective: 0.42000000000000004

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.3)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.1)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.4657814502716064
Best over terms:
  Our final objective: 0.30000000000000004
    Its accruacy: 0.65
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30000000000000004
  Highest accruacy: 0.65
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

