Command:
python test_script.py -s linear_dependence -d 2 -n 100 --seed 34 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.42
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 2.

Computed total variation: 0.42000000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:38 PM: Your problem has 55 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:38 PM: Finished problem compilation (took 9.773e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 255
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9087e-01  +5.1323e+01  5.08e+01  8.49e-01  6.61e+00  1.00e+00  1.05e+00   ------   
  1  +6.2288e-01  +9.1773e+00  8.55e+00  2.31e-01  2.96e+00  4.46e-03  4.05e-01  7.31e-01  
  2  +5.1703e-01  +1.4204e+00  9.03e-01  4.35e-02  6.30e-01  7.03e-03  1.07e-01  8.92e-01  
  3  +4.5997e-01  +1.3286e+00  8.69e-01  1.68e-02  2.51e-01  1.39e-02  4.24e-02  6.55e-01  
  4  +3.7010e-01  +7.0008e-01  3.30e-01  8.27e-03  1.16e-01  7.74e-05  2.94e-02  5.11e-01  
  5  +3.1141e-01  +3.9634e-01  8.49e-02  2.02e-03  2.78e-02  8.33e-05  9.58e-03  7.33e-01  
  6  +2.9129e-01  +2.9613e-01  4.84e-03  1.15e-04  1.58e-03  1.75e-05  6.47e-04  9.90e-01  
  7  +2.9011e-01  +2.9016e-01  4.84e-05  1.15e-06  1.58e-05  1.75e-07  6.55e-06  9.90e-01  
  8  +2.9010e-01  +2.9010e-01  4.84e-07  1.15e-08  1.58e-07  1.75e-09  6.55e-08  9.90e-01  
  9  +2.9010e-01  +2.9010e-01  4.84e-09  1.15e-10  1.58e-09  1.75e-11  6.55e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 329.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:38 PM: Optimal value: 2.901e-01
(CVXPY) Sep 20 03:03:38 PM: Compilation took 9.773e-03 seconds
(CVXPY) Sep 20 03:03:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:38 PM: Your problem has 56 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:38 PM: Finished problem compilation (took 2.527e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 273
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8724e-01  +5.1823e+01  5.13e+01  8.51e-01  6.78e+00  1.00e+00  1.07e+00   ------   
  1  +6.1076e-01  +9.2957e+00  8.68e+00  2.36e-01  3.06e+00  4.42e-03  4.20e-01  7.28e-01  
  2  +5.1437e-01  +2.0296e+00  1.52e+00  6.46e-02  9.48e-01  7.21e-03  1.52e-01  7.60e-01  
  3  +4.3112e-01  +1.6524e+00  1.22e+00  2.82e-02  4.22e-01  8.65e-03  7.39e-02  6.18e-01  
  4  +3.5048e-01  +6.2892e-01  2.78e-01  8.38e-03  1.18e-01  1.62e-03  3.26e-02  7.37e-01  
  5  +3.3869e-01  +5.9732e-01  2.59e-01  5.97e-03  8.51e-02  1.83e-03  2.37e-02  3.55e-01  
  6  +3.1782e-01  +4.5868e-01  1.41e-01  3.46e-03  4.88e-02  8.71e-04  1.59e-02  6.16e-01  
  7  +2.9224e-01  +3.0206e-01  9.83e-03  2.36e-04  3.31e-03  7.24e-06  1.34e-03  9.53e-01  
  8  +2.9012e-01  +2.9022e-01  1.01e-04  2.43e-06  3.41e-05  7.56e-08  1.41e-05  9.89e-01  
  9  +2.9010e-01  +2.9010e-01  1.01e-06  2.43e-08  3.40e-07  7.56e-10  1.41e-07  9.90e-01  
 10  +2.9010e-01  +2.9010e-01  1.01e-08  2.43e-10  3.40e-09  7.56e-12  1.41e-09  9.90e-01  
 11  +2.9010e-01  +2.9010e-01  1.01e-10  2.43e-12  3.40e-11  7.56e-14  1.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 237.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:38 PM: Optimal value: 2.901e-01
(CVXPY) Sep 20 03:03:38 PM: Compilation took 2.527e-04 seconds
(CVXPY) Sep 20 03:03:38 PM: Solver (including time spent in interface) took 2.978e-03 seconds
Iteration: 2, Objective: 0.2901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:38 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:38 PM: Finished problem compilation (took 2.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 293
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8913e-01  +5.1627e+01  5.11e+01  8.51e-01  6.97e+00  1.00e+00  1.06e+00   ------   
  1  +6.0739e-01  +9.4228e+00  8.82e+00  2.48e-01  3.27e+00  4.31e-03  4.34e-01  7.18e-01  
  2  +5.1318e-01  +1.7351e+00  1.22e+00  5.49e-02  8.35e-01  7.61e-03  1.31e-01  8.38e-01  
  3  +4.4011e-01  +1.3337e+00  8.94e-01  2.35e-02  3.64e-01  7.73e-03  6.20e-02  6.08e-01  
  4  +3.5678e-01  +6.2319e-01  2.66e-01  8.09e-03  1.18e-01  4.72e-05  3.06e-02  6.77e-01  
  5  +3.4904e-01  +6.1110e-01  2.62e-01  6.31e-03  9.30e-02  1.67e-04  2.39e-02  3.07e-01  
  6  +3.0959e-01  +4.0197e-01  9.24e-02  2.37e-03  3.42e-02  4.36e-04  1.15e-02  9.90e-01  
  7  +2.9162e-01  +2.9916e-01  7.53e-03  1.83e-04  2.63e-03  1.89e-05  1.02e-03  9.20e-01  
  8  +2.9020e-01  +2.9065e-01  4.48e-04  1.08e-05  1.56e-04  1.08e-06  6.18e-05  9.40e-01  
  9  +2.9010e-01  +2.9011e-01  5.24e-06  1.26e-07  1.82e-06  1.28e-08  7.29e-07  9.90e-01  
 10  +2.9010e-01  +2.9010e-01  5.24e-08  1.26e-09  1.82e-08  1.28e-10  7.29e-09  9.90e-01  
 11  +2.9010e-01  +2.9010e-01  5.24e-10  1.26e-11  1.82e-10  1.28e-12  7.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 266.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:38 PM: Optimal value: 2.901e-01
(CVXPY) Sep 20 03:03:38 PM: Compilation took 2.005e-03 seconds
(CVXPY) Sep 20 03:03:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.71
  Our objective: 0.42

IF 
    (x0 = 0) <-- (term's our objective: 0.42)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8222901821136475
Best over terms:
  Our final objective: 0.42
    Its accruacy: 0.71
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.42
  Highest accruacy: 0.71
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

