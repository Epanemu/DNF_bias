Command:
python test_script.py -s linear_dependence -d 3 -n 1000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.354
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 3.

Computed total variation: 0.354
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:53 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:53 PM: Finished problem compilation (took 1.032e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 3007
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0105e+02  5.01e+02  9.50e-01  2.45e+01  1.00e+00  1.00e+00   ------   
  1  +6.1929e-01  +9.3119e+01  9.25e+01  2.96e-01  1.26e+01  4.25e-03  4.37e-01  6.94e-01  
  2  +5.5324e-01  +1.5764e+01  1.52e+01  1.18e-01  5.97e+00  6.83e-03  2.13e-01  6.87e-01  
  3  +5.0123e-01  +1.9447e+00  1.44e+00  2.96e-02  1.42e+00  1.58e-03  1.97e-01  3.41e-01  
  4  +4.9841e-01  +8.8791e-01  3.89e-01  7.30e-03  3.64e-01  1.07e-03  3.61e-02  8.81e-01  
  5  +4.5906e-01  +8.6785e-01  4.09e-01  1.02e-03  5.25e-02  1.33e-02  2.78e-03  9.44e-01  
  6  +4.3206e-01  +6.8712e-01  2.55e-01  6.60e-04  3.34e-02  4.27e-03  2.10e-03  3.65e-01  
  7  +3.8871e-01  +4.6338e-01  7.47e-02  1.75e-04  8.73e-03  3.68e-05  7.26e-04  7.90e-01  
  8  +3.6997e-01  +3.7980e-01  9.82e-03  2.21e-05  1.10e-03  3.74e-06  1.04e-04  8.67e-01  
  9  +3.6730e-01  +3.6797e-01  6.70e-04  1.50e-06  7.48e-05  2.59e-07  7.19e-06  9.90e-01  
 10  +3.6710e-01  +3.6711e-01  6.69e-06  1.50e-08  7.48e-07  2.59e-09  7.20e-08  9.90e-01  
 11  +3.6710e-01  +3.6710e-01  6.69e-08  1.50e-10  7.47e-09  2.59e-11  7.20e-10  9.90e-01  
 12  +3.6710e-01  +3.6710e-01  6.69e-10  1.50e-12  7.47e-11  2.59e-13  7.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0662ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:53 PM: Optimal value: 3.671e-01
(CVXPY) Sep 20 03:04:53 PM: Compilation took 1.032e-02 seconds
(CVXPY) Sep 20 03:04:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3671
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:53 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:53 PM: Finished problem compilation (took 3.452e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 3607
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +5.0137e+02  5.01e+02  9.50e-01  2.62e+01  1.00e+00  1.01e+00   ------   
  1  +6.1672e-01  +9.3713e+01  9.31e+01  2.99e-01  1.36e+01  4.24e-03  4.43e-01  6.91e-01  
  2  +5.5161e-01  +1.5437e+01  1.49e+01  1.16e-01  6.25e+00  7.12e-03  2.09e-01  7.06e-01  
  3  +5.0060e-01  +1.8888e+00  1.39e+00  2.85e-02  1.47e+00  1.71e-03  1.89e-01  4.17e-01  
  4  +4.9840e-01  +1.1517e+00  6.53e-01  1.24e-02  6.56e-01  1.43e-03  5.94e-02  7.19e-01  
  5  +4.5776e-01  +1.0758e+00  6.18e-01  1.72e-03  9.53e-02  1.39e-02  4.54e-03  9.45e-01  
  6  +4.4772e-01  +1.0891e+00  6.41e-01  1.27e-03  7.05e-02  1.75e-02  3.27e-03  3.74e-01  
  7  +4.3817e-01  +9.5512e-01  5.17e-01  1.04e-03  5.74e-02  9.87e-03  2.74e-03  3.10e-01  
  8  +4.1562e-01  +7.4363e-01  3.28e-01  6.72e-04  3.67e-02  9.29e-05  1.89e-03  7.68e-01  
  9  +3.6299e-01  +4.8793e-01  1.25e-01  2.29e-04  1.23e-02  3.16e-05  7.27e-04  6.56e-01  
 10  +3.2639e-01  +3.3381e-01  7.42e-03  1.37e-05  7.31e-04  1.43e-06  5.17e-05  9.57e-01  
 11  +3.2316e-01  +3.2330e-01  1.42e-04  2.62e-07  1.39e-05  5.47e-08  1.02e-06  9.90e-01  
 12  +3.2310e-01  +3.2310e-01  1.42e-06  2.62e-09  1.39e-07  5.46e-10  1.02e-08  9.90e-01  
 13  +3.2310e-01  +3.2310e-01  1.42e-08  2.62e-11  1.39e-09  5.46e-12  1.02e-10  9.90e-01  
 14  +3.2310e-01  +3.2310e-01  1.42e-10  2.62e-13  1.39e-11  5.46e-14  1.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6854ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:53 PM: Optimal value: 3.231e-01
(CVXPY) Sep 20 03:04:53 PM: Compilation took 3.452e-03 seconds
(CVXPY) Sep 20 03:04:53 PM: Solver (including time spent in interface) took 4.320e-03 seconds
FULL MODEL:
  Accruacy: 0.677
  Our objective: 0.3539999999999999

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.354)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.944706916809082
Best over terms:
  Our final objective: 0.3539999999999999
    Its accruacy: 0.677
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.3539999999999999
  Highest accruacy: 0.677
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

