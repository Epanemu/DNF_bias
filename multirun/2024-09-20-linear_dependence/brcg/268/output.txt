Command:
python test_script.py -s linear_dependence -d 7 -n 5000 --seed 34 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16519999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 7.

Computed total variation: 0.21519999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:01 PM: Your problem has 2515 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:01 PM: Finished problem compilation (took 1.291e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2515
  constraints   = 5015
  nnz(P)        = 0
  nnz(A)        = 25015
  cones (total) = 1
    : Nonnegative = 1,  numel = 5015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.79e-01  7.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.8810e-01  +5.2570e+02  5.25e+02  4.01e-01  4.62e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3797e-01  +6.5498e+01  6.50e+01  1.52e-01  2.23e+01  1.31e-02  2.54e-01  8.67e-01  
  3  +5.0939e-01  +1.6509e+01  1.60e+01  1.04e-01  1.49e+01  3.36e-05  2.44e-01  1.79e-01  
  4  +5.0033e-01  +1.0718e+00  5.71e-01  5.52e-03  8.16e-01  7.10e-06  1.08e-01  9.90e-01  
  5  +5.0002e-01  +6.8576e-01  1.86e-01  1.76e-03  2.61e-01  6.92e-06  2.38e-02  8.60e-01  
  6  +4.9662e-01  +7.8630e-01  2.90e-01  4.03e-04  6.08e-02  1.91e-04  1.19e-03  9.63e-01  
  7  +4.8720e-01  +6.9973e-01  2.13e-01  1.25e-04  1.88e-02  3.57e-04  3.67e-04  7.16e-01  
  8  +4.7408e-01  +5.9914e-01  1.25e-01  7.04e-05  1.06e-02  1.16e-04  2.23e-04  5.34e-01  
  9  +4.5862e-01  +5.0054e-01  4.19e-02  2.18e-05  3.27e-03  1.15e-06  7.54e-05  8.95e-01  
 10  +4.4906e-01  +4.5352e-01  4.46e-03  2.16e-06  3.23e-04  1.25e-07  8.12e-06  9.03e-01  
 11  +4.4760e-01  +4.4794e-01  3.41e-04  1.44e-07  2.16e-05  1.90e-08  6.23e-07  9.59e-01  
 12  +4.4750e-01  +4.4750e-01  3.45e-06  1.45e-09  2.17e-07  1.92e-10  6.30e-09  9.90e-01  
 13  +4.4750e-01  +4.4750e-01  3.45e-08  1.45e-11  2.17e-09  1.92e-12  6.30e-11  9.90e-01  
 14  +4.4750e-01  +4.4750e-01  3.45e-10  1.45e-13  2.17e-11  1.96e-14  6.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.0329ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:01 PM: Optimal value: 4.475e-01
(CVXPY) Sep 20 03:12:01 PM: Compilation took 1.291e-02 seconds
(CVXPY) Sep 20 03:12:01 PM: Solver (including time spent in interface) took 2.447e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4475
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:01 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:01 PM: Finished problem compilation (took 9.280e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 29715
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.79e-01  7.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.8794e-01  +5.2600e+02  5.25e+02  4.01e-01  4.83e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3763e-01  +6.5185e+01  6.46e+01  1.52e-01  2.32e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0922e-01  +1.6336e+01  1.58e+01  1.04e-01  1.55e+01  3.37e-05  2.44e-01  1.87e-01  
  4  +5.0045e-01  +1.3102e+00  8.10e-01  7.84e-03  1.21e+00  7.88e-06  1.25e-01  8.47e-01  
  5  +5.0013e-01  +8.2428e-01  3.24e-01  3.10e-03  4.81e-01  5.20e-06  5.20e-02  6.06e-01  
  6  +5.0004e-01  +8.2609e-01  3.26e-01  3.02e-03  4.70e-01  8.48e-06  2.63e-02  5.46e-01  
  7  +4.9802e-01  +7.8135e-01  2.83e-01  6.49e-04  1.03e-01  8.24e-05  1.89e-03  9.34e-01  
  8  +4.9237e-01  +7.3910e-01  2.47e-01  2.03e-04  3.20e-02  2.15e-04  5.65e-04  7.16e-01  
  9  +4.9296e-01  +7.3578e-01  2.43e-01  1.97e-04  3.12e-02  1.69e-04  5.45e-04  2.25e-01  
 10  +4.8458e-01  +6.8248e-01  1.98e-01  1.06e-04  1.68e-02  1.91e-04  2.95e-04  5.05e-01  
 11  +4.8027e-01  +6.6112e-01  1.81e-01  8.42e-05  1.33e-02  1.52e-04  2.33e-04  3.73e-01  
 12  +4.7645e-01  +6.4454e-01  1.68e-01  7.12e-05  1.12e-02  1.29e-04  1.98e-04  2.61e-01  
 13  +4.7572e-01  +6.4076e-01  1.65e-01  6.98e-05  1.10e-02  1.21e-04  1.95e-04  5.63e-02  
 14  +4.7337e-01  +6.2853e-01  1.55e-01  6.57e-05  1.03e-02  8.92e-05  1.84e-04  2.28e-01  
 15  +4.6859e-01  +6.0724e-01  1.39e-01  5.56e-05  8.75e-03  4.96e-05  1.57e-04  4.74e-01  
 16  +4.6262e-01  +5.8406e-01  1.21e-01  4.60e-05  7.23e-03  4.23e-05  1.32e-04  1.94e-01  
 17  +4.4988e-01  +5.3073e-01  8.09e-02  2.84e-05  4.46e-03  5.58e-06  8.39e-05  9.90e-01  
 18  +4.2383e-01  +4.3872e-01  1.49e-02  4.73e-06  7.40e-04  1.43e-06  1.49e-05  9.35e-01  
 19  +4.1764e-01  +4.1795e-01  3.09e-04  9.74e-08  1.52e-05  2.67e-08  3.14e-07  9.81e-01  
 20  +4.1750e-01  +4.1750e-01  3.09e-06  9.74e-10  1.52e-07  2.67e-10  3.14e-09  9.90e-01  
 21  +4.1750e-01  +4.1750e-01  3.09e-08  9.74e-12  1.52e-09  2.67e-12  3.14e-11  9.90e-01  
 22  +4.1750e-01  +4.1750e-01  3.09e-10  9.73e-14  1.52e-11  2.68e-14  3.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.1201ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:01 PM: Optimal value: 4.175e-01
(CVXPY) Sep 20 03:12:01 PM: Compilation took 9.280e-03 seconds
(CVXPY) Sep 20 03:12:01 PM: Solver (including time spent in interface) took 4.220e-02 seconds
Iteration: 2, Objective: 0.4175
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:01 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:01 PM: Finished problem compilation (took 1.393e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 30765
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.79e-01  7.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.8781e-01  +5.2605e+02  5.25e+02  4.02e-01  4.83e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3750e-01  +6.5040e+01  6.45e+01  1.52e-01  2.31e+01  1.32e-02  2.54e-01  8.72e-01  
  3  +5.0918e-01  +1.6289e+01  1.58e+01  1.03e-01  1.54e+01  3.38e-05  2.43e-01  1.90e-01  
  4  +5.0050e-01  +1.3967e+00  8.96e-01  8.68e-03  1.34e+00  8.09e-06  1.30e-01  8.05e-01  
  5  +5.0012e-01  +8.2912e-01  3.29e-01  3.14e-03  4.88e-01  5.39e-06  5.01e-02  6.78e-01  
  6  +4.9936e-01  +8.7161e-01  3.72e-01  1.93e-03  3.03e-01  3.38e-05  6.56e-03  9.32e-01  
  7  +4.9517e-01  +8.3192e-01  3.37e-01  4.12e-04  6.54e-02  1.59e-04  1.16e-03  8.25e-01  
  8  +4.9153e-01  +7.8865e-01  2.97e-01  2.42e-04  3.84e-02  1.87e-04  6.71e-04  5.19e-01  
  9  +4.8149e-01  +7.0223e-01  2.21e-01  1.11e-04  1.76e-02  1.74e-04  3.07e-04  7.07e-01  
 10  +4.7853e-01  +6.8696e-01  2.08e-01  9.58e-05  1.51e-02  1.36e-04  2.65e-04  3.26e-01  
 11  +4.6928e-01  +6.3790e-01  1.69e-01  7.19e-05  1.13e-02  3.50e-05  2.05e-04  7.16e-01  
 12  +4.4545e-01  +5.3865e-01  9.32e-02  3.41e-05  5.36e-03  1.64e-05  1.02e-04  5.92e-01  
 13  +4.4054e-01  +5.2077e-01  8.02e-02  2.86e-05  4.49e-03  1.36e-05  8.70e-05  2.47e-01  
 14  +4.3436e-01  +4.9815e-01  6.38e-02  2.21e-05  3.47e-03  1.04e-05  6.84e-05  3.52e-01  
 15  +4.1560e-01  +4.3036e-01  1.48e-02  4.86e-06  7.60e-04  1.86e-06  1.59e-05  9.90e-01  
 16  +4.0942e-01  +4.0968e-01  2.60e-04  8.51e-08  1.33e-05  3.04e-08  2.85e-07  9.90e-01  
 17  +4.0930e-01  +4.0930e-01  2.60e-06  8.51e-10  1.33e-07  3.04e-10  2.85e-09  9.90e-01  
 18  +4.0930e-01  +4.0930e-01  2.60e-08  8.51e-12  1.33e-09  3.04e-12  2.86e-11  9.90e-01  
 19  +4.0930e-01  +4.0930e-01  2.60e-10  8.52e-14  1.33e-11  3.04e-14  2.86e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.3591ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:01 PM: Optimal value: 4.093e-01
(CVXPY) Sep 20 03:12:01 PM: Compilation took 1.393e-02 seconds
(CVXPY) Sep 20 03:12:01 PM: Solver (including time spent in interface) took 3.991e-02 seconds
Iteration: 3, Objective: 0.4093
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:01 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:01 PM: Finished problem compilation (took 1.118e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 31126
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.8771e-01  +5.2610e+02  5.26e+02  4.02e-01  4.83e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3740e-01  +6.4944e+01  6.44e+01  1.52e-01  2.31e+01  1.33e-02  2.53e-01  8.73e-01  
  3  +5.0915e-01  +1.6261e+01  1.58e+01  1.03e-01  1.54e+01  3.38e-05  2.43e-01  1.91e-01  
  4  +5.0049e-01  +1.3830e+00  8.82e-01  8.55e-03  1.32e+00  8.11e-06  1.28e-01  8.15e-01  
  5  +5.0014e-01  +8.7633e-01  3.76e-01  3.60e-03  5.59e-01  5.84e-06  5.44e-02  6.18e-01  
  6  +4.9969e-01  +9.1816e-01  4.18e-01  2.75e-03  4.31e-01  2.35e-05  1.05e-02  9.07e-01  
  7  +4.9639e-01  +8.8048e-01  3.84e-01  5.71e-04  9.06e-02  1.27e-04  1.60e-03  8.48e-01  
  8  +4.9666e-01  +8.7273e-01  3.76e-01  5.61e-04  8.91e-02  1.16e-04  1.57e-03  8.87e-02  
  9  +4.9185e-01  +7.9151e-01  3.00e-01  2.27e-04  3.61e-02  1.65e-04  6.18e-04  7.45e-01  
 10  +4.8942e-01  +7.7613e-01  2.87e-01  1.79e-04  2.84e-02  1.72e-04  4.85e-04  2.91e-01  
 11  +4.8655e-01  +7.3683e-01  2.50e-01  1.37e-04  2.17e-02  8.53e-05  3.72e-04  6.34e-01  
 12  +4.7418e-01  +6.7658e-01  2.02e-01  8.63e-05  1.36e-02  7.55e-05  2.40e-04  4.34e-01  
 13  +4.5596e-01  +5.8766e-01  1.32e-01  5.46e-05  8.59e-03  7.32e-07  1.61e-04  9.52e-01  
 14  +4.3474e-01  +5.0737e-01  7.26e-02  2.66e-05  4.17e-03  2.77e-06  8.26e-05  6.22e-01  
 15  +4.3097e-01  +4.9383e-01  6.29e-02  2.26e-05  3.54e-03  3.24e-06  7.07e-05  2.58e-01  
 16  +4.1579e-01  +4.3918e-01  2.34e-02  7.90e-06  1.24e-03  3.21e-06  2.59e-05  9.90e-01  
 17  +4.0701e-01  +4.0890e-01  1.89e-03  6.36e-07  9.94e-05  2.42e-07  2.16e-06  9.32e-01  
 18  +4.0621e-01  +4.0624e-01  2.68e-05  9.00e-09  1.41e-06  3.44e-09  3.09e-08  9.90e-01  
 19  +4.0620e-01  +4.0620e-01  2.68e-07  8.99e-11  1.41e-08  3.44e-11  3.09e-10  9.90e-01  
 20  +4.0620e-01  +4.0620e-01  2.68e-09  9.00e-13  1.41e-10  3.46e-13  3.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.4014ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:02 PM: Optimal value: 4.062e-01
(CVXPY) Sep 20 03:12:02 PM: Compilation took 1.118e-02 seconds
(CVXPY) Sep 20 03:12:02 PM: Solver (including time spent in interface) took 4.352e-02 seconds
Iteration: 4, Objective: 0.4062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:02 PM: Your problem has 2545 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Finished problem compilation (took 1.634e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2545
  constraints   = 5045
  nnz(P)        = 0
  nnz(A)        = 31535
  cones (total) = 1
    : Nonnegative = 1,  numel = 5045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.79e-01  7.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.8742e-01  +5.2644e+02  5.26e+02  4.03e-01  4.83e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3720e-01  +6.4782e+01  6.42e+01  1.51e-01  2.30e+01  1.33e-02  2.53e-01  8.75e-01  
  3  +5.0910e-01  +1.6218e+01  1.57e+01  1.03e-01  1.53e+01  3.40e-05  2.42e-01  1.96e-01  
  4  +5.0053e-01  +1.4608e+00  9.60e-01  9.31e-03  1.43e+00  8.34e-06  1.31e-01  7.82e-01  
  5  +5.0013e-01  +8.9939e-01  3.99e-01  3.82e-03  5.92e-01  6.54e-06  5.21e-02  6.79e-01  
  6  +5.0001e-01  +9.2936e-01  4.29e-01  3.85e-03  5.99e-01  1.15e-05  2.58e-02  5.93e-01  
  7  +4.9615e-01  +8.7355e-01  3.77e-01  5.69e-04  9.04e-02  1.36e-04  1.58e-03  9.45e-01  
  8  +4.8963e-01  +8.1448e-01  3.25e-01  2.45e-04  3.90e-02  2.27e-04  6.76e-04  6.20e-01  
  9  +4.8971e-01  +8.0997e-01  3.20e-01  2.41e-04  3.82e-02  2.07e-04  6.61e-04  9.59e-02  
 10  +4.8338e-01  +7.6019e-01  2.77e-01  1.59e-04  2.52e-02  1.83e-04  4.37e-04  4.87e-01  
 11  +4.7705e-01  +7.2528e-01  2.48e-01  1.22e-04  1.94e-02  1.60e-04  3.40e-04  3.14e-01  
 12  +4.7119e-01  +6.9426e-01  2.23e-01  1.02e-04  1.61e-02  1.29e-04  2.88e-04  2.56e-01  
 13  +4.5529e-01  +6.0539e-01  1.50e-01  6.50e-05  1.02e-02  1.29e-06  1.93e-04  9.00e-01  
 14  +4.3940e-01  +5.4099e-01  1.02e-01  4.02e-05  6.31e-03  1.78e-06  1.25e-04  4.05e-01  
 15  +4.2652e-01  +4.8976e-01  6.32e-02  2.36e-05  3.69e-03  3.33e-06  7.58e-05  5.84e-01  
 16  +4.1875e-01  +4.5808e-01  3.93e-02  1.40e-05  2.19e-03  5.26e-06  4.59e-05  9.90e-01  
 17  +4.1090e-01  +4.2952e-01  1.86e-02  6.56e-06  1.02e-03  2.51e-06  2.22e-05  6.14e-01  
 18  +4.0864e-01  +4.2122e-01  1.26e-02  4.43e-06  6.92e-04  1.68e-06  1.52e-05  7.51e-01  
 19  +4.0628e-01  +4.1253e-01  6.25e-03  2.19e-06  3.42e-04  8.69e-07  7.59e-06  9.90e-01  
 20  +4.0479e-01  +4.0762e-01  2.83e-03  9.86e-07  1.54e-04  3.75e-07  3.47e-06  9.90e-01  
 21  +4.0363e-01  +4.0369e-01  6.10e-05  2.12e-08  3.32e-06  7.96e-09  7.55e-08  9.78e-01  
 22  +4.0360e-01  +4.0360e-01  6.11e-07  2.13e-10  3.32e-08  7.97e-11  7.56e-10  9.90e-01  
 23  +4.0360e-01  +4.0360e-01  6.11e-09  2.13e-12  3.32e-10  7.97e-13  7.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.4033ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:02 PM: Optimal value: 4.036e-01
(CVXPY) Sep 20 03:12:02 PM: Compilation took 1.634e-02 seconds
(CVXPY) Sep 20 03:12:02 PM: Solver (including time spent in interface) took 5.444e-02 seconds
Iteration: 5, Objective: 0.4036
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:02 PM: Your problem has 2555 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Finished problem compilation (took 1.478e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2555
  constraints   = 5055
  nnz(P)        = 0
  nnz(A)        = 32260
  cones (total) = 1
    : Nonnegative = 1,  numel = 5055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.79e-01  7.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.8732e-01  +5.2640e+02  5.26e+02  4.03e-01  4.82e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3707e-01  +6.4630e+01  6.41e+01  1.51e-01  2.29e+01  1.33e-02  2.53e-01  8.76e-01  
  3  +5.0907e-01  +1.6173e+01  1.57e+01  1.03e-01  1.53e+01  3.41e-05  2.42e-01  1.98e-01  
  4  +5.0058e-01  +1.5398e+00  1.04e+00  1.01e-02  1.55e+00  8.52e-06  1.35e-01  7.50e-01  
  5  +5.0017e-01  +9.6011e-01  4.60e-01  4.41e-03  6.82e-01  6.73e-06  5.91e-02  6.23e-01  
  6  +4.9965e-01  +1.0601e+00  5.60e-01  3.59e-03  5.64e-01  2.60e-05  1.34e-02  8.84e-01  
  7  +4.9231e-01  +9.4459e-01  4.52e-01  3.88e-04  6.18e-02  2.28e-04  1.07e-03  9.22e-01  
  8  +4.9361e-01  +9.3497e-01  4.41e-01  3.70e-04  5.89e-02  1.90e-04  1.00e-03  2.14e-01  
  9  +4.8908e-01  +8.0972e-01  3.21e-01  2.09e-04  3.32e-02  7.54e-05  5.66e-04  8.37e-01  
 10  +4.8642e-01  +7.7956e-01  2.93e-01  1.84e-04  2.93e-02  4.62e-05  5.05e-04  4.84e-01  
 11  +4.7399e-01  +7.0945e-01  2.35e-01  1.14e-04  1.80e-02  3.61e-05  3.18e-04  6.18e-01  
 12  +4.6857e-01  +6.8480e-01  2.16e-01  9.76e-05  1.55e-02  3.31e-05  2.76e-04  1.76e-01  
 13  +4.5815e-01  +6.3703e-01  1.79e-01  7.98e-05  1.26e-02  2.09e-05  2.34e-04  4.92e-01  
 14  +4.2446e-01  +4.8792e-01  6.35e-02  2.40e-05  3.77e-03  5.33e-06  7.71e-05  9.03e-01  
 15  +4.2242e-01  +4.8053e-01  5.81e-02  2.17e-05  3.41e-03  5.24e-06  7.04e-05  2.03e-01  
 16  +4.1865e-01  +4.6686e-01  4.82e-02  1.77e-05  2.78e-03  5.07e-06  5.80e-05  4.39e-01  
 17  +4.0865e-01  +4.2964e-01  2.10e-02  7.60e-06  1.19e-03  2.41e-06  2.60e-05  7.21e-01  
 18  +4.0827e-01  +4.2820e-01  1.99e-02  7.16e-06  1.12e-03  2.34e-06  2.45e-05  1.63e-01  
 19  +4.0561e-01  +4.1792e-01  1.23e-02  4.39e-06  6.89e-04  1.67e-06  1.52e-05  9.90e-01  
 20  +4.0137e-01  +4.0326e-01  1.89e-03  6.72e-07  1.05e-04  2.47e-07  2.40e-06  9.33e-01  
 21  +4.0061e-01  +4.0064e-01  2.92e-05  1.04e-08  1.63e-06  3.75e-09  3.74e-08  9.85e-01  
 22  +4.0060e-01  +4.0060e-01  2.92e-07  1.04e-10  1.63e-08  3.76e-11  3.74e-10  9.90e-01  
 23  +4.0060e-01  +4.0060e-01  2.92e-09  1.04e-12  1.63e-10  3.78e-13  3.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.9211ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:02 PM: Optimal value: 4.006e-01
(CVXPY) Sep 20 03:12:02 PM: Compilation took 1.478e-02 seconds
(CVXPY) Sep 20 03:12:02 PM: Solver (including time spent in interface) took 5.122e-02 seconds
Iteration: 6, Objective: 0.4006
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:02 PM: Your problem has 2559 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Finished problem compilation (took 1.143e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2559
  constraints   = 5059
  nnz(P)        = 0
  nnz(A)        = 32463
  cones (total) = 1
    : Nonnegative = 1,  numel = 5059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.79e-01  7.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.8733e-01  +5.2633e+02  5.26e+02  4.03e-01  4.82e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3705e-01  +6.4599e+01  6.41e+01  1.51e-01  2.29e+01  1.33e-02  2.53e-01  8.77e-01  
  3  +5.0906e-01  +1.6160e+01  1.57e+01  1.03e-01  1.53e+01  3.41e-05  2.42e-01  1.98e-01  
  4  +5.0057e-01  +1.5353e+00  1.03e+00  1.00e-02  1.54e+00  8.51e-06  1.35e-01  7.52e-01  
  5  +5.0016e-01  +9.5909e-01  4.59e-01  4.40e-03  6.81e-01  6.77e-06  5.85e-02  6.27e-01  
  6  +4.9940e-01  +1.1066e+00  6.07e-01  3.15e-03  4.96e-01  3.54e-05  1.05e-02  9.34e-01  
  7  +4.9240e-01  +9.8926e-01  4.97e-01  4.44e-04  7.07e-02  2.17e-04  1.22e-03  8.84e-01  
  8  +4.9531e-01  +9.6682e-01  4.72e-01  4.30e-04  6.85e-02  1.45e-04  1.16e-03  3.11e-01  
  9  +4.8960e-01  +7.8280e-01  2.93e-01  1.87e-04  2.98e-02  5.34e-05  5.07e-04  9.90e-01  
 10  +4.8686e-01  +7.6781e-01  2.81e-01  1.69e-04  2.68e-02  4.56e-05  4.61e-04  2.98e-01  
 11  +4.8032e-01  +7.3840e-01  2.58e-01  1.36e-04  2.16e-02  3.79e-05  3.76e-04  4.33e-01  
 12  +4.7484e-01  +7.1296e-01  2.38e-01  1.22e-04  1.93e-02  2.72e-05  3.44e-04  4.72e-01  
 13  +4.6426e-01  +6.6552e-01  2.01e-01  9.23e-05  1.46e-02  2.26e-05  2.66e-04  3.79e-01  
 14  +4.3863e-01  +5.5288e-01  1.14e-01  4.54e-05  7.14e-03  1.16e-05  1.40e-04  6.03e-01  
 15  +4.2830e-01  +5.1127e-01  8.30e-02  3.20e-05  5.02e-03  8.33e-06  1.02e-04  3.42e-01  
 16  +4.2391e-01  +4.9358e-01  6.97e-02  2.63e-05  4.12e-03  7.52e-06  8.49e-05  3.72e-01  
 17  +4.1063e-01  +4.4099e-01  3.04e-02  1.10e-05  1.73e-03  3.96e-06  3.74e-05  9.90e-01  
 18  +4.0634e-01  +4.2501e-01  1.87e-02  6.68e-06  1.05e-03  2.50e-06  2.31e-05  5.94e-01  
 19  +4.0473e-01  +4.1847e-01  1.37e-02  4.93e-06  7.73e-04  1.84e-06  1.72e-05  9.90e-01  
 20  +4.0177e-01  +4.0824e-01  6.47e-03  2.30e-06  3.61e-04  8.79e-07  8.16e-06  6.92e-01  
 21  +3.9928e-01  +3.9972e-01  4.34e-04  1.55e-07  2.42e-05  5.78e-08  5.57e-07  9.51e-01  
 22  +3.9910e-01  +3.9911e-01  4.41e-06  1.57e-09  2.46e-07  5.87e-10  5.66e-09  9.90e-01  
 23  +3.9910e-01  +3.9910e-01  4.41e-08  1.57e-11  2.46e-09  5.87e-12  5.67e-11  9.90e-01  
 24  +3.9910e-01  +3.9910e-01  4.41e-10  1.57e-13  2.46e-11  5.88e-14  5.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.7842ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:02 PM: Optimal value: 3.991e-01
(CVXPY) Sep 20 03:12:02 PM: Compilation took 1.143e-02 seconds
(CVXPY) Sep 20 03:12:02 PM: Solver (including time spent in interface) took 4.924e-02 seconds
Iteration: 7, Objective: 0.3991
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:02 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Finished problem compilation (took 1.139e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 32783
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.79e-01  7.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.8723e-01  +5.2643e+02  5.26e+02  4.03e-01  4.81e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3694e-01  +6.4498e+01  6.40e+01  1.51e-01  2.28e+01  1.34e-02  2.52e-01  8.78e-01  
  3  +5.0904e-01  +1.6139e+01  1.56e+01  1.03e-01  1.52e+01  3.41e-05  2.41e-01  2.00e-01  
  4  +5.0047e-01  +1.3492e+00  8.49e-01  8.26e-03  1.27e+00  8.20e-06  1.21e-01  8.43e-01  
  5  +5.0015e-01  +9.6096e-01  4.61e-01  4.40e-03  6.82e-01  8.57e-06  4.83e-02  7.03e-01  
  6  +4.9976e-01  +9.9799e-01  4.98e-01  3.61e-03  5.65e-01  2.38e-05  1.50e-02  7.48e-01  
  7  +4.9631e-01  +9.5661e-01  4.60e-01  7.64e-04  1.21e-01  1.35e-04  2.17e-03  8.58e-01  
  8  +4.9712e-01  +9.3849e-01  4.41e-01  7.25e-04  1.15e-01  1.05e-04  2.03e-03  2.60e-01  
  9  +4.9430e-01  +8.2617e-01  3.32e-01  3.05e-04  4.85e-02  8.44e-05  8.29e-04  9.90e-01  
 10  +4.8974e-01  +7.9846e-01  3.09e-01  1.99e-04  3.16e-02  9.94e-05  5.39e-04  4.43e-01  
 11  +4.8712e-01  +7.8253e-01  2.95e-01  1.83e-04  2.90e-02  7.08e-05  4.99e-04  3.61e-01  
 12  +4.7827e-01  +7.3779e-01  2.60e-01  1.33e-04  2.11e-02  4.70e-05  3.70e-04  6.10e-01  
 13  +4.7020e-01  +6.9807e-01  2.28e-01  1.10e-04  1.74e-02  3.17e-05  3.12e-04  4.67e-01  
 14  +4.5642e-01  +6.3536e-01  1.79e-01  8.42e-05  1.33e-02  1.27e-05  2.53e-04  9.90e-01  
 15  +4.3750e-01  +5.5236e-01  1.15e-01  4.77e-05  7.49e-03  8.41e-06  1.49e-04  4.62e-01  
 16  +4.2728e-01  +5.1105e-01  8.38e-02  3.33e-05  5.22e-03  6.15e-06  1.08e-04  3.12e-01  
 17  +4.2292e-01  +4.9338e-01  7.05e-02  2.73e-05  4.28e-03  5.82e-06  8.92e-05  3.18e-01  
 18  +4.1227e-01  +4.4970e-01  3.74e-02  1.38e-05  2.16e-03  4.73e-06  4.67e-05  9.90e-01  
 19  +4.0048e-01  +4.0561e-01  5.13e-03  1.87e-06  2.94e-04  6.08e-07  6.74e-06  9.32e-01  
 20  +3.9863e-01  +3.9896e-01  3.26e-04  1.18e-07  1.85e-05  3.95e-08  4.34e-07  9.90e-01  
 21  +3.9850e-01  +3.9850e-01  3.29e-06  1.20e-09  1.87e-07  3.99e-10  4.39e-09  9.90e-01  
 22  +3.9850e-01  +3.9850e-01  3.29e-08  1.20e-11  1.88e-09  3.99e-12  4.40e-11  9.90e-01  
 23  +3.9850e-01  +3.9850e-01  3.29e-10  1.20e-13  1.88e-11  4.00e-14  4.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.1742ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:02 PM: Optimal value: 3.985e-01
(CVXPY) Sep 20 03:12:02 PM: Compilation took 1.139e-02 seconds
(CVXPY) Sep 20 03:12:02 PM: Solver (including time spent in interface) took 4.899e-02 seconds
Iteration: 8, Objective: 0.3985
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:02 PM: Your problem has 2570 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Finished problem compilation (took 1.012e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2570
  constraints   = 5070
  nnz(P)        = 0
  nnz(A)        = 32914
  cones (total) = 1
    : Nonnegative = 1,  numel = 5070

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.79e-01  7.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.8720e-01  +5.2646e+02  5.26e+02  4.03e-01  4.81e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3692e-01  +6.4478e+01  6.39e+01  1.51e-01  2.27e+01  1.34e-02  2.52e-01  8.78e-01  
  3  +5.0903e-01  +1.6133e+01  1.56e+01  1.03e-01  1.52e+01  3.42e-05  2.41e-01  2.00e-01  
  4  +5.0047e-01  +1.3473e+00  8.47e-01  8.24e-03  1.27e+00  8.20e-06  1.21e-01  8.44e-01  
  5  +5.0018e-01  +9.9880e-01  4.99e-01  4.78e-03  7.39e-01  8.57e-06  5.34e-02  6.47e-01  
  6  +4.9993e-01  +1.0131e+00  5.13e-01  4.22e-03  6.59e-01  1.81e-05  2.09e-02  6.60e-01  
  7  +4.9637e-01  +9.6604e-01  4.70e-01  7.59e-04  1.21e-01  1.38e-04  2.14e-03  9.05e-01  
  8  +4.9729e-01  +9.4223e-01  4.45e-01  7.10e-04  1.13e-01  1.01e-04  1.98e-03  3.05e-01  
  9  +4.9463e-01  +8.2900e-01  3.34e-01  3.04e-04  4.85e-02  7.87e-05  8.25e-04  9.90e-01  
 10  +4.9099e-01  +8.0745e-01  3.16e-01  2.12e-04  3.36e-02  9.24e-05  5.72e-04  3.79e-01  
 11  +4.8916e-01  +7.9707e-01  3.08e-01  1.93e-04  3.06e-02  7.59e-05  5.22e-04  3.09e-01  
 12  +4.7918e-01  +7.4294e-01  2.64e-01  1.33e-04  2.10e-02  6.14e-05  3.67e-04  5.03e-01  
 13  +4.6536e-01  +6.7697e-01  2.12e-01  9.50e-05  1.50e-02  3.71e-05  2.73e-04  5.16e-01  
 14  +4.5221e-01  +6.1756e-01  1.65e-01  7.65e-05  1.20e-02  1.17e-05  2.45e-04  8.21e-01  
 15  +4.4515e-01  +5.8316e-01  1.38e-01  6.21e-05  9.73e-03  9.93e-06  2.01e-04  2.32e-01  
 16  +4.3776e-01  +5.5320e-01  1.15e-01  4.85e-05  7.61e-03  1.08e-05  1.54e-04  6.47e-01  
 17  +4.2539e-01  +5.0648e-01  8.11e-02  3.09e-05  4.85e-03  8.87e-06  1.00e-04  7.16e-01  
 18  +4.1744e-01  +4.7075e-01  5.33e-02  1.98e-05  3.10e-03  7.05e-06  6.58e-05  9.90e-01  
 19  +4.0720e-01  +4.3161e-01  2.44e-02  8.98e-06  1.41e-03  3.16e-06  3.13e-05  5.54e-01  
 20  +3.9929e-01  +4.0165e-01  2.36e-03  8.64e-07  1.35e-04  2.81e-07  3.16e-06  9.11e-01  
 21  +3.9842e-01  +3.9847e-01  5.21e-05  1.91e-08  2.99e-06  5.77e-09  7.09e-08  9.89e-01  
 22  +3.9840e-01  +3.9840e-01  5.21e-07  1.91e-10  2.99e-08  5.77e-11  7.10e-10  9.90e-01  
 23  +3.9840e-01  +3.9840e-01  5.21e-09  1.91e-12  2.99e-10  5.77e-13  7.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.1221ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:02 PM: Optimal value: 3.984e-01
(CVXPY) Sep 20 03:12:02 PM: Compilation took 1.012e-02 seconds
(CVXPY) Sep 20 03:12:02 PM: Solver (including time spent in interface) took 5.000e-02 seconds
Iteration: 9, Objective: 0.3984
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:02 PM: Your problem has 2571 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:02 PM: Finished problem compilation (took 1.016e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2571
  constraints   = 5071
  nnz(P)        = 0
  nnz(A)        = 32936
  cones (total) = 1
    : Nonnegative = 1,  numel = 5071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.79e-01  7.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.8722e-01  +5.2641e+02  5.26e+02  4.03e-01  4.81e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3691e-01  +6.4459e+01  6.39e+01  1.51e-01  2.27e+01  1.34e-02  2.52e-01  8.78e-01  
  3  +5.0903e-01  +1.6128e+01  1.56e+01  1.03e-01  1.52e+01  3.42e-05  2.41e-01  2.00e-01  
  4  +5.0047e-01  +1.3465e+00  8.46e-01  8.23e-03  1.27e+00  8.20e-06  1.21e-01  8.44e-01  
  5  +5.0018e-01  +1.0057e+00  5.06e-01  4.84e-03  7.49e-01  8.56e-06  5.44e-02  6.37e-01  
  6  +4.9993e-01  +1.0177e+00  5.18e-01  4.24e-03  6.62e-01  1.82e-05  2.09e-02  6.69e-01  
  7  +4.9625e-01  +9.6743e-01  4.71e-01  7.39e-04  1.17e-01  1.42e-04  2.08e-03  9.07e-01  
  8  +4.9718e-01  +9.4382e-01  4.47e-01  6.91e-04  1.10e-01  1.04e-04  1.92e-03  3.00e-01  
  9  +4.9454e-01  +8.2829e-01  3.34e-01  3.02e-04  4.80e-02  7.66e-05  8.18e-04  9.90e-01  
 10  +4.9103e-01  +8.0772e-01  3.17e-01  2.13e-04  3.39e-02  8.88e-05  5.76e-04  3.71e-01  
 11  +4.8920e-01  +7.9737e-01  3.08e-01  1.93e-04  3.07e-02  7.38e-05  5.24e-04  3.08e-01  
 12  +4.7949e-01  +7.4458e-01  2.65e-01  1.34e-04  2.13e-02  5.97e-05  3.71e-04  5.00e-01  
 13  +4.6535e-01  +6.7676e-01  2.11e-01  9.44e-05  1.49e-02  3.71e-05  2.71e-04  5.14e-01  
 14  +4.5255e-01  +6.1914e-01  1.67e-01  7.70e-05  1.21e-02  1.28e-05  2.46e-04  7.66e-01  
 15  +4.4468e-01  +5.8050e-01  1.36e-01  6.09e-05  9.54e-03  1.05e-05  1.97e-04  2.61e-01  
 16  +4.3728e-01  +5.5068e-01  1.13e-01  4.77e-05  7.48e-03  1.08e-05  1.52e-04  6.02e-01  
 17  +4.2560e-01  +5.0709e-01  8.15e-02  3.12e-05  4.89e-03  8.90e-06  1.01e-04  6.85e-01  
 18  +4.1768e-01  +4.7174e-01  5.41e-02  2.01e-05  3.15e-03  7.11e-06  6.67e-05  9.90e-01  
 19  +4.0743e-01  +4.3250e-01  2.51e-02  9.23e-06  1.44e-03  3.23e-06  3.22e-05  5.49e-01  
 20  +3.9983e-01  +4.0368e-01  3.85e-03  1.41e-06  2.21e-04  4.74e-07  5.15e-06  8.55e-01  
 21  +3.9847e-01  +3.9866e-01  1.81e-04  6.63e-08  1.04e-05  2.14e-08  2.45e-07  9.90e-01  
 22  +3.9840e-01  +3.9840e-01  1.82e-06  6.67e-10  1.04e-07  2.15e-10  2.47e-09  9.90e-01  
 23  +3.9840e-01  +3.9840e-01  1.82e-08  6.67e-12  1.04e-09  2.15e-12  2.47e-11  9.90e-01  
 24  +3.9840e-01  +3.9840e-01  1.82e-10  6.67e-14  1.04e-11  2.16e-14  2.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.0323ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:02 PM: Optimal value: 3.984e-01
(CVXPY) Sep 20 03:12:02 PM: Compilation took 1.016e-02 seconds
(CVXPY) Sep 20 03:12:02 PM: Solver (including time spent in interface) took 5.002e-02 seconds
FULL MODEL:
  Accruacy: 0.6018
  Our objective: 0.2036

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.1652)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.0104)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1)            <-- (term's our objective: 0.0088)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.006)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.273280143737793
Best over terms:
  Our final objective: 0.16519999999999996
    Its accruacy: 0.5826
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16519999999999996
  Highest accruacy: 0.5826
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

