Command:
python test_script.py -s linear_dependence -d 4 -n 500 --seed 21 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.33199999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.332
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:08 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:08 PM: Finished problem compilation (took 4.040e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +2.5104e+02  2.51e+02  9.32e-01  1.86e+01  1.00e+00  1.01e+00   ------   
  1  +6.0666e-01  +4.8855e+01  4.82e+01  3.19e-01  1.02e+01  4.09e-03  4.76e-01  6.68e-01  
  2  +5.4592e-01  +7.4596e+00  6.91e+00  1.09e-01  4.18e+00  8.58e-03  2.10e-01  7.73e-01  
  3  +5.0005e-01  +1.5291e+00  1.03e+00  3.00e-02  1.10e+00  3.17e-03  1.75e-01  5.69e-01  
  4  +4.9280e-01  +9.3142e-01  4.39e-01  9.19e-03  3.54e-01  3.96e-03  3.28e-02  8.61e-01  
  5  +4.5187e-01  +8.1374e-01  3.62e-01  1.97e-03  7.73e-02  1.52e-02  5.81e-03  8.35e-01  
  6  +4.2891e-01  +6.6997e-01  2.41e-01  1.21e-03  4.69e-02  7.83e-03  4.00e-03  3.70e-01  
  7  +3.9255e-01  +4.7126e-01  7.87e-02  3.69e-04  1.41e-02  6.87e-05  1.54e-03  8.09e-01  
  8  +3.7127e-01  +3.7508e-01  3.81e-03  1.69e-05  6.42e-04  9.30e-07  8.07e-05  9.61e-01  
  9  +3.7011e-01  +3.7015e-01  3.88e-05  1.71e-07  6.53e-06  9.50e-09  8.28e-07  9.90e-01  
 10  +3.7010e-01  +3.7010e-01  3.88e-07  1.71e-09  6.53e-08  9.50e-11  8.28e-09  9.90e-01  
 11  +3.7010e-01  +3.7010e-01  3.88e-09  1.71e-11  6.53e-10  9.50e-13  8.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2272ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:08 PM: Optimal value: 3.701e-01
(CVXPY) Sep 20 03:06:08 PM: Compilation took 4.040e-03 seconds
(CVXPY) Sep 20 03:06:08 PM: Solver (including time spent in interface) took 1.791e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:08 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:08 PM: Finished problem compilation (took 3.219e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 2289
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9833e-01  +2.5147e+02  2.51e+02  9.33e-01  2.00e+01  1.00e+00  1.02e+00   ------   
  1  +6.0069e-01  +4.9406e+01  4.88e+01  3.27e-01  1.09e+01  4.07e-03  4.87e-01  6.62e-01  
  2  +5.4126e-01  +6.9762e+00  6.43e+00  1.02e-01  4.18e+00  9.33e-03  2.00e-01  8.20e-01  
  3  +4.9901e-01  +1.6005e+00  1.10e+00  3.18e-02  1.26e+00  4.01e-03  1.47e-01  7.33e-01  
  4  +4.7379e-01  +1.1238e+00  6.50e-01  6.59e-03  2.77e-01  1.13e-02  1.87e-02  9.43e-01  
  5  +4.5588e-01  +9.7643e-01  5.21e-01  3.59e-03  1.51e-01  1.21e-02  1.01e-02  4.85e-01  
  6  +4.4200e-01  +8.9901e-01  4.57e-01  2.41e-03  1.01e-01  1.11e-02  6.78e-03  4.25e-01  
  7  +4.3869e-01  +8.8890e-01  4.50e-01  2.16e-03  9.07e-02  1.04e-02  6.06e-03  2.05e-01  
  8  +4.2972e-01  +8.0543e-01  3.76e-01  1.71e-03  7.15e-02  4.17e-03  4.91e-03  5.43e-01  
  9  +3.9019e-01  +5.8229e-01  1.92e-01  7.73e-04  3.20e-02  4.39e-05  2.41e-03  8.85e-01  
 10  +3.4417e-01  +3.7279e-01  2.86e-02  1.09e-04  4.44e-03  1.02e-05  4.01e-04  8.78e-01  
 11  +3.3591e-01  +3.4059e-01  4.68e-03  1.79e-05  7.27e-04  1.70e-06  7.02e-05  8.27e-01  
 12  +3.3568e-01  +3.3982e-01  4.13e-03  1.51e-05  6.15e-04  2.20e-06  5.86e-05  3.35e-01  
 13  +3.3564e-01  +3.3962e-01  3.99e-03  1.47e-05  5.99e-04  2.32e-06  5.71e-05  1.10e-01  
 14  +3.3439e-01  +3.3514e-01  7.49e-04  2.76e-06  1.13e-04  7.86e-07  1.09e-05  9.89e-01  
 15  +3.3411e-01  +3.3413e-01  2.39e-05  8.70e-08  3.54e-06  2.60e-08  3.43e-07  9.70e-01  
 16  +3.3410e-01  +3.3410e-01  2.39e-07  8.70e-10  3.55e-08  2.61e-10  3.44e-09  9.90e-01  
 17  +3.3410e-01  +3.3410e-01  2.39e-09  8.71e-12  3.55e-10  2.61e-12  3.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9394ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:08 PM: Optimal value: 3.341e-01
(CVXPY) Sep 20 03:06:08 PM: Compilation took 3.219e-03 seconds
(CVXPY) Sep 20 03:06:08 PM: Solver (including time spent in interface) took 1.783e-03 seconds
FULL MODEL:
  Accruacy: 0.666
  Our objective: 0.3320000000000001

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.332)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.2930846214294434
Best over terms:
  Our final objective: 0.3320000000000001
    Its accruacy: 0.666
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.3320000000000001
  Highest accruacy: 0.666
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

