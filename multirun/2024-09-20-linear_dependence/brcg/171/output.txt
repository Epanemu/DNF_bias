Command:
python test_script.py -s linear_dependence -d 5 -n 100 --seed 56 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.3
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.45999999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:17 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:17 PM: Finished problem compilation (took 5.139e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9619e-01  +5.1124e+01  5.06e+01  8.62e-01  8.50e+00  1.00e+00  1.04e+00   ------   
  1  +5.9240e-01  +1.0448e+01  9.86e+00  3.18e-01  4.67e+00  3.96e-03  5.22e-01  6.48e-01  
  2  +5.2140e-01  +1.4535e+00  9.32e-01  6.03e-02  1.07e+00  1.18e-02  1.54e-01  9.90e-01  
  3  +5.1038e-01  +1.3677e+00  8.57e-01  3.95e-02  7.18e-01  1.41e-02  1.03e-01  3.77e-01  
  4  +4.7380e-01  +1.0562e+00  5.82e-01  1.56e-02  2.89e-01  1.35e-02  4.47e-02  6.30e-01  
  5  +4.3412e-01  +5.8629e-01  1.52e-01  4.73e-03  8.48e-02  9.60e-05  1.69e-02  7.98e-01  
  6  +4.1674e-01  +4.7106e-01  5.43e-02  1.54e-03  2.74e-02  5.80e-05  6.02e-03  6.92e-01  
  7  +4.0688e-01  +4.3139e-01  2.45e-02  5.54e-04  9.91e-03  4.30e-05  2.53e-03  6.69e-01  
  8  +4.0099e-01  +4.0377e-01  2.78e-03  5.92e-05  1.06e-03  1.11e-05  2.91e-04  9.90e-01  
  9  +4.0011e-01  +4.0014e-01  2.98e-05  6.27e-07  1.12e-05  1.18e-07  3.12e-06  9.89e-01  
 10  +4.0010e-01  +4.0010e-01  2.98e-07  6.27e-09  1.12e-07  1.18e-09  3.12e-08  9.90e-01  
 11  +4.0010e-01  +4.0010e-01  2.98e-09  6.27e-11  1.12e-09  1.18e-11  3.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 370.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:17 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 03:07:17 PM: Compilation took 5.139e-03 seconds
(CVXPY) Sep 20 03:07:17 PM: Solver (including time spent in interface) took 9.975e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:17 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:17 PM: Finished problem compilation (took 2.978e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 527
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9093e-01  +5.1697e+01  5.12e+01  8.70e-01  8.84e+00  1.00e+00  1.07e+00   ------   
  1  +5.6689e-01  +1.0690e+01  1.01e+01  3.37e-01  4.83e+00  3.92e-03  5.51e-01  6.37e-01  
  2  +5.0162e-01  +2.2641e+00  1.76e+00  9.75e-02  1.73e+00  1.33e-02  2.35e-01  8.06e-01  
  3  +4.4015e-01  +1.1756e+00  7.35e-01  2.66e-02  4.93e-01  9.05e-03  7.70e-02  7.39e-01  
  4  +3.9293e-01  +7.6929e-01  3.76e-01  9.53e-03  1.78e-01  6.18e-03  2.99e-02  6.54e-01  
  5  +3.6145e-01  +6.4381e-01  2.82e-01  6.05e-03  1.13e-01  4.44e-03  1.99e-02  4.06e-01  
  6  +3.0528e-01  +3.7909e-01  7.38e-02  1.50e-03  2.79e-02  3.46e-04  5.73e-03  8.01e-01  
  7  +2.8146e-01  +2.8455e-01  3.08e-03  6.25e-05  1.15e-03  6.98e-06  2.65e-04  9.84e-01  
  8  +2.8027e-01  +2.8043e-01  1.57e-04  3.19e-06  5.82e-05  2.73e-07  1.40e-05  9.48e-01  
  9  +2.8020e-01  +2.8021e-01  7.02e-06  1.44e-07  2.61e-06  1.11e-08  6.61e-07  9.53e-01  
 10  +2.8020e-01  +2.8020e-01  7.05e-08  1.44e-09  2.62e-08  1.11e-10  6.67e-09  9.90e-01  
 11  +2.8020e-01  +2.8020e-01  7.05e-10  1.44e-11  2.62e-10  1.11e-12  6.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 396.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:17 PM: Optimal value: 2.802e-01
(CVXPY) Sep 20 03:07:17 PM: Compilation took 2.978e-03 seconds
(CVXPY) Sep 20 03:07:17 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 2, Objective: 0.2802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:18 PM: Your problem has 80 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:18 PM: Finished problem compilation (took 3.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 80
  constraints   = 130
  nnz(P)        = 0
  nnz(A)        = 595
  cones (total) = 1
    : Nonnegative = 1,  numel = 130

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9027e-01  +5.1656e+01  5.12e+01  8.74e-01  8.78e+00  1.00e+00  1.07e+00   ------   
  1  +5.5490e-01  +1.0758e+01  1.02e+01  3.44e-01  4.74e+00  3.94e-03  5.51e-01  6.33e-01  
  2  +4.8658e-01  +2.1202e+00  1.63e+00  8.70e-02  1.54e+00  1.42e-02  2.15e-01  8.55e-01  
  3  +4.1705e-01  +1.0493e+00  6.32e-01  2.15e-02  3.97e-01  8.81e-03  6.29e-02  7.58e-01  
  4  +3.6349e-01  +7.4700e-01  3.84e-01  8.41e-03  1.56e-01  7.10e-03  2.62e-02  6.75e-01  
  5  +3.1669e-01  +4.8724e-01  1.71e-01  3.81e-03  6.98e-02  1.48e-03  1.31e-02  7.42e-01  
  6  +2.8368e-01  +3.2744e-01  4.38e-02  9.50e-04  1.73e-02  3.05e-04  3.57e-03  7.52e-01  
  7  +2.7136e-01  +2.7436e-01  3.00e-03  6.47e-05  1.18e-03  1.79e-05  2.56e-04  9.34e-01  
  8  +2.7060e-01  +2.7140e-01  7.95e-04  1.69e-05  3.05e-04  4.26e-06  7.14e-05  8.25e-01  
  9  +2.7037e-01  +2.7053e-01  1.60e-04  3.40e-06  6.13e-05  7.59e-07  1.51e-05  9.90e-01  
 10  +2.7030e-01  +2.7030e-01  2.51e-06  5.33e-08  9.59e-07  9.79e-09  2.42e-07  9.84e-01  
 11  +2.7030e-01  +2.7030e-01  2.51e-08  5.33e-10  9.58e-09  9.78e-11  2.42e-09  9.90e-01  
 12  +2.7030e-01  +2.7030e-01  2.51e-10  5.33e-12  9.59e-11  9.78e-13  2.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 469µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:18 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:18 PM: Optimal value: 2.703e-01
(CVXPY) Sep 20 03:07:18 PM: Compilation took 3.001e-03 seconds
(CVXPY) Sep 20 03:07:18 PM: Solver (including time spent in interface) took 1.132e-03 seconds
Iteration: 3, Objective: 0.2703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:18 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:18 PM: Finished problem compilation (took 2.953e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 628
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8949e-01  +5.1678e+01  5.12e+01  8.77e-01  8.72e+00  1.00e+00  1.07e+00   ------   
  1  +5.4735e-01  +1.0905e+01  1.04e+01  3.53e-01  4.75e+00  3.93e-03  5.63e-01  6.24e-01  
  2  +4.8098e-01  +2.2971e+00  1.82e+00  9.68e-02  1.67e+00  1.50e-02  2.39e-01  8.23e-01  
  3  +4.2056e-01  +1.0993e+00  6.79e-01  2.54e-02  4.60e-01  8.52e-03  7.43e-02  7.29e-01  
  4  +3.6541e-01  +7.4391e-01  3.78e-01  9.29e-03  1.69e-01  6.16e-03  2.90e-02  6.86e-01  
  5  +3.1093e-01  +4.4501e-01  1.34e-01  3.20e-03  5.73e-02  4.88e-04  1.12e-02  7.95e-01  
  6  +2.7921e-01  +3.0692e-01  2.77e-02  6.27e-04  1.11e-02  8.66e-05  2.42e-03  7.99e-01  
  7  +2.7184e-01  +2.7607e-01  4.23e-03  9.51e-05  1.69e-03  1.96e-05  3.82e-04  9.62e-01  
  8  +2.7079e-01  +2.7197e-01  1.18e-03  2.63e-05  4.67e-04  5.32e-06  1.09e-04  7.45e-01  
  9  +2.7046e-01  +2.7085e-01  3.88e-04  8.44e-06  1.50e-04  1.75e-06  3.71e-05  7.57e-01  
 10  +2.7031e-01  +2.7032e-01  1.35e-05  2.93e-07  5.21e-06  4.73e-08  1.35e-06  9.74e-01  
 11  +2.7030e-01  +2.7030e-01  1.36e-07  2.95e-09  5.24e-08  4.73e-10  1.37e-08  9.90e-01  
 12  +2.7030e-01  +2.7030e-01  1.36e-09  2.95e-11  5.24e-10  4.73e-12  1.37e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 487.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:18 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:18 PM: Optimal value: 2.703e-01
(CVXPY) Sep 20 03:07:18 PM: Compilation took 2.953e-03 seconds
(CVXPY) Sep 20 03:07:18 PM: Solver (including time spent in interface) took 1.042e-03 seconds
Iteration: 4, Objective: 0.2703
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:18 PM: Your problem has 86 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:18 PM: Finished problem compilation (took 3.043e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 86
  constraints   = 136
  nnz(P)        = 0
  nnz(A)        = 639
  cones (total) = 1
    : Nonnegative = 1,  numel = 136

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8933e-01  +5.1658e+01  5.12e+01  8.77e-01  8.74e+00  1.00e+00  1.07e+00   ------   
  1  +5.4565e-01  +1.0926e+01  1.04e+01  3.55e-01  4.76e+00  3.93e-03  5.64e-01  6.22e-01  
  2  +4.7857e-01  +2.3124e+00  1.83e+00  9.76e-02  1.68e+00  1.51e-02  2.43e-01  8.20e-01  
  3  +4.1857e-01  +1.0872e+00  6.69e-01  2.52e-02  4.56e-01  8.43e-03  7.41e-02  7.32e-01  
  4  +3.6339e-01  +7.2980e-01  3.66e-01  9.15e-03  1.67e-01  6.02e-03  2.88e-02  6.74e-01  
  5  +3.0626e-01  +4.2506e-01  1.19e-01  2.84e-03  5.10e-02  3.15e-04  1.01e-02  8.25e-01  
  6  +2.7797e-01  +3.0249e-01  2.45e-02  5.62e-04  1.00e-02  5.86e-05  2.18e-03  7.96e-01  
  7  +2.7123e-01  +2.7367e-01  2.44e-03  5.57e-05  9.91e-04  8.25e-06  2.23e-04  9.40e-01  
  8  +2.7092e-01  +2.7264e-01  1.72e-03  3.78e-05  6.79e-04  6.86e-06  1.59e-04  5.42e-01  
  9  +2.7040e-01  +2.7067e-01  2.65e-04  5.79e-06  1.03e-04  9.53e-07  2.56e-05  8.51e-01  
 10  +2.7030e-01  +2.7031e-01  7.83e-06  1.71e-07  3.04e-06  2.22e-08  7.95e-07  9.71e-01  
 11  +2.7030e-01  +2.7030e-01  7.84e-08  1.71e-09  3.05e-08  2.22e-10  7.99e-09  9.90e-01  
 12  +2.7030e-01  +2.7030e-01  7.85e-10  1.71e-11  3.05e-10  2.22e-12  8.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 508.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:18 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:18 PM: Optimal value: 2.703e-01
(CVXPY) Sep 20 03:07:18 PM: Compilation took 3.043e-03 seconds
(CVXPY) Sep 20 03:07:18 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.73
  Our objective: 0.4600000000000001

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.3)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.1)
 OR (x2 = 1 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.18)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.954773187637329
Best over terms:
  Our final objective: 0.30000000000000004
    Its accruacy: 0.65
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30000000000000004
  Highest accruacy: 0.65
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

