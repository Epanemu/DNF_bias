Command:
python test_script.py -s linear_dependence -d 4 -n 1000 --seed 43 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29600000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.3
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:10 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:10 PM: Finished problem compilation (took 5.075e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +5.0094e+02  5.00e+02  9.51e-01  2.66e+01  1.00e+00  1.00e+00   ------   
  1  +6.0756e-01  +9.7276e+01  9.67e+01  3.26e-01  1.47e+01  4.10e-03  4.74e-01  6.68e-01  
  2  +5.4890e-01  +1.5076e+01  1.45e+01  1.22e-01  6.64e+00  8.37e-03  2.20e-01  7.45e-01  
  3  +5.0213e-01  +2.0209e+00  1.52e+00  3.12e-02  1.62e+00  5.07e-04  2.04e-01  3.48e-01  
  4  +4.9984e-01  +8.1888e-01  3.19e-01  6.53e-03  3.51e-01  1.87e-04  4.64e-02  8.51e-01  
  5  +4.7566e-01  +1.0097e+00  5.34e-01  1.47e-03  8.18e-02  3.22e-03  4.13e-03  9.49e-01  
  6  +4.4497e-01  +6.8655e-01  2.42e-01  6.05e-04  3.32e-02  5.24e-04  1.93e-03  6.59e-01  
  7  +4.1729e-01  +5.2163e-01  1.04e-01  2.47e-04  1.34e-02  4.64e-06  9.45e-04  9.43e-01  
  8  +3.9225e-01  +4.0266e-01  1.04e-02  2.27e-05  1.23e-03  1.15e-06  1.02e-04  9.16e-01  
  9  +3.8914e-01  +3.8929e-01  1.43e-04  3.09e-07  1.68e-05  1.55e-08  1.43e-06  9.86e-01  
 10  +3.8910e-01  +3.8910e-01  1.43e-06  3.09e-09  1.68e-07  1.55e-10  1.43e-08  9.90e-01  
 11  +3.8910e-01  +3.8910e-01  1.43e-08  3.09e-11  1.68e-09  1.55e-12  1.43e-10  9.90e-01  
 12  +3.8910e-01  +3.8910e-01  1.43e-10  3.09e-13  1.68e-11  1.55e-14  1.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7419ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:10 PM: Optimal value: 3.891e-01
(CVXPY) Sep 20 03:06:10 PM: Compilation took 5.075e-03 seconds
(CVXPY) Sep 20 03:06:10 PM: Solver (including time spent in interface) took 3.804e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:10 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:10 PM: Finished problem compilation (took 3.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4351
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0134e+02  5.01e+02  9.51e-01  2.80e+01  1.00e+00  1.01e+00   ------   
  1  +6.0480e-01  +9.7706e+01  9.71e+01  3.29e-01  1.54e+01  4.09e-03  4.78e-01  6.65e-01  
  2  +5.4646e-01  +1.4553e+01  1.40e+01  1.18e-01  6.70e+00  8.70e-03  2.14e-01  7.69e-01  
  3  +5.0150e-01  +1.9921e+00  1.49e+00  3.06e-02  1.67e+00  6.96e-04  1.92e-01  4.37e-01  
  4  +4.9927e-01  +1.0334e+00  5.34e-01  1.04e-02  5.88e-01  4.43e-04  5.32e-02  8.20e-01  
  5  +4.7367e-01  +1.1527e+00  6.79e-01  2.28e-03  1.34e-01  3.94e-03  6.26e-03  9.41e-01  
  6  +4.4997e-01  +7.9622e-01  3.46e-01  8.55e-04  4.98e-02  1.48e-03  2.37e-03  8.15e-01  
  7  +4.4837e-01  +7.8511e-01  3.37e-01  7.76e-04  4.52e-02  1.37e-03  2.14e-03  1.85e-01  
  8  +4.4371e-01  +7.5537e-01  3.12e-01  7.12e-04  4.14e-02  7.68e-04  2.08e-03  3.39e-01  
  9  +4.1784e-01  +6.1402e-01  1.96e-01  4.08e-04  2.35e-02  3.84e-04  1.23e-03  5.24e-01  
 10  +4.0738e-01  +5.7987e-01  1.72e-01  3.30e-04  1.90e-02  2.88e-04  1.01e-03  3.80e-01  
 11  +3.7327e-01  +4.3684e-01  6.36e-02  1.12e-04  6.43e-03  6.84e-05  3.76e-04  7.56e-01  
 12  +3.5739e-01  +3.7232e-01  1.49e-02  2.64e-05  1.51e-03  1.43e-05  9.52e-05  7.77e-01  
 13  +3.5369e-01  +3.5755e-01  3.86e-03  6.82e-06  3.88e-04  2.65e-06  2.52e-05  9.84e-01  
 14  +3.5212e-01  +3.5217e-01  4.77e-05  8.43e-08  4.80e-06  3.26e-08  3.15e-07  9.88e-01  
 15  +3.5210e-01  +3.5210e-01  4.77e-07  8.43e-10  4.80e-08  3.26e-10  3.15e-09  9.90e-01  
 16  +3.5210e-01  +3.5210e-01  4.77e-09  8.44e-12  4.81e-10  3.26e-12  3.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.67ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:10 PM: Optimal value: 3.521e-01
(CVXPY) Sep 20 03:06:10 PM: Compilation took 3.012e-03 seconds
(CVXPY) Sep 20 03:06:10 PM: Solver (including time spent in interface) took 5.399e-03 seconds
Iteration: 2, Objective: 0.3521
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:10 PM: Your problem has 520 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:10 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 520
  constraints   = 1020
  nnz(P)        = 0
  nnz(A)        = 4388
  cones (total) = 1
    : Nonnegative = 1,  numel = 1020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0135e+02  5.01e+02  9.51e-01  2.80e+01  1.00e+00  1.01e+00   ------   
  1  +6.0465e-01  +9.7690e+01  9.71e+01  3.29e-01  1.54e+01  4.09e-03  4.78e-01  6.66e-01  
  2  +5.4634e-01  +1.4524e+01  1.40e+01  1.17e-01  6.67e+00  8.70e-03  2.13e-01  7.71e-01  
  3  +5.0125e-01  +1.9380e+00  1.44e+00  2.95e-02  1.62e+00  6.93e-04  1.90e-01  4.61e-01  
  4  +4.9906e-01  +1.0862e+00  5.87e-01  1.13e-02  6.39e-01  5.00e-04  5.63e-02  7.85e-01  
  5  +4.6983e-01  +1.1231e+00  6.53e-01  2.11e-03  1.24e-01  4.39e-03  5.75e-03  9.41e-01  
  6  +4.5986e-01  +1.0874e+00  6.27e-01  1.53e-03  9.01e-02  5.08e-03  4.11e-03  3.15e-01  
  7  +4.5391e-01  +9.3576e-01  4.82e-01  1.14e-03  6.68e-02  1.65e-03  3.11e-03  5.81e-01  
  8  +4.3607e-01  +8.1102e-01  3.75e-01  7.71e-04  4.49e-02  1.22e-03  2.17e-03  3.76e-01  
  9  +4.1566e-01  +6.4968e-01  2.34e-01  4.79e-04  2.77e-02  1.15e-05  1.44e-03  9.25e-01  
 10  +3.8006e-01  +4.7828e-01  9.82e-02  1.87e-04  1.07e-02  5.88e-05  6.21e-04  9.67e-01  
 11  +3.5513e-01  +3.6866e-01  1.35e-02  2.54e-05  1.45e-03  6.52e-06  9.55e-05  8.72e-01  
 12  +3.5097e-01  +3.5298e-01  2.01e-03  3.76e-06  2.14e-04  1.13e-06  1.48e-05  9.76e-01  
 13  +3.5021e-01  +3.5023e-01  2.17e-05  4.07e-08  2.31e-06  1.21e-08  1.62e-07  9.89e-01  
 14  +3.5020e-01  +3.5020e-01  2.17e-07  4.07e-10  2.31e-08  1.21e-10  1.62e-09  9.90e-01  
 15  +3.5020e-01  +3.5020e-01  2.17e-09  4.07e-12  2.31e-10  1.21e-12  1.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4361ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:10 PM: Optimal value: 3.502e-01
(CVXPY) Sep 20 03:06:10 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 03:06:10 PM: Solver (including time spent in interface) took 3.519e-03 seconds
FULL MODEL:
  Accruacy: 0.65
  Our objective: 0.29999999999999993

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.296)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5151667594909668
Best over terms:
  Our final objective: 0.29600000000000004
    Its accruacy: 0.648
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29600000000000004
  Highest accruacy: 0.648
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

