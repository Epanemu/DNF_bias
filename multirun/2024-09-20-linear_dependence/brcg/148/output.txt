Command:
python test_script.py -s linear_dependence -d 4 -n 5000 --seed 34 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.322
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.322
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:26 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:26 PM: Finished problem compilation (took 9.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5010e+03  2.50e+03  9.78e-01  6.08e+01  1.00e+00  1.00e+00   ------   
  1  +6.0809e-01  +4.8463e+02  4.84e+02  3.36e-01  3.38e+01  4.10e-03  4.73e-01  6.68e-01  
  2  +5.5072e-01  +7.5349e+01  7.48e+01  1.37e-01  1.68e+01  8.24e-03  2.26e-01  7.28e-01  
  3  +5.0927e-01  +1.4893e+01  1.44e+01  9.33e-02  1.11e+01  1.61e-05  2.23e-01  8.58e-02  
  4  +4.9996e-01  +1.1229e+00  6.23e-01  5.92e-03  7.18e-01  7.99e-06  1.32e-01  8.41e-01  
  5  +4.9836e-01  +1.0121e+00  5.14e-01  3.94e-03  4.84e-01  3.04e-05  1.94e-02  9.17e-01  
  6  +4.7330e-01  +8.6807e-01  3.95e-01  3.79e-04  4.73e-02  3.74e-04  1.10e-03  9.45e-01  
  7  +4.3504e-01  +6.1883e-01  1.84e-01  9.70e-05  1.20e-02  3.09e-04  3.05e-04  7.38e-01  
  8  +3.9920e-01  +4.3451e-01  3.53e-02  1.66e-05  2.03e-03  2.58e-06  7.01e-05  8.49e-01  
  9  +3.8949e-01  +3.9012e-01  6.30e-04  2.84e-07  3.48e-05  2.45e-08  1.32e-06  9.84e-01  
 10  +3.8930e-01  +3.8931e-01  6.29e-06  2.84e-09  3.48e-07  2.45e-10  1.32e-08  9.90e-01  
 11  +3.8930e-01  +3.8930e-01  6.29e-08  2.84e-11  3.48e-09  2.45e-12  1.32e-10  9.90e-01  
 12  +3.8930e-01  +3.8930e-01  6.29e-10  2.84e-13  3.48e-11  2.46e-14  1.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.7714ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:26 PM: Optimal value: 3.893e-01
(CVXPY) Sep 20 03:06:26 PM: Compilation took 9.008e-03 seconds
(CVXPY) Sep 20 03:06:26 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:26 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:26 PM: Finished problem compilation (took 6.547e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22000
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9999e-01  +2.5013e+03  2.50e+03  9.78e-01  6.46e+01  1.00e+00  1.00e+00   ------   
  1  +6.0757e-01  +4.8510e+02  4.84e+02  3.37e-01  3.59e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5009e-01  +7.4663e+01  7.41e+01  1.36e-01  1.77e+01  8.31e-03  2.25e-01  7.34e-01  
  3  +5.0892e-01  +1.4522e+01  1.40e+01  9.17e-02  1.16e+01  1.60e-05  2.21e-01  9.43e-02  
  4  +5.0043e-01  +1.8864e+00  1.39e+00  1.31e-02  1.68e+00  9.01e-06  1.62e-01  5.17e-01  
  5  +5.0003e-01  +1.1835e+00  6.83e-01  6.39e-03  8.26e-01  6.91e-06  6.58e-02  6.23e-01  
  6  +4.9320e-01  +1.5676e+00  1.07e+00  1.98e-03  2.66e-01  1.01e-04  5.23e-03  9.90e-01  
  7  +4.7448e-01  +1.2710e+00  7.96e-01  5.10e-04  6.85e-02  2.45e-04  1.31e-03  7.53e-01  
  8  +4.5937e-01  +1.1266e+00  6.67e-01  3.08e-04  4.13e-02  2.53e-04  7.92e-04  4.44e-01  
  9  +4.6293e-01  +1.0328e+00  5.70e-01  2.86e-04  3.83e-02  1.31e-04  7.38e-04  3.58e-01  
 10  +4.4026e-01  +8.7310e-01  4.33e-01  1.76e-04  2.35e-02  1.03e-04  4.69e-04  4.37e-01  
 11  +3.8341e-01  +5.0518e-01  1.22e-01  4.38e-05  5.76e-03  1.02e-06  1.33e-04  9.47e-01  
 12  +3.4417e-01  +3.5701e-01  1.28e-02  4.70e-06  6.12e-04  1.70e-06  1.70e-05  9.90e-01  
 13  +3.3917e-01  +3.3933e-01  1.64e-04  5.98e-08  7.78e-06  1.86e-08  2.23e-07  9.87e-01  
 14  +3.3910e-01  +3.3910e-01  1.64e-06  5.97e-10  7.78e-08  1.86e-10  2.24e-09  9.90e-01  
 15  +3.3910e-01  +3.3910e-01  1.64e-08  5.97e-12  7.78e-10  1.86e-12  2.24e-11  9.90e-01  
 16  +3.3910e-01  +3.3910e-01  1.64e-10  5.97e-14  7.78e-12  1.86e-14  2.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.4819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:27 PM: Optimal value: 3.391e-01
(CVXPY) Sep 20 03:06:27 PM: Compilation took 6.547e-03 seconds
(CVXPY) Sep 20 03:06:27 PM: Solver (including time spent in interface) took 2.255e-02 seconds
FULL MODEL:
  Accruacy: 0.661
  Our objective: 0.32199999999999995

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.322)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4082231521606445
Best over terms:
  Our final objective: 0.32199999999999995
    Its accruacy: 0.661
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.32199999999999995
  Highest accruacy: 0.661
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

