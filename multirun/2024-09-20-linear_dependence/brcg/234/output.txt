Command:
python test_script.py -s linear_dependence -d 6 -n 10000 --seed 21 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15139999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 6.

Computed total variation: 0.157
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:05 PM: Your problem has 5013 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:05 PM: Finished problem compilation (took 2.083e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5013
  constraints   = 10013
  nnz(P)        = 0
  nnz(A)        = 45013
  cones (total) = 1
    : Nonnegative = 1,  numel = 10013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  9.91e+01  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +1.0289e+03  1.03e+03  3.86e-01  6.01e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4196e-01  +1.3637e+02  1.36e+02  1.50e-01  2.96e+01  1.15e-02  2.44e-01  8.24e-01  
  3  +5.1044e-01  +3.4007e+01  3.35e+01  1.18e-01  2.30e+01  2.90e-05  2.39e-01  1.21e-01  
  4  +5.0030e-01  +1.3651e+00  8.65e-01  5.86e-03  1.16e+00  4.72e-06  1.28e-01  9.90e-01  
  5  +5.0002e-01  +6.4971e-01  1.50e-01  9.98e-04  1.99e-01  3.98e-06  3.08e-02  8.54e-01  
  6  +4.9786e-01  +1.1986e+00  7.01e-01  6.94e-04  1.39e-01  2.36e-04  2.12e-03  9.71e-01  
  7  +4.9082e-01  +8.8571e-01  3.95e-01  1.20e-04  2.41e-02  5.92e-04  3.57e-04  8.56e-01  
  8  +4.8291e-01  +6.6263e-01  1.80e-01  5.48e-05  1.10e-02  4.67e-05  1.71e-04  6.99e-01  
  9  +4.7155e-01  +5.4779e-01  7.62e-02  2.07e-05  4.14e-03  4.93e-07  6.87e-05  9.00e-01  
 10  +4.5517e-01  +4.6765e-01  1.25e-02  2.87e-06  5.73e-04  1.75e-07  1.09e-05  8.84e-01  
 11  +4.5074e-01  +4.5117e-01  4.28e-04  8.92e-08  1.78e-05  9.32e-09  3.78e-07  9.76e-01  
 12  +4.5060e-01  +4.5061e-01  4.32e-06  8.99e-10  1.80e-07  9.40e-11  3.82e-09  9.90e-01  
 13  +4.5060e-01  +4.5060e-01  4.33e-08  8.99e-12  1.80e-09  9.56e-13  3.88e-11  9.90e-01  
 14  +4.5060e-01  +4.5060e-01  4.33e-10  9.00e-14  1.80e-11  9.71e-15  3.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.7907ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:05 PM: Optimal value: 4.506e-01
(CVXPY) Sep 20 03:10:05 PM: Compilation took 2.083e-02 seconds
(CVXPY) Sep 20 03:10:05 PM: Solver (including time spent in interface) took 5.027e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:05 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:05 PM: Finished problem compilation (took 2.821e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 53752
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9306e-01  +1.0291e+03  1.03e+03  3.86e-01  6.30e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4179e-01  +1.3602e+02  1.35e+02  1.50e-01  3.09e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1034e-01  +3.3804e+01  3.33e+01  1.18e-01  2.40e+01  2.90e-05  2.39e-01  1.24e-01  
  4  +5.0029e-01  +1.3894e+00  8.89e-01  6.03e-03  1.25e+00  5.02e-06  1.26e-01  9.90e-01  
  5  +5.0010e-01  +8.8106e-01  3.81e-01  2.55e-03  5.31e-01  3.95e-06  6.36e-02  5.92e-01  
  6  +4.9996e-01  +6.4589e-01  1.46e-01  9.16e-04  1.91e-01  7.45e-06  7.19e-03  9.73e-01  
  7  +4.9669e-01  +6.4914e-01  1.52e-01  7.95e-05  1.68e-02  2.46e-04  2.21e-04  9.74e-01  
  8  +4.9302e-01  +6.3711e-01  1.44e-01  4.45e-05  9.38e-03  3.71e-04  1.22e-04  4.93e-01  
  9  +4.8826e-01  +6.3591e-01  1.48e-01  3.52e-05  7.42e-03  2.82e-04  9.70e-05  5.61e-01  
 10  +4.7251e-01  +5.8443e-01  1.12e-01  2.16e-05  4.54e-03  1.49e-04  6.14e-05  5.99e-01  
 11  +4.4529e-01  +4.8917e-01  4.39e-02  7.57e-06  1.59e-03  2.66e-05  2.29e-05  7.32e-01  
 12  +4.4485e-01  +4.8869e-01  4.38e-02  7.33e-06  1.54e-03  2.58e-05  2.22e-05  8.44e-02  
 13  +4.4008e-01  +4.7502e-01  3.49e-02  5.77e-06  1.21e-03  1.67e-06  1.77e-05  9.90e-01  
 14  +4.3178e-01  +4.4877e-01  1.70e-02  2.68e-06  5.60e-04  9.01e-07  8.35e-06  5.89e-01  
 15  +4.2455e-01  +4.2489e-01  3.33e-04  5.23e-08  1.09e-05  1.99e-08  1.67e-07  9.90e-01  
 16  +4.2440e-01  +4.2440e-01  3.33e-06  5.23e-10  1.09e-07  1.99e-10  1.67e-09  9.90e-01  
 17  +4.2440e-01  +4.2440e-01  3.33e-08  5.23e-12  1.09e-09  1.99e-12  1.67e-11  9.90e-01  
 18  +4.2440e-01  +4.2440e-01  3.33e-10  5.24e-14  1.09e-11  2.00e-14  1.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.63ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:05 PM: Optimal value: 4.244e-01
(CVXPY) Sep 20 03:10:05 PM: Compilation took 2.821e-02 seconds
(CVXPY) Sep 20 03:10:05 PM: Solver (including time spent in interface) took 6.800e-02 seconds
Iteration: 2, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:05 PM: Your problem has 5031 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:05 PM: Finished problem compilation (took 1.895e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5031
  constraints   = 10031
  nnz(P)        = 0
  nnz(A)        = 54921
  cones (total) = 1
    : Nonnegative = 1,  numel = 10031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9299e-01  +1.0292e+03  1.03e+03  3.86e-01  6.30e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4171e-01  +1.3585e+02  1.35e+02  1.50e-01  3.09e+01  1.15e-02  2.44e-01  8.27e-01  
  3  +5.1033e-01  +3.3766e+01  3.33e+01  1.18e-01  2.40e+01  2.90e-05  2.38e-01  1.25e-01  
  4  +5.0030e-01  +1.4290e+00  9.29e-01  6.30e-03  1.30e+00  5.06e-06  1.29e-01  9.68e-01  
  5  +5.0007e-01  +8.1130e-01  3.11e-01  2.08e-03  4.34e-01  3.73e-06  5.33e-02  6.61e-01  
  6  +4.9991e-01  +8.2509e-01  3.25e-01  1.73e-03  3.61e-01  1.56e-05  8.27e-03  9.90e-01  
  7  +4.9536e-01  +7.7345e-01  2.78e-01  1.12e-04  2.36e-02  3.23e-04  3.09e-04  9.63e-01  
  8  +4.9096e-01  +7.4231e-01  2.51e-01  7.05e-05  1.49e-02  3.95e-04  1.94e-04  4.00e-01  
  9  +4.9120e-01  +7.1762e-01  2.26e-01  6.32e-05  1.34e-02  2.08e-04  1.73e-04  4.21e-01  
 10  +4.8582e-01  +6.8770e-01  2.02e-01  4.61e-05  9.72e-03  1.96e-04  1.27e-04  3.41e-01  
 11  +4.8480e-01  +6.7896e-01  1.94e-01  4.54e-05  9.58e-03  1.63e-04  1.26e-04  9.63e-02  
 12  +4.7403e-01  +6.1984e-01  1.46e-01  3.00e-05  6.31e-03  4.76e-05  8.56e-05  6.95e-01  
 13  +4.6625e-01  +5.8706e-01  1.21e-01  2.39e-05  5.01e-03  3.15e-05  6.95e-05  3.24e-01  
 14  +4.3940e-01  +4.8089e-01  4.15e-02  7.18e-06  1.51e-03  1.98e-06  2.24e-05  8.87e-01  
 15  +4.3858e-01  +4.7803e-01  3.94e-02  6.81e-06  1.43e-03  1.98e-06  2.13e-05  1.47e-01  
 16  +4.3326e-01  +4.6001e-01  2.68e-02  4.48e-06  9.37e-04  1.45e-06  1.42e-05  4.36e-01  
 17  +4.2560e-01  +4.3380e-01  8.20e-03  1.34e-06  2.81e-04  6.15e-07  4.37e-06  9.90e-01  
 18  +4.2206e-01  +4.2219e-01  1.33e-04  2.17e-08  4.55e-06  9.29e-09  7.19e-08  9.88e-01  
 19  +4.2200e-01  +4.2200e-01  1.33e-06  2.18e-10  4.55e-08  9.29e-11  7.20e-10  9.90e-01  
 20  +4.2200e-01  +4.2200e-01  1.33e-08  2.18e-12  4.55e-10  9.29e-13  7.20e-12  9.90e-01  
 21  +4.2200e-01  +4.2200e-01  1.33e-10  2.18e-14  4.55e-12  9.29e-15  7.20e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 79.1779ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:06 PM: Optimal value: 4.220e-01
(CVXPY) Sep 20 03:10:06 PM: Compilation took 1.895e-02 seconds
(CVXPY) Sep 20 03:10:06 PM: Solver (including time spent in interface) took 8.531e-02 seconds
FULL MODEL:
  Accruacy: 0.5784
  Our objective: 0.15680000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.1514)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.003)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0014)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.7775044441223145
Best over terms:
  Our final objective: 0.15140000000000003
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15140000000000003
  Highest accruacy: 0.5757
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

