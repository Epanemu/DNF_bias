Command:
python test_script.py -s linear_dependence -d 2 -n 50000 --seed 56 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.59968
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 2.

Computed total variation: 0.59968
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:12 PM: Your problem has 25005 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:12 PM: Finished problem compilation (took 5.018e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25005
  constraints   = 50005
  nnz(P)        = 0
  nnz(A)        = 125005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5002e+04  2.50e+04  9.92e-01  1.64e+02  1.00e+00  1.00e+00   ------   
  1  +6.3754e-01  +4.3679e+03  4.37e+03  2.69e-01  7.76e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5915e-01  +8.1471e+02  8.14e+02  1.36e-01  4.53e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0593e-01  +8.4713e+01  8.42e+01  1.10e-01  3.62e+01  5.50e-06  2.14e-01  5.81e-02  
  4  +5.0015e-01  +5.7742e+00  5.27e+00  1.55e-02  4.99e+00  2.48e-06  1.91e-01  3.20e-01  
  5  +4.9965e-01  +2.2702e+00  1.77e+00  4.65e-03  1.56e+00  4.52e-06  2.26e-02  9.90e-01  
  6  +4.8421e-01  +2.4632e+00  1.98e+00  3.73e-04  1.35e-01  1.46e-04  7.66e-04  9.77e-01  
  7  +4.0611e-01  +1.7667e+00  1.36e+00  5.54e-05  2.00e-02  5.85e-04  1.14e-04  8.56e-01  
  8  +2.9255e-01  +8.6136e-01  5.69e-01  3.40e-05  1.16e-02  2.84e-06  9.81e-05  3.07e-01  
  9  +2.1660e-01  +3.0713e-01  9.05e-02  5.64e-06  1.86e-03  1.64e-08  2.70e-05  8.14e-01  
 10  +2.0090e-01  +2.0462e-01  3.71e-03  2.33e-07  7.64e-05  6.31e-09  1.46e-06  9.62e-01  
 11  +2.0027e-01  +2.0030e-01  3.72e-05  2.34e-09  7.67e-07  6.34e-11  1.49e-08  9.90e-01  
 12  +2.0026e-01  +2.0026e-01  3.72e-07  2.34e-11  7.66e-09  6.34e-13  1.49e-10  9.90e-01  
 13  +2.0026e-01  +2.0026e-01  3.72e-09  2.34e-13  7.67e-11  6.36e-15  1.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.4123ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:12 PM: Optimal value: 2.003e-01
(CVXPY) Sep 20 03:04:12 PM: Compilation took 5.018e-02 seconds
(CVXPY) Sep 20 03:04:12 PM: Solver (including time spent in interface) took 1.601e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.2003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:12 PM: Your problem has 25006 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:12 PM: Finished problem compilation (took 4.829e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25006
  constraints   = 50006
  nnz(P)        = 0
  nnz(A)        = 135097
  cones (total) = 1
    : Nonnegative = 1,  numel = 50006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5002e+04  2.50e+04  9.92e-01  1.70e+02  1.00e+00  1.00e+00   ------   
  1  +6.3752e-01  +4.3684e+03  4.37e+03  2.69e-01  8.05e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5915e-01  +8.1466e+02  8.14e+02  1.36e-01  4.69e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0593e-01  +8.4767e+01  8.43e+01  1.10e-01  3.75e+01  5.51e-06  2.14e-01  5.81e-02  
  4  +5.0015e-01  +5.7705e+00  5.27e+00  1.55e-02  5.17e+00  2.48e-06  1.91e-01  3.21e-01  
  5  +4.9965e-01  +2.2718e+00  1.77e+00  4.66e-03  1.61e+00  4.53e-06  2.26e-02  9.90e-01  
  6  +4.8428e-01  +2.4619e+00  1.98e+00  3.74e-04  1.41e-01  1.45e-04  7.69e-04  9.76e-01  
  7  +4.1805e-01  +1.8693e+00  1.45e+00  6.72e-05  2.52e-02  5.19e-04  1.38e-04  8.24e-01  
  8  +3.1010e-01  +9.8537e-01  6.75e-01  3.76e-05  1.34e-02  3.40e-06  9.82e-05  4.39e-01  
  9  +2.1654e-01  +3.0831e-01  9.18e-02  5.78e-06  1.97e-03  1.60e-08  2.85e-05  8.72e-01  
 10  +2.0096e-01  +2.0476e-01  3.80e-03  2.39e-07  8.11e-05  3.72e-09  1.49e-06  9.57e-01  
 11  +2.0027e-01  +2.0030e-01  3.79e-05  2.38e-09  8.09e-07  3.76e-11  1.51e-08  9.90e-01  
 12  +2.0026e-01  +2.0026e-01  3.79e-07  2.38e-11  8.09e-09  3.76e-13  1.51e-10  9.90e-01  
 13  +2.0026e-01  +2.0026e-01  3.79e-09  2.38e-13  8.09e-11  3.77e-15  1.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 184.4658ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:12 PM: Optimal value: 2.003e-01
(CVXPY) Sep 20 03:04:12 PM: Compilation took 4.829e-02 seconds
(CVXPY) Sep 20 03:04:12 PM: Solver (including time spent in interface) took 2.042e-01 seconds
FULL MODEL:
  Accruacy: 0.79984
  Our objective: 0.59968

IF 
    (x0 = 0) <-- (term's our objective: 0.59968)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.2814140319824219
Best over terms:
  Our final objective: 0.59968
    Its accruacy: 0.79984
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.59968
  Highest accruacy: 0.79984
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

