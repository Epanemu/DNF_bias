Command:
python test_script.py -s linear_dependence -d 9 -n 50000 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14412
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.16727999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:12 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:12 PM: Finished problem compilation (took 1.319e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1481e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6047e+02  1.60e+02  1.50e-01  7.61e+01  4.51e-05  2.60e-01  2.61e-01  
  4  +5.0135e-01  +1.7490e+01  1.70e+01  4.67e-02  2.35e+01  5.22e-06  1.96e-01  4.48e-01  
  5  +5.0000e-01  +1.1689e+00  6.69e-01  2.00e-03  1.04e+00  2.55e-05  1.91e-01  2.45e-01  
  6  +4.9999e-01  +6.3337e-01  1.33e-01  3.98e-04  2.08e-01  7.49e-06  3.46e-02  8.34e-01  
  7  +4.9957e-01  +9.1548e-01  4.16e-01  7.58e-04  3.97e-01  2.13e-04  3.29e-03  9.56e-01  
  8  +4.9979e-01  +7.6708e-01  2.67e-01  4.31e-04  2.26e-01  1.05e-04  1.66e-03  7.94e-01  
  9  +4.9352e-01  +7.3630e-01  2.43e-01  1.84e-05  9.68e-03  2.83e-03  5.37e-05  9.68e-01  
 10  +4.8540e-01  +6.4719e-01  1.62e-01  8.90e-06  4.68e-03  2.05e-03  2.68e-05  6.08e-01  
 11  +4.7886e-01  +5.7599e-01  9.71e-02  5.88e-06  3.09e-03  1.79e-05  1.87e-05  7.12e-01  
 12  +4.6306e-01  +4.8920e-01  2.61e-02  1.33e-06  6.97e-04  2.64e-06  4.55e-06  8.12e-01  
 13  +4.5634e-01  +4.5791e-01  1.58e-03  7.57e-08  3.97e-05  1.13e-07  2.75e-07  9.44e-01  
 14  +4.5581e-01  +4.5596e-01  1.57e-04  6.54e-09  3.43e-06  6.43e-09  2.74e-08  9.49e-01  
 15  +4.5576e-01  +4.5576e-01  1.60e-06  6.65e-11  3.49e-08  6.56e-11  2.79e-10  9.90e-01  
 16  +4.5576e-01  +4.5576e-01  1.60e-08  6.65e-13  3.49e-10  6.56e-13  2.79e-12  9.90e-01  
 17  +4.5576e-01  +4.5576e-01  1.61e-10  6.71e-15  3.52e-12  9.73e-15  4.07e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 539.9394ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:13 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:13 PM: Optimal value: 4.558e-01
(CVXPY) Sep 20 03:20:13 PM: Compilation took 1.319e-01 seconds
(CVXPY) Sep 20 03:20:13 PM: Solver (including time spent in interface) took 5.772e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4558
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:13 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:13 PM: Finished problem compilation (took 1.871e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 342562
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4251e+03  5.42e+03  4.36e-01  1.76e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1452e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6031e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7381e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.52e-01  
  5  +5.0001e-01  +1.3796e+00  8.80e-01  2.63e-03  1.42e+00  2.81e-05  1.90e-01  2.38e-01  
  6  +5.0000e-01  +7.2549e-01  2.25e-01  6.73e-04  3.64e-01  8.30e-06  5.15e-02  7.34e-01  
  7  +5.0000e-01  +8.8119e-01  3.81e-01  1.13e-03  6.13e-01  1.38e-05  3.39e-02  7.69e-01  
  8  +4.9991e-01  +6.9907e-01  1.99e-01  5.19e-04  2.81e-01  4.93e-05  3.35e-03  9.11e-01  
  9  +4.9839e-01  +6.9400e-01  1.96e-01  7.36e-05  4.01e-02  7.40e-04  2.12e-04  9.37e-01  
 10  +4.9696e-01  +6.8745e-01  1.90e-01  3.78e-05  2.06e-02  1.31e-03  1.06e-04  5.59e-01  
 11  +4.9615e-01  +6.8224e-01  1.86e-01  2.67e-05  1.46e-02  1.51e-03  7.39e-05  4.42e-01  
 12  +4.9728e-01  +6.8004e-01  1.83e-01  2.41e-05  1.32e-02  8.90e-04  6.57e-05  5.38e-01  
 13  +4.9569e-01  +6.7409e-01  1.78e-01  1.57e-05  8.60e-03  1.22e-03  4.27e-05  4.01e-01  
 14  +4.9565e-01  +6.6976e-01  1.74e-01  1.28e-05  6.99e-03  7.92e-04  3.46e-05  5.95e-01  
 15  +4.9557e-01  +6.6310e-01  1.68e-01  1.08e-05  5.89e-03  5.44e-05  2.90e-05  9.90e-01  
 16  +4.9146e-01  +6.4709e-01  1.56e-01  7.55e-06  4.12e-03  4.50e-05  2.04e-05  5.63e-01  
 17  +4.7608e-01  +5.8938e-01  1.13e-01  3.95e-06  2.15e-03  3.43e-05  1.10e-05  5.89e-01  
 18  +4.7480e-01  +5.8544e-01  1.11e-01  3.83e-06  2.08e-03  3.16e-05  1.07e-05  7.24e-02  
 19  +4.6614e-01  +5.5630e-01  9.02e-02  3.37e-06  1.83e-03  6.82e-06  1.04e-05  4.89e-01  
 20  +4.6394e-01  +5.4745e-01  8.35e-02  3.11e-06  1.69e-03  2.98e-06  9.37e-06  6.25e-01  
 21  +4.4714e-01  +4.8711e-01  4.00e-02  1.38e-06  7.50e-04  9.34e-07  4.22e-06  7.50e-01  
 22  +4.3350e-01  +4.4651e-01  1.30e-02  4.12e-07  2.23e-04  2.50e-07  1.28e-06  7.91e-01  
 23  +4.2813e-01  +4.2835e-01  2.15e-04  6.75e-09  3.66e-06  3.50e-09  2.13e-08  9.84e-01  
 24  +4.2804e-01  +4.2804e-01  2.15e-06  6.75e-11  3.66e-08  3.50e-11  2.13e-10  9.90e-01  
 25  +4.2804e-01  +4.2804e-01  2.15e-08  6.75e-13  3.66e-10  3.58e-13  2.18e-12  9.90e-01  
 26  +4.2804e-01  +4.2804e-01  2.15e-10  6.80e-15  3.66e-12  3.67e-15  2.23e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 862.9019ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:14 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:14 PM: Optimal value: 4.280e-01
(CVXPY) Sep 20 03:20:14 PM: Compilation took 1.871e-01 seconds
(CVXPY) Sep 20 03:20:14 PM: Solver (including time spent in interface) took 9.053e-01 seconds
Iteration: 2, Objective: 0.4280
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:14 PM: Your problem has 25038 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:15 PM: Finished problem compilation (took 1.441e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25038
  constraints   = 50038
  nnz(P)        = 0
  nnz(A)        = 345114
  cones (total) = 1
    : Nonnegative = 1,  numel = 50038

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.36e-01  1.76e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1443e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6028e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7380e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0001e-01  +1.3296e+00  8.30e-01  2.48e-03  1.34e+00  2.82e-05  1.89e-01  2.54e-01  
  6  +5.0000e-01  +6.3436e-01  1.34e-01  4.01e-04  2.17e-01  6.16e-06  3.05e-02  8.64e-01  
  7  +4.9999e-01  +7.1055e-01  2.11e-01  6.27e-04  3.39e-01  1.14e-05  2.20e-02  6.10e-01  
  8  +5.0000e-01  +7.2308e-01  2.23e-01  6.64e-04  3.59e-01  1.03e-05  2.13e-02  2.25e-01  
  9  +4.9999e-01  +7.7202e-01  2.72e-01  7.94e-04  4.29e-01  1.36e-05  1.11e-02  8.67e-01  
 10  +4.9901e-01  +7.2871e-01  2.30e-01  8.41e-05  4.59e-02  4.64e-04  2.39e-04  9.81e-01  
 11  +4.9756e-01  +7.1753e-01  2.20e-01  3.47e-05  1.89e-02  1.03e-03  9.59e-05  6.40e-01  
 12  +4.9711e-01  +7.0343e-01  2.06e-01  2.45e-05  1.34e-02  1.01e-03  6.69e-05  5.03e-01  
 13  +4.9386e-01  +6.8575e-01  1.92e-01  1.20e-05  6.57e-03  1.62e-03  3.25e-05  6.01e-01  
 14  +4.9379e-01  +6.7500e-01  1.81e-01  1.07e-05  5.85e-03  9.08e-04  2.90e-05  4.82e-01  
 15  +4.8971e-01  +6.5642e-01  1.67e-01  7.68e-06  4.19e-03  7.77e-04  2.09e-05  4.89e-01  
 16  +4.8749e-01  +6.4659e-01  1.59e-01  7.15e-06  3.90e-03  6.42e-04  1.96e-05  1.74e-01  
 17  +4.7811e-01  +6.0641e-01  1.28e-01  5.37e-06  2.92e-03  2.00e-04  1.51e-05  6.10e-01  
 18  +4.4756e-01  +4.9354e-01  4.60e-02  1.54e-06  8.36e-04  4.32e-06  4.64e-06  9.03e-01  
 19  +4.4110e-01  +4.7279e-01  3.17e-02  1.04e-06  5.65e-04  2.57e-06  3.20e-06  4.11e-01  
 20  +4.3928e-01  +4.6698e-01  2.77e-02  9.03e-07  4.90e-04  2.04e-06  2.78e-06  2.33e-01  
 21  +4.3894e-01  +4.6591e-01  2.70e-02  8.76e-07  4.75e-04  1.73e-06  2.70e-06  1.96e-01  
 22  +4.3212e-01  +4.4393e-01  1.18e-02  3.78e-07  2.05e-04  6.31e-07  1.19e-06  6.55e-01  
 23  +4.3058e-01  +4.3876e-01  8.18e-03  2.60e-07  1.41e-04  1.44e-07  8.20e-07  9.90e-01  
 24  +4.2816e-01  +4.3110e-01  2.94e-03  9.34e-08  5.06e-05  4.79e-08  2.98e-07  9.90e-01  
 25  +4.2687e-01  +4.2703e-01  1.57e-04  5.00e-09  2.71e-06  2.53e-09  1.60e-08  9.48e-01  
 26  +4.2680e-01  +4.2680e-01  1.62e-06  5.15e-11  2.79e-08  2.60e-11  1.65e-10  9.90e-01  
 27  +4.2680e-01  +4.2680e-01  1.62e-08  5.15e-13  2.79e-10  2.60e-13  1.65e-12  9.90e-01  
 28  +4.2680e-01  +4.2680e-01  1.64e-10  5.26e-15  2.83e-12  2.60e-15  1.65e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0523274s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:16 PM: Optimal value: 4.268e-01
(CVXPY) Sep 20 03:20:16 PM: Compilation took 1.441e-01 seconds
(CVXPY) Sep 20 03:20:16 PM: Solver (including time spent in interface) took 1.129e+00 seconds
Iteration: 3, Objective: 0.4268
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:16 PM: Your problem has 25045 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:16 PM: Finished problem compilation (took 1.939e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25045
  constraints   = 50045
  nnz(P)        = 0
  nnz(A)        = 346137
  cones (total) = 1
    : Nonnegative = 1,  numel = 50045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1442e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6027e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7380e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.3163e+00  8.16e-01  2.44e-03  1.31e+00  2.83e-05  1.89e-01  2.58e-01  
  6  +5.0000e-01  +6.3723e-01  1.37e-01  4.09e-04  2.21e-01  6.45e-06  3.12e-02  8.60e-01  
  7  +4.9999e-01  +7.3304e-01  2.33e-01  6.93e-04  3.75e-01  1.35e-05  2.09e-02  6.78e-01  
  8  +5.0000e-01  +7.4877e-01  2.49e-01  7.39e-04  3.99e-01  1.07e-05  1.95e-02  3.79e-01  
  9  +4.9986e-01  +7.6065e-01  2.61e-01  5.22e-04  2.83e-01  7.29e-05  2.20e-03  9.90e-01  
 10  +4.9740e-01  +7.4859e-01  2.51e-01  4.51e-05  2.46e-02  1.18e-03  1.26e-04  9.43e-01  
 11  +4.9574e-01  +7.3276e-01  2.37e-01  2.68e-05  1.46e-02  1.68e-03  7.40e-05  4.70e-01  
 12  +4.9356e-01  +6.9590e-01  2.02e-01  1.42e-05  7.75e-03  1.75e-03  3.86e-05  7.02e-01  
 13  +4.9363e-01  +6.9034e-01  1.97e-01  1.34e-05  7.30e-03  1.47e-03  3.63e-05  2.02e-01  
 14  +4.9156e-01  +6.8016e-01  1.89e-01  1.05e-05  5.72e-03  1.51e-03  2.85e-05  3.04e-01  
 15  +4.9124e-01  +6.7157e-01  1.80e-01  1.01e-05  5.51e-03  1.09e-03  2.75e-05  2.32e-01  
 16  +4.9008e-01  +6.5080e-01  1.61e-01  8.58e-06  4.68e-03  1.14e-05  2.35e-05  8.93e-01  
 17  +4.7412e-01  +5.8793e-01  1.14e-01  4.23e-06  2.30e-03  8.17e-06  1.19e-05  6.67e-01  
 18  +4.5229e-01  +5.1138e-01  5.91e-02  2.05e-06  1.11e-03  2.87e-06  6.13e-06  5.65e-01  
 19  +4.4975e-01  +5.0296e-01  5.32e-02  1.82e-06  9.90e-04  2.41e-06  5.48e-06  1.80e-01  
 20  +4.4382e-01  +4.8326e-01  3.94e-02  1.31e-06  7.10e-04  1.30e-06  3.99e-06  5.56e-01  
 21  +4.3236e-01  +4.4508e-01  1.27e-02  4.08e-07  2.21e-04  2.59e-07  1.28e-06  8.94e-01  
 22  +4.3216e-01  +4.4444e-01  1.23e-02  3.93e-07  2.13e-04  2.46e-07  1.24e-06  1.01e-01  
 23  +4.3045e-01  +4.3863e-01  8.18e-03  2.60e-07  1.41e-04  1.33e-07  8.20e-07  9.90e-01  
 24  +4.2750e-01  +4.2926e-01  1.76e-03  5.61e-08  3.04e-05  2.88e-08  1.79e-07  8.25e-01  
 25  +4.2669e-01  +4.2671e-01  2.37e-05  7.54e-10  4.09e-07  3.86e-10  2.42e-09  9.87e-01  
 26  +4.2668e-01  +4.2668e-01  2.37e-07  7.54e-12  4.09e-09  3.86e-12  2.42e-11  9.90e-01  
 27  +4.2668e-01  +4.2668e-01  2.40e-09  7.65e-14  4.14e-11  3.86e-14  2.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 984.1797ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:17 PM: Optimal value: 4.267e-01
(CVXPY) Sep 20 03:20:17 PM: Compilation took 1.939e-01 seconds
(CVXPY) Sep 20 03:20:17 PM: Solver (including time spent in interface) took 1.024e+00 seconds
Iteration: 4, Objective: 0.4267
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:17 PM: Your problem has 25046 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:17 PM: Finished problem compilation (took 1.433e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25046
  constraints   = 50046
  nnz(P)        = 0
  nnz(A)        = 346237
  cones (total) = 1
    : Nonnegative = 1,  numel = 50046

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1441e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6027e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7380e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.2838e+00  7.84e-01  2.34e-03  1.26e+00  2.83e-05  1.89e-01  2.70e-01  
  6  +5.0000e-01  +7.1124e-01  2.11e-01  6.30e-04  3.41e-01  9.36e-06  4.82e-02  7.73e-01  
  7  +4.9998e-01  +7.7366e-01  2.74e-01  8.14e-04  4.40e-01  1.89e-05  2.28e-02  7.23e-01  
  8  +4.9954e-01  +6.9700e-01  1.97e-01  3.07e-04  1.67e-01  2.18e-04  1.13e-03  9.61e-01  
  9  +4.9747e-01  +6.8965e-01  1.92e-01  6.94e-05  3.78e-02  1.14e-03  2.03e-04  8.26e-01  
 10  +4.9617e-01  +6.8459e-01  1.88e-01  4.13e-05  2.25e-02  1.64e-03  1.17e-04  5.43e-01  
 11  +4.9494e-01  +6.8082e-01  1.86e-01  2.96e-05  1.61e-02  2.05e-03  8.31e-05  3.66e-01  
 12  +4.9518e-01  +6.7830e-01  1.83e-01  2.30e-05  1.25e-02  1.71e-03  6.35e-05  5.51e-01  
 13  +4.9573e-01  +6.7843e-01  1.83e-01  2.26e-05  1.23e-02  1.42e-03  6.21e-05  1.97e-01  
 14  +4.9454e-01  +6.7347e-01  1.79e-01  1.60e-05  8.75e-03  1.49e-03  4.38e-05  4.94e-01  
 15  +4.9581e-01  +6.7370e-01  1.78e-01  1.54e-05  8.39e-03  7.46e-04  4.18e-05  5.27e-01  
 16  +4.9566e-01  +6.7321e-01  1.78e-01  1.43e-05  7.79e-03  7.01e-04  3.87e-05  1.86e-01  
 17  +4.9651e-01  +6.7272e-01  1.76e-01  1.29e-05  7.05e-03  9.44e-05  3.48e-05  9.07e-01  
 18  +4.9425e-01  +6.6381e-01  1.70e-01  9.49e-06  5.18e-03  7.49e-05  2.56e-05  5.85e-01  
 19  +4.9306e-01  +6.5888e-01  1.66e-01  9.12e-06  4.98e-03  5.27e-05  2.48e-05  2.83e-01  
 20  +4.8693e-01  +6.3543e-01  1.48e-01  6.64e-06  3.62e-03  4.72e-05  1.82e-05  3.86e-01  
 21  +4.6673e-01  +5.6115e-01  9.44e-02  3.39e-06  1.84e-03  2.08e-05  9.72e-06  6.47e-01  
 22  +4.4862e-01  +4.9916e-01  5.05e-02  1.73e-06  9.41e-04  7.62e-06  5.23e-06  5.51e-01  
 23  +4.4777e-01  +4.9644e-01  4.87e-02  1.65e-06  8.93e-04  5.57e-06  4.97e-06  3.02e-01  
 24  +4.4022e-01  +4.7134e-01  3.11e-02  1.03e-06  5.58e-04  3.13e-06  3.17e-06  4.37e-01  
 25  +4.3224e-01  +4.4487e-01  1.26e-02  4.08e-07  2.21e-04  1.02e-06  1.29e-06  6.82e-01  
 26  +4.3189e-01  +4.4372e-01  1.18e-02  3.80e-07  2.06e-04  8.83e-07  1.20e-06  1.59e-01  
 27  +4.2897e-01  +4.3400e-01  5.03e-03  1.60e-07  8.69e-05  9.08e-08  5.10e-07  9.90e-01  
 28  +4.2693e-01  +4.2755e-01  6.25e-04  1.99e-08  1.08e-05  1.12e-08  6.39e-08  8.89e-01  
 29  +4.2664e-01  +4.2665e-01  6.68e-06  2.13e-10  1.15e-07  1.19e-10  6.84e-10  9.89e-01  
 30  +4.2664e-01  +4.2664e-01  6.68e-08  2.13e-12  1.15e-09  1.19e-12  6.84e-12  9.90e-01  
 31  +4.2664e-01  +4.2664e-01  6.76e-10  2.16e-14  1.17e-11  1.19e-14  6.84e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1498104s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:19 PM: Optimal value: 4.266e-01
(CVXPY) Sep 20 03:20:19 PM: Compilation took 1.433e-01 seconds
(CVXPY) Sep 20 03:20:19 PM: Solver (including time spent in interface) took 1.192e+00 seconds
Iteration: 5, Objective: 0.4266
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:19 PM: Your problem has 25047 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:19 PM: Finished problem compilation (took 1.556e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25047
  constraints   = 50047
  nnz(P)        = 0
  nnz(A)        = 346436
  cones (total) = 1
    : Nonnegative = 1,  numel = 50047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1441e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6027e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7380e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.2826e+00  7.83e-01  2.34e-03  1.26e+00  2.83e-05  1.89e-01  2.70e-01  
  6  +5.0000e-01  +7.1187e-01  2.12e-01  6.32e-04  3.42e-01  9.41e-06  4.84e-02  7.72e-01  
  7  +4.9998e-01  +7.7418e-01  2.74e-01  8.15e-04  4.41e-01  1.90e-05  2.28e-02  7.24e-01  
  8  +4.9956e-01  +7.0005e-01  2.00e-01  3.18e-04  1.73e-01  2.12e-04  1.18e-03  9.58e-01  
  9  +4.9748e-01  +6.9250e-01  1.95e-01  7.09e-05  3.86e-02  1.14e-03  2.07e-04  8.30e-01  
 10  +4.9619e-01  +6.8713e-01  1.91e-01  4.26e-05  2.32e-02  1.64e-03  1.21e-04  5.24e-01  
 11  +4.9497e-01  +6.8279e-01  1.88e-01  2.99e-05  1.63e-02  2.04e-03  8.39e-05  4.02e-01  
 12  +4.9551e-01  +6.7941e-01  1.84e-01  2.27e-05  1.24e-02  1.53e-03  6.25e-05  6.36e-01  
 13  +4.9607e-01  +6.7937e-01  1.83e-01  2.22e-05  1.21e-02  1.24e-03  6.08e-05  2.26e-01  
 14  +4.9479e-01  +6.7474e-01  1.80e-01  1.64e-05  8.97e-03  1.42e-03  4.48e-05  3.66e-01  
 15  +4.9542e-01  +6.7472e-01  1.79e-01  1.62e-05  8.83e-03  1.06e-03  4.40e-05  2.62e-01  
 16  +4.9393e-01  +6.6851e-01  1.75e-01  1.20e-05  6.53e-03  1.01e-03  3.25e-05  4.84e-01  
 17  +4.9194e-01  +6.6058e-01  1.69e-01  9.90e-06  5.40e-03  1.00e-03  2.69e-05  2.64e-01  
 18  +4.7724e-01  +6.0141e-01  1.24e-01  4.32e-06  2.35e-03  5.52e-04  1.20e-05  9.26e-01  
 19  +4.5274e-01  +5.1314e-01  6.04e-02  2.21e-06  1.20e-03  4.89e-06  6.63e-06  7.27e-01  
 20  +4.5016e-01  +5.0453e-01  5.44e-02  1.95e-06  1.06e-03  4.13e-06  5.88e-06  1.70e-01  
 21  +4.4413e-01  +4.8441e-01  4.03e-02  1.35e-06  7.31e-04  1.40e-06  4.12e-06  7.49e-01  
 22  +4.4101e-01  +4.7407e-01  3.31e-02  1.10e-06  5.94e-04  1.10e-06  3.37e-06  2.33e-01  
 23  +4.3525e-01  +4.5488e-01  1.96e-02  6.37e-07  3.45e-04  5.50e-07  1.99e-06  5.86e-01  
 24  +4.2850e-01  +4.3265e-01  4.15e-03  1.33e-07  7.21e-05  1.09e-07  4.24e-07  8.12e-01  
 25  +4.2797e-01  +4.3085e-01  2.88e-03  9.22e-08  5.00e-05  6.10e-08  2.96e-07  6.06e-01  
 26  +4.2795e-01  +4.3077e-01  2.82e-03  9.04e-08  4.90e-05  5.87e-08  2.90e-07  9.63e-02  
 27  +4.2753e-01  +4.2945e-01  1.92e-03  6.12e-08  3.32e-05  3.69e-08  1.96e-07  5.56e-01  
 28  +4.2668e-01  +4.2678e-01  9.69e-05  3.09e-09  1.67e-06  1.84e-09  9.92e-09  9.53e-01  
 29  +4.2664e-01  +4.2664e-01  9.74e-07  3.11e-11  1.68e-08  1.85e-11  9.97e-11  9.90e-01  
 30  +4.2664e-01  +4.2664e-01  9.76e-09  3.11e-13  1.69e-10  1.85e-13  9.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1281107s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:20 PM: Optimal value: 4.266e-01
(CVXPY) Sep 20 03:20:20 PM: Compilation took 1.556e-01 seconds
(CVXPY) Sep 20 03:20:20 PM: Solver (including time spent in interface) took 1.183e+00 seconds
Iteration: 6, Objective: 0.4266
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:20:20 PM: Your problem has 25048 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:20:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:20:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:20:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:20:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:20:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:20:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:20:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:20:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:20:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:20:20 PM: Finished problem compilation (took 1.995e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25048
  constraints   = 50048
  nnz(P)        = 0
  nnz(A)        = 346638
  cones (total) = 1
    : Nonnegative = 1,  numel = 50048

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.76e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1441e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6027e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7380e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.2801e+00  7.80e-01  2.33e-03  1.26e+00  2.83e-05  1.89e-01  2.71e-01  
  6  +5.0000e-01  +7.1160e-01  2.12e-01  6.31e-04  3.41e-01  9.44e-06  4.83e-02  7.73e-01  
  7  +4.9998e-01  +7.7447e-01  2.74e-01  8.16e-04  4.41e-01  1.91e-05  2.28e-02  7.25e-01  
  8  +4.9955e-01  +7.0015e-01  2.01e-01  3.19e-04  1.73e-01  2.13e-04  1.18e-03  9.58e-01  
  9  +4.9747e-01  +6.9258e-01  1.95e-01  7.10e-05  3.86e-02  1.15e-03  2.08e-04  8.30e-01  
 10  +4.9617e-01  +6.8717e-01  1.91e-01  4.26e-05  2.32e-02  1.65e-03  1.21e-04  5.26e-01  
 11  +4.9495e-01  +6.8284e-01  1.88e-01  2.99e-05  1.63e-02  2.04e-03  8.40e-05  3.99e-01  
 12  +4.9550e-01  +6.7945e-01  1.84e-01  2.28e-05  1.24e-02  1.54e-03  6.27e-05  6.35e-01  
 13  +4.9606e-01  +6.7941e-01  1.83e-01  2.23e-05  1.22e-02  1.24e-03  6.10e-05  2.24e-01  
 14  +4.9478e-01  +6.7477e-01  1.80e-01  1.65e-05  8.99e-03  1.43e-03  4.50e-05  3.67e-01  
 15  +4.9541e-01  +6.7475e-01  1.79e-01  1.62e-05  8.85e-03  1.07e-03  4.42e-05  2.61e-01  
 16  +4.9393e-01  +6.6856e-01  1.75e-01  1.20e-05  6.55e-03  1.02e-03  3.26e-05  4.85e-01  
 17  +4.9193e-01  +6.6062e-01  1.69e-01  9.91e-06  5.41e-03  1.01e-03  2.70e-05  2.63e-01  
 18  +4.7732e-01  +6.0171e-01  1.24e-01  4.33e-06  2.36e-03  5.51e-04  1.20e-05  9.29e-01  
 19  +4.5282e-01  +5.1341e-01  6.06e-02  2.21e-06  1.20e-03  4.88e-06  6.65e-06  7.28e-01  
 20  +4.5020e-01  +5.0465e-01  5.45e-02  1.95e-06  1.06e-03  4.12e-06  5.89e-06  1.71e-01  
 21  +4.4319e-01  +4.8130e-01  3.81e-02  1.26e-06  6.86e-04  1.01e-06  3.87e-06  8.47e-01  
 22  +4.4003e-01  +4.7080e-01  3.08e-02  1.01e-06  5.49e-04  7.96e-07  3.12e-06  2.39e-01  
 23  +4.3164e-01  +4.4280e-01  1.12e-02  3.56e-07  1.93e-04  1.81e-07  1.12e-06  9.90e-01  
 24  +4.2964e-01  +4.3633e-01  6.69e-03  2.13e-07  1.16e-04  1.09e-07  6.77e-07  4.29e-01  
 25  +4.2879e-01  +4.3346e-01  4.67e-03  1.49e-07  8.06e-05  7.53e-08  4.73e-07  7.31e-01  
 26  +4.2692e-01  +4.2752e-01  6.00e-04  1.91e-08  1.04e-05  9.53e-09  6.14e-08  9.90e-01  
 27  +4.2664e-01  +4.2665e-01  8.25e-06  2.63e-10  1.42e-07  1.31e-10  8.44e-10  9.86e-01  
 28  +4.2664e-01  +4.2664e-01  8.25e-08  2.63e-12  1.42e-09  1.31e-12  8.45e-12  9.90e-01  
 29  +4.2664e-01  +4.2664e-01  8.33e-10  2.66e-14  1.44e-11  1.31e-14  8.45e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 987.8419ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:20:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:20:21 PM: Optimal value: 4.266e-01
(CVXPY) Sep 20 03:20:21 PM: Compilation took 1.995e-01 seconds
(CVXPY) Sep 20 03:20:21 PM: Solver (including time spent in interface) took 1.027e+00 seconds
FULL MODEL:
  Accruacy: 0.57388
  Our objective: 0.14776000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.14412)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.00108)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.00028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.00088)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.00112)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 16.09062147140503
Best over terms:
  Our final objective: 0.14412000000000003
    Its accruacy: 0.57206
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14412000000000003
  Highest accruacy: 0.57206
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

