Command:
python test_script.py -s linear_dependence -d 2 -n 50000 --seed 21 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.59516
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 2.

Computed total variation: 0.59516
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:18 PM: Your problem has 25005 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:18 PM: Finished problem compilation (took 4.611e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25005
  constraints   = 50005
  nnz(P)        = 0
  nnz(A)        = 125005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5002e+04  2.50e+04  9.92e-01  1.64e+02  1.00e+00  1.00e+00   ------   
  1  +6.3754e-01  +4.3679e+03  4.37e+03  2.69e-01  7.76e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5916e-01  +8.1476e+02  8.14e+02  1.36e-01  4.52e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0598e-01  +8.5280e+01  8.48e+01  1.11e-01  3.62e+01  5.54e-06  2.14e-01  5.75e-02  
  4  +5.0015e-01  +5.7267e+00  5.23e+00  1.54e-02  4.95e+00  2.44e-06  1.92e-01  3.15e-01  
  5  +4.9969e-01  +2.1728e+00  1.67e+00  4.47e-03  1.49e+00  4.15e-06  2.30e-02  9.90e-01  
  6  +4.8399e-01  +2.3246e+00  1.84e+00  3.37e-04  1.22e-01  1.49e-04  6.94e-04  9.78e-01  
  7  +4.0389e-01  +1.6636e+00  1.26e+00  4.98e-05  1.80e-02  5.96e-04  1.03e-04  8.57e-01  
  8  +2.7700e-01  +7.2732e-01  4.50e-01  2.78e-05  9.33e-03  2.44e-06  8.99e-05  3.38e-01  
  9  +2.1513e-01  +2.8326e-01  6.81e-02  4.20e-06  1.38e-03  1.59e-08  2.09e-05  8.24e-01  
 10  +2.0287e-01  +2.0488e-01  2.01e-03  1.25e-07  4.10e-05  3.56e-09  7.81e-07  9.74e-01  
 11  +2.0252e-01  +2.0254e-01  2.01e-05  1.25e-09  4.09e-07  3.55e-11  7.85e-09  9.90e-01  
 12  +2.0252e-01  +2.0252e-01  2.01e-07  1.25e-11  4.09e-09  3.56e-13  7.88e-11  9.90e-01  
 13  +2.0252e-01  +2.0252e-01  2.01e-09  1.25e-13  4.09e-11  3.58e-15  7.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 139.8175ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:18 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:18 PM: Optimal value: 2.025e-01
(CVXPY) Sep 20 03:04:18 PM: Compilation took 4.611e-02 seconds
(CVXPY) Sep 20 03:04:18 PM: Solver (including time spent in interface) took 1.584e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.2025
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:18 PM: Your problem has 25006 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:18 PM: Finished problem compilation (took 4.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25006
  constraints   = 50006
  nnz(P)        = 0
  nnz(A)        = 134993
  cones (total) = 1
    : Nonnegative = 1,  numel = 50006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5002e+04  2.50e+04  9.92e-01  1.70e+02  1.00e+00  1.00e+00   ------   
  1  +6.3752e-01  +4.3684e+03  4.37e+03  2.69e-01  8.04e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5915e-01  +8.1467e+02  8.14e+02  1.36e-01  4.69e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0598e-01  +8.5316e+01  8.48e+01  1.11e-01  3.75e+01  5.55e-06  2.14e-01  5.75e-02  
  4  +5.0015e-01  +5.6794e+00  5.18e+00  1.53e-02  5.08e+00  2.44e-06  1.92e-01  3.19e-01  
  5  +4.9967e-01  +2.1510e+00  1.65e+00  4.39e-03  1.52e+00  4.27e-06  2.23e-02  9.90e-01  
  6  +4.8713e-01  +2.2141e+00  1.73e+00  3.95e-04  1.48e-01  1.20e-04  8.17e-04  9.70e-01  
  7  +4.7327e-01  +2.1800e+00  1.71e+00  2.06e-04  7.73e-02  2.06e-04  4.24e-04  5.46e-01  
  8  +4.1067e-01  +1.9385e+00  1.53e+00  7.29e-05  2.71e-02  3.35e-04  1.53e-04  8.58e-01  
  9  +3.0725e-01  +9.6748e-01  6.60e-01  3.64e-05  1.29e-02  2.29e-06  9.64e-05  5.06e-01  
 10  +2.1317e-01  +2.6822e-01  5.50e-02  3.44e-06  1.17e-03  1.19e-07  1.79e-05  9.90e-01  
 11  +2.0284e-01  +2.0452e-01  1.67e-03  1.04e-07  3.53e-05  2.85e-09  6.49e-07  9.68e-01  
 12  +2.0252e-01  +2.0254e-01  1.67e-05  1.04e-09  3.52e-07  2.84e-11  6.52e-09  9.90e-01  
 13  +2.0252e-01  +2.0252e-01  1.67e-07  1.04e-11  3.52e-09  2.86e-13  6.55e-11  9.90e-01  
 14  +2.0252e-01  +2.0252e-01  1.67e-09  1.04e-13  3.52e-11  2.87e-15  6.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 180.0005ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:18 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:18 PM: Optimal value: 2.025e-01
(CVXPY) Sep 20 03:04:18 PM: Compilation took 4.561e-02 seconds
(CVXPY) Sep 20 03:04:18 PM: Solver (including time spent in interface) took 1.971e-01 seconds
FULL MODEL:
  Accruacy: 0.79758
  Our objective: 0.59516

IF 
    (x0 = 0) <-- (term's our objective: 0.59516)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.2399146556854248
Best over terms:
  Our final objective: 0.59516
    Its accruacy: 0.79758
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.59516
  Highest accruacy: 0.79758
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

