Command:
python test_script.py -s linear_dependence -d 2 -n 10000 --seed 56 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.592
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 2.

Computed total variation: 0.5920000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:04 PM: Your problem has 5005 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:04 PM: Finished problem compilation (took 1.025e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5005
  constraints   = 10005
  nnz(P)        = 0
  nnz(A)        = 25005
  cones (total) = 1
    : Nonnegative = 1,  numel = 10005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9994e-01  +5.0020e+03  5.00e+03  9.83e-01  7.29e+01  1.00e+00  1.00e+00   ------   
  1  +6.3731e-01  +8.7387e+02  8.73e+02  2.67e-01  3.44e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5851e-01  +1.6186e+02  1.61e+02  1.31e-01  1.95e+01  5.31e-03  2.13e-01  5.94e-01  
  3  +5.0113e-01  +6.9426e+00  6.44e+00  3.99e-02  5.61e+00  3.21e-04  2.05e-01  2.46e-01  
  4  +4.9928e-01  +2.0423e+00  1.54e+00  8.50e-03  1.28e+00  2.98e-04  3.31e-02  9.74e-01  
  5  +4.9257e-01  +2.4518e+00  1.96e+00  3.04e-03  4.89e-01  1.78e-03  6.61e-03  8.95e-01  
  6  +4.5592e-01  +2.1969e+00  1.74e+00  5.77e-04  9.36e-02  8.30e-03  1.19e-03  8.24e-01  
  7  +4.1816e-01  +1.8845e+00  1.47e+00  3.86e-04  6.19e-02  7.81e-03  8.18e-04  3.44e-01  
  8  +3.1985e-01  +1.0639e+00  7.44e-01  2.00e-04  3.07e-02  6.35e-05  5.14e-04  6.23e-01  
  9  +2.3304e-01  +4.0526e-01  1.72e-01  5.31e-05  7.78e-03  3.28e-07  2.30e-04  7.07e-01  
 10  +2.0594e-01  +2.1620e-01  1.03e-02  3.18e-06  4.62e-04  9.89e-08  1.93e-05  9.43e-01  
 11  +2.0412e-01  +2.0423e-01  1.08e-04  3.36e-08  4.88e-06  1.12e-09  2.14e-07  9.89e-01  
 12  +2.0410e-01  +2.0410e-01  1.08e-06  3.36e-10  4.88e-08  1.12e-11  2.14e-09  9.90e-01  
 13  +2.0410e-01  +2.0410e-01  1.08e-08  3.36e-12  4.88e-10  1.12e-13  2.14e-11  9.90e-01  
 14  +2.0410e-01  +2.0410e-01  1.08e-10  3.35e-14  4.88e-12  1.12e-15  2.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.5061ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:04 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:04 PM: Optimal value: 2.041e-01
(CVXPY) Sep 20 03:04:04 PM: Compilation took 1.025e-02 seconds
(CVXPY) Sep 20 03:04:04 PM: Solver (including time spent in interface) took 2.751e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.2041
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:04 PM: Your problem has 5006 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:04 PM: Finished problem compilation (took 1.058e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5006
  constraints   = 10006
  nnz(P)        = 0
  nnz(A)        = 26969
  cones (total) = 1
    : Nonnegative = 1,  numel = 10006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9996e-01  +5.0021e+03  5.00e+03  9.83e-01  7.54e+01  1.00e+00  1.00e+00   ------   
  1  +6.3728e-01  +8.7437e+02  8.74e+02  2.67e-01  3.57e+01  4.49e-03  3.89e-01  7.25e-01  
  2  +5.5852e-01  +1.6190e+02  1.61e+02  1.31e-01  2.02e+01  5.32e-03  2.14e-01  5.94e-01  
  3  +5.0115e-01  +7.0103e+00  6.51e+00  4.03e-02  5.86e+00  3.25e-04  2.06e-01  2.44e-01  
  4  +4.9984e-01  +3.5120e+00  3.01e+00  1.73e-02  2.64e+00  3.04e-04  7.21e-02  7.54e-01  
  5  +4.8036e-01  +4.7188e+00  4.24e+00  2.67e-03  4.48e-01  4.67e-03  5.51e-03  9.43e-01  
  6  +4.5339e-01  +4.0528e+00  3.60e+00  1.18e-03  1.97e-01  7.60e-03  2.42e-03  5.71e-01  
  7  +4.5763e-01  +3.9357e+00  3.48e+00  1.15e-03  1.93e-01  6.02e-03  2.36e-03  1.64e-01  
  8  +4.1575e-01  +2.8785e+00  2.46e+00  6.04e-04  1.00e-01  4.70e-03  1.27e-03  5.27e-01  
  9  +3.3001e-01  +1.2947e+00  9.65e-01  2.49e-04  3.98e-02  3.86e-05  6.09e-04  6.70e-01  
 10  +2.3304e-01  +3.9601e-01  1.63e-01  4.98e-05  7.57e-03  1.89e-07  2.10e-04  8.13e-01  
 11  +2.0599e-01  +2.1704e-01  1.10e-02  3.42e-06  5.15e-04  1.32e-07  2.09e-05  9.36e-01  
 12  +2.0412e-01  +2.0424e-01  1.21e-04  3.76e-08  5.65e-06  1.43e-09  2.39e-07  9.89e-01  
 13  +2.0410e-01  +2.0410e-01  1.21e-06  3.75e-10  5.65e-08  1.43e-11  2.39e-09  9.90e-01  
 14  +2.0410e-01  +2.0410e-01  1.21e-08  3.75e-12  5.65e-10  1.43e-13  2.40e-11  9.90e-01  
 15  +2.0410e-01  +2.0410e-01  1.21e-10  3.76e-14  5.65e-12  1.43e-15  2.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.4482ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:04 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:04 PM: Optimal value: 2.041e-01
(CVXPY) Sep 20 03:04:04 PM: Compilation took 1.058e-02 seconds
(CVXPY) Sep 20 03:04:04 PM: Solver (including time spent in interface) took 3.380e-02 seconds
Iteration: 2, Objective: 0.2041
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:04 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:04 PM: Finished problem compilation (took 1.083e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 28995
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +5.0021e+03  5.00e+03  9.83e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +6.2708e-01  +9.0184e+02  9.01e+02  2.88e-01  3.90e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5799e-01  +1.6255e+02  1.62e+02  1.33e-01  2.11e+01  6.02e-03  2.16e-01  6.33e-01  
  3  +5.0154e-01  +8.0969e+00  7.60e+00  4.60e-02  6.91e+00  2.94e-06  2.07e-01  2.49e-01  
  4  +4.9974e-01  +2.3378e+00  1.84e+00  1.09e-02  1.72e+00  2.63e-06  5.02e-02  8.19e-01  
  5  +4.7584e-01  +3.8140e+00  3.34e+00  1.67e-03  2.91e-01  6.94e-05  3.43e-03  9.90e-01  
  6  +4.0561e-01  +2.1943e+00  1.79e+00  3.68e-04  6.34e-02  1.15e-04  7.67e-04  8.01e-01  
  7  +3.5532e-01  +1.4767e+00  1.12e+00  3.05e-04  5.10e-02  3.60e-05  7.22e-04  2.07e-01  
  8  +2.6257e-01  +6.9515e-01  4.33e-01  1.20e-04  1.93e-02  9.85e-06  3.78e-04  5.85e-01  
  9  +2.1330e-01  +2.8894e-01  7.56e-02  2.31e-05  3.61e-03  3.45e-06  1.20e-04  8.08e-01  
 10  +2.0441e-01  +2.0662e-01  2.22e-03  6.86e-07  1.07e-04  9.41e-08  4.33e-06  9.71e-01  
 11  +2.0410e-01  +2.0413e-01  2.21e-05  6.84e-09  1.06e-06  9.42e-10  4.36e-08  9.90e-01  
 12  +2.0410e-01  +2.0410e-01  2.21e-07  6.84e-11  1.06e-08  9.41e-12  4.36e-10  9.90e-01  
 13  +2.0410e-01  +2.0410e-01  2.21e-09  6.84e-13  1.06e-10  9.41e-14  4.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.1354ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:04 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:04 PM: Optimal value: 2.041e-01
(CVXPY) Sep 20 03:04:04 PM: Compilation took 1.083e-02 seconds
(CVXPY) Sep 20 03:04:04 PM: Solver (including time spent in interface) took 3.143e-02 seconds
FULL MODEL:
  Accruacy: 0.796
  Our objective: 0.592

IF 
    (x0 = 0) <-- (term's our objective: 0.592)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.1009280681610107
Best over terms:
  Our final objective: 0.592
    Its accruacy: 0.796
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.592
  Highest accruacy: 0.796
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

