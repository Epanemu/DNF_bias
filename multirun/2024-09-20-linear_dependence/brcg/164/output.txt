Command:
python test_script.py -s linear_dependence -d 5 -n 10 --seed 21 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6000000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 5.

Computed total variation: 0.6
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:01 PM: Your problem has 16 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:01 PM: Finished problem compilation (took 3.767e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 16
  constraints   = 21
  nnz(P)        = 0
  nnz(A)        = 51
  cones (total) = 1
    : Nonnegative = 1,  numel = 21

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.0733e-01  +5.9435e+00  5.54e+00  7.40e-01  2.59e+00  1.00e+00  1.27e+00   ------   
  1  +4.8434e-01  +1.2863e+00  8.02e-01  2.58e-01  1.15e+00  3.86e-03  5.79e-01  7.04e-01  
  2  +3.2014e-01  +4.2107e-01  1.01e-01  3.43e-02  1.68e-01  9.25e-03  1.18e-01  9.25e-01  
  3  +3.0083e-01  +3.0571e-01  4.88e-03  1.66e-03  8.22e-03  5.37e-04  6.27e-03  9.53e-01  
  4  +3.0012e-01  +3.0019e-01  7.41e-05  2.60e-05  1.29e-04  6.27e-06  9.93e-05  9.84e-01  
  5  +3.0010e-01  +3.0011e-01  4.60e-06  1.67e-06  8.14e-06  3.61e-07  6.65e-06  9.40e-01  
  6  +3.0010e-01  +3.0010e-01  4.66e-08  1.69e-08  8.24e-08  3.67e-09  6.75e-08  9.90e-01  
  7  +3.0010e-01  +3.0010e-01  4.66e-10  1.69e-10  8.25e-10  3.67e-11  6.76e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:01 PM: Optimal value: 3.001e-01
(CVXPY) Sep 20 03:07:01 PM: Compilation took 3.767e-03 seconds
(CVXPY) Sep 20 03:07:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:01 PM: Your problem has 18 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:01 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 18
  constraints   = 23
  nnz(P)        = 0
  nnz(A)        = 62
  cones (total) = 1
    : Nonnegative = 1,  numel = 23

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5918e-01  +6.1546e+00  5.80e+00  7.58e-01  2.87e+00  1.00e+00  1.32e+00   ------   
  1  +3.9842e-01  +1.2382e+00  8.40e-01  2.72e-01  1.28e+00  3.79e-03  6.08e-01  7.06e-01  
  2  +2.2298e-01  +3.3767e-01  1.15e-01  4.01e-02  2.05e-01  9.25e-03  1.34e-01  9.05e-01  
  3  +2.0096e-01  +2.0678e-01  5.82e-03  2.03e-03  1.04e-02  5.94e-04  8.00e-03  9.48e-01  
  4  +2.0012e-01  +2.0020e-01  8.03e-05  2.89e-05  1.48e-04  6.45e-06  1.15e-04  9.86e-01  
  5  +2.0010e-01  +2.0010e-01  2.37e-06  9.23e-07  4.64e-06  8.08e-08  4.00e-06  9.66e-01  
  6  +2.0010e-01  +2.0010e-01  2.36e-08  9.16e-09  4.61e-08  8.07e-10  4.01e-08  9.90e-01  
  7  +2.0010e-01  +2.0010e-01  2.36e-10  9.17e-11  4.61e-10  8.08e-12  4.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:01 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 03:07:01 PM: Compilation took 2.999e-03 seconds
(CVXPY) Sep 20 03:07:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:01 PM: Your problem has 19 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:01 PM: Finished problem compilation (took 3.209e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 19
  constraints   = 24
  nnz(P)        = 0
  nnz(A)        = 64
  cones (total) = 1
    : Nonnegative = 1,  numel = 24

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5440e-01  +6.1259e+00  5.77e+00  7.62e-01  2.85e+00  1.00e+00  1.31e+00   ------   
  1  +3.7585e-01  +1.2144e+00  8.39e-01  2.68e-01  1.24e+00  3.88e-03  5.91e-01  7.07e-01  
  2  +2.1320e-01  +3.0085e-01  8.76e-02  3.04e-02  1.51e-01  9.20e-03  9.86e-02  9.60e-01  
  3  +2.0070e-01  +2.0527e-01  4.57e-03  1.58e-03  7.94e-03  5.13e-04  5.55e-03  9.57e-01  
  4  +2.0016e-01  +2.0036e-01  2.01e-04  7.28e-05  3.63e-04  1.79e-05  2.57e-04  9.54e-01  
  5  +2.0011e-01  +2.0013e-01  2.30e-05  9.16e-06  4.46e-05  8.67e-07  3.87e-05  9.20e-01  
  6  +2.0010e-01  +2.0010e-01  2.86e-07  1.14e-07  5.56e-07  9.32e-09  5.10e-07  9.87e-01  
  7  +2.0010e-01  +2.0010e-01  2.86e-09  1.14e-09  5.55e-09  9.31e-11  5.10e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:01 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 03:07:01 PM: Compilation took 3.209e-03 seconds
(CVXPY) Sep 20 03:07:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6

IF 
    (x1 = 0 AND x3 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.2270989418029785
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

