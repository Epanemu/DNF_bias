Command:
python test_script.py -s linear_dependence -d 8 -n 5000 --seed 34 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16519999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 8.

Computed total variation: 0.2584
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:53 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Finished problem compilation (took 1.000e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 27517
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5009e+03  2.50e+03  9.80e-01  7.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3495e+02  5.34e+02  4.16e-01  4.98e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3465e-01  +6.3318e+01  6.28e+01  1.58e-01  2.42e+01  1.47e-02  2.65e-01  9.02e-01  
  3  +5.0888e-01  +1.6213e+01  1.57e+01  1.05e-01  1.58e+01  3.90e-05  2.51e-01  2.33e-01  
  4  +5.0045e-01  +1.1017e+00  6.01e-01  5.83e-03  9.09e-01  6.67e-06  1.02e-01  9.90e-01  
  5  +5.0012e-01  +7.1602e-01  2.16e-01  2.04e-03  3.20e-01  9.70e-06  2.31e-02  8.71e-01  
  6  +4.9915e-01  +7.7197e-01  2.73e-01  4.65e-04  7.41e-02  1.79e-04  1.36e-03  9.51e-01  
  7  +4.9558e-01  +7.4123e-01  2.46e-01  1.57e-04  2.50e-02  4.41e-04  4.46e-04  7.06e-01  
  8  +4.8228e-01  +6.2644e-01  1.44e-01  9.33e-05  1.48e-02  5.75e-05  2.89e-04  6.23e-01  
  9  +4.7122e-01  +5.6278e-01  9.16e-02  5.44e-05  8.59e-03  5.98e-06  1.78e-04  8.24e-01  
 10  +4.5429e-01  +4.7745e-01  2.32e-02  1.17e-05  1.84e-03  1.27e-06  4.18e-05  8.15e-01  
 11  +4.4855e-01  +4.5138e-01  2.83e-03  1.34e-06  2.10e-04  1.52e-07  5.15e-06  8.86e-01  
 12  +4.4753e-01  +4.4763e-01  1.01e-04  4.25e-08  6.71e-06  7.21e-09  1.84e-07  9.83e-01  
 13  +4.4750e-01  +4.4750e-01  1.01e-06  4.25e-10  6.70e-08  7.22e-11  1.84e-09  9.90e-01  
 14  +4.4750e-01  +4.4750e-01  1.01e-08  4.25e-12  6.71e-10  7.49e-13  1.91e-11  9.90e-01  
 15  +4.4750e-01  +4.4750e-01  1.01e-10  4.26e-14  6.71e-12  7.77e-15  1.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.1051ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:53 PM: Optimal value: 4.475e-01
(CVXPY) Sep 20 03:14:53 PM: Compilation took 1.000e-02 seconds
(CVXPY) Sep 20 03:14:53 PM: Solver (including time spent in interface) took 3.001e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4475
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:53 PM: Your problem has 2527 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Finished problem compilation (took 1.135e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2527
  constraints   = 5027
  nnz(P)        = 0
  nnz(A)        = 32056
  cones (total) = 1
    : Nonnegative = 1,  numel = 5027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8399e-01  +5.3518e+02  5.35e+02  4.16e-01  5.17e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3435e-01  +6.3047e+01  6.25e+01  1.58e-01  2.51e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0874e-01  +1.6061e+01  1.56e+01  1.05e-01  1.63e+01  3.91e-05  2.50e-01  2.42e-01  
  4  +5.0046e-01  +1.1596e+00  6.59e-01  6.41e-03  1.04e+00  7.14e-06  1.03e-01  9.63e-01  
  5  +5.0017e-01  +7.9357e-01  2.93e-01  2.81e-03  4.57e-01  6.77e-06  3.85e-02  6.66e-01  
  6  +4.9938e-01  +8.3524e-01  3.36e-01  9.01e-04  1.49e-01  8.68e-05  2.61e-03  9.61e-01  
  7  +4.9507e-01  +7.9684e-01  3.02e-01  1.97e-04  3.28e-02  3.52e-04  5.37e-04  8.02e-01  
  8  +4.8942e-01  +7.3676e-01  2.47e-01  1.45e-04  2.40e-02  2.51e-04  4.01e-04  3.75e-01  
  9  +4.8464e-01  +6.9070e-01  2.06e-01  1.11e-04  1.83e-02  1.20e-04  3.09e-04  5.35e-01  
 10  +4.8350e-01  +6.8314e-01  2.00e-01  1.02e-04  1.68e-02  1.06e-04  2.83e-04  1.97e-01  
 11  +4.7852e-01  +6.5863e-01  1.80e-01  8.11e-05  1.34e-02  9.43e-05  2.27e-04  2.68e-01  
 12  +4.6652e-01  +6.0048e-01  1.34e-01  4.97e-05  8.19e-03  9.12e-06  1.41e-04  9.90e-01  
 13  +4.5777e-01  +5.6573e-01  1.08e-01  3.80e-05  6.24e-03  7.61e-06  1.10e-04  2.56e-01  
 14  +4.5176e-01  +5.3606e-01  8.43e-02  3.02e-05  4.97e-03  1.19e-05  8.99e-05  9.90e-01  
 15  +4.2811e-01  +4.5108e-01  2.30e-02  7.44e-06  1.22e-03  2.96e-06  2.32e-05  8.07e-01  
 16  +4.1821e-01  +4.1968e-01  1.46e-03  4.62e-07  7.57e-05  1.91e-07  1.49e-06  9.90e-01  
 17  +4.1751e-01  +4.1752e-01  1.47e-05  4.64e-09  7.60e-07  1.90e-09  1.50e-08  9.90e-01  
 18  +4.1750e-01  +4.1750e-01  1.47e-07  4.64e-11  7.60e-09  1.90e-11  1.50e-10  9.90e-01  
 19  +4.1750e-01  +4.1750e-01  1.47e-09  4.64e-13  7.60e-11  1.91e-13  1.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.4384ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:53 PM: Optimal value: 4.175e-01
(CVXPY) Sep 20 03:14:53 PM: Compilation took 1.135e-02 seconds
(CVXPY) Sep 20 03:14:53 PM: Solver (including time spent in interface) took 4.246e-02 seconds
Iteration: 2, Objective: 0.4175
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:53 PM: Your problem has 2537 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Finished problem compilation (took 1.273e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2537
  constraints   = 5037
  nnz(P)        = 0
  nnz(A)        = 32988
  cones (total) = 1
    : Nonnegative = 1,  numel = 5037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8384e-01  +5.3525e+02  5.35e+02  4.17e-01  5.17e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3422e-01  +6.2912e+01  6.24e+01  1.58e-01  2.50e+01  1.48e-02  2.65e-01  9.07e-01  
  3  +5.0870e-01  +1.6020e+01  1.55e+01  1.04e-01  1.62e+01  3.92e-05  2.49e-01  2.45e-01  
  4  +5.0047e-01  +1.1742e+00  6.74e-01  6.56e-03  1.06e+00  7.22e-06  1.03e-01  9.56e-01  
  5  +5.0020e-01  +8.4370e-01  3.44e-01  3.29e-03  5.35e-01  7.56e-06  4.09e-02  6.80e-01  
  6  +4.9928e-01  +8.8214e-01  3.83e-01  9.28e-04  1.54e-01  9.45e-05  2.64e-03  9.85e-01  
  7  +4.9459e-01  +8.3483e-01  3.40e-01  2.13e-04  3.54e-02  3.55e-04  5.74e-04  7.92e-01  
  8  +4.9169e-01  +7.7496e-01  2.83e-01  1.62e-04  2.70e-02  1.89e-04  4.38e-04  5.31e-01  
  9  +4.8502e-01  +7.2732e-01  2.42e-01  1.14e-04  1.90e-02  1.60e-04  3.11e-04  4.06e-01  
 10  +4.8056e-01  +7.0221e-01  2.22e-01  9.65e-05  1.60e-02  1.29e-04  2.65e-04  2.84e-01  
 11  +4.7420e-01  +6.6518e-01  1.91e-01  8.13e-05  1.34e-02  7.56e-05  2.27e-04  3.79e-01  
 12  +4.5947e-01  +5.9421e-01  1.35e-01  5.38e-05  8.87e-03  2.15e-05  1.56e-04  7.06e-01  
 13  +4.2069e-01  +4.4460e-01  2.39e-02  7.94e-06  1.30e-03  1.25e-06  2.53e-05  9.44e-01  
 14  +4.1139e-01  +4.1463e-01  3.23e-03  1.07e-06  1.76e-04  2.11e-07  3.57e-06  8.79e-01  
 15  +4.0993e-01  +4.0999e-01  5.99e-05  1.98e-08  3.24e-06  5.65e-09  6.66e-08  9.88e-01  
 16  +4.0990e-01  +4.0990e-01  5.99e-07  1.98e-10  3.24e-08  5.65e-11  6.66e-10  9.90e-01  
 17  +4.0990e-01  +4.0990e-01  5.99e-09  1.98e-12  3.24e-10  5.66e-13  6.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.8571ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:53 PM: Optimal value: 4.099e-01
(CVXPY) Sep 20 03:14:53 PM: Compilation took 1.273e-02 seconds
(CVXPY) Sep 20 03:14:53 PM: Solver (including time spent in interface) took 3.928e-02 seconds
Iteration: 3, Objective: 0.4099
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:53 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Finished problem compilation (took 1.222e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 33835
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8357e-01  +5.3538e+02  5.35e+02  4.17e-01  5.17e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3399e-01  +6.2688e+01  6.22e+01  1.58e-01  2.49e+01  1.49e-02  2.64e-01  9.09e-01  
  3  +5.0864e-01  +1.5951e+01  1.54e+01  1.04e-01  1.61e+01  3.93e-05  2.48e-01  2.51e-01  
  4  +5.0062e-01  +1.4534e+00  9.53e-01  9.28e-03  1.49e+00  7.94e-06  1.23e-01  8.14e-01  
  5  +5.0015e-01  +8.7298e-01  3.73e-01  3.55e-03  5.78e-01  7.76e-06  4.43e-02  7.52e-01  
  6  +4.9905e-01  +9.6189e-01  4.63e-01  1.62e-03  2.68e-01  6.75e-05  4.84e-03  9.36e-01  
  7  +4.9218e-01  +8.8033e-01  3.88e-01  2.84e-04  4.74e-02  3.21e-04  7.72e-04  8.45e-01  
  8  +4.8930e-01  +8.3374e-01  3.44e-01  2.22e-04  3.69e-02  2.57e-04  5.99e-04  3.70e-01  
  9  +4.8255e-01  +7.9624e-01  3.14e-01  1.47e-04  2.45e-02  2.92e-04  3.99e-04  3.71e-01  
 10  +4.8112e-01  +7.8221e-01  3.01e-01  1.46e-04  2.43e-02  2.63e-04  3.99e-04  1.94e-02  
 11  +4.7954e-01  +7.6728e-01  2.88e-01  1.36e-04  2.27e-02  2.21e-04  3.74e-04  1.71e-01  
 12  +4.7769e-01  +7.2893e-01  2.51e-01  1.29e-04  2.14e-02  9.23e-05  3.65e-04  3.78e-01  
 13  +4.5999e-01  +6.4031e-01  1.80e-01  7.49e-05  1.24e-02  6.26e-05  2.19e-04  5.09e-01  
 14  +4.5364e-01  +6.1287e-01  1.59e-01  6.45e-05  1.06e-02  5.12e-05  1.90e-04  2.00e-01  
 15  +4.5257e-01  +6.0681e-01  1.54e-01  6.24e-05  1.03e-02  3.93e-05  1.84e-04  3.03e-01  
 16  +4.2708e-01  +5.0013e-01  7.31e-02  2.70e-05  4.43e-03  1.23e-05  8.51e-05  7.02e-01  
 17  +4.0841e-01  +4.2694e-01  1.85e-02  6.56e-06  1.07e-03  2.40e-06  2.21e-05  8.98e-01  
 18  +4.0225e-01  +4.0481e-01  2.56e-03  8.91e-07  1.46e-04  3.33e-07  3.11e-06  9.01e-01  
 19  +4.0122e-01  +4.0125e-01  3.86e-05  1.34e-08  2.20e-06  4.99e-09  4.72e-08  9.86e-01  
 20  +4.0120e-01  +4.0120e-01  3.86e-07  1.34e-10  2.20e-08  4.99e-11  4.72e-10  9.90e-01  
 21  +4.0120e-01  +4.0120e-01  3.86e-09  1.34e-12  2.20e-10  5.01e-13  4.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.3026ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:53 PM: Optimal value: 4.012e-01
(CVXPY) Sep 20 03:14:53 PM: Compilation took 1.222e-02 seconds
(CVXPY) Sep 20 03:14:53 PM: Solver (including time spent in interface) took 4.886e-02 seconds
Iteration: 4, Objective: 0.4012
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:53 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Finished problem compilation (took 1.260e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 34234
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8337e-01  +5.3536e+02  5.35e+02  4.17e-01  5.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3385e-01  +6.2535e+01  6.20e+01  1.57e-01  2.47e+01  1.49e-02  2.63e-01  9.11e-01  
  3  +5.0860e-01  +1.5906e+01  1.54e+01  1.04e-01  1.61e+01  3.94e-05  2.47e-01  2.54e-01  
  4  +5.0068e-01  +1.5758e+00  1.08e+00  1.05e-02  1.68e+00  8.28e-06  1.30e-01  7.66e-01  
  5  +5.0019e-01  +9.5827e-01  4.58e-01  4.38e-03  7.10e-01  7.86e-06  5.41e-02  6.73e-01  
  6  +4.9892e-01  +1.1063e+00  6.07e-01  1.95e-03  3.23e-01  6.86e-05  5.70e-03  9.90e-01  
  7  +4.9237e-01  +9.9203e-01  5.00e-01  4.09e-04  6.82e-02  2.55e-04  1.11e-03  8.07e-01  
  8  +4.8718e-01  +9.4474e-01  4.58e-01  2.67e-04  4.44e-02  2.97e-04  7.19e-04  3.97e-01  
  9  +4.8600e-01  +8.4862e-01  3.63e-01  1.91e-04  3.18e-02  1.25e-04  5.15e-04  6.40e-01  
 10  +4.7706e-01  +7.6609e-01  2.89e-01  1.32e-04  2.20e-02  7.44e-05  3.63e-04  5.57e-01  
 11  +4.6422e-01  +6.9325e-01  2.29e-01  9.70e-05  1.61e-02  4.86e-05  2.75e-04  3.99e-01  
 12  +4.2416e-01  +4.9514e-01  7.10e-02  2.65e-05  4.36e-03  4.93e-07  8.39e-05  9.73e-01  
 13  +4.1974e-01  +4.7958e-01  5.98e-02  2.21e-05  3.62e-03  8.28e-07  7.09e-05  2.01e-01  
 14  +4.0995e-01  +4.4568e-01  3.57e-02  1.28e-05  2.10e-03  4.12e-06  4.32e-05  8.99e-01  
 15  +4.0846e-01  +4.3987e-01  3.14e-02  1.12e-05  1.84e-03  3.86e-06  3.79e-05  3.71e-01  
 16  +4.0259e-01  +4.1851e-01  1.59e-02  5.68e-06  9.30e-04  1.99e-06  1.97e-05  5.42e-01  
 17  +4.0043e-01  +4.1116e-01  1.07e-02  3.79e-06  6.21e-04  1.38e-06  1.32e-05  5.15e-01  
 18  +3.9636e-01  +3.9674e-01  3.82e-04  1.35e-07  2.21e-05  4.81e-08  4.83e-07  9.66e-01  
 19  +3.9620e-01  +3.9621e-01  3.84e-06  1.36e-09  2.22e-07  4.83e-10  4.87e-09  9.90e-01  
 20  +3.9620e-01  +3.9620e-01  3.84e-08  1.36e-11  2.22e-09  4.83e-12  4.87e-11  9.90e-01  
 21  +3.9620e-01  +3.9620e-01  3.84e-10  1.36e-13  2.22e-11  4.84e-14  4.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.3322ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:53 PM: Optimal value: 3.962e-01
(CVXPY) Sep 20 03:14:53 PM: Compilation took 1.260e-02 seconds
(CVXPY) Sep 20 03:14:53 PM: Solver (including time spent in interface) took 5.005e-02 seconds
Iteration: 5, Objective: 0.3962
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:53 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Finished problem compilation (took 1.155e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 34688
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8322e-01  +5.3551e+02  5.35e+02  4.18e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3373e-01  +6.2429e+01  6.19e+01  1.57e-01  2.46e+01  1.49e-02  2.63e-01  9.13e-01  
  3  +5.0857e-01  +1.5872e+01  1.54e+01  1.03e-01  1.60e+01  3.96e-05  2.46e-01  2.58e-01  
  4  +5.0065e-01  +1.5283e+00  1.03e+00  1.00e-02  1.61e+00  8.22e-06  1.25e-01  7.88e-01  
  5  +5.0021e-01  +9.9475e-01  4.95e-01  4.73e-03  7.66e-01  8.73e-06  5.22e-02  6.72e-01  
  6  +4.9883e-01  +1.1218e+00  6.23e-01  1.85e-03  3.08e-01  7.70e-05  5.36e-03  9.71e-01  
  7  +4.9216e-01  +1.0126e+00  5.20e-01  4.15e-04  6.91e-02  2.72e-04  1.12e-03  7.94e-01  
  8  +4.8752e-01  +9.5940e-01  4.72e-01  2.91e-04  4.85e-02  2.85e-04  7.87e-04  3.55e-01  
  9  +4.8423e-01  +8.9069e-01  4.06e-01  2.21e-04  3.68e-02  1.96e-04  5.98e-04  4.44e-01  
 10  +4.7748e-01  +8.0550e-01  3.28e-01  1.62e-04  2.69e-02  1.08e-04  4.46e-04  5.08e-01  
 11  +4.7251e-01  +7.4164e-01  2.69e-01  1.39e-04  2.30e-02  3.40e-05  3.90e-04  6.21e-01  
 12  +4.5661e-01  +6.5689e-01  2.00e-01  8.73e-05  1.44e-02  2.00e-05  2.54e-04  8.16e-01  
 13  +4.3737e-01  +5.6997e-01  1.33e-01  5.38e-05  8.83e-03  1.24e-05  1.65e-04  4.62e-01  
 14  +4.1374e-01  +4.7025e-01  5.65e-02  2.13e-05  3.49e-03  5.14e-06  7.06e-05  7.18e-01  
 15  +4.0958e-01  +4.5387e-01  4.43e-02  1.63e-05  2.68e-03  4.54e-06  5.48e-05  4.47e-01  
 16  +4.0089e-01  +4.2067e-01  1.98e-02  7.19e-06  1.18e-03  2.11e-06  2.51e-05  6.34e-01  
 17  +3.9424e-01  +3.9590e-01  1.66e-03  5.99e-07  9.79e-05  1.73e-07  2.16e-06  9.23e-01  
 18  +3.9361e-01  +3.9363e-01  1.86e-05  6.67e-09  1.09e-06  1.95e-09  2.42e-08  9.89e-01  
 19  +3.9360e-01  +3.9360e-01  1.86e-07  6.67e-11  1.09e-08  1.95e-11  2.42e-10  9.90e-01  
 20  +3.9360e-01  +3.9360e-01  1.86e-09  6.67e-13  1.09e-10  1.95e-13  2.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.3868ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:53 PM: Optimal value: 3.936e-01
(CVXPY) Sep 20 03:14:53 PM: Compilation took 1.155e-02 seconds
(CVXPY) Sep 20 03:14:53 PM: Solver (including time spent in interface) took 5.288e-02 seconds
Iteration: 6, Objective: 0.3936
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:53 PM: Your problem has 2577 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:53 PM: Finished problem compilation (took 1.450e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2577
  constraints   = 5077
  nnz(P)        = 0
  nnz(A)        = 35016
  cones (total) = 1
    : Nonnegative = 1,  numel = 5077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8311e-01  +5.3554e+02  5.35e+02  4.18e-01  5.14e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3362e-01  +6.2319e+01  6.18e+01  1.57e-01  2.45e+01  1.50e-02  2.62e-01  9.14e-01  
  3  +5.0855e-01  +1.5846e+01  1.53e+01  1.03e-01  1.59e+01  3.96e-05  2.46e-01  2.60e-01  
  4  +5.0065e-01  +1.5181e+00  1.02e+00  9.94e-03  1.59e+00  8.21e-06  1.24e-01  7.94e-01  
  5  +5.0023e-01  +1.0224e+00  5.22e-01  4.99e-03  8.08e-01  9.15e-06  5.26e-02  6.71e-01  
  6  +4.9873e-01  +1.1856e+00  6.87e-01  1.83e-03  3.05e-01  8.52e-05  5.21e-03  9.90e-01  
  7  +4.9271e-01  +1.0608e+00  5.68e-01  4.73e-04  7.88e-02  2.49e-04  1.28e-03  7.65e-01  
  8  +4.9025e-01  +9.9972e-01  5.09e-01  3.54e-04  5.89e-02  2.28e-04  9.51e-04  3.63e-01  
  9  +4.8326e-01  +9.0824e-01  4.25e-01  2.26e-04  3.75e-02  2.05e-04  6.11e-04  4.67e-01  
 10  +4.7876e-01  +8.3502e-01  3.56e-01  1.86e-04  3.09e-02  1.18e-04  5.11e-04  3.90e-01  
 11  +4.7035e-01  +7.3045e-01  2.60e-01  1.31e-04  2.16e-02  1.17e-05  3.68e-04  9.03e-01  
 12  +4.5351e-01  +6.4484e-01  1.91e-01  8.51e-05  1.40e-02  1.94e-05  2.50e-04  9.90e-01  
 13  +4.3384e-01  +5.5948e-01  1.26e-01  5.09e-05  8.36e-03  1.21e-05  1.58e-04  4.18e-01  
 14  +4.1397e-01  +4.7720e-01  6.32e-02  2.41e-05  3.94e-03  5.84e-06  7.97e-05  5.74e-01  
 15  +4.1152e-01  +4.6753e-01  5.60e-02  2.11e-05  3.44e-03  5.39e-06  7.03e-05  2.11e-01  
 16  +4.0411e-01  +4.3849e-01  3.44e-02  1.26e-05  2.07e-03  3.59e-06  4.34e-05  5.42e-01  
 17  +3.9703e-01  +4.1156e-01  1.45e-02  5.27e-06  8.61e-04  1.60e-06  1.87e-05  6.80e-01  
 18  +3.9200e-01  +3.9296e-01  9.67e-04  3.48e-07  5.69e-05  1.18e-07  1.27e-06  9.90e-01  
 19  +3.9160e-01  +3.9161e-01  9.80e-06  3.53e-09  5.77e-07  1.19e-09  1.29e-08  9.90e-01  
 20  +3.9160e-01  +3.9160e-01  9.80e-08  3.53e-11  5.77e-09  1.19e-11  1.29e-10  9.90e-01  
 21  +3.9160e-01  +3.9160e-01  9.80e-10  3.53e-13  5.77e-11  1.19e-13  1.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.84ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:54 PM: Optimal value: 3.916e-01
(CVXPY) Sep 20 03:14:54 PM: Compilation took 1.450e-02 seconds
(CVXPY) Sep 20 03:14:54 PM: Solver (including time spent in interface) took 5.206e-02 seconds
Iteration: 7, Objective: 0.3916
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:54 PM: Your problem has 2587 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Finished problem compilation (took 1.116e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2587
  constraints   = 5087
  nnz(P)        = 0
  nnz(A)        = 35319
  cones (total) = 1
    : Nonnegative = 1,  numel = 5087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8308e-01  +5.3543e+02  5.35e+02  4.18e-01  5.13e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3355e-01  +6.2235e+01  6.17e+01  1.57e-01  2.44e+01  1.50e-02  2.62e-01  9.15e-01  
  3  +5.0852e-01  +1.5817e+01  1.53e+01  1.03e-01  1.59e+01  3.96e-05  2.45e-01  2.62e-01  
  4  +5.0063e-01  +1.4882e+00  9.88e-01  9.66e-03  1.55e+00  8.18e-06  1.21e-01  8.08e-01  
  5  +5.0024e-01  +1.0295e+00  5.29e-01  5.06e-03  8.18e-01  9.45e-06  5.08e-02  6.70e-01  
  6  +4.9864e-01  +1.1858e+00  6.87e-01  1.70e-03  2.82e-01  9.24e-05  4.76e-03  9.90e-01  
  7  +4.9102e-01  +1.0555e+00  5.65e-01  3.78e-04  6.30e-02  3.13e-04  1.01e-03  7.97e-01  
  8  +4.8505e-01  +9.0946e-01  4.24e-01  2.44e-04  4.05e-02  1.78e-04  6.57e-04  5.67e-01  
  9  +4.8589e-01  +8.5538e-01  3.69e-01  2.17e-04  3.60e-02  7.25e-05  5.83e-04  5.66e-01  
 10  +4.6464e-01  +7.1335e-01  2.49e-01  1.06e-04  1.75e-02  4.90e-05  2.96e-04  6.93e-01  
 11  +4.5305e-01  +6.6008e-01  2.07e-01  8.58e-05  1.41e-02  3.34e-05  2.49e-04  3.69e-01  
 12  +4.3485e-01  +5.7578e-01  1.41e-01  5.64e-05  9.25e-03  1.98e-05  1.73e-04  3.84e-01  
 13  +4.1545e-01  +4.9136e-01  7.59e-02  2.89e-05  4.72e-03  9.35e-06  9.46e-05  6.89e-01  
 14  +4.1114e-01  +4.7416e-01  6.30e-02  2.36e-05  3.86e-03  7.79e-06  7.85e-05  2.41e-01  
 15  +4.0380e-01  +4.4396e-01  4.02e-02  1.47e-05  2.39e-03  5.18e-06  5.00e-05  6.95e-01  
 16  +3.9456e-01  +4.0863e-01  1.41e-02  5.08e-06  8.28e-04  1.82e-06  1.81e-05  7.90e-01  
 17  +3.8974e-01  +3.9083e-01  1.09e-03  3.93e-07  6.40e-05  1.38e-07  1.43e-06  9.90e-01  
 18  +3.8930e-01  +3.8932e-01  1.12e-05  4.05e-09  6.59e-07  1.42e-09  1.48e-08  9.90e-01  
 19  +3.8930e-01  +3.8930e-01  1.12e-07  4.05e-11  6.59e-09  1.42e-11  1.48e-10  9.90e-01  
 20  +3.8930e-01  +3.8930e-01  1.12e-09  4.05e-13  6.60e-11  1.42e-13  1.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.0441ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:54 PM: Optimal value: 3.893e-01
(CVXPY) Sep 20 03:14:54 PM: Compilation took 1.116e-02 seconds
(CVXPY) Sep 20 03:14:54 PM: Solver (including time spent in interface) took 5.019e-02 seconds
Iteration: 8, Objective: 0.3893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:54 PM: Your problem has 2597 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Finished problem compilation (took 1.841e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2597
  constraints   = 5097
  nnz(P)        = 0
  nnz(A)        = 35731
  cones (total) = 1
    : Nonnegative = 1,  numel = 5097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8282e-01  +5.3556e+02  5.35e+02  4.19e-01  5.13e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3341e-01  +6.2103e+01  6.16e+01  1.56e-01  2.43e+01  1.50e-02  2.61e-01  9.17e-01  
  3  +5.0849e-01  +1.5786e+01  1.53e+01  1.03e-01  1.58e+01  3.98e-05  2.44e-01  2.66e-01  
  4  +5.0068e-01  +1.5843e+00  1.08e+00  1.06e-02  1.70e+00  8.44e-06  1.26e-01  7.72e-01  
  5  +5.0025e-01  +1.0764e+00  5.76e-01  5.51e-03  8.90e-01  9.72e-06  5.44e-02  6.68e-01  
  6  +4.9850e-01  +1.2065e+00  7.08e-01  1.81e-03  3.00e-01  8.98e-05  5.06e-03  9.90e-01  
  7  +4.9128e-01  +1.0771e+00  5.86e-01  4.39e-04  7.32e-02  2.79e-04  1.17e-03  7.81e-01  
  8  +4.8504e-01  +9.6234e-01  4.77e-01  2.71e-04  4.51e-02  2.30e-04  7.26e-04  5.37e-01  
  9  +4.7845e-01  +8.4596e-01  3.68e-01  1.94e-04  3.22e-02  8.42e-05  5.30e-04  6.43e-01  
 10  +4.5733e-01  +7.1055e-01  2.53e-01  1.11e-04  1.83e-02  5.20e-05  3.18e-04  5.20e-01  
 11  +4.4013e-01  +6.0821e-01  1.68e-01  7.52e-05  1.23e-02  8.92e-06  2.32e-04  9.90e-01  
 12  +4.2234e-01  +5.3174e-01  1.09e-01  4.49e-05  7.33e-03  7.42e-06  1.45e-04  5.57e-01  
 13  +4.1086e-01  +4.8421e-01  7.33e-02  2.88e-05  4.71e-03  5.11e-06  9.69e-05  3.75e-01  
 14  +4.0659e-01  +4.6673e-01  6.01e-02  2.32e-05  3.79e-03  4.53e-06  7.91e-05  2.72e-01  
 15  +3.9811e-01  +4.3242e-01  3.43e-02  1.29e-05  2.10e-03  3.00e-06  4.52e-05  5.76e-01  
 16  +3.9534e-01  +4.2153e-01  2.62e-02  9.73e-06  1.58e-03  2.41e-06  3.45e-05  3.20e-01  
 17  +3.8983e-01  +3.9956e-01  9.73e-03  3.57e-06  5.81e-04  1.22e-06  1.30e-05  9.90e-01  
 18  +3.8615e-01  +3.8653e-01  3.75e-04  1.37e-07  2.24e-05  4.51e-08  5.11e-07  9.90e-01  
 19  +3.8600e-01  +3.8601e-01  3.79e-06  1.39e-09  2.26e-07  4.56e-10  5.17e-09  9.90e-01  
 20  +3.8600e-01  +3.8600e-01  3.79e-08  1.39e-11  2.26e-09  4.56e-12  5.17e-11  9.90e-01  
 21  +3.8600e-01  +3.8600e-01  3.79e-10  1.39e-13  2.26e-11  4.56e-14  5.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.0466ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:54 PM: Optimal value: 3.860e-01
(CVXPY) Sep 20 03:14:54 PM: Compilation took 1.841e-02 seconds
(CVXPY) Sep 20 03:14:54 PM: Solver (including time spent in interface) took 5.262e-02 seconds
Iteration: 9, Objective: 0.3860
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:54 PM: Your problem has 2606 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Finished problem compilation (took 1.448e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2606
  constraints   = 5106
  nnz(P)        = 0
  nnz(A)        = 36047
  cones (total) = 1
    : Nonnegative = 1,  numel = 5106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8264e-01  +5.3569e+02  5.35e+02  4.19e-01  5.12e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3328e-01  +6.1986e+01  6.15e+01  1.56e-01  2.42e+01  1.50e-02  2.61e-01  9.18e-01  
  3  +5.0847e-01  +1.5761e+01  1.53e+01  1.03e-01  1.58e+01  4.00e-05  2.44e-01  2.69e-01  
  4  +5.0069e-01  +1.6040e+00  1.10e+00  1.08e-02  1.73e+00  8.52e-06  1.26e-01  7.67e-01  
  5  +5.0024e-01  +1.0802e+00  5.80e-01  5.55e-03  8.95e-01  9.83e-06  5.33e-02  6.64e-01  
  6  +4.9850e-01  +1.2793e+00  7.81e-01  1.98e-03  3.29e-01  9.05e-05  5.52e-03  9.86e-01  
  7  +4.9118e-01  +1.1272e+00  6.36e-01  4.80e-04  7.99e-02  2.73e-04  1.28e-03  7.81e-01  
  8  +4.8635e-01  +1.0088e+00  5.22e-01  3.17e-04  5.28e-02  2.17e-04  8.48e-04  4.90e-01  
  9  +4.7870e-01  +8.9728e-01  4.19e-01  2.23e-04  3.70e-02  1.41e-04  6.07e-04  4.73e-01  
 10  +4.5795e-01  +7.0158e-01  2.44e-01  1.14e-04  1.87e-02  1.11e-05  3.28e-04  9.22e-01  
 11  +4.5361e-01  +6.7879e-01  2.25e-01  1.07e-04  1.76e-02  1.31e-05  3.16e-04  2.61e-01  
 12  +4.3655e-01  +6.0073e-01  1.64e-01  7.16e-05  1.17e-02  9.76e-06  2.21e-04  3.46e-01  
 13  +4.3348e-01  +5.8739e-01  1.54e-01  6.58e-05  1.08e-02  1.17e-05  2.05e-04  3.60e-01  
 14  +4.2010e-01  +5.2916e-01  1.09e-01  4.47e-05  7.29e-03  8.70e-06  1.45e-04  4.11e-01  
 15  +4.1246e-01  +4.9632e-01  8.39e-02  3.32e-05  5.41e-03  7.83e-06  1.10e-04  4.98e-01  
 16  +4.0424e-01  +4.6215e-01  5.79e-02  2.24e-05  3.65e-03  5.72e-06  7.68e-05  4.49e-01  
 17  +3.9687e-01  +4.3230e-01  3.54e-02  1.35e-05  2.20e-03  3.52e-06  4.78e-05  4.15e-01  
 18  +3.9330e-01  +4.1797e-01  2.47e-02  9.30e-06  1.51e-03  2.51e-06  3.34e-05  3.56e-01  
 19  +3.9061e-01  +4.0567e-01  1.51e-02  5.62e-06  9.14e-04  1.86e-06  2.03e-05  9.90e-01  
 20  +3.8608e-01  +3.8942e-01  3.34e-03  1.24e-06  2.02e-04  4.08e-07  4.63e-06  8.09e-01  
 21  +3.8483e-01  +3.8489e-01  6.78e-05  2.53e-08  4.11e-06  8.17e-09  9.50e-08  9.80e-01  
 22  +3.8480e-01  +3.8480e-01  6.78e-07  2.53e-10  4.11e-08  8.17e-11  9.51e-10  9.90e-01  
 23  +3.8480e-01  +3.8480e-01  6.78e-09  2.53e-12  4.11e-10  8.17e-13  9.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 58.9577ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:54 PM: Optimal value: 3.848e-01
(CVXPY) Sep 20 03:14:54 PM: Compilation took 1.448e-02 seconds
(CVXPY) Sep 20 03:14:54 PM: Solver (including time spent in interface) took 6.305e-02 seconds
Iteration: 10, Objective: 0.3848
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:54 PM: Your problem has 2611 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Finished problem compilation (took 3.390e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2611
  constraints   = 5111
  nnz(P)        = 0
  nnz(A)        = 36214
  cones (total) = 1
    : Nonnegative = 1,  numel = 5111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8256e-01  +5.3576e+02  5.35e+02  4.19e-01  5.12e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3323e-01  +6.1941e+01  6.14e+01  1.56e-01  2.41e+01  1.51e-02  2.61e-01  9.19e-01  
  3  +5.0846e-01  +1.5754e+01  1.52e+01  1.03e-01  1.57e+01  4.00e-05  2.44e-01  2.70e-01  
  4  +5.0071e-01  +1.6278e+00  1.13e+00  1.10e-02  1.76e+00  8.58e-06  1.27e-01  7.58e-01  
  5  +5.0024e-01  +1.0771e+00  5.77e-01  5.52e-03  8.90e-01  9.74e-06  5.33e-02  6.61e-01  
  6  +4.9825e-01  +1.3313e+00  8.33e-01  1.93e-03  3.20e-01  1.00e-04  5.33e-03  9.90e-01  
  7  +4.9077e-01  +1.1581e+00  6.67e-01  5.00e-04  8.33e-02  2.70e-04  1.33e-03  7.66e-01  
  8  +4.8572e-01  +1.0723e+00  5.87e-01  3.33e-04  5.54e-02  2.72e-04  8.88e-04  4.26e-01  
  9  +4.7670e-01  +9.1980e-01  4.43e-01  2.29e-04  3.80e-02  1.51e-04  6.25e-04  4.80e-01  
 10  +4.5526e-01  +7.2906e-01  2.74e-01  1.24e-04  2.03e-02  5.41e-05  3.58e-04  6.56e-01  
 11  +4.4490e-01  +6.5236e-01  2.07e-01  9.60e-05  1.57e-02  1.93e-05  2.91e-04  7.77e-01  
 12  +4.2696e-01  +5.6741e-01  1.40e-01  6.02e-05  9.84e-03  1.26e-05  1.92e-04  3.93e-01  
 13  +4.0814e-01  +4.8198e-01  7.38e-02  2.96e-05  4.83e-03  6.80e-06  1.01e-04  6.43e-01  
 14  +4.0487e-01  +4.6800e-01  6.31e-02  2.49e-05  4.06e-03  6.03e-06  8.54e-05  2.44e-01  
 15  +3.9871e-01  +4.4073e-01  4.20e-02  1.60e-05  2.60e-03  4.78e-06  5.58e-05  7.42e-01  
 16  +3.9417e-01  +4.2259e-01  2.84e-02  1.07e-05  1.74e-03  3.33e-06  3.82e-05  4.90e-01  
 17  +3.8948e-01  +4.0360e-01  1.41e-02  5.28e-06  8.59e-04  1.77e-06  1.93e-05  9.90e-01  
 18  +3.8446e-01  +3.8538e-01  9.21e-04  3.44e-07  5.59e-05  1.06e-07  1.30e-06  9.90e-01  
 19  +3.8410e-01  +3.8411e-01  1.08e-05  4.01e-09  6.52e-07  1.23e-09  1.52e-08  9.89e-01  
 20  +3.8410e-01  +3.8410e-01  1.08e-07  4.01e-11  6.52e-09  1.23e-11  1.52e-10  9.90e-01  
 21  +3.8410e-01  +3.8410e-01  1.08e-09  4.02e-13  6.54e-11  1.23e-13  1.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.3771ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:54 PM: Optimal value: 3.841e-01
(CVXPY) Sep 20 03:14:54 PM: Compilation took 3.390e-03 seconds
(CVXPY) Sep 20 03:14:54 PM: Solver (including time spent in interface) took 6.335e-02 seconds
Iteration: 11, Objective: 0.3841
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:54 PM: Your problem has 2618 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Finished problem compilation (took 2.216e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2618
  constraints   = 5118
  nnz(P)        = 0
  nnz(A)        = 36365
  cones (total) = 1
    : Nonnegative = 1,  numel = 5118

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8246e-01  +5.3576e+02  5.35e+02  4.19e-01  5.11e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3318e-01  +6.1891e+01  6.14e+01  1.56e-01  2.41e+01  1.51e-02  2.61e-01  9.20e-01  
  3  +5.0845e-01  +1.5742e+01  1.52e+01  1.02e-01  1.57e+01  4.01e-05  2.43e-01  2.71e-01  
  4  +5.0070e-01  +1.6164e+00  1.12e+00  1.09e-02  1.75e+00  8.57e-06  1.26e-01  7.64e-01  
  5  +5.0025e-01  +1.1029e+00  6.03e-01  5.76e-03  9.28e-01  1.04e-05  5.28e-02  6.79e-01  
  6  +4.9824e-01  +1.3333e+00  8.35e-01  1.91e-03  3.17e-01  1.02e-04  5.28e-03  9.90e-01  
  7  +4.9181e-01  +1.1757e+00  6.84e-01  5.69e-04  9.47e-02  2.44e-04  1.52e-03  7.31e-01  
  8  +4.8724e-01  +1.0583e+00  5.71e-01  3.56e-04  5.92e-02  2.23e-04  9.50e-04  5.14e-01  
  9  +4.7979e-01  +9.2809e-01  4.48e-01  2.40e-04  3.98e-02  1.39e-04  6.51e-04  5.29e-01  
 10  +4.6161e-01  +7.3244e-01  2.71e-01  1.33e-04  2.19e-02  8.77e-06  3.82e-04  9.23e-01  
 11  +4.5240e-01  +6.8368e-01  2.31e-01  1.13e-04  1.86e-02  1.58e-05  3.36e-04  5.67e-01  
 12  +4.2611e-01  +5.5982e-01  1.34e-01  5.70e-05  9.31e-03  8.98e-06  1.82e-04  5.11e-01  
 13  +4.1592e-01  +5.1621e-01  1.00e-01  4.08e-05  6.65e-03  8.71e-06  1.34e-04  5.70e-01  
 14  +4.0813e-01  +4.8378e-01  7.56e-02  2.99e-05  4.87e-03  6.89e-06  1.01e-04  3.55e-01  
 15  +3.9604e-01  +4.3354e-01  3.75e-02  1.42e-05  2.30e-03  4.40e-06  4.98e-05  9.21e-01  
 16  +3.9131e-01  +4.1475e-01  2.34e-02  8.83e-06  1.44e-03  2.82e-06  3.18e-05  6.39e-01  
 17  +3.8497e-01  +3.9088e-01  5.91e-03  2.20e-06  3.58e-04  7.08e-07  8.22e-06  8.09e-01  
 18  +3.8286e-01  +3.8303e-01  1.66e-04  6.20e-08  1.01e-05  1.96e-08  2.34e-07  9.73e-01  
 19  +3.8280e-01  +3.8280e-01  1.66e-06  6.20e-10  1.01e-07  1.96e-10  2.34e-09  9.90e-01  
 20  +3.8280e-01  +3.8280e-01  1.66e-08  6.20e-12  1.01e-09  1.96e-12  2.34e-11  9.90e-01  
 21  +3.8280e-01  +3.8280e-01  1.67e-10  6.21e-14  1.01e-11  1.96e-14  2.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.0444ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:54 PM: Optimal value: 3.828e-01
(CVXPY) Sep 20 03:14:54 PM: Compilation took 2.216e-02 seconds
(CVXPY) Sep 20 03:14:54 PM: Solver (including time spent in interface) took 4.568e-02 seconds
Iteration: 12, Objective: 0.3828
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:54 PM: Your problem has 2628 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:54 PM: Finished problem compilation (took 1.011e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2628
  constraints   = 5128
  nnz(P)        = 0
  nnz(A)        = 36681
  cones (total) = 1
    : Nonnegative = 1,  numel = 5128

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8223e-01  +5.3588e+02  5.35e+02  4.20e-01  5.10e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3301e-01  +6.1740e+01  6.12e+01  1.55e-01  2.40e+01  1.51e-02  2.60e-01  9.22e-01  
  3  +5.0842e-01  +1.5708e+01  1.52e+01  1.02e-01  1.57e+01  4.02e-05  2.42e-01  2.75e-01  
  4  +5.0070e-01  +1.6250e+00  1.12e+00  1.10e-02  1.76e+00  8.64e-06  1.25e-01  7.64e-01  
  5  +5.0026e-01  +1.1503e+00  6.50e-01  6.18e-03  9.96e-01  1.15e-05  5.16e-02  6.99e-01  
  6  +4.9794e-01  +1.3584e+00  8.61e-01  1.78e-03  2.97e-01  1.14e-04  4.89e-03  9.90e-01  
  7  +4.9115e-01  +1.1787e+00  6.88e-01  5.61e-04  9.35e-02  2.44e-04  1.50e-03  7.20e-01  
  8  +4.8600e-01  +1.0269e+00  5.41e-01  3.52e-04  5.85e-02  1.78e-04  9.42e-04  5.56e-01  
  9  +4.8548e-01  +1.0059e+00  5.20e-01  3.30e-04  5.48e-02  1.57e-04  8.83e-04  1.60e-01  
 10  +4.8052e-01  +8.6144e-01  3.81e-01  2.25e-04  3.72e-02  2.26e-05  6.12e-04  9.18e-01  
 11  +4.6500e-01  +7.5884e-01  2.94e-01  1.49e-04  2.46e-02  2.16e-05  4.23e-04  6.09e-01  
 12  +4.5692e-01  +7.1725e-01  2.60e-01  1.31e-04  2.16e-02  1.98e-05  3.84e-04  3.57e-01  
 13  +4.2663e-01  +5.6642e-01  1.40e-01  6.04e-05  9.86e-03  1.00e-05  1.92e-04  5.51e-01  
 14  +4.2521e-01  +5.6056e-01  1.35e-01  5.83e-05  9.51e-03  9.99e-06  1.86e-04  8.89e-02  
 15  +4.2294e-01  +5.5250e-01  1.30e-01  5.41e-05  8.83e-03  1.18e-05  1.73e-04  4.30e-01  
 16  +4.0726e-01  +4.8536e-01  7.81e-02  3.14e-05  5.11e-03  6.98e-06  1.06e-04  4.43e-01  
 17  +4.0351e-01  +4.6991e-01  6.64e-02  2.63e-05  4.28e-03  6.09e-06  9.02e-05  2.15e-01  
 18  +3.9578e-01  +4.3739e-01  4.16e-02  1.59e-05  2.59e-03  4.54e-06  5.62e-05  7.17e-01  
 19  +3.8577e-01  +3.9760e-01  1.18e-02  4.48e-06  7.27e-04  1.43e-06  1.66e-05  9.90e-01  
 20  +3.8165e-01  +3.8232e-01  6.73e-04  2.54e-07  4.12e-05  7.81e-08  9.68e-07  9.57e-01  
 21  +3.8140e-01  +3.8141e-01  6.79e-06  2.56e-09  4.15e-07  7.88e-10  9.78e-09  9.90e-01  
 22  +3.8140e-01  +3.8140e-01  6.79e-08  2.56e-11  4.15e-09  7.88e-12  9.78e-11  9.90e-01  
 23  +3.8140e-01  +3.8140e-01  6.80e-10  2.56e-13  4.16e-11  7.90e-14  9.80e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:55 PM: Optimal value: 3.814e-01
(CVXPY) Sep 20 03:14:55 PM: Compilation took 1.011e-02 seconds
(CVXPY) Sep 20 03:14:55 PM: Solver (including time spent in interface) took 4.998e-02 seconds
Iteration: 13, Objective: 0.3814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:55 PM: Your problem has 2638 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Finished problem compilation (took 1.000e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2638
  constraints   = 5138
  nnz(P)        = 0
  nnz(A)        = 36903
  cones (total) = 1
    : Nonnegative = 1,  numel = 5138

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8216e-01  +5.3587e+02  5.35e+02  4.20e-01  5.09e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3290e-01  +6.1604e+01  6.11e+01  1.55e-01  2.39e+01  1.51e-02  2.60e-01  9.23e-01  
  3  +5.0840e-01  +1.5683e+01  1.52e+01  1.02e-01  1.56e+01  4.03e-05  2.42e-01  2.77e-01  
  4  +5.0070e-01  +1.6090e+00  1.11e+00  1.09e-02  1.73e+00  8.62e-06  1.23e-01  7.71e-01  
  5  +5.0026e-01  +1.1701e+00  6.70e-01  6.35e-03  1.02e+00  1.22e-05  4.97e-02  7.13e-01  
  6  +4.9743e-01  +1.3476e+00  8.50e-01  1.50e-03  2.50e-01  1.36e-04  4.08e-03  9.90e-01  
  7  +4.9150e-01  +1.1686e+00  6.77e-01  5.83e-04  9.69e-02  2.22e-04  1.56e-03  6.66e-01  
  8  +4.8753e-01  +1.0278e+00  5.40e-01  3.67e-04  6.10e-02  1.55e-04  9.81e-04  6.02e-01  
  9  +4.8647e-01  +1.0093e+00  5.23e-01  3.40e-04  5.65e-02  1.45e-04  9.10e-04  1.46e-01  
 10  +4.8568e-01  +9.0677e-01  4.21e-01  2.84e-04  4.71e-02  2.86e-05  7.67e-04  8.03e-01  
 11  +4.7646e-01  +8.2902e-01  3.53e-01  2.07e-04  3.42e-02  2.68e-05  5.72e-04  5.55e-01  
 12  +4.6255e-01  +7.5416e-01  2.92e-01  1.46e-04  2.40e-02  2.39e-05  4.16e-04  3.21e-01  
 13  +4.4336e-01  +6.5459e-01  2.11e-01  1.02e-04  1.67e-02  1.74e-05  3.12e-04  9.09e-01  
 14  +4.2752e-01  +5.8087e-01  1.53e-01  6.87e-05  1.12e-02  1.24e-05  2.20e-04  3.47e-01  
 15  +4.1186e-01  +5.1026e-01  9.84e-02  4.11e-05  6.69e-03  9.07e-06  1.38e-04  6.98e-01  
 16  +4.0333e-01  +4.7369e-01  7.04e-02  2.86e-05  4.64e-03  6.52e-06  9.88e-05  3.27e-01  
 17  +3.9362e-01  +4.3176e-01  3.81e-02  1.48e-05  2.40e-03  4.33e-06  5.26e-05  9.03e-01  
 18  +3.8664e-01  +4.0343e-01  1.68e-02  6.41e-06  1.04e-03  2.04e-06  2.36e-05  9.90e-01  
 19  +3.8306e-01  +3.8988e-01  6.82e-03  2.59e-06  4.20e-04  8.10e-07  9.77e-06  8.17e-01  
 20  +3.8077e-01  +3.8151e-01  7.32e-04  2.78e-07  4.50e-05  8.64e-08  1.06e-06  8.97e-01  
 21  +3.8050e-01  +3.8051e-01  7.47e-06  2.83e-09  4.59e-07  8.81e-10  1.09e-08  9.90e-01  
 22  +3.8050e-01  +3.8050e-01  7.47e-08  2.83e-11  4.59e-09  8.81e-12  1.09e-10  9.90e-01  
 23  +3.8050e-01  +3.8050e-01  7.51e-10  2.85e-13  4.62e-11  8.87e-14  1.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.8096ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:55 PM: Optimal value: 3.805e-01
(CVXPY) Sep 20 03:14:55 PM: Compilation took 1.000e-02 seconds
(CVXPY) Sep 20 03:14:55 PM: Solver (including time spent in interface) took 5.036e-02 seconds
Iteration: 14, Objective: 0.3805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:55 PM: Your problem has 2646 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Finished problem compilation (took 1.362e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2646
  constraints   = 5146
  nnz(P)        = 0
  nnz(A)        = 37248
  cones (total) = 1
    : Nonnegative = 1,  numel = 5146

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5015e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8204e-01  +5.3586e+02  5.35e+02  4.20e-01  5.09e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3281e-01  +6.1506e+01  6.10e+01  1.55e-01  2.38e+01  1.51e-02  2.59e-01  9.24e-01  
  3  +5.0838e-01  +1.5657e+01  1.51e+01  1.02e-01  1.56e+01  4.04e-05  2.41e-01  2.79e-01  
  4  +5.0067e-01  +1.5611e+00  1.06e+00  1.04e-02  1.66e+00  8.54e-06  1.19e-01  7.91e-01  
  5  +5.0026e-01  +1.2173e+00  7.17e-01  6.67e-03  1.07e+00  1.46e-05  4.44e-02  7.71e-01  
  6  +4.9661e-01  +1.2441e+00  7.47e-01  1.08e-03  1.80e-01  1.73e-04  2.90e-03  9.79e-01  
  7  +4.9402e-01  +1.1607e+00  6.67e-01  6.95e-04  1.16e-01  1.91e-04  1.86e-03  4.51e-01  
  8  +4.9054e-01  +9.4873e-01  4.58e-01  3.42e-04  5.69e-02  7.63e-05  9.08e-04  9.58e-01  
  9  +4.8589e-01  +9.1354e-01  4.28e-01  2.64e-04  4.38e-02  7.01e-05  7.04e-04  4.38e-01  
 10  +4.7156e-01  +8.1357e-01  3.42e-01  1.78e-04  2.94e-02  4.01e-05  4.92e-04  7.36e-01  
 11  +4.5950e-01  +7.4900e-01  2.89e-01  1.38e-04  2.28e-02  3.35e-05  3.96e-04  2.33e-01  
 12  +4.3755e-01  +6.3518e-01  1.98e-01  9.48e-05  1.55e-02  1.42e-05  2.95e-04  9.70e-01  
 13  +4.2500e-01  +5.7712e-01  1.52e-01  6.87e-05  1.12e-02  1.10e-05  2.22e-04  3.12e-01  
 14  +4.0996e-01  +5.0886e-01  9.89e-02  4.18e-05  6.80e-03  7.94e-06  1.42e-04  5.50e-01  
 15  +4.0376e-01  +4.8142e-01  7.77e-02  3.20e-05  5.19e-03  6.79e-06  1.10e-04  3.89e-01  
 16  +3.9145e-01  +4.2855e-01  3.71e-02  1.47e-05  2.38e-03  3.59e-06  5.31e-05  6.96e-01  
 17  +3.8735e-01  +4.1188e-01  2.45e-02  9.55e-06  1.55e-03  2.47e-06  3.52e-05  4.80e-01  
 18  +3.8358e-01  +3.9679e-01  1.32e-02  5.09e-06  8.25e-04  1.37e-06  1.91e-05  5.55e-01  
 19  +3.7981e-01  +3.8191e-01  2.10e-03  8.06e-07  1.31e-04  2.37e-07  3.10e-06  9.90e-01  
 20  +3.7901e-01  +3.7903e-01  2.53e-05  9.67e-09  1.57e-06  2.82e-09  3.74e-08  9.88e-01  
 21  +3.7900e-01  +3.7900e-01  2.53e-07  9.67e-11  1.57e-08  2.82e-11  3.74e-10  9.90e-01  
 22  +3.7900e-01  +3.7900e-01  2.54e-09  9.74e-13  1.58e-10  2.84e-13  3.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 55.5168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:55 PM: Optimal value: 3.790e-01
(CVXPY) Sep 20 03:14:55 PM: Compilation took 1.362e-02 seconds
(CVXPY) Sep 20 03:14:55 PM: Solver (including time spent in interface) took 5.762e-02 seconds
Iteration: 15, Objective: 0.3790
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:55 PM: Your problem has 2647 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Finished problem compilation (took 1.517e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2647
  constraints   = 5147
  nnz(P)        = 0
  nnz(A)        = 37299
  cones (total) = 1
    : Nonnegative = 1,  numel = 5147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5015e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8204e-01  +5.3585e+02  5.35e+02  4.20e-01  5.09e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3281e-01  +6.1505e+01  6.10e+01  1.55e-01  2.38e+01  1.51e-02  2.59e-01  9.24e-01  
  3  +5.0838e-01  +1.5656e+01  1.51e+01  1.02e-01  1.55e+01  4.04e-05  2.41e-01  2.79e-01  
  4  +5.0067e-01  +1.5592e+00  1.06e+00  1.04e-02  1.66e+00  8.54e-06  1.19e-01  7.92e-01  
  5  +5.0026e-01  +1.2160e+00  7.16e-01  6.64e-03  1.07e+00  1.49e-05  4.36e-02  7.80e-01  
  6  +4.9660e-01  +1.2636e+00  7.67e-01  1.10e-03  1.82e-01  1.74e-04  2.94e-03  9.84e-01  
  7  +4.9387e-01  +1.1748e+00  6.81e-01  7.00e-04  1.16e-01  1.93e-04  1.87e-03  4.50e-01  
  8  +4.9013e-01  +9.5951e-01  4.69e-01  3.47e-04  5.77e-02  8.50e-05  9.21e-04  9.20e-01  
  9  +4.8558e-01  +9.1993e-01  4.34e-01  2.68e-04  4.45e-02  7.38e-05  7.16e-04  4.60e-01  
 10  +4.7110e-01  +8.1373e-01  3.43e-01  1.78e-04  2.94e-02  4.11e-05  4.92e-04  7.38e-01  
 11  +4.5874e-01  +7.4708e-01  2.88e-01  1.37e-04  2.26e-02  3.40e-05  3.94e-04  2.39e-01  
 12  +4.3880e-01  +6.4226e-01  2.03e-01  9.77e-05  1.60e-02  1.54e-05  3.03e-04  9.10e-01  
 13  +4.2528e-01  +5.7912e-01  1.54e-01  6.93e-05  1.13e-02  1.16e-05  2.24e-04  3.21e-01  
 14  +4.1022e-01  +5.1034e-01  1.00e-01  4.23e-05  6.88e-03  8.39e-06  1.43e-04  5.78e-01  
 15  +4.0379e-01  +4.8180e-01  7.80e-02  3.21e-05  5.21e-03  7.07e-06  1.11e-04  4.02e-01  
 16  +3.9118e-01  +4.2750e-01  3.63e-02  1.44e-05  2.33e-03  3.60e-06  5.20e-05  7.09e-01  
 17  +3.8711e-01  +4.1089e-01  2.38e-02  9.27e-06  1.50e-03  2.44e-06  3.42e-05  4.96e-01  
 18  +3.8327e-01  +3.9568e-01  1.24e-02  4.78e-06  7.75e-04  1.29e-06  1.80e-05  5.24e-01  
 19  +3.7967e-01  +3.8142e-01  1.74e-03  6.68e-07  1.08e-04  1.95e-07  2.57e-06  9.90e-01  
 20  +3.7901e-01  +3.7903e-01  1.97e-05  7.54e-09  1.22e-06  2.19e-09  2.91e-08  9.89e-01  
 21  +3.7900e-01  +3.7900e-01  1.97e-07  7.54e-11  1.22e-08  2.19e-11  2.92e-10  9.90e-01  
 22  +3.7900e-01  +3.7900e-01  1.98e-09  7.60e-13  1.23e-10  2.21e-13  2.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.2348ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:55 PM: Optimal value: 3.790e-01
(CVXPY) Sep 20 03:14:55 PM: Compilation took 1.517e-02 seconds
(CVXPY) Sep 20 03:14:55 PM: Solver (including time spent in interface) took 5.798e-02 seconds
Iteration: 16, Objective: 0.3790
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:55 PM: Your problem has 2649 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Finished problem compilation (took 1.618e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2649
  constraints   = 5149
  nnz(P)        = 0
  nnz(A)        = 37350
  cones (total) = 1
    : Nonnegative = 1,  numel = 5149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8197e-01  +5.3588e+02  5.35e+02  4.20e-01  5.09e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3275e-01  +6.1450e+01  6.09e+01  1.55e-01  2.37e+01  1.51e-02  2.59e-01  9.24e-01  
  3  +5.0837e-01  +1.5645e+01  1.51e+01  1.02e-01  1.55e+01  4.04e-05  2.41e-01  2.80e-01  
  4  +5.0068e-01  +1.5918e+00  1.09e+00  1.07e-02  1.71e+00  8.63e-06  1.20e-01  7.80e-01  
  5  +5.0026e-01  +1.2247e+00  7.24e-01  6.75e-03  1.09e+00  1.45e-05  4.53e-02  7.63e-01  
  6  +4.9651e-01  +1.2827e+00  7.86e-01  1.13e-03  1.89e-01  1.73e-04  3.05e-03  9.81e-01  
  7  +4.9361e-01  +1.1885e+00  6.95e-01  7.20e-04  1.20e-01  1.91e-04  1.93e-03  4.50e-01  
  8  +4.8938e-01  +9.7094e-01  4.82e-01  3.50e-04  5.83e-02  9.38e-05  9.31e-04  9.03e-01  
  9  +4.8413e-01  +9.2247e-01  4.38e-01  2.64e-04  4.39e-02  7.85e-05  7.08e-04  4.84e-01  
 10  +4.7396e-01  +8.5414e-01  3.80e-01  1.96e-04  3.25e-02  6.36e-05  5.39e-04  4.25e-01  
 11  +4.5702e-01  +7.4978e-01  2.93e-01  1.42e-04  2.34e-02  3.73e-05  4.11e-04  4.71e-01  
 12  +4.2130e-01  +5.5843e-01  1.37e-01  5.99e-05  9.77e-03  1.10e-05  1.94e-04  7.28e-01  
 13  +4.1738e-01  +5.4225e-01  1.25e-01  5.34e-05  8.69e-03  1.08e-05  1.75e-04  2.65e-01  
 14  +4.0667e-01  +4.9545e-01  8.88e-02  3.70e-05  6.02e-03  7.63e-06  1.26e-04  3.19e-01  
 15  +3.9949e-01  +4.6471e-01  6.52e-02  2.66e-05  4.32e-03  5.87e-06  9.31e-05  3.70e-01  
 16  +3.9037e-01  +4.2647e-01  3.61e-02  1.43e-05  2.32e-03  3.33e-06  5.22e-05  4.98e-01  
 17  +3.8381e-01  +3.9933e-01  1.55e-02  6.04e-06  9.78e-04  1.60e-06  2.27e-05  7.89e-01  
 18  +3.8074e-01  +3.8701e-01  6.27e-03  2.42e-06  3.92e-04  6.96e-07  9.25e-06  9.21e-01  
 19  +3.7858e-01  +3.7905e-01  4.71e-04  1.81e-07  2.93e-05  5.19e-08  7.03e-07  9.33e-01  
 20  +3.7840e-01  +3.7841e-01  4.75e-06  1.83e-09  2.96e-07  5.23e-10  7.10e-09  9.90e-01  
 21  +3.7840e-01  +3.7840e-01  4.75e-08  1.83e-11  2.96e-09  5.23e-12  7.10e-11  9.90e-01  
 22  +3.7840e-01  +3.7840e-01  4.78e-10  1.84e-13  2.98e-11  5.27e-14  7.16e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.2236ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:55 PM: Optimal value: 3.784e-01
(CVXPY) Sep 20 03:14:55 PM: Compilation took 1.618e-02 seconds
(CVXPY) Sep 20 03:14:55 PM: Solver (including time spent in interface) took 5.818e-02 seconds
Iteration: 17, Objective: 0.3784
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:55 PM: Your problem has 2651 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:55 PM: Finished problem compilation (took 1.434e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2651
  constraints   = 5151
  nnz(P)        = 0
  nnz(A)        = 37397
  cones (total) = 1
    : Nonnegative = 1,  numel = 5151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8184e-01  +5.3600e+02  5.35e+02  4.20e-01  5.09e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3271e-01  +6.1430e+01  6.09e+01  1.55e-01  2.37e+01  1.52e-02  2.59e-01  9.25e-01  
  3  +5.0836e-01  +1.5643e+01  1.51e+01  1.02e-01  1.55e+01  4.05e-05  2.41e-01  2.81e-01  
  4  +5.0068e-01  +1.5871e+00  1.09e+00  1.07e-02  1.70e+00  8.64e-06  1.20e-01  7.83e-01  
  5  +5.0027e-01  +1.2711e+00  7.71e-01  7.11e-03  1.15e+00  1.57e-05  4.47e-02  7.82e-01  
  6  +4.9725e-01  +1.3161e+00  8.19e-01  1.37e-03  2.28e-01  1.44e-04  3.70e-03  9.90e-01  
  7  +4.9187e-01  +1.1486e+00  6.57e-01  5.88e-04  9.78e-02  2.05e-04  1.57e-03  6.54e-01  
  8  +4.8760e-01  +1.0090e+00  5.21e-01  3.72e-04  6.19e-02  1.25e-04  9.95e-04  6.65e-01  
  9  +4.8031e-01  +8.9852e-01  4.18e-01  2.46e-04  4.07e-02  6.18e-05  6.67e-04  7.57e-01  
 10  +4.7958e-01  +8.9246e-01  4.13e-01  2.43e-04  4.03e-02  5.93e-05  6.62e-04  4.51e-02  
 11  +4.6279e-01  +7.8116e-01  3.18e-01  1.64e-04  2.70e-02  3.69e-05  4.67e-04  5.79e-01  
 12  +4.3380e-01  +6.2765e-01  1.94e-01  8.80e-05  1.44e-02  1.57e-05  2.74e-04  8.40e-01  
 13  +4.2053e-01  +5.6428e-01  1.44e-01  6.29e-05  1.02e-02  1.14e-05  2.05e-04  2.96e-01  
 14  +4.0985e-01  +5.1465e-01  1.05e-01  4.42e-05  7.19e-03  9.08e-06  1.49e-04  4.59e-01  
 15  +4.0455e-01  +4.9057e-01  8.60e-02  3.56e-05  5.78e-03  7.90e-06  1.23e-04  3.31e-01  
 16  +3.9292e-01  +4.3842e-01  4.55e-02  1.82e-05  2.95e-03  4.85e-06  6.57e-05  7.90e-01  
 17  +3.8818e-01  +4.1874e-01  3.06e-02  1.21e-05  1.95e-03  3.30e-06  4.45e-05  4.06e-01  
 18  +3.8336e-01  +3.9889e-01  1.55e-02  6.06e-06  9.82e-04  1.70e-06  2.30e-05  5.92e-01  
 19  +3.7971e-01  +3.8401e-01  4.30e-03  1.67e-06  2.70e-04  4.81e-07  6.46e-06  9.79e-01  
 20  +3.7814e-01  +3.7824e-01  1.04e-04  4.04e-08  6.54e-06  1.15e-08  1.59e-07  9.79e-01  
 21  +3.7810e-01  +3.7810e-01  1.04e-06  4.04e-10  6.54e-08  1.15e-10  1.59e-09  9.90e-01  
 22  +3.7810e-01  +3.7810e-01  1.05e-08  4.05e-12  6.55e-10  1.15e-12  1.59e-11  9.90e-01  
 23  +3.7810e-01  +3.7810e-01  1.05e-10  4.08e-14  6.61e-12  1.16e-14  1.61e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.7465ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:55 PM: Optimal value: 3.781e-01
(CVXPY) Sep 20 03:14:55 PM: Compilation took 1.434e-02 seconds
(CVXPY) Sep 20 03:14:55 PM: Solver (including time spent in interface) took 5.703e-02 seconds
FULL MODEL:
  Accruacy: 0.606
  Our objective: 0.21199999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.1652)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0016)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.0084)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.459170579910278
Best over terms:
  Our final objective: 0.16519999999999996
    Its accruacy: 0.5826
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16519999999999996
  Highest accruacy: 0.5826
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

