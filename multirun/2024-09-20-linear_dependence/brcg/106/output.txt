Command:
python test_script.py -s linear_dependence -d 3 -n 5000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.312
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.31199999999999994
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:00 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:00 PM: Finished problem compilation (took 7.163e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5009e+03  2.50e+03  9.77e-01  5.55e+01  1.00e+00  1.00e+00   ------   
  1  +6.2003e-01  +4.6378e+02  4.63e+02  3.04e-01  2.88e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5554e-01  +7.9373e+01  7.88e+01  1.33e-01  1.50e+01  6.69e-03  2.20e-01  6.65e-01  
  3  +5.0753e-01  +1.1952e+01  1.14e+01  8.13e-02  8.78e+00  9.83e-06  2.17e-01  7.60e-02  
  4  +4.9996e-01  +1.1334e+00  6.33e-01  5.99e-03  6.64e-01  6.08e-06  1.42e-01  7.24e-01  
  5  +4.9913e-01  +8.6490e-01  3.66e-01  3.21e-03  3.58e-01  1.29e-05  2.41e-02  8.83e-01  
  6  +4.6463e-01  +7.6418e-01  3.00e-01  2.10e-04  2.39e-02  3.77e-04  6.20e-04  9.77e-01  
  7  +4.3476e-01  +5.7381e-01  1.39e-01  7.46e-05  8.39e-03  1.61e-04  2.44e-04  6.39e-01  
  8  +4.0696e-01  +4.2608e-01  1.91e-02  9.65e-06  1.08e-03  1.45e-06  3.72e-05  8.98e-01  
  9  +4.0217e-01  +4.0423e-01  2.07e-03  1.01e-06  1.13e-04  1.52e-07  4.15e-06  8.94e-01  
 10  +4.0152e-01  +4.0157e-01  5.47e-05  2.43e-08  2.72e-06  4.22e-09  1.11e-07  9.90e-01  
 11  +4.0150e-01  +4.0150e-01  5.48e-07  2.43e-10  2.72e-08  4.23e-11  1.11e-09  9.90e-01  
 12  +4.0150e-01  +4.0150e-01  5.48e-09  2.43e-12  2.72e-10  4.23e-13  1.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0742ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:00 PM: Optimal value: 4.015e-01
(CVXPY) Sep 20 03:05:00 PM: Compilation took 7.163e-03 seconds
(CVXPY) Sep 20 03:05:00 PM: Solver (including time spent in interface) took 1.486e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4015
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:00 PM: Your problem has 2512 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:00 PM: Finished problem compilation (took 8.169e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2512
  constraints   = 5012
  nnz(P)        = 0
  nnz(A)        = 18584
  cones (total) = 1
    : Nonnegative = 1,  numel = 5012

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +2.5016e+03  2.50e+03  9.77e-01  6.00e+01  1.00e+00  1.00e+00   ------   
  1  +6.1937e-01  +4.6468e+02  4.64e+02  3.05e-01  3.12e+01  4.25e-03  4.38e-01  6.93e-01  
  2  +5.5492e-01  +7.8715e+01  7.82e+01  1.32e-01  1.61e+01  6.78e-03  2.19e-01  6.72e-01  
  3  +5.0703e-01  +1.1426e+01  1.09e+01  7.88e-02  9.20e+00  9.60e-06  2.16e-01  8.66e-02  
  4  +5.0087e-01  +2.5292e+00  2.03e+00  1.90e-02  2.24e+00  6.95e-06  1.80e-01  3.16e-01  
  5  +5.0007e-01  +1.0496e+00  5.50e-01  5.14e-03  6.18e-01  3.70e-06  5.92e-02  7.82e-01  
  6  +4.9792e-01  +1.7117e+00  1.21e+00  4.36e-03  5.40e-01  3.14e-05  1.24e-02  9.47e-01  
  7  +4.8576e-01  +1.3780e+00  8.92e-01  7.57e-04  9.45e-02  1.21e-04  1.94e-03  8.43e-01  
  8  +4.7621e-01  +1.2769e+00  8.01e-01  4.73e-04  5.90e-02  1.46e-04  1.20e-03  3.94e-01  
  9  +4.7728e-01  +1.2069e+00  7.30e-01  3.51e-04  4.38e-02  1.38e-04  8.77e-04  4.84e-01  
 10  +4.7807e-01  +1.1516e+00  6.74e-01  3.25e-04  4.06e-02  1.13e-04  8.12e-04  2.37e-01  
 11  +4.6319e-01  +9.2108e-01  4.58e-01  1.98e-04  2.47e-02  5.71e-05  5.10e-04  7.27e-01  
 12  +4.0422e-01  +5.7385e-01  1.70e-01  5.94e-05  7.29e-03  1.54e-05  1.72e-04  8.77e-01  
 13  +3.5130e-01  +3.6947e-01  1.82e-02  6.68e-06  8.10e-04  1.42e-06  2.40e-05  9.79e-01  
 14  +3.4421e-01  +3.4445e-01  2.48e-04  9.04e-08  1.10e-05  1.38e-08  3.38e-07  9.86e-01  
 15  +3.4410e-01  +3.4410e-01  2.48e-06  9.04e-10  1.09e-07  1.38e-10  3.38e-09  9.90e-01  
 16  +3.4410e-01  +3.4410e-01  2.48e-08  9.04e-12  1.09e-09  1.38e-12  3.38e-11  9.90e-01  
 17  +3.4410e-01  +3.4410e-01  2.48e-10  9.04e-14  1.10e-11  1.38e-14  3.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.7383ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:00 PM: Optimal value: 3.441e-01
(CVXPY) Sep 20 03:05:00 PM: Compilation took 8.169e-03 seconds
(CVXPY) Sep 20 03:05:00 PM: Solver (including time spent in interface) took 2.173e-02 seconds
FULL MODEL:
  Accruacy: 0.656
  Our objective: 0.312

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.312)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.1097354888916016
Best over terms:
  Our final objective: 0.312
    Its accruacy: 0.656
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.312
  Highest accruacy: 0.656
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

