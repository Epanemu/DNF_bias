Command:
python test_script.py -s linear_dependence -d 4 -n 1000 --seed 21 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29200000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.30399999999999994
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:19 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:19 PM: Finished problem compilation (took 5.246e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0090e+02  5.00e+02  9.51e-01  2.66e+01  1.00e+00  1.00e+00   ------   
  1  +6.0760e-01  +9.7278e+01  9.67e+01  3.26e-01  1.47e+01  4.10e-03  4.74e-01  6.68e-01  
  2  +5.4900e-01  +1.5100e+01  1.46e+01  1.22e-01  6.65e+00  8.37e-03  2.21e-01  7.44e-01  
  3  +5.0223e-01  +2.0002e+00  1.50e+00  3.08e-02  1.60e+00  3.94e-04  2.06e-01  3.39e-01  
  4  +4.9999e-01  +8.0354e-01  3.04e-01  6.27e-03  3.38e-01  1.31e-04  4.89e-02  8.43e-01  
  5  +4.7827e-01  +1.0795e+00  6.01e-01  1.69e-03  9.36e-02  2.43e-03  4.85e-03  9.55e-01  
  6  +4.4421e-01  +6.4318e-01  1.99e-01  4.80e-04  2.63e-02  5.33e-05  1.59e-03  8.15e-01  
  7  +4.1259e-01  +4.8866e-01  7.61e-02  1.75e-04  9.53e-03  2.99e-05  7.28e-04  9.71e-01  
  8  +4.0555e-01  +4.5227e-01  4.67e-02  1.04e-04  5.66e-03  2.08e-05  4.39e-04  9.90e-01  
  9  +3.9259e-01  +3.9429e-01  1.70e-03  3.72e-06  2.02e-04  5.64e-07  1.73e-05  9.69e-01  
 10  +3.9210e-01  +3.9212e-01  1.70e-05  3.72e-08  2.02e-06  5.63e-09  1.73e-07  9.90e-01  
 11  +3.9210e-01  +3.9210e-01  1.70e-07  3.72e-10  2.02e-08  5.63e-11  1.73e-09  9.90e-01  
 12  +3.9210e-01  +3.9210e-01  1.70e-09  3.72e-12  2.02e-10  5.63e-13  1.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6095ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:19 PM: Optimal value: 3.921e-01
(CVXPY) Sep 20 03:06:19 PM: Compilation took 5.246e-03 seconds
(CVXPY) Sep 20 03:06:19 PM: Solver (including time spent in interface) took 3.174e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3921
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:19 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:19 PM: Finished problem compilation (took 4.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4504
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0127e+02  5.01e+02  9.51e-01  2.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0434e-01  +9.7774e+01  9.72e+01  3.30e-01  1.57e+01  4.09e-03  4.79e-01  6.65e-01  
  2  +5.4588e-01  +1.4426e+01  1.39e+01  1.17e-01  6.78e+00  8.77e-03  2.12e-01  7.75e-01  
  3  +5.0147e-01  +1.9873e+00  1.49e+00  3.05e-02  1.70e+00  6.89e-04  1.90e-01  4.50e-01  
  4  +4.9908e-01  +1.1183e+00  6.19e-01  1.19e-02  6.84e-01  5.14e-04  5.71e-02  7.94e-01  
  5  +4.7523e-01  +1.3479e+00  8.73e-01  3.15e-03  1.88e-01  3.65e-03  8.66e-03  9.67e-01  
  6  +4.6496e-01  +1.2246e+00  7.60e-01  2.11e-03  1.26e-01  3.56e-03  5.79e-03  3.92e-01  
  7  +4.6145e-01  +9.8056e-01  5.19e-01  1.37e-03  8.14e-02  5.84e-04  3.74e-03  8.00e-01  
  8  +4.5131e-01  +9.0334e-01  4.52e-01  9.89e-04  5.88e-02  5.02e-04  2.74e-03  4.03e-01  
  9  +4.2615e-01  +6.7704e-01  2.51e-01  5.55e-04  3.27e-02  3.12e-05  1.66e-03  9.90e-01  
 10  +4.1054e-01  +6.0643e-01  1.96e-01  4.08e-04  2.39e-02  2.59e-05  1.27e-03  2.53e-01  
 11  +3.7130e-01  +4.3154e-01  6.02e-02  1.14e-04  6.65e-03  2.48e-05  4.03e-04  8.92e-01  
 12  +3.5246e-01  +3.5542e-01  2.96e-03  5.58e-06  3.23e-04  8.03e-07  2.19e-05  9.64e-01  
 13  +3.5131e-01  +3.5134e-01  3.01e-05  5.67e-08  3.28e-06  8.21e-09  2.26e-07  9.90e-01  
 14  +3.5130e-01  +3.5130e-01  3.01e-07  5.67e-10  3.28e-08  8.21e-11  2.26e-09  9.90e-01  
 15  +3.5130e-01  +3.5130e-01  3.01e-09  5.67e-12  3.28e-10  8.21e-13  2.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6086ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:19 PM: Optimal value: 3.513e-01
(CVXPY) Sep 20 03:06:19 PM: Compilation took 4.009e-03 seconds
(CVXPY) Sep 20 03:06:19 PM: Solver (including time spent in interface) took 4.350e-03 seconds
Iteration: 2, Objective: 0.3513
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:19 PM: Your problem has 520 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:19 PM: Finished problem compilation (took 4.528e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 520
  constraints   = 1020
  nnz(P)        = 0
  nnz(A)        = 4538
  cones (total) = 1
    : Nonnegative = 1,  numel = 1020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0120e+02  5.01e+02  9.52e-01  2.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0400e-01  +9.7788e+01  9.72e+01  3.30e-01  1.57e+01  4.09e-03  4.79e-01  6.65e-01  
  2  +5.4571e-01  +1.4389e+01  1.38e+01  1.16e-01  6.75e+00  8.79e-03  2.12e-01  7.77e-01  
  3  +5.0121e-01  +1.9333e+00  1.43e+00  2.95e-02  1.64e+00  6.83e-04  1.88e-01  4.76e-01  
  4  +4.9854e-01  +1.1241e+00  6.26e-01  1.16e-02  6.70e-01  5.85e-04  5.20e-02  8.26e-01  
  5  +4.6933e-01  +1.0703e+00  6.01e-01  2.06e-03  1.23e-01  4.11e-03  5.74e-03  9.34e-01  
  6  +4.6620e-01  +1.0531e+00  5.87e-01  1.52e-03  9.12e-02  3.78e-03  4.04e-03  5.39e-01  
  7  +4.6756e-01  +1.0052e+00  5.38e-01  1.37e-03  8.19e-02  2.11e-03  3.76e-03  3.59e-01  
  8  +4.6190e-01  +9.5311e-01  4.91e-01  1.25e-03  7.47e-02  1.74e-03  3.48e-03  1.29e-01  
  9  +4.3695e-01  +7.7057e-01  3.34e-01  8.05e-04  4.76e-02  7.50e-04  2.36e-03  4.79e-01  
 10  +3.9537e-01  +5.5579e-01  1.60e-01  3.36e-04  1.96e-02  2.41e-04  1.09e-03  6.30e-01  
 11  +3.8243e-01  +4.9958e-01  1.17e-01  2.37e-04  1.38e-02  1.60e-04  8.15e-04  3.33e-01  
 12  +3.5311e-01  +3.6656e-01  1.34e-02  2.70e-05  1.56e-03  1.38e-06  1.08e-04  9.86e-01  
 13  +3.4848e-01  +3.4870e-01  2.19e-04  4.39e-07  2.54e-05  3.09e-08  1.86e-06  9.85e-01  
 14  +3.4840e-01  +3.4840e-01  2.19e-06  4.39e-09  2.54e-07  3.09e-10  1.86e-08  9.90e-01  
 15  +3.4840e-01  +3.4840e-01  2.19e-08  4.39e-11  2.54e-09  3.09e-12  1.86e-10  9.90e-01  
 16  +3.4840e-01  +3.4840e-01  2.19e-10  4.39e-13  2.54e-11  3.09e-14  1.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6723ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:19 PM: Optimal value: 3.484e-01
(CVXPY) Sep 20 03:06:19 PM: Compilation took 4.528e-03 seconds
(CVXPY) Sep 20 03:06:19 PM: Solver (including time spent in interface) took 4.269e-03 seconds
Iteration: 3, Objective: 0.3484
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:19 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:19 PM: Finished problem compilation (took 4.251e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 4571
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0123e+02  5.01e+02  9.52e-01  2.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0393e-01  +9.7792e+01  9.72e+01  3.30e-01  1.57e+01  4.09e-03  4.79e-01  6.65e-01  
  2  +5.4560e-01  +1.4364e+01  1.38e+01  1.16e-01  6.74e+00  8.80e-03  2.11e-01  7.78e-01  
  3  +5.0121e-01  +1.9332e+00  1.43e+00  2.95e-02  1.64e+00  6.81e-04  1.87e-01  4.78e-01  
  4  +4.9870e-01  +1.1785e+00  6.80e-01  1.27e-02  7.33e-01  5.92e-04  5.77e-02  7.90e-01  
  5  +4.7008e-01  +1.1333e+00  6.63e-01  2.32e-03  1.38e-01  4.08e-03  6.46e-03  9.30e-01  
  6  +4.6432e-01  +1.1605e+00  6.96e-01  1.56e-03  9.38e-02  4.85e-03  4.11e-03  5.66e-01  
  7  +4.6199e-01  +1.0646e+00  6.03e-01  1.32e-03  7.92e-02  2.22e-03  3.54e-03  4.68e-01  
  8  +4.1979e-01  +6.8686e-01  2.67e-01  5.87e-04  3.46e-02  1.98e-05  1.77e-03  7.65e-01  
  9  +3.9983e-01  +5.8575e-01  1.86e-01  3.88e-04  2.27e-02  1.86e-05  1.25e-03  3.34e-01  
 10  +3.9591e-01  +5.6386e-01  1.68e-01  3.62e-04  2.11e-02  3.82e-05  1.21e-03  2.91e-01  
 11  +3.6811e-01  +4.3150e-01  6.34e-02  1.29e-04  7.47e-03  2.41e-05  4.76e-04  7.96e-01  
 12  +3.5799e-01  +3.8833e-01  3.03e-02  6.13e-05  3.55e-03  1.21e-05  2.41e-04  5.77e-01  
 13  +3.4880e-01  +3.5020e-01  1.40e-03  2.80e-06  1.62e-04  5.13e-07  1.18e-05  9.73e-01  
 14  +3.4831e-01  +3.4832e-01  1.61e-05  3.22e-08  1.86e-06  6.04e-09  1.37e-07  9.90e-01  
 15  +3.4830e-01  +3.4830e-01  1.61e-07  3.22e-10  1.86e-08  6.04e-11  1.37e-09  9.90e-01  
 16  +3.4830e-01  +3.4830e-01  1.61e-09  3.22e-12  1.86e-10  6.04e-13  1.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6969ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:19 PM: Optimal value: 3.483e-01
(CVXPY) Sep 20 03:06:19 PM: Compilation took 4.251e-03 seconds
(CVXPY) Sep 20 03:06:19 PM: Solver (including time spent in interface) took 4.000e-03 seconds
FULL MODEL:
  Accruacy: 0.649
  Our objective: 0.29799999999999993

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.292)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.006)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.405188798904419
Best over terms:
  Our final objective: 0.29200000000000004
    Its accruacy: 0.646
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29200000000000004
  Highest accruacy: 0.646
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

