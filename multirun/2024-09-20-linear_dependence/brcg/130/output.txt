Command:
python test_script.py -s linear_dependence -d 4 -n 100 --seed 43 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.34
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.48000000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:47 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:47 PM: Finished problem compilation (took 3.688e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9652e-01  +5.1001e+01  5.05e+01  8.58e-01  7.87e+00  1.00e+00  1.04e+00   ------   
  1  +6.0157e-01  +1.0118e+01  9.52e+00  2.94e-01  4.14e+00  4.08e-03  4.90e-01  6.70e-01  
  2  +5.2916e-01  +1.5189e+00  9.90e-01  6.09e-02  1.01e+00  9.71e-03  1.52e-01  9.26e-01  
  3  +5.1771e-01  +1.2872e+00  7.69e-01  3.66e-02  6.17e-01  1.07e-02  9.59e-02  4.10e-01  
  4  +4.9554e-01  +1.1131e+00  6.18e-01  1.93e-02  3.31e-01  9.10e-03  5.48e-02  6.49e-01  
  5  +4.6286e-01  +8.1442e-01  3.52e-01  7.85e-03  1.35e-01  6.12e-03  2.43e-02  5.72e-01  
  6  +4.2178e-01  +5.4428e-01  1.22e-01  2.52e-03  4.25e-02  1.66e-03  9.79e-03  7.08e-01  
  7  +3.9853e-01  +4.2563e-01  2.71e-02  5.52e-04  9.23e-03  1.22e-04  2.48e-03  9.90e-01  
  8  +3.9032e-01  +3.9101e-01  6.89e-04  1.38e-05  2.31e-04  2.51e-06  6.51e-05  9.76e-01  
  9  +3.9010e-01  +3.9011e-01  6.89e-06  1.38e-07  2.30e-06  2.51e-08  6.51e-07  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  6.89e-08  1.38e-09  2.30e-08  2.51e-10  6.51e-09  9.90e-01  
 11  +3.9010e-01  +3.9010e-01  6.89e-10  1.38e-11  2.30e-10  2.51e-12  6.51e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 296.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:47 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 03:05:47 PM: Compilation took 3.688e-03 seconds
(CVXPY) Sep 20 03:05:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:47 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:47 PM: Finished problem compilation (took 2.853e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 478
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8641e-01  +5.1825e+01  5.13e+01  8.68e-01  8.31e+00  1.00e+00  1.08e+00   ------   
  1  +5.6237e-01  +1.0408e+01  9.85e+00  3.16e-01  4.36e+00  4.00e-03  5.30e-01  6.57e-01  
  2  +4.9682e-01  +1.8365e+00  1.34e+00  6.89e-02  1.20e+00  1.21e-02  1.69e-01  8.95e-01  
  3  +4.1470e-01  +1.3066e+00  8.92e-01  2.35e-02  4.19e-01  1.26e-02  6.36e-02  7.51e-01  
  4  +3.4976e-01  +7.5034e-01  4.01e-01  9.36e-03  1.63e-01  4.42e-03  2.96e-02  5.89e-01  
  5  +2.9457e-01  +3.4867e-01  5.41e-02  1.39e-03  2.33e-02  7.86e-05  5.86e-03  9.64e-01  
  6  +2.8172e-01  +2.8709e-01  5.37e-03  1.34e-04  2.22e-03  9.92e-06  6.54e-04  9.10e-01  
  7  +2.8068e-01  +2.8210e-01  1.43e-03  3.55e-05  5.90e-04  2.76e-06  1.77e-04  7.43e-01  
  8  +2.8051e-01  +2.8137e-01  8.66e-04  1.88e-05  3.15e-04  3.01e-06  9.15e-05  8.15e-01  
  9  +2.8036e-01  +2.8082e-01  4.60e-04  1.05e-05  1.76e-04  1.75e-06  5.19e-05  8.70e-01  
 10  +2.8021e-01  +2.8024e-01  3.23e-05  7.00e-07  1.17e-05  9.68e-08  3.56e-06  9.45e-01  
 11  +2.8020e-01  +2.8020e-01  3.43e-07  7.41e-09  1.24e-07  1.00e-09  3.80e-08  9.89e-01  
 12  +2.8020e-01  +2.8020e-01  3.43e-09  7.41e-11  1.24e-09  1.00e-11  3.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 372.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:47 PM: Optimal value: 2.802e-01
(CVXPY) Sep 20 03:05:47 PM: Compilation took 2.853e-03 seconds
(CVXPY) Sep 20 03:05:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:47 PM: Your problem has 70 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:47 PM: Finished problem compilation (took 2.805e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 70
  constraints   = 120
  nnz(P)        = 0
  nnz(A)        = 488
  cones (total) = 1
    : Nonnegative = 1,  numel = 120

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8634e-01  +5.1794e+01  5.13e+01  8.68e-01  8.32e+00  1.00e+00  1.08e+00   ------   
  1  +5.6062e-01  +1.0427e+01  9.87e+00  3.17e-01  4.36e+00  4.00e-03  5.31e-01  6.56e-01  
  2  +4.9455e-01  +1.8224e+00  1.33e+00  6.79e-02  1.18e+00  1.22e-02  1.68e-01  9.00e-01  
  3  +4.0646e-01  +1.3049e+00  8.98e-01  2.23e-02  3.97e-01  1.34e-02  6.08e-02  7.81e-01  
  4  +3.4453e-01  +7.5514e-01  4.11e-01  9.45e-03  1.65e-01  4.61e-03  2.96e-02  5.70e-01  
  5  +3.1348e-01  +5.6063e-01  2.47e-01  5.57e-03  9.55e-02  2.59e-03  1.95e-02  4.18e-01  
  6  +2.7030e-01  +3.0257e-01  3.23e-02  7.40e-04  1.24e-02  1.35e-04  3.29e-03  9.09e-01  
  7  +2.6122e-01  +2.6386e-01  2.64e-03  5.96e-05  9.94e-04  1.04e-05  2.94e-04  9.19e-01  
  8  +2.6047e-01  +2.6070e-01  2.26e-04  5.11e-06  8.51e-05  8.27e-07  2.57e-05  9.13e-01  
  9  +2.6040e-01  +2.6041e-01  6.51e-06  1.49e-07  2.47e-06  2.41e-08  7.57e-07  9.90e-01  
 10  +2.6040e-01  +2.6040e-01  6.52e-08  1.49e-09  2.47e-08  2.41e-10  7.58e-09  9.90e-01  
 11  +2.6040e-01  +2.6040e-01  6.53e-10  1.49e-11  2.48e-10  2.41e-12  7.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 350.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:47 PM: Optimal value: 2.604e-01
(CVXPY) Sep 20 03:05:47 PM: Compilation took 2.805e-03 seconds
(CVXPY) Sep 20 03:05:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:47 PM: Your problem has 72 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:47 PM: Finished problem compilation (took 4.928e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 122
  nnz(P)        = 0
  nnz(A)        = 499
  cones (total) = 1
    : Nonnegative = 1,  numel = 122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8543e-01  +5.1696e+01  5.12e+01  8.70e-01  8.29e+00  1.00e+00  1.09e+00   ------   
  1  +5.5356e-01  +1.0461e+01  9.91e+00  3.20e-01  4.35e+00  4.00e-03  5.35e-01  6.52e-01  
  2  +4.8536e-01  +1.7598e+00  1.27e+00  6.37e-02  1.10e+00  1.27e-02  1.59e-01  9.22e-01  
  3  +4.0189e-01  +1.2679e+00  8.66e-01  2.29e-02  4.01e-01  1.23e-02  6.40e-02  7.21e-01  
  4  +3.3803e-01  +7.4485e-01  4.07e-01  9.83e-03  1.68e-01  4.37e-03  3.15e-02  5.69e-01  
  5  +2.9710e-01  +4.7716e-01  1.80e-01  4.44e-03  7.43e-02  1.58e-03  1.66e-02  5.16e-01  
  6  +2.6422e-01  +2.7829e-01  1.41e-02  3.59e-04  5.88e-03  4.90e-05  1.65e-03  9.21e-01  
  7  +2.6115e-01  +2.6387e-01  2.72e-03  6.94e-05  1.13e-03  9.46e-06  3.36e-04  8.05e-01  
  8  +2.6105e-01  +2.6350e-01  2.45e-03  5.87e-05  9.65e-04  8.95e-06  2.89e-04  2.31e-01  
  9  +2.6051e-01  +2.6115e-01  6.41e-04  1.54e-05  2.53e-04  2.36e-06  7.94e-05  9.90e-01  
 10  +2.6031e-01  +2.6033e-01  2.36e-05  5.57e-07  9.14e-06  5.86e-08  3.02e-06  9.65e-01  
 11  +2.6030e-01  +2.6030e-01  2.44e-07  5.75e-09  9.44e-08  5.95e-10  3.16e-08  9.90e-01  
 12  +2.6030e-01  +2.6030e-01  2.44e-09  5.75e-11  9.44e-10  5.95e-12  3.16e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 372.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:47 PM: Optimal value: 2.603e-01
(CVXPY) Sep 20 03:05:47 PM: Compilation took 4.928e-03 seconds
(CVXPY) Sep 20 03:05:47 PM: Solver (including time spent in interface) took 1.007e-03 seconds
FULL MODEL:
  Accruacy: 0.74
  Our objective: 0.4799999999999999

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.34)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1)            <-- (term's our objective: 0.1)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.158702850341797
Best over terms:
  Our final objective: 0.34
    Its accruacy: 0.67
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.34
  Highest accruacy: 0.67
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

