Command:
python test_script.py -s linear_dependence -d 3 -n 5000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.322
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.322
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:04 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:04 PM: Finished problem compilation (took 8.250e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0001e-01  +2.5010e+03  2.50e+03  9.77e-01  5.55e+01  1.00e+00  1.00e+00   ------   
  1  +6.2002e-01  +4.6378e+02  4.63e+02  3.04e-01  2.88e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5552e-01  +7.9340e+01  7.88e+01  1.33e-01  1.50e+01  6.69e-03  2.20e-01  6.66e-01  
  3  +5.0730e-01  +1.1696e+01  1.12e+01  8.02e-02  8.66e+00  9.62e-06  2.17e-01  7.93e-02  
  4  +4.9993e-01  +1.1304e+00  6.30e-01  5.96e-03  6.61e-01  6.23e-06  1.35e-01  7.58e-01  
  5  +4.9838e-01  +9.6685e-01  4.68e-01  3.67e-03  4.11e-01  2.17e-05  1.94e-02  9.14e-01  
  6  +4.5559e-01  +7.5152e-01  2.96e-01  1.83e-04  2.09e-02  4.54e-04  5.31e-04  9.75e-01  
  7  +4.1417e-01  +5.0196e-01  8.78e-02  4.35e-05  4.89e-03  5.27e-05  1.56e-04  7.54e-01  
  8  +3.9080e-01  +3.9616e-01  5.37e-03  2.43e-06  2.72e-04  4.52e-07  1.12e-05  9.56e-01  
  9  +3.8932e-01  +3.8937e-01  5.47e-05  2.46e-08  2.76e-06  4.49e-09  1.14e-07  9.90e-01  
 10  +3.8930e-01  +3.8930e-01  5.47e-07  2.46e-10  2.76e-08  4.49e-11  1.14e-09  9.90e-01  
 11  +3.8930e-01  +3.8930e-01  5.47e-09  2.46e-12  2.76e-10  4.50e-13  1.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.1803ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:04 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:04 PM: Optimal value: 3.893e-01
(CVXPY) Sep 20 03:05:04 PM: Compilation took 8.250e-03 seconds
(CVXPY) Sep 20 03:05:04 PM: Solver (including time spent in interface) took 1.755e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:04 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:04 PM: Finished problem compilation (took 7.946e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 17853
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +2.5015e+03  2.50e+03  9.77e-01  5.92e+01  1.00e+00  1.00e+00   ------   
  1  +6.1949e-01  +4.6452e+02  4.64e+02  3.05e-01  3.08e+01  4.25e-03  4.37e-01  6.93e-01  
  2  +5.5503e-01  +7.8826e+01  7.83e+01  1.32e-01  1.59e+01  6.76e-03  2.19e-01  6.71e-01  
  3  +5.0692e-01  +1.1285e+01  1.08e+01  7.82e-02  9.00e+00  9.44e-06  2.16e-01  8.79e-02  
  4  +5.0078e-01  +2.4061e+00  1.91e+00  1.78e-02  2.08e+00  6.90e-06  1.76e-01  3.45e-01  
  5  +4.9995e-01  +8.4418e-01  3.44e-01  3.21e-03  3.82e-01  3.26e-06  3.59e-02  8.93e-01  
  6  +4.9661e-01  +9.9913e-01  5.03e-01  1.55e-03  1.90e-01  3.76e-05  4.37e-03  9.33e-01  
  7  +4.8662e-01  +9.3512e-01  4.48e-01  4.58e-04  5.65e-02  1.14e-04  1.18e-03  7.34e-01  
  8  +4.7641e-01  +8.8930e-01  4.13e-01  2.77e-04  3.41e-02  1.54e-04  7.07e-04  4.25e-01  
  9  +4.7438e-01  +8.7373e-01  3.99e-01  2.73e-04  3.35e-02  1.41e-04  7.06e-04  2.60e-02  
 10  +4.4823e-01  +7.6821e-01  3.20e-01  1.40e-04  1.72e-02  1.65e-04  3.70e-04  4.87e-01  
 11  +3.9007e-01  +5.2504e-01  1.35e-01  4.93e-05  5.95e-03  2.84e-05  1.47e-04  7.57e-01  
 12  +3.4544e-01  +3.6024e-01  1.48e-02  5.43e-06  6.49e-04  2.35e-07  1.95e-05  9.24e-01  
 13  +3.3919e-01  +3.3939e-01  2.00e-04  7.27e-08  8.69e-06  3.05e-09  2.72e-07  9.86e-01  
 14  +3.3910e-01  +3.3910e-01  1.99e-06  7.27e-10  8.69e-08  3.05e-11  2.72e-09  9.90e-01  
 15  +3.3910e-01  +3.3910e-01  1.99e-08  7.27e-12  8.69e-10  3.05e-13  2.72e-11  9.90e-01  
 16  +3.3910e-01  +3.3910e-01  1.99e-10  7.27e-14  8.69e-12  3.06e-15  2.73e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.8803ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:04 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:04 PM: Optimal value: 3.391e-01
(CVXPY) Sep 20 03:05:04 PM: Compilation took 7.946e-03 seconds
(CVXPY) Sep 20 03:05:04 PM: Solver (including time spent in interface) took 1.909e-02 seconds
FULL MODEL:
  Accruacy: 0.661
  Our objective: 0.32199999999999995

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.322)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.115290641784668
Best over terms:
  Our final objective: 0.32199999999999995
    Its accruacy: 0.661
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.32199999999999995
  Highest accruacy: 0.661
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

