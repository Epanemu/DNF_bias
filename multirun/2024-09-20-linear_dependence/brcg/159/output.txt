Command:
python test_script.py -s linear_dependence -d 4 -n 50000 --seed 21 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29264
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.29264
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:52 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:52 PM: Finished problem compilation (took 6.804e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  1.94e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5116e-01  +7.5386e+02  7.53e+02  1.44e-01  5.61e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1142e-01  +1.6774e+02  1.67e+02  1.31e-01  5.09e+01  1.84e-05  2.26e-01  5.84e-02  
  4  +5.0015e-01  +2.6001e+00  2.10e+00  6.28e-03  2.42e+00  1.76e-06  1.54e-01  9.90e-01  
  5  +4.9999e-01  +8.3164e-01  3.32e-01  9.91e-04  3.85e-01  4.09e-06  3.94e-02  9.90e-01  
  6  +4.9811e-01  +1.3904e+00  8.92e-01  5.44e-04  2.15e-01  2.53e-04  1.58e-03  9.72e-01  
  7  +4.8268e-01  +1.2061e+00  7.23e-01  5.64e-05  2.23e-02  1.97e-03  1.55e-04  9.02e-01  
  8  +4.5387e-01  +7.4024e-01  2.86e-01  1.37e-05  5.38e-03  1.07e-03  3.98e-05  8.10e-01  
  9  +4.1717e-01  +4.7735e-01  6.02e-02  3.10e-06  1.21e-03  8.09e-06  1.11e-05  9.04e-01  
 10  +4.0458e-01  +4.1060e-01  6.02e-03  3.03e-07  1.18e-04  6.35e-07  1.18e-06  9.00e-01  
 11  +4.0274e-01  +4.0319e-01  4.46e-04  1.98e-08  7.71e-06  2.47e-08  8.85e-08  9.64e-01  
 12  +4.0262e-01  +4.0263e-01  4.49e-06  1.99e-10  7.74e-08  2.48e-10  8.91e-10  9.90e-01  
 13  +4.0262e-01  +4.0262e-01  4.49e-08  1.99e-12  7.74e-10  2.48e-12  8.91e-12  9.90e-01  
 14  +4.0262e-01  +4.0262e-01  4.50e-10  2.00e-14  7.75e-12  2.73e-14  9.77e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 313.5222ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:52 PM: Optimal value: 4.026e-01
(CVXPY) Sep 20 03:06:52 PM: Compilation took 6.804e-02 seconds
(CVXPY) Sep 20 03:06:52 PM: Solver (including time spent in interface) took 3.364e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4026
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:52 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:52 PM: Finished problem compilation (took 9.062e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 222049
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5003e+04  2.50e+04  9.93e-01  2.07e+02  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +4.8431e+03  4.84e+03  3.42e-01  1.16e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5110e-01  +7.5308e+02  7.53e+02  1.44e-01  6.00e+01  8.22e-03  2.28e-01  7.24e-01  
  3  +5.1138e-01  +1.6733e+02  1.67e+02  1.31e-01  5.43e+01  1.84e-05  2.26e-01  5.90e-02  
  4  +5.0015e-01  +2.6355e+00  2.14e+00  6.39e-03  2.63e+00  1.86e-06  1.54e-01  9.90e-01  
  5  +5.0000e-01  +8.4943e-01  3.49e-01  1.04e-03  4.33e-01  2.66e-06  4.04e-02  9.23e-01  
  6  +4.9959e-01  +1.1004e+00  6.01e-01  1.14e-03  4.80e-01  3.99e-05  4.17e-03  9.37e-01  
  7  +4.8256e-01  +9.8947e-01  5.07e-01  3.60e-05  1.53e-02  1.48e-03  9.13e-05  9.78e-01  
  8  +4.6440e-01  +8.7596e-01  4.12e-01  1.81e-05  7.70e-03  1.66e-03  4.67e-05  5.79e-01  
  9  +4.2197e-01  +6.3260e-01  2.11e-01  7.81e-06  3.29e-03  4.51e-04  2.21e-05  6.63e-01  
 10  +3.7197e-01  +4.1837e-01  4.64e-02  1.71e-06  7.11e-04  3.84e-06  5.72e-06  8.16e-01  
 11  +3.5447e-01  +3.5606e-01  1.59e-03  5.75e-08  2.39e-05  4.51e-08  2.09e-07  9.70e-01  
 12  +3.5379e-01  +3.5380e-01  1.58e-05  5.74e-10  2.39e-07  4.50e-10  2.10e-09  9.90e-01  
 13  +3.5378e-01  +3.5378e-01  1.58e-07  5.75e-12  2.39e-09  4.55e-12  2.12e-11  9.90e-01  
 14  +3.5378e-01  +3.5378e-01  1.59e-09  5.74e-14  2.39e-11  4.60e-14  2.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 234.566ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:52 PM: Optimal value: 3.538e-01
(CVXPY) Sep 20 03:06:52 PM: Compilation took 9.062e-02 seconds
(CVXPY) Sep 20 03:06:52 PM: Solver (including time spent in interface) took 2.592e-01 seconds
FULL MODEL:
  Accruacy: 0.64632
  Our objective: 0.29263999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.29264)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.4172048568725586
Best over terms:
  Our final objective: 0.29263999999999996
    Its accruacy: 0.64632
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29263999999999996
  Highest accruacy: 0.64632
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

