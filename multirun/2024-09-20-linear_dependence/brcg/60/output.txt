Command:
python test_script.py -s linear_dependence -d 2 -n 1000 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5960000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 2.

Computed total variation: 0.5960000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:48 PM: Your problem has 505 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:48 PM: Finished problem compilation (took 3.553e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 505
  constraints   = 1005
  nnz(P)        = 0
  nnz(A)        = 2505
  cones (total) = 1
    : Nonnegative = 1,  numel = 1005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9866e-01  +5.0182e+02  5.01e+02  9.47e-01  2.24e+01  1.00e+00  1.01e+00   ------   
  1  +6.3486e-01  +8.7703e+01  8.71e+01  2.57e-01  1.05e+01  4.49e-03  3.90e-01  7.26e-01  
  2  +5.5147e-01  +1.5003e+01  1.45e+01  1.05e-01  4.94e+00  5.64e-03  1.90e-01  6.63e-01  
  3  +4.9280e-01  +2.7155e+00  2.22e+00  3.60e-02  1.64e+00  1.05e-02  1.14e-01  9.64e-01  
  4  +3.7648e-01  +2.9297e+00  2.55e+00  6.01e-03  2.97e-01  8.19e-02  1.37e-02  8.96e-01  
  5  +3.5077e-01  +1.5026e+00  1.15e+00  3.17e-03  1.53e-01  6.57e-04  7.94e-03  6.15e-01  
  6  +2.5341e-01  +5.2647e-01  2.73e-01  7.28e-04  3.35e-02  5.07e-06  2.44e-03  7.46e-01  
  7  +2.0575e-01  +2.3214e-01  2.64e-02  7.56e-05  3.38e-03  8.66e-06  4.31e-04  9.39e-01  
  8  +2.0217e-01  +2.0258e-01  4.13e-04  1.18e-06  5.28e-05  1.03e-07  7.32e-06  9.84e-01  
  9  +2.0210e-01  +2.0210e-01  4.12e-06  1.18e-08  5.27e-07  1.03e-09  7.32e-08  9.90e-01  
 10  +2.0210e-01  +2.0210e-01  4.12e-08  1.18e-10  5.27e-09  1.03e-11  7.32e-10  9.90e-01  
 11  +2.0210e-01  +2.0210e-01  4.12e-10  1.18e-12  5.27e-11  1.03e-13  7.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9859ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:48 PM: Optimal value: 2.021e-01
(CVXPY) Sep 20 03:03:48 PM: Compilation took 3.553e-03 seconds
(CVXPY) Sep 20 03:03:48 PM: Solver (including time spent in interface) took 4.059e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.2021
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:48 PM: Your problem has 506 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:48 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 506
  constraints   = 1006
  nnz(P)        = 0
  nnz(A)        = 2697
  cones (total) = 1
    : Nonnegative = 1,  numel = 1006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +5.0185e+02  5.01e+02  9.48e-01  2.31e+01  1.00e+00  1.01e+00   ------   
  1  +6.3414e-01  +8.8076e+01  8.74e+01  2.60e-01  1.09e+01  4.48e-03  3.94e-01  7.24e-01  
  2  +5.5147e-01  +1.5031e+01  1.45e+01  1.05e-01  5.11e+00  5.74e-03  1.91e-01  6.67e-01  
  3  +4.9238e-01  +2.6360e+00  2.14e+00  3.50e-02  1.65e+00  1.05e-02  1.12e-01  9.90e-01  
  4  +3.7467e-01  +2.7815e+00  2.41e+00  5.78e-03  2.94e-01  8.21e-02  1.33e-02  8.94e-01  
  5  +3.4914e-01  +1.7506e+00  1.40e+00  3.63e-03  1.81e-01  2.12e-02  8.93e-03  4.78e-01  
  6  +2.8696e-01  +8.8381e-01  5.97e-01  1.61e-03  7.73e-02  1.79e-03  4.81e-03  6.69e-01  
  7  +2.2220e-01  +3.3141e-01  1.09e-01  3.10e-04  1.44e-02  1.13e-05  1.40e-03  7.76e-01  
  8  +2.0309e-01  +2.0859e-01  5.50e-03  1.58e-05  7.27e-04  9.86e-07  9.58e-05  9.52e-01  
  9  +2.0211e-01  +2.0217e-01  5.57e-05  1.60e-07  7.36e-06  1.01e-08  9.95e-07  9.90e-01  
 10  +2.0210e-01  +2.0210e-01  5.57e-07  1.60e-09  7.36e-08  1.01e-10  9.95e-09  9.90e-01  
 11  +2.0210e-01  +2.0210e-01  5.57e-09  1.60e-11  7.36e-10  1.01e-12  9.95e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8839ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:48 PM: Optimal value: 2.021e-01
(CVXPY) Sep 20 03:03:48 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2021
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:48 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:48 PM: Finished problem compilation (took 5.121e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 2896
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9841e-01  +5.0184e+02  5.01e+02  9.48e-01  2.39e+01  1.00e+00  1.01e+00   ------   
  1  +6.2413e-01  +9.0452e+01  8.98e+01  2.78e-01  1.18e+01  4.34e-03  4.16e-01  7.10e-01  
  2  +5.5153e-01  +1.5215e+01  1.47e+01  1.07e-01  5.35e+00  6.33e-03  1.93e-01  6.95e-01  
  3  +4.9250e-01  +2.5432e+00  2.05e+00  3.47e-02  1.68e+00  9.32e-03  1.17e-01  9.90e-01  
  4  +3.6514e-01  +2.7285e+00  2.36e+00  5.62e-03  2.95e-01  8.02e-02  1.30e-02  9.03e-01  
  5  +3.3508e-01  +1.3283e+00  9.93e-01  2.75e-03  1.40e-01  6.35e-04  7.14e-03  6.22e-01  
  6  +2.4549e-01  +4.7733e-01  2.32e-01  6.34e-04  3.09e-02  4.69e-06  2.26e-03  7.42e-01  
  7  +2.0527e-01  +2.2607e-01  2.08e-02  5.97e-05  2.84e-03  5.78e-06  3.45e-04  9.40e-01  
  8  +2.0219e-01  +2.0272e-01  5.38e-04  1.54e-06  7.35e-05  1.37e-07  9.57e-06  9.74e-01  
  9  +2.0210e-01  +2.0211e-01  5.37e-06  1.54e-08  7.34e-07  1.37e-09  9.58e-08  9.90e-01  
 10  +2.0210e-01  +2.0210e-01  5.37e-08  1.54e-10  7.34e-09  1.37e-11  9.58e-10  9.90e-01  
 11  +2.0210e-01  +2.0210e-01  5.37e-10  1.54e-12  7.34e-11  1.37e-13  9.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0088ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:48 PM: Optimal value: 2.021e-01
(CVXPY) Sep 20 03:03:48 PM: Compilation took 5.121e-03 seconds
(CVXPY) Sep 20 03:03:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.798
  Our objective: 0.5960000000000001

IF 
    (x0 = 0) <-- (term's our objective: 0.596)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8800508975982666
Best over terms:
  Our final objective: 0.5960000000000001
    Its accruacy: 0.798
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5960000000000001
  Highest accruacy: 0.798
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

