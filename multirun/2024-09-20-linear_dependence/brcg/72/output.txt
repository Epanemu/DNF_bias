Command:
python test_script.py -s linear_dependence -d 2 -n 10000 --seed 73 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.581
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 2.

Computed total variation: 0.581
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:05 PM: Your problem has 5005 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:05 PM: Finished problem compilation (took 1.151e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5005
  constraints   = 10005
  nnz(P)        = 0
  nnz(A)        = 25005
  cones (total) = 1
    : Nonnegative = 1,  numel = 10005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +5.0019e+03  5.00e+03  9.83e-01  7.27e+01  1.00e+00  1.00e+00   ------   
  1  +6.3733e-01  +8.7387e+02  8.73e+02  2.67e-01  3.43e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5856e-01  +1.6198e+02  1.61e+02  1.31e-01  1.95e+01  5.31e-03  2.14e-01  5.93e-01  
  3  +5.0115e-01  +6.7726e+00  6.27e+00  3.90e-02  5.47e+00  2.56e-04  2.06e-01  2.44e-01  
  4  +4.9945e-01  +1.9127e+00  1.41e+00  8.13e-03  1.21e+00  2.12e-04  3.53e-02  9.70e-01  
  5  +4.9413e-01  +2.2938e+00  1.80e+00  3.28e-03  5.23e-01  1.22e-03  7.34e-03  8.89e-01  
  6  +4.4467e-01  +1.9547e+00  1.51e+00  3.83e-04  6.16e-02  9.01e-03  7.90e-04  8.93e-01  
  7  +3.3633e-01  +1.0835e+00  7.47e-01  1.71e-04  2.65e-02  1.58e-03  4.08e-04  6.24e-01  
  8  +2.2269e-01  +3.4453e-01  1.22e-01  3.68e-05  5.35e-03  4.33e-04  1.91e-04  8.97e-01  
  9  +2.1067e-01  +2.1656e-01  5.89e-03  1.77e-06  2.56e-04  3.80e-06  1.06e-05  9.47e-01  
 10  +2.0961e-01  +2.0967e-01  5.84e-05  1.75e-08  2.54e-06  4.00e-08  1.08e-07  9.90e-01  
 11  +2.0960e-01  +2.0960e-01  5.84e-07  1.75e-10  2.54e-08  3.99e-10  1.08e-09  9.90e-01  
 12  +2.0960e-01  +2.0960e-01  5.84e-09  1.75e-12  2.54e-10  3.99e-12  1.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.7154ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:05 PM: Optimal value: 2.096e-01
(CVXPY) Sep 20 03:04:05 PM: Compilation took 1.151e-02 seconds
(CVXPY) Sep 20 03:04:05 PM: Solver (including time spent in interface) took 2.543e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.2096
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:05 PM: Your problem has 5006 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:05 PM: Finished problem compilation (took 5.980e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5006
  constraints   = 10006
  nnz(P)        = 0
  nnz(A)        = 26989
  cones (total) = 1
    : Nonnegative = 1,  numel = 10006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +5.0019e+03  5.00e+03  9.83e-01  7.52e+01  1.00e+00  1.00e+00   ------   
  1  +6.3723e-01  +8.7432e+02  8.74e+02  2.67e-01  3.56e+01  4.49e-03  3.89e-01  7.25e-01  
  2  +5.5852e-01  +1.6191e+02  1.61e+02  1.31e-01  2.02e+01  5.32e-03  2.14e-01  5.94e-01  
  3  +5.0114e-01  +6.7361e+00  6.23e+00  3.88e-02  5.63e+00  2.52e-04  2.06e-01  2.47e-01  
  4  +4.9945e-01  +1.9579e+00  1.46e+00  8.38e-03  1.29e+00  2.12e-04  3.61e-02  9.62e-01  
  5  +4.9373e-01  +2.2898e+00  1.80e+00  3.14e-03  5.18e-01  1.27e-03  6.99e-03  8.88e-01  
  6  +4.2714e-01  +1.8126e+00  1.39e+00  2.73e-04  4.55e-02  1.14e-02  5.62e-04  9.20e-01  
  7  +3.9787e-01  +1.5690e+00  1.17e+00  2.58e-04  4.24e-02  7.72e-03  5.57e-04  5.16e-02  
  8  +3.0628e-01  +8.5977e-01  5.53e-01  1.59e-04  2.48e-02  4.46e-05  4.59e-04  3.73e-01  
  9  +2.3270e-01  +3.5634e-01  1.24e-01  3.68e-05  5.56e-03  2.78e-07  1.64e-04  7.18e-01  
 10  +2.1081e-01  +2.1742e-01  6.61e-03  1.99e-06  2.98e-04  6.78e-08  1.20e-05  9.49e-01  
 11  +2.0961e-01  +2.0968e-01  6.80e-05  2.04e-08  3.07e-06  6.98e-10  1.26e-07  9.89e-01  
 12  +2.0960e-01  +2.0960e-01  6.80e-07  2.04e-10  3.07e-08  6.97e-12  1.26e-09  9.90e-01  
 13  +2.0960e-01  +2.0960e-01  6.80e-09  2.04e-12  3.07e-10  6.98e-14  1.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.7967ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:06 PM: Optimal value: 2.096e-01
(CVXPY) Sep 20 03:04:06 PM: Compilation took 5.980e-03 seconds
(CVXPY) Sep 20 03:04:06 PM: Solver (including time spent in interface) took 3.382e-02 seconds
Iteration: 2, Objective: 0.2096
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:06 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:06 PM: Finished problem compilation (took 1.019e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 28930
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9994e-01  +5.0019e+03  5.00e+03  9.83e-01  7.77e+01  1.00e+00  1.00e+00   ------   
  1  +6.2711e-01  +9.0184e+02  9.01e+02  2.88e-01  3.88e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5804e-01  +1.6268e+02  1.62e+02  1.33e-01  2.10e+01  6.02e-03  2.16e-01  6.32e-01  
  3  +5.0219e-01  +9.6374e+00  9.14e+00  5.36e-02  8.01e+00  3.50e-06  2.09e-01  2.00e-01  
  4  +4.9989e-01  +1.9446e+00  1.44e+00  9.02e-03  1.41e+00  2.38e-06  5.30e-02  8.19e-01  
  5  +4.6807e-01  +2.5126e+00  2.04e+00  7.69e-04  1.33e-01  1.12e-04  1.58e-03  9.86e-01  
  6  +4.4967e-01  +2.3396e+00  1.89e+00  5.68e-04  9.75e-02  1.23e-04  1.18e-03  2.86e-01  
  7  +3.6226e-01  +1.4494e+00  1.09e+00  2.52e-04  4.21e-02  5.93e-05  5.78e-04  9.26e-01  
  8  +2.5047e-01  +4.8266e-01  2.32e-01  6.97e-05  1.09e-02  2.68e-07  2.73e-04  7.86e-01  
  9  +2.1237e-01  +2.2619e-01  1.38e-02  4.15e-06  6.44e-04  1.74e-07  2.39e-05  9.47e-01  
 10  +2.0963e-01  +2.0978e-01  1.49e-04  4.48e-08  6.94e-06  2.41e-09  2.77e-07  9.89e-01  
 11  +2.0960e-01  +2.0960e-01  1.49e-06  4.47e-10  6.94e-08  2.40e-11  2.77e-09  9.90e-01  
 12  +2.0960e-01  +2.0960e-01  1.49e-08  4.47e-12  6.94e-10  2.40e-13  2.77e-11  9.90e-01  
 13  +2.0960e-01  +2.0960e-01  1.49e-10  4.48e-14  6.94e-12  2.41e-15  2.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.8964ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:06 PM: Optimal value: 2.096e-01
(CVXPY) Sep 20 03:04:06 PM: Compilation took 1.019e-02 seconds
(CVXPY) Sep 20 03:04:06 PM: Solver (including time spent in interface) took 2.988e-02 seconds
FULL MODEL:
  Accruacy: 0.7905
  Our objective: 0.581

IF 
    (x0 = 0) <-- (term's our objective: 0.581)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.043919324874878
Best over terms:
  Our final objective: 0.581
    Its accruacy: 0.7905
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.581
  Highest accruacy: 0.7905
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

