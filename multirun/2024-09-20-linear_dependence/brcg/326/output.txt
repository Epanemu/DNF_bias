Command:
python test_script.py -s linear_dependence -d 9 -n 50 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:36 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Finished problem compilation (took 3.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9387e-01  +2.6013e+01  2.55e+01  8.37e-01  6.99e+00  1.00e+00  1.07e+00   ------   
  1  +5.6931e-01  +5.8055e+00  5.24e+00  3.71e-01  4.09e+00  3.73e-03  6.13e-01  5.92e-01  
  2  +4.9323e-01  +1.1969e+00  7.04e-01  8.78e-02  1.19e+00  2.07e-02  2.44e-01  9.90e-01  
  3  +4.4293e-01  +7.7640e-01  3.33e-01  2.32e-02  3.33e-01  1.47e-02  8.12e-02  7.73e-01  
  4  +4.1739e-01  +5.2048e-01  1.03e-01  6.48e-03  9.23e-02  3.02e-03  2.72e-02  7.67e-01  
  5  +4.0339e-01  +4.1935e-01  1.60e-02  9.50e-04  1.35e-02  2.30e-04  4.69e-03  9.25e-01  
  6  +4.0015e-01  +4.0039e-01  2.43e-04  1.43e-05  2.03e-04  3.24e-06  7.32e-05  9.85e-01  
  7  +4.0010e-01  +4.0010e-01  2.43e-06  1.43e-07  2.03e-06  3.24e-08  7.32e-07  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  2.43e-08  1.43e-09  2.03e-08  3.24e-10  7.32e-09  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  2.43e-10  1.43e-11  2.03e-10  3.24e-12  7.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 277.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:36 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 03:16:36 PM: Compilation took 3.514e-03 seconds
(CVXPY) Sep 20 03:16:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:36 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Finished problem compilation (took 2.515e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 407
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7674e-01  +2.6883e+01  2.64e+01  8.49e-01  7.29e+00  1.00e+00  1.11e+00   ------   
  1  +4.9194e-01  +5.9079e+00  5.42e+00  3.74e-01  4.10e+00  3.83e-03  6.17e-01  5.98e-01  
  2  +3.8600e-01  +1.2399e+00  8.54e-01  7.99e-02  1.11e+00  2.39e-02  2.07e-01  9.90e-01  
  3  +3.1650e-01  +7.0779e-01  3.91e-01  2.40e-02  3.47e-01  1.41e-02  7.46e-02  7.35e-01  
  4  +2.6185e-01  +4.1709e-01  1.55e-01  7.52e-03  1.12e-01  5.14e-03  2.52e-02  7.67e-01  
  5  +2.3336e-01  +3.0998e-01  7.66e-02  3.25e-03  5.19e-02  2.63e-03  1.07e-02  6.52e-01  
  6  +2.1294e-01  +2.4335e-01  3.04e-02  1.21e-03  2.00e-02  8.30e-04  4.03e-03  7.18e-01  
  7  +2.0077e-01  +2.0167e-01  9.03e-04  3.55e-05  5.89e-04  1.67e-05  1.20e-04  9.73e-01  
  8  +2.0041e-01  +2.0043e-01  2.30e-05  9.29e-07  1.52e-05  2.44e-07  3.18e-06  9.74e-01  
  9  +2.0040e-01  +2.0040e-01  2.49e-07  1.02e-08  1.65e-07  2.67e-09  3.50e-08  9.89e-01  
 10  +2.0040e-01  +2.0040e-01  2.49e-09  1.02e-10  1.65e-09  2.68e-11  3.50e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 339.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:36 PM: Optimal value: 2.004e-01
(CVXPY) Sep 20 03:16:36 PM: Compilation took 2.515e-03 seconds
(CVXPY) Sep 20 03:16:36 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Iteration: 2, Objective: 0.2004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:36 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Finished problem compilation (took 3.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 452
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5714e-01  +2.7459e+01  2.70e+01  8.57e-01  7.09e+00  1.00e+00  1.13e+00   ------   
  1  +3.8190e-01  +6.1996e+00  5.82e+00  3.78e-01  3.90e+00  4.10e-03  6.19e-01  5.83e-01  
  2  +2.2580e-01  +1.1568e+00  9.31e-01  7.27e-02  9.08e-01  2.59e-02  1.80e-01  9.90e-01  
  3  +1.6783e-01  +3.9917e-01  2.31e-01  1.67e-02  2.11e-01  6.14e-03  4.96e-02  7.81e-01  
  4  +1.4608e-01  +2.4945e-01  1.03e-01  6.57e-03  8.84e-02  3.06e-03  2.04e-02  6.44e-01  
  5  +1.2630e-01  +1.8551e-01  5.92e-02  2.82e-03  4.46e-02  1.96e-03  8.92e-03  6.64e-01  
  6  +1.0423e-01  +1.1166e-01  7.43e-03  3.32e-04  5.39e-03  2.04e-05  1.11e-03  9.84e-01  
  7  +1.0081e-01  +1.0104e-01  2.29e-04  1.01e-05  1.65e-04  5.52e-07  3.42e-05  9.70e-01  
  8  +1.0070e-01  +1.0071e-01  4.08e-06  1.86e-07  2.98e-06  1.41e-08  6.37e-07  9.85e-01  
  9  +1.0070e-01  +1.0070e-01  4.08e-08  1.86e-09  2.98e-08  1.41e-10  6.37e-09  9.90e-01  
 10  +1.0070e-01  +1.0070e-01  4.09e-10  1.87e-11  2.98e-10  1.41e-12  6.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 310.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:36 PM: Optimal value: 1.007e-01
(CVXPY) Sep 20 03:16:36 PM: Compilation took 3.004e-03 seconds
(CVXPY) Sep 20 03:16:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:36 PM: Your problem has 74 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Finished problem compilation (took 2.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 99
  nnz(P)        = 0
  nnz(A)        = 484
  cones (total) = 1
    : Nonnegative = 1,  numel = 99

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4160e-01  +2.7831e+01  2.74e+01  8.63e-01  6.85e+00  1.00e+00  1.14e+00   ------   
  1  +2.7878e-01  +6.3754e+00  6.10e+00  3.79e-01  3.65e+00  4.34e-03  6.06e-01  5.75e-01  
  2  +1.3163e-01  +1.0025e+00  8.71e-01  7.27e-02  8.40e-01  2.30e-02  1.70e-01  9.78e-01  
  3  +1.1322e-01  +3.0457e-01  1.91e-01  1.74e-02  1.99e-01  5.66e-03  4.67e-02  7.65e-01  
  4  +9.2140e-02  +1.8734e-01  9.52e-02  6.45e-03  8.25e-02  2.86e-03  2.04e-02  6.94e-01  
  5  +7.7400e-02  +1.2929e-01  5.19e-02  2.78e-03  3.95e-02  1.63e-03  9.31e-03  6.17e-01  
  6  +6.1801e-02  +6.5170e-02  3.37e-03  1.68e-04  2.45e-03  5.57e-05  5.97e-04  9.58e-01  
  7  +6.0786e-02  +6.0987e-02  2.01e-04  1.04e-05  1.48e-04  1.85e-06  3.84e-05  9.36e-01  
  8  +6.0705e-02  +6.0717e-02  1.18e-05  6.20e-07  8.54e-06  8.96e-08  2.63e-06  9.53e-01  
  9  +6.0700e-02  +6.0700e-02  1.20e-07  6.30e-09  8.66e-08  9.06e-10  2.72e-08  9.90e-01  
 10  +6.0700e-02  +6.0700e-02  1.21e-09  6.34e-11  8.71e-10  9.11e-12  2.73e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 351.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:36 PM: Optimal value: 6.070e-02
(CVXPY) Sep 20 03:16:36 PM: Compilation took 2.008e-03 seconds
(CVXPY) Sep 20 03:16:36 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 4, Objective: 0.0607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:36 PM: Your problem has 84 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Finished problem compilation (took 2.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 537
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3882e-01  +2.7769e+01  2.73e+01  8.69e-01  6.73e+00  1.00e+00  1.13e+00   ------   
  1  +2.5944e-01  +6.5682e+00  6.31e+00  3.96e-01  3.60e+00  4.43e-03  6.12e-01  5.58e-01  
  2  +1.1966e-01  +1.3146e+00  1.19e+00  1.00e-01  1.11e+00  2.43e-02  2.24e-01  8.84e-01  
  3  +1.0045e-01  +3.5827e-01  2.58e-01  2.36e-02  2.68e-01  6.59e-03  6.29e-02  7.76e-01  
  4  +7.8642e-02  +2.1929e-01  1.41e-01  1.05e-02  1.30e-01  3.77e-03  3.17e-02  5.61e-01  
  5  +5.3776e-02  +1.1574e-01  6.20e-02  3.49e-03  4.77e-02  8.66e-04  1.21e-02  9.19e-01  
  6  +4.1574e-02  +4.4548e-02  2.97e-03  1.63e-04  2.24e-03  2.55e-05  5.93e-04  9.80e-01  
  7  +4.0795e-02  +4.1063e-02  2.68e-04  1.54e-05  2.04e-04  1.36e-06  5.90e-05  9.02e-01  
  8  +4.0705e-02  +4.0718e-02  1.33e-05  7.88e-07  1.02e-05  9.61e-08  3.36e-06  9.90e-01  
  9  +4.0700e-02  +4.0700e-02  1.34e-07  7.96e-09  1.03e-07  9.65e-10  3.42e-08  9.90e-01  
 10  +4.0700e-02  +4.0700e-02  1.34e-09  7.97e-11  1.03e-09  9.66e-12  3.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 361.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:36 PM: Optimal value: 4.070e-02
(CVXPY) Sep 20 03:16:36 PM: Compilation took 2.008e-03 seconds
(CVXPY) Sep 20 03:16:36 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Iteration: 5, Objective: 0.0407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:36 PM: Your problem has 94 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Finished problem compilation (took 3.191e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 94
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 575
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3484e-01  +2.8011e+01  2.76e+01  8.74e-01  6.56e+00  1.00e+00  1.14e+00   ------   
  1  +2.2768e-01  +7.0005e+00  6.77e+00  4.21e-01  3.59e+00  4.60e-03  6.31e-01  5.29e-01  
  2  +1.0373e-01  +1.4385e+00  1.33e+00  1.17e-01  1.24e+00  2.74e-02  2.55e-01  8.64e-01  
  3  +8.7436e-02  +3.8811e-01  3.01e-01  2.80e-02  3.17e-01  7.98e-03  7.47e-02  7.48e-01  
  4  +6.1733e-02  +2.1744e-01  1.56e-01  1.18e-02  1.47e-01  4.21e-03  3.56e-02  6.25e-01  
  5  +4.2035e-02  +1.4178e-01  9.97e-02  6.01e-03  8.11e-02  1.99e-03  2.03e-02  6.92e-01  
  6  +2.6905e-02  +5.4809e-02  2.79e-02  1.56e-03  2.15e-02  5.43e-04  5.56e-03  7.42e-01  
  7  +2.1014e-02  +2.1795e-02  7.82e-04  4.36e-05  6.01e-04  9.84e-06  1.60e-04  9.74e-01  
  8  +2.0826e-02  +2.0901e-02  7.54e-05  4.57e-06  5.98e-05  6.23e-07  1.81e-05  8.93e-01  
  9  +2.0800e-02  +2.0802e-02  1.19e-06  7.32e-08  9.50e-07  9.37e-09  2.99e-07  9.90e-01  
 10  +2.0800e-02  +2.0800e-02  1.19e-08  7.32e-10  9.50e-09  9.36e-11  2.99e-09  9.90e-01  
 11  +2.0800e-02  +2.0800e-02  1.19e-10  7.33e-12  9.51e-11  9.37e-13  2.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 564.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:36 PM: Optimal value: 2.080e-02
(CVXPY) Sep 20 03:16:36 PM: Compilation took 3.191e-03 seconds
(CVXPY) Sep 20 03:16:36 PM: Solver (including time spent in interface) took 9.925e-04 seconds
Iteration: 6, Objective: 0.0208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:36 PM: Your problem has 104 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 104
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 605
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2879e-01  +2.7942e+01  2.75e+01  8.79e-01  6.37e+00  1.00e+00  1.13e+00   ------   
  1  +1.7752e-01  +7.3563e+00  7.18e+00  4.35e-01  3.49e+00  4.85e-03  6.32e-01  5.18e-01  
  2  +8.4523e-02  +1.1702e+00  1.09e+00  1.00e-01  1.04e+00  2.99e-02  2.26e-01  9.55e-01  
  3  +6.6574e-02  +3.1554e-01  2.49e-01  2.34e-02  2.56e-01  7.84e-03  6.35e-02  7.97e-01  
  4  +4.0237e-02  +1.5127e-01  1.11e-01  8.37e-03  1.02e-01  3.57e-03  2.57e-02  6.65e-01  
  5  +2.7633e-02  +6.7025e-02  3.94e-02  2.71e-03  3.40e-02  1.23e-03  8.87e-03  6.84e-01  
  6  +2.1077e-02  +2.2453e-02  1.38e-03  9.58e-05  1.20e-03  1.21e-05  3.22e-04  9.88e-01  
  7  +2.0788e-02  +2.0923e-02  1.36e-04  1.02e-05  1.21e-04  6.53e-07  3.73e-05  8.97e-01  
  8  +2.0752e-02  +2.0758e-02  5.68e-06  4.38e-07  5.13e-06  2.98e-08  1.67e-06  9.67e-01  
  9  +2.0750e-02  +2.0750e-02  5.69e-08  4.39e-09  5.14e-08  2.98e-10  1.68e-08  9.90e-01  
 10  +2.0750e-02  +2.0750e-02  5.71e-10  4.40e-11  5.16e-10  2.99e-12  1.69e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 424.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:36 PM: Optimal value: 2.075e-02
(CVXPY) Sep 20 03:16:36 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:16:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:36 PM: Your problem has 114 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:36 PM: Finished problem compilation (took 3.545e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 114
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 643
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2632e-01  +2.8015e+01  2.76e+01  8.83e-01  6.23e+00  1.00e+00  1.14e+00   ------   
  1  +1.3052e-01  +7.4425e+00  7.31e+00  4.37e-01  3.35e+00  4.99e-03  6.25e-01  5.31e-01  
  2  +4.9822e-02  +1.1137e+00  1.06e+00  9.78e-02  9.90e-01  3.05e-02  2.23e-01  9.61e-01  
  3  +4.4520e-02  +2.7447e-01  2.30e-01  2.21e-02  2.40e-01  8.22e-03  6.07e-02  7.81e-01  
  4  +1.4589e-02  +9.3786e-02  7.92e-02  6.08e-03  7.34e-02  2.83e-03  1.92e-02  7.46e-01  
  5  +4.3939e-03  +2.5912e-02  2.15e-02  1.57e-03  1.93e-02  6.53e-04  5.20e-03  7.87e-01  
  6  +1.0232e-03  +2.1676e-03  1.14e-03  8.45e-05  1.03e-03  2.80e-05  2.85e-04  9.46e-01  
  7  +8.7737e-04  +1.3561e-03  4.79e-04  3.71e-05  4.34e-04  8.65e-06  1.36e-04  6.51e-01  
  8  +8.0662e-04  +8.4160e-04  3.50e-05  2.80e-06  3.23e-05  4.19e-07  1.06e-05  9.58e-01  
  9  +8.0007e-04  +8.0045e-04  3.77e-07  3.03e-08  3.49e-07  4.39e-09  1.15e-07  9.89e-01  
 10  +8.0000e-04  +8.0000e-04  3.77e-09  3.03e-10  3.49e-09  4.39e-11  1.15e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 440.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:36 PM: Optimal value: 8.000e-04
(CVXPY) Sep 20 03:16:36 PM: Compilation took 3.545e-04 seconds
(CVXPY) Sep 20 03:16:36 PM: Solver (including time spent in interface) took 3.145e-03 seconds
Iteration: 8, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:37 PM: Your problem has 115 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:37 PM: Finished problem compilation (took 3.896e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 140
  nnz(P)        = 0
  nnz(A)        = 647
  cones (total) = 1
    : Nonnegative = 1,  numel = 140

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2584e-01  +2.7998e+01  2.76e+01  8.83e-01  6.22e+00  1.00e+00  1.13e+00   ------   
  1  +1.2471e-01  +7.4799e+00  7.36e+00  4.39e-01  3.35e+00  5.02e-03  6.25e-01  5.32e-01  
  2  +4.9162e-02  +1.1411e+00  1.09e+00  1.01e-01  1.01e+00  3.10e-02  2.28e-01  9.55e-01  
  3  +4.2743e-02  +2.7811e-01  2.35e-01  2.26e-02  2.45e-01  8.35e-03  6.21e-02  7.78e-01  
  4  +1.1832e-02  +1.0027e-01  8.84e-02  7.01e-03  8.26e-02  2.55e-03  2.22e-02  7.72e-01  
  5  +2.7103e-03  +1.7389e-02  1.47e-02  1.14e-03  1.35e-02  3.64e-04  3.78e-03  8.60e-01  
  6  +9.1239e-04  +1.7452e-03  8.33e-04  6.58e-05  7.70e-04  1.53e-05  2.24e-04  9.41e-01  
  7  +8.2313e-04  +1.1714e-03  3.48e-04  2.89e-05  3.25e-04  4.84e-06  1.07e-04  6.64e-01  
  8  +7.6822e-04  +8.4702e-04  7.88e-05  6.65e-06  7.30e-05  7.99e-07  2.66e-05  8.54e-01  
  9  +7.5187e-04  +7.6057e-04  8.71e-06  7.33e-07  8.01e-06  8.64e-08  3.04e-06  8.89e-01  
 10  +7.5002e-04  +7.5012e-04  9.62e-08  8.11e-09  8.84e-08  9.34e-10  3.37e-08  9.89e-01  
 11  +7.5000e-04  +7.5000e-04  9.62e-10  8.11e-11  8.84e-10  9.34e-12  3.37e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 434.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:37 PM: Optimal value: 7.500e-04
(CVXPY) Sep 20 03:16:37 PM: Compilation took 3.896e-03 seconds
(CVXPY) Sep 20 03:16:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x2 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0) <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x3 = 0 AND x7 = 1)                       <-- (term's our objective: 0.36)
 OR (x0 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0)                       <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x8 = 1) <-- (term's our objective: 0.16)
 OR (x1 = 1 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.16)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x7 = 1)            <-- (term's our objective: 0.12)
 OR (x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.2988805770874023
Best over terms:
  Our final objective: 0.36
    Its accruacy: 0.68
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.36
  Highest accruacy: 0.68
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

