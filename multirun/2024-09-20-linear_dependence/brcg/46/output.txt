Command:
python test_script.py -s linear_dependence -d 2 -n 50 --seed 56 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.52
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 2.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:29 PM: Your problem has 30 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:29 PM: Finished problem compilation (took 8.302e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 55
  nnz(P)        = 0
  nnz(A)        = 130
  cones (total) = 1
    : Nonnegative = 1,  numel = 55

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7307e-01  +2.6878e+01  2.64e+01  8.04e-01  4.69e+00  1.00e+00  1.14e+00   ------   
  1  +5.9199e-01  +4.7695e+00  4.18e+00  2.14e-01  2.00e+00  4.38e-03  4.29e-01  7.47e-01  
  2  +4.2886e-01  +1.1269e+00  6.98e-01  3.85e-02  4.04e-01  7.24e-03  1.03e-01  8.37e-01  
  3  +2.9745e-01  +5.0779e-01  2.10e-01  9.79e-03  9.74e-02  6.85e-04  3.80e-02  7.10e-01  
  4  +2.4582e-01  +2.7047e-01  2.47e-02  1.19e-03  1.15e-02  1.55e-04  6.81e-03  8.80e-01  
  5  +2.4018e-01  +2.4051e-01  3.32e-04  1.61e-05  1.55e-04  1.89e-06  9.76e-05  9.86e-01  
  6  +2.4010e-01  +2.4010e-01  3.32e-06  1.61e-07  1.54e-06  1.89e-08  9.77e-07  9.90e-01  
  7  +2.4010e-01  +2.4010e-01  3.32e-08  1.61e-09  1.54e-08  1.89e-10  9.77e-09  9.90e-01  
  8  +2.4010e-01  +2.4010e-01  3.32e-10  1.61e-11  1.54e-10  1.89e-12  9.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 173.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:29 PM: Optimal value: 2.401e-01
(CVXPY) Sep 20 03:03:29 PM: Compilation took 8.302e-03 seconds
(CVXPY) Sep 20 03:03:29 PM: Solver (including time spent in interface) took 8.488e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.2401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:29 PM: Your problem has 31 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:29 PM: Finished problem compilation (took 4.156e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 31
  constraints   = 56
  nnz(P)        = 0
  nnz(A)        = 143
  cones (total) = 1
    : Nonnegative = 1,  numel = 56

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7523e-01  +2.7025e+01  2.65e+01  8.04e-01  4.89e+00  1.00e+00  1.14e+00   ------   
  1  +5.9383e-01  +4.8046e+00  4.21e+00  2.17e-01  2.11e+00  4.33e-03  4.33e-01  7.46e-01  
  2  +4.4812e-01  +1.3813e+00  9.33e-01  5.10e-02  5.63e-01  6.90e-03  1.31e-01  7.63e-01  
  3  +3.2141e-01  +6.6495e-01  3.44e-01  1.50e-02  1.63e-01  2.15e-03  4.92e-02  6.64e-01  
  4  +2.6306e-01  +3.7266e-01  1.10e-01  5.06e-03  5.27e-02  8.66e-04  2.19e-02  6.46e-01  
  5  +2.4182e-01  +2.4846e-01  6.64e-03  3.18e-04  3.26e-03  3.92e-05  1.77e-03  9.34e-01  
  6  +2.4012e-01  +2.4020e-01  8.28e-05  3.97e-06  4.06e-05  5.82e-07  2.43e-05  9.87e-01  
  7  +2.4010e-01  +2.4010e-01  8.27e-07  3.97e-08  4.05e-07  5.81e-09  2.43e-07  9.90e-01  
  8  +2.4010e-01  +2.4010e-01  8.27e-09  3.97e-10  4.05e-09  5.81e-11  2.43e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:29 PM: Optimal value: 2.401e-01
(CVXPY) Sep 20 03:03:29 PM: Compilation took 4.156e-03 seconds
(CVXPY) Sep 20 03:03:29 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:29 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:29 PM: Finished problem compilation (took 2.617e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 151
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6664e-01  +2.7264e+01  2.68e+01  8.10e-01  4.96e+00  1.00e+00  1.18e+00   ------   
  1  +5.6762e-01  +4.8930e+00  4.33e+00  2.30e-01  2.20e+00  4.20e-03  4.70e-01  7.36e-01  
  2  +3.8676e-01  +1.1961e+00  8.09e-01  4.32e-02  4.67e-01  9.71e-03  1.21e-01  8.54e-01  
  3  +3.2717e-01  +8.0958e-01  4.82e-01  2.06e-02  2.20e-01  7.50e-03  6.98e-02  4.94e-01  
  4  +2.5544e-01  +3.2680e-01  7.14e-02  3.58e-03  3.65e-02  5.70e-04  1.73e-02  9.90e-01  
  5  +2.4172e-01  +2.4806e-01  6.34e-03  3.18e-04  3.21e-03  2.84e-05  1.83e-03  9.01e-01  
  6  +2.4018e-01  +2.4048e-01  2.99e-04  1.50e-05  1.51e-04  1.25e-06  9.28e-05  9.50e-01  
  7  +2.4010e-01  +2.4010e-01  3.69e-06  1.82e-07  1.85e-06  1.56e-08  1.16e-06  9.89e-01  
  8  +2.4010e-01  +2.4010e-01  3.69e-08  1.82e-09  1.85e-08  1.56e-10  1.16e-08  9.90e-01  
  9  +2.4010e-01  +2.4010e-01  3.69e-10  1.82e-11  1.85e-10  1.56e-12  1.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:29 PM: Optimal value: 2.401e-01
(CVXPY) Sep 20 03:03:29 PM: Compilation took 2.617e-03 seconds
(CVXPY) Sep 20 03:03:29 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.76
  Our objective: 0.52

IF 
    (x0 = 0) <-- (term's our objective: 0.52)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.814838171005249
Best over terms:
  Our final objective: 0.52
    Its accruacy: 0.76
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.52
  Highest accruacy: 0.76
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

