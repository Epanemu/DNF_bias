Command:
python test_script.py -s linear_dependence -d 3 -n 100 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.32
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 3.

Computed total variation: 0.36
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:42 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:42 PM: Finished problem compilation (took 4.393e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9516e-01  +5.0900e+01  5.04e+01  8.54e-01  7.24e+00  1.00e+00  1.04e+00   ------   
  1  +6.1261e-01  +9.7069e+00  9.09e+00  2.67e-01  3.57e+00  4.23e-03  4.52e-01  6.96e-01  
  2  +5.3215e-01  +1.5500e+00  1.02e+00  5.85e-02  8.99e-01  8.01e-03  1.44e-01  8.77e-01  
  3  +5.2358e-01  +1.4267e+00  9.03e-01  3.72e-02  5.82e-01  1.05e-02  9.45e-02  3.73e-01  
  4  +5.0275e-01  +1.3108e+00  8.08e-01  2.52e-02  3.96e-01  8.92e-03  6.91e-02  4.94e-01  
  5  +4.6437e-01  +9.9399e-01  5.30e-01  1.01e-02  1.61e-01  8.29e-03  3.03e-02  5.76e-01  
  6  +4.0082e-01  +5.0677e-01  1.06e-01  2.42e-03  3.72e-02  5.01e-05  1.02e-02  9.32e-01  
  7  +3.7345e-01  +3.8429e-01  1.08e-02  2.31e-04  3.54e-03  1.14e-05  1.13e-03  9.10e-01  
  8  +3.7014e-01  +3.7027e-01  1.32e-04  2.80e-06  4.28e-05  2.14e-07  1.40e-05  9.90e-01  
  9  +3.7010e-01  +3.7010e-01  1.32e-06  2.80e-08  4.28e-07  2.14e-09  1.40e-07  9.90e-01  
 10  +3.7010e-01  +3.7010e-01  1.32e-08  2.80e-10  4.28e-09  2.14e-11  1.40e-09  9.90e-01  
 11  +3.7010e-01  +3.7010e-01  1.32e-10  2.80e-12  4.28e-11  2.14e-13  1.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 307.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:42 PM: Optimal value: 3.701e-01
(CVXPY) Sep 20 03:04:42 PM: Compilation took 4.393e-03 seconds
(CVXPY) Sep 20 03:04:42 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:43 PM: Your problem has 60 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:43 PM: Finished problem compilation (took 2.119e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 60
  constraints   = 110
  nnz(P)        = 0
  nnz(A)        = 361
  cones (total) = 1
    : Nonnegative = 1,  numel = 110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9059e-01  +5.1384e+01  5.09e+01  8.58e-01  7.67e+00  1.00e+00  1.07e+00   ------   
  1  +5.9806e-01  +9.9074e+00  9.31e+00  2.78e-01  3.82e+00  4.17e-03  4.76e-01  6.87e-01  
  2  +5.2612e-01  +1.7650e+00  1.24e+00  6.67e-02  1.08e+00  8.91e-03  1.62e-01  8.45e-01  
  3  +5.0140e-01  +1.6590e+00  1.16e+00  3.88e-02  6.40e-01  1.17e-02  1.01e-01  4.96e-01  
  4  +4.5359e-01  +1.0081e+00  5.55e-01  1.48e-02  2.45e-01  6.63e-03  4.35e-02  5.84e-01  
  5  +4.0977e-01  +6.9747e-01  2.88e-01  5.05e-03  8.48e-02  5.51e-03  1.52e-02  6.85e-01  
  6  +3.7088e-01  +4.8140e-01  1.11e-01  2.24e-03  3.76e-02  4.43e-05  7.40e-03  8.91e-01  
  7  +3.3973e-01  +3.5952e-01  1.98e-02  3.66e-04  6.26e-03  1.11e-05  1.26e-03  8.35e-01  
  8  +3.3076e-01  +3.3208e-01  1.32e-03  2.36e-05  4.15e-04  2.00e-06  8.33e-05  9.44e-01  
  9  +3.3021e-01  +3.3022e-01  1.32e-05  2.36e-07  4.15e-06  2.00e-08  8.35e-07  9.90e-01  
 10  +3.3020e-01  +3.3020e-01  1.32e-07  2.36e-09  4.15e-08  2.00e-10  8.35e-09  9.90e-01  
 11  +3.3020e-01  +3.3020e-01  1.32e-09  2.36e-11  4.15e-10  2.00e-12  8.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 300.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:43 PM: Optimal value: 3.302e-01
(CVXPY) Sep 20 03:04:43 PM: Compilation took 2.119e-03 seconds
(CVXPY) Sep 20 03:04:43 PM: Solver (including time spent in interface) took 1.999e-03 seconds
Iteration: 2, Objective: 0.3302
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:43 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:43 PM: Finished problem compilation (took 2.088e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 370
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9003e-01  +5.1422e+01  5.09e+01  8.59e-01  7.68e+00  1.00e+00  1.07e+00   ------   
  1  +5.9327e-01  +9.9924e+00  9.40e+00  2.83e-01  3.86e+00  4.15e-03  4.84e-01  6.82e-01  
  2  +5.2288e-01  +1.7519e+00  1.23e+00  6.59e-02  1.07e+00  9.30e-03  1.61e-01  8.57e-01  
  3  +4.9380e-01  +1.5638e+00  1.07e+00  3.58e-02  5.90e-01  1.13e-02  9.41e-02  5.14e-01  
  4  +4.3695e-01  +8.4932e-01  4.12e-01  1.04e-02  1.73e-01  5.66e-03  3.14e-02  6.90e-01  
  5  +4.0071e-01  +7.1836e-01  3.18e-01  5.66e-03  9.41e-02  5.39e-03  1.77e-02  4.64e-01  
  6  +3.5150e-01  +4.4488e-01  9.34e-02  1.97e-03  3.17e-02  3.75e-05  7.62e-03  9.45e-01  
  7  +3.2328e-01  +3.3094e-01  7.65e-03  1.51e-04  2.42e-03  4.48e-06  6.64e-04  9.20e-01  
  8  +3.2025e-01  +3.2036e-01  1.11e-04  2.19e-06  3.49e-05  1.07e-07  1.02e-05  9.86e-01  
  9  +3.2020e-01  +3.2020e-01  1.11e-06  2.18e-08  3.49e-07  1.07e-09  1.02e-07  9.90e-01  
 10  +3.2020e-01  +3.2020e-01  1.11e-08  2.18e-10  3.49e-09  1.07e-11  1.02e-09  9.90e-01  
 11  +3.2020e-01  +3.2020e-01  1.11e-10  2.18e-12  3.49e-11  1.07e-13  1.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 512.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:43 PM: Optimal value: 3.202e-01
(CVXPY) Sep 20 03:04:43 PM: Compilation took 2.088e-03 seconds
(CVXPY) Sep 20 03:04:43 PM: Solver (including time spent in interface) took 1.678e-03 seconds
FULL MODEL:
  Accruacy: 0.68
  Our objective: 0.36000000000000004

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.32)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1) <-- (term's our objective: 0.04)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.1060011386871338
Best over terms:
  Our final objective: 0.32
    Its accruacy: 0.66
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.32
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

