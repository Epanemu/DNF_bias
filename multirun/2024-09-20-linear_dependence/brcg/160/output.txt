Command:
python test_script.py -s linear_dependence -d 5 -n 10 --seed 43 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6000000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 5.

Computed total variation: 0.8
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:55 PM: Your problem has 16 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:55 PM: Finished problem compilation (took 4.193e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 16
  constraints   = 21
  nnz(P)        = 0
  nnz(A)        = 51
  cones (total) = 1
    : Nonnegative = 1,  numel = 21

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.7806e-01  +5.9303e+00  5.55e+00  7.40e-01  2.54e+00  1.00e+00  1.29e+00   ------   
  1  +4.3859e-01  +1.1900e+00  7.51e-01  2.51e-01  1.08e+00  3.72e-03  5.70e-01  7.35e-01  
  2  +2.9096e-01  +4.8120e-01  1.90e-01  6.51e-02  2.99e-01  7.14e-03  2.14e-01  7.10e-01  
  3  +2.1615e-01  +2.6853e-01  5.24e-02  1.34e-02  6.62e-02  2.62e-03  6.24e-02  8.06e-01  
  4  +2.0051e-01  +2.0185e-01  1.34e-03  3.56e-04  1.76e-03  5.93e-05  1.81e-03  9.72e-01  
  5  +2.0010e-01  +2.0012e-01  1.33e-05  3.56e-06  1.76e-05  5.92e-07  1.81e-05  9.90e-01  
  6  +2.0010e-01  +2.0010e-01  1.33e-07  3.56e-08  1.76e-07  5.92e-09  1.81e-07  9.90e-01  
  7  +2.0010e-01  +2.0010e-01  1.33e-09  3.56e-10  1.76e-09  5.92e-11  1.81e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 198.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:55 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 03:06:55 PM: Compilation took 4.193e-03 seconds
(CVXPY) Sep 20 03:06:55 PM: Solver (including time spent in interface) took 1.003e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:55 PM: Your problem has 19 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:55 PM: Finished problem compilation (took 2.679e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 19
  constraints   = 24
  nnz(P)        = 0
  nnz(A)        = 63
  cones (total) = 1
    : Nonnegative = 1,  numel = 24

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.1350e-01  +6.3805e+00  6.07e+00  7.57e-01  2.77e+00  1.00e+00  1.37e+00   ------   
  1  +3.1461e-01  +1.1182e+00  8.04e-01  2.53e-01  1.16e+00  3.67e-03  5.87e-01  7.51e-01  
  2  +1.1656e-01  +2.8877e-01  1.72e-01  5.22e-02  2.61e-01  9.03e-03  1.76e-01  8.21e-01  
  3  +1.0134e-01  +1.0940e-01  8.07e-03  2.67e-03  1.33e-02  6.52e-04  1.04e-02  9.50e-01  
  4  +1.0014e-01  +1.0030e-01  1.62e-04  5.52e-05  2.71e-04  1.11e-05  2.18e-04  9.79e-01  
  5  +1.0010e-01  +1.0011e-01  8.61e-06  2.91e-06  1.43e-05  1.47e-07  1.44e-05  9.53e-01  
  6  +1.0010e-01  +1.0010e-01  9.25e-08  3.06e-08  1.52e-07  1.71e-09  1.59e-07  9.89e-01  
  7  +1.0010e-01  +1.0010e-01  9.25e-10  3.06e-10  1.52e-09  1.71e-11  1.59e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:55 PM: Optimal value: 1.001e-01
(CVXPY) Sep 20 03:06:55 PM: Compilation took 2.679e-03 seconds
(CVXPY) Sep 20 03:06:55 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:55 PM: Your problem has 20 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:55 PM: Finished problem compilation (took 2.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 20
  constraints   = 25
  nnz(P)        = 0
  nnz(A)        = 66
  cones (total) = 1
    : Nonnegative = 1,  numel = 25

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.1002e-01  +6.3596e+00  6.05e+00  7.61e-01  2.77e+00  1.00e+00  1.35e+00   ------   
  1  +3.0547e-01  +1.1138e+00  8.08e-01  2.58e-01  1.17e+00  3.69e-03  5.85e-01  7.47e-01  
  2  +1.1886e-01  +2.7275e-01  1.54e-01  4.70e-02  2.41e-01  8.63e-03  1.56e-01  8.46e-01  
  3  +1.0112e-01  +1.0705e-01  5.93e-03  1.92e-03  9.82e-03  5.11e-04  7.23e-03  9.60e-01  
  4  +1.0015e-01  +1.0031e-01  1.61e-04  5.42e-05  2.74e-04  1.04e-05  2.08e-04  9.71e-01  
  5  +1.0010e-01  +1.0011e-01  9.19e-06  3.14e-06  1.55e-05  1.15e-07  1.57e-05  9.56e-01  
  6  +1.0010e-01  +1.0010e-01  1.03e-07  3.49e-08  1.73e-07  1.37e-09  1.83e-07  9.88e-01  
  7  +1.0010e-01  +1.0010e-01  1.03e-09  3.49e-10  1.73e-09  1.37e-11  1.83e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 86.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:55 PM: Optimal value: 1.001e-01
(CVXPY) Sep 20 03:06:55 PM: Compilation took 2.508e-03 seconds
(CVXPY) Sep 20 03:06:55 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.8

IF 
    (x1 = 0 AND x4 = 0) <-- (term's our objective: 0.8)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.2629060745239258
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.8
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

