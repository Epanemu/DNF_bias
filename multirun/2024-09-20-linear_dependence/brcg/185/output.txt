Command:
python test_script.py -s linear_dependence -d 5 -n 5000 --seed 43 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.27199999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.272
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:51 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:51 PM: Finished problem compilation (took 1.287e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5009e+03  2.50e+03  9.78e-01  6.54e+01  1.00e+00  1.00e+00   ------   
  1  +5.9952e-01  +5.0121e+02  5.01e+02  3.62e-01  3.82e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4602e-01  +7.1509e+01  7.10e+01  1.41e-01  1.86e+01  9.86e-03  2.34e-01  7.80e-01  
  3  +5.0991e-01  +1.6261e+01  1.58e+01  9.94e-02  1.27e+01  2.23e-05  2.30e-01  1.05e-01  
  4  +5.0002e-01  +1.0038e+00  5.04e-01  4.81e-03  6.29e-01  7.99e-06  1.16e-01  9.90e-01  
  5  +4.9911e-01  +9.0065e-01  4.02e-01  3.36e-03  4.43e-01  2.52e-05  1.97e-02  9.02e-01  
  6  +4.8304e-01  +8.2794e-01  3.45e-01  3.86e-04  5.16e-02  3.38e-04  1.14e-03  9.45e-01  
  7  +4.4695e-01  +6.0214e-01  1.55e-01  7.48e-05  9.95e-03  4.28e-04  2.33e-04  8.09e-01  
  8  +4.1613e-01  +4.5687e-01  4.07e-02  1.78e-05  2.35e-03  4.33e-05  7.28e-05  7.99e-01  
  9  +4.0593e-01  +4.0862e-01  2.68e-03  1.15e-06  1.52e-04  4.10e-07  5.07e-06  9.88e-01  
 10  +4.0511e-01  +4.0514e-01  2.75e-05  1.18e-08  1.56e-06  4.20e-09  5.23e-08  9.90e-01  
 11  +4.0510e-01  +4.0510e-01  2.75e-07  1.18e-10  1.56e-08  4.20e-11  5.23e-10  9.90e-01  
 12  +4.0510e-01  +4.0510e-01  2.75e-09  1.18e-12  1.56e-10  4.20e-13  5.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.9853ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:51 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:51 PM: Optimal value: 4.051e-01
(CVXPY) Sep 20 03:07:51 PM: Compilation took 1.287e-02 seconds
(CVXPY) Sep 20 03:07:51 PM: Solver (including time spent in interface) took 2.150e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4051
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:51 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:51 PM: Finished problem compilation (took 8.018e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 24546
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5011e+03  2.50e+03  9.78e-01  6.89e+01  1.00e+00  1.00e+00   ------   
  1  +5.9921e-01  +5.0141e+02  5.01e+02  3.62e-01  4.01e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4561e-01  +7.1064e+01  7.05e+01  1.40e-01  1.94e+01  9.91e-03  2.33e-01  7.84e-01  
  3  +5.0965e-01  +1.5994e+01  1.55e+01  9.83e-02  1.32e+01  2.22e-05  2.29e-01  1.12e-01  
  4  +5.0038e-01  +1.6152e+00  1.11e+00  1.06e-02  1.45e+00  9.12e-06  1.53e-01  6.34e-01  
  5  +4.9992e-01  +7.8416e-01  2.84e-01  2.67e-03  3.69e-01  5.55e-06  3.14e-02  8.56e-01  
  6  +4.8835e-01  +1.1671e+00  6.79e-01  6.84e-04  9.71e-02  2.13e-04  1.84e-03  9.89e-01  
  7  +4.7139e-01  +9.6747e-01  4.96e-01  2.72e-04  3.85e-02  2.85e-04  7.27e-04  6.30e-01  
  8  +4.6109e-01  +9.1161e-01  4.51e-01  1.99e-04  2.82e-02  2.89e-04  5.35e-04  3.04e-01  
  9  +4.5195e-01  +7.4193e-01  2.90e-01  1.26e-04  1.77e-02  5.11e-06  3.49e-04  8.67e-01  
 10  +4.0700e-01  +5.2983e-01  1.23e-01  4.43e-05  6.19e-03  5.05e-06  1.36e-04  7.01e-01  
 11  +3.7036e-01  +3.8560e-01  1.52e-02  5.44e-06  7.55e-04  6.59e-07  1.91e-05  8.95e-01  
 12  +3.6420e-01  +3.6444e-01  2.41e-04  8.56e-08  1.19e-05  1.61e-08  3.11e-07  9.89e-01  
 13  +3.6410e-01  +3.6410e-01  2.41e-06  8.55e-10  1.19e-07  1.61e-10  3.11e-09  9.90e-01  
 14  +3.6410e-01  +3.6410e-01  2.41e-08  8.55e-12  1.19e-09  1.61e-12  3.11e-11  9.90e-01  
 15  +3.6410e-01  +3.6410e-01  2.41e-10  8.55e-14  1.19e-11  1.61e-14  3.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.2854ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:51 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:51 PM: Optimal value: 3.641e-01
(CVXPY) Sep 20 03:07:51 PM: Compilation took 8.018e-03 seconds
(CVXPY) Sep 20 03:07:51 PM: Solver (including time spent in interface) took 2.682e-02 seconds
FULL MODEL:
  Accruacy: 0.636
  Our objective: 0.27199999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.272)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5898048877716064
Best over terms:
  Our final objective: 0.27199999999999996
    Its accruacy: 0.636
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.27199999999999996
  Highest accruacy: 0.636
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

