Command:
python test_script.py -s linear_dependence -d 6 -n 100 --seed 43 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.13999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 6.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:50 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Finished problem compilation (took 4.429e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 463
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9714e-01  +5.0875e+01  5.04e+01  8.65e-01  9.00e+00  1.00e+00  1.04e+00   ------   
  1  +5.8869e-01  +1.0706e+01  1.01e+01  3.38e-01  5.13e+00  3.90e-03  5.44e-01  6.28e-01  
  2  +5.2470e-01  +1.5273e+00  1.00e+00  7.17e-02  1.32e+00  1.33e-02  1.85e-01  9.90e-01  
  3  +5.0034e-01  +7.1704e-01  2.17e-01  1.53e-02  2.87e-01  5.16e-03  5.09e-02  8.23e-01  
  4  +4.8283e-01  +6.8470e-01  2.02e-01  5.76e-03  1.11e-01  9.43e-03  1.93e-02  6.78e-01  
  5  +4.6534e-01  +5.5511e-01  8.98e-02  2.57e-03  4.93e-02  1.18e-03  1.00e-02  6.78e-01  
  6  +4.4610e-01  +4.6498e-01  1.89e-02  4.45e-04  8.51e-03  1.41e-04  2.01e-03  8.49e-01  
  7  +4.4026e-01  +4.4074e-01  4.78e-04  1.04e-05  2.00e-04  1.40e-06  5.33e-05  9.90e-01  
  8  +4.4010e-01  +4.4011e-01  4.78e-06  1.04e-07  1.99e-06  1.40e-08  5.34e-07  9.90e-01  
  9  +4.4010e-01  +4.4010e-01  4.78e-08  1.04e-09  1.99e-08  1.40e-10  5.34e-09  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  4.78e-10  1.04e-11  1.99e-10  1.40e-12  5.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 376.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:50 PM: Optimal value: 4.401e-01
(CVXPY) Sep 20 03:08:50 PM: Compilation took 4.429e-03 seconds
(CVXPY) Sep 20 03:08:50 PM: Solver (including time spent in interface) took 1.012e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:50 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 568
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9212e-01  +5.1531e+01  5.10e+01  8.72e-01  9.16e+00  1.00e+00  1.06e+00   ------   
  1  +5.6400e-01  +1.0836e+01  1.03e+01  3.50e-01  5.12e+00  3.89e-03  5.58e-01  6.25e-01  
  2  +5.0533e-01  +2.0126e+00  1.51e+00  9.04e-02  1.69e+00  1.48e-02  2.19e-01  8.85e-01  
  3  +4.5660e-01  +9.5501e-01  4.98e-01  1.95e-02  3.85e-01  9.38e-03  5.48e-02  8.03e-01  
  4  +4.1327e-01  +7.7400e-01  3.61e-01  8.70e-03  1.74e-01  8.42e-03  2.67e-02  6.04e-01  
  5  +3.6203e-01  +5.2842e-01  1.66e-01  3.31e-03  6.53e-02  3.30e-03  1.14e-02  6.36e-01  
  6  +3.3563e-01  +4.1519e-01  7.96e-02  1.57e-03  3.06e-02  1.24e-03  5.88e-03  5.92e-01  
  7  +3.1162e-01  +3.1491e-01  3.30e-03  6.57e-05  1.27e-03  1.13e-05  2.72e-04  9.69e-01  
  8  +3.1038e-01  +3.1057e-01  1.90e-04  3.80e-06  7.31e-05  5.60e-07  1.61e-05  9.41e-01  
  9  +3.1030e-01  +3.1030e-01  2.76e-06  5.51e-08  1.06e-06  7.04e-09  2.43e-07  9.87e-01  
 10  +3.1030e-01  +3.1030e-01  2.76e-08  5.51e-10  1.06e-08  7.03e-11  2.43e-09  9.90e-01  
 11  +3.1030e-01  +3.1030e-01  2.76e-10  5.51e-12  1.06e-10  7.03e-13  2.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6395ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:50 PM: Optimal value: 3.103e-01
(CVXPY) Sep 20 03:08:50 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 03:08:50 PM: Solver (including time spent in interface) took 2.153e-03 seconds
Iteration: 2, Objective: 0.3103
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:50 PM: Your problem has 83 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 133
  nnz(P)        = 0
  nnz(A)        = 619
  cones (total) = 1
    : Nonnegative = 1,  numel = 133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9035e-01  +5.1569e+01  5.11e+01  8.77e-01  8.95e+00  1.00e+00  1.06e+00   ------   
  1  +5.4498e-01  +1.0860e+01  1.03e+01  3.55e-01  4.91e+00  3.91e-03  5.59e-01  6.24e-01  
  2  +4.8283e-01  +1.7966e+00  1.31e+00  7.04e-02  1.31e+00  1.64e-02  1.76e-01  9.69e-01  
  3  +4.0601e-01  +9.8753e-01  5.82e-01  1.74e-02  3.37e-01  1.27e-02  4.86e-02  7.71e-01  
  4  +3.5836e-01  +7.3352e-01  3.75e-01  8.98e-03  1.74e-01  7.44e-03  2.73e-02  5.70e-01  
  5  +3.1263e-01  +4.4459e-01  1.32e-01  3.12e-03  5.99e-02  1.78e-03  1.08e-02  6.95e-01  
  6  +2.8508e-01  +3.0026e-01  1.52e-02  3.60e-04  6.88e-03  9.11e-05  1.39e-03  9.44e-01  
  7  +2.8096e-01  +2.8221e-01  1.25e-03  2.97e-05  5.63e-04  6.74e-06  1.18e-04  9.16e-01  
  8  +2.8071e-01  +2.8131e-01  5.95e-04  1.36e-05  2.55e-04  3.03e-06  5.86e-05  6.35e-01  
  9  +2.8053e-01  +2.8060e-01  7.55e-05  1.69e-06  3.14e-05  3.48e-07  7.79e-06  8.85e-01  
 10  +2.8050e-01  +2.8050e-01  1.10e-06  2.47e-08  4.58e-07  4.76e-09  1.16e-07  9.90e-01  
 11  +2.8050e-01  +2.8050e-01  1.10e-08  2.47e-10  4.58e-09  4.76e-11  1.16e-09  9.90e-01  
 12  +2.8050e-01  +2.8050e-01  1.10e-10  2.47e-12  4.58e-11  4.77e-13  1.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 479.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:50 PM: Optimal value: 2.805e-01
(CVXPY) Sep 20 03:08:50 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 03:08:50 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 3, Objective: 0.2805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:50 PM: Your problem has 93 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Finished problem compilation (took 3.173e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 657
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8877e-01  +5.1622e+01  5.11e+01  8.81e-01  8.72e+00  1.00e+00  1.06e+00   ------   
  1  +5.2631e-01  +1.0975e+01  1.04e+01  3.60e-01  4.76e+00  3.93e-03  5.63e-01  6.19e-01  
  2  +4.6110e-01  +1.8605e+00  1.40e+00  6.85e-02  1.24e+00  1.76e-02  1.71e-01  9.72e-01  
  3  +3.6687e-01  +1.1469e+00  7.80e-01  2.19e-02  4.08e-01  1.35e-02  5.97e-02  7.84e-01  
  4  +3.0484e-01  +5.8908e-01  2.84e-01  7.44e-03  1.37e-01  4.04e-03  2.31e-02  6.61e-01  
  5  +2.6268e-01  +3.5188e-01  8.92e-02  2.23e-03  4.12e-02  1.08e-03  8.03e-03  7.15e-01  
  6  +2.4374e-01  +2.5229e-01  8.54e-03  2.16e-04  3.94e-03  3.20e-05  8.59e-04  9.90e-01  
  7  +2.4111e-01  +2.4142e-01  3.17e-04  8.10e-06  1.47e-04  7.97e-07  3.33e-05  9.62e-01  
  8  +2.4100e-01  +2.4101e-01  9.22e-06  2.39e-07  4.32e-06  2.64e-08  1.01e-06  9.77e-01  
  9  +2.4100e-01  +2.4100e-01  9.22e-08  2.39e-09  4.32e-08  2.64e-10  1.01e-08  9.90e-01  
 10  +2.4100e-01  +2.4100e-01  9.22e-10  2.39e-11  4.32e-10  2.64e-12  1.01e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 494.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:50 PM: Optimal value: 2.410e-01
(CVXPY) Sep 20 03:08:50 PM: Compilation took 3.173e-03 seconds
(CVXPY) Sep 20 03:08:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2410
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:50 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Finished problem compilation (took 2.811e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 674
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8826e-01  +5.1776e+01  5.13e+01  8.83e-01  8.64e+00  1.00e+00  1.07e+00   ------   
  1  +5.1784e-01  +1.1037e+01  1.05e+01  3.61e-01  4.70e+00  3.95e-03  5.64e-01  6.17e-01  
  2  +4.4654e-01  +2.0273e+00  1.58e+00  7.31e-02  1.29e+00  1.78e-02  1.83e-01  9.38e-01  
  3  +3.5165e-01  +9.7423e-01  6.23e-01  1.82e-02  3.30e-01  9.95e-03  5.11e-02  8.24e-01  
  4  +2.9558e-01  +5.6274e-01  2.67e-01  7.16e-03  1.28e-01  3.47e-03  2.29e-02  6.22e-01  
  5  +2.6419e-01  +3.7151e-01  1.07e-01  2.81e-03  4.97e-02  1.26e-03  1.01e-02  6.12e-01  
  6  +2.4342e-01  +2.5181e-01  8.39e-03  2.20e-04  3.86e-03  3.10e-05  8.84e-04  9.90e-01  
  7  +2.4112e-01  +2.4150e-01  3.83e-04  1.02e-05  1.77e-04  8.81e-07  4.25e-05  9.52e-01  
  8  +2.4101e-01  +2.4104e-01  3.31e-05  8.97e-07  1.55e-05  1.10e-07  3.93e-06  9.64e-01  
  9  +2.4100e-01  +2.4100e-01  3.42e-07  9.27e-09  1.60e-07  1.14e-09  4.07e-08  9.90e-01  
 10  +2.4100e-01  +2.4100e-01  3.42e-09  9.27e-11  1.60e-09  1.14e-11  4.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 498.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:50 PM: Optimal value: 2.410e-01
(CVXPY) Sep 20 03:08:50 PM: Compilation took 2.811e-03 seconds
(CVXPY) Sep 20 03:08:50 PM: Solver (including time spent in interface) took 9.918e-04 seconds
Iteration: 5, Objective: 0.2410
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:50 PM: Your problem has 98 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:50 PM: Finished problem compilation (took 2.990e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 98
  constraints   = 148
  nnz(P)        = 0
  nnz(A)        = 680
  cones (total) = 1
    : Nonnegative = 1,  numel = 148

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8823e-01  +5.1771e+01  5.13e+01  8.83e-01  8.63e+00  1.00e+00  1.07e+00   ------   
  1  +5.1704e-01  +1.1032e+01  1.05e+01  3.62e-01  4.69e+00  3.95e-03  5.64e-01  6.17e-01  
  2  +4.4547e-01  +2.0815e+00  1.64e+00  7.46e-02  1.31e+00  1.78e-02  1.86e-01  9.27e-01  
  3  +3.4912e-01  +9.5909e-01  6.10e-01  1.78e-02  3.22e-01  9.56e-03  5.01e-02  8.26e-01  
  4  +2.8798e-01  +5.1635e-01  2.28e-01  6.21e-03  1.10e-01  2.59e-03  2.03e-02  6.81e-01  
  5  +2.6333e-01  +3.7100e-01  1.08e-01  2.87e-03  5.05e-02  1.11e-03  1.04e-02  5.69e-01  
  6  +2.4253e-01  +2.4873e-01  6.20e-03  1.65e-04  2.88e-03  3.74e-05  6.62e-04  9.57e-01  
  7  +2.4111e-01  +2.4152e-01  4.06e-04  1.11e-05  1.91e-04  1.65e-06  4.63e-05  9.32e-01  
  8  +2.4101e-01  +2.4103e-01  2.47e-05  6.85e-07  1.17e-05  9.64e-08  2.99e-06  9.72e-01  
  9  +2.4100e-01  +2.4100e-01  2.50e-07  6.95e-09  1.19e-07  9.75e-10  3.04e-08  9.90e-01  
 10  +2.4100e-01  +2.4100e-01  2.50e-09  6.95e-11  1.19e-09  9.76e-12  3.04e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 520.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:50 PM: Optimal value: 2.410e-01
(CVXPY) Sep 20 03:08:50 PM: Compilation took 2.990e-03 seconds
(CVXPY) Sep 20 03:08:50 PM: Solver (including time spent in interface) took 1.143e-03 seconds
FULL MODEL:
  Accruacy: 0.73
  Our objective: 0.46

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.14)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1)                       <-- (term's our objective: 0.1)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.1)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 0)                       <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.0928280353546143
Best over terms:
  Our final objective: 0.14000000000000004
    Its accruacy: 0.57
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14000000000000004
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

