Command:
python test_script.py -s linear_dependence -d 4 -n 50 --seed 21 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.48
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.56
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:45 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:45 PM: Finished problem compilation (took 1.032e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8882e-01  +2.6352e+01  2.59e+01  8.14e-01  5.45e+00  1.00e+00  1.10e+00   ------   
  1  +5.8549e-01  +5.2516e+00  4.67e+00  2.77e-01  2.75e+00  4.03e-03  5.10e-01  6.80e-01  
  2  +4.8905e-01  +1.2068e+00  7.18e-01  6.06e-02  7.00e-01  1.07e-02  1.61e-01  8.56e-01  
  3  +3.9776e-01  +7.6142e-01  3.64e-01  1.74e-02  2.06e-01  7.59e-03  5.50e-02  7.23e-01  
  4  +3.4523e-01  +4.4592e-01  1.01e-01  4.62e-03  5.28e-02  1.89e-03  1.97e-02  7.23e-01  
  5  +3.2181e-01  +3.2768e-01  5.88e-03  2.65e-04  3.01e-03  6.37e-05  1.42e-03  9.90e-01  
  6  +3.2012e-01  +3.2018e-01  5.93e-05  2.65e-06  3.01e-05  6.33e-07  1.45e-05  9.90e-01  
  7  +3.2010e-01  +3.2010e-01  5.92e-07  2.65e-08  3.01e-07  6.33e-09  1.45e-07  9.90e-01  
  8  +3.2010e-01  +3.2010e-01  5.92e-09  2.65e-10  3.01e-09  6.33e-11  1.45e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 192.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:45 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:45 PM: Optimal value: 3.201e-01
(CVXPY) Sep 20 03:05:45 PM: Compilation took 1.032e-02 seconds
(CVXPY) Sep 20 03:05:45 PM: Solver (including time spent in interface) took 1.023e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:45 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:45 PM: Finished problem compilation (took 3.502e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 263
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7329e-01  +2.6615e+01  2.61e+01  8.30e-01  5.83e+00  1.00e+00  1.12e+00   ------   
  1  +5.3163e-01  +5.4237e+00  4.89e+00  3.08e-01  2.98e+00  3.96e-03  5.51e-01  6.58e-01  
  2  +4.2371e-01  +1.1330e+00  7.09e-01  5.26e-02  6.41e-01  1.39e-02  1.43e-01  9.26e-01  
  3  +3.0964e-01  +6.4381e-01  3.34e-01  1.53e-02  1.88e-01  7.51e-03  4.87e-02  7.55e-01  
  4  +2.4069e-01  +3.0231e-01  6.16e-02  2.75e-03  3.28e-02  8.77e-04  1.04e-02  8.62e-01  
  5  +2.2193e-01  +2.2696e-01  5.03e-03  2.26e-04  2.67e-03  5.65e-05  9.11e-04  9.47e-01  
  6  +2.2054e-01  +2.2137e-01  8.27e-04  3.71e-05  4.37e-04  8.84e-06  1.53e-04  8.38e-01  
  7  +2.2031e-01  +2.2061e-01  2.97e-04  1.26e-05  1.48e-04  2.97e-06  5.70e-05  7.32e-01  
  8  +2.2021e-01  +2.2022e-01  1.66e-05  7.14e-07  8.36e-06  8.01e-08  3.54e-06  9.44e-01  
  9  +2.2020e-01  +2.2020e-01  1.73e-07  7.48e-09  8.74e-08  8.82e-10  3.87e-08  9.89e-01  
 10  +2.2020e-01  +2.2020e-01  1.73e-09  7.47e-11  8.74e-10  8.81e-12  3.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 221.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:45 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:45 PM: Optimal value: 2.202e-01
(CVXPY) Sep 20 03:05:45 PM: Compilation took 3.502e-03 seconds
(CVXPY) Sep 20 03:05:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2202
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:45 PM: Your problem has 45 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:45 PM: Finished problem compilation (took 3.032e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 45
  constraints   = 70
  nnz(P)        = 0
  nnz(A)        = 265
  cones (total) = 1
    : Nonnegative = 1,  numel = 70

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7319e-01  +2.6603e+01  2.61e+01  8.31e-01  5.80e+00  1.00e+00  1.12e+00   ------   
  1  +5.2826e-01  +5.4156e+00  4.89e+00  3.07e-01  2.95e+00  3.97e-03  5.48e-01  6.59e-01  
  2  +4.1761e-01  +1.1483e+00  7.31e-01  5.27e-02  6.37e-01  1.39e-02  1.42e-01  9.19e-01  
  3  +2.9670e-01  +6.0857e-01  3.12e-01  1.45e-02  1.76e-01  6.29e-03  4.62e-02  7.70e-01  
  4  +2.3025e-01  +2.6728e-01  3.70e-02  1.81e-03  2.11e-02  3.42e-04  6.85e-03  8.85e-01  
  5  +2.2074e-01  +2.2238e-01  1.64e-03  8.13e-05  9.45e-04  1.39e-05  3.21e-04  9.54e-01  
  6  +2.2042e-01  +2.2094e-01  5.22e-04  2.49e-05  2.89e-04  4.84e-06  1.03e-04  7.97e-01  
  7  +2.2025e-01  +2.2039e-01  1.39e-04  5.99e-06  6.98e-05  1.10e-06  2.81e-05  7.83e-01  
  8  +2.2020e-01  +2.2021e-01  5.23e-06  2.27e-07  2.64e-06  2.22e-08  1.17e-06  9.66e-01  
  9  +2.2020e-01  +2.2020e-01  5.20e-08  2.26e-09  2.62e-08  2.22e-10  1.18e-08  9.90e-01  
 10  +2.2020e-01  +2.2020e-01  5.20e-10  2.26e-11  2.62e-10  2.22e-12  1.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 234µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:45 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:45 PM: Optimal value: 2.202e-01
(CVXPY) Sep 20 03:05:45 PM: Compilation took 3.032e-03 seconds
(CVXPY) Sep 20 03:05:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.78
  Our objective: 0.5599999999999999

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.48)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8200719356536865
Best over terms:
  Our final objective: 0.48
    Its accruacy: 0.74
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.48
  Highest accruacy: 0.74
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

