Command:
python test_script.py -s linear_dependence -d 3 -n 1000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30000000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 3.

Computed total variation: 0.30000000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:56 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:56 PM: Finished problem compilation (took 7.275e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 3007
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0087e+02  5.00e+02  9.50e-01  2.43e+01  1.00e+00  1.00e+00   ------   
  1  +6.1951e-01  +9.3123e+01  9.25e+01  2.96e-01  1.25e+01  4.25e-03  4.37e-01  6.94e-01  
  2  +5.5384e-01  +1.5905e+01  1.54e+01  1.20e-01  5.99e+00  6.80e-03  2.15e-01  6.81e-01  
  3  +5.0148e-01  +1.7499e+00  1.25e+00  2.59e-02  1.24e+00  9.04e-04  2.02e-01  3.09e-01  
  4  +4.9987e-01  +7.6798e-01  2.68e-01  5.54e-03  2.73e-01  3.09e-04  4.56e-02  8.37e-01  
  5  +4.7838e-01  +1.0372e+00  5.59e-01  1.57e-03  7.96e-02  5.81e-03  4.59e-03  9.54e-01  
  6  +4.5152e-01  +6.4131e-01  1.90e-01  4.83e-04  2.43e-02  5.71e-05  1.60e-03  7.90e-01  
  7  +4.3222e-01  +5.4138e-01  1.09e-01  2.55e-04  1.27e-02  3.09e-05  9.41e-04  4.50e-01  
  8  +4.2083e-01  +4.8450e-01  6.37e-02  1.40e-04  6.98e-03  3.00e-05  5.63e-04  9.90e-01  
  9  +4.0525e-01  +4.1277e-01  7.53e-03  1.61e-05  8.01e-04  2.88e-06  7.19e-05  8.83e-01  
 10  +4.0321e-01  +4.0356e-01  3.50e-04  7.45e-07  3.71e-05  1.46e-07  3.38e-06  9.90e-01  
 11  +4.0310e-01  +4.0310e-01  3.50e-06  7.45e-09  3.71e-07  1.46e-09  3.38e-08  9.90e-01  
 12  +4.0310e-01  +4.0310e-01  3.50e-08  7.45e-11  3.71e-09  1.46e-11  3.38e-10  9.90e-01  
 13  +4.0310e-01  +4.0310e-01  3.50e-10  7.45e-13  3.71e-11  1.46e-13  3.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4521ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:56 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:56 PM: Optimal value: 4.031e-01
(CVXPY) Sep 20 03:04:56 PM: Compilation took 7.275e-03 seconds
(CVXPY) Sep 20 03:04:56 PM: Solver (including time spent in interface) took 2.536e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4031
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:56 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:56 PM: Finished problem compilation (took 3.765e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 3584
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9901e-01  +5.0184e+02  5.01e+02  9.50e-01  2.60e+01  1.00e+00  1.01e+00   ------   
  1  +6.1596e-01  +9.3830e+01  9.32e+01  3.00e-01  1.35e+01  4.23e-03  4.44e-01  6.91e-01  
  2  +5.5143e-01  +1.5410e+01  1.49e+01  1.15e-01  6.17e+00  7.16e-03  2.09e-01  7.09e-01  
  3  +5.0294e-01  +2.4032e+00  1.90e+00  3.86e-02  1.95e+00  1.65e-03  1.96e-01  2.78e-01  
  4  +5.0045e-01  +1.4887e+00  9.88e-01  1.94e-02  1.01e+00  1.22e-03  9.29e-02  5.72e-01  
  5  +4.8524e-01  +2.3210e+00  1.84e+00  8.39e-03  4.56e-01  6.83e-03  2.41e-02  8.75e-01  
  6  +4.6575e-01  +9.0584e-01  4.40e-01  1.81e-03  9.78e-02  3.15e-04  5.69e-03  8.64e-01  
  7  +4.6044e-01  +9.3960e-01  4.79e-01  1.31e-03  7.12e-02  4.74e-04  3.58e-03  4.80e-01  
  8  +4.5216e-01  +8.9911e-01  4.47e-01  9.29e-04  5.05e-02  4.86e-04  2.50e-03  4.56e-01  
  9  +4.4195e-01  +8.5558e-01  4.14e-01  6.86e-04  3.72e-02  4.87e-04  1.86e-03  3.83e-01  
 10  +4.0987e-01  +6.0190e-01  1.92e-01  4.02e-04  2.15e-02  4.38e-05  1.25e-03  9.90e-01  
 11  +3.6786e-01  +4.2002e-01  5.22e-02  9.31e-05  4.95e-03  1.17e-05  3.21e-04  7.71e-01  
 12  +3.5146e-01  +3.5513e-01  3.67e-03  6.56e-06  3.48e-04  9.08e-07  2.47e-05  9.34e-01  
 13  +3.5012e-01  +3.5016e-01  4.28e-05  7.66e-08  4.06e-06  1.28e-08  2.91e-07  9.90e-01  
 14  +3.5010e-01  +3.5010e-01  4.28e-07  7.66e-10  4.06e-08  1.28e-10  2.91e-09  9.90e-01  
 15  +3.5010e-01  +3.5010e-01  4.28e-09  7.66e-12  4.06e-10  1.28e-12  2.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8297ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:56 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:56 PM: Optimal value: 3.501e-01
(CVXPY) Sep 20 03:04:56 PM: Compilation took 3.765e-03 seconds
(CVXPY) Sep 20 03:04:56 PM: Solver (including time spent in interface) took 4.465e-03 seconds
FULL MODEL:
  Accruacy: 0.65
  Our objective: 0.30000000000000004

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.045243501663208
Best over terms:
  Our final objective: 0.30000000000000004
    Its accruacy: 0.65
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30000000000000004
  Highest accruacy: 0.65
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

