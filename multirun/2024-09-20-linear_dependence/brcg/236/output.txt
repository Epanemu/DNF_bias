Command:
python test_script.py -s linear_dependence -d 6 -n 50000 --seed 56 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.156
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 6.

Computed total variation: 0.156
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:13 PM: Your problem has 25013 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:13 PM: Finished problem compilation (took 8.649e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25013
  constraints   = 50013
  nnz(P)        = 0
  nnz(A)        = 225013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1431e+03  5.14e+03  3.90e-01  1.36e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4210e-01  +6.8128e+02  6.81e+02  1.56e-01  6.86e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7215e+02  1.72e+02  1.40e-01  6.16e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0079e-01  +1.0489e+01  9.99e+00  2.90e-02  1.25e+01  3.47e-06  1.91e-01  4.76e-01  
  5  +4.9999e-01  +1.0385e+00  5.39e-01  1.63e-03  7.25e-01  2.99e-05  1.69e-01  6.63e-01  
  6  +4.9999e-01  +6.2089e-01  1.21e-01  3.62e-04  1.62e-01  1.40e-05  2.73e-02  8.51e-01  
  7  +4.9884e-01  +9.2563e-01  4.27e-01  4.82e-04  2.16e-01  7.19e-04  1.76e-03  9.73e-01  
  8  +4.8223e-01  +8.4580e-01  3.64e-01  3.23e-05  1.45e-02  9.74e-03  1.03e-04  9.43e-01  
  9  +4.7583e-01  +6.1985e-01  1.44e-01  8.53e-06  3.82e-03  3.97e-03  2.69e-05  8.88e-01  
 10  +4.6037e-01  +4.8537e-01  2.50e-02  1.29e-06  5.78e-04  1.09e-04  4.37e-06  8.95e-01  
 11  +4.5428e-01  +4.5780e-01  3.52e-03  1.63e-07  7.30e-05  1.14e-05  6.14e-07  8.89e-01  
 12  +4.5300e-01  +4.5312e-01  1.23e-04  5.13e-09  2.30e-06  2.42e-07  2.16e-08  9.79e-01  
 13  +4.5296e-01  +4.5296e-01  1.23e-06  5.13e-11  2.29e-08  2.42e-09  2.16e-10  9.90e-01  
 14  +4.5296e-01  +4.5296e-01  1.24e-08  5.16e-13  2.31e-10  3.17e-11  2.80e-12  9.90e-01  
 15  +4.5296e-01  +4.5296e-01  1.25e-10  5.14e-15  2.32e-12  4.16e-13  3.63e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 287.7324ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:13 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:13 PM: Optimal value: 4.530e-01
(CVXPY) Sep 20 03:10:13 PM: Compilation took 8.649e-02 seconds
(CVXPY) Sep 20 03:10:13 PM: Solver (including time spent in interface) took 3.159e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4530
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:13 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:13 PM: Finished problem compilation (took 1.142e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 269129
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.34e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1431e+03  5.14e+03  3.90e-01  1.42e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8089e+02  6.80e+02  1.56e-01  7.19e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1083e-01  +1.7193e+02  1.71e+02  1.40e-01  6.45e+01  2.95e-05  2.40e-01  1.13e-01  
  4  +5.0077e-01  +1.0257e+01  9.76e+00  2.84e-02  1.29e+01  3.50e-06  1.89e-01  4.89e-01  
  5  +5.0002e-01  +1.4313e+00  9.31e-01  2.82e-03  1.31e+00  3.26e-05  1.71e-01  5.18e-01  
  6  +5.0000e-01  +6.4270e-01  1.43e-01  4.26e-04  2.00e-01  6.01e-06  2.68e-02  9.90e-01  
  7  +4.9996e-01  +8.9163e-01  3.92e-01  1.09e-03  5.10e-01  4.08e-05  8.76e-03  9.49e-01  
  8  +4.9740e-01  +7.7554e-01  2.78e-01  5.25e-05  2.49e-02  1.54e-03  1.44e-04  9.84e-01  
  9  +4.8992e-01  +7.4531e-01  2.55e-01  1.40e-05  6.60e-03  5.00e-03  3.78e-05  7.50e-01  
 10  +4.8564e-01  +7.0854e-01  2.23e-01  9.89e-06  4.68e-03  4.47e-03  2.68e-05  4.04e-01  
 11  +4.8532e-01  +6.8957e-01  2.04e-01  9.55e-06  4.51e-03  3.19e-03  2.60e-05  1.59e-01  
 12  +4.8582e-01  +6.8336e-01  1.98e-01  9.44e-06  4.46e-03  2.45e-03  2.58e-05  1.56e-01  
 13  +4.7792e-01  +6.4050e-01  1.63e-01  6.78e-06  3.20e-03  1.81e-03  1.88e-05  3.81e-01  
 14  +4.5232e-01  +5.2508e-01  7.28e-02  2.47e-06  1.16e-03  3.05e-04  7.23e-06  8.04e-01  
 15  +4.3059e-01  +4.4972e-01  1.91e-02  6.15e-07  2.89e-04  3.05e-06  1.91e-06  9.24e-01  
 16  +4.2227e-01  +4.2263e-01  3.61e-04  1.14e-08  5.35e-06  3.03e-08  3.62e-08  9.84e-01  
 17  +4.2210e-01  +4.2211e-01  3.61e-06  1.14e-10  5.35e-08  3.03e-10  3.63e-10  9.90e-01  
 18  +4.2210e-01  +4.2210e-01  3.61e-08  1.14e-12  5.35e-10  3.12e-12  3.73e-12  9.90e-01  
 19  +4.2210e-01  +4.2210e-01  3.61e-10  1.13e-14  5.36e-12  3.21e-14  3.84e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 456.9816ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:14 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:14 PM: Optimal value: 4.221e-01
(CVXPY) Sep 20 03:10:14 PM: Compilation took 1.142e-01 seconds
(CVXPY) Sep 20 03:10:14 PM: Solver (including time spent in interface) took 4.909e-01 seconds
FULL MODEL:
  Accruacy: 0.578
  Our objective: 0.15600000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.156)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.5315194129943848
Best over terms:
  Our final objective: 0.15600000000000006
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15600000000000006
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

