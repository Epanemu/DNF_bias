Command:
python test_script.py -s linear_dependence -d 2 -n 10000 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6016
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 2.

Computed total variation: 0.6015999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:02 PM: Your problem has 5005 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:02 PM: Finished problem compilation (took 5.147e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5005
  constraints   = 10005
  nnz(P)        = 0
  nnz(A)        = 25005
  cones (total) = 1
    : Nonnegative = 1,  numel = 10005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9994e-01  +5.0020e+03  5.00e+03  9.83e-01  7.29e+01  1.00e+00  1.00e+00   ------   
  1  +6.3730e-01  +8.7386e+02  8.73e+02  2.67e-01  3.44e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5850e-01  +1.6183e+02  1.61e+02  1.31e-01  1.95e+01  5.31e-03  2.13e-01  5.94e-01  
  3  +5.0112e-01  +6.9746e+00  6.47e+00  4.01e-02  5.63e+00  3.37e-04  2.05e-01  2.47e-01  
  4  +4.9924e-01  +2.0439e+00  1.54e+00  8.44e-03  1.27e+00  3.16e-04  3.23e-02  9.76e-01  
  5  +4.9201e-01  +2.4551e+00  1.96e+00  2.88e-03  4.63e-01  1.96e-03  6.21e-03  8.99e-01  
  6  +4.4318e-01  +2.1124e+00  1.67e+00  4.38e-04  7.11e-02  1.09e-02  8.95e-04  8.57e-01  
  7  +3.5804e-01  +1.3880e+00  1.03e+00  2.37e-04  3.74e-02  4.64e-03  5.34e-04  5.03e-01  
  8  +2.5707e-01  +6.0407e-01  3.47e-01  1.05e-04  1.56e-02  2.28e-05  3.68e-04  4.86e-01  
  9  +2.0736e-01  +2.5175e-01  4.44e-02  1.36e-05  1.99e-03  1.47e-07  7.32e-05  8.53e-01  
 10  +1.9948e-01  +2.0046e-01  9.89e-04  3.04e-07  4.42e-05  6.72e-09  1.92e-06  9.78e-01  
 11  +1.9930e-01  +1.9931e-01  9.86e-06  3.03e-09  4.41e-07  6.70e-11  1.92e-08  9.90e-01  
 12  +1.9930e-01  +1.9930e-01  9.86e-08  3.03e-11  4.41e-09  6.71e-13  1.92e-10  9.90e-01  
 13  +1.9930e-01  +1.9930e-01  9.86e-10  3.03e-13  4.41e-11  6.71e-15  1.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.4958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:02 PM: Optimal value: 1.993e-01
(CVXPY) Sep 20 03:04:02 PM: Compilation took 5.147e-03 seconds
(CVXPY) Sep 20 03:04:02 PM: Solver (including time spent in interface) took 2.999e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.1993
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:02 PM: Your problem has 5006 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:02 PM: Finished problem compilation (took 1.394e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5006
  constraints   = 10006
  nnz(P)        = 0
  nnz(A)        = 27066
  cones (total) = 1
    : Nonnegative = 1,  numel = 10006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9994e-01  +5.0020e+03  5.00e+03  9.83e-01  7.57e+01  1.00e+00  1.00e+00   ------   
  1  +6.3723e-01  +8.7432e+02  8.74e+02  2.67e-01  3.57e+01  4.49e-03  3.89e-01  7.25e-01  
  2  +5.5847e-01  +1.6180e+02  1.61e+02  1.31e-01  2.03e+01  5.33e-03  2.13e-01  5.94e-01  
  3  +5.0111e-01  +6.9619e+00  6.46e+00  4.00e-02  5.84e+00  3.34e-04  2.05e-01  2.48e-01  
  4  +4.9924e-01  +2.0527e+00  1.55e+00  8.49e-03  1.32e+00  3.14e-04  3.24e-02  9.75e-01  
  5  +4.9181e-01  +2.4561e+00  1.96e+00  2.83e-03  4.73e-01  1.99e-03  6.10e-03  9.00e-01  
  6  +4.2536e-01  +1.9936e+00  1.57e+00  3.18e-04  5.35e-02  1.39e-02  6.47e-04  8.96e-01  
  7  +3.4183e-01  +1.2397e+00  8.98e-01  2.41e-04  3.89e-02  1.54e-03  5.84e-04  2.64e-01  
  8  +2.5144e-01  +5.5247e-01  3.01e-01  8.96e-05  1.38e-02  9.56e-06  3.16e-04  5.62e-01  
  9  +2.0400e-01  +2.3089e-01  2.69e-02  8.29e-06  1.25e-03  3.73e-07  4.73e-05  9.19e-01  
 10  +1.9938e-01  +1.9983e-01  4.49e-04  1.38e-07  2.08e-05  5.76e-09  8.73e-07  9.83e-01  
 11  +1.9930e-01  +1.9931e-01  4.48e-06  1.38e-09  2.08e-07  5.75e-11  8.73e-09  9.90e-01  
 12  +1.9930e-01  +1.9930e-01  4.48e-08  1.38e-11  2.08e-09  5.75e-13  8.74e-11  9.90e-01  
 13  +1.9930e-01  +1.9930e-01  4.48e-10  1.38e-13  2.08e-11  5.76e-15  8.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.8579ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:02 PM: Optimal value: 1.993e-01
(CVXPY) Sep 20 03:04:02 PM: Compilation took 1.394e-02 seconds
(CVXPY) Sep 20 03:04:02 PM: Solver (including time spent in interface) took 3.113e-02 seconds
FULL MODEL:
  Accruacy: 0.8008
  Our objective: 0.6016

IF 
    (x0 = 0) <-- (term's our objective: 0.6016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8532195091247559
Best over terms:
  Our final objective: 0.6016
    Its accruacy: 0.8008
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6016
  Highest accruacy: 0.8008
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

