Command:
python test_script.py -s linear_dependence -d 5 -n 10000 --seed 73 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2836
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.28359999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:07 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:07 PM: Finished problem compilation (took 1.447e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0010e+03  5.00e+03  9.85e-01  9.30e+01  1.00e+00  1.00e+00   ------   
  1  +5.9957e-01  +1.0020e+03  1.00e+03  3.64e-01  5.44e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4623e-01  +1.4297e+02  1.42e+02  1.45e-01  2.70e+01  9.84e-03  2.35e-01  7.78e-01  
  3  +5.1069e-01  +3.3654e+01  3.31e+01  1.15e-01  2.11e+01  2.33e-05  2.32e-01  9.12e-02  
  4  +5.0014e-01  +1.2745e+00  7.74e-01  5.22e-03  9.67e-01  5.20e-06  1.33e-01  9.90e-01  
  5  +4.9990e-01  +8.1939e-01  3.19e-01  2.11e-03  3.93e-01  6.81e-06  2.60e-02  8.65e-01  
  6  +4.9049e-01  +9.4285e-01  4.52e-01  2.95e-04  5.61e-02  2.81e-04  8.24e-04  9.73e-01  
  7  +4.6730e-01  +7.5466e-01  2.87e-01  7.62e-05  1.44e-02  4.91e-04  2.17e-04  7.55e-01  
  8  +4.4140e-01  +5.8511e-01  1.44e-01  3.73e-05  6.99e-03  1.28e-04  1.21e-04  5.45e-01  
  9  +4.1486e-01  +4.3791e-01  2.31e-02  5.77e-06  1.08e-03  1.15e-06  2.16e-05  8.98e-01  
 10  +4.0936e-01  +4.1221e-01  2.85e-03  6.93e-07  1.30e-04  1.38e-07  2.74e-06  8.79e-01  
 11  +4.0843e-01  +4.0855e-01  1.17e-04  2.54e-08  4.76e-06  5.19e-09  1.12e-07  9.85e-01  
 12  +4.0840e-01  +4.0840e-01  1.17e-06  2.54e-10  4.76e-08  5.20e-11  1.13e-09  9.90e-01  
 13  +4.0840e-01  +4.0840e-01  1.17e-08  2.54e-12  4.76e-10  5.20e-13  1.13e-11  9.90e-01  
 14  +4.0840e-01  +4.0840e-01  1.17e-10  2.55e-14  4.77e-12  5.52e-15  1.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.2481ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:07 PM: Optimal value: 4.084e-01
(CVXPY) Sep 20 03:08:07 PM: Compilation took 1.447e-02 seconds
(CVXPY) Sep 20 03:08:07 PM: Solver (including time spent in interface) took 4.574e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4084
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:07 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:07 PM: Finished problem compilation (took 1.495e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 49229
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0013e+03  5.00e+03  9.85e-01  9.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.9941e-01  +1.0022e+03  1.00e+03  3.65e-01  5.73e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4600e-01  +1.4248e+02  1.42e+02  1.44e-01  2.83e+01  9.87e-03  2.35e-01  7.81e-01  
  3  +5.1054e-01  +3.3322e+01  3.28e+01  1.14e-01  2.21e+01  2.32e-05  2.31e-01  9.47e-02  
  4  +5.0036e-01  +2.0522e+00  1.55e+00  1.04e-02  2.02e+00  6.11e-06  1.64e-01  6.47e-01  
  5  +5.0010e-01  +1.1526e+00  6.53e-01  4.36e-03  8.55e-01  3.82e-06  7.69e-02  5.49e-01  
  6  +4.9924e-01  +1.5041e+00  1.00e+00  3.56e-03  7.13e-01  2.68e-05  1.14e-02  9.90e-01  
  7  +4.8471e-01  +1.2138e+00  7.29e-01  2.33e-04  4.71e-02  3.25e-04  5.96e-04  9.48e-01  
  8  +4.7549e-01  +1.1129e+00  6.37e-01  1.56e-04  3.16e-02  3.26e-04  4.02e-04  3.73e-01  
  9  +4.6727e-01  +9.1531e-01  4.48e-01  1.01e-04  2.03e-02  9.78e-05  2.63e-04  6.64e-01  
 10  +4.6043e-01  +8.3952e-01  3.79e-01  8.96e-05  1.80e-02  5.20e-05  2.42e-04  3.31e-01  
 11  +4.2285e-01  +6.2177e-01  1.99e-01  3.76e-05  7.49e-03  1.86e-05  1.09e-04  7.51e-01  
 12  +3.7261e-01  +4.0721e-01  3.46e-02  6.26e-06  1.24e-03  1.66e-07  2.13e-05  9.09e-01  
 13  +3.5873e-01  +3.5971e-01  9.77e-04  1.75e-07  3.46e-05  1.11e-08  6.39e-07  9.74e-01  
 14  +3.5830e-01  +3.5831e-01  9.78e-06  1.75e-09  3.46e-07  1.11e-10  6.41e-09  9.90e-01  
 15  +3.5830e-01  +3.5830e-01  9.78e-08  1.75e-11  3.46e-09  1.12e-12  6.42e-11  9.90e-01  
 16  +3.5830e-01  +3.5830e-01  9.78e-10  1.75e-13  3.46e-11  1.12e-14  6.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.273ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:07 PM: Optimal value: 3.583e-01
(CVXPY) Sep 20 03:08:07 PM: Compilation took 1.495e-02 seconds
(CVXPY) Sep 20 03:08:07 PM: Solver (including time spent in interface) took 5.569e-02 seconds
FULL MODEL:
  Accruacy: 0.6418
  Our objective: 0.2836

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2836)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5428941249847412
Best over terms:
  Our final objective: 0.2836
    Its accruacy: 0.6418
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.2836
  Highest accruacy: 0.6418
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

