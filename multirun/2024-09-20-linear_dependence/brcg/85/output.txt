Command:
python test_script.py -s linear_dependence -d 3 -n 50 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.39999999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 3.

Computed total variation: 0.6
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:27 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:27 PM: Finished problem compilation (took 2.736e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 157
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8937e-01  +2.6155e+01  2.57e+01  8.07e-01  5.00e+00  1.00e+00  1.09e+00   ------   
  1  +6.0120e-01  +5.0667e+00  4.47e+00  2.51e-01  2.38e+00  4.20e-03  4.68e-01  7.03e-01  
  2  +5.0669e-01  +1.1369e+00  6.30e-01  5.37e-02  5.77e-01  8.74e-03  1.44e-01  8.49e-01  
  3  +4.4479e-01  +8.2032e-01  3.76e-01  1.77e-02  1.98e-01  8.03e-03  5.31e-02  6.98e-01  
  4  +3.9238e-01  +4.8135e-01  8.90e-02  4.29e-03  4.64e-02  1.20e-03  1.64e-02  7.74e-01  
  5  +3.6240e-01  +3.7052e-01  8.11e-03  3.31e-04  3.57e-03  6.33e-05  1.65e-03  9.50e-01  
  6  +3.6012e-01  +3.6021e-01  8.67e-05  3.53e-06  3.81e-05  6.64e-07  1.79e-05  9.89e-01  
  7  +3.6010e-01  +3.6010e-01  8.67e-07  3.53e-08  3.81e-07  6.64e-09  1.79e-07  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  8.67e-09  3.53e-10  3.81e-09  6.64e-11  1.79e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 176.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:27 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 03:04:27 PM: Compilation took 2.736e-03 seconds
(CVXPY) Sep 20 03:04:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:27 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:27 PM: Finished problem compilation (took 4.030e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 209
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7120e-01  +2.6642e+01  2.62e+01  8.21e-01  5.40e+00  1.00e+00  1.13e+00   ------   
  1  +5.3940e-01  +5.1190e+00  4.58e+00  2.66e-01  2.53e+00  4.14e-03  4.97e-01  6.98e-01  
  2  +4.1071e-01  +1.4281e+00  1.02e+00  6.06e-02  6.84e-01  9.46e-03  1.65e-01  7.70e-01  
  3  +3.2638e-01  +9.1463e-01  5.88e-01  2.91e-02  3.27e-01  6.36e-03  9.03e-02  5.75e-01  
  4  +2.5227e-01  +4.5626e-01  2.04e-01  8.94e-03  9.91e-02  2.18e-03  3.32e-02  6.78e-01  
  5  +2.0896e-01  +2.4279e-01  3.38e-02  1.46e-03  1.59e-02  2.18e-04  6.62e-03  8.94e-01  
  6  +2.0054e-01  +2.0158e-01  1.04e-03  4.58e-05  4.95e-04  4.60e-06  2.29e-04  9.67e-01  
  7  +2.0021e-01  +2.0024e-01  2.83e-05  1.27e-06  1.36e-05  4.68e-08  6.60e-06  9.71e-01  
  8  +2.0020e-01  +2.0020e-01  2.98e-07  1.34e-08  1.44e-07  5.45e-10  7.22e-08  9.89e-01  
  9  +2.0020e-01  +2.0020e-01  2.98e-09  1.34e-10  1.44e-09  5.45e-12  7.22e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 173.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:27 PM: Optimal value: 2.002e-01
(CVXPY) Sep 20 03:04:27 PM: Compilation took 4.030e-03 seconds
(CVXPY) Sep 20 03:04:27 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Iteration: 2, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:27 PM: Your problem has 39 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 39
  constraints   = 64
  nnz(P)        = 0
  nnz(A)        = 215
  cones (total) = 1
    : Nonnegative = 1,  numel = 64

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7060e-01  +2.6633e+01  2.62e+01  8.22e-01  5.40e+00  1.00e+00  1.13e+00   ------   
  1  +5.3443e-01  +5.1543e+00  4.62e+00  2.72e-01  2.58e+00  4.09e-03  5.07e-01  6.92e-01  
  2  +4.1146e-01  +1.4195e+00  1.01e+00  6.07e-02  6.87e-01  9.92e-03  1.64e-01  7.83e-01  
  3  +3.2205e-01  +8.9247e-01  5.70e-01  2.79e-02  3.14e-01  6.40e-03  8.64e-02  6.13e-01  
  4  +2.4533e-01  +4.1383e-01  1.69e-01  7.47e-03  8.25e-02  1.76e-03  2.78e-02  7.19e-01  
  5  +2.0653e-01  +2.2716e-01  2.06e-02  9.35e-04  1.01e-02  9.71e-05  4.22e-03  9.56e-01  
  6  +2.0049e-01  +2.0141e-01  9.23e-04  4.16e-05  4.48e-04  3.59e-06  2.04e-04  9.53e-01  
  7  +2.0021e-01  +2.0025e-01  3.79e-05  1.71e-06  1.84e-05  1.45e-07  9.01e-06  9.72e-01  
  8  +2.0020e-01  +2.0020e-01  4.12e-07  1.87e-08  2.01e-07  1.58e-09  1.01e-07  9.89e-01  
  9  +2.0020e-01  +2.0020e-01  4.12e-09  1.87e-10  2.00e-09  1.57e-11  1.01e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 198.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:27 PM: Optimal value: 2.002e-01
(CVXPY) Sep 20 03:04:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:04:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0) <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.112718343734741
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

