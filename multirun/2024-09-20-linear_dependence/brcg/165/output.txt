Command:
python test_script.py -s linear_dependence -d 5 -n 50 --seed 43 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.39999999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.7200000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:03 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Finished problem compilation (took 5.090e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9202e-01  +2.6140e+01  2.56e+01  8.19e-01  5.79e+00  1.00e+00  1.08e+00   ------   
  1  +5.8304e-01  +5.4137e+00  4.83e+00  3.01e-01  3.07e+00  3.94e-03  5.36e-01  6.54e-01  
  2  +4.9858e-01  +1.1068e+00  6.08e-01  6.01e-02  7.25e-01  1.26e-02  1.64e-01  9.30e-01  
  3  +4.3635e-01  +7.8095e-01  3.45e-01  1.82e-02  2.30e-01  1.08e-02  5.71e-02  7.31e-01  
  4  +3.9136e-01  +4.8553e-01  9.42e-02  4.54e-03  5.60e-02  2.20e-03  1.75e-02  7.61e-01  
  5  +3.6244e-01  +3.7061e-01  8.18e-03  3.42e-04  4.20e-03  9.59e-05  1.71e-03  9.45e-01  
  6  +3.6012e-01  +3.6021e-01  8.30e-05  3.46e-06  4.25e-05  9.59e-07  1.76e-05  9.90e-01  
  7  +3.6010e-01  +3.6010e-01  8.30e-07  3.46e-08  4.25e-07  9.59e-09  1.76e-07  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  8.30e-09  3.46e-10  4.25e-09  9.59e-11  1.76e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 212.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:03 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 03:07:03 PM: Compilation took 5.090e-03 seconds
(CVXPY) Sep 20 03:07:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:03 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Finished problem compilation (took 2.990e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 280
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7115e-01  +2.6967e+01  2.65e+01  8.35e-01  5.99e+00  1.00e+00  1.13e+00   ------   
  1  +4.9734e-01  +5.4631e+00  4.97e+00  3.11e-01  3.06e+00  3.97e-03  5.52e-01  6.58e-01  
  2  +3.6931e-01  +1.4499e+00  1.08e+00  7.04e-02  8.61e-01  1.37e-02  1.84e-01  8.15e-01  
  3  +2.6674e-01  +6.1371e-01  3.47e-01  1.81e-02  2.22e-01  5.31e-03  5.58e-02  7.96e-01  
  4  +2.1623e-01  +3.9587e-01  1.80e-01  8.00e-03  1.02e-01  2.89e-03  2.65e-02  5.79e-01  
  5  +1.7164e-01  +2.0601e-01  3.44e-02  1.45e-03  1.86e-02  4.41e-04  5.39e-03  8.32e-01  
  6  +1.6077e-01  +1.6178e-01  1.01e-03  4.34e-05  5.52e-04  8.00e-06  1.70e-04  9.71e-01  
  7  +1.6042e-01  +1.6046e-01  4.01e-05  1.77e-06  2.21e-05  1.25e-07  7.37e-06  9.62e-01  
  8  +1.6040e-01  +1.6040e-01  4.45e-07  1.98e-08  2.47e-07  1.50e-09  8.58e-08  9.89e-01  
  9  +1.6040e-01  +1.6040e-01  4.45e-09  1.98e-10  2.47e-09  1.50e-11  8.58e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 253.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:03 PM: Optimal value: 1.604e-01
(CVXPY) Sep 20 03:07:03 PM: Compilation took 2.990e-03 seconds
(CVXPY) Sep 20 03:07:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:03 PM: Your problem has 55 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 80
  nnz(P)        = 0
  nnz(A)        = 322
  cones (total) = 1
    : Nonnegative = 1,  numel = 80

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6681e-01  +2.6978e+01  2.65e+01  8.44e-01  5.87e+00  1.00e+00  1.13e+00   ------   
  1  +4.7254e-01  +5.6359e+00  5.16e+00  3.36e-01  3.06e+00  3.95e-03  5.81e-01  6.35e-01  
  2  +3.2112e-01  +1.3359e+00  1.01e+00  6.50e-02  7.59e-01  1.73e-02  1.75e-01  8.80e-01  
  3  +2.3093e-01  +5.9586e-01  3.65e-01  1.96e-02  2.31e-01  6.35e-03  6.11e-02  7.29e-01  
  4  +1.8160e-01  +2.8751e-01  1.06e-01  5.59e-03  6.50e-02  1.63e-03  1.96e-02  7.45e-01  
  5  +1.6254e-01  +1.7217e-01  9.63e-03  5.17e-04  5.93e-03  1.22e-04  1.94e-03  9.25e-01  
  6  +1.6065e-01  +1.6160e-01  9.46e-04  5.15e-05  5.85e-04  9.94e-06  2.00e-04  8.98e-01  
  7  +1.6050e-01  +1.6085e-01  3.57e-04  1.97e-05  2.22e-04  3.42e-06  8.32e-05  7.98e-01  
  8  +1.6040e-01  +1.6042e-01  1.49e-05  8.23e-07  9.24e-06  1.18e-07  3.62e-06  9.58e-01  
  9  +1.6040e-01  +1.6040e-01  1.50e-07  8.28e-09  9.30e-08  1.18e-09  3.66e-08  9.90e-01  
 10  +1.6040e-01  +1.6040e-01  1.50e-09  8.28e-11  9.30e-10  1.18e-11  3.66e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 271.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:03 PM: Optimal value: 1.604e-01
(CVXPY) Sep 20 03:07:03 PM: Compilation took 2.999e-03 seconds
(CVXPY) Sep 20 03:07:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:03 PM: Your problem has 56 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Finished problem compilation (took 3.062e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 81
  nnz(P)        = 0
  nnz(A)        = 327
  cones (total) = 1
    : Nonnegative = 1,  numel = 81

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6066e-01  +2.7841e+01  2.74e+01  8.46e-01  5.89e+00  1.00e+00  1.17e+00   ------   
  1  +4.4426e-01  +5.7255e+00  5.28e+00  3.32e-01  3.06e+00  3.94e-03  5.96e-01  6.40e-01  
  2  +2.6439e-01  +1.4049e+00  1.14e+00  6.73e-02  7.89e-01  1.59e-02  1.83e-01  8.46e-01  
  3  +1.9276e-01  +4.8493e-01  2.92e-01  1.70e-02  1.99e-01  4.51e-03  5.41e-02  7.44e-01  
  4  +1.6026e-01  +2.7587e-01  1.16e-01  6.47e-03  7.58e-02  1.72e-03  2.33e-02  6.72e-01  
  5  +1.4244e-01  +1.5286e-01  1.04e-02  5.91e-04  6.83e-03  1.30e-04  2.32e-03  9.16e-01  
  6  +1.4079e-01  +1.4227e-01  1.48e-03  8.52e-05  9.76e-04  1.66e-05  3.45e-04  8.55e-01  
  7  +1.4060e-01  +1.4123e-01  6.28e-04  3.59e-05  4.15e-04  5.99e-06  1.56e-04  7.81e-01  
  8  +1.4045e-01  +1.4059e-01  1.44e-04  7.71e-06  9.20e-05  1.18e-06  3.85e-05  7.93e-01  
  9  +1.4040e-01  +1.4041e-01  6.10e-06  3.19e-07  3.82e-06  3.85e-08  1.74e-06  9.57e-01  
 10  +1.4040e-01  +1.4040e-01  6.12e-08  3.19e-09  3.83e-08  3.85e-10  1.76e-08  9.90e-01  
 11  +1.4040e-01  +1.4040e-01  6.12e-10  3.19e-11  3.83e-10  3.85e-12  1.76e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 279.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:03 PM: Optimal value: 1.404e-01
(CVXPY) Sep 20 03:07:03 PM: Compilation took 3.062e-03 seconds
(CVXPY) Sep 20 03:07:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:03 PM: Your problem has 57 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:03 PM: Finished problem compilation (took 2.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 82
  nnz(P)        = 0
  nnz(A)        = 332
  cones (total) = 1
    : Nonnegative = 1,  numel = 82

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5968e-01  +2.7795e+01  2.73e+01  8.47e-01  5.88e+00  1.00e+00  1.17e+00   ------   
  1  +4.3875e-01  +5.7248e+00  5.29e+00  3.33e-01  3.05e+00  3.95e-03  5.95e-01  6.39e-01  
  2  +2.5854e-01  +1.3919e+00  1.13e+00  6.74e-02  7.87e-01  1.59e-02  1.83e-01  8.46e-01  
  3  +1.8810e-01  +4.8858e-01  3.00e-01  1.76e-02  2.06e-01  4.62e-03  5.61e-02  7.38e-01  
  4  +1.5219e-01  +2.2361e-01  7.14e-02  4.25e-03  4.89e-02  9.78e-04  1.55e-02  7.68e-01  
  5  +1.4104e-01  +1.4412e-01  3.08e-03  1.87e-04  2.13e-03  3.37e-05  7.32e-04  9.55e-01  
  6  +1.4054e-01  +1.4101e-01  4.76e-04  2.89e-05  3.23e-04  2.73e-06  1.28e-04  9.66e-01  
  7  +1.4041e-01  +1.4046e-01  4.40e-05  2.62e-06  2.91e-05  1.84e-07  1.38e-05  9.08e-01  
  8  +1.4040e-01  +1.4040e-01  5.51e-07  3.26e-08  3.62e-07  2.24e-09  1.80e-07  9.87e-01  
  9  +1.4040e-01  +1.4040e-01  5.51e-09  3.26e-10  3.62e-09  2.24e-11  1.80e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 256.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:03 PM: Optimal value: 1.404e-01
(CVXPY) Sep 20 03:07:03 PM: Compilation took 2.003e-03 seconds
(CVXPY) Sep 20 03:07:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.86
  Our objective: 0.72

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.16)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.956566572189331
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

