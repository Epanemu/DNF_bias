Command:
python test_script.py -s linear_dependence -d 3 -n 1000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.37
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 3.

Computed total variation: 0.37
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:54 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:54 PM: Finished problem compilation (took 5.887e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 3007
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0108e+02  5.01e+02  9.50e-01  2.45e+01  1.00e+00  1.00e+00   ------   
  1  +6.1924e-01  +9.3116e+01  9.25e+01  2.96e-01  1.26e+01  4.25e-03  4.37e-01  6.94e-01  
  2  +5.5311e-01  +1.5733e+01  1.52e+01  1.18e-01  5.96e+00  6.84e-03  2.12e-01  6.88e-01  
  3  +5.0104e-01  +1.9573e+00  1.46e+00  2.98e-02  1.43e+00  1.72e-03  1.96e-01  3.57e-01  
  4  +4.9782e-01  +9.1894e-01  4.21e-01  7.59e-03  3.80e-01  1.36e-03  3.43e-02  8.88e-01  
  5  +4.5651e-01  +8.5542e-01  3.99e-01  1.02e-03  5.25e-02  1.45e-02  2.74e-03  9.31e-01  
  6  +4.3375e-01  +7.0007e-01  2.66e-01  7.11e-04  3.61e-02  6.01e-03  2.14e-03  3.11e-01  
  7  +3.9469e-01  +4.8167e-01  8.70e-02  2.28e-04  1.14e-02  5.00e-05  8.60e-04  7.64e-01  
  8  +3.7349e-01  +3.8100e-01  7.50e-03  1.81e-05  9.03e-04  2.05e-06  8.20e-05  9.20e-01  
  9  +3.7113e-01  +3.7122e-01  9.40e-05  2.15e-07  1.07e-05  2.66e-08  1.05e-06  9.90e-01  
 10  +3.7110e-01  +3.7110e-01  9.40e-07  2.15e-09  1.07e-07  2.66e-10  1.05e-08  9.90e-01  
 11  +3.7110e-01  +3.7110e-01  9.40e-09  2.15e-11  1.07e-09  2.67e-12  1.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3625ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:54 PM: Optimal value: 3.711e-01
(CVXPY) Sep 20 03:04:54 PM: Compilation took 5.887e-03 seconds
(CVXPY) Sep 20 03:04:54 PM: Solver (including time spent in interface) took 2.450e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3711
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:54 PM: Your problem has 512 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:54 PM: Finished problem compilation (took 3.788e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 512
  constraints   = 1012
  nnz(P)        = 0
  nnz(A)        = 3799
  cones (total) = 1
    : Nonnegative = 1,  numel = 1012

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9903e-01  +5.0138e+02  5.01e+02  9.50e-01  2.68e+01  1.00e+00  1.01e+00   ------   
  1  +6.1526e-01  +9.4390e+01  9.38e+01  3.04e-01  1.40e+01  4.21e-03  4.52e-01  6.87e-01  
  2  +5.5112e-01  +1.5385e+01  1.48e+01  1.16e-01  6.38e+00  7.38e-03  2.11e-01  7.15e-01  
  3  +5.0029e-01  +1.8829e+00  1.38e+00  2.86e-02  1.50e+00  1.81e-03  1.89e-01  4.57e-01  
  4  +4.9695e-01  +1.1392e+00  6.42e-01  1.11e-02  6.03e-01  1.89e-03  4.37e-02  8.72e-01  
  5  +4.8942e-01  +1.1107e+00  6.21e-01  5.86e-03  3.27e-01  4.10e-03  1.71e-02  6.31e-01  
  6  +4.9010e-01  +1.1362e+00  6.46e-01  5.73e-03  3.21e-01  3.64e-03  1.62e-02  2.59e-01  
  7  +4.8439e-01  +1.1118e+00  6.27e-01  3.95e-03  2.22e-01  4.91e-03  1.07e-02  3.54e-01  
  8  +4.7559e-01  +1.1251e+00  6.50e-01  2.24e-03  1.27e-01  3.68e-03  5.68e-03  9.90e-01  
  9  +4.5095e-01  +9.7597e-01  5.25e-01  1.20e-03  6.77e-02  4.16e-03  3.08e-03  4.75e-01  
 10  +4.2245e-01  +8.1096e-01  3.89e-01  7.70e-04  4.32e-02  2.44e-03  2.07e-03  4.59e-01  
 11  +3.7383e-01  +5.6438e-01  1.91e-01  3.60e-04  1.99e-02  2.31e-05  1.08e-03  8.30e-01  
 12  +3.3111e-01  +3.7632e-01  4.52e-02  8.36e-05  4.55e-03  9.19e-06  2.90e-04  7.86e-01  
 13  +3.1639e-01  +3.1963e-01  3.23e-03  5.99e-06  3.25e-04  5.70e-07  2.31e-05  9.25e-01  
 14  +3.1512e-01  +3.1517e-01  4.81e-05  8.91e-08  4.83e-06  1.49e-08  3.49e-07  9.90e-01  
 15  +3.1510e-01  +3.1510e-01  4.81e-07  8.91e-10  4.83e-08  1.49e-10  3.49e-09  9.90e-01  
 16  +3.1510e-01  +3.1510e-01  4.81e-09  8.91e-12  4.83e-10  1.49e-12  3.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3648ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:54 PM: Optimal value: 3.151e-01
(CVXPY) Sep 20 03:04:54 PM: Compilation took 3.788e-03 seconds
(CVXPY) Sep 20 03:04:54 PM: Solver (including time spent in interface) took 4.849e-03 seconds
FULL MODEL:
  Accruacy: 0.685
  Our objective: 0.37000000000000005

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.37)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.062425136566162
Best over terms:
  Our final objective: 0.37000000000000005
    Its accruacy: 0.685
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.37000000000000005
  Highest accruacy: 0.685
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

