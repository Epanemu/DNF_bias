Command:
python test_script.py -s linear_dependence -d 4 -n 10000 --seed 43 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2828
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.28280000000000005
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:30 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:30 PM: Finished problem compilation (took 1.359e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0010e+03  5.00e+03  9.84e-01  8.61e+01  1.00e+00  1.00e+00   ------   
  1  +6.0817e-01  +9.6883e+02  9.68e+02  3.38e-01  4.79e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5098e-01  +1.5076e+02  1.50e+02  1.40e-01  2.43e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1053e-01  +3.2023e+01  3.15e+01  1.11e-01  1.88e+01  1.74e-05  2.25e-01  6.85e-02  
  4  +5.0001e-01  +1.1543e+00  6.54e-01  4.39e-03  7.54e-01  4.83e-06  1.41e-01  9.63e-01  
  5  +4.9965e-01  +8.6575e-01  3.66e-01  2.37e-03  4.10e-01  9.36e-06  2.49e-02  8.85e-01  
  6  +4.7817e-01  +8.7845e-01  4.00e-01  2.03e-04  3.57e-02  4.05e-04  5.80e-04  9.79e-01  
  7  +4.3879e-01  +5.8711e-01  1.48e-01  3.62e-05  6.33e-03  3.61e-04  1.11e-04  8.38e-01  
  8  +4.0898e-01  +4.3587e-01  2.69e-02  6.71e-06  1.16e-03  1.41e-05  2.51e-05  9.36e-01  
  9  +4.0312e-01  +4.0599e-01  2.86e-03  6.89e-07  1.19e-04  1.41e-06  2.77e-06  8.94e-01  
 10  +4.0222e-01  +4.0230e-01  7.63e-05  1.67e-08  2.89e-06  2.14e-08  7.42e-08  9.86e-01  
 11  +4.0220e-01  +4.0220e-01  7.63e-07  1.66e-10  2.89e-08  2.14e-10  7.42e-10  9.90e-01  
 12  +4.0220e-01  +4.0220e-01  7.64e-09  1.67e-12  2.89e-10  2.30e-12  7.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.0139ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:30 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 03:06:30 PM: Compilation took 1.359e-02 seconds
(CVXPY) Sep 20 03:06:30 PM: Solver (including time spent in interface) took 3.440e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:30 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:30 PM: Finished problem compilation (took 1.411e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 44164
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +5.0014e+03  5.00e+03  9.84e-01  9.18e+01  1.00e+00  1.00e+00   ------   
  1  +6.0795e-01  +9.6944e+02  9.69e+02  3.39e-01  5.11e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5069e-01  +1.5015e+02  1.50e+02  1.40e-01  2.58e+01  8.26e-03  2.27e-01  7.28e-01  
  3  +5.1041e-01  +3.1760e+01  3.12e+01  1.10e-01  2.00e+01  1.75e-05  2.24e-01  7.10e-02  
  4  +5.0021e-01  +1.8195e+00  1.32e+00  8.84e-03  1.61e+00  5.40e-06  1.70e-01  6.05e-01  
  5  +5.0002e-01  +9.9102e-01  4.91e-01  3.28e-03  6.02e-01  3.07e-06  6.11e-02  6.53e-01  
  6  +4.9234e-01  +2.0700e+00  1.58e+00  1.27e-03  2.39e-01  1.41e-04  3.37e-03  9.82e-01  
  7  +4.6921e-01  +1.3861e+00  9.17e-01  2.29e-04  4.33e-02  3.43e-04  6.01e-04  8.25e-01  
  8  +4.6685e-01  +1.1303e+00  6.63e-01  1.43e-04  2.70e-02  1.70e-04  3.72e-04  6.14e-01  
  9  +4.5659e-01  +1.0192e+00  5.63e-01  1.12e-04  2.10e-02  1.39e-04  2.96e-04  2.46e-01  
 10  +4.5284e-01  +8.4270e-01  3.90e-01  7.93e-05  1.49e-02  3.44e-05  2.14e-04  6.91e-01  
 11  +4.1951e-01  +6.0189e-01  1.82e-01  3.51e-05  6.54e-03  6.08e-06  1.03e-04  9.40e-01  
 12  +3.7170e-01  +4.0387e-01  3.22e-02  5.76e-06  1.07e-03  6.31e-07  1.96e-05  8.57e-01  
 13  +3.5909e-01  +3.6002e-01  9.22e-04  1.65e-07  3.04e-05  1.92e-08  5.98e-07  9.74e-01  
 14  +3.5870e-01  +3.5871e-01  9.22e-06  1.65e-09  3.05e-07  1.92e-10  5.99e-09  9.90e-01  
 15  +3.5870e-01  +3.5870e-01  9.22e-08  1.65e-11  3.05e-09  1.92e-12  6.00e-11  9.90e-01  
 16  +3.5870e-01  +3.5870e-01  9.22e-10  1.65e-13  3.05e-11  1.93e-14  6.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.8624ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:30 PM: Optimal value: 3.587e-01
(CVXPY) Sep 20 03:06:30 PM: Compilation took 1.411e-02 seconds
(CVXPY) Sep 20 03:06:30 PM: Solver (including time spent in interface) took 4.968e-02 seconds
FULL MODEL:
  Accruacy: 0.6414
  Our objective: 0.2828

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2828)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4852066040039062
Best over terms:
  Our final objective: 0.2828
    Its accruacy: 0.6414
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.2828
  Highest accruacy: 0.6414
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

