Command:
python test_script.py -s linear_dependence -d 8 -n 10 --seed 73 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 8.

Computed total variation: 0.8
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:17 PM: Your problem has 22 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:17 PM: Finished problem compilation (took 4.243e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 22
  constraints   = 27
  nnz(P)        = 0
  nnz(A)        = 72
  cones (total) = 1
    : Nonnegative = 1,  numel = 27

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.0012e-01  +6.4002e+00  6.00e+00  7.65e-01  2.71e+00  1.00e+00  1.35e+00   ------   
  1  +3.4358e-01  +1.0431e+00  7.00e-01  2.40e-01  1.02e+00  3.44e-03  5.47e-01  8.07e-01  
  2  +1.6983e-01  +4.0001e-01  2.30e-01  6.53e-02  3.02e-01  1.01e-02  2.16e-01  7.55e-01  
  3  +1.0962e-01  +1.4017e-01  3.05e-02  7.40e-03  3.65e-02  2.31e-03  3.24e-02  9.68e-01  
  4  +1.0042e-01  +1.0115e-01  7.28e-04  1.75e-04  8.71e-04  5.39e-05  8.01e-04  9.77e-01  
  5  +1.0021e-01  +1.0022e-01  1.71e-05  4.43e-06  2.17e-05  5.24e-07  2.04e-05  9.75e-01  
  6  +1.0020e-01  +1.0020e-01  2.04e-07  5.54e-08  2.66e-07  7.62e-09  2.62e-07  9.88e-01  
  7  +1.0020e-01  +1.0020e-01  2.04e-09  5.54e-10  2.66e-09  7.61e-11  2.62e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 125.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:17 PM: Optimal value: 1.002e-01
(CVXPY) Sep 20 03:13:17 PM: Compilation took 4.243e-03 seconds
(CVXPY) Sep 20 03:13:17 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:17 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:17 PM: Finished problem compilation (took 3.685e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 105
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.7218e-01  +6.2694e+00  5.90e+00  8.00e-01  2.82e+00  1.00e+00  1.33e+00   ------   
  1  +2.7318e-01  +9.6442e-01  6.91e-01  2.71e-01  1.04e+00  3.49e-03  5.34e-01  8.04e-01  
  2  +1.3165e-01  +3.2449e-01  1.93e-01  5.90e-02  3.01e-01  8.59e-03  1.81e-01  7.79e-01  
  3  +1.0327e-01  +1.1188e-01  8.61e-03  2.64e-03  1.37e-02  6.96e-04  9.41e-03  9.53e-01  
  4  +1.0028e-01  +1.0053e-01  2.57e-04  8.09e-05  4.15e-04  1.73e-05  2.91e-04  9.69e-01  
  5  +1.0020e-01  +1.0030e-01  9.94e-05  3.23e-05  1.59e-04  6.13e-06  1.24e-04  6.13e-01  
  6  +1.0015e-01  +1.0016e-01  4.89e-06  1.75e-06  8.14e-06  1.72e-07  7.16e-06  9.56e-01  
  7  +1.0015e-01  +1.0015e-01  5.60e-08  2.01e-08  9.31e-08  2.01e-09  8.30e-08  9.88e-01  
  8  +1.0015e-01  +1.0015e-01  5.60e-10  2.00e-10  9.31e-10  2.01e-11  8.30e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 105.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:17 PM: Optimal value: 1.002e-01
(CVXPY) Sep 20 03:13:17 PM: Compilation took 3.685e-03 seconds
(CVXPY) Sep 20 03:13:17 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:17 PM: Your problem has 33 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:17 PM: Finished problem compilation (took 2.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 33
  constraints   = 38
  nnz(P)        = 0
  nnz(A)        = 111
  cones (total) = 1
    : Nonnegative = 1,  numel = 38

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3897e-01  +6.5333e+00  6.19e+00  8.05e-01  2.93e+00  1.00e+00  1.38e+00   ------   
  1  +2.3000e-01  +9.2758e-01  6.98e-01  2.68e-01  1.07e+00  3.37e-03  5.47e-01  8.24e-01  
  2  +1.2065e-01  +2.9148e-01  1.71e-01  5.77e-02  3.11e-01  7.74e-03  1.76e-01  8.00e-01  
  3  +1.0177e-01  +1.0811e-01  6.34e-03  2.21e-03  1.20e-02  5.01e-04  7.63e-03  9.62e-01  
  4  +1.0023e-01  +1.0063e-01  4.01e-04  1.46e-04  7.75e-04  2.61e-05  5.05e-04  9.34e-01  
  5  +1.0012e-01  +1.0018e-01  5.99e-05  2.62e-05  1.21e-04  1.52e-06  1.02e-04  8.98e-01  
  6  +1.0010e-01  +1.0010e-01  3.02e-06  1.24e-06  5.74e-06  7.76e-08  6.33e-06  9.63e-01  
  7  +1.0010e-01  +1.0010e-01  3.03e-08  1.23e-08  5.74e-08  7.76e-10  6.45e-08  9.90e-01  
  8  +1.0010e-01  +1.0010e-01  3.03e-10  1.23e-10  5.74e-10  7.76e-12  6.45e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 104.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:17 PM: Optimal value: 1.001e-01
(CVXPY) Sep 20 03:13:17 PM: Compilation took 2.007e-03 seconds
(CVXPY) Sep 20 03:13:17 PM: Solver (including time spent in interface) took 9.916e-04 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.8

IF 
    (x3 = 1 AND x6 = 1) <-- (term's our objective: 0.8)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7003870010375977
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.8
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

