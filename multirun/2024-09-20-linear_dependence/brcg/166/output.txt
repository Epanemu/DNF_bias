Command:
python test_script.py -s linear_dependence -d 5 -n 50 --seed 56 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.44
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.64
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:05 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:05 PM: Finished problem compilation (took 3.880e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9050e-01  +2.6458e+01  2.60e+01  8.20e-01  5.81e+00  1.00e+00  1.09e+00   ------   
  1  +5.7770e-01  +5.4158e+00  4.84e+00  2.99e-01  3.07e+00  3.92e-03  5.40e-01  6.59e-01  
  2  +4.8501e-01  +1.2102e+00  7.25e-01  6.53e-02  7.95e-01  1.26e-02  1.74e-01  8.85e-01  
  3  +4.0351e-01  +7.5618e-01  3.53e-01  1.81e-02  2.29e-01  9.11e-03  5.68e-02  7.30e-01  
  4  +3.4606e-01  +4.2690e-01  8.08e-02  3.67e-03  4.48e-02  1.39e-03  1.60e-02  7.84e-01  
  5  +3.2198e-01  +3.2824e-01  6.26e-03  2.69e-04  3.26e-03  8.21e-05  1.39e-03  9.23e-01  
  6  +3.2012e-01  +3.2018e-01  6.28e-05  2.69e-06  3.27e-05  8.17e-07  1.42e-05  9.90e-01  
  7  +3.2010e-01  +3.2010e-01  6.28e-07  2.69e-08  3.27e-07  8.17e-09  1.42e-07  9.90e-01  
  8  +3.2010e-01  +3.2010e-01  6.28e-09  2.69e-10  3.27e-09  8.17e-11  1.42e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 204µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:05 PM: Optimal value: 3.201e-01
(CVXPY) Sep 20 03:07:05 PM: Compilation took 3.880e-03 seconds
(CVXPY) Sep 20 03:07:05 PM: Solver (including time spent in interface) took 1.009e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:06 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:06 PM: Finished problem compilation (took 5.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 273
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8174e-01  +2.6629e+01  2.61e+01  8.35e-01  5.91e+00  1.00e+00  1.12e+00   ------   
  1  +5.3188e-01  +5.4434e+00  4.91e+00  3.14e-01  3.02e+00  3.94e-03  5.53e-01  6.55e-01  
  2  +4.2048e-01  +1.3334e+00  9.13e-01  6.59e-02  7.94e-01  1.39e-02  1.79e-01  8.53e-01  
  3  +3.3232e-01  +7.1541e-01  3.83e-01  2.00e-02  2.45e-01  7.35e-03  6.19e-02  7.03e-01  
  4  +2.9025e-01  +5.3718e-01  2.47e-01  1.04e-02  1.28e-01  5.14e-03  3.45e-02  5.00e-01  
  5  +2.4220e-01  +3.1901e-01  7.68e-02  2.96e-03  3.61e-02  1.43e-03  1.08e-02  7.11e-01  
  6  +2.2126e-01  +2.2411e-01  2.84e-03  1.11e-04  1.34e-03  3.48e-05  4.23e-04  9.72e-01  
  7  +2.2038e-01  +2.2056e-01  1.80e-04  7.22e-06  8.63e-05  1.07e-06  2.92e-05  9.31e-01  
  8  +2.2031e-01  +2.2032e-01  1.53e-05  6.33e-07  7.48e-06  1.50e-07  2.89e-06  9.62e-01  
  9  +2.2030e-01  +2.2030e-01  1.54e-07  6.38e-09  7.54e-08  1.50e-09  2.93e-08  9.90e-01  
 10  +2.2030e-01  +2.2030e-01  1.54e-09  6.38e-11  7.54e-10  1.50e-11  2.93e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 267.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:06 PM: Optimal value: 2.203e-01
(CVXPY) Sep 20 03:07:06 PM: Compilation took 5.008e-03 seconds
(CVXPY) Sep 20 03:07:06 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:06 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:06 PM: Finished problem compilation (took 2.604e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 286
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8028e-01  +2.6602e+01  2.61e+01  8.36e-01  5.93e+00  1.00e+00  1.11e+00   ------   
  1  +5.2199e-01  +5.4703e+00  4.95e+00  3.19e-01  3.06e+00  3.93e-03  5.58e-01  6.50e-01  
  2  +4.1061e-01  +1.4542e+00  1.04e+00  7.34e-02  8.82e-01  1.45e-02  1.93e-01  8.24e-01  
  3  +3.0365e-01  +7.4504e-01  4.41e-01  2.05e-02  2.54e-01  8.87e-03  6.22e-02  7.35e-01  
  4  +2.1804e-01  +3.3251e-01  1.14e-01  4.67e-03  5.80e-02  1.80e-03  1.59e-02  8.04e-01  
  5  +1.8488e-01  +1.9922e-01  1.43e-02  5.76e-04  7.13e-03  1.91e-04  2.09e-03  8.91e-01  
  6  +1.8056e-01  +1.8096e-01  3.93e-04  1.60e-05  1.97e-04  3.18e-06  5.97e-05  9.72e-01  
  7  +1.8043e-01  +1.8048e-01  5.87e-05  2.49e-06  2.96e-05  4.71e-07  1.09e-05  8.61e-01  
  8  +1.8040e-01  +1.8040e-01  8.57e-07  3.64e-08  4.32e-07  6.54e-09  1.66e-07  9.88e-01  
  9  +1.8040e-01  +1.8040e-01  8.56e-09  3.64e-10  4.32e-09  6.54e-11  1.67e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 249.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:06 PM: Optimal value: 1.804e-01
(CVXPY) Sep 20 03:07:06 PM: Compilation took 2.604e-03 seconds
(CVXPY) Sep 20 03:07:06 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.82
  Our objective: 0.64

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 1) <-- (term's our objective: 0.28)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.24)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.12)
 OR (x2 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8618555068969727
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

