Command:
python test_script.py -s linear_dependence -d 6 -n 10000 --seed 34 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1488
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 6.

Computed total variation: 0.16199999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:01 PM: Your problem has 5013 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:01 PM: Finished problem compilation (took 1.979e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5013
  constraints   = 10013
  nnz(P)        = 0
  nnz(A)        = 45013
  cones (total) = 1
    : Nonnegative = 1,  numel = 10013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  9.92e+01  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +1.0289e+03  1.03e+03  3.86e-01  6.02e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4196e-01  +1.3636e+02  1.36e+02  1.50e-01  2.96e+01  1.15e-02  2.44e-01  8.24e-01  
  3  +5.1044e-01  +3.4001e+01  3.35e+01  1.18e-01  2.30e+01  2.90e-05  2.39e-01  1.21e-01  
  4  +5.0030e-01  +1.3660e+00  8.66e-01  5.86e-03  1.16e+00  4.73e-06  1.28e-01  9.90e-01  
  5  +5.0002e-01  +6.5613e-01  1.56e-01  1.04e-03  2.07e-01  4.02e-06  3.13e-02  8.46e-01  
  6  +4.9786e-01  +1.1462e+00  6.48e-01  6.45e-04  1.30e-01  2.29e-04  1.96e-03  9.74e-01  
  7  +4.9056e-01  +9.6219e-01  4.72e-01  1.48e-04  2.97e-02  6.16e-04  4.38e-04  7.78e-01  
  8  +4.8324e-01  +6.6718e-01  1.84e-01  5.72e-05  1.15e-02  5.94e-06  1.78e-04  7.75e-01  
  9  +4.7721e-01  +6.0149e-01  1.24e-01  3.61e-05  7.23e-03  3.86e-06  1.16e-04  5.59e-01  
 10  +4.7189e-01  +5.4768e-01  7.58e-02  2.05e-05  4.11e-03  2.76e-06  6.79e-05  9.90e-01  
 11  +4.5480e-01  +4.6145e-01  6.65e-03  1.62e-06  3.23e-04  5.99e-08  5.88e-06  9.68e-01  
 12  +4.5284e-01  +4.5370e-01  8.64e-04  1.92e-07  3.84e-05  1.32e-08  7.70e-07  8.92e-01  
 13  +4.5250e-01  +4.5252e-01  1.16e-05  2.43e-09  4.86e-07  2.35e-10  1.04e-08  9.89e-01  
 14  +4.5250e-01  +4.5250e-01  1.16e-07  2.43e-11  4.86e-09  2.35e-12  1.04e-10  9.90e-01  
 15  +4.5250e-01  +4.5250e-01  1.17e-09  2.44e-13  4.89e-11  3.04e-14  1.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.086ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:01 PM: Optimal value: 4.525e-01
(CVXPY) Sep 20 03:10:01 PM: Compilation took 1.979e-02 seconds
(CVXPY) Sep 20 03:10:01 PM: Solver (including time spent in interface) took 5.346e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4525
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:02 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:02 PM: Finished problem compilation (took 1.973e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 53793
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9307e-01  +1.0291e+03  1.03e+03  3.86e-01  6.31e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4179e-01  +1.3603e+02  1.35e+02  1.50e-01  3.10e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1035e-01  +3.3814e+01  3.33e+01  1.18e-01  2.40e+01  2.90e-05  2.39e-01  1.24e-01  
  4  +5.0029e-01  +1.3879e+00  8.88e-01  6.02e-03  1.24e+00  5.00e-06  1.27e-01  9.90e-01  
  5  +5.0004e-01  +7.1292e-01  2.13e-01  1.42e-03  2.97e-01  3.32e-06  3.93e-02  7.47e-01  
  6  +4.9983e-01  +7.9001e-01  2.90e-01  1.45e-03  3.03e-01  2.17e-05  6.49e-03  8.86e-01  
  7  +4.9436e-01  +7.4488e-01  2.51e-01  9.76e-05  2.06e-02  4.10e-04  2.72e-04  9.58e-01  
  8  +4.8993e-01  +6.8648e-01  1.97e-01  5.76e-05  1.21e-02  2.70e-04  1.60e-04  6.57e-01  
  9  +4.8729e-01  +6.7324e-01  1.86e-01  4.75e-05  1.00e-02  2.61e-04  1.32e-04  2.39e-01  
 10  +4.8686e-01  +6.6063e-01  1.74e-01  4.47e-05  9.42e-03  1.33e-04  1.25e-04  4.01e-01  
 11  +4.8547e-01  +6.5287e-01  1.67e-01  4.39e-05  9.26e-03  1.07e-04  1.24e-04  1.24e-01  
 12  +4.6907e-01  +5.7908e-01  1.10e-01  2.13e-05  4.48e-03  7.07e-05  6.14e-05  6.05e-01  
 13  +4.5230e-01  +5.1559e-01  6.33e-02  1.10e-05  2.32e-03  2.56e-05  3.30e-05  6.23e-01  
 14  +4.4571e-01  +4.9356e-01  4.79e-02  8.28e-06  1.74e-03  6.02e-06  2.68e-05  6.66e-01  
 15  +4.4112e-01  +4.7405e-01  3.29e-02  5.62e-06  1.18e-03  3.52e-06  1.81e-05  6.24e-01  
 16  +4.3451e-01  +4.5435e-01  1.98e-02  3.10e-06  6.51e-04  1.97e-06  9.63e-06  8.96e-01  
 17  +4.2598e-01  +4.2657e-01  5.98e-04  9.40e-08  1.97e-05  4.78e-08  3.00e-07  9.90e-01  
 18  +4.2570e-01  +4.2571e-01  5.98e-06  9.40e-10  1.97e-07  4.78e-10  3.00e-09  9.90e-01  
 19  +4.2570e-01  +4.2570e-01  5.98e-08  9.40e-12  1.97e-09  4.78e-12  3.00e-11  9.90e-01  
 20  +4.2570e-01  +4.2570e-01  5.98e-10  9.40e-14  1.97e-11  4.79e-14  3.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.652ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:02 PM: Optimal value: 4.257e-01
(CVXPY) Sep 20 03:10:02 PM: Compilation took 1.973e-02 seconds
(CVXPY) Sep 20 03:10:02 PM: Solver (including time spent in interface) took 8.140e-02 seconds
Iteration: 2, Objective: 0.4257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:02 PM: Your problem has 5033 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:02 PM: Finished problem compilation (took 2.636e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5033
  constraints   = 10033
  nnz(P)        = 0
  nnz(A)        = 56035
  cones (total) = 1
    : Nonnegative = 1,  numel = 10033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9302e-01  +1.0292e+03  1.03e+03  3.86e-01  6.32e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4173e-01  +1.3589e+02  1.35e+02  1.50e-01  3.10e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1033e-01  +3.3781e+01  3.33e+01  1.18e-01  2.40e+01  2.90e-05  2.39e-01  1.25e-01  
  4  +5.0029e-01  +1.3903e+00  8.90e-01  6.04e-03  1.25e+00  5.01e-06  1.26e-01  9.90e-01  
  5  +5.0006e-01  +7.7072e-01  2.71e-01  1.81e-03  3.78e-01  3.55e-06  4.77e-02  6.82e-01  
  6  +4.9989e-01  +7.6963e-01  2.70e-01  1.44e-03  3.03e-01  1.64e-05  7.01e-03  9.38e-01  
  7  +4.9478e-01  +7.3572e-01  2.41e-01  8.97e-05  1.90e-02  3.85e-04  2.47e-04  9.65e-01  
  8  +4.9254e-01  +7.1897e-01  2.26e-01  6.79e-05  1.44e-02  3.94e-04  1.86e-04  3.39e-01  
  9  +4.8742e-01  +6.8280e-01  1.95e-01  4.55e-05  9.62e-03  3.05e-04  1.25e-04  5.36e-01  
 10  +4.8067e-01  +6.4532e-01  1.65e-01  3.64e-05  7.70e-03  1.70e-04  1.03e-04  4.05e-01  
 11  +4.5154e-01  +5.2111e-01  6.96e-02  1.22e-05  2.56e-03  2.88e-05  3.65e-05  8.20e-01  
 12  +4.5088e-01  +5.1886e-01  6.80e-02  1.18e-05  2.49e-03  2.66e-05  3.56e-05  9.16e-02  
 13  +4.4083e-01  +4.8379e-01  4.30e-02  7.27e-06  1.53e-03  1.33e-05  2.25e-05  5.06e-01  
 14  +4.4051e-01  +4.8292e-01  4.24e-02  7.08e-06  1.49e-03  1.23e-05  2.19e-05  1.24e-01  
 15  +4.3504e-01  +4.6401e-01  2.90e-02  4.78e-06  1.00e-03  3.97e-06  1.51e-05  7.93e-01  
 16  +4.2690e-01  +4.3643e-01  9.53e-03  1.53e-06  3.22e-04  9.75e-07  4.94e-06  8.97e-01  
 17  +4.2302e-01  +4.2374e-01  7.17e-04  1.15e-07  2.42e-05  6.69e-08  3.78e-07  9.50e-01  
 18  +4.2270e-01  +4.2271e-01  7.17e-06  1.15e-09  2.42e-07  6.69e-10  3.78e-09  9.90e-01  
 19  +4.2270e-01  +4.2270e-01  7.18e-08  1.16e-11  2.43e-09  6.69e-12  3.78e-11  9.90e-01  
 20  +4.2270e-01  +4.2270e-01  7.19e-10  1.16e-13  2.43e-11  6.69e-14  3.78e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.3527ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:02 PM: Optimal value: 4.227e-01
(CVXPY) Sep 20 03:10:02 PM: Compilation took 2.636e-02 seconds
(CVXPY) Sep 20 03:10:02 PM: Solver (including time spent in interface) took 8.831e-02 seconds
Iteration: 3, Objective: 0.4227
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:10:02 PM: Your problem has 5035 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:10:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:10:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:10:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:10:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:10:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:10:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:10:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:10:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:10:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:10:02 PM: Finished problem compilation (took 2.603e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5035
  constraints   = 10035
  nnz(P)        = 0
  nnz(A)        = 56263
  cones (total) = 1
    : Nonnegative = 1,  numel = 10035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9296e-01  +1.0295e+03  1.03e+03  3.87e-01  6.32e+01  3.92e-03  5.26e-01  6.26e-01  
  2  +5.4167e-01  +1.3580e+02  1.35e+02  1.50e-01  3.10e+01  1.15e-02  2.44e-01  8.27e-01  
  3  +5.1032e-01  +3.3769e+01  3.33e+01  1.18e-01  2.40e+01  2.91e-05  2.39e-01  1.25e-01  
  4  +5.0029e-01  +1.3926e+00  8.92e-01  6.05e-03  1.25e+00  5.02e-06  1.26e-01  9.90e-01  
  5  +5.0006e-01  +7.5155e-01  2.51e-01  1.68e-03  3.52e-01  3.53e-06  4.41e-02  7.02e-01  
  6  +4.9993e-01  +8.1364e-01  3.14e-01  1.78e-03  3.72e-01  1.51e-05  9.54e-03  8.75e-01  
  7  +4.9509e-01  +7.6516e-01  2.70e-01  1.09e-04  2.32e-02  3.68e-04  3.02e-04  9.69e-01  
  8  +4.9038e-01  +6.7450e-01  1.84e-01  4.80e-05  1.02e-02  1.50e-04  1.32e-04  9.90e-01  
  9  +4.8778e-01  +6.6447e-01  1.77e-01  4.24e-05  8.96e-03  1.36e-04  1.17e-04  2.07e-01  
 10  +4.8308e-01  +6.4437e-01  1.61e-01  3.83e-05  8.08e-03  7.60e-05  1.07e-04  3.74e-01  
 11  +4.5679e-01  +5.4243e-01  8.56e-02  1.51e-05  3.19e-03  3.17e-05  4.50e-05  7.25e-01  
 12  +4.4216e-01  +4.9005e-01  4.79e-02  8.35e-06  1.75e-03  1.14e-05  2.60e-05  6.10e-01  
 13  +4.4155e-01  +4.8796e-01  4.64e-02  7.92e-06  1.66e-03  1.03e-05  2.46e-05  1.74e-01  
 14  +4.3832e-01  +4.7701e-01  3.87e-02  6.51e-06  1.37e-03  4.39e-06  2.04e-05  7.68e-01  
 15  +4.3486e-01  +4.6488e-01  3.00e-02  5.01e-06  1.05e-03  3.38e-06  1.59e-05  2.57e-01  
 16  +4.3206e-01  +4.5456e-01  2.25e-02  3.65e-06  7.67e-04  1.91e-06  1.16e-05  9.44e-01  
 17  +4.2765e-01  +4.3987e-01  1.22e-02  1.98e-06  4.16e-04  1.03e-06  6.41e-06  4.80e-01  
 18  +4.2302e-01  +4.2445e-01  1.42e-03  2.31e-07  4.86e-05  1.16e-07  7.63e-07  9.17e-01  
 19  +4.2241e-01  +4.2242e-01  1.54e-05  2.50e-09  5.24e-07  1.25e-09  8.27e-09  9.89e-01  
 20  +4.2240e-01  +4.2240e-01  1.54e-07  2.50e-11  5.24e-09  1.25e-11  8.27e-11  9.90e-01  
 21  +4.2240e-01  +4.2240e-01  1.54e-09  2.50e-13  5.25e-11  1.25e-13  8.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 90.7159ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:10:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:10:02 PM: Optimal value: 4.224e-01
(CVXPY) Sep 20 03:10:02 PM: Compilation took 2.603e-02 seconds
(CVXPY) Sep 20 03:10:02 PM: Solver (including time spent in interface) took 1.002e-01 seconds
FULL MODEL:
  Accruacy: 0.5779
  Our objective: 0.1558

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.1488)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.0062)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.0008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.2639946937561035
Best over terms:
  Our final objective: 0.14880000000000004
    Its accruacy: 0.5744
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14880000000000004
  Highest accruacy: 0.5744
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

