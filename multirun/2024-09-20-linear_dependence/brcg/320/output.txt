Command:
python test_script.py -s linear_dependence -d 9 -n 10 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:27 PM: Your problem has 24 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:27 PM: Finished problem compilation (took 3.082e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 24
  constraints   = 29
  nnz(P)        = 0
  nnz(A)        = 79
  cones (total) = 1
    : Nonnegative = 1,  numel = 29

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4943e-01  +6.2231e+00  5.77e+00  7.72e-01  2.77e+00  1.00e+00  1.29e+00   ------   
  1  +4.7854e-01  +1.3520e+00  8.73e-01  3.17e-01  1.35e+00  3.55e-03  6.61e-01  6.73e-01  
  2  +2.7748e-01  +5.2380e-01  2.46e-01  7.46e-02  3.63e-01  1.40e-02  2.56e-01  7.64e-01  
  3  +2.0805e-01  +2.3164e-01  2.36e-02  6.48e-03  3.32e-02  1.75e-03  3.03e-02  9.25e-01  
  4  +2.0021e-01  +2.0056e-01  3.46e-04  9.84e-05  5.00e-04  2.51e-05  4.79e-04  9.85e-01  
  5  +2.0010e-01  +2.0010e-01  3.46e-06  9.83e-07  5.00e-06  2.50e-07  4.79e-06  9.90e-01  
  6  +2.0010e-01  +2.0010e-01  3.46e-08  9.83e-09  5.00e-08  2.50e-09  4.79e-08  9.90e-01  
  7  +2.0010e-01  +2.0010e-01  3.46e-10  9.83e-11  5.00e-10  2.50e-11  4.79e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:27 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 03:16:27 PM: Compilation took 3.082e-03 seconds
(CVXPY) Sep 20 03:16:27 PM: Solver (including time spent in interface) took 1.526e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:27 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:27 PM: Finished problem compilation (took 3.777e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 99
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.1974e-01  +6.6465e+00  6.23e+00  8.00e-01  2.64e+00  1.00e+00  1.35e+00   ------   
  1  +3.3763e-01  +1.3015e+00  9.64e-01  3.18e-01  1.19e+00  3.86e-03  6.42e-01  6.80e-01  
  2  +5.1822e-02  +4.6451e-01  4.13e-01  1.13e-01  4.66e-01  1.97e-02  3.49e-01  6.67e-01  
  3  +1.0415e-01  +1.3245e-01  2.83e-02  8.65e-03  3.76e-02  5.39e-03  3.39e-02  9.59e-01  
  4  +1.0028e-01  +1.0071e-01  4.32e-04  1.41e-04  6.07e-04  6.86e-05  5.74e-04  9.83e-01  
  5  +1.0020e-01  +1.0021e-01  1.06e-05  3.96e-06  1.68e-05  6.63e-07  1.66e-05  9.71e-01  
  6  +1.0020e-01  +1.0020e-01  1.17e-07  4.39e-08  1.85e-07  7.76e-09  1.87e-07  9.89e-01  
  7  +1.0020e-01  +1.0020e-01  1.17e-09  4.39e-10  1.85e-09  7.76e-11  1.87e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:27 PM: Optimal value: 1.002e-01
(CVXPY) Sep 20 03:16:27 PM: Compilation took 3.777e-03 seconds
(CVXPY) Sep 20 03:16:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:27 PM: Your problem has 44 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:27 PM: Finished problem compilation (took 2.826e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 49
  nnz(P)        = 0
  nnz(A)        = 132
  cones (total) = 1
    : Nonnegative = 1,  numel = 49

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.4948e-01  +6.3895e+00  6.04e+00  8.22e-01  2.77e+00  1.00e+00  1.29e+00   ------   
  1  +1.5535e-01  +1.2447e+00  1.09e+00  3.64e-01  1.25e+00  4.50e-03  6.19e-01  6.19e-01  
  2  +7.2813e-02  +2.8362e-01  2.11e-01  8.82e-02  3.62e-01  1.51e-02  2.17e-01  8.12e-01  
  3  +1.5502e-02  +9.8174e-02  8.27e-02  2.69e-02  1.28e-01  6.21e-03  8.39e-02  7.34e-01  
  4  +6.7078e-04  +2.9619e-03  2.29e-03  7.49e-04  3.59e-03  1.66e-04  2.53e-03  9.72e-01  
  5  +2.9322e-04  +3.6420e-04  7.10e-05  2.56e-05  1.19e-04  1.60e-06  8.71e-05  9.66e-01  
  6  +2.9925e-04  +3.0232e-04  3.07e-06  1.18e-06  5.24e-06  1.07e-07  4.14e-06  9.57e-01  
  7  +2.9999e-04  +3.0002e-04  3.08e-08  1.19e-08  5.26e-08  1.07e-09  4.17e-08  9.90e-01  
  8  +3.0000e-04  +3.0000e-04  3.08e-10  1.19e-10  5.26e-10  1.07e-11  4.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 116.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:27 PM: Optimal value: 3.000e-04
(CVXPY) Sep 20 03:16:27 PM: Compilation took 2.826e-03 seconds
(CVXPY) Sep 20 03:16:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x3 = 1 AND x8 = 0) <-- (term's our objective: 0.4)
 OR (x0 = 0 AND x7 = 1)            <-- (term's our objective: 0.6)
 OR (x0 = 1 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8876304626464844
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

