Command:
python test_script.py -s linear_dependence -d 2 -n 5000 --seed 73 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5992
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 2.

Computed total variation: 0.5992
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:57 PM: Your problem has 2505 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:57 PM: Finished problem compilation (took 1.252e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2505
  constraints   = 5005
  nnz(P)        = 0
  nnz(A)        = 12505
  cones (total) = 1
    : Nonnegative = 1,  numel = 5005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +2.5019e+03  2.50e+03  9.76e-01  5.12e+01  1.00e+00  1.00e+00   ------   
  1  +6.3702e-01  +4.3711e+02  4.36e+02  2.65e-01  2.42e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5771e-01  +8.0253e+01  7.97e+01  1.27e-01  1.34e+01  5.35e-03  2.11e-01  6.02e-01  
  3  +5.0075e-01  +4.9571e+00  4.46e+00  3.91e-02  3.88e+00  1.29e-03  2.00e-01  2.82e-01  
  4  +4.9493e-01  +2.0560e+00  1.56e+00  7.44e-03  8.19e-01  2.86e-03  1.90e-02  9.90e-01  
  5  +4.1869e-01  +1.9411e+00  1.52e+00  6.85e-04  7.80e-02  3.48e-02  1.43e-03  9.45e-01  
  6  +3.6312e-01  +1.4065e+00  1.04e+00  5.22e-04  5.78e-02  1.30e-02  1.20e-03  2.71e-01  
  7  +2.7365e-01  +6.8663e-01  4.13e-01  2.39e-04  2.52e-02  8.25e-05  7.57e-04  5.06e-01  
  8  +2.1250e-01  +2.7789e-01  6.54e-02  3.95e-05  4.04e-03  4.90e-07  2.02e-04  8.15e-01  
  9  +2.0089e-01  +2.0301e-01  2.11e-03  1.27e-06  1.30e-04  2.74e-08  7.93e-06  9.67e-01  
 10  +2.0050e-01  +2.0052e-01  2.11e-05  1.27e-08  1.30e-06  2.74e-10  7.98e-08  9.90e-01  
 11  +2.0050e-01  +2.0050e-01  2.11e-07  1.27e-10  1.30e-08  2.74e-12  7.98e-10  9.90e-01  
 12  +2.0050e-01  +2.0050e-01  2.11e-09  1.27e-12  1.30e-10  2.74e-14  7.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.1176ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:57 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:57 PM: Optimal value: 2.005e-01
(CVXPY) Sep 20 03:03:57 PM: Compilation took 1.252e-02 seconds
(CVXPY) Sep 20 03:03:57 PM: Solver (including time spent in interface) took 2.220e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.2005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:58 PM: Your problem has 2506 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:58 PM: Finished problem compilation (took 6.179e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2506
  constraints   = 5006
  nnz(P)        = 0
  nnz(A)        = 13502
  cones (total) = 1
    : Nonnegative = 1,  numel = 5006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9981e-01  +2.5020e+03  2.50e+03  9.76e-01  5.30e+01  1.00e+00  1.00e+00   ------   
  1  +6.3692e-01  +4.3758e+02  4.37e+02  2.66e-01  2.50e+01  4.49e-03  3.90e-01  7.24e-01  
  2  +5.5770e-01  +8.0273e+01  7.97e+01  1.27e-01  1.39e+01  5.38e-03  2.11e-01  6.02e-01  
  3  +5.0076e-01  +4.9680e+00  4.47e+00  3.92e-02  4.03e+00  1.28e-03  2.01e-01  2.82e-01  
  4  +4.9517e-01  +2.1108e+00  1.62e+00  7.90e-03  8.98e-01  2.76e-03  2.04e-02  9.81e-01  
  5  +4.1400e-01  +1.9699e+00  1.56e+00  6.62e-04  7.80e-02  3.67e-02  1.38e-03  9.51e-01  
  6  +3.3276e-01  +1.1079e+00  7.75e-01  4.28e-04  4.81e-02  2.39e-04  1.08e-03  3.87e-01  
  7  +2.4328e-01  +4.7708e-01  2.34e-01  1.38e-04  1.48e-02  1.50e-06  5.19e-04  6.10e-01  
  8  +2.0410e-01  +2.2411e-01  2.00e-02  1.21e-05  1.28e-03  6.02e-07  7.03e-05  9.18e-01  
  9  +2.0055e-01  +2.0083e-01  2.78e-04  1.68e-07  1.78e-05  7.83e-09  1.05e-06  9.86e-01  
 10  +2.0050e-01  +2.0050e-01  2.78e-06  1.68e-09  1.77e-07  7.82e-11  1.05e-08  9.90e-01  
 11  +2.0050e-01  +2.0050e-01  2.78e-08  1.68e-11  1.77e-09  7.83e-13  1.06e-10  9.90e-01  
 12  +2.0050e-01  +2.0050e-01  2.78e-10  1.68e-13  1.77e-11  7.83e-15  1.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.4046ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:58 PM: Optimal value: 2.005e-01
(CVXPY) Sep 20 03:03:58 PM: Compilation took 6.179e-03 seconds
(CVXPY) Sep 20 03:03:58 PM: Solver (including time spent in interface) took 6.973e-03 seconds
Iteration: 2, Objective: 0.2005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:58 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:58 PM: Finished problem compilation (took 4.815e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 14481
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +2.5020e+03  2.50e+03  9.76e-01  5.48e+01  1.00e+00  1.00e+00   ------   
  1  +6.2674e-01  +4.5106e+02  4.50e+02  2.86e-01  2.73e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5725e-01  +8.0685e+01  8.01e+01  1.29e-01  1.44e+01  6.06e-03  2.13e-01  6.40e-01  
  3  +5.0070e-01  +4.8944e+00  4.39e+00  3.86e-02  4.09e+00  8.66e-04  2.01e-01  3.23e-01  
  4  +4.9739e-01  +3.4604e+00  2.96e+00  1.83e-02  2.09e+00  1.52e-03  5.25e-02  8.16e-01  
  5  +4.2183e-01  +3.0366e+00  2.61e+00  1.25e-03  1.51e-01  2.31e-02  2.60e-03  9.55e-01  
  6  +4.1892e-01  +3.0173e+00  2.60e+00  1.19e-03  1.44e-01  2.17e-02  2.48e-03  1.12e-01  
  7  +3.9945e-01  +2.1441e+00  1.74e+00  1.04e-03  1.23e-01  1.56e-04  2.34e-03  5.05e-01  
  8  +3.2478e-01  +1.3167e+00  9.92e-01  5.20e-04  6.03e-02  8.25e-05  1.31e-03  5.76e-01  
  9  +2.3542e-01  +4.2832e-01  1.93e-01  1.13e-04  1.25e-02  4.82e-07  4.36e-04  7.79e-01  
 10  +2.0371e-01  +2.2318e-01  1.95e-02  1.18e-05  1.28e-03  7.15e-07  6.90e-05  9.19e-01  
 11  +2.0055e-01  +2.0085e-01  2.98e-04  1.80e-07  1.97e-05  1.02e-08  1.13e-06  9.84e-01  
 12  +2.0050e-01  +2.0050e-01  2.98e-06  1.80e-09  1.96e-07  1.02e-10  1.13e-08  9.90e-01  
 13  +2.0050e-01  +2.0050e-01  2.98e-08  1.80e-11  1.96e-09  1.02e-12  1.13e-10  9.90e-01  
 14  +2.0050e-01  +2.0050e-01  2.98e-10  1.80e-13  1.96e-11  1.02e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.9071ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:58 PM: Optimal value: 2.005e-01
(CVXPY) Sep 20 03:03:58 PM: Compilation took 4.815e-03 seconds
(CVXPY) Sep 20 03:03:58 PM: Solver (including time spent in interface) took 1.008e-02 seconds
FULL MODEL:
  Accruacy: 0.7996
  Our objective: 0.5992

IF 
    (x0 = 0) <-- (term's our objective: 0.5992)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9277987480163574
Best over terms:
  Our final objective: 0.5992
    Its accruacy: 0.7996
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5992
  Highest accruacy: 0.7996
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

