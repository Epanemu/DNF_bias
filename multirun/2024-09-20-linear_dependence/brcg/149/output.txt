Command:
python test_script.py -s linear_dependence -d 4 -n 5000 --seed 21 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30479999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.3048
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:28 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:28 PM: Finished problem compilation (took 9.436e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5009e+03  2.50e+03  9.78e-01  6.07e+01  1.00e+00  1.00e+00   ------   
  1  +6.0810e-01  +4.8463e+02  4.84e+02  3.36e-01  3.38e+01  4.10e-03  4.73e-01  6.68e-01  
  2  +5.5073e-01  +7.5362e+01  7.48e+01  1.37e-01  1.68e+01  8.24e-03  2.26e-01  7.28e-01  
  3  +5.0934e-01  +1.4964e+01  1.45e+01  9.35e-02  1.11e+01  1.61e-05  2.23e-01  8.49e-02  
  4  +4.9997e-01  +1.1158e+00  6.16e-01  5.85e-03  7.09e-01  7.86e-06  1.33e-01  8.36e-01  
  5  +4.9867e-01  +9.5110e-01  4.52e-01  3.66e-03  4.49e-01  2.52e-05  2.02e-02  9.13e-01  
  6  +4.7423e-01  +8.3427e-01  3.60e-01  3.45e-04  4.30e-02  3.66e-04  1.01e-03  9.53e-01  
  7  +4.3569e-01  +5.9786e-01  1.62e-01  8.36e-05  1.03e-02  2.99e-04  2.66e-04  7.59e-01  
  8  +4.0118e-01  +4.2987e-01  2.87e-02  1.30e-05  1.60e-03  2.51e-06  5.62e-05  8.70e-01  
  9  +3.9329e-01  +3.9393e-01  6.38e-04  2.84e-07  3.48e-05  3.97e-08  1.30e-06  9.78e-01  
 10  +3.9310e-01  +3.9311e-01  6.40e-06  2.85e-09  3.49e-07  3.98e-10  1.31e-08  9.90e-01  
 11  +3.9310e-01  +3.9310e-01  6.40e-08  2.85e-11  3.49e-09  3.99e-12  1.31e-10  9.90e-01  
 12  +3.9310e-01  +3.9310e-01  6.40e-10  2.85e-13  3.49e-11  3.99e-14  1.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.7572ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:28 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:28 PM: Optimal value: 3.931e-01
(CVXPY) Sep 20 03:06:28 PM: Compilation took 9.436e-03 seconds
(CVXPY) Sep 20 03:06:28 PM: Solver (including time spent in interface) took 1.467e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3931
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:29 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:29 PM: Finished problem compilation (took 8.221e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22403
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9999e-01  +2.5012e+03  2.50e+03  9.78e-01  6.53e+01  1.00e+00  1.00e+00   ------   
  1  +6.0757e-01  +4.8524e+02  4.85e+02  3.37e-01  3.63e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5009e-01  +7.4673e+01  7.41e+01  1.36e-01  1.79e+01  8.32e-03  2.25e-01  7.33e-01  
  3  +5.0904e-01  +1.4663e+01  1.42e+01  9.23e-02  1.17e+01  1.61e-05  2.22e-01  9.22e-02  
  4  +5.0036e-01  +1.7434e+00  1.24e+00  1.18e-02  1.52e+00  8.73e-06  1.60e-01  5.46e-01  
  5  +5.0000e-01  +1.1053e+00  6.05e-01  5.68e-03  7.42e-01  6.64e-06  6.35e-02  6.18e-01  
  6  +4.9247e-01  +1.5415e+00  1.05e+00  1.82e-03  2.46e-01  1.13e-04  4.86e-03  9.90e-01  
  7  +4.6474e-01  +1.1374e+00  6.73e-01  3.23e-04  4.36e-02  3.32e-04  8.39e-04  8.31e-01  
  8  +4.6053e-01  +8.6590e-01  4.05e-01  1.95e-04  2.62e-02  3.25e-06  5.16e-04  8.80e-01  
  9  +4.3497e-01  +7.3090e-01  2.96e-01  1.18e-04  1.59e-02  6.15e-06  3.29e-04  4.30e-01  
 10  +4.3062e-01  +7.0262e-01  2.72e-01  1.15e-04  1.53e-02  7.36e-06  3.28e-04  7.07e-02  
 11  +3.8454e-01  +4.8599e-01  1.01e-01  3.77e-05  4.99e-03  4.15e-06  1.20e-04  7.02e-01  
 12  +3.5461e-01  +3.7208e-01  1.75e-02  6.39e-06  8.41e-04  2.10e-06  2.30e-05  9.90e-01  
 13  +3.4780e-01  +3.4806e-01  2.54e-04  9.23e-08  1.22e-05  2.45e-08  3.44e-07  9.86e-01  
 14  +3.4770e-01  +3.4770e-01  2.54e-06  9.23e-10  1.21e-07  2.45e-10  3.45e-09  9.90e-01  
 15  +3.4770e-01  +3.4770e-01  2.54e-08  9.23e-12  1.21e-09  2.45e-12  3.45e-11  9.90e-01  
 16  +3.4770e-01  +3.4770e-01  2.54e-10  9.24e-14  1.21e-11  2.45e-14  3.45e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.6517ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:29 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:29 PM: Optimal value: 3.477e-01
(CVXPY) Sep 20 03:06:29 PM: Compilation took 8.221e-03 seconds
(CVXPY) Sep 20 03:06:29 PM: Solver (including time spent in interface) took 2.343e-02 seconds
FULL MODEL:
  Accruacy: 0.6524
  Our objective: 0.30479999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3048)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4480910301208496
Best over terms:
  Our final objective: 0.30479999999999996
    Its accruacy: 0.6524
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30479999999999996
  Highest accruacy: 0.6524
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

