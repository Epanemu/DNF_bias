Command:
python test_script.py -s linear_dependence -d 9 -n 50000 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15380000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.17175999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:00 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:00 PM: Finished problem compilation (took 2.015e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1481e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6046e+02  1.60e+02  1.50e-01  7.62e+01  4.51e-05  2.60e-01  2.61e-01  
  4  +5.0135e-01  +1.7471e+01  1.70e+01  4.67e-02  2.35e+01  5.22e-06  1.96e-01  4.49e-01  
  5  +5.0000e-01  +1.1832e+00  6.83e-01  2.04e-03  1.06e+00  2.59e-05  1.90e-01  2.50e-01  
  6  +4.9999e-01  +6.3998e-01  1.40e-01  4.17e-04  2.19e-01  8.20e-06  3.46e-02  8.35e-01  
  7  +4.9865e-01  +1.3461e+00  8.47e-01  6.84e-04  3.59e-01  6.54e-04  2.30e-03  9.77e-01  
  8  +4.9972e-01  +9.0719e-01  4.07e-01  3.51e-04  1.85e-01  1.30e-04  1.11e-03  7.62e-01  
  9  +4.9529e-01  +8.7018e-01  3.75e-01  2.45e-05  1.29e-02  1.85e-03  6.96e-05  9.37e-01  
 10  +4.8699e-01  +6.4726e-01  1.60e-01  1.03e-05  5.42e-03  1.80e-05  3.08e-05  8.07e-01  
 11  +4.7679e-01  +5.6908e-01  9.23e-02  5.61e-06  2.95e-03  1.79e-07  1.77e-05  8.19e-01  
 12  +4.5938e-01  +4.7682e-01  1.74e-02  8.90e-07  4.67e-04  7.64e-08  3.06e-06  9.14e-01  
 13  +4.5367e-01  +4.5505e-01  1.39e-03  5.85e-08  3.07e-05  1.12e-08  2.46e-07  9.88e-01  
 14  +4.5326e-01  +4.5328e-01  1.44e-05  6.05e-10  3.17e-07  1.16e-10  2.56e-09  9.90e-01  
 15  +4.5326e-01  +4.5326e-01  1.44e-07  6.05e-12  3.17e-09  1.16e-12  2.56e-11  9.90e-01  
 16  +4.5326e-01  +4.5326e-01  1.45e-09  6.06e-14  3.18e-11  1.31e-14  2.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 447.0335ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:01 PM: Optimal value: 4.533e-01
(CVXPY) Sep 20 03:21:01 PM: Compilation took 2.015e-01 seconds
(CVXPY) Sep 20 03:21:01 PM: Solver (including time spent in interface) took 5.115e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:01 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:01 PM: Finished problem compilation (took 1.525e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 344118
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4251e+03  5.42e+03  4.36e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3204e-01  +6.1451e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6029e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7354e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0001e-01  +1.3677e+00  8.68e-01  2.59e-03  1.40e+00  2.88e-05  1.89e-01  2.55e-01  
  6  +5.0000e-01  +7.7334e-01  2.73e-01  8.16e-04  4.42e-01  1.06e-05  6.02e-02  6.86e-01  
  7  +4.9998e-01  +7.6886e-01  2.69e-01  8.00e-04  4.34e-01  1.77e-05  2.49e-02  7.04e-01  
  8  +4.9969e-01  +7.3537e-01  2.36e-01  4.74e-04  2.58e-01  1.51e-04  2.04e-03  9.37e-01  
  9  +4.9916e-01  +7.3229e-01  2.33e-01  2.33e-04  1.27e-01  3.92e-04  7.53e-04  6.40e-01  
 10  +4.9849e-01  +7.2113e-01  2.23e-01  1.19e-04  6.52e-02  6.72e-04  3.53e-04  6.53e-01  
 11  +4.9938e-01  +7.0148e-01  2.02e-01  8.43e-05  4.62e-02  2.28e-04  2.35e-04  9.90e-01  
 12  +4.9695e-01  +6.8981e-01  1.93e-01  1.85e-05  1.01e-02  9.88e-04  4.97e-05  8.06e-01  
 13  +4.9663e-01  +6.8883e-01  1.92e-01  1.61e-05  8.82e-03  1.00e-03  4.31e-05  2.37e-01  
 14  +4.9662e-01  +6.8652e-01  1.90e-01  1.46e-05  8.03e-03  6.78e-04  3.90e-05  4.34e-01  
 15  +4.9531e-01  +6.8106e-01  1.86e-01  1.15e-05  6.32e-03  6.95e-04  3.07e-05  3.47e-01  
 16  +4.9461e-01  +6.7781e-01  1.83e-01  1.06e-05  5.79e-03  6.13e-04  2.81e-05  2.28e-01  
 17  +4.9308e-01  +6.7084e-01  1.78e-01  9.54e-06  5.22e-03  2.47e-04  2.55e-05  6.22e-01  
 18  +4.8623e-01  +6.4405e-01  1.58e-01  6.52e-06  3.56e-03  2.38e-04  1.76e-05  4.08e-01  
 19  +4.8275e-01  +6.3008e-01  1.47e-01  6.19e-06  3.38e-03  1.76e-04  1.75e-05  1.16e-01  
 20  +4.6135e-01  +5.4253e-01  8.12e-02  3.25e-06  1.77e-03  1.77e-06  9.64e-06  7.98e-01  
 21  +4.5808e-01  +5.3955e-01  8.15e-02  2.98e-06  1.62e-03  1.79e-06  8.72e-06  2.10e-01  
 22  +4.3559e-01  +4.6513e-01  2.95e-02  9.49e-07  5.16e-04  4.20e-07  2.90e-06  9.03e-01  
 23  +4.2353e-01  +4.2421e-01  6.79e-04  2.14e-08  1.16e-05  5.37e-09  6.80e-08  9.90e-01  
 24  +4.2320e-01  +4.2321e-01  6.79e-06  2.14e-10  1.16e-07  5.37e-11  6.81e-10  9.90e-01  
 25  +4.2320e-01  +4.2320e-01  6.79e-08  2.14e-12  1.16e-09  5.52e-13  7.00e-12  9.90e-01  
 26  +4.2320e-01  +4.2320e-01  6.80e-10  2.14e-14  1.17e-11  5.67e-15  7.18e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 885.0023ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:02 PM: Optimal value: 4.232e-01
(CVXPY) Sep 20 03:21:02 PM: Compilation took 1.525e-01 seconds
(CVXPY) Sep 20 03:21:02 PM: Solver (including time spent in interface) took 9.218e-01 seconds
Iteration: 2, Objective: 0.4232
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:02 PM: Your problem has 25039 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:02 PM: Finished problem compilation (took 1.599e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25039
  constraints   = 50039
  nnz(P)        = 0
  nnz(A)        = 346507
  cones (total) = 1
    : Nonnegative = 1,  numel = 50039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1438e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6025e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7354e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.54e-01  
  5  +5.0001e-01  +1.4264e+00  9.26e-01  2.77e-03  1.50e+00  2.88e-05  1.89e-01  2.40e-01  
  6  +5.0000e-01  +7.6955e-01  2.70e-01  8.04e-04  4.36e-01  9.68e-06  5.82e-02  6.96e-01  
  7  +4.9999e-01  +7.7621e-01  2.76e-01  8.22e-04  4.45e-01  1.64e-05  2.54e-02  6.83e-01  
  8  +4.9988e-01  +7.6098e-01  2.61e-01  6.99e-04  3.79e-01  6.49e-05  4.95e-03  8.22e-01  
  9  +4.9963e-01  +7.2693e-01  2.27e-01  3.25e-04  1.77e-01  1.75e-04  1.12e-03  9.90e-01  
 10  +4.9877e-01  +7.2286e-01  2.24e-01  1.16e-04  6.37e-02  5.54e-04  3.39e-04  7.11e-01  
 11  +4.9831e-01  +7.1056e-01  2.12e-01  6.32e-05  3.46e-02  7.11e-04  1.76e-04  7.29e-01  
 12  +4.9751e-01  +7.0725e-01  2.10e-01  4.28e-05  2.34e-02  9.95e-04  1.18e-04  3.66e-01  
 13  +4.9756e-01  +7.0085e-01  2.03e-01  2.98e-05  1.63e-02  8.27e-04  8.07e-05  6.84e-01  
 14  +4.9724e-01  +6.9648e-01  1.99e-01  2.16e-05  1.18e-02  7.51e-04  5.79e-05  5.83e-01  
 15  +4.9647e-01  +6.9200e-01  1.96e-01  1.61e-05  8.81e-03  7.21e-04  4.29e-05  4.99e-01  
 16  +4.9061e-01  +6.6648e-01  1.76e-01  6.95e-06  3.81e-03  7.82e-04  1.86e-05  9.37e-01  
 17  +4.8794e-01  +6.5589e-01  1.68e-01  6.51e-06  3.56e-03  7.09e-04  1.75e-05  9.83e-02  
 18  +4.8318e-01  +6.3714e-01  1.54e-01  6.25e-06  3.42e-03  4.13e-04  1.72e-05  2.45e-01  
 19  +4.7426e-01  +6.0163e-01  1.27e-01  5.58e-06  3.04e-03  2.40e-05  1.65e-05  6.25e-01  
 20  +4.7442e-01  +6.0317e-01  1.29e-01  5.61e-06  3.06e-03  2.41e-05  1.65e-05  1.81e-02  
 21  +4.6092e-01  +5.5022e-01  8.93e-02  3.53e-06  1.92e-03  1.01e-05  1.06e-05  5.70e-01  
 22  +4.5028e-01  +5.1804e-01  6.78e-02  2.38e-06  1.29e-03  3.42e-06  7.08e-06  7.40e-01  
 23  +4.3345e-01  +4.6005e-01  2.66e-02  8.81e-07  4.78e-04  1.13e-06  2.74e-06  6.43e-01  
 24  +4.3225e-01  +4.5587e-01  2.36e-02  7.74e-07  4.21e-04  9.04e-07  2.41e-06  2.56e-01  
 25  +4.3184e-01  +4.5416e-01  2.23e-02  7.21e-07  3.92e-04  6.83e-07  2.24e-06  4.08e-01  
 26  +4.2287e-01  +4.2468e-01  1.81e-03  5.78e-08  3.14e-05  3.66e-08  1.85e-07  9.65e-01  
 27  +4.2205e-01  +4.2207e-01  1.91e-05  6.10e-10  3.31e-07  3.82e-10  1.96e-09  9.90e-01  
 28  +4.2204e-01  +4.2204e-01  1.91e-07  6.10e-12  3.31e-09  3.82e-12  1.96e-11  9.90e-01  
 29  +4.2204e-01  +4.2204e-01  1.91e-09  6.10e-14  3.31e-11  3.84e-14  1.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 896.4847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:03 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:03 PM: Optimal value: 4.220e-01
(CVXPY) Sep 20 03:21:03 PM: Compilation took 1.599e-01 seconds
(CVXPY) Sep 20 03:21:03 PM: Solver (including time spent in interface) took 9.356e-01 seconds
Iteration: 3, Objective: 0.4220
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:03 PM: Your problem has 25049 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:04 PM: Finished problem compilation (took 1.989e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25049
  constraints   = 50049
  nnz(P)        = 0
  nnz(A)        = 347977
  cones (total) = 1
    : Nonnegative = 1,  numel = 50049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3202e-01  +6.1431e+02  6.14e+02  1.78e-01  9.27e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.88e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7355e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.54e-01  
  5  +5.0001e-01  +1.4274e+00  9.27e-01  2.77e-03  1.50e+00  2.89e-05  1.89e-01  2.41e-01  
  6  +5.0000e-01  +7.9110e-01  2.91e-01  8.69e-04  4.71e-01  1.03e-05  6.25e-02  6.74e-01  
  7  +4.9998e-01  +7.7885e-01  2.79e-01  8.29e-04  4.49e-01  1.84e-05  2.24e-02  7.71e-01  
  8  +4.9994e-01  +7.7499e-01  2.75e-01  7.93e-04  4.30e-01  3.89e-05  9.24e-03  5.97e-01  
  9  +5.0000e-01  +7.4924e-01  2.49e-01  7.01e-04  3.80e-01  9.73e-06  6.21e-03  9.90e-01  
 10  +4.9877e-01  +7.4619e-01  2.47e-01  3.69e-05  2.02e-02  5.66e-04  9.93e-05  9.85e-01  
 11  +4.9587e-01  +7.2971e-01  2.34e-01  1.33e-05  7.32e-03  1.41e-03  3.56e-05  6.56e-01  
 12  +4.9572e-01  +7.2508e-01  2.29e-01  1.28e-05  7.04e-03  1.28e-03  3.41e-05  1.20e-01  
 13  +4.9433e-01  +7.1747e-01  2.23e-01  1.07e-05  5.87e-03  1.35e-03  2.85e-05  2.18e-01  
 14  +4.9365e-01  +7.1124e-01  2.18e-01  1.06e-05  5.83e-03  1.22e-03  2.84e-05  4.85e-02  
 15  +4.9261e-01  +6.8978e-01  1.97e-01  1.02e-05  5.59e-03  3.91e-04  2.75e-05  5.19e-01  
 16  +4.8718e-01  +6.6352e-01  1.76e-01  7.87e-06  4.30e-03  3.28e-04  2.14e-05  3.40e-01  
 17  +4.8564e-01  +6.5602e-01  1.70e-01  7.71e-06  4.22e-03  2.49e-04  2.11e-05  1.69e-01  
 18  +4.8174e-01  +6.3993e-01  1.58e-01  6.79e-06  3.71e-03  2.15e-04  1.88e-05  1.73e-01  
 19  +4.7951e-01  +6.2942e-01  1.50e-01  6.61e-06  3.61e-03  1.42e-04  1.84e-05  2.29e-01  
 20  +4.7229e-01  +6.0139e-01  1.29e-01  5.29e-06  2.88e-03  1.18e-04  1.49e-05  2.21e-01  
 21  +4.6301e-01  +5.6690e-01  1.04e-01  3.96e-06  2.16e-03  6.76e-05  1.14e-05  4.10e-01  
 22  +4.4700e-01  +5.0873e-01  6.17e-02  2.15e-06  1.17e-03  2.20e-05  6.46e-06  6.30e-01  
 23  +4.4384e-01  +4.9635e-01  5.25e-02  1.74e-06  9.47e-04  4.51e-06  5.24e-06  8.17e-01  
 24  +4.3746e-01  +4.7452e-01  3.71e-02  1.20e-06  6.54e-04  1.83e-06  3.68e-06  6.63e-01  
 25  +4.2707e-01  +4.3965e-01  1.26e-02  4.05e-07  2.20e-04  5.70e-07  1.28e-06  6.76e-01  
 26  +4.2182e-01  +4.2223e-01  4.07e-04  1.30e-08  7.07e-06  1.38e-08  4.19e-08  9.77e-01  
 27  +4.2164e-01  +4.2165e-01  4.09e-06  1.31e-10  7.09e-08  1.39e-10  4.21e-10  9.90e-01  
 28  +4.2164e-01  +4.2164e-01  4.09e-08  1.31e-12  7.09e-10  1.39e-12  4.21e-12  9.90e-01  
 29  +4.2164e-01  +4.2164e-01  4.09e-10  1.30e-14  7.09e-12  1.40e-14  4.25e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 920.7942ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:05 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:05 PM: Optimal value: 4.216e-01
(CVXPY) Sep 20 03:21:05 PM: Compilation took 1.989e-01 seconds
(CVXPY) Sep 20 03:21:05 PM: Solver (including time spent in interface) took 9.608e-01 seconds
Iteration: 4, Objective: 0.4216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:05 PM: Your problem has 25059 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:05 PM: Finished problem compilation (took 1.696e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25059
  constraints   = 50059
  nnz(P)        = 0
  nnz(A)        = 349618
  cones (total) = 1
    : Nonnegative = 1,  numel = 50059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3201e-01  +6.1423e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0904e-01  +1.6020e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7355e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.54e-01  
  5  +5.0001e-01  +1.4659e+00  9.66e-01  2.89e-03  1.56e+00  2.89e-05  1.89e-01  2.32e-01  
  6  +5.0000e-01  +7.7668e-01  2.77e-01  8.26e-04  4.47e-01  9.47e-06  5.87e-02  6.94e-01  
  7  +4.9999e-01  +7.9133e-01  2.91e-01  8.66e-04  4.69e-01  1.74e-05  2.41e-02  7.16e-01  
  8  +4.9997e-01  +7.9210e-01  2.92e-01  8.60e-04  4.66e-01  2.52e-05  1.44e-02  4.53e-01  
  9  +5.0002e-01  +7.7977e-01  2.80e-01  8.17e-04  4.43e-01  2.63e-06  1.11e-02  9.90e-01  
 10  +4.9984e-01  +7.7049e-01  2.71e-01  1.10e-04  6.01e-02  8.31e-05  3.02e-04  9.76e-01  
 11  +4.9828e-01  +7.6277e-01  2.64e-01  1.30e-05  7.13e-03  7.06e-04  3.43e-05  8.87e-01  
 12  +4.9579e-01  +7.3632e-01  2.41e-01  1.13e-05  6.22e-03  5.69e-04  3.01e-05  2.37e-01  
 13  +4.9529e-01  +7.3059e-01  2.35e-01  1.12e-05  6.17e-03  5.19e-04  2.99e-05  5.31e-02  
 14  +4.9384e-01  +7.2014e-01  2.26e-01  1.02e-05  5.61e-03  4.73e-04  2.72e-05  1.66e-01  
 15  +4.9347e-01  +7.1690e-01  2.23e-01  1.01e-05  5.56e-03  4.47e-04  2.71e-05  3.79e-02  
 16  +4.9256e-01  +7.1040e-01  2.18e-01  9.86e-06  5.40e-03  4.06e-04  2.63e-05  7.99e-02  
 17  +4.8699e-01  +6.6301e-01  1.76e-01  8.63e-06  4.72e-03  1.03e-05  2.35e-05  7.32e-01  
 18  +4.8417e-01  +6.5131e-01  1.67e-01  7.73e-06  4.22e-03  7.23e-06  2.12e-05  3.58e-01  
 19  +4.8265e-01  +6.4447e-01  1.62e-01  7.57e-06  4.14e-03  5.78e-06  2.09e-05  1.72e-01  
 20  +4.6657e-01  +5.8045e-01  1.14e-01  4.39e-06  2.39e-03  3.76e-06  1.26e-05  5.06e-01  
 21  +4.6548e-01  +5.7653e-01  1.11e-01  4.26e-06  2.32e-03  3.18e-06  1.22e-05  1.93e-01  
 22  +4.5332e-01  +5.3246e-01  7.91e-02  2.86e-06  1.56e-03  2.03e-06  8.48e-06  3.67e-01  
 23  +4.4946e-01  +5.1873e-01  6.93e-02  2.46e-06  1.34e-03  1.70e-06  7.36e-06  1.95e-01  
 24  +4.4003e-01  +4.8462e-01  4.46e-02  1.49e-06  8.08e-04  6.64e-07  4.54e-06  9.17e-01  
 25  +4.3641e-01  +4.7196e-01  3.56e-02  1.16e-06  6.32e-04  5.46e-07  3.58e-06  5.11e-01  
 26  +4.3623e-01  +4.7134e-01  3.51e-02  1.15e-06  6.23e-04  5.40e-07  3.53e-06  7.67e-02  
 27  +4.3486e-01  +4.6633e-01  3.15e-02  1.02e-06  5.52e-04  5.02e-07  3.13e-06  5.34e-01  
 28  +4.3430e-01  +4.6443e-01  3.01e-02  9.72e-07  5.28e-04  4.83e-07  3.00e-06  9.69e-02  
 29  +4.3364e-01  +4.6189e-01  2.83e-02  9.04e-07  4.91e-04  4.67e-07  2.80e-06  6.53e-01  
 30  +4.2668e-01  +4.3890e-01  1.22e-02  3.92e-07  2.13e-04  2.02e-07  1.24e-06  6.41e-01  
 31  +4.2288e-01  +4.2641e-01  3.53e-03  1.14e-07  6.17e-05  5.83e-08  3.65e-07  7.34e-01  
 32  +4.2149e-01  +4.2186e-01  3.71e-04  1.20e-08  6.49e-06  6.04e-09  3.87e-08  9.23e-01  
 33  +4.2132e-01  +4.2133e-01  3.79e-06  1.22e-10  6.63e-08  6.16e-11  3.95e-10  9.90e-01  
 34  +4.2132e-01  +4.2132e-01  3.79e-08  1.22e-12  6.63e-10  6.16e-13  3.95e-12  9.90e-01  
 35  +4.2132e-01  +4.2132e-01  3.83e-10  1.23e-14  6.69e-12  6.16e-15  3.95e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2195533s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:06 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:06 PM: Optimal value: 4.213e-01
(CVXPY) Sep 20 03:21:06 PM: Compilation took 1.696e-01 seconds
(CVXPY) Sep 20 03:21:06 PM: Solver (including time spent in interface) took 1.261e+00 seconds
Iteration: 5, Objective: 0.4213
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:06 PM: Your problem has 25068 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:07 PM: Finished problem compilation (took 1.853e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25068
  constraints   = 50068
  nnz(P)        = 0
  nnz(A)        = 351050
  cones (total) = 1
    : Nonnegative = 1,  numel = 50068

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3201e-01  +6.1419e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0904e-01  +1.6019e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0134e-01  +1.7354e+01  1.69e+01  4.64e-02  2.42e+01  5.25e-06  1.95e-01  4.54e-01  
  5  +5.0001e-01  +1.3592e+00  8.59e-01  2.57e-03  1.39e+00  2.91e-05  1.89e-01  2.63e-01  
  6  +5.0000e-01  +7.7267e-01  2.73e-01  8.14e-04  4.41e-01  1.11e-05  5.89e-02  6.92e-01  
  7  +4.9997e-01  +7.9423e-01  2.94e-01  8.71e-04  4.72e-01  2.69e-05  1.78e-02  8.36e-01  
  8  +4.9881e-01  +7.4243e-01  2.44e-01  1.93e-04  1.05e-01  5.58e-04  6.01e-04  9.73e-01  
  9  +4.9855e-01  +7.3358e-01  2.35e-01  1.31e-04  7.16e-02  6.56e-04  3.89e-04  5.30e-01  
 10  +4.9963e-01  +7.1560e-01  2.16e-01  1.04e-04  5.70e-02  1.41e-04  2.92e-04  9.90e-01  
 11  +4.9819e-01  +7.0993e-01  2.12e-01  2.43e-05  1.33e-02  6.05e-04  6.53e-05  7.85e-01  
 12  +4.9755e-01  +7.0682e-01  2.09e-01  1.82e-05  1.00e-02  6.86e-04  4.88e-05  3.74e-01  
 13  +4.9750e-01  +7.0234e-01  2.05e-01  1.52e-05  8.31e-03  2.37e-04  4.04e-05  8.28e-01  
 14  +4.9670e-01  +6.9864e-01  2.02e-01  1.32e-05  7.23e-03  2.00e-04  3.51e-05  3.52e-01  
 15  +4.8969e-01  +6.6824e-01  1.79e-01  6.89e-06  3.77e-03  2.31e-04  1.85e-05  6.65e-01  
 16  +4.8567e-01  +6.5216e-01  1.66e-01  6.29e-06  3.45e-03  2.04e-04  1.70e-05  1.13e-01  
 17  +4.8375e-01  +6.4499e-01  1.61e-01  6.23e-06  3.41e-03  1.83e-04  1.70e-05  3.36e-02  
 18  +4.8134e-01  +6.3613e-01  1.55e-01  5.92e-06  3.24e-03  1.64e-04  1.63e-05  9.03e-02  
 19  +4.7828e-01  +6.2471e-01  1.46e-01  5.81e-06  3.17e-03  1.26e-04  1.62e-05  1.15e-01  
 20  +4.6998e-01  +5.9343e-01  1.23e-01  4.71e-06  2.57e-03  9.65e-05  1.34e-05  2.21e-01  
 21  +4.5973e-01  +5.5772e-01  9.80e-02  3.63e-06  1.98e-03  3.12e-05  1.06e-05  5.74e-01  
 22  +4.5084e-01  +5.2534e-01  7.45e-02  2.66e-06  1.45e-03  1.45e-05  7.93e-06  4.97e-01  
 23  +4.4135e-01  +4.9048e-01  4.91e-02  1.65e-06  8.97e-04  1.79e-07  5.03e-06  9.90e-01  
 24  +4.3617e-01  +4.7251e-01  3.63e-02  1.20e-06  6.55e-04  1.88e-07  3.72e-06  3.55e-01  
 25  +4.3503e-01  +4.6849e-01  3.35e-02  1.10e-06  5.99e-04  2.19e-07  3.42e-06  2.01e-01  
 26  +4.3154e-01  +4.5564e-01  2.41e-02  7.76e-07  4.22e-04  3.81e-07  2.42e-06  9.90e-01  
 27  +4.2463e-01  +4.3283e-01  8.20e-03  2.65e-07  1.44e-04  1.31e-07  8.48e-07  7.94e-01  
 28  +4.2138e-01  +4.2214e-01  7.62e-04  2.47e-08  1.34e-05  1.21e-08  8.01e-08  9.11e-01  
 29  +4.2104e-01  +4.2105e-01  8.19e-06  2.65e-10  1.44e-07  1.30e-10  8.62e-10  9.90e-01  
 30  +4.2104e-01  +4.2104e-01  8.22e-08  2.66e-12  1.44e-09  1.30e-12  8.65e-12  9.90e-01  
 31  +4.2104e-01  +4.2104e-01  8.34e-10  2.70e-14  1.47e-11  1.31e-14  8.71e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 967.3924ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:08 PM: Optimal value: 4.210e-01
(CVXPY) Sep 20 03:21:08 PM: Compilation took 1.853e-01 seconds
(CVXPY) Sep 20 03:21:08 PM: Solver (including time spent in interface) took 1.010e+00 seconds
Iteration: 6, Objective: 0.4210
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:08 PM: Your problem has 25070 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:08 PM: Finished problem compilation (took 1.616e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25070
  constraints   = 50070
  nnz(P)        = 0
  nnz(A)        = 351178
  cones (total) = 1
    : Nonnegative = 1,  numel = 50070

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4252e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3201e-01  +6.1419e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0904e-01  +1.6019e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0134e-01  +1.7353e+01  1.69e+01  4.64e-02  2.42e+01  5.25e-06  1.95e-01  4.54e-01  
  5  +5.0000e-01  +1.3270e+00  8.27e-01  2.47e-03  1.34e+00  2.91e-05  1.88e-01  2.73e-01  
  6  +5.0000e-01  +7.6770e-01  2.68e-01  7.99e-04  4.33e-01  1.16e-05  5.83e-02  6.95e-01  
  7  +4.9996e-01  +7.9599e-01  2.96e-01  8.75e-04  4.74e-01  2.95e-05  1.72e-02  8.43e-01  
  8  +4.9837e-01  +7.3298e-01  2.35e-01  1.48e-04  8.08e-02  7.61e-04  4.52e-04  9.79e-01  
  9  +4.9820e-01  +7.2954e-01  2.31e-01  1.20e-04  6.58e-02  8.22e-04  3.58e-04  3.18e-01  
 10  +4.9949e-01  +7.1562e-01  2.16e-01  9.54e-05  5.23e-02  1.98e-04  2.67e-04  9.90e-01  
 11  +4.9720e-01  +7.0727e-01  2.10e-01  1.95e-05  1.07e-02  9.55e-04  5.25e-05  8.11e-01  
 12  +4.9700e-01  +7.0425e-01  2.07e-01  1.64e-05  8.98e-03  6.66e-04  4.39e-05  5.40e-01  
 13  +4.9683e-01  +6.9853e-01  2.02e-01  1.54e-05  8.46e-03  4.42e-04  4.13e-05  3.75e-01  
 14  +4.9296e-01  +6.8441e-01  1.91e-01  8.32e-06  4.56e-03  3.41e-04  2.23e-05  9.37e-01  
 15  +4.8873e-01  +6.6625e-01  1.78e-01  7.45e-06  4.08e-03  2.91e-04  2.01e-05  1.63e-01  
 16  +4.8494e-01  +6.5142e-01  1.66e-01  7.11e-06  3.89e-03  1.86e-04  1.94e-05  2.56e-01  
 17  +4.8159e-01  +6.3933e-01  1.58e-01  6.88e-06  3.76e-03  1.19e-04  1.91e-05  2.40e-01  
 18  +4.6626e-01  +5.7941e-01  1.13e-01  4.41e-06  2.40e-03  6.07e-05  1.27e-05  4.86e-01  
 19  +4.5524e-01  +5.4050e-01  8.53e-02  3.15e-06  1.71e-03  2.60e-05  9.30e-06  5.14e-01  
 20  +4.4620e-01  +5.0839e-01  6.22e-02  2.21e-06  1.20e-03  1.73e-05  6.70e-06  3.17e-01  
 21  +4.3874e-01  +4.8140e-01  4.27e-02  1.42e-06  7.71e-04  4.47e-07  4.36e-06  9.90e-01  
 22  +4.3588e-01  +4.7160e-01  3.57e-02  1.18e-06  6.41e-04  3.92e-07  3.65e-06  2.38e-01  
 23  +4.3366e-01  +4.6389e-01  3.02e-02  9.88e-07  5.37e-04  3.82e-07  3.08e-06  4.34e-01  
 24  +4.2558e-01  +4.3647e-01  1.09e-02  3.53e-07  1.92e-04  1.67e-07  1.13e-06  9.28e-01  
 25  +4.2140e-01  +4.2266e-01  1.26e-03  4.10e-08  2.23e-05  1.94e-08  1.34e-07  9.09e-01  
 26  +4.2085e-01  +4.2087e-01  1.92e-05  6.22e-10  3.38e-07  2.94e-10  2.03e-09  9.85e-01  
 27  +4.2084e-01  +4.2084e-01  1.94e-07  6.30e-12  3.42e-09  2.97e-12  2.05e-11  9.90e-01  
 28  +4.2084e-01  +4.2084e-01  1.97e-09  6.40e-14  3.47e-11  3.00e-14  2.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 958.4572ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:09 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:09 PM: Optimal value: 4.208e-01
(CVXPY) Sep 20 03:21:09 PM: Compilation took 1.616e-01 seconds
(CVXPY) Sep 20 03:21:09 PM: Solver (including time spent in interface) took 9.968e-01 seconds
Iteration: 7, Objective: 0.4208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:09 PM: Your problem has 25075 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:09 PM: Finished problem compilation (took 1.706e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25075
  constraints   = 50075
  nnz(P)        = 0
  nnz(A)        = 351865
  cones (total) = 1
    : Nonnegative = 1,  numel = 50075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1413e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6018e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0134e-01  +1.7357e+01  1.69e+01  4.64e-02  2.42e+01  5.25e-06  1.95e-01  4.54e-01  
  5  +5.0001e-01  +1.3870e+00  8.87e-01  2.65e-03  1.43e+00  2.90e-05  1.89e-01  2.55e-01  
  6  +5.0000e-01  +8.1779e-01  3.18e-01  9.49e-04  5.14e-01  1.20e-05  6.80e-02  6.43e-01  
  7  +4.9998e-01  +7.7563e-01  2.76e-01  8.19e-04  4.44e-01  2.13e-05  2.11e-02  8.12e-01  
  8  +4.9942e-01  +7.5779e-01  2.58e-01  3.59e-04  1.96e-01  2.78e-04  1.26e-03  9.57e-01  
  9  +4.9847e-01  +7.3349e-01  2.35e-01  1.23e-04  6.75e-02  6.90e-04  3.65e-04  8.74e-01  
 10  +4.9771e-01  +7.2576e-01  2.28e-01  7.19e-05  3.94e-02  9.86e-04  2.05e-04  5.81e-01  
 11  +4.9649e-01  +7.1942e-01  2.23e-01  4.40e-05  2.41e-02  1.42e-03  1.23e-04  4.86e-01  
 12  +4.9789e-01  +7.1364e-01  2.16e-01  3.78e-05  2.07e-02  6.81e-04  1.03e-04  6.95e-01  
 13  +4.9438e-01  +6.9956e-01  2.05e-01  1.47e-05  8.07e-03  1.47e-03  3.98e-05  6.92e-01  
 14  +4.9182e-01  +6.8489e-01  1.93e-01  1.10e-05  6.01e-03  1.12e-03  2.96e-05  5.54e-01  
 15  +4.8237e-01  +6.4410e-01  1.62e-01  6.67e-06  3.64e-03  1.06e-03  1.83e-05  4.88e-01  
 16  +4.8115e-01  +6.3913e-01  1.58e-01  6.61e-06  3.61e-03  9.88e-04  1.83e-05  2.00e-02  
 17  +4.7886e-01  +6.3059e-01  1.52e-01  6.19e-06  3.38e-03  8.91e-04  1.72e-05  1.09e-01  
 18  +4.7702e-01  +6.2320e-01  1.46e-01  6.11e-06  3.34e-03  7.51e-04  1.71e-05  7.70e-02  
 19  +4.7063e-01  +5.9875e-01  1.28e-01  5.12e-06  2.80e-03  5.98e-04  1.46e-05  2.10e-01  
 20  +4.6705e-01  +5.8627e-01  1.19e-01  4.70e-06  2.56e-03  3.13e-04  1.35e-05  4.02e-01  
 21  +4.4462e-01  +5.0329e-01  5.87e-02  2.06e-06  1.12e-03  1.07e-04  6.24e-06  6.15e-01  
 22  +4.4216e-01  +4.9456e-01  5.24e-02  1.81e-06  9.85e-04  8.64e-05  5.54e-06  1.94e-01  
 23  +4.3238e-01  +4.5996e-01  2.76e-02  9.14e-07  4.96e-04  1.88e-05  2.87e-06  7.78e-01  
 24  +4.3208e-01  +4.5885e-01  2.68e-02  8.84e-07  4.80e-04  1.62e-05  2.78e-06  1.47e-01  
 25  +4.3059e-01  +4.5371e-01  2.31e-02  7.60e-07  4.13e-04  1.20e-05  2.40e-06  2.66e-01  
 26  +4.2722e-01  +4.4221e-01  1.50e-02  4.89e-07  2.66e-04  5.42e-06  1.56e-06  5.59e-01  
 27  +4.2205e-01  +4.2503e-01  2.98e-03  9.69e-08  5.26e-05  9.13e-07  3.15e-07  8.28e-01  
 28  +4.2078e-01  +4.2084e-01  5.50e-05  1.79e-09  9.72e-07  1.57e-08  5.85e-09  9.83e-01  
 29  +4.2076e-01  +4.2076e-01  5.61e-07  1.83e-11  9.91e-09  1.60e-10  5.97e-11  9.90e-01  
 30  +4.2076e-01  +4.2076e-01  5.61e-09  1.83e-13  9.92e-11  1.60e-12  5.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 935.6934ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:10 PM: Optimal value: 4.208e-01
(CVXPY) Sep 20 03:21:10 PM: Compilation took 1.706e-01 seconds
(CVXPY) Sep 20 03:21:10 PM: Solver (including time spent in interface) took 9.716e-01 seconds
Iteration: 8, Objective: 0.4208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:10 PM: Your problem has 25076 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:11 PM: Finished problem compilation (took 1.525e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25076
  constraints   = 50076
  nnz(P)        = 0
  nnz(A)        = 351927
  cones (total) = 1
    : Nonnegative = 1,  numel = 50076

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.71e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1411e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6017e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0134e-01  +1.7357e+01  1.69e+01  4.64e-02  2.42e+01  5.25e-06  1.95e-01  4.54e-01  
  5  +5.0001e-01  +1.3569e+00  8.57e-01  2.56e-03  1.38e+00  2.91e-05  1.89e-01  2.64e-01  
  6  +5.0000e-01  +8.1494e-01  3.15e-01  9.40e-04  5.09e-01  1.25e-05  6.80e-02  6.43e-01  
  7  +4.9997e-01  +7.9863e-01  2.99e-01  8.86e-04  4.80e-01  2.41e-05  2.02e-02  8.71e-01  
  8  +4.9923e-01  +7.5055e-01  2.51e-01  2.81e-04  1.53e-01  3.66e-04  9.29e-04  9.65e-01  
  9  +4.9707e-01  +7.1489e-01  2.18e-01  6.14e-05  3.36e-02  1.30e-03  1.75e-04  9.90e-01  
 10  +4.9776e-01  +7.1211e-01  2.14e-01  4.60e-05  2.52e-02  8.74e-04  1.27e-04  7.45e-01  
 11  +4.9803e-01  +7.1073e-01  2.13e-01  3.77e-05  2.06e-02  6.66e-04  1.03e-04  5.52e-01  
 12  +4.9850e-01  +7.0916e-01  2.11e-01  3.13e-05  1.72e-02  3.88e-04  8.43e-05  6.73e-01  
 13  +4.9695e-01  +7.0330e-01  2.06e-01  1.73e-05  9.48e-03  6.60e-04  4.64e-05  4.70e-01  
 14  +4.9683e-01  +7.0201e-01  2.05e-01  1.72e-05  9.43e-03  6.11e-04  4.61e-05  7.16e-02  
 15  +4.9160e-01  +6.8051e-01  1.89e-01  8.33e-06  4.56e-03  8.61e-04  2.23e-05  6.88e-01  
 16  +4.8598e-01  +6.5653e-01  1.71e-01  7.02e-06  3.84e-03  7.25e-04  1.91e-05  2.16e-01  
 17  +4.8486e-01  +6.5241e-01  1.68e-01  6.97e-06  3.81e-03  6.80e-04  1.90e-05  2.29e-02  
 18  +4.8139e-01  +6.3894e-01  1.58e-01  6.43e-06  3.52e-03  5.52e-04  1.77e-05  1.68e-01  
 19  +4.8012e-01  +6.3438e-01  1.54e-01  6.39e-06  3.49e-03  5.14e-04  1.77e-05  2.26e-02  
 20  +4.7409e-01  +6.1154e-01  1.37e-01  5.56e-06  3.04e-03  3.46e-04  1.56e-05  2.76e-01  
 21  +4.6733e-01  +5.8694e-01  1.20e-01  4.75e-06  2.59e-03  1.33e-04  1.36e-05  5.01e-01  
 22  +4.4917e-01  +5.1979e-01  7.06e-02  2.55e-06  1.39e-03  5.93e-05  7.67e-06  5.19e-01  
 23  +4.4492e-01  +5.0472e-01  5.98e-02  2.12e-06  1.15e-03  4.77e-05  6.45e-06  1.91e-01  
 24  +4.3609e-01  +4.7266e-01  3.66e-02  1.21e-06  6.60e-04  5.00e-07  3.77e-06  9.84e-01  
 25  +4.3443e-01  +4.6701e-01  3.26e-02  1.08e-06  5.84e-04  4.52e-07  3.35e-06  1.88e-01  
 26  +4.3408e-01  +4.6573e-01  3.16e-02  1.04e-06  5.67e-04  4.47e-07  3.26e-06  1.51e-01  
 27  +4.3084e-01  +4.5459e-01  2.38e-02  7.77e-07  4.22e-04  3.52e-07  2.45e-06  5.12e-01  
 28  +4.2404e-01  +4.3163e-01  7.59e-03  2.47e-07  1.34e-04  1.21e-07  7.95e-07  9.90e-01  
 29  +4.2099e-01  +4.2164e-01  6.50e-04  2.12e-08  1.15e-05  1.03e-08  6.93e-08  9.19e-01  
 30  +4.2070e-01  +4.2071e-01  6.85e-06  2.23e-10  1.21e-07  1.08e-10  7.32e-10  9.90e-01  
 31  +4.2070e-01  +4.2070e-01  6.87e-08  2.24e-12  1.22e-09  1.09e-12  7.34e-12  9.90e-01  
 32  +4.2070e-01  +4.2070e-01  7.01e-10  2.28e-14  1.24e-11  1.10e-14  7.41e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0408752s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:12 PM: Optimal value: 4.207e-01
(CVXPY) Sep 20 03:21:12 PM: Compilation took 1.525e-01 seconds
(CVXPY) Sep 20 03:21:12 PM: Solver (including time spent in interface) took 1.078e+00 seconds
FULL MODEL:
  Accruacy: 0.57974
  Our objective: 0.15948

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.1538)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00056)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.00052)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00084)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00044)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.00132)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 20.60734510421753
Best over terms:
  Our final objective: 0.15380000000000002
    Its accruacy: 0.5769
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15380000000000002
  Highest accruacy: 0.5769
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

