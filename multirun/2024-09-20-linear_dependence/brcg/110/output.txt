Command:
python test_script.py -s linear_dependence -d 3 -n 10000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2828
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 3.

Computed total variation: 0.2828
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:07 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:07 PM: Finished problem compilation (took 1.114e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 30007
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +5.0009e+03  5.00e+03  9.84e-01  7.87e+01  1.00e+00  1.00e+00   ------   
  1  +6.2010e-01  +9.2709e+02  9.26e+02  3.06e-01  4.09e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5578e-01  +1.5876e+02  1.58e+02  1.36e-01  2.17e+01  6.68e-03  2.21e-01  6.63e-01  
  3  +5.0917e-01  +2.7149e+01  2.66e+01  1.02e-01  1.59e+01  1.13e-05  2.19e-01  5.62e-02  
  4  +4.9998e-01  +1.2415e+00  7.42e-01  4.95e-03  7.77e-01  4.05e-06  1.64e-01  7.10e-01  
  5  +4.9973e-01  +8.0819e-01  3.08e-01  2.03e-03  3.20e-01  5.08e-06  2.95e-02  8.66e-01  
  6  +4.7885e-01  +9.1684e-01  4.38e-01  2.52e-04  4.04e-02  2.73e-04  7.36e-04  9.81e-01  
  7  +4.3723e-01  +5.8767e-01  1.50e-01  3.71e-05  5.92e-03  3.12e-04  1.14e-04  8.51e-01  
  8  +4.0726e-01  +4.2652e-01  1.93e-02  4.80e-06  7.60e-04  1.09e-05  1.81e-05  9.27e-01  
  9  +4.0291e-01  +4.0514e-01  2.22e-03  5.21e-07  8.26e-05  1.16e-06  2.15e-06  8.91e-01  
 10  +4.0221e-01  +4.0224e-01  3.34e-05  7.28e-09  1.15e-06  1.25e-08  3.24e-08  9.90e-01  
 11  +4.0220e-01  +4.0220e-01  3.34e-07  7.27e-11  1.15e-08  1.25e-10  3.24e-10  9.90e-01  
 12  +4.0220e-01  +4.0220e-01  3.34e-09  7.29e-13  1.16e-10  1.40e-12  3.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.8056ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:07 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 03:05:07 PM: Compilation took 1.114e-02 seconds
(CVXPY) Sep 20 03:05:07 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:07 PM: Your problem has 5008 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:07 PM: Finished problem compilation (took 1.055e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5008
  constraints   = 10008
  nnz(P)        = 0
  nnz(A)        = 31923
  cones (total) = 1
    : Nonnegative = 1,  numel = 10008

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +5.0016e+03  5.00e+03  9.84e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +6.1998e-01  +9.2736e+02  9.27e+02  3.06e-01  4.21e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5566e-01  +1.5850e+02  1.58e+02  1.36e-01  2.23e+01  6.69e-03  2.20e-01  6.64e-01  
  3  +5.0904e-01  +2.6867e+01  2.64e+01  1.02e-01  1.63e+01  1.13e-05  2.18e-01  5.79e-02  
  4  +5.0082e-01  +3.6757e+00  3.17e+00  2.09e-02  3.30e+00  4.95e-06  2.03e-01  2.00e-01  
  5  +4.9999e-01  +7.7433e-01  2.74e-01  1.83e-03  2.97e-01  1.40e-06  4.70e-02  9.11e-01  
  6  +4.9975e-01  +8.4310e-01  3.43e-01  2.16e-03  3.51e-01  4.58e-06  1.73e-02  7.12e-01  
  7  +4.8743e-01  +8.2807e-01  3.41e-01  1.87e-04  3.12e-02  1.48e-04  5.04e-04  9.73e-01  
  8  +4.8485e-01  +8.4637e-01  3.62e-01  1.50e-04  2.50e-02  1.46e-04  3.86e-04  5.14e-01  
  9  +4.8315e-01  +8.3483e-01  3.52e-01  1.39e-04  2.32e-02  1.15e-04  3.82e-04  1.75e-01  
 10  +4.8280e-01  +8.2000e-01  3.37e-01  1.39e-04  2.32e-02  1.00e-04  3.80e-04  6.15e-02  
 11  +4.7679e-01  +7.9404e-01  3.17e-01  1.07e-04  1.78e-02  1.05e-04  2.94e-04  2.86e-01  
 12  +4.5314e-01  +6.9720e-01  2.44e-01  5.71e-05  9.45e-03  2.88e-05  1.57e-04  9.90e-01  
 13  +4.1537e-01  +5.6600e-01  1.51e-01  2.78e-05  4.57e-03  1.51e-05  8.23e-05  6.29e-01  
 14  +3.6789e-01  +3.8947e-01  2.16e-02  3.88e-06  6.33e-04  1.32e-07  1.35e-05  8.96e-01  
 15  +3.5883e-01  +3.5912e-01  2.91e-04  5.19e-08  8.46e-06  2.94e-09  1.88e-07  9.87e-01  
 16  +3.5870e-01  +3.5870e-01  2.91e-06  5.19e-10  8.45e-08  2.94e-11  1.89e-09  9.90e-01  
 17  +3.5870e-01  +3.5870e-01  2.91e-08  5.19e-12  8.45e-10  2.95e-13  1.89e-11  9.90e-01  
 18  +3.5870e-01  +3.5870e-01  2.91e-10  5.18e-14  8.45e-12  2.95e-15  1.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.5103ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:07 PM: Optimal value: 3.587e-01
(CVXPY) Sep 20 03:05:07 PM: Compilation took 1.055e-02 seconds
(CVXPY) Sep 20 03:05:07 PM: Solver (including time spent in interface) took 4.561e-02 seconds
FULL MODEL:
  Accruacy: 0.6414
  Our objective: 0.2828

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2828)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9041883945465088
Best over terms:
  Our final objective: 0.2828
    Its accruacy: 0.6414
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.2828
  Highest accruacy: 0.6414
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

