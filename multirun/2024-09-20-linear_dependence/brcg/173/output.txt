Command:
python test_script.py -s linear_dependence -d 5 -n 100 --seed 34 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:22 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Finished problem compilation (took 1.009e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9531e-01  +5.1245e+01  5.08e+01  8.62e-01  8.52e+00  1.00e+00  1.05e+00   ------   
  1  +5.9036e-01  +1.0438e+01  9.85e+00  3.17e-01  4.68e+00  3.96e-03  5.22e-01  6.50e-01  
  2  +5.1542e-01  +1.4682e+00  9.53e-01  5.92e-02  1.06e+00  1.21e-02  1.49e-01  9.90e-01  
  3  +4.8950e-01  +1.3155e+00  8.26e-01  3.03e-02  5.62e-01  1.51e-02  7.88e-02  5.30e-01  
  4  +4.4859e-01  +8.9238e-01  4.44e-01  1.32e-02  2.43e-01  7.54e-03  3.84e-02  5.61e-01  
  5  +4.1163e-01  +5.2438e-01  1.13e-01  3.58e-03  6.35e-02  1.08e-03  1.30e-02  7.78e-01  
  6  +3.9095e-01  +4.3921e-01  4.83e-02  1.08e-03  1.92e-02  3.88e-04  5.11e-03  7.74e-01  
  7  +3.8135e-01  +3.8568e-01  4.33e-03  9.57e-05  1.70e-03  1.75e-05  4.91e-04  9.90e-01  
  8  +3.8011e-01  +3.8016e-01  4.57e-05  1.00e-06  1.78e-05  1.81e-07  5.20e-06  9.89e-01  
  9  +3.8010e-01  +3.8010e-01  4.57e-07  1.00e-08  1.78e-07  1.81e-09  5.20e-08  9.90e-01  
 10  +3.8010e-01  +3.8010e-01  4.57e-09  1.00e-10  1.78e-09  1.81e-11  5.20e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0558ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:22 PM: Optimal value: 3.801e-01
(CVXPY) Sep 20 03:07:22 PM: Compilation took 1.009e-02 seconds
(CVXPY) Sep 20 03:07:22 PM: Solver (including time spent in interface) took 2.044e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:22 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Finished problem compilation (took 3.054e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 519
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9061e-01  +5.1994e+01  5.15e+01  8.70e-01  8.79e+00  1.00e+00  1.07e+00   ------   
  1  +5.6306e-01  +1.0650e+01  1.01e+01  3.30e-01  4.76e+00  3.94e-03  5.43e-01  6.43e-01  
  2  +4.9318e-01  +2.0458e+00  1.55e+00  8.23e-02  1.49e+00  1.34e-02  1.99e-01  8.66e-01  
  3  +4.1823e-01  +1.3005e+00  8.82e-01  2.85e-02  5.29e-01  1.07e-02  7.82e-02  7.04e-01  
  4  +3.6230e-01  +6.6907e-01  3.07e-01  8.89e-03  1.61e-01  3.14e-03  3.04e-02  6.76e-01  
  5  +3.3803e-01  +4.7247e-01  1.34e-01  3.64e-03  6.52e-02  1.32e-03  1.40e-02  6.60e-01  
  6  +3.2437e-01  +3.8587e-01  6.15e-02  1.29e-03  2.37e-02  8.47e-04  4.72e-03  7.75e-01  
  7  +3.1330e-01  +3.4584e-01  3.25e-02  7.45e-04  1.36e-02  8.86e-05  2.88e-03  6.93e-01  
  8  +3.0205e-01  +3.0713e-01  5.09e-03  9.53e-05  1.77e-03  1.83e-05  3.77e-04  8.78e-01  
  9  +3.0043e-01  +3.0075e-01  3.24e-04  6.07e-06  1.12e-04  1.07e-06  2.47e-05  9.39e-01  
 10  +3.0030e-01  +3.0031e-01  6.05e-06  1.14e-07  2.09e-06  1.27e-08  4.81e-07  9.82e-01  
 11  +3.0030e-01  +3.0030e-01  6.03e-08  1.13e-09  2.09e-08  1.26e-10  4.82e-09  9.90e-01  
 12  +3.0030e-01  +3.0030e-01  6.03e-10  1.13e-11  2.09e-10  1.26e-12  4.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 406.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:22 PM: Optimal value: 3.003e-01
(CVXPY) Sep 20 03:07:22 PM: Compilation took 3.054e-04 seconds
(CVXPY) Sep 20 03:07:22 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:22 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 621
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9048e-01  +5.1986e+01  5.15e+01  8.75e-01  8.91e+00  1.00e+00  1.08e+00   ------   
  1  +5.5650e-01  +1.0783e+01  1.02e+01  3.50e-01  4.85e+00  3.88e-03  5.64e-01  6.32e-01  
  2  +4.8546e-01  +2.1313e+00  1.65e+00  8.65e-02  1.56e+00  1.49e-02  2.11e-01  8.72e-01  
  3  +3.9908e-01  +1.1870e+00  7.88e-01  2.41e-02  4.56e-01  1.12e-02  6.75e-02  7.49e-01  
  4  +3.3584e-01  +6.3766e-01  3.02e-01  7.21e-03  1.34e-01  4.11e-03  2.36e-02  7.42e-01  
  5  +3.0278e-01  +4.5677e-01  1.54e-01  3.67e-03  6.74e-02  1.59e-03  1.31e-02  5.62e-01  
  6  +2.6818e-01  +2.9462e-01  2.64e-02  6.04e-04  1.10e-02  1.38e-04  2.43e-03  9.03e-01  
  7  +2.6079e-01  +2.6198e-01  1.19e-03  2.72e-05  4.95e-04  5.30e-06  1.14e-04  9.54e-01  
  8  +2.6044e-01  +2.6053e-01  9.84e-05  2.25e-06  4.05e-05  3.34e-07  1.01e-05  9.22e-01  
  9  +2.6040e-01  +2.6040e-01  1.31e-06  2.99e-08  5.38e-07  4.18e-09  1.38e-07  9.88e-01  
 10  +2.6040e-01  +2.6040e-01  1.31e-08  2.99e-10  5.38e-09  4.18e-11  1.38e-09  9.90e-01  
 11  +2.6040e-01  +2.6040e-01  1.31e-10  2.99e-12  5.38e-11  4.18e-13  1.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 483.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:22 PM: Optimal value: 2.604e-01
(CVXPY) Sep 20 03:07:22 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:07:22 PM: Solver (including time spent in interface) took 4.092e-03 seconds
Iteration: 3, Objective: 0.2604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:22 PM: Your problem has 84 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Finished problem compilation (took 2.775e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 134
  nnz(P)        = 0
  nnz(A)        = 647
  cones (total) = 1
    : Nonnegative = 1,  numel = 134

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9005e-01  +5.1984e+01  5.15e+01  8.77e-01  8.90e+00  1.00e+00  1.08e+00   ------   
  1  +5.5142e-01  +1.0904e+01  1.04e+01  3.56e-01  4.87e+00  3.88e-03  5.71e-01  6.25e-01  
  2  +4.7840e-01  +2.2541e+00  1.78e+00  9.35e-02  1.65e+00  1.54e-02  2.29e-01  8.49e-01  
  3  +3.9634e-01  +1.2108e+00  8.15e-01  2.75e-02  5.07e-01  1.03e-02  7.81e-02  7.20e-01  
  4  +3.3977e-01  +7.6534e-01  4.26e-01  1.08e-02  1.98e-01  5.64e-03  3.50e-02  6.33e-01  
  5  +2.9741e-01  +5.0819e-01  2.11e-01  4.96e-03  8.97e-02  2.30e-03  1.82e-02  5.67e-01  
  6  +2.6147e-01  +3.0296e-01  4.15e-02  9.76e-04  1.74e-02  2.72e-04  4.24e-03  8.48e-01  
  7  +2.5143e-01  +2.5471e-01  3.28e-03  7.72e-05  1.37e-03  1.83e-05  3.63e-04  9.25e-01  
  8  +2.5056e-01  +2.5077e-01  2.09e-04  4.95e-06  8.75e-05  1.01e-06  2.39e-05  9.38e-01  
  9  +2.5050e-01  +2.5050e-01  3.55e-06  8.44e-08  1.49e-06  1.26e-08  4.18e-07  9.83e-01  
 10  +2.5050e-01  +2.5050e-01  3.54e-08  8.43e-10  1.49e-08  1.26e-10  4.18e-09  9.90e-01  
 11  +2.5050e-01  +2.5050e-01  3.55e-10  8.44e-12  1.49e-10  1.26e-12  4.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 496.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:22 PM: Optimal value: 2.505e-01
(CVXPY) Sep 20 03:07:22 PM: Compilation took 2.775e-03 seconds
(CVXPY) Sep 20 03:07:22 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:22 PM: Your problem has 88 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 88
  constraints   = 138
  nnz(P)        = 0
  nnz(A)        = 670
  cones (total) = 1
    : Nonnegative = 1,  numel = 138

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8846e-01  +5.2009e+01  5.15e+01  8.79e-01  8.84e+00  1.00e+00  1.08e+00   ------   
  1  +5.4195e-01  +1.0894e+01  1.04e+01  3.58e-01  4.82e+00  3.88e-03  5.73e-01  6.25e-01  
  2  +4.6485e-01  +2.2090e+00  1.74e+00  8.52e-02  1.50e+00  1.61e-02  2.11e-01  8.76e-01  
  3  +3.5769e-01  +1.1626e+00  8.05e-01  2.34e-02  4.27e-01  1.10e-02  6.76e-02  7.46e-01  
  4  +3.0616e-01  +6.5465e-01  3.48e-01  9.60e-03  1.71e-01  4.35e-03  3.26e-02  5.87e-01  
  5  +2.7731e-01  +4.5440e-01  1.77e-01  4.64e-03  8.19e-02  1.99e-03  1.77e-02  5.73e-01  
  6  +2.5078e-01  +2.9142e-01  4.06e-02  1.04e-03  1.81e-02  2.43e-04  4.67e-03  9.21e-01  
  7  +2.4144e-01  +2.4426e-01  2.83e-03  7.17e-05  1.25e-03  1.13e-05  3.48e-04  9.79e-01  
  8  +2.4065e-01  +2.4081e-01  1.59e-04  4.04e-06  7.00e-05  5.39e-07  2.01e-05  9.45e-01  
  9  +2.4060e-01  +2.4060e-01  2.40e-06  6.15e-08  1.06e-06  6.49e-09  3.13e-07  9.85e-01  
 10  +2.4060e-01  +2.4060e-01  2.40e-08  6.14e-10  1.06e-08  6.48e-11  3.13e-09  9.90e-01  
 11  +2.4060e-01  +2.4060e-01  2.40e-10  6.16e-12  1.07e-10  6.48e-13  3.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 658.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:22 PM: Optimal value: 2.406e-01
(CVXPY) Sep 20 03:07:22 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:07:22 PM: Solver (including time spent in interface) took 3.809e-03 seconds
FULL MODEL:
  Accruacy: 0.76
  Our objective: 0.52

IF 
    (x0 = 0 AND x1 = 0 AND x3 = 0)                       <-- (term's our objective: 0.2)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x3 = 1 AND x4 = 1)                       <-- (term's our objective: 0.12)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.14)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.522664785385132
Best over terms:
  Our final objective: 0.19999999999999998
    Its accruacy: 0.6
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.19999999999999998
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

