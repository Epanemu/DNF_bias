Command:
python test_script.py -s linear_dependence -d 7 -n 1000 --seed 21 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.122
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 7.

Computed total variation: 0.338
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 515 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Finished problem compilation (took 1.247e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 515
  constraints   = 1015
  nnz(P)        = 0
  nnz(A)        = 5015
  cones (total) = 1
    : Nonnegative = 1,  numel = 1015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +5.0073e+02  5.00e+02  9.54e-01  3.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.8783e-01  +1.0546e+02  1.05e+02  3.89e-01  2.00e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3673e-01  +1.3249e+01  1.27e+01  1.34e-01  8.71e+00  1.33e-02  2.49e-01  8.81e-01  
  3  +5.0628e-01  +3.0976e+00  2.59e+00  5.30e-02  3.30e+00  2.94e-05  2.30e-01  3.18e-01  
  4  +5.0042e-01  +7.0839e-01  2.08e-01  4.57e-03  2.99e-01  9.23e-06  6.17e-02  8.92e-01  
  5  +4.9998e-01  +6.3044e-01  1.30e-01  2.70e-03  1.78e-01  1.22e-05  1.85e-02  7.73e-01  
  6  +4.9425e-01  +6.2280e-01  1.29e-01  4.49e-04  3.00e-02  1.27e-04  1.43e-03  9.47e-01  
  7  +4.8157e-01  +5.3441e-01  5.28e-02  1.34e-04  8.90e-03  4.13e-05  4.61e-04  8.07e-01  
  8  +4.7202e-01  +4.9563e-01  2.36e-02  5.17e-05  3.44e-03  1.10e-05  2.01e-04  7.84e-01  
  9  +4.6515e-01  +4.6823e-01  3.07e-03  6.14e-06  4.08e-04  1.20e-06  2.56e-05  8.99e-01  
 10  +4.6412e-01  +4.6417e-01  5.10e-05  1.01e-07  6.73e-06  2.11e-08  4.26e-07  9.90e-01  
 11  +4.6410e-01  +4.6410e-01  5.10e-07  1.01e-09  6.73e-08  2.11e-10  4.26e-09  9.90e-01  
 12  +4.6410e-01  +4.6410e-01  5.10e-09  1.01e-11  6.73e-10  2.12e-12  4.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7927ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:43 PM: Optimal value: 4.641e-01
(CVXPY) Sep 20 03:11:43 PM: Compilation took 1.247e-02 seconds
(CVXPY) Sep 20 03:11:43 PM: Solver (including time spent in interface) took 4.100e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Finished problem compilation (took 5.066e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 5833
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +5.0129e+02  5.01e+02  9.55e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.8642e-01  +1.0566e+02  1.05e+02  3.91e-01  2.05e+01  3.86e-03  5.49e-01  6.10e-01  
  2  +5.3496e-01  +1.2885e+01  1.23e+01  1.31e-01  8.68e+00  1.36e-02  2.44e-01  9.00e-01  
  3  +5.0539e-01  +2.9170e+00  2.41e+00  4.96e-02  3.19e+00  2.96e-05  2.18e-01  3.99e-01  
  4  +5.0129e-01  +1.1290e+00  6.28e-01  1.37e-02  9.13e-01  1.28e-05  1.08e-01  5.70e-01  
  5  +4.9968e-01  +7.3672e-01  2.37e-01  4.63e-03  3.13e-01  1.48e-05  2.28e-02  8.77e-01  
  6  +4.8996e-01  +6.9911e-01  2.09e-01  8.42e-04  5.83e-02  1.04e-04  2.48e-03  9.10e-01  
  7  +4.8414e-01  +6.6384e-01  1.80e-01  5.77e-04  3.99e-02  9.92e-05  1.70e-03  3.97e-01  
  8  +4.7984e-01  +6.4571e-01  1.66e-01  4.18e-04  2.88e-02  9.82e-05  1.22e-03  4.96e-01  
  9  +4.7562e-01  +6.3012e-01  1.54e-01  3.22e-04  2.22e-02  1.02e-04  9.45e-04  3.05e-01  
 10  +4.5912e-01  +5.5708e-01  9.80e-02  1.84e-04  1.27e-02  4.65e-05  5.63e-04  9.47e-01  
 11  +4.4094e-01  +4.7979e-01  3.88e-02  6.99e-05  4.78e-03  1.65e-05  2.26e-04  6.84e-01  
 12  +4.2969e-01  +4.3577e-01  6.09e-03  1.05e-05  7.14e-04  2.40e-06  3.59e-05  8.64e-01  
 13  +4.2725e-01  +4.2737e-01  1.16e-04  1.95e-07  1.33e-05  5.87e-08  6.93e-07  9.90e-01  
 14  +4.2720e-01  +4.2720e-01  1.16e-06  1.95e-09  1.33e-07  5.87e-10  6.93e-09  9.90e-01  
 15  +4.2720e-01  +4.2720e-01  1.16e-08  1.95e-11  1.33e-09  5.88e-12  6.94e-11  9.90e-01  
 16  +4.2720e-01  +4.2720e-01  1.16e-10  1.95e-13  1.33e-11  5.89e-14  6.95e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.4787ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:43 PM: Optimal value: 4.272e-01
(CVXPY) Sep 20 03:11:43 PM: Compilation took 5.066e-03 seconds
(CVXPY) Sep 20 03:11:43 PM: Solver (including time spent in interface) took 1.130e-02 seconds
Iteration: 2, Objective: 0.4272
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 535 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Finished problem compilation (took 4.040e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 535
  constraints   = 1035
  nnz(P)        = 0
  nnz(A)        = 6267
  cones (total) = 1
    : Nonnegative = 1,  numel = 1035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0156e+02  5.01e+02  9.55e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.8485e-01  +1.0578e+02  1.05e+02  3.93e-01  2.05e+01  3.86e-03  5.49e-01  6.10e-01  
  2  +5.3377e-01  +1.2646e+01  1.21e+01  1.28e-01  8.45e+00  1.38e-02  2.39e-01  9.14e-01  
  3  +5.0471e-01  +2.7849e+00  2.28e+00  4.71e-02  3.04e+00  3.00e-05  2.07e-01  4.73e-01  
  4  +5.0128e-01  +1.2676e+00  7.66e-01  1.65e-02  1.10e+00  1.50e-05  1.03e-01  5.42e-01  
  5  +4.9767e-01  +9.5838e-01  4.61e-01  5.75e-03  3.97e-01  3.81e-05  1.83e-02  9.03e-01  
  6  +4.8626e-01  +8.2860e-01  3.42e-01  1.62e-03  1.13e-01  8.76e-05  4.69e-03  7.51e-01  
  7  +4.7676e-01  +7.4225e-01  2.65e-01  1.02e-03  7.04e-02  7.51e-05  3.04e-03  4.59e-01  
  8  +4.7311e-01  +7.3136e-01  2.58e-01  7.69e-04  5.33e-02  8.96e-05  2.27e-03  4.03e-01  
  9  +4.6400e-01  +6.7403e-01  2.10e-01  5.39e-04  3.73e-02  8.17e-05  1.62e-03  6.97e-01  
 10  +4.5330e-01  +6.2127e-01  1.68e-01  3.88e-04  2.68e-02  6.96e-05  1.19e-03  5.58e-01  
 11  +4.3278e-01  +5.1207e-01  7.93e-02  1.64e-04  1.12e-02  3.73e-05  5.37e-04  9.90e-01  
 12  +4.1455e-01  +4.3256e-01  1.80e-02  3.46e-05  2.36e-03  7.82e-06  1.23e-04  8.17e-01  
 13  +4.1030e-01  +4.1809e-01  7.79e-03  1.39e-05  9.48e-04  3.67e-06  5.07e-05  6.57e-01  
 14  +4.0750e-01  +4.0773e-01  2.32e-04  4.08e-07  2.79e-05  1.29e-07  1.52e-06  9.90e-01  
 15  +4.0740e-01  +4.0740e-01  2.32e-06  4.08e-09  2.79e-07  1.29e-09  1.52e-08  9.90e-01  
 16  +4.0740e-01  +4.0740e-01  2.32e-08  4.08e-11  2.79e-09  1.29e-11  1.52e-10  9.90e-01  
 17  +4.0740e-01  +4.0740e-01  2.32e-10  4.08e-13  2.79e-11  1.29e-13  1.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8984ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:43 PM: Optimal value: 4.074e-01
(CVXPY) Sep 20 03:11:43 PM: Compilation took 4.040e-03 seconds
(CVXPY) Sep 20 03:11:43 PM: Solver (including time spent in interface) took 4.013e-03 seconds
Iteration: 3, Objective: 0.4074
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Finished problem compilation (took 4.205e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6568
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9952e-01  +5.0149e+02  5.01e+02  9.55e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.8317e-01  +1.0591e+02  1.05e+02  3.95e-01  2.05e+01  3.86e-03  5.50e-01  6.09e-01  
  2  +5.3256e-01  +1.2405e+01  1.19e+01  1.25e-01  8.24e+00  1.40e-02  2.34e-01  9.29e-01  
  3  +5.0433e-01  +2.7109e+00  2.21e+00  4.57e-02  2.96e+00  3.10e-05  1.97e-01  5.33e-01  
  4  +5.0095e-01  +1.2307e+00  7.30e-01  1.56e-02  1.04e+00  1.58e-05  8.58e-02  5.90e-01  
  5  +4.9329e-01  +1.0239e+00  5.31e-01  3.81e-03  2.67e-01  6.99e-05  1.07e-02  9.33e-01  
  6  +4.7934e-01  +8.4319e-01  3.64e-01  1.49e-03  1.04e-01  8.55e-05  4.17e-03  6.31e-01  
  7  +4.7474e-01  +8.4953e-01  3.75e-01  1.07e-03  7.49e-02  1.24e-04  2.97e-03  4.47e-01  
  8  +4.6146e-01  +7.5114e-01  2.90e-01  8.07e-04  5.62e-02  9.76e-05  2.33e-03  4.95e-01  
  9  +4.3382e-01  +5.9891e-01  1.65e-01  3.66e-04  2.52e-02  6.16e-05  1.14e-03  6.14e-01  
 10  +4.0931e-01  +4.8267e-01  7.34e-02  1.49e-04  1.02e-02  2.95e-05  5.16e-04  7.05e-01  
 11  +4.0178e-01  +4.4578e-01  4.40e-02  8.73e-05  5.96e-03  2.52e-05  3.13e-04  9.59e-01  
 12  +3.8917e-01  +3.9617e-01  7.00e-03  1.33e-05  9.07e-04  3.83e-06  5.18e-05  8.61e-01  
 13  +3.8664e-01  +3.8674e-01  1.00e-04  1.88e-07  1.28e-05  5.12e-08  7.50e-07  9.90e-01  
 14  +3.8660e-01  +3.8660e-01  1.00e-06  1.88e-09  1.28e-07  5.12e-10  7.50e-09  9.90e-01  
 15  +3.8660e-01  +3.8660e-01  1.00e-08  1.88e-11  1.28e-09  5.12e-12  7.51e-11  9.90e-01  
 16  +3.8660e-01  +3.8660e-01  1.00e-10  1.88e-13  1.28e-11  5.13e-14  7.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.2299ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:43 PM: Optimal value: 3.866e-01
(CVXPY) Sep 20 03:11:43 PM: Compilation took 4.205e-03 seconds
(CVXPY) Sep 20 03:11:43 PM: Solver (including time spent in interface) took 8.527e-03 seconds
Iteration: 4, Objective: 0.3866
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 555 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Finished problem compilation (took 3.741e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 555
  constraints   = 1055
  nnz(P)        = 0
  nnz(A)        = 6739
  cones (total) = 1
    : Nonnegative = 1,  numel = 1055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0165e+02  5.01e+02  9.55e-01  3.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.8205e-01  +1.0589e+02  1.05e+02  3.95e-01  2.03e+01  3.86e-03  5.50e-01  6.09e-01  
  2  +5.3195e-01  +1.2273e+01  1.17e+01  1.23e-01  8.04e+00  1.41e-02  2.30e-01  9.37e-01  
  3  +5.0404e-01  +2.6523e+00  2.15e+00  4.45e-02  2.88e+00  3.14e-05  1.89e-01  5.75e-01  
  4  +5.0056e-01  +1.1854e+00  6.85e-01  1.43e-02  9.61e-01  1.70e-05  7.18e-02  6.44e-01  
  5  +4.8642e-01  +1.1680e+00  6.82e-01  3.02e-03  2.13e-01  1.20e-04  8.14e-03  9.36e-01  
  6  +4.6928e-01  +9.7447e-01  5.05e-01  1.53e-03  1.07e-01  1.25e-04  4.23e-03  5.28e-01  
  7  +4.5397e-01  +8.4724e-01  3.93e-01  9.84e-04  6.83e-02  1.19e-04  2.83e-03  4.60e-01  
  8  +4.4963e-01  +7.9605e-01  3.46e-01  9.17e-04  6.34e-02  1.10e-04  2.69e-03  2.40e-01  
  9  +4.1957e-01  +6.0517e-01  1.86e-01  4.20e-04  2.88e-02  5.92e-05  1.35e-03  5.78e-01  
 10  +4.1691e-01  +5.8849e-01  1.72e-01  3.85e-04  2.64e-02  6.37e-05  1.26e-03  2.78e-01  
 11  +3.9928e-01  +4.9784e-01  9.86e-02  2.12e-04  1.44e-02  3.56e-05  7.51e-04  4.43e-01  
 12  +3.8071e-01  +4.0850e-01  2.78e-02  5.55e-05  3.76e-03  1.40e-05  2.20e-04  9.62e-01  
 13  +3.7512e-01  +3.8429e-01  9.18e-03  1.83e-05  1.24e-03  4.91e-06  7.49e-05  9.90e-01  
 14  +3.7186e-01  +3.7203e-01  1.70e-04  3.37e-07  2.28e-05  8.75e-08  1.42e-06  9.82e-01  
 15  +3.7180e-01  +3.7180e-01  1.70e-06  3.37e-09  2.28e-07  8.75e-10  1.42e-08  9.90e-01  
 16  +3.7180e-01  +3.7180e-01  1.70e-08  3.37e-11  2.28e-09  8.76e-12  1.42e-10  9.90e-01  
 17  +3.7180e-01  +3.7180e-01  1.70e-10  3.37e-13  2.28e-11  8.76e-14  1.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:43 PM: Optimal value: 3.718e-01
(CVXPY) Sep 20 03:11:43 PM: Compilation took 3.741e-03 seconds
(CVXPY) Sep 20 03:11:43 PM: Solver (including time spent in interface) took 8.530e-03 seconds
Iteration: 5, Objective: 0.3718
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 565 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Finished problem compilation (took 4.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 565
  constraints   = 1065
  nnz(P)        = 0
  nnz(A)        = 6927
  cones (total) = 1
    : Nonnegative = 1,  numel = 1065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0173e+02  5.01e+02  9.55e-01  3.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.8126e-01  +1.0594e+02  1.05e+02  3.96e-01  2.02e+01  3.86e-03  5.50e-01  6.09e-01  
  2  +5.3117e-01  +1.2102e+01  1.16e+01  1.22e-01  7.88e+00  1.42e-02  2.27e-01  9.45e-01  
  3  +5.0386e-01  +2.6133e+00  2.11e+00  4.38e-02  2.83e+00  3.22e-05  1.83e-01  6.09e-01  
  4  +5.0030e-01  +1.1964e+00  6.96e-01  1.42e-02  9.54e-01  2.05e-05  6.51e-02  6.79e-01  
  5  +4.8574e-01  +1.3107e+00  8.25e-01  3.64e-03  2.55e-01  1.39e-04  9.78e-03  9.33e-01  
  6  +4.6399e-01  +9.9719e-01  5.33e-01  1.56e-03  1.09e-01  1.33e-04  4.37e-03  6.13e-01  
  7  +4.5225e-01  +9.0851e-01  4.56e-01  1.13e-03  7.82e-02  1.41e-04  3.23e-03  4.04e-01  
  8  +4.3340e-01  +7.1941e-01  2.86e-01  7.56e-04  5.18e-02  1.06e-04  2.37e-03  7.89e-01  
  9  +3.8704e-01  +4.6218e-01  7.51e-02  1.64e-04  1.11e-02  2.08e-05  6.04e-04  8.52e-01  
 10  +3.7442e-01  +4.0707e-01  3.27e-02  6.98e-05  4.71e-03  1.14e-05  2.82e-04  6.52e-01  
 11  +3.7375e-01  +4.0461e-01  3.09e-02  6.44e-05  4.35e-03  1.12e-05  2.59e-04  1.14e-01  
 12  +3.7035e-01  +3.8886e-01  1.85e-02  3.89e-05  2.63e-03  9.13e-06  1.62e-04  9.90e-01  
 13  +3.6529e-01  +3.6919e-01  3.91e-03  8.05e-06  5.43e-04  1.87e-06  3.48e-05  8.17e-01  
 14  +3.6402e-01  +3.6406e-01  4.87e-05  1.00e-07  6.76e-06  2.32e-08  4.39e-07  9.87e-01  
 15  +3.6400e-01  +3.6400e-01  4.87e-07  1.00e-09  6.76e-08  2.32e-10  4.39e-09  9.90e-01  
 16  +3.6400e-01  +3.6400e-01  4.87e-09  1.00e-11  6.76e-10  2.32e-12  4.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.9755ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:43 PM: Optimal value: 3.640e-01
(CVXPY) Sep 20 03:11:43 PM: Compilation took 4.001e-03 seconds
(CVXPY) Sep 20 03:11:43 PM: Solver (including time spent in interface) took 9.786e-03 seconds
Iteration: 6, Objective: 0.3640
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 575 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 575
  constraints   = 1075
  nnz(P)        = 0
  nnz(A)        = 7096
  cones (total) = 1
    : Nonnegative = 1,  numel = 1075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0186e+02  5.01e+02  9.56e-01  3.33e+01  1.00e+00  1.01e+00   ------   
  1  +5.7714e-01  +1.0634e+02  1.06e+02  3.99e-01  2.01e+01  3.86e-03  5.53e-01  6.07e-01  
  2  +5.2892e-01  +1.1673e+01  1.11e+01  1.16e-01  7.54e+00  1.47e-02  2.19e-01  9.73e-01  
  3  +5.0293e-01  +2.4395e+00  1.94e+00  3.99e-02  2.60e+00  3.53e-05  1.59e-01  7.66e-01  
  4  +4.9823e-01  +1.3293e+00  8.31e-01  1.33e-02  9.10e-01  4.26e-05  4.31e-02  7.82e-01  
  5  +4.8170e-01  +1.1023e+00  6.21e-01  3.30e-03  2.31e-01  1.22e-04  8.85e-03  8.13e-01  
  6  +4.7546e-01  +1.0730e+00  5.98e-01  2.49e-03  1.74e-01  1.44e-04  6.69e-03  3.08e-01  
  7  +4.6851e-01  +1.0611e+00  5.93e-01  1.94e-03  1.35e-01  1.84e-04  5.32e-03  5.12e-01  
  8  +4.5251e-01  +9.4221e-01  4.90e-01  1.33e-03  9.20e-02  1.71e-04  3.80e-03  4.03e-01  
  9  +4.1251e-01  +6.3291e-01  2.20e-01  5.79e-04  3.93e-02  6.57e-05  1.93e-03  9.32e-01  
 10  +3.8099e-01  +4.5836e-01  7.74e-02  1.88e-04  1.27e-02  1.91e-05  7.29e-04  6.78e-01  
 11  +3.7555e-01  +4.3285e-01  5.73e-02  1.35e-04  9.05e-03  1.63e-05  5.36e-04  3.91e-01  
 12  +3.6730e-01  +3.9394e-01  2.66e-02  5.97e-05  4.01e-03  9.38e-06  2.50e-04  7.02e-01  
 13  +3.6506e-01  +3.8374e-01  1.87e-02  4.25e-05  2.85e-03  6.56e-06  1.87e-04  5.76e-01  
 14  +3.6298e-01  +3.7459e-01  1.16e-02  2.59e-05  1.73e-03  4.46e-06  1.13e-04  5.41e-01  
 15  +3.6031e-01  +3.6393e-01  3.63e-03  7.78e-06  5.22e-04  1.44e-06  3.46e-05  7.62e-01  
 16  +3.5921e-01  +3.5926e-01  4.81e-05  1.03e-07  6.90e-06  1.90e-08  4.63e-07  9.87e-01  
 17  +3.5920e-01  +3.5920e-01  4.81e-07  1.03e-09  6.89e-08  1.90e-10  4.63e-09  9.90e-01  
 18  +3.5920e-01  +3.5920e-01  4.81e-09  1.03e-11  6.89e-10  1.90e-12  4.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8498ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:43 PM: Optimal value: 3.592e-01
(CVXPY) Sep 20 03:11:43 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:43 PM: Solver (including time spent in interface) took 1.574e-02 seconds
Iteration: 7, Objective: 0.3592
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 585 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Finished problem compilation (took 1.574e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 585
  constraints   = 1085
  nnz(P)        = 0
  nnz(A)        = 7286
  cones (total) = 1
    : Nonnegative = 1,  numel = 1085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0190e+02  5.01e+02  9.56e-01  3.32e+01  1.00e+00  1.01e+00   ------   
  1  +5.7610e-01  +1.0634e+02  1.06e+02  4.00e-01  2.00e+01  3.86e-03  5.53e-01  6.07e-01  
  2  +5.2796e-01  +1.1459e+01  1.09e+01  1.13e-01  7.32e+00  1.48e-02  2.14e-01  9.83e-01  
  3  +5.0253e-01  +2.3493e+00  1.85e+00  3.79e-02  2.47e+00  3.67e-05  1.46e-01  8.36e-01  
  4  +4.9606e-01  +1.3502e+00  8.54e-01  1.08e-02  7.44e-01  6.38e-05  3.12e-02  8.58e-01  
  5  +4.7691e-01  +1.0657e+00  5.89e-01  2.90e-03  2.03e-01  1.33e-04  7.79e-03  7.73e-01  
  6  +4.6660e-01  +1.0748e+00  6.08e-01  1.96e-03  1.36e-01  1.93e-04  5.33e-03  4.68e-01  
  7  +4.5071e-01  +9.5934e-01  5.09e-01  1.40e-03  9.66e-02  1.78e-04  3.98e-03  4.18e-01  
  8  +4.2023e-01  +7.2530e-01  3.05e-01  8.46e-04  5.75e-02  9.79e-05  2.71e-03  7.80e-01  
  9  +3.8841e-01  +5.3204e-01  1.44e-01  3.61e-04  2.43e-02  4.00e-05  1.31e-03  5.71e-01  
 10  +3.8418e-01  +5.1226e-01  1.28e-01  3.12e-04  2.11e-02  3.97e-05  1.15e-03  2.75e-01  
 11  +3.6566e-01  +4.1418e-01  4.85e-02  1.15e-04  7.75e-03  1.56e-05  4.77e-04  6.90e-01  
 12  +3.5610e-01  +3.6541e-01  9.32e-03  2.18e-05  1.46e-03  3.90e-06  9.75e-05  9.90e-01  
 13  +3.5364e-01  +3.5445e-01  8.08e-04  1.88e-06  1.26e-04  3.28e-07  8.70e-06  9.20e-01  
 14  +3.5341e-01  +3.5345e-01  3.70e-05  8.61e-08  5.77e-06  1.49e-08  4.00e-07  9.63e-01  
 15  +3.5340e-01  +3.5340e-01  3.71e-07  8.64e-10  5.79e-08  1.50e-10  4.02e-09  9.90e-01  
 16  +3.5340e-01  +3.5340e-01  3.72e-09  8.64e-12  5.79e-10  1.50e-12  4.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.0353ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:43 PM: Optimal value: 3.534e-01
(CVXPY) Sep 20 03:11:43 PM: Compilation took 1.574e-02 seconds
(CVXPY) Sep 20 03:11:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.3534
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 595 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Finished problem compilation (took 1.359e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 595
  constraints   = 1095
  nnz(P)        = 0
  nnz(A)        = 7464
  cones (total) = 1
    : Nonnegative = 1,  numel = 1095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0191e+02  5.01e+02  9.56e-01  3.31e+01  1.00e+00  1.01e+00   ------   
  1  +5.7534e-01  +1.0640e+02  1.06e+02  4.01e-01  1.99e+01  3.86e-03  5.53e-01  6.07e-01  
  2  +5.2725e-01  +1.1340e+01  1.08e+01  1.12e-01  7.16e+00  1.49e-02  2.12e-01  9.90e-01  
  3  +5.0251e-01  +2.3286e+00  1.83e+00  3.73e-02  2.43e+00  3.91e-05  1.37e-01  8.71e-01  
  4  +4.9437e-01  +1.3461e+00  8.52e-01  8.87e-03  6.16e-01  8.16e-05  2.45e-02  8.93e-01  
  5  +4.7416e-01  +1.0419e+00  5.68e-01  2.70e-03  1.88e-01  1.32e-04  7.27e-03  7.41e-01  
  6  +4.6496e-01  +1.0805e+00  6.16e-01  1.89e-03  1.31e-01  2.04e-04  5.13e-03  4.79e-01  
  7  +4.4258e-01  +9.1023e-01  4.68e-01  1.24e-03  8.52e-02  1.66e-04  3.56e-03  4.73e-01  
  8  +4.1225e-01  +6.9053e-01  2.78e-01  7.23e-04  4.91e-02  8.77e-05  2.33e-03  4.98e-01  
  9  +3.9117e-01  +5.6218e-01  1.71e-01  4.25e-04  2.87e-02  5.23e-05  1.49e-03  4.04e-01  
 10  +3.8624e-01  +5.3618e-01  1.50e-01  3.64e-04  2.46e-02  4.80e-05  1.30e-03  1.92e-01  
 11  +3.6705e-01  +4.2713e-01  6.01e-02  1.42e-04  9.51e-03  2.77e-05  5.65e-04  9.90e-01  
 12  +3.5327e-01  +3.5938e-01  6.12e-03  1.42e-05  9.50e-04  2.34e-06  6.27e-05  9.64e-01  
 13  +3.5169e-01  +3.5233e-01  6.42e-04  1.48e-06  9.90e-05  2.37e-07  6.77e-06  9.14e-01  
 14  +3.5150e-01  +3.5152e-01  1.33e-05  3.06e-08  2.05e-06  4.76e-09  1.41e-07  9.84e-01  
 15  +3.5150e-01  +3.5150e-01  1.33e-07  3.07e-10  2.05e-08  4.76e-11  1.41e-09  9.90e-01  
 16  +3.5150e-01  +3.5150e-01  1.33e-09  3.07e-12  2.05e-10  4.76e-13  1.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.8919ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:43 PM: Optimal value: 3.515e-01
(CVXPY) Sep 20 03:11:43 PM: Compilation took 1.359e-02 seconds
(CVXPY) Sep 20 03:11:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.3515
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:43 PM: Your problem has 598 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Finished problem compilation (took 1.574e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 598
  constraints   = 1098
  nnz(P)        = 0
  nnz(A)        = 7509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1098

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0186e+02  5.01e+02  9.56e-01  3.30e+01  1.00e+00  1.01e+00   ------   
  1  +5.7492e-01  +1.0643e+02  1.06e+02  4.01e-01  1.98e+01  3.87e-03  5.53e-01  6.07e-01  
  2  +5.2700e-01  +1.1375e+01  1.08e+01  1.12e-01  7.15e+00  1.50e-02  2.12e-01  9.90e-01  
  3  +5.0289e-01  +2.3549e+00  1.85e+00  3.77e-02  2.47e+00  4.18e-05  1.30e-01  8.70e-01  
  4  +4.9378e-01  +1.3525e+00  8.59e-01  7.93e-03  5.54e-01  9.77e-05  2.12e-02  9.14e-01  
  5  +4.7663e-01  +1.0993e+00  6.23e-01  3.09e-03  2.15e-01  1.35e-04  8.21e-03  6.53e-01  
  6  +4.6361e-01  +1.0924e+00  6.29e-01  2.00e-03  1.38e-01  1.98e-04  5.42e-03  5.43e-01  
  7  +4.2847e-01  +7.9993e-01  3.71e-01  1.00e-03  6.86e-02  1.24e-04  2.98e-03  7.49e-01  
  8  +4.0917e-01  +6.7911e-01  2.70e-01  7.01e-04  4.76e-02  8.72e-05  2.24e-03  2.94e-01  
  9  +3.8258e-01  +5.2010e-01  1.38e-01  3.42e-04  2.30e-02  4.48e-05  1.23e-03  5.67e-01  
 10  +3.7679e-01  +4.8633e-01  1.10e-01  2.75e-04  1.84e-02  3.72e-05  1.04e-03  3.69e-01  
 11  +3.7245e-01  +4.6129e-01  8.88e-02  2.12e-04  1.42e-02  4.07e-05  8.08e-04  8.24e-01  
 12  +3.5622e-01  +3.7857e-01  2.23e-02  5.26e-05  3.52e-03  9.53e-06  2.26e-04  7.43e-01  
 13  +3.5101e-01  +3.5286e-01  1.85e-03  4.33e-06  2.89e-04  7.36e-07  1.97e-05  9.20e-01  
 14  +3.5058e-01  +3.5084e-01  2.69e-04  6.27e-07  4.18e-05  1.05e-07  2.90e-06  9.01e-01  
 15  +3.5050e-01  +3.5050e-01  2.94e-06  6.86e-09  4.58e-07  1.13e-09  3.19e-08  9.89e-01  
 16  +3.5050e-01  +3.5050e-01  2.94e-08  6.86e-11  4.58e-09  1.13e-11  3.19e-10  9.90e-01  
 17  +3.5050e-01  +3.5050e-01  2.95e-10  6.87e-13  4.58e-11  1.13e-13  3.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.9559ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:44 PM: Optimal value: 3.505e-01
(CVXPY) Sep 20 03:11:44 PM: Compilation took 1.574e-02 seconds
(CVXPY) Sep 20 03:11:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.3505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:44 PM: Your problem has 608 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 608
  constraints   = 1108
  nnz(P)        = 0
  nnz(A)        = 7592
  cones (total) = 1
    : Nonnegative = 1,  numel = 1108

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0184e+02  5.01e+02  9.56e-01  3.29e+01  1.00e+00  1.01e+00   ------   
  1  +5.7423e-01  +1.0643e+02  1.06e+02  4.02e-01  1.97e+01  3.87e-03  5.53e-01  6.07e-01  
  2  +5.2657e-01  +1.1435e+01  1.09e+01  1.11e-01  7.09e+00  1.50e-02  2.11e-01  9.90e-01  
  3  +5.0327e-01  +2.2822e+00  1.78e+00  3.58e-02  2.37e+00  4.54e-05  1.14e-01  9.02e-01  
  4  +4.9328e-01  +1.5752e+00  1.08e+00  8.02e-03  5.61e-01  1.30e-04  2.06e-02  8.92e-01  
  5  +4.7412e-01  +1.2115e+00  7.37e-01  3.21e-03  2.24e-01  1.50e-04  8.43e-03  6.23e-01  
  6  +4.5659e-01  +1.1532e+00  6.97e-01  1.96e-03  1.36e-01  2.17e-04  5.27e-03  5.52e-01  
  7  +4.3005e-01  +8.6935e-01  4.39e-01  1.30e-03  8.83e-02  1.25e-04  3.85e-03  5.32e-01  
  8  +4.1186e-01  +7.3935e-01  3.27e-01  9.08e-04  6.13e-02  9.13e-05  2.86e-03  2.88e-01  
  9  +3.8985e-01  +5.9321e-01  2.03e-01  5.34e-04  3.58e-02  6.28e-05  1.84e-03  5.40e-01  
 10  +3.8075e-01  +5.3962e-01  1.59e-01  4.02e-04  2.70e-02  5.11e-05  1.44e-03  2.86e-01  
 11  +3.6554e-01  +4.4526e-01  7.97e-02  1.95e-04  1.30e-02  3.63e-05  7.59e-04  9.90e-01  
 12  +3.5510e-01  +3.9200e-01  3.69e-02  8.87e-05  5.91e-03  1.62e-05  3.72e-04  5.31e-01  
 13  +3.4831e-01  +3.5794e-01  9.63e-03  2.28e-05  1.52e-03  4.09e-06  1.02e-04  7.49e-01  
 14  +3.4604e-01  +3.4691e-01  8.65e-04  2.03e-06  1.35e-04  3.43e-07  9.46e-06  9.20e-01  
 15  +3.4581e-01  +3.4585e-01  3.58e-05  8.39e-08  5.57e-06  1.36e-08  3.95e-07  9.72e-01  
 16  +3.4580e-01  +3.4580e-01  3.58e-07  8.41e-10  5.58e-08  1.36e-10  3.97e-09  9.90e-01  
 17  +3.4580e-01  +3.4580e-01  3.59e-09  8.41e-12  5.58e-10  1.36e-12  3.97e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.9698ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:44 PM: Optimal value: 3.458e-01
(CVXPY) Sep 20 03:11:44 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:44 PM: Solver (including time spent in interface) took 1.572e-02 seconds
Iteration: 11, Objective: 0.3458
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:44 PM: Your problem has 618 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Finished problem compilation (took 1.233e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 618
  constraints   = 1118
  nnz(P)        = 0
  nnz(A)        = 7791
  cones (total) = 1
    : Nonnegative = 1,  numel = 1118

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0185e+02  5.01e+02  9.57e-01  3.28e+01  1.00e+00  1.01e+00   ------   
  1  +5.7331e-01  +1.0645e+02  1.06e+02  4.03e-01  1.96e+01  3.87e-03  5.52e-01  6.07e-01  
  2  +5.2569e-01  +1.1478e+01  1.10e+01  1.11e-01  7.01e+00  1.51e-02  2.10e-01  9.90e-01  
  3  +5.0345e-01  +2.0395e+00  1.54e+00  2.98e-02  2.01e+00  5.06e-05  8.81e-02  9.66e-01  
  4  +4.9775e-01  +2.3382e+00  1.84e+00  1.29e-02  9.02e-01  1.70e-04  3.17e-02  7.53e-01  
  5  +4.7996e-01  +1.6787e+00  1.20e+00  5.09e-03  3.56e-01  1.78e-04  1.30e-02  6.08e-01  
  6  +4.5759e-01  +1.3696e+00  9.12e-01  2.76e-03  1.91e-01  2.26e-04  7.35e-03  5.78e-01  
  7  +4.4126e-01  +1.2009e+00  7.60e-01  1.94e-03  1.33e-01  2.22e-04  5.34e-03  3.50e-01  
  8  +4.1335e-01  +8.0914e-01  3.96e-01  1.11e-03  7.50e-02  1.45e-04  3.46e-03  7.24e-01  
  9  +3.8656e-01  +5.9896e-01  2.12e-01  5.60e-04  3.74e-02  7.12e-05  1.93e-03  4.89e-01  
 10  +3.7404e-01  +5.2139e-01  1.47e-01  3.66e-04  2.44e-02  5.44e-05  1.33e-03  4.63e-01  
 11  +3.5936e-01  +4.2887e-01  6.95e-02  1.67e-04  1.11e-02  3.22e-05  6.62e-04  9.90e-01  
 12  +3.4519e-01  +3.5709e-01  1.19e-02  2.81e-05  1.86e-03  4.80e-06  1.24e-04  8.40e-01  
 13  +3.4290e-01  +3.4590e-01  3.00e-03  7.04e-06  4.66e-04  1.18e-06  3.24e-05  7.63e-01  
 14  +3.4227e-01  +3.4284e-01  5.76e-04  1.35e-06  8.91e-05  2.19e-07  6.33e-06  8.99e-01  
 15  +3.4210e-01  +3.4211e-01  1.06e-05  2.48e-08  1.64e-06  3.96e-09  1.18e-07  9.82e-01  
 16  +3.4210e-01  +3.4210e-01  1.06e-07  2.49e-10  1.64e-08  3.96e-11  1.18e-09  9.90e-01  
 17  +3.4210e-01  +3.4210e-01  1.06e-09  2.49e-12  1.64e-10  3.97e-13  1.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2654ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:44 PM: Optimal value: 3.421e-01
(CVXPY) Sep 20 03:11:44 PM: Compilation took 1.233e-02 seconds
(CVXPY) Sep 20 03:11:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 12, Objective: 0.3421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:44 PM: Your problem has 627 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Finished problem compilation (took 6.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 627
  constraints   = 1127
  nnz(P)        = 0
  nnz(A)        = 7896
  cones (total) = 1
    : Nonnegative = 1,  numel = 1127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0184e+02  5.01e+02  9.57e-01  3.27e+01  1.00e+00  1.01e+00   ------   
  1  +5.7188e-01  +1.0655e+02  1.06e+02  4.05e-01  1.95e+01  3.87e-03  5.53e-01  6.06e-01  
  2  +5.2510e-01  +1.1589e+01  1.11e+01  1.11e-01  6.97e+00  1.53e-02  2.10e-01  9.90e-01  
  3  +5.0393e-01  +1.9840e+00  1.48e+00  2.74e-02  1.86e+00  2.34e-04  7.65e-02  9.57e-01  
  4  +5.0042e-01  +2.2811e+00  1.78e+00  1.37e-02  9.62e-01  5.56e-04  3.32e-02  6.66e-01  
  5  +4.8511e-01  +1.8094e+00  1.32e+00  5.62e-03  3.95e-01  6.86e-04  1.39e-02  6.16e-01  
  6  +4.6365e-01  +1.4109e+00  9.47e-01  3.18e-03  2.21e-01  5.32e-04  8.27e-03  5.00e-01  
  7  +4.4763e-01  +1.2606e+00  8.13e-01  2.20e-03  1.51e-01  5.05e-04  5.92e-03  3.51e-01  
  8  +4.2667e-01  +9.4474e-01  5.18e-01  1.57e-03  1.06e-01  2.00e-04  4.64e-03  5.57e-01  
  9  +3.9785e-01  +6.9963e-01  3.02e-01  8.33e-04  5.57e-02  1.07e-04  2.72e-03  4.68e-01  
 10  +3.7164e-01  +5.1459e-01  1.43e-01  3.71e-04  2.46e-02  4.92e-05  1.36e-03  5.88e-01  
 11  +3.6706e-01  +4.9042e-01  1.23e-01  3.10e-04  2.06e-02  4.43e-05  1.16e-03  2.54e-01  
 12  +3.5207e-01  +4.0297e-01  5.09e-02  1.25e-04  8.25e-03  1.92e-05  5.19e-04  7.25e-01  
 13  +3.4212e-01  +3.4971e-01  7.59e-03  1.84e-05  1.21e-03  2.63e-06  8.44e-05  8.63e-01  
 14  +3.4096e-01  +3.4376e-01  2.80e-03  6.75e-06  4.45e-04  9.88e-07  3.19e-05  7.43e-01  
 15  +3.4024e-01  +3.4040e-01  1.59e-04  3.83e-07  2.52e-05  5.30e-08  1.85e-06  9.48e-01  
 16  +3.4020e-01  +3.4020e-01  1.79e-06  4.29e-09  2.83e-07  5.91e-10  2.09e-08  9.89e-01  
 17  +3.4020e-01  +3.4020e-01  1.79e-08  4.29e-11  2.83e-09  5.92e-12  2.09e-10  9.90e-01  
 18  +3.4020e-01  +3.4020e-01  1.79e-10  4.29e-13  2.83e-11  5.93e-14  2.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9804ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:44 PM: Optimal value: 3.402e-01
(CVXPY) Sep 20 03:11:44 PM: Compilation took 6.006e-03 seconds
(CVXPY) Sep 20 03:11:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 13, Objective: 0.3402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:44 PM: Your problem has 637 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 637
  constraints   = 1137
  nnz(P)        = 0
  nnz(A)        = 8025
  cones (total) = 1
    : Nonnegative = 1,  numel = 1137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +5.0184e+02  5.01e+02  9.57e-01  3.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.7138e-01  +1.0658e+02  1.06e+02  4.05e-01  1.94e+01  3.87e-03  5.53e-01  6.06e-01  
  2  +5.2473e-01  +1.1609e+01  1.11e+01  1.11e-01  6.88e+00  1.53e-02  2.10e-01  9.90e-01  
  3  +5.0413e-01  +2.0095e+00  1.51e+00  2.67e-02  1.81e+00  4.85e-04  7.26e-02  9.36e-01  
  4  +5.0071e-01  +2.1442e+00  1.64e+00  1.32e-02  9.20e-01  1.01e-03  3.20e-02  6.13e-01  
  5  +4.8642e-01  +1.7853e+00  1.30e+00  5.63e-03  3.95e-01  1.28e-03  1.39e-02  6.25e-01  
  6  +4.6606e-01  +1.4044e+00  9.38e-01  3.37e-03  2.32e-01  8.87e-04  8.78e-03  4.75e-01  
  7  +4.4944e-01  +1.2608e+00  8.11e-01  2.26e-03  1.55e-01  8.47e-04  6.08e-03  3.77e-01  
  8  +4.3013e-01  +9.7424e-01  5.44e-01  1.69e-03  1.14e-01  2.66e-04  4.94e-03  5.07e-01  
  9  +4.0255e-01  +7.4155e-01  3.39e-01  9.51e-04  6.35e-02  1.49e-04  3.06e-03  4.81e-01  
 10  +3.7370e-01  +5.3416e-01  1.60e-01  4.23e-04  2.79e-02  6.28e-05  1.54e-03  5.67e-01  
 11  +3.6934e-01  +5.1191e-01  1.43e-01  3.60e-04  2.39e-02  5.82e-05  1.33e-03  2.56e-01  
 12  +3.5440e-01  +4.2407e-01  6.97e-02  1.71e-04  1.13e-02  2.96e-05  6.95e-04  7.76e-01  
 13  +3.4239e-01  +3.6074e-01  1.84e-02  4.39e-05  2.89e-03  7.58e-06  1.96e-04  8.06e-01  
 14  +3.3798e-01  +3.3985e-01  1.87e-03  4.40e-06  2.89e-04  6.71e-07  2.07e-05  9.90e-01  
 15  +3.3741e-01  +3.3744e-01  3.28e-05  7.70e-08  5.06e-06  1.01e-08  3.69e-07  9.83e-01  
 16  +3.3740e-01  +3.3740e-01  3.28e-07  7.70e-10  5.06e-08  1.01e-10  3.70e-09  9.90e-01  
 17  +3.3740e-01  +3.3740e-01  3.28e-09  7.71e-12  5.07e-10  1.01e-12  3.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8699ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:44 PM: Optimal value: 3.374e-01
(CVXPY) Sep 20 03:11:44 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 14, Objective: 0.3374
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:44 PM: Your problem has 642 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 642
  constraints   = 1142
  nnz(P)        = 0
  nnz(A)        = 8136
  cones (total) = 1
    : Nonnegative = 1,  numel = 1142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9914e-01  +5.0184e+02  5.01e+02  9.57e-01  3.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.7112e-01  +1.0662e+02  1.06e+02  4.06e-01  1.93e+01  3.87e-03  5.54e-01  6.06e-01  
  2  +5.2439e-01  +1.1631e+01  1.11e+01  1.11e-01  6.87e+00  1.54e-02  2.11e-01  9.90e-01  
  3  +5.0407e-01  +1.8937e+00  1.39e+00  2.42e-02  1.65e+00  4.20e-04  6.56e-02  9.53e-01  
  4  +5.0106e-01  +1.9881e+00  1.49e+00  1.20e-02  8.44e-01  8.62e-04  2.94e-02  5.92e-01  
  5  +4.8793e-01  +1.7247e+00  1.24e+00  5.49e-03  3.85e-01  1.11e-03  1.35e-02  6.24e-01  
  6  +4.6690e-01  +1.3624e+00  8.96e-01  3.24e-03  2.24e-01  7.58e-04  8.45e-03  4.96e-01  
  7  +4.5395e-01  +1.2754e+00  8.21e-01  2.37e-03  1.63e-01  7.29e-04  6.33e-03  3.67e-01  
  8  +4.2843e-01  +9.5651e-01  5.28e-01  1.59e-03  1.07e-01  2.10e-04  4.64e-03  6.31e-01  
  9  +3.9837e-01  +7.0406e-01  3.06e-01  8.43e-04  5.62e-02  1.09e-04  2.74e-03  4.66e-01  
 10  +3.6760e-01  +4.9563e-01  1.28e-01  3.30e-04  2.18e-02  4.37e-05  1.23e-03  6.51e-01  
 11  +3.5994e-01  +4.5407e-01  9.41e-02  2.40e-04  1.58e-02  3.22e-05  9.41e-04  3.96e-01  
 12  +3.4722e-01  +3.8768e-01  4.05e-02  9.86e-05  6.49e-03  1.45e-05  4.20e-04  6.75e-01  
 13  +3.3828e-01  +3.4149e-01  3.21e-03  7.70e-06  5.06e-04  1.06e-06  3.60e-05  9.42e-01  
 14  +3.3742e-01  +3.3751e-01  8.29e-05  1.98e-07  1.30e-05  2.43e-08  9.50e-07  9.77e-01  
 15  +3.3740e-01  +3.3740e-01  8.35e-07  2.00e-09  1.31e-07  2.44e-10  9.61e-09  9.90e-01  
 16  +3.3740e-01  +3.3740e-01  8.36e-09  2.00e-11  1.31e-09  2.44e-12  9.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9243ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:44 PM: Optimal value: 3.374e-01
(CVXPY) Sep 20 03:11:44 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:44 PM: Solver (including time spent in interface) took 2.228e-02 seconds
Iteration: 15, Objective: 0.3374
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:44 PM: Your problem has 643 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:44 PM: Finished problem compilation (took 1.568e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 643
  constraints   = 1143
  nnz(P)        = 0
  nnz(A)        = 8141
  cones (total) = 1
    : Nonnegative = 1,  numel = 1143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9914e-01  +5.0184e+02  5.01e+02  9.57e-01  3.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.7086e-01  +1.0667e+02  1.06e+02  4.06e-01  1.93e+01  3.87e-03  5.54e-01  6.06e-01  
  2  +5.2426e-01  +1.1650e+01  1.11e+01  1.11e-01  6.87e+00  1.54e-02  2.11e-01  9.90e-01  
  3  +5.0413e-01  +1.8851e+00  1.38e+00  2.38e-02  1.63e+00  4.47e-04  6.42e-02  9.49e-01  
  4  +5.0140e-01  +1.9717e+00  1.47e+00  1.22e-02  8.51e-01  8.90e-04  2.96e-02  5.76e-01  
  5  +4.8904e-01  +1.7485e+00  1.26e+00  5.66e-03  3.97e-01  1.17e-03  1.39e-02  6.26e-01  
  6  +4.6835e-01  +1.3727e+00  9.04e-01  3.37e-03  2.32e-01  7.56e-04  8.78e-03  4.99e-01  
  7  +4.5547e-01  +1.2845e+00  8.29e-01  2.46e-03  1.69e-01  7.22e-04  6.57e-03  3.76e-01  
  8  +4.2696e-01  +9.5508e-01  5.28e-01  1.52e-03  1.03e-01  1.93e-04  4.47e-03  7.43e-01  
  9  +3.9551e-01  +6.8529e-01  2.90e-01  7.91e-04  5.27e-02  9.28e-05  2.60e-03  4.74e-01  
 10  +3.6964e-01  +5.1289e-01  1.43e-01  3.69e-04  2.44e-02  4.78e-05  1.36e-03  5.85e-01  
 11  +3.5734e-01  +4.4417e-01  8.68e-02  2.17e-04  1.43e-02  3.06e-05  8.55e-04  5.63e-01  
 12  +3.4247e-01  +3.6255e-01  2.01e-02  4.87e-05  3.20e-03  6.95e-06  2.16e-04  8.22e-01  
 13  +3.3805e-01  +3.4044e-01  2.39e-03  5.72e-06  3.76e-04  8.27e-07  2.69e-05  9.16e-01  
 14  +3.3741e-01  +3.3746e-01  4.39e-05  1.05e-07  6.89e-06  1.30e-08  5.04e-07  9.83e-01  
 15  +3.3740e-01  +3.3740e-01  4.39e-07  1.05e-09  6.90e-08  1.30e-10  5.06e-09  9.90e-01  
 16  +3.3740e-01  +3.3740e-01  4.40e-09  1.05e-11  6.90e-10  1.30e-12  5.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.5968ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:44 PM: Optimal value: 3.374e-01
(CVXPY) Sep 20 03:11:44 PM: Compilation took 1.568e-02 seconds
(CVXPY) Sep 20 03:11:44 PM: Solver (including time spent in interface) took 1.112e-02 seconds
FULL MODEL:
  Accruacy: 0.609
  Our objective: 0.21799999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.03)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 1)                                  <-- (term's our objective: 0.074)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.032)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.022)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.171773195266724
Best over terms:
  Our final objective: 0.07399999999999998
    Its accruacy: 0.537
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.07399999999999998
  Highest accruacy: 0.537
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

