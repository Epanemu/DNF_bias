Command:
python test_script.py -s linear_dependence -d 8 -n 50000 --seed 21 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14611999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.15596
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:17 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:17 PM: Finished problem compilation (took 1.050e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3498e-01  +6.3197e+02  6.31e+02  1.70e-01  8.23e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6456e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0121e-01  +1.5771e+01  1.53e+01  4.26e-02  2.05e+01  4.78e-06  1.95e-01  4.48e-01  
  5  +5.0000e-01  +1.1558e+00  6.56e-01  1.96e-03  9.76e-01  2.68e-05  1.88e-01  2.91e-01  
  6  +4.9999e-01  +6.2940e-01  1.29e-01  3.86e-04  1.93e-01  7.88e-06  3.36e-02  8.37e-01  
  7  +4.9982e-01  +7.3421e-01  2.34e-01  6.05e-04  3.02e-01  1.01e-04  4.12e-03  9.22e-01  
  8  +4.9229e-01  +7.0118e-01  2.09e-01  2.98e-05  1.50e-02  3.78e-03  9.25e-05  9.78e-01  
  9  +4.7820e-01  +6.2168e-01  1.43e-01  7.93e-06  3.97e-03  7.11e-03  2.47e-05  7.52e-01  
 10  +4.7098e-01  +5.4110e-01  7.01e-02  3.76e-06  1.88e-03  2.13e-03  1.22e-05  6.06e-01  
 11  +4.6108e-01  +4.6984e-01  8.76e-03  4.47e-07  2.23e-04  2.20e-05  1.52e-06  9.47e-01  
 12  +4.5909e-01  +4.6057e-01  1.48e-03  7.14e-08  3.57e-05  3.27e-06  2.56e-07  8.50e-01  
 13  +4.5857e-01  +4.5865e-01  8.15e-05  3.39e-09  1.70e-06  4.68e-08  1.42e-08  9.85e-01  
 14  +4.5854e-01  +4.5854e-01  8.20e-07  3.41e-11  1.70e-08  4.72e-10  1.43e-10  9.90e-01  
 15  +4.5854e-01  +4.5854e-01  8.20e-09  3.40e-13  1.70e-10  4.72e-12  1.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 346.5572ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:17 PM: Optimal value: 4.585e-01
(CVXPY) Sep 20 03:16:17 PM: Compilation took 1.050e-01 seconds
(CVXPY) Sep 20 03:16:17 PM: Solver (including time spent in interface) took 3.781e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:18 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:18 PM: Finished problem compilation (took 1.183e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 318191
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3166e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6438e+02  1.64e+02  1.47e-01  7.42e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5632e+01  1.51e+01  4.23e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0003e-01  +1.6267e+00  1.13e+00  3.38e-03  1.74e+00  2.94e-05  1.89e-01  2.21e-01  
  6  +5.0001e-01  +8.6311e-01  3.63e-01  1.08e-03  5.61e-01  9.68e-06  7.51e-02  6.53e-01  
  7  +5.0001e-01  +8.4787e-01  3.48e-01  1.04e-03  5.36e-01  1.04e-05  4.16e-02  6.82e-01  
  8  +4.9998e-01  +7.7221e-01  2.72e-01  7.80e-04  4.04e-01  2.07e-05  8.31e-03  9.90e-01  
  9  +4.9808e-01  +7.2948e-01  2.31e-01  4.96e-05  2.59e-02  9.59e-04  1.37e-04  9.85e-01  
 10  +4.9103e-01  +6.9729e-01  2.06e-01  1.10e-05  5.75e-03  3.63e-03  3.00e-05  7.87e-01  
 11  +4.9117e-01  +6.9336e-01  2.02e-01  9.35e-06  4.89e-03  3.21e-03  2.52e-05  3.45e-01  
 12  +4.8963e-01  +6.7990e-01  1.90e-01  8.13e-06  4.25e-03  2.65e-03  2.20e-05  2.71e-01  
 13  +4.8895e-01  +6.7361e-01  1.85e-01  7.95e-06  4.15e-03  2.33e-03  2.15e-05  8.54e-02  
 14  +4.8398e-01  +6.4422e-01  1.60e-01  6.61e-06  3.45e-03  1.51e-03  1.82e-05  3.37e-01  
 15  +4.6162e-01  +5.4812e-01  8.65e-02  2.95e-06  1.53e-03  4.40e-04  8.50e-06  7.10e-01  
 16  +4.3403e-01  +4.4923e-01  1.52e-02  4.91e-07  2.55e-04  4.33e-06  1.53e-06  8.81e-01  
 17  +4.2716e-01  +4.2740e-01  2.39e-04  7.52e-09  3.90e-06  4.36e-08  2.38e-08  9.85e-01  
 18  +4.2704e-01  +4.2704e-01  2.39e-06  7.51e-11  3.90e-08  4.36e-10  2.38e-10  9.90e-01  
 19  +4.2704e-01  +4.2704e-01  2.39e-08  7.52e-13  3.90e-10  4.56e-12  2.49e-12  9.90e-01  
 20  +4.2704e-01  +4.2704e-01  2.39e-10  7.51e-15  3.91e-12  4.78e-14  2.60e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 440.346ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:18 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:18 PM: Optimal value: 4.270e-01
(CVXPY) Sep 20 03:16:18 PM: Compilation took 1.183e-01 seconds
(CVXPY) Sep 20 03:16:18 PM: Solver (including time spent in interface) took 4.706e-01 seconds
Iteration: 2, Objective: 0.4270
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:18 PM: Your problem has 25034 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:18 PM: Finished problem compilation (took 1.078e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25034
  constraints   = 50034
  nnz(P)        = 0
  nnz(A)        = 319902
  cones (total) = 1
    : Nonnegative = 1,  numel = 50034

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3155e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6436e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5634e+01  1.51e+01  4.23e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0003e-01  +1.6417e+00  1.14e+00  3.42e-03  1.76e+00  2.94e-05  1.89e-01  2.19e-01  
  6  +5.0001e-01  +9.0503e-01  4.05e-01  1.21e-03  6.25e-01  1.07e-05  8.21e-02  6.12e-01  
  7  +5.0001e-01  +8.6698e-01  3.67e-01  1.09e-03  5.66e-01  1.06e-05  4.97e-02  5.86e-01  
  8  +5.0000e-01  +8.6650e-01  3.67e-01  1.08e-03  5.57e-01  1.30e-05  1.72e-02  9.90e-01  
  9  +4.9971e-01  +7.4351e-01  2.44e-01  2.46e-04  1.28e-01  1.55e-04  7.64e-04  9.59e-01  
 10  +4.9415e-01  +7.2145e-01  2.27e-01  1.42e-05  7.44e-03  2.77e-03  3.87e-05  9.49e-01  
 11  +4.9239e-01  +7.1214e-01  2.20e-01  1.14e-05  5.98e-03  3.00e-03  3.10e-05  2.42e-01  
 12  +4.9354e-01  +6.8303e-01  1.89e-01  1.04e-05  5.41e-03  7.95e-04  2.80e-05  6.04e-01  
 13  +4.9338e-01  +6.7924e-01  1.86e-01  1.01e-05  5.27e-03  6.86e-04  2.72e-05  1.41e-01  
 14  +4.9177e-01  +6.7071e-01  1.79e-01  8.99e-06  4.70e-03  6.38e-04  2.44e-05  1.83e-01  
 15  +4.9171e-01  +6.7028e-01  1.79e-01  8.98e-06  4.69e-03  6.29e-04  2.43e-05  9.99e-03  
 16  +4.8882e-01  +6.4916e-01  1.60e-01  8.35e-06  4.36e-03  1.32e-04  2.30e-05  6.23e-01  
 17  +4.6944e-01  +5.7071e-01  1.01e-01  3.59e-06  1.87e-03  8.25e-05  1.02e-05  7.07e-01  
 18  +4.5478e-01  +5.2095e-01  6.62e-02  2.31e-06  1.20e-03  3.01e-05  6.84e-06  5.21e-01  
 19  +4.4829e-01  +4.9976e-01  5.15e-02  1.72e-06  8.94e-04  6.95e-06  5.17e-06  7.52e-01  
 20  +4.4371e-01  +4.8402e-01  4.03e-02  1.30e-06  6.72e-04  7.16e-07  3.92e-06  9.90e-01  
 21  +4.3924e-01  +4.6920e-01  3.00e-02  9.54e-07  4.95e-04  5.27e-07  2.92e-06  4.23e-01  
 22  +4.3880e-01  +4.6769e-01  2.89e-02  9.21e-07  4.78e-04  5.04e-07  2.82e-06  1.82e-01  
 23  +4.2932e-01  +4.3648e-01  7.15e-03  2.27e-07  1.18e-04  1.22e-07  7.16e-07  7.93e-01  
 24  +4.2656e-01  +4.2750e-01  9.35e-04  2.96e-08  1.54e-05  1.49e-08  9.43e-08  9.90e-01  
 25  +4.2613e-01  +4.2614e-01  1.39e-05  4.40e-10  2.28e-07  2.21e-10  1.40e-09  9.86e-01  
 26  +4.2612e-01  +4.2612e-01  1.39e-07  4.40e-12  2.28e-09  2.21e-12  1.40e-11  9.90e-01  
 27  +4.2612e-01  +4.2612e-01  1.39e-09  4.41e-14  2.28e-11  2.23e-14  1.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 572.4126ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:19 PM: Optimal value: 4.261e-01
(CVXPY) Sep 20 03:16:19 PM: Compilation took 1.078e-01 seconds
(CVXPY) Sep 20 03:16:19 PM: Solver (including time spent in interface) took 5.943e-01 seconds
Iteration: 3, Objective: 0.4261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:19 PM: Your problem has 25037 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:19 PM: Finished problem compilation (took 1.211e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25037
  constraints   = 50037
  nnz(P)        = 0
  nnz(A)        = 320322
  cones (total) = 1
    : Nonnegative = 1,  numel = 50037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3465e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3154e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6435e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5634e+01  1.51e+01  4.23e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0003e-01  +1.6443e+00  1.14e+00  3.43e-03  1.77e+00  2.94e-05  1.89e-01  2.18e-01  
  6  +5.0001e-01  +9.3778e-01  4.38e-01  1.31e-03  6.76e-01  1.15e-05  8.78e-02  5.80e-01  
  7  +5.0001e-01  +8.6892e-01  3.69e-01  1.10e-03  5.69e-01  1.07e-05  4.71e-02  7.00e-01  
  8  +5.0001e-01  +8.7537e-01  3.75e-01  1.10e-03  5.70e-01  1.22e-05  1.71e-02  9.90e-01  
  9  +4.9974e-01  +7.5579e-01  2.56e-01  2.62e-04  1.37e-01  1.39e-04  8.17e-04  9.55e-01  
 10  +4.9464e-01  +7.3508e-01  2.40e-01  1.50e-05  7.86e-03  2.54e-03  4.08e-05  9.50e-01  
 11  +4.9296e-01  +7.2364e-01  2.31e-01  1.21e-05  6.35e-03  2.69e-03  3.29e-05  2.43e-01  
 12  +4.9369e-01  +6.9402e-01  2.00e-01  1.06e-05  5.54e-03  1.02e-03  2.86e-05  5.53e-01  
 13  +4.9320e-01  +6.8928e-01  1.96e-01  1.02e-05  5.32e-03  9.28e-04  2.75e-05  1.13e-01  
 14  +4.9142e-01  +6.7774e-01  1.86e-01  8.96e-06  4.68e-03  7.94e-04  2.43e-05  2.40e-01  
 15  +4.9028e-01  +6.6837e-01  1.78e-01  8.73e-06  4.56e-03  5.74e-04  2.37e-05  2.03e-01  
 16  +4.7754e-01  +6.1367e-01  1.36e-01  5.05e-06  2.63e-03  4.60e-04  1.41e-05  5.02e-01  
 17  +4.6365e-01  +5.5581e-01  9.22e-02  3.54e-06  1.84e-03  4.26e-06  1.03e-05  7.45e-01  
 18  +4.5631e-01  +5.2949e-01  7.32e-02  2.67e-06  1.39e-03  2.65e-06  7.91e-06  4.14e-01  
 19  +4.4913e-01  +5.0338e-01  5.43e-02  1.83e-06  9.48e-04  6.43e-07  5.48e-06  9.90e-01  
 20  +4.4192e-01  +4.7904e-01  3.71e-02  1.22e-06  6.36e-04  4.43e-07  3.75e-06  3.74e-01  
 21  +4.4143e-01  +4.7713e-01  3.57e-02  1.17e-06  6.05e-04  4.69e-07  3.56e-06  3.19e-01  
 22  +4.3446e-01  +4.5397e-01  1.95e-02  6.28e-07  3.26e-04  2.56e-07  1.96e-06  4.81e-01  
 23  +4.2693e-01  +4.2900e-01  2.07e-03  6.57e-08  3.41e-05  3.18e-08  2.10e-07  9.90e-01  
 24  +4.2599e-01  +4.2602e-01  2.76e-05  8.78e-10  4.55e-07  4.21e-10  2.81e-09  9.87e-01  
 25  +4.2598e-01  +4.2598e-01  2.76e-07  8.77e-12  4.55e-09  4.21e-12  2.81e-11  9.90e-01  
 26  +4.2598e-01  +4.2598e-01  2.77e-09  8.83e-14  4.58e-11  4.21e-14  2.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 557.9143ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:20 PM: Optimal value: 4.260e-01
(CVXPY) Sep 20 03:16:20 PM: Compilation took 1.211e-01 seconds
(CVXPY) Sep 20 03:16:20 PM: Solver (including time spent in interface) took 5.784e-01 seconds
Iteration: 4, Objective: 0.4260
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:20 PM: Your problem has 25039 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:20 PM: Finished problem compilation (took 1.146e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25039
  constraints   = 50039
  nnz(P)        = 0
  nnz(A)        = 320641
  cones (total) = 1
    : Nonnegative = 1,  numel = 50039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3150e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0120e-01  +1.5634e+01  1.51e+01  4.23e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0003e-01  +1.6384e+00  1.14e+00  3.41e-03  1.76e+00  2.95e-05  1.89e-01  2.20e-01  
  6  +5.0001e-01  +9.0671e-01  4.07e-01  1.21e-03  6.28e-01  1.08e-05  8.22e-02  6.12e-01  
  7  +5.0001e-01  +8.6224e-01  3.62e-01  1.08e-03  5.59e-01  1.08e-05  5.08e-02  5.34e-01  
  8  +5.0000e-01  +8.7536e-01  3.75e-01  1.10e-03  5.71e-01  1.42e-05  1.75e-02  9.90e-01  
  9  +4.9971e-01  +7.6240e-01  2.63e-01  2.85e-04  1.49e-01  1.53e-04  9.05e-04  9.51e-01  
 10  +4.9384e-01  +7.3826e-01  2.44e-01  1.57e-05  8.21e-03  2.93e-03  4.28e-05  9.53e-01  
 11  +4.9213e-01  +7.2522e-01  2.33e-01  1.26e-05  6.61e-03  3.02e-03  3.44e-05  2.58e-01  
 12  +4.9190e-01  +7.0846e-01  2.17e-01  1.12e-05  5.83e-03  2.24e-03  3.02e-05  3.12e-01  
 13  +4.9149e-01  +6.7759e-01  1.86e-01  9.68e-06  5.06e-03  7.07e-04  2.63e-05  5.85e-01  
 14  +4.9076e-01  +6.7182e-01  1.81e-01  9.40e-06  4.91e-03  5.56e-04  2.56e-05  1.85e-01  
 15  +4.8715e-01  +6.5610e-01  1.69e-01  7.84e-06  4.09e-03  5.34e-04  2.15e-05  1.98e-01  
 16  +4.7480e-01  +6.0336e-01  1.29e-01  4.90e-06  2.55e-03  3.00e-04  1.38e-05  5.58e-01  
 17  +4.5833e-01  +5.3960e-01  8.13e-02  2.93e-06  1.52e-03  1.21e-04  8.61e-06  5.05e-01  
 18  +4.5539e-01  +5.2858e-01  7.32e-02  2.59e-06  1.34e-03  8.66e-05  7.66e-06  2.74e-01  
 19  +4.5008e-01  +5.0779e-01  5.77e-02  1.94e-06  1.01e-03  8.98e-07  5.82e-06  9.42e-01  
 20  +4.4175e-01  +4.7923e-01  3.75e-02  1.23e-06  6.41e-04  5.71e-07  3.78e-06  4.85e-01  
 21  +4.4114e-01  +4.7684e-01  3.57e-02  1.16e-06  6.04e-04  5.56e-07  3.56e-06  3.66e-01  
 22  +4.3381e-01  +4.5236e-01  1.86e-02  5.97e-07  3.10e-04  2.87e-07  1.87e-06  5.11e-01  
 23  +4.2691e-01  +4.2941e-01  2.50e-03  7.98e-08  4.14e-05  3.89e-08  2.55e-07  9.52e-01  
 24  +4.2580e-01  +4.2584e-01  3.79e-05  1.21e-09  6.28e-07  5.85e-10  3.89e-09  9.85e-01  
 25  +4.2578e-01  +4.2578e-01  3.79e-07  1.21e-11  6.28e-09  5.85e-12  3.89e-11  9.90e-01  
 26  +4.2578e-01  +4.2578e-01  3.80e-09  1.21e-13  6.29e-11  5.85e-14  3.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 602.1764ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:21 PM: Optimal value: 4.258e-01
(CVXPY) Sep 20 03:16:21 PM: Compilation took 1.146e-01 seconds
(CVXPY) Sep 20 03:16:21 PM: Solver (including time spent in interface) took 6.322e-01 seconds
Iteration: 5, Objective: 0.4258
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:21 PM: Your problem has 25040 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:21 PM: Finished problem compilation (took 1.108e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25040
  constraints   = 50040
  nnz(P)        = 0
  nnz(A)        = 320859
  cones (total) = 1
    : Nonnegative = 1,  numel = 50040

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3465e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3149e+02  6.31e+02  1.70e-01  8.53e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6433e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0120e-01  +1.5634e+01  1.51e+01  4.23e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0003e-01  +1.6274e+00  1.13e+00  3.38e-03  1.74e+00  2.95e-05  1.88e-01  2.23e-01  
  6  +5.0001e-01  +9.0577e-01  4.06e-01  1.21e-03  6.27e-01  1.09e-05  8.21e-02  6.13e-01  
  7  +5.0001e-01  +8.5386e-01  3.54e-01  1.06e-03  5.46e-01  1.10e-05  4.67e-02  6.04e-01  
  8  +5.0000e-01  +8.7466e-01  3.75e-01  1.10e-03  5.68e-01  1.50e-05  1.60e-02  9.90e-01  
  9  +4.9963e-01  +7.6529e-01  2.66e-01  2.33e-04  1.22e-01  1.93e-04  7.12e-04  9.58e-01  
 10  +4.9324e-01  +7.3916e-01  2.46e-01  1.43e-05  7.46e-03  3.18e-03  3.89e-05  9.45e-01  
 11  +4.9184e-01  +7.2702e-01  2.35e-01  1.19e-05  6.20e-03  3.14e-03  3.22e-05  2.46e-01  
 12  +4.9315e-01  +6.8821e-01  1.95e-01  1.05e-05  5.50e-03  5.80e-04  2.85e-05  6.46e-01  
 13  +4.9182e-01  +6.7900e-01  1.87e-01  9.58e-06  5.01e-03  4.94e-04  2.60e-05  2.11e-01  
 14  +4.9170e-01  +6.7800e-01  1.86e-01  9.55e-06  4.99e-03  4.77e-04  2.60e-05  2.70e-02  
 15  +4.8906e-01  +6.6163e-01  1.73e-01  8.62e-06  4.50e-03  2.82e-04  2.36e-05  3.74e-01  
 16  +4.7713e-01  +6.1070e-01  1.34e-01  5.31e-06  2.77e-03  2.13e-04  1.49e-05  4.70e-01  
 17  +4.5858e-01  +5.4028e-01  8.17e-02  2.94e-06  1.53e-03  1.01e-04  8.65e-06  4.86e-01  
 18  +4.5813e-01  +5.3856e-01  8.04e-02  2.88e-06  1.50e-03  9.18e-05  8.49e-06  8.56e-02  
 19  +4.5561e-01  +5.2948e-01  7.39e-02  2.62e-06  1.36e-03  7.47e-05  7.75e-06  1.78e-01  
 20  +4.4764e-01  +5.0019e-01  5.26e-02  1.77e-06  9.19e-04  7.72e-07  5.35e-06  9.40e-01  
 21  +4.4028e-01  +4.7500e-01  3.47e-02  1.15e-06  5.96e-04  5.03e-07  3.54e-06  3.85e-01  
 22  +4.3968e-01  +4.7247e-01  3.28e-02  1.07e-06  5.56e-04  4.95e-07  3.30e-06  4.25e-01  
 23  +4.3177e-01  +4.4597e-01  1.42e-02  4.59e-07  2.38e-04  2.13e-07  1.45e-06  6.00e-01  
 24  +4.2619e-01  +4.2743e-01  1.24e-03  3.97e-08  2.06e-05  1.91e-08  1.28e-07  9.90e-01  
 25  +4.2563e-01  +4.2564e-01  1.38e-05  4.44e-10  2.30e-07  2.13e-10  1.43e-09  9.89e-01  
 26  +4.2562e-01  +4.2562e-01  1.38e-07  4.44e-12  2.30e-09  2.13e-12  1.43e-11  9.90e-01  
 27  +4.2562e-01  +4.2562e-01  1.39e-09  4.48e-14  2.32e-11  2.13e-14  1.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 595.6224ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:22 PM: Optimal value: 4.256e-01
(CVXPY) Sep 20 03:16:22 PM: Compilation took 1.108e-01 seconds
(CVXPY) Sep 20 03:16:22 PM: Solver (including time spent in interface) took 6.249e-01 seconds
FULL MODEL:
  Accruacy: 0.57508
  Our objective: 0.15016000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.14612)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.00108)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.00052)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.00116)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.00032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.00036)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.698847532272339
Best over terms:
  Our final objective: 0.14612000000000003
    Its accruacy: 0.57306
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14612000000000003
  Highest accruacy: 0.57306
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

