Command:
python test_script.py -s linear_dependence -d 5 -n 5000 --seed 73 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30519999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.3052
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:55 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:55 PM: Finished problem compilation (took 9.585e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.78e-01  6.55e+01  1.00e+00  1.00e+00   ------   
  1  +5.9950e-01  +5.0122e+02  5.01e+02  3.62e-01  3.82e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4597e-01  +7.1460e+01  7.09e+01  1.41e-01  1.86e+01  9.87e-03  2.34e-01  7.81e-01  
  3  +5.0972e-01  +1.6073e+01  1.56e+01  9.87e-02  1.26e+01  2.21e-05  2.30e-01  1.09e-01  
  4  +5.0002e-01  +1.0604e+00  5.60e-01  5.35e-03  7.00e-01  8.58e-06  1.16e-01  9.63e-01  
  5  +4.9823e-01  +1.1659e+00  6.68e-01  4.58e-03  6.09e-01  4.55e-05  1.88e-02  9.14e-01  
  6  +4.7990e-01  +9.9631e-01  5.16e-01  5.50e-04  7.41e-02  3.70e-04  1.56e-03  9.18e-01  
  7  +4.4181e-01  +6.6152e-01  2.20e-01  1.09e-04  1.45e-02  3.68e-04  3.26e-04  8.41e-01  
  8  +4.0758e-01  +4.7900e-01  7.14e-02  3.36e-05  4.45e-03  2.93e-06  1.33e-04  8.55e-01  
  9  +3.9003e-01  +3.9475e-01  4.71e-03  2.08e-06  2.75e-04  1.59e-07  9.36e-06  9.42e-01  
 10  +3.8871e-01  +3.8876e-01  5.05e-05  2.23e-08  2.94e-06  1.69e-09  1.01e-07  9.89e-01  
 11  +3.8870e-01  +3.8870e-01  5.05e-07  2.23e-10  2.94e-08  1.69e-11  1.01e-09  9.90e-01  
 12  +3.8870e-01  +3.8870e-01  5.05e-09  2.23e-12  2.94e-10  1.69e-13  1.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.2073ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:55 PM: Optimal value: 3.887e-01
(CVXPY) Sep 20 03:07:55 PM: Compilation took 9.585e-03 seconds
(CVXPY) Sep 20 03:07:55 PM: Solver (including time spent in interface) took 2.142e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3887
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:55 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:55 PM: Finished problem compilation (took 8.632e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 24754
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5011e+03  2.50e+03  9.78e-01  6.93e+01  1.00e+00  1.00e+00   ------   
  1  +5.9918e-01  +5.0142e+02  5.01e+02  3.62e-01  4.04e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4555e-01  +7.0996e+01  7.05e+01  1.40e-01  1.95e+01  9.91e-03  2.33e-01  7.85e-01  
  3  +5.0946e-01  +1.5793e+01  1.53e+01  9.75e-02  1.32e+01  2.20e-05  2.28e-01  1.16e-01  
  4  +5.0046e-01  +1.7973e+00  1.30e+00  1.24e-02  1.69e+00  9.79e-06  1.55e-01  5.96e-01  
  5  +4.9992e-01  +9.4470e-01  4.45e-01  4.16e-03  5.78e-01  7.28e-06  4.10e-02  7.62e-01  
  6  +4.8600e-01  +1.5157e+00  1.03e+00  9.79e-04  1.41e-01  2.42e-04  2.54e-03  9.77e-01  
  7  +4.5655e-01  +8.7675e-01  4.20e-01  1.92e-04  2.75e-02  2.45e-04  5.05e-04  8.61e-01  
  8  +4.5223e-01  +8.7598e-01  4.24e-01  1.64e-04  2.35e-02  2.59e-04  4.26e-04  2.41e-01  
  9  +4.2094e-01  +6.6980e-01  2.49e-01  9.31e-05  1.32e-02  2.79e-05  2.61e-04  7.51e-01  
 10  +3.7321e-01  +4.5502e-01  8.18e-02  2.88e-05  4.04e-03  8.29e-06  9.27e-05  7.51e-01  
 11  +3.5031e-01  +3.5785e-01  7.54e-03  2.72e-06  3.79e-04  8.72e-07  9.85e-06  9.51e-01  
 12  +3.4754e-01  +3.4764e-01  1.02e-04  3.66e-08  5.11e-06  1.17e-08  1.36e-07  9.89e-01  
 13  +3.4750e-01  +3.4750e-01  1.02e-06  3.66e-10  5.11e-08  1.17e-10  1.36e-09  9.90e-01  
 14  +3.4750e-01  +3.4750e-01  1.02e-08  3.67e-12  5.12e-10  1.17e-12  1.36e-11  9.90e-01  
 15  +3.4750e-01  +3.4750e-01  1.02e-10  3.67e-14  5.12e-12  1.17e-14  1.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.1979ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:55 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:55 PM: Optimal value: 3.475e-01
(CVXPY) Sep 20 03:07:55 PM: Compilation took 8.632e-03 seconds
(CVXPY) Sep 20 03:07:55 PM: Solver (including time spent in interface) took 2.880e-02 seconds
FULL MODEL:
  Accruacy: 0.6526
  Our objective: 0.30519999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3052)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7128536701202393
Best over terms:
  Our final objective: 0.30519999999999997
    Its accruacy: 0.6526
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30519999999999997
  Highest accruacy: 0.6526
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

