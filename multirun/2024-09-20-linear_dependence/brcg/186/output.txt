Command:
python test_script.py -s linear_dependence -d 5 -n 5000 --seed 56 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.312
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.31200000000000006
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:53 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:53 PM: Finished problem compilation (took 1.230e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.78e-01  6.56e+01  1.00e+00  1.00e+00   ------   
  1  +5.9951e-01  +5.0122e+02  5.01e+02  3.62e-01  3.83e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4599e-01  +7.1480e+01  7.09e+01  1.41e-01  1.86e+01  9.87e-03  2.34e-01  7.81e-01  
  3  +5.0980e-01  +1.6156e+01  1.56e+01  9.90e-02  1.27e+01  2.22e-05  2.30e-01  1.07e-01  
  4  +5.0002e-01  +1.0413e+00  5.41e-01  5.17e-03  6.77e-01  8.33e-06  1.17e-01  9.68e-01  
  5  +4.9851e-01  +1.0636e+00  5.65e-01  4.11e-03  5.44e-01  3.90e-05  1.83e-02  9.21e-01  
  6  +4.7720e-01  +8.9393e-01  4.17e-01  3.77e-04  5.06e-02  4.29e-04  1.08e-03  9.42e-01  
  7  +4.4445e-01  +6.3811e-01  1.94e-01  1.01e-04  1.34e-02  3.08e-04  3.10e-04  7.61e-01  
  8  +4.1410e-01  +4.6407e-01  5.00e-02  2.55e-05  3.37e-03  2.62e-06  9.42e-05  8.72e-01  
  9  +4.0242e-01  +4.0534e-01  2.92e-03  1.47e-06  1.94e-04  1.22e-07  5.84e-06  9.44e-01  
 10  +4.0156e-01  +4.0179e-01  2.31e-04  1.03e-07  1.36e-05  1.45e-08  4.68e-07  9.65e-01  
 11  +4.0150e-01  +4.0150e-01  2.35e-06  1.04e-09  1.37e-07  1.47e-10  4.75e-09  9.90e-01  
 12  +4.0150e-01  +4.0150e-01  2.35e-08  1.04e-11  1.37e-09  1.47e-12  4.75e-11  9.90e-01  
 13  +4.0150e-01  +4.0150e-01  2.35e-10  1.04e-13  1.37e-11  1.51e-14  4.86e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.3596ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:53 PM: Optimal value: 4.015e-01
(CVXPY) Sep 20 03:07:53 PM: Compilation took 1.230e-02 seconds
(CVXPY) Sep 20 03:07:53 PM: Solver (including time spent in interface) took 2.561e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4015
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:53 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:53 PM: Finished problem compilation (took 7.675e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 24927
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5012e+03  2.50e+03  9.78e-01  6.96e+01  1.00e+00  1.00e+00   ------   
  1  +5.9913e-01  +5.0141e+02  5.01e+02  3.62e-01  4.06e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4548e-01  +7.0919e+01  7.04e+01  1.40e-01  1.95e+01  9.92e-03  2.33e-01  7.86e-01  
  3  +5.0943e-01  +1.5764e+01  1.53e+01  9.73e-02  1.32e+01  2.20e-05  2.28e-01  1.17e-01  
  4  +5.0059e-01  +2.0118e+00  1.51e+00  1.44e-02  1.97e+00  1.00e-05  1.62e-01  5.34e-01  
  5  +5.0013e-01  +1.2137e+00  7.14e-01  6.72e-03  9.35e-01  7.09e-06  7.22e-02  5.68e-01  
  6  +4.9735e-01  +1.7074e+00  1.21e+00  3.78e-03  5.44e-01  5.87e-05  1.04e-02  9.90e-01  
  7  +4.8363e-01  +1.4029e+00  9.19e-01  6.99e-04  1.01e-01  2.18e-04  1.78e-03  8.29e-01  
  8  +4.6752e-01  +1.1814e+00  7.14e-01  3.49e-04  5.03e-02  2.38e-04  8.92e-04  5.37e-01  
  9  +4.7412e-01  +9.9306e-01  5.19e-01  2.68e-04  3.86e-02  4.15e-05  6.79e-04  7.99e-01  
 10  +4.7328e-01  +9.0524e-01  4.32e-01  2.52e-04  3.62e-02  2.92e-05  6.72e-04  1.32e-01  
 11  +4.4815e-01  +7.7628e-01  3.28e-01  1.26e-04  1.81e-02  3.54e-05  3.46e-04  6.60e-01  
 12  +4.0922e-01  +6.3169e-01  2.22e-01  7.99e-05  1.14e-02  2.54e-05  2.29e-04  5.01e-01  
 13  +3.5962e-01  +4.0127e-01  4.17e-02  1.53e-05  2.15e-03  2.42e-06  5.22e-05  8.64e-01  
 14  +3.4601e-01  +3.5086e-01  4.84e-03  1.76e-06  2.47e-04  5.70e-07  6.50e-06  9.86e-01  
 15  +3.4412e-01  +3.4417e-01  5.25e-05  1.91e-08  2.68e-06  6.09e-09  7.15e-08  9.89e-01  
 16  +3.4410e-01  +3.4410e-01  5.25e-07  1.91e-10  2.68e-08  6.09e-11  7.15e-10  9.90e-01  
 17  +3.4410e-01  +3.4410e-01  5.25e-09  1.91e-12  2.68e-10  6.09e-13  7.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.904ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:53 PM: Optimal value: 3.441e-01
(CVXPY) Sep 20 03:07:53 PM: Compilation took 7.675e-03 seconds
(CVXPY) Sep 20 03:07:53 PM: Solver (including time spent in interface) took 2.899e-02 seconds
FULL MODEL:
  Accruacy: 0.656
  Our objective: 0.312

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.312)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7454328536987305
Best over terms:
  Our final objective: 0.312
    Its accruacy: 0.656
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.312
  Highest accruacy: 0.656
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

