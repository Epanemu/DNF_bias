Command:
python test_script.py -s linear_dependence -d 9 -n 500 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.164
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.728
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 2.078e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +2.5102e+02  2.51e+02  9.38e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8011e-01  +5.4667e+01  5.41e+01  4.07e-01  1.58e+01  3.78e-03  5.78e-01  5.86e-01  
  2  +5.2842e-01  +6.2868e+00  5.76e+00  1.28e-01  6.29e+00  1.68e-02  2.62e-01  9.75e-01  
  3  +5.0245e-01  +1.4595e+00  9.57e-01  3.00e-02  1.47e+00  3.98e-05  1.85e-01  8.46e-01  
  4  +4.9978e-01  +7.0189e-01  2.02e-01  6.30e-03  3.18e-01  1.72e-05  4.09e-02  8.20e-01  
  5  +4.8524e-01  +6.9459e-01  2.09e-01  1.51e-03  7.84e-02  1.34e-04  4.67e-03  9.22e-01  
  6  +4.7014e-01  +5.6082e-01  9.07e-02  6.12e-04  3.15e-02  4.47e-05  2.07e-03  6.74e-01  
  7  +4.6549e-01  +5.3123e-01  6.57e-02  3.91e-04  2.01e-02  3.89e-05  1.37e-03  5.65e-01  
  8  +4.6603e-01  +5.2983e-01  6.38e-02  3.88e-04  1.99e-02  3.84e-05  1.34e-03  1.72e-01  
  9  +4.5625e-01  +4.8317e-01  2.69e-02  1.24e-04  6.37e-03  2.00e-05  4.89e-04  7.65e-01  
 10  +4.4910e-01  +4.5229e-01  3.20e-03  1.30e-05  6.68e-04  2.61e-06  5.65e-05  9.85e-01  
 11  +4.4811e-01  +4.4815e-01  3.67e-05  1.48e-07  7.60e-06  2.94e-08  6.50e-07  9.90e-01  
 12  +4.4810e-01  +4.4810e-01  3.67e-07  1.48e-09  7.60e-08  2.94e-10  6.50e-09  9.90e-01  
 13  +4.4810e-01  +4.4810e-01  3.67e-09  1.48e-11  7.60e-10  2.94e-12  6.51e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3206ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 4.481e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 2.078e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 1.140e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4481
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 3.878e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3515
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +2.5178e+02  2.51e+02  9.39e-01  2.57e+01  1.00e+00  1.02e+00   ------   
  1  +5.7644e-01  +5.4881e+01  5.43e+01  4.11e-01  1.62e+01  3.78e-03  5.83e-01  5.85e-01  
  2  +5.2472e-01  +6.3047e+00  5.78e+00  1.26e-01  6.34e+00  1.76e-02  2.60e-01  9.90e-01  
  3  +5.0476e-01  +1.5052e+00  1.00e+00  3.40e-02  1.77e+00  1.58e-03  1.10e-01  8.57e-01  
  4  +5.0071e-01  +1.4816e+00  9.81e-01  1.83e-02  9.83e-01  2.73e-03  4.97e-02  6.29e-01  
  5  +4.8589e-01  +1.2136e+00  7.28e-01  6.51e-03  3.54e-01  3.87e-03  1.77e-02  6.72e-01  
  6  +4.7297e-01  +9.2865e-01  4.56e-01  4.10e-03  2.19e-01  1.51e-03  1.21e-02  4.66e-01  
  7  +4.5553e-01  +6.9296e-01  2.37e-01  1.74e-03  9.22e-02  7.91e-04  5.41e-03  5.98e-01  
  8  +4.5113e-01  +7.0088e-01  2.50e-01  1.15e-03  6.15e-02  1.01e-03  3.40e-03  5.42e-01  
  9  +4.4110e-01  +6.1307e-01  1.72e-01  8.69e-04  4.62e-02  2.33e-04  2.73e-03  5.74e-01  
 10  +4.2520e-01  +5.3583e-01  1.11e-01  4.52e-04  2.41e-02  1.60e-04  1.47e-03  5.35e-01  
 11  +4.0874e-01  +4.5644e-01  4.77e-02  1.80e-04  9.56e-03  5.84e-05  6.12e-04  7.56e-01  
 12  +4.0018e-01  +4.2095e-01  2.08e-02  7.39e-05  3.97e-03  2.66e-05  2.58e-04  8.45e-01  
 13  +3.9341e-01  +3.9597e-01  2.56e-03  9.02e-06  4.84e-04  3.24e-06  3.24e-05  9.90e-01  
 14  +3.9231e-01  +3.9234e-01  2.68e-05  9.41e-08  5.05e-06  3.33e-08  3.40e-07  9.90e-01  
 15  +3.9230e-01  +3.9230e-01  2.68e-07  9.41e-10  5.05e-08  3.33e-10  3.40e-09  9.90e-01  
 16  +3.9230e-01  +3.9230e-01  2.68e-09  9.41e-12  5.05e-10  3.33e-12  3.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.1047ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 3.923e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 3.878e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 3.955e-03 seconds
Iteration: 2, Objective: 0.3923
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 4.079e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3838
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9885e-01  +2.5192e+02  2.51e+02  9.39e-01  2.59e+01  1.00e+00  1.02e+00   ------   
  1  +5.7274e-01  +5.4983e+01  5.44e+01  4.14e-01  1.62e+01  3.78e-03  5.84e-01  5.84e-01  
  2  +5.2180e-01  +6.4753e+00  5.95e+00  1.27e-01  6.38e+00  1.81e-02  2.59e-01  9.90e-01  
  3  +5.0588e-01  +1.6947e+00  1.19e+00  3.44e-02  1.85e+00  3.23e-03  9.29e-02  7.36e-01  
  4  +5.0426e-01  +1.7090e+00  1.20e+00  2.60e-02  1.43e+00  4.12e-03  6.67e-02  3.15e-01  
  5  +4.9371e-01  +1.8506e+00  1.36e+00  1.37e-02  7.62e-01  5.61e-03  3.40e-02  7.62e-01  
  6  +4.6693e-01  +1.1442e+00  6.77e-01  4.91e-03  2.71e-01  2.66e-03  1.31e-02  7.09e-01  
  7  +4.4721e-01  +9.1906e-01  4.72e-01  2.83e-03  1.56e-01  1.44e-03  7.80e-03  5.81e-01  
  8  +4.2344e-01  +7.4853e-01  3.25e-01  1.46e-03  7.99e-02  9.42e-04  4.18e-03  6.31e-01  
  9  +4.1291e-01  +6.5997e-01  2.47e-01  1.30e-03  7.04e-02  4.02e-04  3.90e-03  3.49e-01  
 10  +3.8661e-01  +5.2538e-01  1.39e-01  6.04e-04  3.28e-02  1.97e-04  1.91e-03  7.26e-01  
 11  +3.6468e-01  +4.1172e-01  4.70e-02  1.99e-04  1.08e-02  5.83e-05  6.80e-04  7.25e-01  
 12  +3.5456e-01  +3.6206e-01  7.50e-03  3.16e-05  1.71e-03  8.82e-06  1.13e-04  8.76e-01  
 13  +3.5286e-01  +3.5428e-01  1.42e-03  5.96e-06  3.21e-04  1.65e-06  2.15e-05  8.33e-01  
 14  +3.5251e-01  +3.5273e-01  2.22e-04  9.23e-07  4.95e-05  2.36e-07  3.39e-06  9.90e-01  
 15  +3.5243e-01  +3.5244e-01  4.66e-06  1.93e-08  1.03e-06  4.89e-09  7.14e-08  9.83e-01  
 16  +3.5243e-01  +3.5243e-01  4.66e-08  1.93e-10  1.03e-08  4.90e-11  7.15e-10  9.90e-01  
 17  +3.5243e-01  +3.5243e-01  4.66e-10  1.93e-12  1.03e-10  4.91e-13  7.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6261ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 3.524e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 4.079e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 4.462e-03 seconds
Iteration: 3, Objective: 0.3524
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 4.199e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 4025
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +2.5214e+02  2.52e+02  9.40e-01  2.58e+01  1.00e+00  1.02e+00   ------   
  1  +5.6860e-01  +5.5017e+01  5.44e+01  4.15e-01  1.61e+01  3.78e-03  5.83e-01  5.85e-01  
  2  +5.1902e-01  +6.6503e+00  6.13e+00  1.25e-01  6.30e+00  1.86e-02  2.55e-01  9.90e-01  
  3  +5.0369e-01  +1.5553e+00  1.05e+00  2.61e-02  1.44e+00  3.75e-03  6.75e-02  7.67e-01  
  4  +4.9407e-01  +1.7237e+00  1.23e+00  1.44e-02  8.11e-01  6.56e-03  3.46e-02  6.63e-01  
  5  +4.6564e-01  +1.2634e+00  7.98e-01  5.55e-03  3.13e-01  6.12e-03  1.37e-02  6.65e-01  
  6  +4.4732e-01  +1.1649e+00  7.18e-01  3.70e-03  2.07e-01  6.03e-03  9.31e-03  4.11e-01  
  7  +4.2443e-01  +9.8385e-01  5.59e-01  2.68e-03  1.49e-01  3.63e-03  7.07e-03  3.73e-01  
  8  +3.7341e-01  +6.1151e-01  2.38e-01  1.13e-03  6.12e-02  3.74e-04  3.39e-03  7.25e-01  
  9  +3.3980e-01  +4.4748e-01  1.08e-01  4.76e-04  2.58e-02  1.45e-04  1.60e-03  6.03e-01  
 10  +3.2141e-01  +3.6256e-01  4.11e-02  1.78e-04  9.57e-03  5.16e-05  6.47e-04  6.50e-01  
 11  +3.1593e-01  +3.3835e-01  2.24e-02  9.31e-05  4.99e-03  2.67e-05  3.51e-04  7.46e-01  
 12  +3.0942e-01  +3.1141e-01  1.99e-03  8.26e-06  4.41e-04  2.06e-06  3.24e-05  9.90e-01  
 13  +3.0879e-01  +3.0904e-01  2.48e-04  1.03e-06  5.47e-05  2.43e-07  4.13e-06  8.83e-01  
 14  +3.0870e-01  +3.0871e-01  5.37e-06  2.22e-08  1.18e-06  4.91e-09  9.08e-08  9.90e-01  
 15  +3.0870e-01  +3.0870e-01  5.37e-08  2.22e-10  1.18e-08  4.91e-11  9.09e-10  9.90e-01  
 16  +3.0870e-01  +3.0870e-01  5.37e-10  2.22e-12  1.18e-10  4.91e-13  9.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6509ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 3.087e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 4.199e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 4.363e-03 seconds
Iteration: 4, Objective: 0.3087
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 3.753e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 4170
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9845e-01  +2.5212e+02  2.52e+02  9.40e-01  2.56e+01  1.00e+00  1.02e+00   ------   
  1  +5.6394e-01  +5.5053e+01  5.45e+01  4.16e-01  1.59e+01  3.79e-03  5.82e-01  5.85e-01  
  2  +5.1592e-01  +6.8141e+00  6.30e+00  1.24e-01  6.20e+00  1.90e-02  2.52e-01  9.90e-01  
  3  +5.0100e-01  +1.6659e+00  1.16e+00  2.52e-02  1.39e+00  4.88e-03  6.24e-02  7.72e-01  
  4  +4.8294e-01  +1.6359e+00  1.15e+00  1.11e-02  6.29e-01  9.01e-03  2.62e-02  6.55e-01  
  5  +4.5193e-01  +1.2391e+00  7.87e-01  5.53e-03  3.09e-01  5.65e-03  1.38e-02  6.08e-01  
  6  +4.2252e-01  +1.0666e+00  6.44e-01  3.35e-03  1.87e-01  4.85e-03  8.56e-03  4.87e-01  
  7  +3.6612e-01  +6.6961e-01  3.03e-01  1.52e-03  8.29e-02  4.45e-05  4.43e-03  8.09e-01  
  8  +3.2121e-01  +4.6381e-01  1.43e-01  6.27e-04  3.42e-02  6.04e-05  2.03e-03  6.78e-01  
  9  +2.9105e-01  +3.3929e-01  4.82e-02  2.00e-04  1.09e-02  2.41e-05  7.33e-04  7.00e-01  
 10  +2.7681e-01  +2.8156e-01  4.75e-03  1.96e-05  1.06e-03  4.63e-06  7.81e-05  9.90e-01  
 11  +2.7503e-01  +2.7510e-01  7.42e-05  3.06e-07  1.65e-05  6.14e-08  1.24e-06  9.84e-01  
 12  +2.7500e-01  +2.7500e-01  7.56e-07  3.12e-09  1.69e-07  6.23e-10  1.27e-08  9.90e-01  
 13  +2.7500e-01  +2.7500e-01  7.56e-09  3.12e-11  1.69e-09  6.23e-12  1.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9556ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 2.750e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 3.753e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 3.064e-03 seconds
Iteration: 5, Objective: 0.2750
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 2.499e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 4284
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9835e-01  +2.5234e+02  2.52e+02  9.41e-01  2.55e+01  1.00e+00  1.02e+00   ------   
  1  +5.6055e-01  +5.5051e+01  5.45e+01  4.17e-01  1.57e+01  3.80e-03  5.81e-01  5.86e-01  
  2  +5.1365e-01  +6.9402e+00  6.43e+00  1.23e-01  6.07e+00  1.93e-02  2.48e-01  9.90e-01  
  3  +4.9816e-01  +1.7856e+00  1.29e+00  2.48e-02  1.37e+00  5.87e-03  6.02e-02  7.78e-01  
  4  +4.6998e-01  +1.6192e+00  1.15e+00  9.22e-03  5.22e-01  1.12e-02  2.16e-02  6.84e-01  
  5  +4.3576e-01  +1.3692e+00  9.33e-01  5.22e-03  2.93e-01  1.03e-02  1.26e-02  5.00e-01  
  6  +3.8613e-01  +9.8156e-01  5.95e-01  2.85e-03  1.57e-01  4.06e-03  7.36e-03  6.02e-01  
  7  +3.2083e-01  +5.6196e-01  2.41e-01  1.11e-03  6.00e-02  8.83e-04  3.35e-03  6.32e-01  
  8  +2.9084e-01  +4.2278e-01  1.32e-01  5.88e-04  3.17e-02  4.26e-04  1.97e-03  4.75e-01  
  9  +2.6550e-01  +3.0882e-01  4.33e-02  1.89e-04  1.02e-02  9.48e-05  7.07e-04  8.03e-01  
 10  +2.5486e-01  +2.6502e-01  1.02e-02  4.40e-05  2.37e-03  1.20e-05  1.77e-04  9.04e-01  
 11  +2.5159e-01  +2.5213e-01  5.46e-04  2.35e-06  1.27e-04  6.10e-07  9.69e-06  9.49e-01  
 12  +2.5140e-01  +2.5141e-01  6.01e-06  2.59e-08  1.40e-06  6.16e-09  1.08e-07  9.89e-01  
 13  +2.5140e-01  +2.5140e-01  6.01e-08  2.59e-10  1.40e-08  6.16e-11  1.08e-09  9.90e-01  
 14  +2.5140e-01  +2.5140e-01  6.02e-10  2.60e-12  1.40e-10  6.16e-13  1.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9388ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 2.514e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 2.499e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 4.714e-03 seconds
Iteration: 6, Objective: 0.2514
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 329 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 2.834e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 329
  constraints   = 579
  nnz(P)        = 0
  nnz(A)        = 4393
  cones (total) = 1
    : Nonnegative = 1,  numel = 579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9816e-01  +2.5221e+02  2.52e+02  9.42e-01  2.53e+01  1.00e+00  1.02e+00   ------   
  1  +5.5568e-01  +5.5079e+01  5.45e+01  4.17e-01  1.55e+01  3.82e-03  5.79e-01  5.86e-01  
  2  +5.1049e-01  +7.0995e+00  6.59e+00  1.22e-01  5.94e+00  1.97e-02  2.44e-01  9.90e-01  
  3  +4.9367e-01  +1.9457e+00  1.45e+00  2.48e-02  1.36e+00  7.16e-03  5.86e-02  7.78e-01  
  4  +4.5609e-01  +1.7031e+00  1.25e+00  9.29e-03  5.22e-01  1.22e-02  2.16e-02  6.90e-01  
  5  +4.1751e-01  +1.4514e+00  1.03e+00  5.47e-03  3.05e-01  1.14e-02  1.31e-02  4.68e-01  
  6  +3.7501e-01  +1.0601e+00  6.85e-01  3.43e-03  1.88e-01  5.33e-03  8.79e-03  4.43e-01  
  7  +3.1233e-01  +6.0915e-01  2.97e-01  1.45e-03  7.78e-02  1.11e-03  4.29e-03  6.45e-01  
  8  +2.7906e-01  +4.3193e-01  1.53e-01  7.27e-04  3.90e-02  4.97e-04  2.40e-03  4.99e-01  
  9  +2.6018e-01  +3.3937e-01  7.92e-02  3.69e-04  1.99e-02  2.20e-04  1.32e-03  5.64e-01  
 10  +2.5069e-01  +2.9582e-01  4.51e-02  2.06e-04  1.12e-02  1.17e-04  7.67e-04  4.93e-01  
 11  +2.3906e-01  +2.4325e-01  4.19e-03  1.90e-05  1.03e-03  3.94e-06  7.67e-05  9.90e-01  
 12  +2.3769e-01  +2.3794e-01  2.52e-04  1.14e-06  6.18e-05  2.17e-07  4.74e-06  9.41e-01  
 13  +2.3760e-01  +2.3760e-01  2.76e-06  1.26e-08  6.78e-07  2.32e-09  5.23e-08  9.89e-01  
 14  +2.3760e-01  +2.3760e-01  2.76e-08  1.26e-10  6.78e-09  2.32e-11  5.24e-10  9.90e-01  
 15  +2.3760e-01  +2.3760e-01  2.77e-10  1.26e-12  6.79e-11  2.32e-13  5.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.319ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 2.376e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 2.834e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 4.230e-03 seconds
Iteration: 7, Objective: 0.2376
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 339 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 4.610e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 339
  constraints   = 589
  nnz(P)        = 0
  nnz(A)        = 4501
  cones (total) = 1
    : Nonnegative = 1,  numel = 589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9806e-01  +2.5235e+02  2.52e+02  9.42e-01  2.52e+01  1.00e+00  1.02e+00   ------   
  1  +5.5206e-01  +5.5155e+01  5.46e+01  4.18e-01  1.53e+01  3.83e-03  5.79e-01  5.86e-01  
  2  +5.0804e-01  +7.2056e+00  6.70e+00  1.21e-01  5.81e+00  2.00e-02  2.42e-01  9.90e-01  
  3  +4.8953e-01  +2.0565e+00  1.57e+00  2.45e-02  1.34e+00  8.09e-03  5.76e-02  7.78e-01  
  4  +4.3809e-01  +1.6556e+00  1.22e+00  8.04e-03  4.48e-01  1.30e-02  1.88e-02  7.38e-01  
  5  +3.9987e-01  +1.4011e+00  1.00e+00  5.05e-03  2.79e-01  1.10e-02  1.22e-02  4.41e-01  
  6  +3.4312e-01  +8.5764e-01  5.15e-01  2.71e-03  1.45e-01  2.29e-03  7.34e-03  5.65e-01  
  7  +2.8486e-01  +4.8871e-01  2.04e-01  1.03e-03  5.42e-02  5.92e-04  3.26e-03  6.23e-01  
  8  +2.6194e-01  +3.7574e-01  1.14e-01  5.60e-04  2.97e-02  2.91e-04  1.95e-03  4.94e-01  
  9  +2.4298e-01  +2.8474e-01  4.18e-02  1.99e-04  1.07e-02  8.77e-05  7.59e-04  7.39e-01  
 10  +2.3365e-01  +2.4258e-01  8.93e-03  4.26e-05  2.26e-03  5.86e-06  1.76e-04  9.90e-01  
 11  +2.3089e-01  +2.3165e-01  7.57e-04  3.58e-06  1.91e-04  4.97e-07  1.51e-05  9.29e-01  
 12  +2.3065e-01  +2.3066e-01  9.38e-06  4.44e-08  2.37e-06  5.30e-09  1.90e-07  9.87e-01  
 13  +2.3065e-01  +2.3065e-01  9.38e-08  4.44e-10  2.37e-08  5.29e-11  1.90e-09  9.90e-01  
 14  +2.3065e-01  +2.3065e-01  9.38e-10  4.44e-12  2.37e-10  5.29e-13  1.90e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.698ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 2.307e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 4.610e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 5.077e-03 seconds
Iteration: 8, Objective: 0.2307
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 349 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 3.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 349
  constraints   = 599
  nnz(P)        = 0
  nnz(A)        = 4574
  cones (total) = 1
    : Nonnegative = 1,  numel = 599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9798e-01  +2.5262e+02  2.52e+02  9.42e-01  2.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.4883e-01  +5.5229e+01  5.47e+01  4.19e-01  1.51e+01  3.83e-03  5.78e-01  5.87e-01  
  2  +5.0534e-01  +7.3090e+00  6.80e+00  1.19e-01  5.71e+00  2.03e-02  2.40e-01  9.90e-01  
  3  +4.8415e-01  +1.9541e+00  1.47e+00  2.11e-02  1.16e+00  8.35e-03  4.99e-02  8.12e-01  
  4  +4.3699e-01  +1.6030e+00  1.17e+00  8.41e-03  4.64e-01  1.13e-02  1.99e-02  6.66e-01  
  5  +3.9152e-01  +1.3097e+00  9.18e-01  4.82e-03  2.64e-01  9.88e-03  1.17e-02  4.85e-01  
  6  +3.3803e-01  +8.6735e-01  5.29e-01  2.80e-03  1.50e-01  3.14e-03  7.57e-03  5.05e-01  
  7  +2.8273e-01  +5.1093e-01  2.28e-01  1.17e-03  6.13e-02  9.17e-04  3.63e-03  5.94e-01  
  8  +2.5206e-01  +3.5600e-01  1.04e-01  5.12e-04  2.72e-02  3.42e-04  1.79e-03  6.02e-01  
  9  +2.4754e-01  +3.3562e-01  8.81e-02  4.27e-04  2.29e-02  2.78e-04  1.52e-03  2.13e-01  
 10  +2.3483e-01  +2.7678e-01  4.19e-02  1.99e-04  1.07e-02  1.12e-04  7.64e-04  5.86e-01  
 11  +2.2398e-01  +2.2766e-01  3.69e-03  1.73e-05  9.26e-04  6.49e-06  7.19e-05  9.33e-01  
 12  +2.2292e-01  +2.2314e-01  2.16e-04  1.02e-06  5.41e-05  3.07e-07  4.40e-06  9.40e-01  
 13  +2.2285e-01  +2.2285e-01  2.34e-06  1.10e-08  5.86e-07  3.10e-09  4.84e-08  9.90e-01  
 14  +2.2285e-01  +2.2285e-01  2.34e-08  1.10e-10  5.86e-09  3.10e-11  4.84e-10  9.90e-01  
 15  +2.2285e-01  +2.2285e-01  2.34e-10  1.10e-12  5.86e-11  3.10e-13  4.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.9383ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 2.229e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 3.992e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 5.359e-03 seconds
Iteration: 9, Objective: 0.2229
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 359 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 3.737e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 359
  constraints   = 609
  nnz(P)        = 0
  nnz(A)        = 4664
  cones (total) = 1
    : Nonnegative = 1,  numel = 609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9786e-01  +2.5252e+02  2.52e+02  9.43e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.4509e-01  +5.5283e+01  5.47e+01  4.21e-01  1.49e+01  3.84e-03  5.77e-01  5.86e-01  
  2  +5.0143e-01  +7.4305e+00  6.93e+00  1.18e-01  5.63e+00  2.07e-02  2.38e-01  9.90e-01  
  3  +4.7765e-01  +1.9481e+00  1.47e+00  1.96e-02  1.07e+00  8.85e-03  4.62e-02  8.23e-01  
  4  +4.3199e-01  +1.6602e+00  1.23e+00  9.19e-03  5.02e-01  1.03e-02  2.18e-02  6.34e-01  
  5  +3.8742e-01  +1.3414e+00  9.54e-01  5.24e-03  2.85e-01  8.83e-03  1.29e-02  4.77e-01  
  6  +3.2730e-01  +8.1853e-01  4.91e-01  2.70e-03  1.42e-01  1.72e-03  7.37e-03  6.41e-01  
  7  +2.6729e-01  +4.3507e-01  1.68e-01  8.75e-04  4.56e-02  2.61e-04  2.79e-03  7.90e-01  
  8  +2.5352e-01  +3.7016e-01  1.17e-01  5.92e-04  3.14e-02  1.76e-04  1.97e-03  3.71e-01  
  9  +2.4618e-01  +3.3630e-01  9.01e-02  4.47e-04  2.39e-02  1.34e-04  1.53e-03  2.75e-01  
 10  +2.3291e-01  +2.7461e-01  4.17e-02  2.02e-04  1.08e-02  5.66e-05  7.44e-04  6.04e-01  
 11  +2.2198e-01  +2.2527e-01  3.29e-03  1.56e-05  8.39e-04  3.29e-06  6.25e-05  9.39e-01  
 12  +2.2102e-01  +2.2122e-01  1.97e-04  9.43e-07  5.02e-05  1.50e-07  3.98e-06  9.39e-01  
 13  +2.2095e-01  +2.2095e-01  2.18e-06  1.04e-08  5.55e-07  1.59e-09  4.48e-08  9.89e-01  
 14  +2.2095e-01  +2.2095e-01  2.19e-08  1.05e-10  5.56e-09  1.60e-11  4.49e-10  9.90e-01  
 15  +2.2095e-01  +2.2095e-01  2.19e-10  1.05e-12  5.56e-11  1.60e-13  4.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0653ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 2.210e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 3.737e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 5.471e-03 seconds
Iteration: 10, Objective: 0.2210
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:00 PM: Your problem has 369 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:00 PM: Finished problem compilation (took 3.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 369
  constraints   = 619
  nnz(P)        = 0
  nnz(A)        = 4727
  cones (total) = 1
    : Nonnegative = 1,  numel = 619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9772e-01  +2.5253e+02  2.52e+02  9.43e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.4064e-01  +5.5447e+01  5.49e+01  4.22e-01  1.48e+01  3.85e-03  5.78e-01  5.85e-01  
  2  +4.9836e-01  +7.5330e+00  7.03e+00  1.18e-01  5.58e+00  2.10e-02  2.37e-01  9.90e-01  
  3  +4.7282e-01  +1.9835e+00  1.51e+00  1.94e-02  1.05e+00  9.14e-03  4.56e-02  8.23e-01  
  4  +4.2882e-01  +1.7116e+00  1.28e+00  9.87e-03  5.35e-01  1.00e-02  2.35e-02  5.90e-01  
  5  +3.8217e-01  +1.3643e+00  9.82e-01  5.48e-03  2.95e-01  8.43e-03  1.35e-02  4.97e-01  
  6  +3.1720e-01  +7.8090e-01  4.64e-01  2.58e-03  1.35e-01  7.92e-04  7.16e-03  7.53e-01  
  7  +2.6154e-01  +4.2001e-01  1.58e-01  8.37e-04  4.32e-02  1.71e-04  2.69e-03  7.79e-01  
  8  +2.4955e-01  +3.6267e-01  1.13e-01  5.83e-04  3.06e-02  1.23e-04  1.94e-03  3.61e-01  
  9  +2.4280e-01  +3.3052e-01  8.77e-02  4.43e-04  2.34e-02  9.49e-05  1.52e-03  2.77e-01  
 10  +2.3003e-01  +2.6886e-01  3.88e-02  1.92e-04  1.02e-02  4.02e-05  7.03e-04  6.09e-01  
 11  +2.2115e-01  +2.2783e-01  6.68e-03  3.22e-05  1.72e-03  6.33e-06  1.26e-04  9.12e-01  
 12  +2.1918e-01  +2.1958e-01  3.92e-04  1.90e-06  1.01e-04  2.84e-07  7.78e-06  9.44e-01  
 13  +2.1905e-01  +2.1906e-01  6.84e-06  3.32e-08  1.75e-06  4.62e-09  1.40e-07  9.85e-01  
 14  +2.1905e-01  +2.1905e-01  6.84e-08  3.32e-10  1.75e-08  4.63e-11  1.40e-09  9.90e-01  
 15  +2.1905e-01  +2.1905e-01  6.84e-10  3.32e-12  1.75e-10  4.63e-13  1.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6172ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:00 PM: Optimal value: 2.191e-01
(CVXPY) Sep 20 03:17:00 PM: Compilation took 3.992e-03 seconds
(CVXPY) Sep 20 03:17:00 PM: Solver (including time spent in interface) took 6.238e-03 seconds
Iteration: 11, Objective: 0.2191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 3.722e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 4773
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9767e-01  +2.5243e+02  2.52e+02  9.44e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.3658e-01  +5.5441e+01  5.49e+01  4.22e-01  1.46e+01  3.87e-03  5.76e-01  5.86e-01  
  2  +4.9470e-01  +7.6559e+00  7.16e+00  1.16e-01  5.47e+00  2.13e-02  2.34e-01  9.90e-01  
  3  +4.6526e-01  +1.9992e+00  1.53e+00  1.82e-02  9.84e-01  9.71e-03  4.27e-02  8.33e-01  
  4  +4.1805e-01  +1.8137e+00  1.40e+00  1.00e-02  5.39e-01  1.09e-02  2.37e-02  5.74e-01  
  5  +3.7293e-01  +1.3769e+00  1.00e+00  5.76e-03  3.08e-01  7.86e-03  1.42e-02  4.60e-01  
  6  +3.0552e-01  +7.4194e-01  4.36e-01  2.42e-03  1.26e-01  1.50e-03  6.71e-03  6.83e-01  
  7  +2.6122e-01  +4.6675e-01  2.06e-01  1.12e-03  5.74e-02  5.12e-04  3.49e-03  6.13e-01  
  8  +2.4068e-01  +3.5620e-01  1.16e-01  6.08e-04  3.17e-02  2.66e-04  2.04e-03  4.85e-01  
  9  +2.3436e-01  +3.2438e-01  9.00e-02  4.63e-04  2.44e-02  2.00e-04  1.60e-03  2.76e-01  
 10  +2.2223e-01  +2.6253e-01  4.03e-02  2.03e-04  1.07e-02  7.63e-05  7.52e-04  6.33e-01  
 11  +2.1339e-01  +2.2036e-01  6.97e-03  3.43e-05  1.82e-03  9.51e-06  1.36e-04  9.04e-01  
 12  +2.1140e-01  +2.1184e-01  4.41e-04  2.18e-06  1.15e-04  4.52e-07  9.09e-06  9.39e-01  
 13  +2.1125e-01  +2.1126e-01  8.02e-06  3.97e-08  2.08e-06  7.18e-09  1.70e-07  9.84e-01  
 14  +2.1125e-01  +2.1125e-01  8.02e-08  3.97e-10  2.08e-08  7.18e-11  1.70e-09  9.90e-01  
 15  +2.1125e-01  +2.1125e-01  8.02e-10  3.97e-12  2.08e-10  7.19e-13  1.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.5268ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 2.113e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 3.722e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 6.516e-03 seconds
Iteration: 12, Objective: 0.2113
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 389 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 3.180e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 389
  constraints   = 639
  nnz(P)        = 0
  nnz(A)        = 4835
  cones (total) = 1
    : Nonnegative = 1,  numel = 639

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9753e-01  +2.5244e+02  2.52e+02  9.44e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.3325e-01  +5.5478e+01  5.49e+01  4.23e-01  1.44e+01  3.87e-03  5.75e-01  5.85e-01  
  2  +4.9080e-01  +7.7952e+00  7.30e+00  1.15e-01  5.37e+00  2.17e-02  2.31e-01  9.90e-01  
  3  +4.5720e-01  +2.0070e+00  1.55e+00  1.72e-02  9.25e-01  1.01e-02  4.03e-02  8.44e-01  
  4  +4.0017e-01  +1.8798e+00  1.48e+00  9.35e-03  5.02e-01  1.23e-02  2.21e-02  5.96e-01  
  5  +3.3452e-01  +1.0084e+00  6.74e-01  3.90e-03  2.04e-01  2.10e-03  1.00e-02  7.18e-01  
  6  +2.8956e-01  +6.8910e-01  4.00e-01  2.26e-03  1.17e-01  1.02e-03  6.31e-03  4.66e-01  
  7  +2.4373e-01  +4.0074e-01  1.57e-01  8.56e-04  4.41e-02  3.15e-04  2.71e-03  6.61e-01  
  8  +2.3047e-01  +3.3521e-01  1.05e-01  5.50e-04  2.89e-02  2.01e-04  1.82e-03  4.04e-01  
  9  +2.2352e-01  +3.0082e-01  7.73e-02  3.98e-04  2.11e-02  1.41e-04  1.36e-03  3.24e-01  
 10  +2.0986e-01  +2.3251e-01  2.26e-02  1.14e-04  6.04e-03  3.57e-05  4.26e-04  7.47e-01  
 11  +2.0479e-01  +2.0920e-01  4.41e-03  2.20e-05  1.16e-03  5.46e-06  8.66e-05  8.70e-01  
 12  +2.0354e-01  +2.0381e-01  2.71e-04  1.36e-06  7.11e-05  2.50e-07  5.65e-06  9.38e-01  
 13  +2.0345e-01  +2.0345e-01  3.60e-06  1.80e-08  9.42e-07  3.11e-09  7.66e-08  9.87e-01  
 14  +2.0345e-01  +2.0345e-01  3.61e-08  1.81e-10  9.44e-09  3.11e-11  7.68e-10  9.90e-01  
 15  +2.0345e-01  +2.0345e-01  3.61e-10  1.81e-12  9.44e-11  3.12e-13  7.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6334ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 2.035e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 3.180e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 7.093e-03 seconds
Iteration: 13, Objective: 0.2035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 3.533e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 4918
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9746e-01  +2.5245e+02  2.52e+02  9.45e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.2950e-01  +5.5559e+01  5.50e+01  4.23e-01  1.42e+01  3.89e-03  5.74e-01  5.85e-01  
  2  +4.8682e-01  +7.8808e+00  7.39e+00  1.14e-01  5.26e+00  2.20e-02  2.29e-01  9.90e-01  
  3  +4.4970e-01  +2.1066e+00  1.66e+00  1.78e-02  9.44e-01  1.05e-02  4.16e-02  8.36e-01  
  4  +3.9535e-01  +1.9431e+00  1.55e+00  1.01e-02  5.36e-01  1.23e-02  2.38e-02  5.45e-01  
  5  +3.3285e-01  +1.1203e+00  7.87e-01  4.51e-03  2.35e-01  3.44e-03  1.15e-02  6.71e-01  
  6  +2.7298e-01  +6.1352e-01  3.41e-01  1.91e-03  9.77e-02  1.09e-03  5.45e-03  6.01e-01  
  7  +2.3002e-01  +3.6245e-01  1.32e-01  7.09e-04  3.65e-02  3.53e-04  2.29e-03  6.62e-01  
  8  +2.1954e-01  +3.1198e-01  9.24e-02  4.77e-04  2.50e-02  2.22e-04  1.60e-03  4.27e-01  
  9  +2.0420e-01  +2.3515e-01  3.09e-02  1.57e-04  8.18e-03  2.61e-05  5.78e-04  9.90e-01  
 10  +1.9663e-01  +2.0246e-01  5.83e-03  2.91e-05  1.52e-03  4.79e-06  1.13e-04  8.46e-01  
 11  +1.9593e-01  +1.9950e-01  3.57e-03  1.77e-05  9.30e-04  2.96e-06  7.05e-05  5.26e-01  
 12  +1.9488e-01  +1.9524e-01  3.61e-04  1.79e-06  9.36e-05  2.71e-07  7.43e-06  9.15e-01  
 13  +1.9475e-01  +1.9476e-01  5.27e-06  2.61e-08  1.36e-06  3.70e-09  1.10e-07  9.88e-01  
 14  +1.9475e-01  +1.9475e-01  5.27e-08  2.61e-10  1.36e-08  3.70e-11  1.10e-09  9.90e-01  
 15  +1.9475e-01  +1.9475e-01  5.27e-10  2.61e-12  1.36e-10  3.70e-13  1.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7254ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 1.948e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 3.533e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 5.661e-03 seconds
Iteration: 14, Objective: 0.1948
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 2.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 4990
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9717e-01  +2.5279e+02  2.52e+02  9.45e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +5.2281e-01  +5.5628e+01  5.51e+01  4.23e-01  1.41e+01  3.90e-03  5.73e-01  5.86e-01  
  2  +4.7900e-01  +8.0722e+00  7.59e+00  1.11e-01  5.16e+00  2.25e-02  2.25e-01  9.90e-01  
  3  +4.3718e-01  +2.2185e+00  1.78e+00  1.83e-02  9.69e-01  1.06e-02  4.27e-02  8.25e-01  
  4  +3.7501e-01  +2.0755e+00  1.70e+00  1.04e-02  5.51e-01  1.22e-02  2.45e-02  5.81e-01  
  5  +3.1807e-01  +1.0228e+00  7.05e-01  4.48e-03  2.31e-01  1.07e-04  1.16e-02  8.01e-01  
  6  +2.6429e-01  +5.8841e-01  3.24e-01  1.95e-03  9.89e-02  8.07e-05  5.59e-03  5.85e-01  
  7  +2.2520e-01  +3.5747e-01  1.32e-01  7.44e-04  3.82e-02  4.52e-05  2.38e-03  6.33e-01  
  8  +2.1555e-01  +3.1376e-01  9.82e-02  5.24e-04  2.76e-02  4.37e-05  1.72e-03  3.95e-01  
  9  +2.0005e-01  +2.3831e-01  3.83e-02  2.00e-04  1.05e-02  2.92e-05  7.10e-04  8.88e-01  
 10  +1.9138e-01  +1.9906e-01  7.68e-03  3.92e-05  2.06e-03  5.89e-06  1.47e-04  8.31e-01  
 11  +1.8992e-01  +1.9280e-01  2.89e-03  1.47e-05  7.75e-04  2.28e-06  5.70e-05  7.40e-01  
 12  +1.8907e-01  +1.8941e-01  3.44e-04  1.74e-06  9.19e-05  2.64e-07  7.01e-06  9.30e-01  
 13  +1.8895e-01  +1.8896e-01  4.72e-06  2.40e-08  1.26e-06  3.50e-09  9.72e-08  9.88e-01  
 14  +1.8895e-01  +1.8895e-01  4.72e-08  2.40e-10  1.26e-08  3.50e-11  9.72e-10  9.90e-01  
 15  +1.8895e-01  +1.8895e-01  4.72e-10  2.40e-12  1.26e-10  3.50e-13  9.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.164ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 1.890e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 2.991e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 7.529e-03 seconds
Iteration: 15, Objective: 0.1890
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 4.212e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 5050
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9707e-01  +2.5279e+02  2.52e+02  9.46e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.1886e-01  +5.5779e+01  5.53e+01  4.24e-01  1.39e+01  3.91e-03  5.73e-01  5.85e-01  
  2  +4.7546e-01  +8.1597e+00  7.68e+00  1.11e-01  5.07e+00  2.28e-02  2.24e-01  9.90e-01  
  3  +4.3246e-01  +2.3184e+00  1.89e+00  1.92e-02  1.01e+00  1.07e-02  4.49e-02  8.13e-01  
  4  +3.6586e-01  +2.1695e+00  1.80e+00  1.08e-02  5.64e-01  1.23e-02  2.55e-02  5.92e-01  
  5  +3.1653e-01  +1.0734e+00  7.57e-01  4.94e-03  2.51e-01  1.03e-04  1.29e-02  7.74e-01  
  6  +2.5030e-01  +5.0291e-01  2.53e-01  1.51e-03  7.56e-02  6.80e-05  4.48e-03  7.19e-01  
  7  +2.2629e-01  +3.8201e-01  1.56e-01  8.86e-04  4.50e-02  5.57e-05  2.81e-03  4.56e-01  
  8  +2.1239e-01  +3.1547e-01  1.03e-01  5.55e-04  2.89e-02  4.86e-05  1.84e-03  4.67e-01  
  9  +2.0297e-01  +2.7045e-01  6.75e-02  3.53e-04  1.85e-02  3.61e-05  1.23e-03  4.34e-01  
 10  +1.8765e-01  +1.9634e-01  8.69e-03  4.43e-05  2.32e-03  5.24e-06  1.68e-04  9.14e-01  
 11  +1.8670e-01  +1.9194e-01  5.24e-03  2.67e-05  1.40e-03  3.72e-06  1.05e-04  6.49e-01  
 12  +1.8526e-01  +1.8600e-01  7.47e-04  3.80e-06  1.99e-04  5.03e-07  1.56e-05  8.67e-01  
 13  +1.8502e-01  +1.8506e-01  4.31e-05  2.20e-07  1.14e-05  2.89e-08  9.20e-07  9.54e-01  
 14  +1.8500e-01  +1.8500e-01  4.40e-07  2.24e-09  1.17e-07  2.95e-10  9.41e-09  9.90e-01  
 15  +1.8500e-01  +1.8500e-01  4.41e-09  2.24e-11  1.17e-09  2.95e-12  9.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.2071ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 1.850e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 4.212e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 7.190e-03 seconds
Iteration: 16, Objective: 0.1850
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 429 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 3.656e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 429
  constraints   = 679
  nnz(P)        = 0
  nnz(A)        = 5131
  cones (total) = 1
    : Nonnegative = 1,  numel = 679

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9703e-01  +2.5289e+02  2.52e+02  9.46e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.1620e-01  +5.5911e+01  5.54e+01  4.25e-01  1.38e+01  3.92e-03  5.73e-01  5.84e-01  
  2  +4.7261e-01  +8.2079e+00  7.74e+00  1.10e-01  4.98e+00  2.30e-02  2.24e-01  9.90e-01  
  3  +4.2871e-01  +2.3139e+00  1.89e+00  1.93e-02  9.98e-01  1.03e-02  4.54e-02  8.13e-01  
  4  +3.6437e-01  +2.2691e+00  1.90e+00  1.14e-02  5.92e-01  1.22e-02  2.70e-02  5.87e-01  
  5  +3.1492e-01  +1.1025e+00  7.88e-01  5.05e-03  2.55e-01  5.01e-04  1.32e-02  7.63e-01  
  6  +2.5319e-01  +5.4045e-01  2.87e-01  1.74e-03  8.63e-02  1.68e-04  5.09e-03  6.75e-01  
  7  +2.2157e-01  +3.7104e-01  1.49e-01  8.46e-04  4.27e-02  9.77e-05  2.70e-03  5.60e-01  
  8  +2.1009e-01  +3.1638e-01  1.06e-01  5.71e-04  2.95e-02  7.69e-05  1.89e-03  4.37e-01  
  9  +1.9903e-01  +2.6383e-01  6.48e-02  3.32e-04  1.74e-02  4.86e-05  1.15e-03  4.68e-01  
 10  +1.8680e-01  +2.0586e-01  1.91e-02  9.49e-05  4.96e-03  1.46e-05  3.54e-04  7.84e-01  
 11  +1.8192e-01  +1.8379e-01  1.87e-03  9.34e-06  4.83e-04  1.36e-06  3.69e-05  9.74e-01  
 12  +1.8135e-01  +1.8164e-01  2.85e-04  1.44e-06  7.37e-05  2.03e-07  5.90e-06  8.55e-01  
 13  +1.8125e-01  +1.8126e-01  4.45e-06  2.25e-08  1.15e-06  3.21e-09  9.31e-08  9.90e-01  
 14  +1.8125e-01  +1.8125e-01  4.45e-08  2.25e-10  1.15e-08  3.21e-11  9.31e-10  9.90e-01  
 15  +1.8125e-01  +1.8125e-01  4.45e-10  2.25e-12  1.15e-10  3.21e-13  9.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5385ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 1.813e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 3.656e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 7.894e-03 seconds
Iteration: 17, Objective: 0.1813
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 439 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 4.104e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 439
  constraints   = 689
  nnz(P)        = 0
  nnz(A)        = 5200
  cones (total) = 1
    : Nonnegative = 1,  numel = 689

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9683e-01  +2.5303e+02  2.53e+02  9.46e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.1112e-01  +5.6149e+01  5.56e+01  4.27e-01  1.37e+01  3.93e-03  5.75e-01  5.82e-01  
  2  +4.6664e-01  +8.5598e+00  8.09e+00  1.13e-01  5.05e+00  2.33e-02  2.30e-01  9.76e-01  
  3  +4.2494e-01  +2.5354e+00  2.11e+00  2.24e-02  1.14e+00  9.88e-03  5.29e-02  7.85e-01  
  4  +3.7103e-01  +2.4821e+00  2.11e+00  1.40e-02  7.20e-01  1.14e-02  3.34e-02  5.32e-01  
  5  +3.3303e-01  +1.6950e+00  1.36e+00  8.36e-03  4.27e-01  5.96e-03  2.08e-02  4.62e-01  
  6  +2.6639e-01  +6.1037e-01  3.44e-01  2.12e-03  1.05e-01  2.03e-04  5.99e-03  8.69e-01  
  7  +2.3118e-01  +4.3121e-01  2.00e-01  1.16e-03  5.85e-02  1.36e-04  3.56e-03  5.33e-01  
  8  +2.1116e-01  +3.2495e-01  1.14e-01  6.33e-04  3.23e-02  8.31e-05  2.06e-03  5.13e-01  
  9  +2.0542e-01  +2.9723e-01  9.18e-02  4.95e-04  2.57e-02  6.97e-05  1.64e-03  2.76e-01  
 10  +1.9315e-01  +2.3551e-01  4.24e-02  2.22e-04  1.16e-02  3.35e-05  7.80e-04  6.68e-01  
 11  +1.8648e-01  +2.0457e-01  1.81e-02  9.26e-05  4.83e-03  1.42e-05  3.40e-04  5.92e-01  
 12  +1.8201e-01  +1.8431e-01  2.30e-03  1.18e-05  6.08e-04  1.58e-06  4.57e-05  8.94e-01  
 13  +1.8135e-01  +1.8165e-01  3.01e-04  1.53e-06  7.80e-05  2.06e-07  6.32e-06  9.02e-01  
 14  +1.8125e-01  +1.8126e-01  4.17e-06  2.12e-08  1.08e-06  2.84e-09  8.87e-08  9.89e-01  
 15  +1.8125e-01  +1.8125e-01  4.17e-08  2.12e-10  1.08e-08  2.84e-11  8.87e-10  9.90e-01  
 16  +1.8125e-01  +1.8125e-01  4.18e-10  2.13e-12  1.08e-10  2.85e-13  8.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7062ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 1.813e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 4.104e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 8.539e-03 seconds
Iteration: 18, Objective: 0.1813
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 449 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 4.031e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 449
  constraints   = 699
  nnz(P)        = 0
  nnz(A)        = 5252
  cones (total) = 1
    : Nonnegative = 1,  numel = 699

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9666e-01  +2.5303e+02  2.53e+02  9.47e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.0808e-01  +5.6198e+01  5.57e+01  4.28e-01  1.36e+01  3.93e-03  5.75e-01  5.82e-01  
  2  +4.6246e-01  +8.6556e+00  8.19e+00  1.12e-01  4.97e+00  2.36e-02  2.29e-01  9.77e-01  
  3  +4.1907e-01  +2.6680e+00  2.25e+00  2.33e-02  1.18e+00  1.03e-02  5.50e-02  7.77e-01  
  4  +3.5745e-01  +2.4449e+00  2.09e+00  1.34e-02  6.82e-01  1.13e-02  3.21e-02  5.62e-01  
  5  +3.1731e-01  +1.5115e+00  1.19e+00  7.37e-03  3.71e-01  4.56e-03  1.87e-02  5.24e-01  
  6  +2.5402e-01  +5.6277e-01  3.09e-01  1.92e-03  9.39e-02  5.19e-04  5.54e-03  7.96e-01  
  7  +2.2960e-01  +4.4782e-01  2.18e-01  1.28e-03  6.31e-02  3.55e-04  3.88e-03  4.05e-01  
  8  +2.0708e-01  +3.3292e-01  1.26e-01  6.98e-04  3.49e-02  1.86e-04  2.29e-03  5.51e-01  
  9  +1.9714e-01  +2.8442e-01  8.73e-02  4.62e-04  2.35e-02  1.26e-04  1.57e-03  3.99e-01  
 10  +1.8836e-01  +2.4203e-01  5.37e-02  2.76e-04  1.41e-02  7.33e-05  9.79e-04  4.54e-01  
 11  +1.7653e-01  +1.8612e-01  9.59e-03  4.85e-05  2.47e-03  1.03e-05  1.85e-04  8.67e-01  
 12  +1.7402e-01  +1.7516e-01  1.14e-03  5.84e-06  2.94e-04  1.01e-06  2.35e-05  8.88e-01  
 13  +1.7369e-01  +1.7382e-01  1.31e-04  6.75e-07  3.38e-05  1.12e-07  2.80e-06  8.95e-01  
 14  +1.7365e-01  +1.7365e-01  1.38e-06  7.13e-09  3.57e-07  1.17e-09  2.97e-08  9.90e-01  
 15  +1.7365e-01  +1.7365e-01  1.38e-08  7.13e-11  3.57e-09  1.17e-11  2.97e-10  9.90e-01  
 16  +1.7365e-01  +1.7365e-01  1.38e-10  7.13e-13  3.57e-11  1.17e-13  2.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7853ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 1.737e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 4.031e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 8.743e-03 seconds
Iteration: 19, Objective: 0.1737
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 456 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 3.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 456
  constraints   = 706
  nnz(P)        = 0
  nnz(A)        = 5291
  cones (total) = 1
    : Nonnegative = 1,  numel = 706

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9662e-01  +2.5316e+02  2.53e+02  9.47e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.0534e-01  +5.6215e+01  5.57e+01  4.28e-01  1.35e+01  3.94e-03  5.75e-01  5.82e-01  
  2  +4.5772e-01  +8.4963e+00  8.04e+00  1.08e-01  4.80e+00  2.39e-02  2.22e-01  9.90e-01  
  3  +4.1279e-01  +2.7841e+00  2.37e+00  2.40e-02  1.20e+00  1.08e-02  5.66e-02  7.64e-01  
  4  +3.4951e-01  +2.4255e+00  2.08e+00  1.33e-02  6.69e-01  1.13e-02  3.19e-02  5.59e-01  
  5  +2.9953e-01  +1.2015e+00  9.02e-01  5.61e-03  2.79e-01  2.32e-03  1.45e-02  6.85e-01  
  6  +2.3810e-01  +5.0897e-01  2.71e-01  1.67e-03  8.12e-02  4.66e-04  4.93e-03  7.51e-01  
  7  +2.0847e-01  +3.6166e-01  1.53e-01  8.69e-04  4.30e-02  2.49e-04  2.76e-03  5.48e-01  
  8  +1.9510e-01  +2.9684e-01  1.02e-01  5.41e-04  2.76e-02  1.54e-04  1.79e-03  5.11e-01  
  9  +1.8580e-01  +2.5490e-01  6.91e-02  3.48e-04  1.81e-02  1.02e-04  1.20e-03  3.92e-01  
 10  +1.7176e-01  +1.9060e-01  1.88e-02  9.09e-05  4.74e-03  2.25e-05  3.38e-04  8.13e-01  
 11  +1.6675e-01  +1.6893e-01  2.18e-03  1.06e-05  5.47e-04  1.85e-06  4.18e-05  9.40e-01  
 12  +1.6606e-01  +1.6636e-01  2.97e-04  1.46e-06  7.46e-05  2.36e-07  6.02e-06  8.79e-01  
 13  +1.6595e-01  +1.6597e-01  1.20e-05  5.90e-08  3.01e-06  9.53e-09  2.46e-07  9.79e-01  
 14  +1.6595e-01  +1.6595e-01  1.20e-07  5.91e-10  3.01e-08  9.54e-11  2.46e-09  9.90e-01  
 15  +1.6595e-01  +1.6595e-01  1.20e-09  5.91e-12  3.01e-10  9.54e-13  2.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.0579ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 1.660e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 3.005e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 8.695e-03 seconds
Iteration: 20, Objective: 0.1660
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:01 PM: Your problem has 466 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:01 PM: Finished problem compilation (took 3.682e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 466
  constraints   = 716
  nnz(P)        = 0
  nnz(A)        = 5341
  cones (total) = 1
    : Nonnegative = 1,  numel = 716

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9658e-01  +2.5317e+02  2.53e+02  9.47e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.0247e-01  +5.6268e+01  5.58e+01  4.28e-01  1.33e+01  3.95e-03  5.73e-01  5.82e-01  
  2  +4.5409e-01  +8.5388e+00  8.08e+00  1.07e-01  4.70e+00  2.40e-02  2.20e-01  9.90e-01  
  3  +4.0919e-01  +2.8555e+00  2.45e+00  2.46e-02  1.22e+00  1.08e-02  5.82e-02  7.54e-01  
  4  +3.4761e-01  +2.4904e+00  2.14e+00  1.38e-02  6.94e-01  1.14e-02  3.34e-02  5.40e-01  
  5  +2.9388e-01  +1.1522e+00  8.58e-01  5.33e-03  2.63e-01  2.11e-03  1.39e-02  7.12e-01  
  6  +2.3153e-01  +4.8503e-01  2.54e-01  1.57e-03  7.54e-02  4.34e-04  4.65e-03  7.55e-01  
  7  +2.0487e-01  +3.5507e-01  1.50e-01  8.56e-04  4.18e-02  2.42e-04  2.74e-03  5.31e-01  
  8  +1.9357e-01  +3.0239e-01  1.09e-01  5.79e-04  2.92e-02  1.67e-04  1.91e-03  4.58e-01  
  9  +1.8371e-01  +2.5719e-01  7.35e-02  3.70e-04  1.90e-02  1.11e-04  1.27e-03  3.82e-01  
 10  +1.7250e-01  +2.0512e-01  3.26e-02  1.59e-04  8.18e-03  4.31e-05  5.81e-04  6.33e-01  
 11  +1.6446e-01  +1.6914e-01  4.68e-03  2.27e-05  1.16e-03  4.64e-06  8.89e-05  8.92e-01  
 12  +1.6314e-01  +1.6381e-01  6.72e-04  3.30e-06  1.66e-04  5.71e-07  1.38e-05  8.89e-01  
 13  +1.6291e-01  +1.6294e-01  2.84e-05  1.40e-07  7.03e-06  2.29e-08  5.98e-07  9.68e-01  
 14  +1.6290e-01  +1.6290e-01  2.85e-07  1.40e-09  7.05e-08  2.29e-10  6.01e-09  9.90e-01  
 15  +1.6290e-01  +1.6290e-01  2.85e-09  1.40e-11  7.06e-10  2.29e-12  6.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8959ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:01 PM: Optimal value: 1.629e-01
(CVXPY) Sep 20 03:17:01 PM: Compilation took 3.682e-03 seconds
(CVXPY) Sep 20 03:17:01 PM: Solver (including time spent in interface) took 8.326e-03 seconds
Iteration: 21, Objective: 0.1629
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:02 PM: Your problem has 476 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 476
  constraints   = 726
  nnz(P)        = 0
  nnz(A)        = 5414
  cones (total) = 1
    : Nonnegative = 1,  numel = 726

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9657e-01  +2.5312e+02  2.53e+02  9.48e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +4.9813e-01  +5.6312e+01  5.58e+01  4.26e-01  1.32e+01  3.97e-03  5.71e-01  5.83e-01  
  2  +4.4911e-01  +8.7258e+00  8.28e+00  1.07e-01  4.68e+00  2.41e-02  2.20e-01  9.83e-01  
  3  +4.0261e-01  +2.9120e+00  2.51e+00  2.49e-02  1.23e+00  1.09e-02  5.87e-02  7.46e-01  
  4  +3.3964e-01  +2.4859e+00  2.15e+00  1.40e-02  6.95e-01  1.11e-02  3.38e-02  5.27e-01  
  5  +2.8100e-01  +9.0413e-01  6.23e-01  4.02e-03  1.95e-01  1.58e-04  1.06e-02  8.53e-01  
  6  +2.3074e-01  +5.3426e-01  3.04e-01  1.88e-03  9.05e-02  1.29e-04  5.53e-03  6.08e-01  
  7  +1.9772e-01  +3.3539e-01  1.38e-01  7.94e-04  3.86e-02  7.59e-05  2.57e-03  6.46e-01  
  8  +1.8660e-01  +2.8244e-01  9.58e-02  5.06e-04  2.58e-02  6.79e-05  1.69e-03  5.87e-01  
  9  +1.7753e-01  +2.3734e-01  5.98e-02  3.06e-04  1.56e-02  4.44e-05  1.07e-03  5.11e-01  
 10  +1.6442e-01  +1.7562e-01  1.12e-02  5.56e-05  2.84e-03  7.92e-06  2.09e-04  8.82e-01  
 11  +1.6209e-01  +1.6553e-01  3.44e-03  1.72e-05  8.73e-04  2.35e-06  6.86e-05  7.01e-01  
 12  +1.6119e-01  +1.6174e-01  5.57e-04  2.80e-06  1.41e-04  3.77e-07  1.17e-05  8.70e-01  
 13  +1.6101e-01  +1.6102e-01  1.64e-05  8.26e-08  4.14e-06  1.07e-08  3.51e-07  9.71e-01  
 14  +1.6100e-01  +1.6100e-01  1.64e-07  8.27e-10  4.15e-08  1.07e-10  3.52e-09  9.90e-01  
 15  +1.6100e-01  +1.6100e-01  1.64e-09  8.27e-12  4.15e-10  1.08e-12  3.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8966ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:02 PM: Optimal value: 1.610e-01
(CVXPY) Sep 20 03:17:02 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 03:17:02 PM: Solver (including time spent in interface) took 7.864e-03 seconds
Iteration: 22, Objective: 0.1610
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:02 PM: Your problem has 486 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Finished problem compilation (took 3.739e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 486
  constraints   = 736
  nnz(P)        = 0
  nnz(A)        = 5510
  cones (total) = 1
    : Nonnegative = 1,  numel = 736

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9657e-01  +2.5311e+02  2.53e+02  9.48e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +4.9761e-01  +5.6254e+01  5.58e+01  4.26e-01  1.30e+01  3.98e-03  5.70e-01  5.84e-01  
  2  +4.4857e-01  +9.7567e+00  9.31e+00  1.18e-01  5.02e+00  2.36e-02  2.38e-01  9.29e-01  
  3  +4.0256e-01  +2.8979e+00  2.50e+00  2.51e-02  1.23e+00  9.62e-03  5.93e-02  7.75e-01  
  4  +3.3837e-01  +2.4761e+00  2.14e+00  1.42e-02  6.98e-01  9.72e-03  3.44e-02  5.28e-01  
  5  +2.8665e-01  +1.0496e+00  7.63e-01  5.06e-03  2.45e-01  8.94e-05  1.34e-02  8.66e-01  
  6  +2.2566e-01  +4.5913e-01  2.33e-01  1.48e-03  7.05e-02  7.76e-05  4.47e-03  7.60e-01  
  7  +1.9932e-01  +3.3787e-01  1.39e-01  8.04e-04  3.91e-02  6.54e-05  2.60e-03  5.57e-01  
  8  +1.8661e-01  +2.8140e-01  9.48e-02  5.03e-04  2.55e-02  6.27e-05  1.68e-03  6.12e-01  
  9  +1.7268e-01  +2.1469e-01  4.20e-02  2.14e-04  1.09e-02  2.86e-05  7.65e-04  6.32e-01  
 10  +1.6312e-01  +1.6956e-01  6.44e-03  3.25e-05  1.65e-03  4.58e-06  1.25e-04  9.34e-01  
 11  +1.6179e-01  +1.6415e-01  2.37e-03  1.20e-05  6.04e-04  1.68e-06  4.88e-05  6.75e-01  
 12  +1.6125e-01  +1.6196e-01  7.17e-04  3.67e-06  1.83e-04  5.21e-07  1.53e-05  7.71e-01  
 13  +1.6101e-01  +1.6105e-01  3.58e-05  1.84e-07  9.14e-06  2.54e-08  7.78e-07  9.51e-01  
 14  +1.6100e-01  +1.6100e-01  3.60e-07  1.85e-09  9.19e-08  2.56e-10  7.83e-09  9.90e-01  
 15  +1.6100e-01  +1.6100e-01  3.61e-09  1.85e-11  9.20e-10  2.56e-12  7.84e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4946ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:02 PM: Optimal value: 1.610e-01
(CVXPY) Sep 20 03:17:02 PM: Compilation took 3.739e-03 seconds
(CVXPY) Sep 20 03:17:02 PM: Solver (including time spent in interface) took 9.569e-03 seconds
Iteration: 23, Objective: 0.1610
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:02 PM: Your problem has 487 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Finished problem compilation (took 4.183e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 487
  constraints   = 737
  nnz(P)        = 0
  nnz(A)        = 5520
  cones (total) = 1
    : Nonnegative = 1,  numel = 737

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9657e-01  +2.5311e+02  2.53e+02  9.48e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +4.9715e-01  +5.6294e+01  5.58e+01  4.26e-01  1.30e+01  3.98e-03  5.70e-01  5.84e-01  
  2  +4.4817e-01  +9.9047e+00  9.46e+00  1.20e-01  5.06e+00  2.36e-02  2.40e-01  9.22e-01  
  3  +4.0246e-01  +2.9006e+00  2.50e+00  2.52e-02  1.23e+00  9.52e-03  5.96e-02  7.75e-01  
  4  +3.3834e-01  +2.4784e+00  2.14e+00  1.43e-02  7.01e-01  9.59e-03  3.47e-02  5.28e-01  
  5  +2.8856e-01  +1.1118e+00  8.23e-01  5.46e-03  2.64e-01  5.46e-04  1.44e-02  8.23e-01  
  6  +2.2870e-01  +4.7903e-01  2.50e-01  1.60e-03  7.60e-02  1.60e-04  4.80e-03  7.48e-01  
  7  +2.0103e-01  +3.4933e-01  1.48e-01  8.69e-04  4.21e-02  1.06e-04  2.80e-03  5.59e-01  
  8  +1.8978e-01  +2.9831e-01  1.09e-01  5.90e-04  2.96e-02  8.65e-05  1.96e-03  5.14e-01  
  9  +1.7895e-01  +2.4703e-01  6.81e-02  3.52e-04  1.79e-02  5.45e-05  1.23e-03  4.23e-01  
 10  +1.6704e-01  +1.9077e-01  2.37e-02  1.19e-04  6.05e-03  1.81e-05  4.45e-04  6.82e-01  
 11  +1.6147e-01  +1.6571e-01  4.24e-03  2.12e-05  1.07e-03  2.94e-06  8.50e-05  8.41e-01  
 12  +1.6037e-01  +1.6113e-01  7.59e-04  3.82e-06  1.90e-04  5.34e-07  1.63e-05  8.97e-01  
 13  +1.6011e-01  +1.6014e-01  3.23e-05  1.63e-07  8.08e-06  2.24e-08  7.12e-07  9.72e-01  
 14  +1.6010e-01  +1.6010e-01  3.24e-07  1.64e-09  8.11e-08  2.25e-10  7.16e-09  9.90e-01  
 15  +1.6010e-01  +1.6010e-01  3.25e-09  1.64e-11  8.11e-10  2.25e-12  7.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4983ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:02 PM: Optimal value: 1.601e-01
(CVXPY) Sep 20 03:17:02 PM: Compilation took 4.183e-03 seconds
(CVXPY) Sep 20 03:17:02 PM: Solver (including time spent in interface) took 9.104e-03 seconds
Iteration: 24, Objective: 0.1601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:02 PM: Your problem has 494 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Finished problem compilation (took 6.549e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 494
  constraints   = 744
  nnz(P)        = 0
  nnz(A)        = 5548
  cones (total) = 1
    : Nonnegative = 1,  numel = 744

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9645e-01  +2.5308e+02  2.53e+02  9.48e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +4.9451e-01  +5.6342e+01  5.58e+01  4.27e-01  1.30e+01  3.98e-03  5.69e-01  5.83e-01  
  2  +4.4493e-01  +9.9834e+00  9.54e+00  1.18e-01  5.00e+00  2.39e-02  2.38e-01  9.24e-01  
  3  +3.9715e-01  +2.9920e+00  2.59e+00  2.55e-02  1.24e+00  9.89e-03  6.01e-02  7.73e-01  
  4  +3.2979e-01  +2.4880e+00  2.16e+00  1.42e-02  6.98e-01  9.74e-03  3.44e-02  5.24e-01  
  5  +2.8130e-01  +9.5020e-01  6.69e-01  4.61e-03  2.21e-01  8.51e-05  1.23e-02  8.45e-01  
  6  +2.2426e-01  +4.8797e-01  2.64e-01  1.70e-03  8.08e-02  8.96e-05  5.10e-03  7.02e-01  
  7  +1.9735e-01  +3.4470e-01  1.47e-01  8.79e-04  4.24e-02  6.96e-05  2.84e-03  5.74e-01  
  8  +1.8603e-01  +2.9043e-01  1.04e-01  5.76e-04  2.89e-02  6.38e-05  1.92e-03  5.28e-01  
  9  +1.7547e-01  +2.3925e-01  6.38e-02  3.35e-04  1.70e-02  4.02e-05  1.17e-03  4.46e-01  
 10  +1.6427e-01  +1.8532e-01  2.11e-02  1.08e-04  5.44e-03  1.31e-05  4.02e-04  6.98e-01  
 11  +1.5948e-01  +1.6348e-01  4.01e-03  2.04e-05  1.02e-03  2.40e-06  8.18e-05  8.34e-01  
 12  +1.5846e-01  +1.5919e-01  7.35e-04  3.75e-06  1.86e-04  4.75e-07  1.61e-05  8.87e-01  
 13  +1.5821e-01  +1.5824e-01  2.88e-05  1.47e-07  7.26e-06  1.86e-08  6.43e-07  9.72e-01  
 14  +1.5820e-01  +1.5820e-01  2.88e-07  1.47e-09  7.28e-08  1.87e-10  6.46e-09  9.90e-01  
 15  +1.5820e-01  +1.5820e-01  2.88e-09  1.47e-11  7.28e-10  1.87e-12  6.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.8452ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:02 PM: Optimal value: 1.582e-01
(CVXPY) Sep 20 03:17:02 PM: Compilation took 6.549e-03 seconds
(CVXPY) Sep 20 03:17:02 PM: Solver (including time spent in interface) took 9.731e-03 seconds
Iteration: 25, Objective: 0.1582
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:02 PM: Your problem has 504 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Finished problem compilation (took 4.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 504
  constraints   = 754
  nnz(P)        = 0
  nnz(A)        = 5619
  cones (total) = 1
    : Nonnegative = 1,  numel = 754

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9644e-01  +2.5322e+02  2.53e+02  9.49e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +4.9224e-01  +5.6433e+01  5.59e+01  4.27e-01  1.29e+01  3.99e-03  5.69e-01  5.83e-01  
  2  +4.4125e-01  +9.3801e+00  8.94e+00  1.11e-01  4.66e+00  2.44e-02  2.25e-01  9.58e-01  
  3  +3.9057e-01  +2.9586e+00  2.57e+00  2.46e-02  1.19e+00  1.03e-02  5.81e-02  7.70e-01  
  4  +3.2986e-01  +2.4190e+00  2.09e+00  1.41e-02  6.91e-01  9.59e-03  3.44e-02  4.92e-01  
  5  +2.7946e-01  +9.6760e-01  6.88e-01  4.75e-03  2.28e-01  8.62e-05  1.27e-02  8.55e-01  
  6  +2.2104e-01  +4.7034e-01  2.49e-01  1.61e-03  7.63e-02  8.35e-05  4.84e-03  7.25e-01  
  7  +1.9434e-01  +3.3552e-01  1.41e-01  8.35e-04  4.04e-02  6.55e-05  2.70e-03  5.66e-01  
  8  +1.8238e-01  +2.7978e-01  9.74e-02  5.33e-04  2.69e-02  6.17e-05  1.78e-03  5.90e-01  
  9  +1.6791e-01  +2.0908e-01  4.12e-02  2.16e-04  1.09e-02  2.72e-05  7.72e-04  6.70e-01  
 10  +1.5926e-01  +1.6826e-01  8.99e-03  4.65e-05  2.32e-03  6.41e-06  1.79e-04  8.88e-01  
 11  +1.5749e-01  +1.6108e-01  3.59e-03  1.85e-05  9.17e-04  2.57e-06  7.53e-05  6.67e-01  
 12  +1.5667e-01  +1.5794e-01  1.27e-03  6.49e-06  3.20e-04  9.18e-07  2.76e-05  7.09e-01  
 13  +1.5622e-01  +1.5628e-01  5.49e-05  2.79e-07  1.37e-05  3.77e-08  1.23e-06  9.85e-01  
 14  +1.5620e-01  +1.5620e-01  5.65e-07  2.88e-09  1.41e-07  3.87e-10  1.27e-08  9.90e-01  
 15  +1.5620e-01  +1.5620e-01  5.66e-09  2.88e-11  1.41e-09  3.87e-12  1.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.6236ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:02 PM: Optimal value: 1.562e-01
(CVXPY) Sep 20 03:17:02 PM: Compilation took 4.002e-03 seconds
(CVXPY) Sep 20 03:17:02 PM: Solver (including time spent in interface) took 1.001e-02 seconds
Iteration: 26, Objective: 0.1562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:02 PM: Your problem has 513 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:02 PM: Finished problem compilation (took 4.165e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 763
  nnz(P)        = 0
  nnz(A)        = 5655
  cones (total) = 1
    : Nonnegative = 1,  numel = 763

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9642e-01  +2.5324e+02  2.53e+02  9.49e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +4.8989e-01  +5.6515e+01  5.60e+01  4.28e-01  1.28e+01  4.00e-03  5.69e-01  5.83e-01  
  2  +4.3831e-01  +9.2150e+00  8.78e+00  1.08e-01  4.53e+00  2.45e-02  2.22e-01  9.66e-01  
  3  +3.8692e-01  +2.9697e+00  2.58e+00  2.47e-02  1.19e+00  1.04e-02  5.88e-02  7.63e-01  
  4  +3.2646e-01  +2.4167e+00  2.09e+00  1.43e-02  6.92e-01  9.45e-03  3.50e-02  4.93e-01  
  5  +2.7622e-01  +9.3738e-01  6.61e-01  4.60e-03  2.19e-01  8.48e-05  1.24e-02  8.56e-01  
  6  +2.1968e-01  +4.7886e-01  2.59e-01  1.68e-03  7.91e-02  9.04e-05  5.08e-03  7.12e-01  
  7  +1.9313e-01  +3.3663e-01  1.43e-01  8.54e-04  4.10e-02  6.86e-05  2.78e-03  5.79e-01  
  8  +1.8081e-01  +2.7682e-01  9.60e-02  5.26e-04  2.64e-02  6.26e-05  1.77e-03  6.22e-01  
  9  +1.6765e-01  +2.1020e-01  4.25e-02  2.24e-04  1.12e-02  2.88e-05  8.03e-04  6.60e-01  
 10  +1.5852e-01  +1.6542e-01  6.90e-03  3.60e-05  1.79e-03  5.00e-06  1.38e-04  9.46e-01  
 11  +1.5744e-01  +1.6101e-01  3.57e-03  1.86e-05  9.25e-04  2.64e-06  7.46e-05  5.89e-01  
 12  +1.5658e-01  +1.5766e-01  1.08e-03  5.59e-06  2.76e-04  7.95e-07  2.33e-05  7.50e-01  
 13  +1.5623e-01  +1.5630e-01  7.60e-05  3.95e-07  1.94e-05  5.49e-08  1.68e-06  9.60e-01  
 14  +1.5620e-01  +1.5620e-01  7.89e-07  4.09e-09  2.01e-07  5.68e-10  1.75e-08  9.90e-01  
 15  +1.5620e-01  +1.5620e-01  7.89e-09  4.10e-11  2.01e-09  5.69e-12  1.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6305ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:02 PM: Optimal value: 1.562e-01
(CVXPY) Sep 20 03:17:02 PM: Compilation took 4.165e-03 seconds
(CVXPY) Sep 20 03:17:02 PM: Solver (including time spent in interface) took 9.763e-03 seconds
FULL MODEL:
  Accruacy: 0.82
  Our objective: 0.64

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.164)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.032)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.036)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.048)
 OR (x1 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.036)
 OR (x1 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.024)
 OR (x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.04)
 OR (x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.716721296310425
Best over terms:
  Our final objective: 0.16399999999999995
    Its accruacy: 0.582
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16399999999999995
  Highest accruacy: 0.582
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

