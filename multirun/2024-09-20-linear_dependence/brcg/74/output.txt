Command:
python test_script.py -s linear_dependence -d 2 -n 10000 --seed 21 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6052000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 2.

Computed total variation: 0.6052
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:08 PM: Your problem has 5005 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:08 PM: Finished problem compilation (took 1.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5005
  constraints   = 10005
  nnz(P)        = 0
  nnz(A)        = 25005
  cones (total) = 1
    : Nonnegative = 1,  numel = 10005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9994e-01  +5.0020e+03  5.00e+03  9.83e-01  7.29e+01  1.00e+00  1.00e+00   ------   
  1  +6.3730e-01  +8.7385e+02  8.73e+02  2.67e-01  3.44e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5849e-01  +1.6180e+02  1.61e+02  1.31e-01  1.95e+01  5.31e-03  2.13e-01  5.94e-01  
  3  +5.0111e-01  +7.0067e+00  6.51e+00  4.03e-02  5.66e+00  3.50e-04  2.05e-01  2.47e-01  
  4  +4.9921e-01  +2.0641e+00  1.56e+00  8.48e-03  1.28e+00  3.35e-04  3.18e-02  9.77e-01  
  5  +4.9159e-01  +2.4797e+00  1.99e+00  2.81e-03  4.53e-01  2.11e-03  6.03e-03  9.01e-01  
  6  +4.4900e-01  +2.1828e+00  1.73e+00  5.09e-04  8.27e-02  1.00e-02  1.04e-03  8.29e-01  
  7  +3.9770e-01  +1.7524e+00  1.35e+00  3.29e-04  5.25e-02  7.88e-03  7.03e-04  3.74e-01  
  8  +2.9800e-01  +9.0727e-01  6.09e-01  1.71e-04  2.59e-02  5.37e-05  4.67e-04  4.92e-01  
  9  +2.1964e-01  +3.4703e-01  1.27e-01  3.91e-05  5.72e-03  2.93e-07  1.79e-04  7.36e-01  
 10  +1.9877e-01  +2.0579e-01  7.02e-03  2.17e-06  3.15e-04  5.40e-08  1.33e-05  9.44e-01  
 11  +1.9751e-01  +1.9758e-01  7.18e-05  2.21e-08  3.22e-06  5.73e-10  1.41e-07  9.89e-01  
 12  +1.9750e-01  +1.9750e-01  7.18e-07  2.21e-10  3.22e-08  5.73e-12  1.41e-09  9.90e-01  
 13  +1.9750e-01  +1.9750e-01  7.18e-09  2.21e-12  3.22e-10  5.73e-14  1.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.2277ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:08 PM: Optimal value: 1.975e-01
(CVXPY) Sep 20 03:04:08 PM: Compilation took 1.249e-02 seconds
(CVXPY) Sep 20 03:04:08 PM: Solver (including time spent in interface) took 2.718e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.1975
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:08 PM: Your problem has 5006 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:08 PM: Finished problem compilation (took 4.443e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5006
  constraints   = 10006
  nnz(P)        = 0
  nnz(A)        = 26981
  cones (total) = 1
    : Nonnegative = 1,  numel = 10006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +5.0021e+03  5.00e+03  9.83e-01  7.54e+01  1.00e+00  1.00e+00   ------   
  1  +6.3718e-01  +8.7432e+02  8.74e+02  2.67e-01  3.56e+01  4.49e-03  3.89e-01  7.25e-01  
  2  +5.5843e-01  +1.6169e+02  1.61e+02  1.31e-01  2.02e+01  5.33e-03  2.13e-01  5.95e-01  
  3  +5.0108e-01  +6.9466e+00  6.45e+00  3.99e-02  5.81e+00  3.48e-04  2.05e-01  2.51e-01  
  4  +4.9964e-01  +3.3013e+00  2.80e+00  1.57e-02  2.41e+00  3.45e-04  6.14e-02  8.05e-01  
  5  +4.7234e-01  +4.3674e+00  3.90e+00  1.88e-03  3.15e-01  6.64e-03  3.83e-03  9.56e-01  
  6  +4.0003e-01  +2.6767e+00  2.28e+00  4.33e-04  7.24e-02  1.16e-02  8.96e-04  7.81e-01  
  7  +3.9740e-01  +2.6104e+00  2.21e+00  4.31e-04  7.19e-02  1.09e-02  8.96e-04  4.29e-03  
  8  +3.4937e-01  +1.4898e+00  1.14e+00  3.45e-04  5.53e-02  5.91e-05  8.56e-04  2.18e-01  
  9  +2.6305e-01  +8.0905e-01  5.46e-01  1.49e-04  2.32e-02  2.53e-05  4.47e-04  5.90e-01  
 10  +2.0415e-01  +2.5178e-01  4.76e-02  1.46e-05  2.20e-03  3.75e-06  7.71e-05  9.90e-01  
 11  +1.9763e-01  +1.9864e-01  1.01e-03  3.10e-07  4.67e-05  9.33e-08  1.96e-06  9.80e-01  
 12  +1.9750e-01  +1.9751e-01  1.00e-05  3.09e-09  4.65e-07  9.31e-10  1.96e-08  9.90e-01  
 13  +1.9750e-01  +1.9750e-01  1.00e-07  3.09e-11  4.65e-09  9.30e-12  1.96e-10  9.90e-01  
 14  +1.9750e-01  +1.9750e-01  1.00e-09  3.09e-13  4.65e-11  9.30e-14  1.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.1066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:08 PM: Optimal value: 1.975e-01
(CVXPY) Sep 20 03:04:08 PM: Compilation took 4.443e-03 seconds
(CVXPY) Sep 20 03:04:08 PM: Solver (including time spent in interface) took 3.312e-02 seconds
Iteration: 2, Objective: 0.1975
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:08 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:08 PM: Finished problem compilation (took 8.699e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 28987
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +5.0021e+03  5.00e+03  9.83e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +6.2707e-01  +9.0183e+02  9.01e+02  2.88e-01  3.89e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5797e-01  +1.6251e+02  1.62e+02  1.33e-01  2.11e+01  6.02e-03  2.16e-01  6.33e-01  
  3  +5.0129e-01  +7.5219e+00  7.02e+00  4.30e-02  6.46e+00  2.73e-06  2.07e-01  2.73e-01  
  4  +4.9972e-01  +2.9884e+00  2.49e+00  1.42e-02  2.26e+00  3.50e-06  5.90e-02  8.16e-01  
  5  +4.8681e-01  +5.2108e+00  4.72e+00  3.92e-03  6.80e-01  4.74e-05  8.08e-03  9.90e-01  
  6  +4.2272e-01  +3.0912e+00  2.67e+00  5.24e-04  9.11e-02  1.63e-04  1.07e-03  8.77e-01  
  7  +3.6608e-01  +1.9799e+00  1.61e+00  3.91e-04  6.61e-02  7.16e-05  8.74e-04  5.07e-01  
  8  +2.8153e-01  +1.0270e+00  7.45e-01  1.99e-04  3.23e-02  3.63e-05  5.54e-04  6.24e-01  
  9  +2.1119e-01  +2.8623e-01  7.50e-02  2.29e-05  3.58e-03  2.30e-06  1.10e-04  9.65e-01  
 10  +1.9841e-01  +2.0366e-01  5.25e-03  1.62e-06  2.52e-04  2.14e-07  1.01e-05  9.31e-01  
 11  +1.9751e-01  +1.9756e-01  5.39e-05  1.66e-08  2.59e-06  2.22e-09  1.06e-07  9.90e-01  
 12  +1.9750e-01  +1.9750e-01  5.39e-07  1.66e-10  2.59e-08  2.21e-11  1.06e-09  9.90e-01  
 13  +1.9750e-01  +1.9750e-01  5.39e-09  1.66e-12  2.59e-10  2.21e-13  1.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.9298ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:09 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:09 PM: Optimal value: 1.975e-01
(CVXPY) Sep 20 03:04:09 PM: Compilation took 8.699e-03 seconds
(CVXPY) Sep 20 03:04:09 PM: Solver (including time spent in interface) took 2.935e-02 seconds
FULL MODEL:
  Accruacy: 0.8026
  Our objective: 0.6052000000000001

IF 
    (x0 = 0) <-- (term's our objective: 0.6052)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.953791618347168
Best over terms:
  Our final objective: 0.6052000000000001
    Its accruacy: 0.8026
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.6052000000000001
  Highest accruacy: 0.8026
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

