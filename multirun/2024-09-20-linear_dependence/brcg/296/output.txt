Command:
python test_script.py -s linear_dependence -d 8 -n 500 --seed 56 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 8.

Computed total variation: 0.556
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:52 PM: Your problem has 267 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:52 PM: Finished problem compilation (took 5.087e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 267
  constraints   = 517
  nnz(P)        = 0
  nnz(A)        = 2767
  cones (total) = 1
    : Nonnegative = 1,  numel = 517

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +2.5108e+02  2.51e+02  9.37e-01  2.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.8328e-01  +5.3893e+01  5.33e+01  3.95e-01  1.49e+01  3.81e-03  5.65e-01  5.98e-01  
  2  +5.3105e-01  +6.4218e+00  5.89e+00  1.23e-01  5.87e+00  1.52e-02  2.50e-01  9.45e-01  
  3  +5.0119e-01  +1.3289e+00  8.28e-01  2.53e-02  1.19e+00  3.05e-05  1.76e-01  8.92e-01  
  4  +4.9873e-01  +7.3406e-01  2.35e-01  6.88e-03  3.34e-01  2.07e-05  3.87e-02  8.26e-01  
  5  +4.8211e-01  +6.7003e-01  1.88e-01  1.61e-03  7.99e-02  1.05e-04  5.08e-03  8.87e-01  
  6  +4.6627e-01  +5.6390e-01  9.76e-02  6.60e-04  3.25e-02  5.76e-05  2.21e-03  6.04e-01  
  7  +4.5641e-01  +5.2238e-01  6.60e-02  3.51e-04  1.73e-02  4.44e-05  1.27e-03  5.60e-01  
  8  +4.4516e-01  +4.6985e-01  2.47e-02  1.17e-04  5.72e-03  1.82e-05  4.70e-04  9.90e-01  
  9  +4.3875e-01  +4.4087e-01  2.12e-03  8.98e-06  4.41e-04  1.43e-06  4.03e-05  9.20e-01  
 10  +4.3811e-01  +4.3813e-01  2.35e-05  9.84e-08  4.83e-06  1.62e-08  4.49e-07  9.90e-01  
 11  +4.3810e-01  +4.3810e-01  2.35e-07  9.84e-10  4.83e-08  1.62e-10  4.49e-09  9.90e-01  
 12  +4.3810e-01  +4.3810e-01  2.35e-09  9.84e-12  4.83e-10  1.62e-12  4.50e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9314ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:52 PM: Optimal value: 4.381e-01
(CVXPY) Sep 20 03:13:52 PM: Compilation took 5.087e-03 seconds
(CVXPY) Sep 20 03:13:52 PM: Solver (including time spent in interface) took 3.004e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:52 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:52 PM: Finished problem compilation (took 2.904e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 3225
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +2.5126e+02  2.51e+02  9.38e-01  2.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.8087e-01  +5.3946e+01  5.34e+01  3.98e-01  1.52e+01  3.81e-03  5.66e-01  5.98e-01  
  2  +5.2797e-01  +6.0998e+00  5.57e+00  1.16e-01  5.65e+00  1.57e-02  2.38e-01  9.82e-01  
  3  +5.0160e-01  +1.5513e+00  1.05e+00  3.29e-02  1.59e+00  1.48e-03  1.54e-01  8.77e-01  
  4  +4.9265e-01  +9.7838e-01  4.86e-01  9.08e-03  4.62e-01  2.17e-03  2.88e-02  8.75e-01  
  5  +4.6567e-01  +8.1507e-01  3.49e-01  2.48e-03  1.27e-01  4.33e-03  7.57e-03  7.69e-01  
  6  +4.4347e-01  +6.6858e-01  2.25e-01  1.29e-03  6.55e-02  2.02e-03  4.50e-03  5.37e-01  
  7  +4.1864e-01  +5.0403e-01  8.54e-02  4.53e-04  2.27e-02  1.97e-05  1.77e-03  8.97e-01  
  8  +4.0449e-01  +4.1568e-01  1.12e-02  5.84e-05  2.92e-03  2.89e-06  2.55e-04  8.78e-01  
  9  +4.0255e-01  +4.0405e-01  1.51e-03  7.96e-06  3.97e-04  3.70e-07  3.90e-05  8.70e-01  
 10  +4.0221e-01  +4.0227e-01  5.95e-05  3.16e-07  1.57e-05  1.99e-08  1.81e-06  9.75e-01  
 11  +4.0220e-01  +4.0220e-01  6.18e-07  3.28e-09  1.63e-07  2.04e-10  1.92e-08  9.90e-01  
 12  +4.0220e-01  +4.0220e-01  6.18e-09  3.28e-11  1.63e-09  2.04e-12  1.92e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1703ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:52 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 03:13:52 PM: Compilation took 2.904e-03 seconds
(CVXPY) Sep 20 03:13:52 PM: Solver (including time spent in interface) took 3.059e-03 seconds
Iteration: 2, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:52 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:52 PM: Finished problem compilation (took 3.027e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 3704
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +2.5129e+02  2.51e+02  9.39e-01  2.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.7925e-01  +5.4093e+01  5.35e+01  4.03e-01  1.55e+01  3.81e-03  5.70e-01  5.96e-01  
  2  +5.2642e-01  +6.0954e+00  5.57e+00  1.17e-01  5.73e+00  1.62e-02  2.39e-01  9.90e-01  
  3  +5.0302e-01  +1.5919e+00  1.09e+00  3.55e-02  1.78e+00  1.59e-03  1.29e-01  8.59e-01  
  4  +4.9385e-01  +1.2567e+00  7.63e-01  1.19e-02  6.27e-01  2.85e-03  3.33e-02  8.38e-01  
  5  +4.7129e-01  +1.0322e+00  5.61e-01  3.91e-03  2.09e-01  4.55e-03  1.09e-02  6.87e-01  
  6  +4.5636e-01  +8.9862e-01  4.42e-01  2.47e-03  1.31e-01  3.29e-03  7.12e-03  4.78e-01  
  7  +4.3771e-01  +7.4206e-01  3.04e-01  1.53e-03  8.03e-02  1.25e-03  4.59e-03  6.17e-01  
  8  +4.0482e-01  +5.1583e-01  1.11e-01  5.18e-04  2.70e-02  1.24e-05  1.69e-03  9.47e-01  
  9  +3.9063e-01  +4.4721e-01  5.66e-02  2.46e-04  1.29e-02  1.19e-05  8.18e-04  5.64e-01  
 10  +3.8041e-01  +4.0134e-01  2.09e-02  8.77e-05  4.62e-03  6.19e-06  2.96e-04  6.71e-01  
 11  +3.7681e-01  +3.8599e-01  9.18e-03  3.78e-05  2.00e-03  3.61e-06  1.28e-04  6.15e-01  
 12  +3.7459e-01  +3.7665e-01  2.06e-03  8.38e-06  4.46e-04  1.60e-06  2.83e-05  8.85e-01  
 13  +3.7389e-01  +3.7394e-01  4.47e-05  1.81e-07  9.66e-06  4.43e-08  6.14e-07  9.90e-01  
 14  +3.7388e-01  +3.7388e-01  4.47e-07  1.82e-09  9.67e-08  4.44e-10  6.15e-09  9.90e-01  
 15  +3.7388e-01  +3.7388e-01  4.47e-09  1.82e-11  9.67e-10  4.44e-12  6.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8085ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:52 PM: Optimal value: 3.739e-01
(CVXPY) Sep 20 03:13:52 PM: Compilation took 3.027e-03 seconds
(CVXPY) Sep 20 03:13:52 PM: Solver (including time spent in interface) took 3.002e-03 seconds
Iteration: 3, Objective: 0.3739
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 297 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 3.734e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 297
  constraints   = 547
  nnz(P)        = 0
  nnz(A)        = 3938
  cones (total) = 1
    : Nonnegative = 1,  numel = 547

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9881e-01  +2.5154e+02  2.51e+02  9.39e-01  2.52e+01  1.00e+00  1.02e+00   ------   
  1  +5.7521e-01  +5.4248e+01  5.37e+01  4.06e-01  1.54e+01  3.81e-03  5.72e-01  5.95e-01  
  2  +5.2394e-01  +6.2290e+00  5.71e+00  1.17e-01  5.70e+00  1.66e-02  2.38e-01  9.90e-01  
  3  +5.0397e-01  +1.4239e+00  9.20e-01  2.76e-02  1.43e+00  2.07e-03  7.99e-02  8.61e-01  
  4  +4.9893e-01  +1.4509e+00  9.52e-01  1.46e-02  7.81e-01  3.83e-03  3.73e-02  5.73e-01  
  5  +4.7794e-01  +1.2907e+00  8.13e-01  5.41e-03  2.94e-01  6.32e-03  1.38e-02  7.00e-01  
  6  +4.5680e-01  +1.1100e+00  6.53e-01  3.44e-03  1.85e-01  5.01e-03  9.15e-03  4.29e-01  
  7  +4.3120e-01  +9.0096e-01  4.70e-01  2.23e-03  1.19e-01  3.02e-03  6.24e-03  4.07e-01  
  8  +3.8393e-01  +5.4309e-01  1.59e-01  7.60e-04  3.97e-02  2.60e-05  2.47e-03  8.47e-01  
  9  +3.6917e-01  +4.7265e-01  1.03e-01  4.70e-04  2.45e-02  2.34e-05  1.58e-03  4.04e-01  
 10  +3.4863e-01  +3.7896e-01  3.03e-02  1.29e-04  6.70e-03  2.71e-05  4.74e-04  9.37e-01  
 11  +3.3978e-01  +3.4357e-01  3.80e-03  1.57e-05  8.14e-04  3.32e-06  6.06e-05  8.89e-01  
 12  +3.3864e-01  +3.3902e-01  3.78e-04  1.55e-06  7.99e-05  3.17e-07  6.12e-06  9.01e-01  
 13  +3.3850e-01  +3.3851e-01  9.69e-06  3.85e-08  1.98e-06  8.55e-09  1.60e-07  9.90e-01  
 14  +3.3850e-01  +3.3850e-01  9.68e-08  3.84e-10  1.98e-08  8.55e-11  1.60e-09  9.90e-01  
 15  +3.3850e-01  +3.3850e-01  9.68e-10  3.84e-12  1.98e-10  8.55e-13  1.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.4973ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 3.385e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 3.734e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 3.057e-03 seconds
Iteration: 4, Objective: 0.3385
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 307 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 4.879e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 307
  constraints   = 557
  nnz(P)        = 0
  nnz(A)        = 4086
  cones (total) = 1
    : Nonnegative = 1,  numel = 557

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9871e-01  +2.5174e+02  2.51e+02  9.40e-01  2.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.7261e-01  +5.4305e+01  5.37e+01  4.07e-01  1.53e+01  3.82e-03  5.72e-01  5.95e-01  
  2  +5.2206e-01  +6.3198e+00  5.80e+00  1.17e-01  5.63e+00  1.69e-02  2.37e-01  9.90e-01  
  3  +5.0415e-01  +1.4837e+00  9.80e-01  2.60e-02  1.36e+00  2.87e-03  7.00e-02  8.00e-01  
  4  +4.9759e-01  +1.5871e+00  1.09e+00  1.37e-02  7.41e-01  5.40e-03  3.39e-02  6.14e-01  
  5  +4.7431e-01  +1.3838e+00  9.10e-01  5.89e-03  3.20e-01  7.01e-03  1.47e-02  6.69e-01  
  6  +4.4698e-01  +1.1948e+00  7.48e-01  3.53e-03  1.90e-01  6.43e-03  9.14e-03  4.48e-01  
  7  +4.0552e-01  +7.8158e-01  3.76e-01  2.00e-03  1.05e-01  5.04e-05  5.91e-03  6.68e-01  
  8  +3.5815e-01  +4.9806e-01  1.40e-01  6.67e-04  3.48e-02  3.48e-05  2.20e-03  6.85e-01  
  9  +3.3638e-01  +3.9913e-01  6.28e-02  2.86e-04  1.52e-02  2.79e-05  9.96e-04  6.56e-01  
 10  +3.2289e-01  +3.4192e-01  1.90e-02  8.43e-05  4.54e-03  1.02e-05  3.11e-04  7.42e-01  
 11  +3.1749e-01  +3.1924e-01  1.74e-03  7.66e-06  4.13e-04  9.18e-07  2.93e-05  9.09e-01  
 12  +3.1698e-01  +3.1719e-01  2.13e-04  9.17e-07  4.96e-05  1.42e-07  3.65e-06  9.22e-01  
 13  +3.1690e-01  +3.1690e-01  2.54e-06  1.08e-08  5.86e-07  1.74e-09  4.40e-08  9.90e-01  
 14  +3.1690e-01  +3.1690e-01  2.54e-08  1.08e-10  5.86e-09  1.74e-11  4.40e-10  9.90e-01  
 15  +3.1690e-01  +3.1690e-01  2.54e-10  1.08e-12  5.86e-11  1.76e-13  4.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6224ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 3.169e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 4.879e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 4.066e-03 seconds
Iteration: 5, Objective: 0.3169
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 317 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 2.990e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 317
  constraints   = 567
  nnz(P)        = 0
  nnz(A)        = 4196
  cones (total) = 1
    : Nonnegative = 1,  numel = 567

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9864e-01  +2.5179e+02  2.51e+02  9.40e-01  2.49e+01  1.00e+00  1.02e+00   ------   
  1  +5.7031e-01  +5.4326e+01  5.38e+01  4.09e-01  1.51e+01  3.82e-03  5.72e-01  5.95e-01  
  2  +5.2053e-01  +6.4168e+00  5.90e+00  1.16e-01  5.53e+00  1.71e-02  2.35e-01  9.90e-01  
  3  +5.0409e-01  +1.7367e+00  1.23e+00  2.91e-02  1.52e+00  4.17e-03  7.45e-02  7.24e-01  
  4  +4.8852e-01  +1.8280e+00  1.34e+00  1.17e-02  6.32e-01  9.16e-03  2.84e-02  7.16e-01  
  5  +4.5602e-01  +1.3752e+00  9.19e-01  5.37e-03  2.89e-01  6.86e-03  1.37e-02  6.30e-01  
  6  +4.3260e-01  +1.1521e+00  7.20e-01  3.75e-03  2.00e-01  4.30e-03  9.91e-03  4.17e-01  
  7  +3.8211e-01  +6.8988e-01  3.08e-01  1.62e-03  8.38e-02  3.72e-05  4.93e-03  7.94e-01  
  8  +3.4925e-01  +5.0530e-01  1.56e-01  7.76e-04  3.99e-02  4.84e-05  2.62e-03  5.87e-01  
  9  +3.2273e-01  +3.7023e-01  4.75e-02  2.28e-04  1.17e-02  1.81e-05  8.60e-04  7.22e-01  
 10  +3.1148e-01  +3.1968e-01  8.20e-03  3.80e-05  1.96e-03  3.66e-06  1.59e-04  8.47e-01  
 11  +3.0907e-01  +3.0930e-01  2.22e-04  1.02e-06  5.27e-05  1.17e-07  4.44e-06  9.81e-01  
 12  +3.0900e-01  +3.0900e-01  2.41e-06  1.11e-08  5.71e-07  1.25e-09  4.84e-08  9.89e-01  
 13  +3.0900e-01  +3.0900e-01  2.41e-08  1.11e-10  5.72e-09  1.25e-11  4.85e-10  9.90e-01  
 14  +3.0900e-01  +3.0900e-01  2.41e-10  1.11e-12  5.72e-11  1.25e-13  4.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6527ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 3.090e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 2.990e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 4.533e-03 seconds
Iteration: 6, Objective: 0.3090
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 327 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 7.212e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 327
  constraints   = 577
  nnz(P)        = 0
  nnz(A)        = 4290
  cones (total) = 1
    : Nonnegative = 1,  numel = 577

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5188e+02  2.51e+02  9.41e-01  2.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.6871e-01  +5.4318e+01  5.37e+01  4.09e-01  1.48e+01  3.83e-03  5.70e-01  5.96e-01  
  2  +5.1923e-01  +6.4578e+00  5.94e+00  1.16e-01  5.41e+00  1.72e-02  2.33e-01  9.90e-01  
  3  +5.0320e-01  +1.7953e+00  1.29e+00  2.84e-02  1.48e+00  4.70e-03  7.13e-02  7.18e-01  
  4  +4.8768e-01  +1.8235e+00  1.34e+00  1.24e-02  6.68e-01  9.10e-03  3.01e-02  6.54e-01  
  5  +4.4780e-01  +1.3128e+00  8.65e-01  4.81e-03  2.57e-01  7.54e-03  1.22e-02  6.94e-01  
  6  +4.1995e-01  +1.0220e+00  6.02e-01  3.23e-03  1.70e-01  3.24e-03  8.73e-03  4.52e-01  
  7  +3.6939e-01  +6.5125e-01  2.82e-01  1.47e-03  7.53e-02  2.32e-04  4.53e-03  7.86e-01  
  8  +3.3707e-01  +4.6424e-01  1.27e-01  6.35e-04  3.23e-02  9.69e-05  2.16e-03  5.78e-01  
  9  +3.1872e-01  +3.7211e-01  5.34e-02  2.57e-04  1.31e-02  4.14e-05  9.37e-04  6.24e-01  
 10  +3.0781e-01  +3.1974e-01  1.19e-02  5.61e-05  2.87e-03  9.45e-06  2.18e-04  8.17e-01  
 11  +3.0480e-01  +3.0680e-01  2.00e-03  9.25e-06  4.74e-04  1.59e-06  3.71e-05  8.53e-01  
 12  +3.0421e-01  +3.0425e-01  3.69e-05  1.71e-07  8.73e-06  2.46e-08  6.96e-07  9.82e-01  
 13  +3.0420e-01  +3.0420e-01  3.71e-07  1.72e-09  8.78e-08  2.47e-10  7.01e-09  9.90e-01  
 14  +3.0420e-01  +3.0420e-01  3.71e-09  1.72e-11  8.78e-10  2.47e-12  7.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3878ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 3.042e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 7.212e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 2.194e-03 seconds
Iteration: 7, Objective: 0.3042
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 337 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 8.038e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 337
  constraints   = 587
  nnz(P)        = 0
  nnz(A)        = 4408
  cones (total) = 1
    : Nonnegative = 1,  numel = 587

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9841e-01  +2.5214e+02  2.52e+02  9.41e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.6390e-01  +5.4559e+01  5.40e+01  4.13e-01  1.48e+01  3.83e-03  5.73e-01  5.93e-01  
  2  +5.1661e-01  +6.6132e+00  6.10e+00  1.16e-01  5.39e+00  1.77e-02  2.34e-01  9.90e-01  
  3  +5.0072e-01  +1.8005e+00  1.30e+00  2.58e-02  1.34e+00  5.28e-03  6.37e-02  7.45e-01  
  4  +4.7994e-01  +1.7330e+00  1.25e+00  1.08e-02  5.82e-01  9.73e-03  2.62e-02  6.44e-01  
  5  +4.4634e-01  +1.4262e+00  9.80e-01  5.85e-03  3.11e-01  8.70e-03  1.48e-02  5.13e-01  
  6  +4.1657e-01  +1.1578e+00  7.41e-01  3.98e-03  2.09e-01  4.99e-03  1.06e-02  4.26e-01  
  7  +3.5632e-01  +6.3700e-01  2.81e-01  1.49e-03  7.59e-02  4.31e-05  4.69e-03  7.95e-01  
  8  +3.1888e-01  +4.2654e-01  1.08e-01  5.57e-04  2.81e-02  3.22e-05  1.98e-03  6.61e-01  
  9  +3.0452e-01  +3.5533e-01  5.08e-02  2.51e-04  1.29e-02  3.50e-05  9.32e-04  8.14e-01  
 10  +2.9296e-01  +3.0395e-01  1.10e-02  5.20e-05  2.70e-03  7.80e-06  2.12e-04  8.29e-01  
 11  +2.8966e-01  +2.9013e-01  4.76e-04  2.22e-06  1.16e-04  3.00e-07  9.48e-06  9.63e-01  
 12  +2.8950e-01  +2.8951e-01  5.32e-06  2.48e-08  1.29e-06  3.03e-09  1.08e-07  9.89e-01  
 13  +2.8950e-01  +2.8950e-01  5.32e-08  2.48e-10  1.29e-08  3.03e-11  1.08e-09  9.90e-01  
 14  +2.8950e-01  +2.8950e-01  5.32e-10  2.48e-12  1.29e-10  3.03e-13  1.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0642ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 2.895e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 8.038e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.2895
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 347 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 4.538e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 347
  constraints   = 597
  nnz(P)        = 0
  nnz(A)        = 4484
  cones (total) = 1
    : Nonnegative = 1,  numel = 597

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9833e-01  +2.5199e+02  2.51e+02  9.42e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.6179e-01  +5.4566e+01  5.40e+01  4.14e-01  1.46e+01  3.84e-03  5.72e-01  5.93e-01  
  2  +5.1547e-01  +6.6707e+00  6.16e+00  1.16e-01  5.28e+00  1.79e-02  2.32e-01  9.90e-01  
  3  +4.9937e-01  +1.8456e+00  1.35e+00  2.53e-02  1.31e+00  5.70e-03  6.19e-02  7.50e-01  
  4  +4.7562e-01  +1.7262e+00  1.25e+00  1.04e-02  5.54e-01  1.02e-02  2.52e-02  6.40e-01  
  5  +4.4550e-01  +1.4492e+00  1.00e+00  6.18e-03  3.26e-01  8.73e-03  1.56e-02  4.62e-01  
  6  +4.1318e-01  +1.1701e+00  7.57e-01  4.01e-03  2.09e-01  5.59e-03  1.06e-02  4.30e-01  
  7  +3.5064e-01  +6.1570e-01  2.65e-01  1.42e-03  7.13e-02  4.72e-05  4.43e-03  7.87e-01  
  8  +3.1327e-01  +4.1181e-01  9.85e-02  5.10e-04  2.54e-02  3.55e-05  1.80e-03  6.95e-01  
  9  +2.9832e-01  +3.4027e-01  4.20e-02  2.06e-04  1.03e-02  2.20e-05  7.75e-04  6.90e-01  
 10  +2.9046e-01  +3.0430e-01  1.38e-02  6.67e-05  3.34e-03  8.20e-06  2.64e-04  7.26e-01  
 11  +2.8682e-01  +2.8793e-01  1.11e-03  5.32e-06  2.66e-04  8.88e-07  2.18e-05  9.90e-01  
 12  +2.8646e-01  +2.8647e-01  1.65e-05  7.91e-08  3.96e-06  1.15e-08  3.29e-07  9.85e-01  
 13  +2.8645e-01  +2.8645e-01  1.65e-07  7.92e-10  3.96e-08  1.15e-10  3.29e-09  9.90e-01  
 14  +2.8645e-01  +2.8645e-01  1.65e-09  7.92e-12  3.96e-10  1.15e-12  3.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.7832ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 2.865e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 4.538e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 3.248e-03 seconds
Iteration: 9, Objective: 0.2865
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 357 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 357
  constraints   = 607
  nnz(P)        = 0
  nnz(A)        = 4591
  cones (total) = 1
    : Nonnegative = 1,  numel = 607

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9817e-01  +2.5195e+02  2.51e+02  9.42e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.5849e-01  +5.4730e+01  5.42e+01  4.17e-01  1.45e+01  3.84e-03  5.74e-01  5.91e-01  
  2  +5.1274e-01  +6.7514e+00  6.24e+00  1.16e-01  5.28e+00  1.82e-02  2.34e-01  9.90e-01  
  3  +4.9664e-01  +1.9072e+00  1.41e+00  2.48e-02  1.28e+00  6.23e-03  6.05e-02  7.60e-01  
  4  +4.6633e-01  +1.6367e+00  1.17e+00  9.31e-03  4.92e-01  1.00e-02  2.28e-02  6.62e-01  
  5  +4.3015e-01  +1.4146e+00  9.84e-01  5.36e-03  2.81e-01  9.38e-03  1.36e-02  5.12e-01  
  6  +3.7507e-01  +8.2088e-01  4.46e-01  2.48e-03  1.26e-01  8.13e-05  7.16e-03  7.41e-01  
  7  +3.1852e-01  +4.5928e-01  1.41e-01  7.39e-04  3.67e-02  5.88e-05  2.47e-03  7.71e-01  
  8  +3.0201e-01  +3.7926e-01  7.73e-02  3.88e-04  1.93e-02  3.81e-05  1.35e-03  5.15e-01  
  9  +2.9206e-01  +3.3668e-01  4.46e-02  2.10e-04  1.06e-02  3.44e-05  7.69e-04  7.57e-01  
 10  +2.8072e-01  +2.8900e-01  8.27e-03  3.71e-05  1.89e-03  6.59e-06  1.46e-04  8.59e-01  
 11  +2.7843e-01  +2.7990e-01  1.47e-03  6.53e-06  3.33e-04  1.18e-06  2.65e-05  8.62e-01  
 12  +2.7794e-01  +2.7805e-01  1.07e-04  4.75e-07  2.42e-05  8.91e-08  1.96e-06  9.58e-01  
 13  +2.7790e-01  +2.7790e-01  1.08e-06  4.80e-09  2.44e-07  8.97e-10  1.98e-08  9.90e-01  
 14  +2.7790e-01  +2.7790e-01  1.08e-08  4.80e-11  2.44e-09  8.97e-12  1.98e-10  9.90e-01  
 15  +2.7790e-01  +2.7790e-01  1.08e-10  4.80e-13  2.44e-11  8.97e-14  1.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8799ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 2.779e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 6.783e-03 seconds
Iteration: 10, Objective: 0.2779
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 367 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 6.242e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 367
  constraints   = 617
  nnz(P)        = 0
  nnz(A)        = 4642
  cones (total) = 1
    : Nonnegative = 1,  numel = 617

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9818e-01  +2.5194e+02  2.51e+02  9.43e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.5582e-01  +5.4654e+01  5.41e+01  4.17e-01  1.43e+01  3.85e-03  5.71e-01  5.93e-01  
  2  +5.1102e-01  +6.8386e+00  6.33e+00  1.14e-01  5.15e+00  1.83e-02  2.29e-01  9.90e-01  
  3  +4.9362e-01  +1.9610e+00  1.47e+00  2.36e-02  1.22e+00  6.88e-03  5.69e-02  7.70e-01  
  4  +4.4939e-01  +1.6340e+00  1.18e+00  7.58e-03  4.00e-01  1.24e-02  1.84e-02  7.14e-01  
  5  +4.0793e-01  +1.2973e+00  8.89e-01  4.64e-03  2.41e-01  8.26e-03  1.19e-02  4.68e-01  
  6  +3.4190e-01  +6.3544e-01  2.94e-01  1.65e-03  8.20e-02  6.45e-05  5.06e-03  7.69e-01  
  7  +3.0587e-01  +4.3507e-01  1.29e-01  7.01e-04  3.46e-02  5.10e-05  2.37e-03  6.49e-01  
  8  +2.9018e-01  +3.5198e-01  6.18e-02  3.21e-04  1.59e-02  2.83e-05  1.14e-03  5.69e-01  
  9  +2.8158e-01  +3.1161e-01  3.00e-02  1.48e-04  7.39e-03  1.77e-05  5.51e-04  6.47e-01  
 10  +2.7551e-01  +2.8606e-01  1.06e-02  4.91e-05  2.48e-03  7.16e-06  1.92e-04  7.48e-01  
 11  +2.7271e-01  +2.7452e-01  1.81e-03  8.31e-06  4.20e-04  1.24e-06  3.38e-05  8.46e-01  
 12  +2.7217e-01  +2.7235e-01  1.87e-04  8.52e-07  4.31e-05  1.41e-07  3.53e-06  9.40e-01  
 13  +2.7210e-01  +2.7210e-01  1.90e-06  8.64e-09  4.37e-07  1.42e-09  3.59e-08  9.90e-01  
 14  +2.7210e-01  +2.7210e-01  1.90e-08  8.65e-11  4.37e-09  1.42e-11  3.59e-10  9.90e-01  
 15  +2.7210e-01  +2.7210e-01  1.90e-10  8.65e-13  4.37e-11  1.42e-13  3.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0859ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 2.721e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 6.242e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 4.916e-03 seconds
Iteration: 11, Objective: 0.2721
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 377 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 3.467e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 377
  constraints   = 627
  nnz(P)        = 0
  nnz(A)        = 4710
  cones (total) = 1
    : Nonnegative = 1,  numel = 627

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9815e-01  +2.5194e+02  2.51e+02  9.43e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.5382e-01  +5.4722e+01  5.42e+01  4.18e-01  1.41e+01  3.86e-03  5.71e-01  5.92e-01  
  2  +5.1000e-01  +6.8546e+00  6.34e+00  1.13e-01  5.07e+00  1.84e-02  2.28e-01  9.90e-01  
  3  +4.9218e-01  +1.9466e+00  1.45e+00  2.28e-02  1.17e+00  6.98e-03  5.53e-02  7.76e-01  
  4  +4.5009e-01  +1.6603e+00  1.21e+00  8.26e-03  4.31e-01  1.15e-02  2.02e-02  6.80e-01  
  5  +4.1455e-01  +1.3904e+00  9.76e-01  5.34e-03  2.76e-01  9.16e-03  1.36e-02  4.09e-01  
  6  +3.5299e-01  +7.3513e-01  3.82e-01  2.19e-03  1.08e-01  7.59e-05  6.49e-03  7.48e-01  
  7  +3.0726e-01  +4.6503e-01  1.58e-01  8.59e-04  4.23e-02  6.22e-05  2.87e-03  6.81e-01  
  8  +2.8526e-01  +3.5262e-01  6.74e-02  3.52e-04  1.73e-02  3.56e-05  1.28e-03  6.74e-01  
  9  +2.7604e-01  +3.0921e-01  3.32e-02  1.67e-04  8.23e-03  1.98e-05  6.40e-04  5.90e-01  
 10  +2.6889e-01  +2.7797e-01  9.08e-03  4.34e-05  2.16e-03  5.84e-06  1.78e-04  7.74e-01  
 11  +2.6628e-01  +2.6682e-01  5.42e-04  2.57e-06  1.28e-04  3.27e-07  1.10e-05  9.52e-01  
 12  +2.6610e-01  +2.6611e-01  7.23e-06  3.44e-08  1.70e-06  4.15e-09  1.49e-07  9.88e-01  
 13  +2.6610e-01  +2.6610e-01  7.23e-08  3.44e-10  1.70e-08  4.15e-11  1.49e-09  9.90e-01  
 14  +2.6610e-01  +2.6610e-01  7.23e-10  3.43e-12  1.70e-10  4.15e-13  1.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0664ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 2.661e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 3.467e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 6.598e-03 seconds
Iteration: 12, Objective: 0.2661
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:53 PM: Your problem has 387 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:53 PM: Finished problem compilation (took 3.412e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 387
  constraints   = 637
  nnz(P)        = 0
  nnz(A)        = 4871
  cones (total) = 1
    : Nonnegative = 1,  numel = 637

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9803e-01  +2.5200e+02  2.51e+02  9.44e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.5114e-01  +5.4821e+01  5.43e+01  4.20e-01  1.40e+01  3.86e-03  5.72e-01  5.91e-01  
  2  +5.0682e-01  +6.9289e+00  6.42e+00  1.13e-01  5.03e+00  1.87e-02  2.29e-01  9.90e-01  
  3  +4.8593e-01  +1.9739e+00  1.49e+00  2.12e-02  1.08e+00  7.69e-03  5.19e-02  8.00e-01  
  4  +4.6124e-01  +1.8168e+00  1.36e+00  1.23e-02  6.35e-01  9.26e-03  3.05e-02  4.71e-01  
  5  +4.1437e-01  +1.5076e+00  1.09e+00  6.36e-03  3.26e-01  8.84e-03  1.63e-02  5.76e-01  
  6  +3.5839e-01  +8.2053e-01  4.62e-01  2.75e-03  1.36e-01  7.59e-05  8.08e-03  7.66e-01  
  7  +3.0584e-01  +4.8233e-01  1.76e-01  9.78e-04  4.77e-02  7.63e-05  3.26e-03  7.47e-01  
  8  +2.8499e-01  +3.7607e-01  9.11e-02  4.85e-04  2.37e-02  4.60e-05  1.74e-03  5.57e-01  
  9  +2.7078e-01  +3.0699e-01  3.62e-02  1.85e-04  9.07e-03  1.94e-05  7.15e-04  6.29e-01  
 10  +2.6412e-01  +2.7738e-01  1.33e-02  6.50e-05  3.21e-03  8.10e-06  2.65e-04  7.17e-01  
 11  +2.6061e-01  +2.6187e-01  1.25e-03  6.09e-06  3.00e-04  7.58e-07  2.61e-05  9.33e-01  
 12  +2.6026e-01  +2.6043e-01  1.73e-04  8.42e-07  4.13e-05  1.05e-07  3.80e-06  8.88e-01  
 13  +2.6020e-01  +2.6020e-01  2.67e-06  1.29e-08  6.35e-07  1.70e-09  5.91e-08  9.90e-01  
 14  +2.6020e-01  +2.6020e-01  2.67e-08  1.29e-10  6.36e-09  1.71e-11  5.92e-10  9.90e-01  
 15  +2.6020e-01  +2.6020e-01  2.67e-10  1.29e-12  6.36e-11  1.71e-13  5.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7735ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:53 PM: Optimal value: 2.602e-01
(CVXPY) Sep 20 03:13:53 PM: Compilation took 3.412e-03 seconds
(CVXPY) Sep 20 03:13:53 PM: Solver (including time spent in interface) took 6.414e-03 seconds
Iteration: 13, Objective: 0.2602
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:54 PM: Your problem has 397 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Finished problem compilation (took 1.085e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 397
  constraints   = 647
  nnz(P)        = 0
  nnz(A)        = 4915
  cones (total) = 1
    : Nonnegative = 1,  numel = 647

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9802e-01  +2.5200e+02  2.51e+02  9.44e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.4911e-01  +5.4917e+01  5.44e+01  4.22e-01  1.39e+01  3.86e-03  5.73e-01  5.90e-01  
  2  +5.0485e-01  +6.9601e+00  6.46e+00  1.13e-01  5.01e+00  1.88e-02  2.31e-01  9.90e-01  
  3  +4.8382e-01  +2.0754e+00  1.59e+00  2.23e-02  1.13e+00  8.02e-03  5.45e-02  7.86e-01  
  4  +4.5560e-01  +1.8692e+00  1.41e+00  1.24e-02  6.34e-01  9.40e-03  3.08e-02  5.03e-01  
  5  +4.1027e-01  +1.5459e+00  1.14e+00  6.65e-03  3.39e-01  8.64e-03  1.71e-02  5.48e-01  
  6  +3.5669e-01  +8.3890e-01  4.82e-01  2.90e-03  1.42e-01  7.43e-05  8.49e-03  7.81e-01  
  7  +3.0258e-01  +4.6951e-01  1.67e-01  9.35e-04  4.53e-02  6.15e-05  3.12e-03  7.45e-01  
  8  +2.8061e-01  +3.5827e-01  7.77e-02  4.18e-04  2.02e-02  3.60e-05  1.51e-03  6.12e-01  
  9  +2.6653e-01  +2.8924e-01  2.27e-02  1.17e-04  5.69e-03  1.18e-05  4.58e-04  7.44e-01  
 10  +2.6136e-01  +2.6515e-01  3.79e-03  1.92e-05  9.33e-04  2.13e-06  7.89e-05  8.70e-01  
 11  +2.6063e-01  +2.6193e-01  1.30e-03  6.55e-06  3.18e-04  8.20e-07  2.77e-05  7.67e-01  
 12  +2.6031e-01  +2.6064e-01  3.23e-04  1.60e-06  7.79e-05  2.22e-07  7.15e-06  8.95e-01  
 13  +2.6020e-01  +2.6022e-01  1.19e-05  5.82e-08  2.83e-06  7.55e-09  2.68e-07  9.66e-01  
 14  +2.6020e-01  +2.6020e-01  1.19e-07  5.83e-10  2.84e-08  7.56e-11  2.69e-09  9.90e-01  
 15  +2.6020e-01  +2.6020e-01  1.19e-09  5.83e-12  2.84e-10  7.57e-13  2.69e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8916ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:54 PM: Optimal value: 2.602e-01
(CVXPY) Sep 20 03:13:54 PM: Compilation took 1.085e-03 seconds
(CVXPY) Sep 20 03:13:54 PM: Solver (including time spent in interface) took 1.221e-02 seconds
Iteration: 14, Objective: 0.2602
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:54 PM: Your problem has 407 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Finished problem compilation (took 4.061e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 407
  constraints   = 657
  nnz(P)        = 0
  nnz(A)        = 4985
  cones (total) = 1
    : Nonnegative = 1,  numel = 657

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9784e-01  +2.5223e+02  2.52e+02  9.45e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.4356e-01  +5.5062e+01  5.45e+01  4.22e-01  1.37e+01  3.87e-03  5.72e-01  5.90e-01  
  2  +5.0022e-01  +7.1143e+00  6.61e+00  1.11e-01  4.90e+00  1.93e-02  2.27e-01  9.90e-01  
  3  +4.7406e-01  +2.0151e+00  1.54e+00  1.93e-02  9.80e-01  8.61e-03  4.72e-02  8.14e-01  
  4  +4.3775e-01  +1.8699e+00  1.43e+00  1.12e-02  5.67e-01  1.01e-02  2.76e-02  5.17e-01  
  5  +3.9733e-01  +1.4188e+00  1.02e+00  6.26e-03  3.15e-01  6.71e-03  1.63e-02  5.06e-01  
  6  +3.3488e-01  +7.5214e-01  4.17e-01  2.49e-03  1.21e-01  6.05e-05  7.43e-03  8.40e-01  
  7  +2.8591e-01  +4.3217e-01  1.46e-01  8.21e-04  3.95e-02  5.93e-05  2.79e-03  7.56e-01  
  8  +2.6635e-01  +3.3246e-01  6.61e-02  3.56e-04  1.72e-02  3.12e-05  1.31e-03  6.05e-01  
  9  +2.5424e-01  +2.7363e-01  1.94e-02  9.95e-05  4.82e-03  1.09e-05  3.91e-04  7.70e-01  
 10  +2.4987e-01  +2.5427e-01  4.39e-03  2.21e-05  1.07e-03  2.66e-06  9.06e-05  8.19e-01  
 11  +2.4907e-01  +2.5076e-01  1.69e-03  8.41e-06  4.07e-04  1.18e-06  3.57e-05  8.01e-01  
 12  +2.4858e-01  +2.4880e-01  2.22e-04  1.09e-06  5.28e-05  1.56e-07  4.78e-06  9.06e-01  
 13  +2.4850e-01  +2.4851e-01  3.97e-06  1.95e-08  9.41e-07  2.84e-09  8.60e-08  9.87e-01  
 14  +2.4850e-01  +2.4850e-01  3.97e-08  1.95e-10  9.42e-09  2.84e-11  8.61e-10  9.90e-01  
 15  +2.4850e-01  +2.4850e-01  3.98e-10  1.96e-12  9.44e-11  2.85e-13  8.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5786ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:54 PM: Optimal value: 2.485e-01
(CVXPY) Sep 20 03:13:54 PM: Compilation took 4.061e-03 seconds
(CVXPY) Sep 20 03:13:54 PM: Solver (including time spent in interface) took 6.537e-03 seconds
Iteration: 15, Objective: 0.2485
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:54 PM: Your problem has 414 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Finished problem compilation (took 4.150e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 414
  constraints   = 664
  nnz(P)        = 0
  nnz(A)        = 5028
  cones (total) = 1
    : Nonnegative = 1,  numel = 664

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9781e-01  +2.5225e+02  2.52e+02  9.45e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.4189e-01  +5.5171e+01  5.46e+01  4.23e-01  1.37e+01  3.88e-03  5.73e-01  5.89e-01  
  2  +4.9860e-01  +7.1555e+00  6.66e+00  1.11e-01  4.87e+00  1.94e-02  2.28e-01  9.90e-01  
  3  +4.7173e-01  +2.0266e+00  1.55e+00  1.92e-02  9.66e-01  8.69e-03  4.71e-02  8.16e-01  
  4  +4.3117e-01  +1.8707e+00  1.44e+00  1.07e-02  5.42e-01  1.03e-02  2.68e-02  5.35e-01  
  5  +3.9341e-01  +1.3996e+00  1.01e+00  6.28e-03  3.13e-01  5.94e-03  1.65e-02  4.99e-01  
  6  +3.3595e-01  +7.7715e-01  4.41e-01  2.62e-03  1.27e-01  1.09e-03  7.82e-03  6.89e-01  
  7  +2.8820e-01  +4.5593e-01  1.68e-01  9.53e-04  4.55e-02  2.88e-04  3.22e-03  7.38e-01  
  8  +2.6935e-01  +3.5331e-01  8.40e-02  4.60e-04  2.20e-02  1.34e-04  1.67e-03  5.42e-01  
  9  +2.5776e-01  +2.9325e-01  3.55e-02  1.88e-04  8.96e-03  5.39e-05  7.24e-04  6.09e-01  
 10  +2.5048e-01  +2.5735e-01  6.87e-03  3.53e-05  1.69e-03  9.50e-06  1.44e-04  8.30e-01  
 11  +2.4914e-01  +2.5111e-01  1.97e-03  1.00e-05  4.78e-04  1.80e-06  4.25e-05  9.23e-01  
 12  +2.4857e-01  +2.4879e-01  2.17e-04  1.09e-06  5.20e-05  1.78e-07  4.80e-06  9.25e-01  
 13  +2.4850e-01  +2.4851e-01  4.07e-06  2.04e-08  9.72e-07  3.27e-09  9.04e-08  9.84e-01  
 14  +2.4850e-01  +2.4850e-01  4.08e-08  2.05e-10  9.74e-09  3.28e-11  9.06e-10  9.90e-01  
 15  +2.4850e-01  +2.4850e-01  4.09e-10  2.05e-12  9.76e-11  3.30e-13  9.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.661ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:54 PM: Optimal value: 2.485e-01
(CVXPY) Sep 20 03:13:54 PM: Compilation took 4.150e-03 seconds
(CVXPY) Sep 20 03:13:54 PM: Solver (including time spent in interface) took 7.246e-03 seconds
Iteration: 16, Objective: 0.2485
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:54 PM: Your problem has 424 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Finished problem compilation (took 4.680e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 424
  constraints   = 674
  nnz(P)        = 0
  nnz(A)        = 5087
  cones (total) = 1
    : Nonnegative = 1,  numel = 674

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9770e-01  +2.5227e+02  2.52e+02  9.45e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.3813e-01  +5.5152e+01  5.46e+01  4.23e-01  1.35e+01  3.88e-03  5.72e-01  5.89e-01  
  2  +4.9498e-01  +7.3069e+00  6.81e+00  1.09e-01  4.77e+00  1.98e-02  2.24e-01  9.90e-01  
  3  +4.6453e-01  +2.2940e+00  1.83e+00  2.08e-02  1.04e+00  9.93e-03  5.05e-02  8.00e-01  
  4  +4.1759e-01  +1.9748e+00  1.56e+00  1.11e-02  5.56e-01  1.08e-02  2.77e-02  5.27e-01  
  5  +3.7710e-01  +1.3381e+00  9.61e-01  6.19e-03  3.04e-01  4.05e-03  1.66e-02  5.71e-01  
  6  +3.2630e-01  +7.6332e-01  4.37e-01  2.68e-03  1.28e-01  1.32e-03  8.07e-03  5.84e-01  
  7  +2.8383e-01  +4.7336e-01  1.90e-01  1.09e-03  5.17e-02  4.19e-04  3.73e-03  7.06e-01  
  8  +2.6027e-01  +3.3457e-01  7.43e-02  4.10e-04  1.93e-02  1.47e-04  1.56e-03  6.24e-01  
  9  +2.4746e-01  +2.6263e-01  1.52e-02  8.22e-05  3.87e-03  2.29e-05  3.41e-04  8.46e-01  
 10  +2.4458e-01  +2.4806e-01  3.48e-03  1.87e-05  8.76e-04  3.22e-06  8.30e-05  9.20e-01  
 11  +2.4367e-01  +2.4391e-01  2.36e-04  1.27e-06  5.94e-05  1.88e-07  5.81e-06  9.48e-01  
 12  +2.4360e-01  +2.4361e-01  4.06e-06  2.18e-08  1.02e-06  3.19e-09  1.00e-07  9.84e-01  
 13  +2.4360e-01  +2.4360e-01  4.06e-08  2.18e-10  1.02e-08  3.19e-11  1.00e-09  9.90e-01  
 14  +2.4360e-01  +2.4360e-01  4.06e-10  2.18e-12  1.02e-10  3.19e-13  1.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5835ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:54 PM: Optimal value: 2.436e-01
(CVXPY) Sep 20 03:13:54 PM: Compilation took 4.680e-03 seconds
(CVXPY) Sep 20 03:13:54 PM: Solver (including time spent in interface) took 7.021e-03 seconds
Iteration: 17, Objective: 0.2436
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:54 PM: Your problem has 425 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:54 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:54 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 425
  constraints   = 675
  nnz(P)        = 0
  nnz(A)        = 5097
  cones (total) = 1
    : Nonnegative = 1,  numel = 675

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9768e-01  +2.5226e+02  2.52e+02  9.45e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.3770e-01  +5.5171e+01  5.46e+01  4.24e-01  1.35e+01  3.88e-03  5.73e-01  5.89e-01  
  2  +4.9466e-01  +7.3189e+00  6.82e+00  1.09e-01  4.76e+00  1.98e-02  2.24e-01  9.90e-01  
  3  +4.6404e-01  +2.2864e+00  1.82e+00  2.07e-02  1.03e+00  9.91e-03  5.02e-02  8.02e-01  
  4  +4.1741e-01  +1.9839e+00  1.57e+00  1.12e-02  5.59e-01  1.09e-02  2.79e-02  5.22e-01  
  5  +3.7167e-01  +1.2499e+00  8.78e-01  5.63e-03  2.76e-01  3.16e-03  1.52e-02  6.37e-01  
  6  +3.2758e-01  +7.9039e-01  4.63e-01  2.86e-03  1.37e-01  1.31e-03  8.56e-03  5.11e-01  
  7  +2.8138e-01  +4.5095e-01  1.70e-01  9.85e-04  4.64e-02  3.36e-04  3.39e-03  7.49e-01  
  8  +2.5929e-01  +3.2734e-01  6.81e-02  3.76e-04  1.77e-02  1.19e-04  1.44e-03  6.29e-01  
  9  +2.4726e-01  +2.6147e-01  1.42e-02  7.72e-05  3.63e-03  1.95e-05  3.21e-04  8.42e-01  
 10  +2.4462e-01  +2.4827e-01  3.65e-03  1.96e-05  9.19e-04  3.45e-06  8.72e-05  8.88e-01  
 11  +2.4368e-01  +2.4393e-01  2.60e-04  1.39e-06  6.52e-05  2.11e-07  6.40e-06  9.46e-01  
 12  +2.4360e-01  +2.4361e-01  5.77e-06  3.10e-08  1.45e-06  4.61e-09  1.43e-07  9.80e-01  
 13  +2.4360e-01  +2.4360e-01  5.78e-08  3.10e-10  1.45e-08  4.61e-11  1.43e-09  9.90e-01  
 14  +2.4360e-01  +2.4360e-01  5.78e-10  3.10e-12  1.45e-10  4.61e-13  1.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.2409ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:54 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:54 PM: Optimal value: 2.436e-01
(CVXPY) Sep 20 03:13:54 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 03:13:54 PM: Solver (including time spent in interface) took 7.037e-03 seconds
FULL MODEL:
  Accruacy: 0.72
  Our objective: 0.44000000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0)                       <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.8084685802459717
Best over terms:
  Our final objective: 0.18
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.18
  Highest accruacy: 0.59
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

