Command:
python test_script.py -s linear_dependence -d 3 -n 100 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 3.

Computed total variation: 0.26
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:41 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:41 PM: Finished problem compilation (took 3.774e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9543e-01  +5.0874e+01  5.04e+01  8.54e-01  7.23e+00  1.00e+00  1.04e+00   ------   
  1  +6.1374e-01  +9.7200e+00  9.11e+00  2.67e-01  3.57e+00  4.23e-03  4.52e-01  6.95e-01  
  2  +5.3582e-01  +1.6396e+00  1.10e+00  6.43e-02  9.82e-01  7.87e-03  1.58e-01  8.45e-01  
  3  +4.9851e-01  +7.7286e-01  2.74e-01  1.26e-02  1.95e-01  8.34e-03  3.88e-02  9.01e-01  
  4  +4.8175e-01  +7.3593e-01  2.54e-01  6.39e-03  1.01e-01  1.13e-02  2.00e-02  5.69e-01  
  5  +4.5371e-01  +5.5578e-01  1.02e-01  2.77e-03  4.30e-02  9.45e-05  1.00e-02  6.80e-01  
  6  +4.2643e-01  +4.4237e-01  1.59e-02  3.39e-04  5.27e-03  2.36e-05  1.47e-03  8.86e-01  
  7  +4.2025e-01  +4.2065e-01  4.00e-04  8.00e-06  1.24e-04  6.74e-07  3.76e-05  9.78e-01  
  8  +4.2010e-01  +4.2011e-01  4.00e-06  7.99e-08  1.24e-06  6.74e-09  3.77e-07  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  4.00e-08  7.99e-10  1.24e-08  6.75e-11  3.77e-09  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  4.00e-10  7.99e-12  1.24e-10  6.75e-13  3.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 297.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:41 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 03:04:41 PM: Compilation took 3.774e-03 seconds
(CVXPY) Sep 20 03:04:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:41 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:41 PM: Finished problem compilation (took 3.793e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 388
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9124e-01  +5.1038e+01  5.05e+01  8.61e-01  7.66e+00  1.00e+00  1.06e+00   ------   
  1  +5.9453e-01  +1.0029e+01  9.43e+00  2.90e-01  3.86e+00  4.13e-03  4.90e-01  6.76e-01  
  2  +5.2388e-01  +1.4437e+00  9.20e-01  5.26e-02  8.42e-01  9.67e-03  1.35e-01  9.47e-01  
  3  +5.1506e-01  +1.4872e+00  9.72e-01  3.78e-02  6.15e-01  1.31e-02  9.90e-02  3.05e-01  
  4  +4.7664e-01  +1.2264e+00  7.50e-01  2.09e-02  3.40e-01  1.01e-02  6.23e-02  5.15e-01  
  5  +4.3542e-01  +8.0374e-01  3.68e-01  1.00e-02  1.60e-01  3.69e-03  3.54e-02  4.96e-01  
  6  +4.0073e-01  +5.2107e-01  1.20e-01  3.09e-03  4.89e-02  1.23e-03  1.29e-02  7.15e-01  
  7  +3.8973e-01  +4.5615e-01  6.64e-02  1.85e-03  2.91e-02  2.53e-04  8.64e-03  5.43e-01  
  8  +3.7472e-01  +3.9455e-01  1.98e-02  4.75e-04  7.49e-03  7.72e-05  2.34e-03  8.18e-01  
  9  +3.7048e-01  +3.7142e-01  9.36e-04  2.24e-05  3.54e-04  3.62e-06  1.15e-04  9.53e-01  
 10  +3.7028e-01  +3.7056e-01  2.79e-04  6.23e-06  9.85e-05  1.17e-06  3.25e-05  8.26e-01  
 11  +3.7021e-01  +3.7023e-01  2.28e-05  5.08e-07  8.03e-06  9.17e-08  2.66e-06  9.57e-01  
 12  +3.7020e-01  +3.7020e-01  2.31e-07  5.14e-09  8.13e-08  9.29e-10  2.70e-08  9.90e-01  
 13  +3.7020e-01  +3.7020e-01  2.31e-09  5.14e-11  8.13e-10  9.29e-12  2.70e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 340µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:41 PM: Optimal value: 3.702e-01
(CVXPY) Sep 20 03:04:41 PM: Compilation took 3.793e-03 seconds
(CVXPY) Sep 20 03:04:41 PM: Solver (including time spent in interface) took 5.274e-04 seconds
FULL MODEL:
  Accruacy: 0.63
  Our objective: 0.26

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x2 = 0) <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8936557769775391
Best over terms:
  Our final objective: 0.2
    Its accruacy: 0.6
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.2
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

