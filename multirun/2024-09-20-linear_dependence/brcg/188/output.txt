Command:
python test_script.py -s linear_dependence -d 5 -n 5000 --seed 34 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.322
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.322
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:57 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:57 PM: Finished problem compilation (took 8.537e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.78e-01  6.56e+01  1.00e+00  1.00e+00   ------   
  1  +5.9950e-01  +5.0122e+02  5.01e+02  3.62e-01  3.83e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4596e-01  +7.1449e+01  7.09e+01  1.41e-01  1.86e+01  9.87e-03  2.34e-01  7.81e-01  
  3  +5.0969e-01  +1.6042e+01  1.55e+01  9.86e-02  1.26e+01  2.20e-05  2.30e-01  1.09e-01  
  4  +5.0000e-01  +1.0384e+00  5.38e-01  5.14e-03  6.74e-01  8.65e-06  1.12e-01  9.87e-01  
  5  +4.9252e-01  +1.8524e+00  1.36e+00  3.60e-03  4.84e-01  1.68e-04  1.06e-02  9.90e-01  
  6  +4.6022e-01  +1.1156e+00  6.55e-01  3.94e-04  5.30e-02  5.80e-04  1.10e-03  8.96e-01  
  7  +4.3270e-01  +6.9411e-01  2.61e-01  1.34e-04  1.79e-02  1.64e-04  4.20e-04  6.66e-01  
  8  +4.0057e-01  +4.4179e-01  4.12e-02  1.99e-05  2.62e-03  2.94e-06  7.90e-05  8.92e-01  
  9  +3.8963e-01  +3.9089e-01  1.26e-03  5.71e-07  7.54e-05  8.43e-08  2.64e-06  9.78e-01  
 10  +3.8930e-01  +3.8932e-01  1.26e-05  5.70e-09  7.53e-07  8.41e-10  2.65e-08  9.90e-01  
 11  +3.8930e-01  +3.8930e-01  1.26e-07  5.70e-11  7.53e-09  8.43e-12  2.65e-10  9.90e-01  
 12  +3.8930e-01  +3.8930e-01  1.26e-09  5.70e-13  7.53e-11  8.44e-14  2.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.6155ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:57 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:57 PM: Optimal value: 3.893e-01
(CVXPY) Sep 20 03:07:57 PM: Compilation took 8.537e-03 seconds
(CVXPY) Sep 20 03:07:57 PM: Solver (including time spent in interface) took 2.287e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:58 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:58 PM: Finished problem compilation (took 8.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 24941
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5012e+03  2.50e+03  9.78e-01  6.96e+01  1.00e+00  1.00e+00   ------   
  1  +5.9916e-01  +5.0142e+02  5.01e+02  3.62e-01  4.06e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4551e-01  +7.0952e+01  7.04e+01  1.40e-01  1.96e+01  9.92e-03  2.33e-01  7.85e-01  
  3  +5.0939e-01  +1.5725e+01  1.52e+01  9.73e-02  1.32e+01  2.19e-05  2.28e-01  1.18e-01  
  4  +5.0043e-01  +1.7704e+00  1.27e+00  1.21e-02  1.67e+00  9.91e-06  1.52e-01  6.15e-01  
  5  +4.9982e-01  +8.5598e-01  3.56e-01  3.29e-03  4.61e-01  7.91e-06  2.85e-02  8.68e-01  
  6  +4.8318e-01  +1.0670e+00  5.84e-01  4.87e-04  7.05e-02  2.82e-04  1.25e-03  9.86e-01  
  7  +4.6267e-01  +9.1916e-01  4.56e-01  2.20e-04  3.18e-02  3.40e-04  5.64e-04  6.28e-01  
  8  +4.5403e-01  +8.6182e-01  4.08e-01  1.85e-04  2.66e-02  2.13e-04  4.82e-04  3.91e-01  
  9  +3.9717e-01  +5.6207e-01  1.65e-01  5.91e-05  8.40e-03  3.40e-05  1.72e-04  8.22e-01  
 10  +3.4701e-01  +3.6695e-01  1.99e-02  7.31e-06  1.03e-03  2.72e-07  2.59e-05  9.41e-01  
 11  +3.3923e-01  +3.3952e-01  2.93e-04  1.07e-07  1.50e-05  4.16e-09  4.00e-07  9.85e-01  
 12  +3.3910e-01  +3.3910e-01  2.93e-06  1.07e-09  1.50e-07  4.16e-11  4.00e-09  9.90e-01  
 13  +3.3910e-01  +3.3910e-01  2.93e-08  1.07e-11  1.50e-09  4.16e-13  4.01e-11  9.90e-01  
 14  +3.3910e-01  +3.3910e-01  2.93e-10  1.07e-13  1.50e-11  4.17e-15  4.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.4516ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:58 PM: Optimal value: 3.391e-01
(CVXPY) Sep 20 03:07:58 PM: Compilation took 8.514e-03 seconds
(CVXPY) Sep 20 03:07:58 PM: Solver (including time spent in interface) took 3.521e-02 seconds
Iteration: 2, Objective: 0.3391
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:58 PM: Your problem has 2522 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:58 PM: Finished problem compilation (took 7.988e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2522
  constraints   = 5022
  nnz(P)        = 0
  nnz(A)        = 25070
  cones (total) = 1
    : Nonnegative = 1,  numel = 5022

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5012e+03  2.50e+03  9.78e-01  6.97e+01  1.00e+00  1.00e+00   ------   
  1  +5.9916e-01  +5.0142e+02  5.01e+02  3.62e-01  4.06e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4551e-01  +7.0949e+01  7.04e+01  1.40e-01  1.96e+01  9.92e-03  2.33e-01  7.85e-01  
  3  +5.0939e-01  +1.5724e+01  1.52e+01  9.73e-02  1.32e+01  2.19e-05  2.28e-01  1.18e-01  
  4  +5.0042e-01  +1.7635e+00  1.26e+00  1.20e-02  1.66e+00  9.91e-06  1.51e-01  6.17e-01  
  5  +4.9982e-01  +8.5586e-01  3.56e-01  3.30e-03  4.61e-01  7.90e-06  2.87e-02  8.58e-01  
  6  +4.8322e-01  +1.1064e+00  6.23e-01  5.21e-04  7.56e-02  2.82e-04  1.34e-03  9.89e-01  
  7  +4.5985e-01  +9.1546e-01  4.56e-01  2.10e-04  3.03e-02  3.37e-04  5.38e-04  6.82e-01  
  8  +4.5395e-01  +8.7493e-01  4.21e-01  1.87e-04  2.69e-02  2.44e-04  4.85e-04  2.83e-01  
  9  +4.0471e-01  +5.9389e-01  1.89e-01  7.14e-05  1.02e-02  2.08e-05  2.06e-04  8.30e-01  
 10  +3.4848e-01  +3.7170e-01  2.32e-02  8.43e-06  1.18e-03  3.91e-07  2.94e-05  9.41e-01  
 11  +3.3931e-01  +3.3983e-01  5.11e-04  1.87e-07  2.62e-05  1.26e-08  6.97e-07  9.78e-01  
 12  +3.3910e-01  +3.3911e-01  5.11e-06  1.86e-09  2.62e-07  1.26e-10  6.98e-09  9.90e-01  
 13  +3.3910e-01  +3.3910e-01  5.11e-08  1.86e-11  2.62e-09  1.26e-12  6.98e-11  9.90e-01  
 14  +3.3910e-01  +3.3910e-01  5.11e-10  1.86e-13  2.62e-11  1.26e-14  6.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.0391ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:58 PM: Optimal value: 3.391e-01
(CVXPY) Sep 20 03:07:58 PM: Compilation took 7.988e-03 seconds
(CVXPY) Sep 20 03:07:58 PM: Solver (including time spent in interface) took 2.796e-02 seconds
FULL MODEL:
  Accruacy: 0.661
  Our objective: 0.32199999999999995

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.322)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.2130208015441895
Best over terms:
  Our final objective: 0.32199999999999995
    Its accruacy: 0.661
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.32199999999999995
  Highest accruacy: 0.661
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

