Command:
python test_script.py -s linear_dependence -d 8 -n 5000 --seed 56 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15599999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 8.

Computed total variation: 0.25680000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:41 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Finished problem compilation (took 1.106e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 27517
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3494e+02  5.34e+02  4.16e-01  4.97e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3467e-01  +6.3341e+01  6.28e+01  1.58e-01  2.42e+01  1.47e-02  2.65e-01  9.02e-01  
  3  +5.0894e-01  +1.6262e+01  1.58e+01  1.05e-01  1.58e+01  3.90e-05  2.51e-01  2.30e-01  
  4  +5.0046e-01  +1.0929e+00  5.92e-01  5.75e-03  8.95e-01  6.40e-06  1.04e-01  9.90e-01  
  5  +5.0010e-01  +6.5197e-01  1.52e-01  1.44e-03  2.26e-01  7.19e-06  2.45e-02  8.45e-01  
  6  +4.9976e-01  +8.9402e-01  3.94e-01  7.24e-04  1.15e-01  1.79e-04  2.21e-03  9.58e-01  
  7  +4.9817e-01  +8.0998e-01  3.12e-01  2.34e-04  3.72e-02  3.68e-04  6.95e-04  7.42e-01  
  8  +4.9130e-01  +6.4349e-01  1.52e-01  8.95e-05  1.42e-02  1.06e-04  2.73e-04  8.66e-01  
  9  +4.8125e-01  +5.8539e-01  1.04e-01  5.75e-05  9.09e-03  4.86e-05  1.89e-04  4.36e-01  
 10  +4.7144e-01  +5.3600e-01  6.46e-02  3.23e-05  5.10e-03  4.87e-07  1.17e-04  9.19e-01  
 11  +4.6209e-01  +4.9408e-01  3.20e-02  1.43e-05  2.26e-03  1.29e-06  5.57e-05  7.20e-01  
 12  +4.5677e-01  +4.7055e-01  1.38e-02  5.84e-06  9.20e-04  1.25e-06  2.37e-05  9.90e-01  
 13  +4.5248e-01  +4.5301e-01  5.33e-04  2.21e-07  3.48e-05  4.45e-08  9.40e-07  9.77e-01  
 14  +4.5230e-01  +4.5231e-01  5.38e-06  2.23e-09  3.51e-07  4.48e-10  9.50e-09  9.90e-01  
 15  +4.5230e-01  +4.5230e-01  5.38e-08  2.23e-11  3.51e-09  4.50e-12  9.52e-11  9.90e-01  
 16  +4.5230e-01  +4.5230e-01  5.38e-10  2.23e-13  3.51e-11  4.51e-14  9.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.2107ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:41 PM: Optimal value: 4.523e-01
(CVXPY) Sep 20 03:14:41 PM: Compilation took 1.106e-02 seconds
(CVXPY) Sep 20 03:14:41 PM: Solver (including time spent in interface) took 3.169e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:41 PM: Your problem has 2527 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Finished problem compilation (took 1.190e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2527
  constraints   = 5027
  nnz(P)        = 0
  nnz(A)        = 31972
  cones (total) = 1
    : Nonnegative = 1,  numel = 5027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8399e-01  +5.3522e+02  5.35e+02  4.16e-01  5.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3436e-01  +6.3056e+01  6.25e+01  1.58e-01  2.50e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0876e-01  +1.6082e+01  1.56e+01  1.05e-01  1.62e+01  3.91e-05  2.50e-01  2.42e-01  
  4  +5.0083e-01  +1.8066e+00  1.31e+00  1.27e-02  2.02e+00  8.42e-06  1.49e-01  6.64e-01  
  5  +5.0015e-01  +9.2506e-01  4.25e-01  4.04e-03  6.53e-01  7.10e-06  7.24e-02  7.43e-01  
  6  +4.9993e-01  +7.6298e-01  2.63e-01  2.37e-03  3.85e-01  1.06e-05  1.91e-02  7.83e-01  
  7  +4.9296e-01  +7.5190e-01  2.59e-01  2.32e-04  3.84e-02  2.60e-04  6.61e-04  9.76e-01  
  8  +4.8780e-01  +7.0754e-01  2.20e-01  1.50e-04  2.47e-02  2.58e-04  4.25e-04  4.12e-01  
  9  +4.8899e-01  +6.9872e-01  2.10e-01  1.41e-04  2.32e-02  1.31e-04  3.95e-04  4.51e-01  
 10  +4.8303e-01  +6.5615e-01  1.73e-01  8.68e-05  1.43e-02  9.75e-05  2.43e-04  5.93e-01  
 11  +4.7931e-01  +6.3289e-01  1.54e-01  8.09e-05  1.33e-02  5.81e-05  2.39e-04  2.23e-01  
 12  +4.7801e-01  +6.3253e-01  1.55e-01  7.60e-05  1.25e-02  5.36e-05  2.22e-04  2.12e-01  
 13  +4.7662e-01  +6.1122e-01  1.35e-01  6.98e-05  1.15e-02  3.35e-05  2.20e-04  1.61e-01  
 14  +4.6822e-01  +5.7997e-01  1.12e-01  4.77e-05  7.83e-03  3.12e-05  1.47e-04  3.64e-01  
 15  +4.5589e-01  +5.3673e-01  8.08e-02  2.96e-05  4.85e-03  9.36e-06  8.86e-05  9.52e-01  
 16  +4.4108e-01  +4.9007e-01  4.90e-02  1.62e-05  2.66e-03  5.77e-06  4.95e-05  5.32e-01  
 17  +4.2340e-01  +4.2638e-01  2.98e-03  9.41e-07  1.54e-04  2.12e-07  3.01e-06  9.61e-01  
 18  +4.2211e-01  +4.2214e-01  3.04e-05  9.56e-09  1.56e-06  2.13e-09  3.08e-08  9.90e-01  
 19  +4.2210e-01  +4.2210e-01  3.04e-07  9.56e-11  1.56e-08  2.13e-11  3.08e-10  9.90e-01  
 20  +4.2210e-01  +4.2210e-01  3.04e-09  9.56e-13  1.56e-10  2.14e-13  3.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.9776ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:41 PM: Optimal value: 4.221e-01
(CVXPY) Sep 20 03:14:41 PM: Compilation took 1.190e-02 seconds
(CVXPY) Sep 20 03:14:41 PM: Solver (including time spent in interface) took 4.665e-02 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:41 PM: Your problem has 2537 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Finished problem compilation (took 1.101e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2537
  constraints   = 5037
  nnz(P)        = 0
  nnz(A)        = 33063
  cones (total) = 1
    : Nonnegative = 1,  numel = 5037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8385e-01  +5.3538e+02  5.35e+02  4.17e-01  5.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3420e-01  +6.2925e+01  6.24e+01  1.58e-01  2.50e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0872e-01  +1.6038e+01  1.55e+01  1.04e-01  1.62e+01  3.93e-05  2.50e-01  2.46e-01  
  4  +5.0067e-01  +1.5250e+00  1.02e+00  9.96e-03  1.60e+00  7.86e-06  1.32e-01  7.73e-01  
  5  +5.0014e-01  +8.4744e-01  3.47e-01  3.31e-03  5.36e-01  7.06e-06  5.25e-02  7.85e-01  
  6  +4.9987e-01  +8.5297e-01  3.53e-01  2.72e-03  4.44e-01  2.08e-05  1.27e-02  8.52e-01  
  7  +4.9643e-01  +8.0606e-01  3.10e-01  4.16e-04  6.88e-02  1.73e-04  1.17e-03  9.09e-01  
  8  +4.9382e-01  +7.7568e-01  2.82e-01  2.39e-04  3.96e-02  2.19e-04  6.61e-04  5.49e-01  
  9  +4.9508e-01  +7.4802e-01  2.53e-01  2.01e-04  3.33e-02  9.03e-05  5.51e-04  6.56e-01  
 10  +4.8855e-01  +7.1055e-01  2.22e-01  1.09e-04  1.80e-02  1.13e-04  2.99e-04  5.69e-01  
 11  +4.8559e-01  +6.9405e-01  2.08e-01  1.03e-04  1.70e-02  8.64e-05  2.85e-04  1.99e-01  
 12  +4.7690e-01  +6.5581e-01  1.79e-01  7.68e-05  1.27e-02  7.10e-05  2.17e-04  3.32e-01  
 13  +4.5074e-01  +5.4528e-01  9.45e-02  3.51e-05  5.75e-03  9.33e-06  1.06e-04  8.61e-01  
 14  +4.2250e-01  +4.4054e-01  1.80e-02  6.21e-06  1.02e-03  1.24e-06  2.04e-05  8.81e-01  
 15  +4.1522e-01  +4.1637e-01  1.15e-03  3.88e-07  6.34e-05  1.39e-07  1.33e-06  9.87e-01  
 16  +4.1471e-01  +4.1472e-01  1.27e-05  4.27e-09  6.98e-07  1.53e-09  1.47e-08  9.89e-01  
 17  +4.1470e-01  +4.1470e-01  1.27e-07  4.27e-11  6.98e-09  1.53e-11  1.47e-10  9.90e-01  
 18  +4.1470e-01  +4.1470e-01  1.27e-09  4.27e-13  6.98e-11  1.54e-13  1.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.1012ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:41 PM: Optimal value: 4.147e-01
(CVXPY) Sep 20 03:14:41 PM: Compilation took 1.101e-02 seconds
(CVXPY) Sep 20 03:14:41 PM: Solver (including time spent in interface) took 4.212e-02 seconds
Iteration: 3, Objective: 0.4147
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:41 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Finished problem compilation (took 1.258e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 33651
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8366e-01  +5.3532e+02  5.35e+02  4.17e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3401e-01  +6.2720e+01  6.22e+01  1.58e-01  2.48e+01  1.49e-02  2.64e-01  9.09e-01  
  3  +5.0866e-01  +1.5966e+01  1.55e+01  1.04e-01  1.61e+01  3.94e-05  2.48e-01  2.51e-01  
  4  +5.0061e-01  +1.4301e+00  9.29e-01  9.06e-03  1.45e+00  7.77e-06  1.23e-01  8.21e-01  
  5  +5.0021e-01  +9.2767e-01  4.27e-01  4.09e-03  6.62e-01  7.69e-06  5.38e-02  6.67e-01  
  6  +4.9954e-01  +9.4309e-01  4.44e-01  2.03e-03  3.35e-01  4.56e-05  6.55e-03  9.53e-01  
  7  +4.9533e-01  +8.8946e-01  3.94e-01  3.91e-04  6.48e-02  2.23e-04  1.09e-03  8.36e-01  
  8  +4.9438e-01  +8.5732e-01  3.63e-01  2.97e-04  4.93e-02  1.98e-04  8.15e-04  4.22e-01  
  9  +4.9108e-01  +7.5140e-01  2.60e-01  1.68e-04  2.79e-02  3.70e-05  4.60e-04  9.90e-01  
 10  +4.8985e-01  +7.4541e-01  2.56e-01  1.64e-04  2.72e-02  3.40e-05  4.52e-04  1.31e-01  
 11  +4.8553e-01  +7.2712e-01  2.42e-01  1.33e-04  2.20e-02  2.24e-05  3.69e-04  8.88e-01  
 12  +4.6433e-01  +6.2376e-01  1.59e-01  6.44e-05  1.06e-02  1.80e-05  1.86e-04  6.47e-01  
 13  +4.5191e-01  +5.8002e-01  1.28e-01  5.27e-05  8.65e-03  1.24e-05  1.65e-04  5.48e-01  
 14  +4.3891e-01  +5.2302e-01  8.41e-02  3.37e-05  5.52e-03  8.12e-06  1.08e-04  4.65e-01  
 15  +4.1883e-01  +4.5032e-01  3.15e-02  1.13e-05  1.85e-03  3.40e-06  3.79e-05  7.41e-01  
 16  +4.1240e-01  +4.2676e-01  1.44e-02  5.08e-06  8.29e-04  1.75e-06  1.76e-05  7.64e-01  
 17  +4.0998e-01  +4.1816e-01  8.18e-03  2.88e-06  4.71e-04  1.01e-06  1.01e-05  4.95e-01  
 18  +4.0868e-01  +4.1343e-01  4.76e-03  1.67e-06  2.73e-04  6.14e-07  5.91e-06  7.56e-01  
 19  +4.0673e-01  +4.0680e-01  6.83e-05  2.39e-08  3.91e-06  8.56e-09  8.61e-08  9.86e-01  
 20  +4.0670e-01  +4.0670e-01  6.83e-07  2.39e-10  3.91e-08  8.56e-11  8.61e-10  9.90e-01  
 21  +4.0670e-01  +4.0670e-01  6.83e-09  2.39e-12  3.91e-10  8.58e-13  8.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.9502ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:41 PM: Optimal value: 4.067e-01
(CVXPY) Sep 20 03:14:41 PM: Compilation took 1.258e-02 seconds
(CVXPY) Sep 20 03:14:41 PM: Solver (including time spent in interface) took 5.128e-02 seconds
Iteration: 4, Objective: 0.4067
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:41 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:41 PM: Finished problem compilation (took 1.298e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 34107
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8343e-01  +5.3549e+02  5.35e+02  4.18e-01  5.15e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3382e-01  +6.2561e+01  6.20e+01  1.57e-01  2.47e+01  1.50e-02  2.64e-01  9.11e-01  
  3  +5.0861e-01  +1.5918e+01  1.54e+01  1.04e-01  1.60e+01  3.96e-05  2.48e-01  2.56e-01  
  4  +5.0066e-01  +1.5193e+00  1.02e+00  9.94e-03  1.59e+00  8.03e-06  1.27e-01  7.86e-01  
  5  +5.0020e-01  +9.5171e-01  4.52e-01  4.32e-03  6.99e-01  8.02e-06  5.41e-02  6.72e-01  
  6  +4.9895e-01  +9.9353e-01  4.95e-01  1.61e-03  2.66e-01  7.08e-05  4.82e-03  9.66e-01  
  7  +4.9273e-01  +9.0753e-01  4.15e-01  3.37e-04  5.59e-02  2.75e-04  9.30e-04  8.14e-01  
  8  +4.8738e-01  +8.3427e-01  3.47e-01  2.09e-04  3.45e-02  2.32e-04  5.73e-04  5.55e-01  
  9  +4.8543e-01  +7.9925e-01  3.14e-01  1.71e-04  2.82e-02  1.33e-04  4.69e-04  5.20e-01  
 10  +4.7644e-01  +7.3448e-01  2.58e-01  1.26e-04  2.08e-02  8.81e-05  3.54e-04  4.18e-01  
 11  +4.6074e-01  +6.3656e-01  1.76e-01  7.91e-05  1.30e-02  1.69e-05  2.34e-04  8.04e-01  
 12  +4.5555e-01  +6.1584e-01  1.60e-01  6.87e-05  1.13e-02  1.58e-05  2.05e-04  3.28e-01  
 13  +4.3811e-01  +5.4007e-01  1.02e-01  4.05e-05  6.63e-03  9.55e-06  1.27e-04  4.58e-01  
 14  +4.1794e-01  +4.5834e-01  4.04e-02  1.49e-05  2.44e-03  3.73e-06  4.99e-05  7.13e-01  
 15  +4.1077e-01  +4.3077e-01  2.00e-02  7.20e-06  1.17e-03  2.09e-06  2.48e-05  6.63e-01  
 16  +4.0390e-01  +4.0541e-01  1.51e-03  5.38e-07  8.77e-05  1.67e-07  1.91e-06  9.55e-01  
 17  +4.0331e-01  +4.0332e-01  1.60e-05  5.70e-09  9.28e-07  1.76e-09  2.03e-08  9.89e-01  
 18  +4.0330e-01  +4.0330e-01  1.60e-07  5.70e-11  9.29e-09  1.76e-11  2.03e-10  9.90e-01  
 19  +4.0330e-01  +4.0330e-01  1.61e-09  5.71e-13  9.30e-11  1.77e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.9477ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:41 PM: Optimal value: 4.033e-01
(CVXPY) Sep 20 03:14:41 PM: Compilation took 1.298e-02 seconds
(CVXPY) Sep 20 03:14:41 PM: Solver (including time spent in interface) took 4.973e-02 seconds
Iteration: 5, Objective: 0.4033
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:42 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Finished problem compilation (took 1.386e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 34699
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8328e-01  +5.3551e+02  5.35e+02  4.18e-01  5.14e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3367e-01  +6.2388e+01  6.19e+01  1.57e-01  2.46e+01  1.50e-02  2.63e-01  9.13e-01  
  3  +5.0857e-01  +1.5866e+01  1.54e+01  1.03e-01  1.60e+01  3.97e-05  2.47e-01  2.59e-01  
  4  +5.0065e-01  +1.5113e+00  1.01e+00  9.87e-03  1.58e+00  8.08e-06  1.25e-01  7.93e-01  
  5  +5.0020e-01  +9.6054e-01  4.60e-01  4.40e-03  7.12e-01  8.60e-06  5.01e-02  6.93e-01  
  6  +4.9822e-01  +1.1108e+00  6.13e-01  1.35e-03  2.23e-01  1.10e-04  3.80e-03  9.82e-01  
  7  +4.9058e-01  +9.8930e-01  4.99e-01  3.45e-04  5.73e-02  3.15e-04  9.39e-04  7.61e-01  
  8  +4.8759e-01  +8.7536e-01  3.88e-01  2.15e-04  3.57e-02  1.63e-04  5.81e-04  7.03e-01  
  9  +4.8066e-01  +8.1783e-01  3.37e-01  1.66e-04  2.74e-02  1.33e-04  4.55e-04  3.20e-01  
 10  +4.7117e-01  +7.3807e-01  2.67e-01  1.26e-04  2.08e-02  6.14e-05  3.56e-04  5.16e-01  
 11  +4.5403e-01  +6.2526e-01  1.71e-01  7.87e-05  1.29e-02  4.67e-06  2.36e-04  9.90e-01  
 12  +4.3623e-01  +5.4968e-01  1.13e-01  4.73e-05  7.74e-03  3.38e-06  1.49e-04  3.95e-01  
 13  +4.2175e-01  +4.9033e-01  6.86e-02  2.70e-05  4.40e-03  3.72e-06  8.91e-05  5.73e-01  
 14  +4.1050e-01  +4.4578e-01  3.53e-02  1.34e-05  2.19e-03  2.03e-06  4.62e-05  5.18e-01  
 15  +4.0260e-01  +4.1529e-01  1.27e-02  4.67e-06  7.61e-04  8.76e-07  1.66e-05  7.02e-01  
 16  +4.0242e-01  +4.1426e-01  1.18e-02  4.39e-06  7.16e-04  9.03e-07  1.58e-05  2.00e-01  
 17  +4.0241e-01  +4.1426e-01  1.18e-02  4.39e-06  7.15e-04  9.27e-07  1.57e-05  4.20e-02  
 18  +4.0184e-01  +4.1225e-01  1.04e-02  3.80e-06  6.20e-04  8.97e-07  1.35e-05  2.63e-01  
 19  +3.9837e-01  +3.9952e-01  1.15e-03  4.19e-07  6.82e-05  1.40e-07  1.52e-06  9.90e-01  
 20  +3.9790e-01  +3.9792e-01  1.20e-05  4.35e-09  7.09e-07  1.45e-09  1.58e-08  9.90e-01  
 21  +3.9790e-01  +3.9790e-01  1.20e-07  4.35e-11  7.09e-09  1.45e-11  1.58e-10  9.90e-01  
 22  +3.9790e-01  +3.9790e-01  1.20e-09  4.36e-13  7.10e-11  1.45e-13  1.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.0503ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:42 PM: Optimal value: 3.979e-01
(CVXPY) Sep 20 03:14:42 PM: Compilation took 1.386e-02 seconds
(CVXPY) Sep 20 03:14:42 PM: Solver (including time spent in interface) took 4.646e-02 seconds
Iteration: 6, Objective: 0.3979
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:42 PM: Your problem has 2577 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Finished problem compilation (took 1.200e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2577
  constraints   = 5077
  nnz(P)        = 0
  nnz(A)        = 35200
  cones (total) = 1
    : Nonnegative = 1,  numel = 5077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8302e-01  +5.3574e+02  5.35e+02  4.19e-01  5.14e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3350e-01  +6.2253e+01  6.17e+01  1.57e-01  2.45e+01  1.50e-02  2.63e-01  9.15e-01  
  3  +5.0853e-01  +1.5834e+01  1.53e+01  1.03e-01  1.59e+01  3.99e-05  2.46e-01  2.64e-01  
  4  +5.0063e-01  +1.4616e+00  9.61e-01  9.40e-03  1.51e+00  8.02e-06  1.20e-01  8.19e-01  
  5  +5.0017e-01  +9.3828e-01  4.38e-01  4.17e-03  6.74e-01  9.86e-06  4.06e-02  7.62e-01  
  6  +4.9881e-01  +9.9522e-01  4.96e-01  1.54e-03  2.54e-01  8.17e-05  4.45e-03  9.16e-01  
  7  +4.9446e-01  +9.3906e-01  4.45e-01  4.80e-04  7.97e-02  2.26e-04  1.30e-03  7.18e-01  
  8  +4.9487e-01  +9.3607e-01  4.41e-01  4.69e-04  7.79e-02  2.09e-04  1.27e-03  1.10e-01  
  9  +4.9206e-01  +9.0548e-01  4.13e-01  3.17e-04  5.26e-02  2.36e-04  8.52e-04  4.34e-01  
 10  +4.8792e-01  +8.0358e-01  3.16e-01  1.99e-04  3.30e-02  3.44e-05  5.40e-04  9.90e-01  
 11  +4.8076e-01  +7.6838e-01  2.88e-01  1.51e-04  2.51e-02  3.42e-05  4.18e-04  3.46e-01  
 12  +4.7472e-01  +7.3599e-01  2.61e-01  1.40e-04  2.31e-02  2.62e-05  3.94e-04  3.75e-01  
 13  +4.5018e-01  +6.1986e-01  1.70e-01  7.30e-05  1.20e-02  1.77e-05  2.18e-04  5.09e-01  
 14  +4.2484e-01  +5.1213e-01  8.73e-02  3.54e-05  5.78e-03  7.70e-06  1.15e-04  5.77e-01  
 15  +4.1005e-01  +4.5349e-01  4.34e-02  1.68e-05  2.73e-03  4.82e-06  5.78e-05  9.03e-01  
 16  +4.0424e-01  +4.3066e-01  2.64e-02  9.95e-06  1.62e-03  3.19e-06  3.51e-05  7.06e-01  
 17  +4.0272e-01  +4.2494e-01  2.22e-02  8.30e-06  1.35e-03  2.71e-06  2.95e-05  2.50e-01  
 18  +3.9866e-01  +4.0941e-01  1.08e-02  3.98e-06  6.48e-04  1.36e-06  1.44e-05  9.90e-01  
 19  +3.9495e-01  +3.9610e-01  1.15e-03  4.23e-07  6.88e-05  1.42e-07  1.58e-06  9.19e-01  
 20  +3.9450e-01  +3.9452e-01  1.25e-05  4.61e-09  7.50e-07  1.54e-09  1.73e-08  9.89e-01  
 21  +3.9450e-01  +3.9450e-01  1.25e-07  4.61e-11  7.50e-09  1.54e-11  1.73e-10  9.90e-01  
 22  +3.9450e-01  +3.9450e-01  1.29e-09  4.75e-13  7.73e-11  1.59e-13  1.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.9843ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:42 PM: Optimal value: 3.945e-01
(CVXPY) Sep 20 03:14:42 PM: Compilation took 1.200e-02 seconds
(CVXPY) Sep 20 03:14:42 PM: Solver (including time spent in interface) took 5.206e-02 seconds
Iteration: 7, Objective: 0.3945
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:42 PM: Your problem has 2587 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Finished problem compilation (took 1.301e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2587
  constraints   = 5087
  nnz(P)        = 0
  nnz(A)        = 35579
  cones (total) = 1
    : Nonnegative = 1,  numel = 5087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8294e-01  +5.3582e+02  5.35e+02  4.19e-01  5.13e+01  3.81e-03  5.64e-01  5.96e-01  
  2  +5.3340e-01  +6.2166e+01  6.16e+01  1.57e-01  2.43e+01  1.51e-02  2.62e-01  9.17e-01  
  3  +5.0851e-01  +1.5804e+01  1.53e+01  1.03e-01  1.58e+01  4.00e-05  2.45e-01  2.67e-01  
  4  +5.0063e-01  +1.4671e+00  9.66e-01  9.46e-03  1.51e+00  8.06e-06  1.19e-01  8.18e-01  
  5  +5.0025e-01  +1.0466e+00  5.46e-01  5.23e-03  8.43e-01  9.95e-06  5.05e-02  6.64e-01  
  6  +4.9831e-01  +1.0945e+00  5.96e-01  1.26e-03  2.09e-01  1.12e-04  3.49e-03  9.90e-01  
  7  +4.9089e-01  +9.8474e-01  4.94e-01  3.41e-04  5.66e-02  3.09e-04  9.14e-04  7.47e-01  
  8  +4.9217e-01  +9.7292e-01  4.81e-01  3.12e-04  5.19e-02  2.53e-04  8.28e-04  2.88e-01  
  9  +4.8087e-01  +8.5098e-01  3.70e-01  1.74e-04  2.88e-02  2.04e-04  4.70e-04  5.94e-01  
 10  +4.6969e-01  +7.7311e-01  3.03e-01  1.37e-04  2.26e-02  1.34e-04  3.84e-04  3.00e-01  
 11  +4.5911e-01  +7.0078e-01  2.42e-01  1.12e-04  1.83e-02  6.02e-05  3.25e-04  4.44e-01  
 12  +4.3078e-01  +5.5553e-01  1.25e-01  5.15e-05  8.41e-03  2.18e-05  1.64e-04  6.06e-01  
 13  +4.2531e-01  +5.3067e-01  1.05e-01  4.28e-05  6.98e-03  1.75e-05  1.39e-04  2.54e-01  
 14  +4.0634e-01  +4.4638e-01  4.00e-02  1.55e-05  2.52e-03  5.08e-06  5.41e-05  8.46e-01  
 15  +4.0439e-01  +4.3864e-01  3.42e-02  1.31e-05  2.14e-03  4.35e-06  4.62e-05  2.33e-01  
 16  +3.9657e-01  +4.0722e-01  1.07e-02  4.00e-06  6.51e-04  1.32e-06  1.47e-05  9.60e-01  
 17  +3.9298e-01  +3.9396e-01  9.78e-04  3.66e-07  5.95e-05  1.17e-07  1.39e-06  9.73e-01  
 18  +3.9260e-01  +3.9261e-01  1.04e-05  3.90e-09  6.34e-07  1.24e-09  1.48e-08  9.90e-01  
 19  +3.9260e-01  +3.9260e-01  1.04e-07  3.90e-11  6.34e-09  1.24e-11  1.48e-10  9.90e-01  
 20  +3.9260e-01  +3.9260e-01  1.08e-09  4.05e-13  6.57e-11  1.29e-13  1.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 44.402ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:42 PM: Optimal value: 3.926e-01
(CVXPY) Sep 20 03:14:42 PM: Compilation took 1.301e-02 seconds
(CVXPY) Sep 20 03:14:42 PM: Solver (including time spent in interface) took 4.793e-02 seconds
Iteration: 8, Objective: 0.3926
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:42 PM: Your problem has 2597 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Finished problem compilation (took 1.200e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2597
  constraints   = 5097
  nnz(P)        = 0
  nnz(A)        = 35986
  cones (total) = 1
    : Nonnegative = 1,  numel = 5097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8275e-01  +5.3585e+02  5.35e+02  4.19e-01  5.12e+01  3.81e-03  5.64e-01  5.96e-01  
  2  +5.3324e-01  +6.1992e+01  6.15e+01  1.56e-01  2.42e+01  1.51e-02  2.62e-01  9.19e-01  
  3  +5.0847e-01  +1.5755e+01  1.52e+01  1.03e-01  1.58e+01  4.01e-05  2.44e-01  2.71e-01  
  4  +5.0068e-01  +1.5719e+00  1.07e+00  1.05e-02  1.67e+00  8.36e-06  1.24e-01  7.78e-01  
  5  +5.0021e-01  +1.0244e+00  5.24e-01  5.00e-03  8.07e-01  1.00e-05  4.75e-02  7.10e-01  
  6  +4.9706e-01  +1.2282e+00  7.31e-01  1.15e-03  1.91e-01  1.58e-04  3.12e-03  9.90e-01  
  7  +4.8777e-01  +1.0164e+00  5.29e-01  3.30e-04  5.47e-02  3.06e-04  8.81e-04  7.67e-01  
  8  +4.8620e-01  +9.4257e-01  4.56e-01  2.72e-04  4.50e-02  1.82e-04  7.30e-04  4.29e-01  
  9  +4.7137e-01  +8.0860e-01  3.37e-01  1.57e-04  2.60e-02  1.24e-04  4.36e-04  5.63e-01  
 10  +4.6126e-01  +7.4966e-01  2.88e-01  1.27e-04  2.09e-02  9.79e-05  3.64e-04  2.22e-01  
 11  +4.5045e-01  +6.7335e-01  2.23e-01  1.02e-04  1.67e-02  3.49e-05  3.04e-04  6.04e-01  
 12  +4.2004e-01  +5.1873e-01  9.87e-02  4.09e-05  6.66e-03  1.08e-05  1.35e-04  6.62e-01  
 13  +4.1253e-01  +4.8464e-01  7.21e-02  2.89e-05  4.70e-03  8.21e-06  9.77e-05  5.68e-01  
 14  +4.0348e-01  +4.4606e-01  4.26e-02  1.67e-05  2.71e-03  4.87e-06  5.85e-05  4.80e-01  
 15  +3.9833e-01  +4.2340e-01  2.51e-02  9.64e-06  1.57e-03  3.02e-06  3.48e-05  8.64e-01  
 16  +3.9259e-01  +4.0128e-01  8.69e-03  3.31e-06  5.38e-04  1.04e-06  1.24e-05  6.90e-01  
 17  +3.9250e-01  +4.0086e-01  8.36e-03  3.18e-06  5.17e-04  9.99e-07  1.19e-05  1.36e-01  
 18  +3.8958e-01  +3.8980e-01  2.18e-04  8.29e-08  1.35e-05  2.45e-08  3.18e-07  9.89e-01  
 19  +3.8950e-01  +3.8950e-01  2.20e-06  8.34e-10  1.35e-07  2.46e-10  3.20e-09  9.90e-01  
 20  +3.8950e-01  +3.8950e-01  2.20e-08  8.34e-12  1.35e-09  2.46e-12  3.20e-11  9.90e-01  
 21  +3.8950e-01  +3.8950e-01  2.36e-10  8.94e-14  1.45e-11  2.64e-14  3.44e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 55.2472ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:42 PM: Optimal value: 3.895e-01
(CVXPY) Sep 20 03:14:42 PM: Compilation took 1.200e-02 seconds
(CVXPY) Sep 20 03:14:42 PM: Solver (including time spent in interface) took 5.632e-02 seconds
Iteration: 9, Objective: 0.3895
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:42 PM: Your problem has 2607 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Finished problem compilation (took 1.149e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2607
  constraints   = 5107
  nnz(P)        = 0
  nnz(A)        = 36301
  cones (total) = 1
    : Nonnegative = 1,  numel = 5107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8275e-01  +5.3574e+02  5.35e+02  4.19e-01  5.11e+01  3.82e-03  5.64e-01  5.97e-01  
  2  +5.3325e-01  +6.1994e+01  6.15e+01  1.56e-01  2.41e+01  1.51e-02  2.62e-01  9.18e-01  
  3  +5.0846e-01  +1.5747e+01  1.52e+01  1.03e-01  1.57e+01  4.00e-05  2.44e-01  2.71e-01  
  4  +5.0068e-01  +1.5749e+00  1.07e+00  1.05e-02  1.68e+00  8.38e-06  1.24e-01  7.77e-01  
  5  +5.0021e-01  +1.0369e+00  5.37e-01  5.13e-03  8.26e-01  1.00e-05  4.85e-02  7.00e-01  
  6  +4.9700e-01  +1.1925e+00  6.95e-01  1.09e-03  1.81e-01  1.58e-04  2.95e-03  9.88e-01  
  7  +4.8808e-01  +1.0099e+00  5.22e-01  3.29e-04  5.46e-02  3.07e-04  8.80e-04  7.54e-01  
  8  +4.8534e-01  +9.0114e-01  4.16e-01  2.47e-04  4.09e-02  1.06e-04  6.67e-04  6.53e-01  
  9  +4.8252e-01  +8.7401e-01  3.91e-01  2.26e-04  3.74e-02  9.19e-05  6.16e-04  1.69e-01  
 10  +4.6575e-01  +7.6180e-01  2.96e-01  1.38e-04  2.27e-02  6.96e-05  3.92e-04  4.55e-01  
 11  +4.6282e-01  +7.3819e-01  2.75e-01  1.33e-04  2.19e-02  5.36e-05  3.84e-04  1.80e-01  
 12  +4.3775e-01  +6.0646e-01  1.69e-01  7.25e-05  1.18e-02  2.72e-05  2.25e-04  5.04e-01  
 13  +4.1621e-01  +5.0459e-01  8.84e-02  3.64e-05  5.92e-03  1.17e-05  1.22e-04  5.61e-01  
 14  +4.0442e-01  +4.5186e-01  4.74e-02  1.89e-05  3.06e-03  5.94e-06  6.61e-05  6.89e-01  
 15  +4.0138e-01  +4.3933e-01  3.79e-02  1.48e-05  2.41e-03  4.76e-06  5.27e-05  2.91e-01  
 16  +3.9428e-01  +4.0913e-01  1.48e-02  5.72e-06  9.28e-04  1.81e-06  2.10e-05  9.90e-01  
 17  +3.8972e-01  +3.9190e-01  2.18e-03  8.40e-07  1.36e-04  2.61e-07  3.19e-06  8.70e-01  
 18  +3.8897e-01  +3.8915e-01  1.80e-04  6.88e-08  1.12e-05  2.12e-08  2.65e-07  9.37e-01  
 19  +3.8890e-01  +3.8890e-01  1.83e-06  6.97e-10  1.13e-07  2.14e-10  2.68e-09  9.90e-01  
 20  +3.8890e-01  +3.8890e-01  1.83e-08  6.98e-12  1.13e-09  2.15e-12  2.69e-11  9.90e-01  
 21  +3.8890e-01  +3.8890e-01  2.10e-10  8.01e-14  1.30e-11  2.47e-14  3.09e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.1627ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:42 PM: Optimal value: 3.889e-01
(CVXPY) Sep 20 03:14:42 PM: Compilation took 1.149e-02 seconds
(CVXPY) Sep 20 03:14:42 PM: Solver (including time spent in interface) took 5.766e-02 seconds
Iteration: 10, Objective: 0.3889
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:42 PM: Your problem has 2615 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:42 PM: Finished problem compilation (took 1.500e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2615
  constraints   = 5115
  nnz(P)        = 0
  nnz(A)        = 36509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8261e-01  +5.3602e+02  5.35e+02  4.20e-01  5.11e+01  3.81e-03  5.64e-01  5.96e-01  
  2  +5.3317e-01  +6.1955e+01  6.14e+01  1.56e-01  2.41e+01  1.51e-02  2.62e-01  9.20e-01  
  3  +5.0845e-01  +1.5741e+01  1.52e+01  1.03e-01  1.57e+01  4.02e-05  2.44e-01  2.73e-01  
  4  +5.0069e-01  +1.5811e+00  1.08e+00  1.06e-02  1.69e+00  8.39e-06  1.24e-01  7.76e-01  
  5  +5.0021e-01  +1.0399e+00  5.40e-01  5.16e-03  8.30e-01  1.02e-05  4.78e-02  7.04e-01  
  6  +4.9719e-01  +1.1993e+00  7.02e-01  1.17e-03  1.94e-01  1.50e-04  3.20e-03  9.76e-01  
  7  +4.9073e-01  +1.0630e+00  5.72e-01  4.53e-04  7.51e-02  2.58e-04  1.22e-03  6.59e-01  
  8  +4.8582e-01  +9.3298e-01  4.47e-01  2.62e-04  4.34e-02  1.75e-04  7.07e-04  6.91e-01  
  9  +4.7654e-01  +8.3442e-01  3.58e-01  1.89e-04  3.12e-02  9.56e-05  5.23e-04  5.22e-01  
 10  +4.6240e-01  +7.4408e-01  2.82e-01  1.34e-04  2.19e-02  6.54e-05  3.84e-04  3.81e-01  
 11  +4.5302e-01  +6.8272e-01  2.30e-01  1.10e-04  1.80e-02  3.08e-05  3.28e-04  5.49e-01  
 12  +4.2122e-01  +5.2665e-01  1.05e-01  4.39e-05  7.14e-03  1.13e-05  1.44e-04  6.22e-01  
 13  +4.1259e-01  +4.8856e-01  7.60e-02  3.09e-05  5.02e-03  8.24e-06  1.05e-04  4.15e-01  
 14  +4.0072e-01  +4.3755e-01  3.68e-02  1.44e-05  2.34e-03  4.12e-06  5.16e-05  6.65e-01  
 15  +3.9794e-01  +4.2505e-01  2.71e-02  1.05e-05  1.71e-03  3.15e-06  3.82e-05  7.44e-01  
 16  +3.9563e-01  +4.1562e-01  2.00e-02  7.69e-06  1.25e-03  2.39e-06  2.82e-05  7.43e-01  
 17  +3.8967e-01  +3.9316e-01  3.49e-03  1.33e-06  2.16e-04  4.12e-07  5.10e-06  8.51e-01  
 18  +3.8844e-01  +3.8855e-01  1.06e-04  4.05e-08  6.56e-06  1.21e-08  1.57e-07  9.83e-01  
 19  +3.8840e-01  +3.8840e-01  1.06e-06  4.06e-10  6.57e-08  1.22e-10  1.57e-09  9.90e-01  
 20  +3.8840e-01  +3.8840e-01  1.06e-08  4.06e-12  6.57e-10  1.22e-12  1.57e-11  9.90e-01  
 21  +3.8840e-01  +3.8840e-01  1.06e-10  4.06e-14  6.57e-12  1.22e-14  1.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.9902ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:42 PM: Optimal value: 3.884e-01
(CVXPY) Sep 20 03:14:42 PM: Compilation took 1.500e-02 seconds
(CVXPY) Sep 20 03:14:42 PM: Solver (including time spent in interface) took 5.112e-02 seconds
Iteration: 11, Objective: 0.3884
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:43 PM: Your problem has 2625 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Finished problem compilation (took 1.202e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2625
  constraints   = 5125
  nnz(P)        = 0
  nnz(A)        = 36796
  cones (total) = 1
    : Nonnegative = 1,  numel = 5125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8254e-01  +5.3605e+02  5.35e+02  4.20e-01  5.10e+01  3.81e-03  5.64e-01  5.96e-01  
  2  +5.3312e-01  +6.1901e+01  6.14e+01  1.56e-01  2.40e+01  1.51e-02  2.61e-01  9.20e-01  
  3  +5.0844e-01  +1.5728e+01  1.52e+01  1.03e-01  1.56e+01  4.03e-05  2.44e-01  2.74e-01  
  4  +5.0069e-01  +1.5879e+00  1.09e+00  1.07e-02  1.70e+00  8.42e-06  1.24e-01  7.74e-01  
  5  +5.0026e-01  +1.0941e+00  5.94e-01  5.69e-03  9.14e-01  1.02e-05  5.28e-02  6.58e-01  
  6  +4.9852e-01  +1.1323e+00  6.34e-01  1.69e-03  2.79e-01  8.82e-05  4.76e-03  9.58e-01  
  7  +4.9289e-01  +1.0430e+00  5.50e-01  5.06e-04  8.40e-02  2.36e-04  1.36e-03  7.27e-01  
  8  +4.9142e-01  +9.6030e-01  4.69e-01  3.46e-04  5.74e-02  1.50e-04  9.25e-04  6.54e-01  
  9  +4.8525e-01  +8.8195e-01  3.97e-01  2.40e-04  3.97e-02  1.08e-04  6.51e-04  5.47e-01  
 10  +4.8031e-01  +8.3660e-01  3.56e-01  2.08e-04  3.43e-02  7.17e-05  5.73e-04  3.79e-01  
 11  +4.6489e-01  +7.4492e-01  2.80e-01  1.35e-04  2.21e-02  5.65e-05  3.86e-04  4.14e-01  
 12  +4.6055e-01  +7.1771e-01  2.57e-01  1.28e-04  2.10e-02  4.10e-05  3.74e-04  2.50e-01  
 13  +4.3400e-01  +5.8562e-01  1.52e-01  6.53e-05  1.06e-02  2.15e-05  2.06e-04  5.06e-01  
 14  +4.1618e-01  +5.0527e-01  8.91e-02  3.69e-05  5.99e-03  1.11e-05  1.24e-04  5.09e-01  
 15  +4.1027e-01  +4.8003e-01  6.98e-02  2.82e-05  4.58e-03  8.64e-06  9.71e-05  3.57e-01  
 16  +4.0165e-01  +4.4425e-01  4.26e-02  1.68e-05  2.72e-03  5.20e-06  6.02e-05  4.22e-01  
 17  +3.9795e-01  +4.2871e-01  3.08e-02  1.20e-05  1.94e-03  3.74e-06  4.37e-05  4.41e-01  
 18  +3.8923e-01  +3.9359e-01  4.36e-03  1.67e-06  2.71e-04  4.97e-07  6.42e-06  9.90e-01  
 19  +3.8765e-01  +3.8779e-01  1.41e-04  5.40e-08  8.73e-06  1.57e-08  2.10e-07  9.81e-01  
 20  +3.8760e-01  +3.8760e-01  1.41e-06  5.40e-10  8.74e-08  1.57e-10  2.10e-09  9.90e-01  
 21  +3.8760e-01  +3.8760e-01  1.41e-08  5.41e-12  8.75e-10  1.57e-12  2.10e-11  9.90e-01  
 22  +3.8760e-01  +3.8760e-01  1.41e-10  5.41e-14  8.75e-12  1.57e-14  2.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.7909ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:43 PM: Optimal value: 3.876e-01
(CVXPY) Sep 20 03:14:43 PM: Compilation took 1.202e-02 seconds
(CVXPY) Sep 20 03:14:43 PM: Solver (including time spent in interface) took 5.447e-02 seconds
Iteration: 12, Objective: 0.3876
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:43 PM: Your problem has 2631 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Finished problem compilation (took 1.351e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2631
  constraints   = 5131
  nnz(P)        = 0
  nnz(A)        = 37027
  cones (total) = 1
    : Nonnegative = 1,  numel = 5131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8244e-01  +5.3621e+02  5.36e+02  4.21e-01  5.09e+01  3.81e-03  5.65e-01  5.96e-01  
  2  +5.3302e-01  +6.1823e+01  6.13e+01  1.56e-01  2.39e+01  1.52e-02  2.61e-01  9.22e-01  
  3  +5.0842e-01  +1.5705e+01  1.52e+01  1.03e-01  1.56e+01  4.04e-05  2.43e-01  2.77e-01  
  4  +5.0069e-01  +1.5737e+00  1.07e+00  1.06e-02  1.68e+00  8.39e-06  1.23e-01  7.81e-01  
  5  +5.0035e-01  +1.2003e+00  7.00e-01  6.74e-03  1.08e+00  1.03e-05  6.23e-02  5.64e-01  
  6  +4.9928e-01  +1.2445e+00  7.45e-01  2.58e-03  4.25e-01  6.06e-05  7.48e-03  9.90e-01  
  7  +4.9355e-01  +1.1231e+00  6.30e-01  5.62e-04  9.31e-02  2.24e-04  1.50e-03  8.01e-01  
  8  +4.9267e-01  +1.0442e+00  5.52e-01  4.21e-04  6.97e-02  1.52e-04  1.12e-03  5.24e-01  
  9  +4.8965e-01  +9.9320e-01  5.04e-01  3.25e-04  5.38e-02  1.42e-04  8.67e-04  3.38e-01  
 10  +4.8832e-01  +9.2979e-01  4.41e-01  3.07e-04  5.07e-02  7.77e-05  8.27e-04  3.54e-01  
 11  +4.8332e-01  +8.8480e-01  4.01e-01  2.46e-04  4.05e-02  6.92e-05  6.70e-04  3.21e-01  
 12  +4.7538e-01  +8.1448e-01  3.39e-01  1.87e-04  3.07e-02  4.13e-05  5.21e-04  6.09e-01  
 13  +4.5637e-01  +6.9168e-01  2.35e-01  1.18e-04  1.92e-02  1.58e-05  3.49e-04  9.90e-01  
 14  +4.2324e-01  +5.3451e-01  1.11e-01  4.75e-05  7.71e-03  6.96e-06  1.55e-04  6.24e-01  
 15  +4.1675e-01  +5.0740e-01  9.06e-02  3.79e-05  6.15e-03  6.41e-06  1.27e-04  3.13e-01  
 16  +4.0466e-01  +4.5682e-01  5.22e-02  2.11e-05  3.41e-03  4.11e-06  7.44e-05  5.35e-01  
 17  +4.0135e-01  +4.4329e-01  4.19e-02  1.67e-05  2.71e-03  3.60e-06  6.00e-05  3.43e-01  
 18  +3.9462e-01  +4.1539e-01  2.08e-02  8.12e-06  1.31e-03  2.43e-06  3.01e-05  9.90e-01  
 19  +3.8837e-01  +3.9138e-01  3.01e-03  1.18e-06  1.90e-04  3.43e-07  4.55e-06  8.81e-01  
 20  +3.8734e-01  +3.8743e-01  9.40e-05  3.67e-08  5.93e-06  1.03e-08  1.43e-07  9.90e-01  
 21  +3.8730e-01  +3.8730e-01  9.43e-07  3.68e-10  5.94e-08  1.03e-10  1.44e-09  9.90e-01  
 22  +3.8730e-01  +3.8730e-01  9.43e-09  3.68e-12  5.95e-10  1.03e-12  1.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.0941ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:43 PM: Optimal value: 3.873e-01
(CVXPY) Sep 20 03:14:43 PM: Compilation took 1.351e-02 seconds
(CVXPY) Sep 20 03:14:43 PM: Solver (including time spent in interface) took 6.311e-02 seconds
Iteration: 13, Objective: 0.3873
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:43 PM: Your problem has 2637 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Finished problem compilation (took 1.248e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2637
  constraints   = 5137
  nnz(P)        = 0
  nnz(A)        = 37219
  cones (total) = 1
    : Nonnegative = 1,  numel = 5137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.8245e-01  +5.3613e+02  5.36e+02  4.21e-01  5.09e+01  3.81e-03  5.64e-01  5.96e-01  
  2  +5.3300e-01  +6.1786e+01  6.13e+01  1.56e-01  2.39e+01  1.52e-02  2.61e-01  9.22e-01  
  3  +5.0841e-01  +1.5694e+01  1.52e+01  1.02e-01  1.56e+01  4.04e-05  2.43e-01  2.78e-01  
  4  +5.0070e-01  +1.5920e+00  1.09e+00  1.07e-02  1.71e+00  8.44e-06  1.23e-01  7.74e-01  
  5  +5.0031e-01  +1.1679e+00  6.68e-01  6.42e-03  1.03e+00  1.04e-05  5.84e-02  6.05e-01  
  6  +4.9878e-01  +1.2319e+00  7.33e-01  2.01e-03  3.31e-01  8.08e-05  5.66e-03  9.90e-01  
  7  +4.9207e-01  +1.0961e+00  6.04e-01  4.97e-04  8.24e-02  2.45e-04  1.34e-03  7.69e-01  
  8  +4.9241e-01  +1.0667e+00  5.74e-01  4.07e-04  6.74e-02  1.95e-04  1.08e-03  4.28e-01  
  9  +4.9010e-01  +1.0218e+00  5.32e-01  3.39e-04  5.61e-02  1.77e-04  9.01e-04  2.62e-01  
 10  +4.8721e-01  +8.7827e-01  3.91e-01  2.66e-04  4.40e-02  1.45e-05  7.22e-04  8.47e-01  
 11  +4.7451e-01  +7.9862e-01  3.24e-01  1.67e-04  2.75e-02  1.78e-05  4.65e-04  4.89e-01  
 12  +4.6278e-01  +7.2863e-01  2.66e-01  1.39e-04  2.28e-02  1.97e-05  4.06e-04  6.25e-01  
 13  +4.3399e-01  +5.8562e-01  1.52e-01  6.67e-05  1.09e-02  1.11e-05  2.11e-04  5.71e-01  
 14  +4.1493e-01  +5.0098e-01  8.60e-02  3.63e-05  5.88e-03  6.22e-06  1.23e-04  5.01e-01  
 15  +4.1000e-01  +4.8020e-01  7.02e-02  2.89e-05  4.68e-03  5.64e-06  1.00e-04  3.38e-01  
 16  +4.0142e-01  +4.4456e-01  4.31e-02  1.73e-05  2.80e-03  3.60e-06  6.23e-05  4.49e-01  
 17  +3.9811e-01  +4.3078e-01  3.27e-02  1.30e-05  2.10e-03  2.95e-06  4.75e-05  4.10e-01  
 18  +3.9149e-01  +4.0417e-01  1.27e-02  4.99e-06  8.06e-04  1.17e-06  1.89e-05  6.48e-01  
 19  +3.8789e-01  +3.8988e-01  2.00e-03  7.82e-07  1.26e-04  1.83e-07  3.05e-06  8.49e-01  
 20  +3.8722e-01  +3.8727e-01  4.97e-05  1.94e-08  3.14e-06  4.65e-09  7.63e-08  9.80e-01  
 21  +3.8720e-01  +3.8720e-01  4.99e-07  1.95e-10  3.15e-08  4.67e-11  7.66e-10  9.90e-01  
 22  +3.8720e-01  +3.8720e-01  4.99e-09  1.95e-12  3.15e-10  4.67e-13  7.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.9727ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:43 PM: Optimal value: 3.872e-01
(CVXPY) Sep 20 03:14:43 PM: Compilation took 1.248e-02 seconds
(CVXPY) Sep 20 03:14:43 PM: Solver (including time spent in interface) took 5.224e-02 seconds
Iteration: 14, Objective: 0.3872
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:43 PM: Your problem has 2639 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Finished problem compilation (took 1.310e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2639
  constraints   = 5139
  nnz(P)        = 0
  nnz(A)        = 37308
  cones (total) = 1
    : Nonnegative = 1,  numel = 5139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.8245e-01  +5.3614e+02  5.36e+02  4.21e-01  5.09e+01  3.81e-03  5.64e-01  5.96e-01  
  2  +5.3298e-01  +6.1772e+01  6.12e+01  1.56e-01  2.39e+01  1.52e-02  2.61e-01  9.22e-01  
  3  +5.0841e-01  +1.5690e+01  1.52e+01  1.02e-01  1.56e+01  4.04e-05  2.43e-01  2.78e-01  
  4  +5.0060e-01  +1.4223e+00  9.22e-01  9.08e-03  1.45e+00  8.05e-06  1.12e-01  8.45e-01  
  5  +5.0032e-01  +1.1959e+00  6.96e-01  6.53e-03  1.05e+00  1.42e-05  4.46e-02  7.42e-01  
  6  +4.9769e-01  +1.0653e+00  5.68e-01  9.24e-04  1.53e-01  1.50e-04  2.51e-03  9.76e-01  
  7  +4.9115e-01  +9.6740e-01  4.76e-01  3.72e-04  6.15e-02  2.63e-04  9.99e-04  6.33e-01  
  8  +4.9187e-01  +9.7510e-01  4.83e-01  3.71e-04  6.15e-02  2.59e-04  9.92e-04  5.68e-02  
  9  +4.9206e-01  +9.6039e-01  4.68e-01  3.08e-04  5.10e-02  1.80e-04  8.14e-04  5.26e-01  
 10  +4.8592e-01  +8.8643e-01  4.01e-01  2.37e-04  3.91e-02  1.14e-04  6.38e-04  4.99e-01  
 11  +4.7904e-01  +8.3385e-01  3.55e-01  1.96e-04  3.23e-02  8.14e-05  5.39e-04  3.55e-01  
 12  +4.7602e-01  +8.1583e-01  3.40e-01  1.82e-04  3.00e-02  7.15e-05  5.07e-04  1.67e-01  
 13  +4.6206e-01  +7.2549e-01  2.63e-01  1.38e-04  2.26e-02  1.57e-05  4.04e-04  8.74e-01  
 14  +4.3266e-01  +5.8078e-01  1.48e-01  6.47e-05  1.05e-02  9.16e-06  2.05e-04  5.66e-01  
 15  +4.1650e-01  +5.0891e-01  9.24e-02  3.89e-05  6.31e-03  5.98e-06  1.31e-04  4.44e-01  
 16  +4.0918e-01  +4.7768e-01  6.85e-02  2.80e-05  4.54e-03  5.09e-06  9.70e-05  4.02e-01  
 17  +4.0524e-01  +4.6133e-01  5.61e-02  2.26e-05  3.66e-03  4.28e-06  7.95e-05  2.22e-01  
 18  +4.0148e-01  +4.4542e-01  4.39e-02  1.74e-05  2.82e-03  3.80e-06  6.22e-05  4.06e-01  
 19  +3.9282e-01  +4.0944e-01  1.66e-02  6.47e-06  1.05e-03  1.94e-06  2.41e-05  9.90e-01  
 20  +3.8783e-01  +3.9042e-01  2.59e-03  1.01e-06  1.62e-04  2.95e-07  3.88e-06  8.69e-01  
 21  +3.8693e-01  +3.8700e-01  7.61e-05  2.95e-08  4.77e-06  8.37e-09  1.15e-07  9.85e-01  
 22  +3.8690e-01  +3.8690e-01  7.66e-07  2.97e-10  4.81e-08  8.43e-11  1.16e-09  9.90e-01  
 23  +3.8690e-01  +3.8690e-01  7.66e-09  2.97e-12  4.81e-10  8.43e-13  1.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.5158ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:43 PM: Optimal value: 3.869e-01
(CVXPY) Sep 20 03:14:43 PM: Compilation took 1.310e-02 seconds
(CVXPY) Sep 20 03:14:43 PM: Solver (including time spent in interface) took 5.829e-02 seconds
Iteration: 15, Objective: 0.3869
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:43 PM: Your problem has 2640 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:43 PM: Finished problem compilation (took 1.208e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2640
  constraints   = 5140
  nnz(P)        = 0
  nnz(A)        = 37323
  cones (total) = 1
    : Nonnegative = 1,  numel = 5140

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.8246e-01  +5.3616e+02  5.36e+02  4.21e-01  5.09e+01  3.82e-03  5.64e-01  5.96e-01  
  2  +5.3297e-01  +6.1753e+01  6.12e+01  1.56e-01  2.38e+01  1.52e-02  2.61e-01  9.22e-01  
  3  +5.0841e-01  +1.5686e+01  1.52e+01  1.02e-01  1.56e+01  4.04e-05  2.43e-01  2.78e-01  
  4  +5.0060e-01  +1.4225e+00  9.22e-01  9.08e-03  1.45e+00  8.05e-06  1.12e-01  8.46e-01  
  5  +5.0031e-01  +1.1902e+00  6.90e-01  6.46e-03  1.04e+00  1.44e-05  4.37e-02  7.52e-01  
  6  +4.9767e-01  +1.0765e+00  5.79e-01  9.34e-04  1.55e-01  1.52e-04  2.54e-03  9.74e-01  
  7  +4.9147e-01  +9.8042e-01  4.89e-01  3.92e-04  6.49e-02  2.57e-04  1.05e-03  6.15e-01  
  8  +4.9185e-01  +9.8397e-01  4.92e-01  3.92e-04  6.49e-02  2.54e-04  1.05e-03  3.17e-02  
  9  +4.9279e-01  +9.8389e-01  4.91e-01  3.74e-04  6.20e-02  2.18e-04  9.93e-04  2.26e-01  
 10  +4.8756e-01  +9.4184e-01  4.54e-01  2.63e-04  4.35e-02  2.40e-04  7.02e-04  3.54e-01  
 11  +4.7801e-01  +8.2653e-01  3.49e-01  1.95e-04  3.21e-02  5.44e-05  5.39e-04  7.18e-01  
 12  +4.6789e-01  +7.6902e-01  3.01e-01  1.52e-04  2.49e-02  4.50e-05  4.32e-04  2.97e-01  
 13  +4.4622e-01  +6.5021e-01  2.04e-01  9.44e-05  1.54e-02  2.11e-05  2.87e-04  6.27e-01  
 14  +4.1990e-01  +5.2430e-01  1.04e-01  4.47e-05  7.25e-03  9.08e-06  1.49e-04  5.89e-01  
 15  +4.1144e-01  +4.8759e-01  7.61e-02  3.16e-05  5.12e-03  6.95e-06  1.09e-04  4.11e-01  
 16  +4.0399e-01  +4.5622e-01  5.22e-02  2.11e-05  3.41e-03  4.87e-06  7.47e-05  3.73e-01  
 17  +4.0140e-01  +4.4506e-01  4.37e-02  1.73e-05  2.81e-03  4.34e-06  6.20e-05  3.69e-01  
 18  +3.9311e-01  +4.1054e-01  1.74e-02  6.80e-06  1.10e-03  2.04e-06  2.53e-05  9.90e-01  
 19  +3.8810e-01  +3.9146e-01  3.36e-03  1.31e-06  2.11e-04  3.84e-07  5.03e-06  8.28e-01  
 20  +3.8695e-01  +3.8708e-01  1.31e-04  5.08e-08  8.21e-06  1.45e-08  1.98e-07  9.74e-01  
 21  +3.8690e-01  +3.8690e-01  1.37e-06  5.33e-10  8.61e-08  1.52e-10  2.08e-09  9.90e-01  
 22  +3.8690e-01  +3.8690e-01  1.37e-08  5.33e-12  8.61e-10  1.52e-12  2.08e-11  9.90e-01  
 23  +3.8690e-01  +3.8690e-01  1.37e-10  5.33e-14  8.61e-12  1.53e-14  2.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.9539ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:43 PM: Optimal value: 3.869e-01
(CVXPY) Sep 20 03:14:43 PM: Compilation took 1.208e-02 seconds
(CVXPY) Sep 20 03:14:43 PM: Solver (including time spent in interface) took 5.711e-02 seconds
FULL MODEL:
  Accruacy: 0.6026
  Our objective: 0.20519999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.156)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1)            <-- (term's our objective: 0.0056)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0052)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0056)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0064)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.0076)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.9884819984436035
Best over terms:
  Our final objective: 0.15599999999999997
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15599999999999997
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

