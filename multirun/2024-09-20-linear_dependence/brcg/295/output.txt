Command:
python test_script.py -s linear_dependence -d 8 -n 500 --seed 43 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.164
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 8.

Computed total variation: 0.5640000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:48 PM: Your problem has 267 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Finished problem compilation (took 4.011e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 267
  constraints   = 517
  nnz(P)        = 0
  nnz(A)        = 2767
  cones (total) = 1
    : Nonnegative = 1,  numel = 517

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +2.5100e+02  2.51e+02  9.37e-01  2.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.8333e-01  +5.3883e+01  5.33e+01  3.95e-01  1.49e+01  3.81e-03  5.64e-01  5.98e-01  
  2  +5.3132e-01  +6.4500e+00  5.92e+00  1.24e-01  5.88e+00  1.52e-02  2.51e-01  9.42e-01  
  3  +5.0180e-01  +1.3881e+00  8.86e-01  2.72e-02  1.27e+00  3.10e-05  1.85e-01  8.15e-01  
  4  +4.9960e-01  +6.9576e-01  1.96e-01  5.96e-03  2.88e-01  1.41e-05  4.00e-02  8.22e-01  
  5  +4.8356e-01  +6.7745e-01  1.94e-01  1.35e-03  6.72e-02  1.13e-04  4.21e-03  9.28e-01  
  6  +4.6994e-01  +5.6226e-01  9.23e-02  6.07e-04  2.98e-02  4.64e-05  2.04e-03  5.94e-01  
  7  +4.6369e-01  +5.2141e-01  5.77e-02  3.26e-04  1.60e-02  3.71e-05  1.15e-03  6.90e-01  
  8  +4.6463e-01  +5.2058e-01  5.59e-02  3.28e-04  1.61e-02  3.57e-05  1.14e-03  1.06e-01  
  9  +4.5523e-01  +4.7979e-01  2.46e-02  1.08e-04  5.31e-03  1.90e-05  4.35e-04  7.60e-01  
 10  +4.4886e-01  +4.5125e-01  2.38e-03  9.67e-06  4.74e-04  1.97e-06  4.20e-05  9.90e-01  
 11  +4.4811e-01  +4.4814e-01  2.79e-05  1.12e-07  5.51e-06  2.30e-08  4.93e-07  9.90e-01  
 12  +4.4810e-01  +4.4810e-01  2.79e-07  1.12e-09  5.51e-08  2.30e-10  4.93e-09  9.90e-01  
 13  +4.4810e-01  +4.4810e-01  2.79e-09  1.12e-11  5.51e-10  2.30e-12  4.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9973ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:48 PM: Optimal value: 4.481e-01
(CVXPY) Sep 20 03:13:48 PM: Compilation took 4.011e-03 seconds
(CVXPY) Sep 20 03:13:48 PM: Solver (including time spent in interface) took 2.282e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4481
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:48 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Finished problem compilation (took 4.506e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 3240
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +2.5162e+02  2.51e+02  9.38e-01  2.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.7957e-01  +5.4080e+01  5.35e+01  3.99e-01  1.52e+01  3.81e-03  5.70e-01  5.97e-01  
  2  +5.2720e-01  +6.0513e+00  5.52e+00  1.16e-01  5.62e+00  1.60e-02  2.37e-01  9.90e-01  
  3  +5.0148e-01  +1.5143e+00  1.01e+00  3.20e-02  1.55e+00  1.32e-03  1.45e-01  9.16e-01  
  4  +4.9134e-01  +1.0334e+00  5.42e-01  9.05e-03  4.62e-01  2.21e-03  2.72e-02  9.11e-01  
  5  +4.7091e-01  +8.0788e-01  3.37e-01  2.97e-03  1.52e-01  2.62e-03  8.92e-03  6.87e-01  
  6  +4.5620e-01  +6.6420e-01  2.08e-01  1.50e-03  7.60e-02  1.57e-03  4.67e-03  5.53e-01  
  7  +4.5173e-01  +6.5037e-01  1.99e-01  1.05e-03  5.35e-02  1.47e-03  3.17e-03  5.18e-01  
  8  +4.4926e-01  +6.2846e-01  1.79e-01  9.82e-04  5.00e-02  9.84e-04  2.99e-03  2.33e-01  
  9  +4.4008e-01  +5.7985e-01  1.40e-01  6.54e-04  3.33e-02  7.22e-04  2.02e-03  4.20e-01  
 10  +4.2001e-01  +4.7144e-01  5.14e-02  2.14e-04  1.08e-02  8.62e-06  7.03e-04  9.62e-01  
 11  +4.0972e-01  +4.3027e-01  2.05e-02  7.52e-05  3.78e-03  5.98e-06  2.61e-04  6.71e-01  
 12  +4.0645e-01  +4.1680e-01  1.04e-02  3.72e-05  1.87e-03  1.31e-05  1.34e-04  9.90e-01  
 13  +4.0237e-01  +4.0276e-01  3.95e-04  1.38e-06  6.90e-05  4.37e-07  5.15e-06  9.64e-01  
 14  +4.0220e-01  +4.0221e-01  3.98e-06  1.38e-08  6.94e-07  4.40e-09  5.20e-08  9.90e-01  
 15  +4.0220e-01  +4.0220e-01  3.98e-08  1.38e-10  6.94e-09  4.39e-11  5.20e-10  9.90e-01  
 16  +4.0220e-01  +4.0220e-01  3.98e-10  1.38e-12  6.94e-11  4.40e-13  5.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.742ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:48 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 03:13:48 PM: Compilation took 4.506e-03 seconds
(CVXPY) Sep 20 03:13:48 PM: Solver (including time spent in interface) took 3.357e-03 seconds
Iteration: 2, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:48 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Finished problem compilation (took 1.554e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 3559
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9881e-01  +2.5187e+02  2.51e+02  9.39e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.7597e-01  +5.4233e+01  5.37e+01  4.03e-01  1.53e+01  3.81e-03  5.72e-01  5.95e-01  
  2  +5.2442e-01  +6.2070e+00  5.68e+00  1.16e-01  5.67e+00  1.65e-02  2.38e-01  9.90e-01  
  3  +5.0513e-01  +1.7623e+00  1.26e+00  3.73e-02  1.90e+00  3.00e-03  1.05e-01  7.53e-01  
  4  +5.0017e-01  +1.7478e+00  1.25e+00  2.09e-02  1.09e+00  4.71e-03  5.34e-02  5.63e-01  
  5  +4.8224e-01  +1.4560e+00  9.74e-01  8.05e-03  4.27e-01  6.45e-03  2.08e-02  6.55e-01  
  6  +4.5807e-01  +1.0547e+00  5.97e-01  4.00e-03  2.10e-01  3.24e-03  1.10e-02  5.94e-01  
  7  +4.3605e-01  +8.1175e-01  3.76e-01  2.09e-03  1.09e-01  1.74e-03  5.97e-03  5.97e-01  
  8  +4.2433e-01  +7.4696e-01  3.23e-01  1.41e-03  7.36e-02  1.35e-03  4.09e-03  5.18e-01  
  9  +4.1175e-01  +6.3134e-01  2.20e-01  1.13e-03  5.83e-02  2.51e-04  3.46e-03  6.26e-01  
 10  +3.9240e-01  +5.3608e-01  1.44e-01  6.35e-04  3.27e-02  1.64e-04  2.03e-03  5.63e-01  
 11  +3.7724e-01  +4.5366e-01  7.64e-02  3.21e-04  1.64e-02  8.22e-05  1.08e-03  9.05e-01  
 12  +3.5816e-01  +3.6854e-01  1.04e-02  4.23e-05  2.15e-03  8.02e-06  1.58e-04  8.78e-01  
 13  +3.5468e-01  +3.5540e-01  7.14e-04  2.82e-06  1.43e-04  5.31e-07  1.16e-05  9.55e-01  
 14  +3.5440e-01  +3.5441e-01  7.72e-06  3.04e-08  1.54e-06  5.67e-09  1.27e-07  9.89e-01  
 15  +3.5440e-01  +3.5440e-01  7.72e-08  3.04e-10  1.54e-08  5.67e-11  1.27e-09  9.90e-01  
 16  +3.5440e-01  +3.5440e-01  7.72e-10  3.04e-12  1.54e-10  5.68e-13  1.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.203ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:48 PM: Optimal value: 3.544e-01
(CVXPY) Sep 20 03:13:48 PM: Compilation took 1.554e-04 seconds
(CVXPY) Sep 20 03:13:48 PM: Solver (including time spent in interface) took 4.431e-03 seconds
Iteration: 3, Objective: 0.3544
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:48 PM: Your problem has 297 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Finished problem compilation (took 4.048e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 297
  constraints   = 547
  nnz(P)        = 0
  nnz(A)        = 3701
  cones (total) = 1
    : Nonnegative = 1,  numel = 547

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5166e+02  2.51e+02  9.39e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.7315e-01  +5.4205e+01  5.36e+01  4.05e-01  1.51e+01  3.81e-03  5.71e-01  5.95e-01  
  2  +5.2240e-01  +6.3224e+00  5.80e+00  1.16e-01  5.58e+00  1.68e-02  2.35e-01  9.90e-01  
  3  +5.0486e-01  +1.6868e+00  1.18e+00  3.11e-02  1.60e+00  3.43e-03  8.21e-02  7.46e-01  
  4  +4.9946e-01  +1.7169e+00  1.22e+00  1.80e-02  9.50e-01  5.45e-03  4.47e-02  5.08e-01  
  5  +4.7998e-01  +1.5163e+00  1.04e+00  7.82e-03  4.16e-01  7.21e-03  1.96e-02  6.58e-01  
  6  +4.5484e-01  +1.2049e+00  7.50e-01  4.44e-03  2.33e-01  4.98e-03  1.16e-02  5.07e-01  
  7  +4.3100e-01  +9.7001e-01  5.39e-01  2.72e-03  1.42e-01  2.23e-03  7.53e-03  6.06e-01  
  8  +4.0555e-01  +7.3807e-01  3.33e-01  1.87e-03  9.54e-02  1.82e-05  5.72e-03  8.14e-01  
  9  +3.8011e-01  +5.9568e-01  2.16e-01  1.05e-03  5.37e-02  2.50e-05  3.42e-03  4.42e-01  
 10  +3.5301e-01  +4.5306e-01  1.00e-01  4.45e-04  2.25e-02  5.94e-05  1.57e-03  7.83e-01  
 11  +3.3854e-01  +3.8267e-01  4.41e-02  1.90e-04  9.59e-03  2.72e-05  7.16e-04  5.84e-01  
 12  +3.2822e-01  +3.3321e-01  4.99e-03  2.14e-05  1.07e-03  4.74e-06  8.53e-05  9.90e-01  
 13  +3.2682e-01  +3.2749e-01  6.67e-04  2.85e-06  1.43e-04  6.18e-07  1.16e-05  8.69e-01  
 14  +3.2661e-01  +3.2666e-01  4.32e-05  1.84e-07  9.23e-06  4.04e-08  7.60e-07  9.90e-01  
 15  +3.2660e-01  +3.2660e-01  4.44e-07  1.89e-09  9.47e-08  4.14e-10  7.81e-09  9.90e-01  
 16  +3.2660e-01  +3.2660e-01  4.44e-09  1.89e-11  9.48e-10  4.14e-12  7.81e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.1204ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:48 PM: Optimal value: 3.266e-01
(CVXPY) Sep 20 03:13:48 PM: Compilation took 4.048e-03 seconds
(CVXPY) Sep 20 03:13:48 PM: Solver (including time spent in interface) took 3.843e-03 seconds
Iteration: 4, Objective: 0.3266
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:48 PM: Your problem has 307 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:48 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 307
  constraints   = 557
  nnz(P)        = 0
  nnz(A)        = 3884
  cones (total) = 1
    : Nonnegative = 1,  numel = 557

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9822e-01  +2.5210e+02  2.52e+02  9.40e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.6657e-01  +5.4414e+01  5.38e+01  4.07e-01  1.50e+01  3.82e-03  5.73e-01  5.94e-01  
  2  +5.1811e-01  +6.5273e+00  6.01e+00  1.15e-01  5.54e+00  1.74e-02  2.34e-01  9.90e-01  
  3  +5.0193e-01  +1.8686e+00  1.37e+00  2.86e-02  1.49e+00  5.28e-03  7.07e-02  7.18e-01  
  4  +4.8481e-01  +1.7865e+00  1.30e+00  1.31e-02  6.98e-01  8.71e-03  3.15e-02  6.19e-01  
  5  +4.4886e-01  +1.1751e+00  7.26e-01  5.39e-03  2.82e-01  3.50e-03  1.40e-02  7.22e-01  
  6  +4.2790e-01  +1.0810e+00  6.53e-01  3.46e-03  1.81e-01  3.69e-03  9.13e-03  4.26e-01  
  7  +3.8295e-01  +7.2748e-01  3.45e-01  1.84e-03  9.42e-02  5.47e-04  5.52e-03  6.29e-01  
  8  +3.4535e-01  +5.2389e-01  1.79e-01  8.43e-04  4.27e-02  2.43e-04  2.76e-03  5.96e-01  
  9  +3.2808e-01  +4.4329e-01  1.15e-01  5.39e-04  2.70e-02  1.15e-04  1.91e-03  9.54e-01  
 10  +3.0654e-01  +3.4524e-01  3.87e-02  1.70e-04  8.47e-03  3.70e-05  6.56e-04  7.08e-01  
 11  +2.9813e-01  +3.0890e-01  1.08e-02  4.57e-05  2.27e-03  1.01e-05  1.88e-04  7.65e-01  
 12  +2.9505e-01  +2.9553e-01  4.81e-04  2.03e-06  1.01e-04  4.16e-07  8.63e-06  9.55e-01  
 13  +2.9490e-01  +2.9492e-01  1.45e-05  6.13e-08  3.04e-06  1.30e-08  2.61e-07  9.86e-01  
 14  +2.9490e-01  +2.9490e-01  1.45e-07  6.13e-10  3.05e-08  1.30e-10  2.62e-09  9.90e-01  
 15  +2.9490e-01  +2.9490e-01  1.45e-09  6.13e-12  3.05e-10  1.30e-12  2.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3187ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:48 PM: Optimal value: 2.949e-01
(CVXPY) Sep 20 03:13:48 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:13:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.2949
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 317 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 4.408e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 317
  constraints   = 567
  nnz(P)        = 0
  nnz(A)        = 4000
  cones (total) = 1
    : Nonnegative = 1,  numel = 567

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9812e-01  +2.5214e+02  2.52e+02  9.40e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.6453e-01  +5.4416e+01  5.39e+01  4.09e-01  1.48e+01  3.82e-03  5.72e-01  5.94e-01  
  2  +5.1659e-01  +6.6189e+00  6.10e+00  1.14e-01  5.43e+00  1.76e-02  2.32e-01  9.90e-01  
  3  +5.0040e-01  +1.8901e+00  1.39e+00  2.71e-02  1.41e+00  5.66e-03  6.61e-02  7.32e-01  
  4  +4.7843e-01  +1.7425e+00  1.26e+00  1.11e-02  5.95e-01  9.74e-03  2.66e-02  6.47e-01  
  5  +4.4551e-01  +1.4011e+00  9.56e-01  5.66e-03  2.99e-01  8.20e-03  1.42e-02  5.72e-01  
  6  +4.1011e-01  +1.0576e+00  6.48e-01  3.51e-03  1.82e-01  3.53e-03  9.41e-03  5.02e-01  
  7  +3.4962e-01  +5.9952e-01  2.50e-01  1.23e-03  6.20e-02  7.01e-04  3.83e-03  6.78e-01  
  8  +3.1534e-01  +4.2314e-01  1.08e-01  5.24e-04  2.61e-02  1.45e-04  1.89e-03  8.16e-01  
  9  +2.9860e-01  +3.3877e-01  4.02e-02  1.89e-04  9.32e-03  5.10e-05  7.38e-04  6.71e-01  
 10  +2.9268e-01  +3.1216e-01  1.95e-02  8.67e-05  4.29e-03  2.44e-05  3.53e-04  6.05e-01  
 11  +2.8798e-01  +2.9084e-01  2.86e-03  1.26e-05  6.23e-04  2.58e-06  5.37e-05  9.90e-01  
 12  +2.8709e-01  +2.8733e-01  2.44e-04  1.07e-06  5.27e-05  2.08e-07  4.66e-06  9.37e-01  
 13  +2.8700e-01  +2.8700e-01  2.74e-06  1.20e-08  5.92e-07  2.33e-09  5.26e-08  9.90e-01  
 14  +2.8700e-01  +2.8700e-01  2.74e-08  1.20e-10  5.92e-09  2.33e-11  5.26e-10  9.90e-01  
 15  +2.8700e-01  +2.8700e-01  2.74e-10  1.20e-12  5.92e-11  2.33e-13  5.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.8664ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.870e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 4.408e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 4.168e-03 seconds
Iteration: 6, Objective: 0.2870
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 326 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 3.399e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 326
  constraints   = 576
  nnz(P)        = 0
  nnz(A)        = 4068
  cones (total) = 1
    : Nonnegative = 1,  numel = 576

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9803e-01  +2.5207e+02  2.52e+02  9.41e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.6133e-01  +5.4415e+01  5.39e+01  4.10e-01  1.46e+01  3.83e-03  5.71e-01  5.95e-01  
  2  +5.1395e-01  +6.7218e+00  6.21e+00  1.13e-01  5.34e+00  1.79e-02  2.29e-01  9.90e-01  
  3  +4.9666e-01  +1.8260e+00  1.33e+00  2.32e-02  1.21e+00  6.14e-03  5.62e-02  7.73e-01  
  4  +4.6915e-01  +1.6115e+00  1.14e+00  9.38e-03  4.99e-01  9.93e-03  2.25e-02  6.43e-01  
  5  +4.3785e-01  +1.3563e+00  9.18e-01  5.29e-03  2.80e-01  9.50e-03  1.31e-02  4.65e-01  
  6  +4.0249e-01  +1.0513e+00  6.49e-01  3.46e-03  1.79e-01  4.99e-03  9.15e-03  4.18e-01  
  7  +3.4910e-01  +6.6028e-01  3.11e-01  1.54e-03  7.77e-02  1.57e-03  4.66e-03  5.72e-01  
  8  +3.2772e-01  +5.4910e-01  2.21e-01  1.06e-03  5.35e-02  9.32e-04  3.45e-03  3.83e-01  
  9  +2.8871e-01  +3.4272e-01  5.40e-02  2.53e-04  1.26e-02  2.35e-05  9.82e-04  9.80e-01  
 10  +2.7626e-01  +2.8619e-01  9.93e-03  4.59e-05  2.27e-03  5.47e-06  1.95e-04  8.64e-01  
 11  +2.7375e-01  +2.7519e-01  1.44e-03  6.61e-06  3.25e-04  8.64e-07  2.90e-05  8.84e-01  
 12  +2.7333e-01  +2.7341e-01  7.94e-05  3.64e-07  1.79e-05  5.05e-08  1.63e-06  9.59e-01  
 13  +2.7330e-01  +2.7330e-01  8.04e-07  3.68e-09  1.81e-07  5.11e-10  1.65e-08  9.90e-01  
 14  +2.7330e-01  +2.7330e-01  8.05e-09  3.69e-11  1.81e-09  5.12e-12  1.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6415ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.733e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 3.399e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 4.000e-03 seconds
Iteration: 7, Objective: 0.2733
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 336 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 4.221e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 336
  constraints   = 586
  nnz(P)        = 0
  nnz(A)        = 4191
  cones (total) = 1
    : Nonnegative = 1,  numel = 586

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9793e-01  +2.5200e+02  2.51e+02  9.41e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.5881e-01  +5.4420e+01  5.39e+01  4.12e-01  1.44e+01  3.83e-03  5.71e-01  5.95e-01  
  2  +5.1162e-01  +6.8198e+00  6.31e+00  1.12e-01  5.26e+00  1.82e-02  2.28e-01  9.90e-01  
  3  +4.9476e-01  +2.0316e+00  1.54e+00  2.51e-02  1.30e+00  6.96e-03  6.00e-02  7.53e-01  
  4  +4.5893e-01  +1.6732e+00  1.21e+00  8.74e-03  4.63e-01  1.14e-02  2.09e-02  6.78e-01  
  5  +4.2042e-01  +1.3671e+00  9.47e-01  4.92e-03  2.58e-01  1.02e-02  1.22e-02  4.66e-01  
  6  +3.6657e-01  +8.3065e-01  4.64e-01  2.52e-03  1.28e-01  1.63e-03  7.13e-03  6.13e-01  
  7  +3.3497e-01  +6.2628e-01  2.91e-01  1.51e-03  7.59e-02  8.92e-04  4.67e-03  4.04e-01  
  8  +3.0617e-01  +4.5726e-01  1.51e-01  7.59e-04  3.78e-02  4.02e-04  2.60e-03  4.95e-01  
  9  +2.8139e-01  +3.2467e-01  4.33e-02  2.10e-04  1.04e-02  8.67e-05  8.11e-04  7.79e-01  
 10  +2.7213e-01  +2.8146e-01  9.33e-03  4.42e-05  2.20e-03  1.46e-05  1.87e-04  8.43e-01  
 11  +2.6972e-01  +2.7074e-01  1.02e-03  4.78e-06  2.37e-04  1.30e-06  2.10e-05  9.23e-01  
 12  +2.6941e-01  +2.6943e-01  2.34e-05  1.10e-07  5.43e-06  2.55e-08  4.89e-07  9.83e-01  
 13  +2.6940e-01  +2.6940e-01  2.34e-07  1.10e-09  5.43e-08  2.55e-10  4.89e-09  9.90e-01  
 14  +2.6940e-01  +2.6940e-01  2.34e-09  1.10e-11  5.43e-10  2.55e-12  4.90e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9038ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.694e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 4.221e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 4.274e-03 seconds
Iteration: 8, Objective: 0.2694
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 346 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 4.148e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 346
  constraints   = 596
  nnz(P)        = 0
  nnz(A)        = 4269
  cones (total) = 1
    : Nonnegative = 1,  numel = 596

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9786e-01  +2.5202e+02  2.52e+02  9.42e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.5694e-01  +5.4476e+01  5.39e+01  4.13e-01  1.43e+01  3.83e-03  5.72e-01  5.94e-01  
  2  +5.1000e-01  +6.8659e+00  6.36e+00  1.12e-01  5.19e+00  1.83e-02  2.28e-01  9.90e-01  
  3  +4.9251e-01  +2.0229e+00  1.53e+00  2.39e-02  1.24e+00  7.20e-03  5.73e-02  7.64e-01  
  4  +4.5437e-01  +1.6473e+00  1.19e+00  8.61e-03  4.52e-01  1.09e-02  2.07e-02  6.78e-01  
  5  +4.1826e-01  +1.3738e+00  9.56e-01  5.09e-03  2.65e-01  9.82e-03  1.27e-02  4.38e-01  
  6  +3.6516e-01  +8.4823e-01  4.83e-01  2.66e-03  1.34e-01  1.78e-03  7.51e-03  6.00e-01  
  7  +3.3373e-01  +6.4187e-01  3.08e-01  1.64e-03  8.16e-02  9.78e-04  5.05e-03  3.83e-01  
  8  +2.9348e-01  +3.9295e-01  9.95e-02  5.18e-04  2.56e-02  2.22e-04  1.86e-03  6.86e-01  
  9  +2.8166e-01  +3.3596e-01  5.43e-02  2.73e-04  1.35e-02  1.02e-04  1.06e-03  5.93e-01  
 10  +2.7034e-01  +2.8066e-01  1.03e-02  5.07e-05  2.50e-03  1.71e-05  2.17e-04  8.12e-01  
 11  +2.6788e-01  +2.6916e-01  1.28e-03  6.25e-06  3.08e-04  1.77e-06  2.79e-05  9.06e-01  
 12  +2.6751e-01  +2.6755e-01  3.59e-05  1.75e-07  8.58e-06  3.50e-08  7.91e-07  9.87e-01  
 13  +2.6750e-01  +2.6750e-01  3.59e-07  1.75e-09  8.58e-08  3.50e-10  7.93e-09  9.90e-01  
 14  +2.6750e-01  +2.6750e-01  3.59e-09  1.75e-11  8.59e-10  3.50e-12  7.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0072ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.675e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 4.148e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 4.328e-03 seconds
Iteration: 9, Objective: 0.2675
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 356 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 3.366e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 356
  constraints   = 606
  nnz(P)        = 0
  nnz(A)        = 4352
  cones (total) = 1
    : Nonnegative = 1,  numel = 606

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9779e-01  +2.5211e+02  2.52e+02  9.42e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.5451e-01  +5.4520e+01  5.40e+01  4.15e-01  1.41e+01  3.84e-03  5.71e-01  5.94e-01  
  2  +5.0815e-01  +6.9377e+00  6.43e+00  1.11e-01  5.11e+00  1.85e-02  2.26e-01  9.90e-01  
  3  +4.8949e-01  +2.0663e+00  1.58e+00  2.32e-02  1.20e+00  7.69e-03  5.55e-02  7.70e-01  
  4  +4.4901e-01  +1.6177e+00  1.17e+00  8.44e-03  4.40e-01  1.06e-02  2.05e-02  6.56e-01  
  5  +4.0874e-01  +1.3047e+00  8.96e-01  4.87e-03  2.51e-01  8.50e-03  1.23e-02  4.76e-01  
  6  +3.4995e-01  +7.4727e-01  3.97e-01  2.19e-03  1.09e-01  1.07e-03  6.42e-03  6.76e-01  
  7  +3.2405e-01  +5.9199e-01  2.68e-01  1.44e-03  7.10e-02  6.17e-04  4.54e-03  3.93e-01  
  8  +2.8987e-01  +3.9128e-01  1.01e-01  5.28e-04  2.59e-02  1.70e-04  1.89e-03  7.13e-01  
  9  +2.7753e-01  +3.2994e-01  5.24e-02  2.64e-04  1.30e-02  7.98e-05  1.02e-03  5.66e-01  
 10  +2.6691e-01  +2.7860e-01  1.17e-02  5.74e-05  2.82e-03  1.55e-05  2.43e-04  8.05e-01  
 11  +2.6400e-01  +2.6535e-01  1.35e-03  6.56e-06  3.22e-04  1.59e-06  2.91e-05  9.00e-01  
 12  +2.6361e-01  +2.6365e-01  4.04e-05  1.96e-07  9.61e-06  3.81e-08  8.83e-07  9.83e-01  
 13  +2.6360e-01  +2.6360e-01  4.04e-07  1.96e-09  9.62e-08  3.81e-10  8.85e-09  9.90e-01  
 14  +2.6360e-01  +2.6360e-01  4.05e-09  1.96e-11  9.63e-10  3.81e-12  8.86e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2385ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.636e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 3.366e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 4.436e-03 seconds
Iteration: 10, Objective: 0.2636
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 366 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 4.013e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 366
  constraints   = 616
  nnz(P)        = 0
  nnz(A)        = 4401
  cones (total) = 1
    : Nonnegative = 1,  numel = 616

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9762e-01  +2.5220e+02  2.52e+02  9.43e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.5035e-01  +5.4665e+01  5.41e+01  4.16e-01  1.40e+01  3.84e-03  5.73e-01  5.93e-01  
  2  +5.0519e-01  +7.0711e+00  6.57e+00  1.11e-01  5.06e+00  1.89e-02  2.26e-01  9.90e-01  
  3  +4.8543e-01  +2.2722e+00  1.79e+00  2.47e-02  1.26e+00  8.61e-03  5.86e-02  7.54e-01  
  4  +4.3972e-01  +1.6454e+00  1.21e+00  8.56e-03  4.41e-01  1.03e-02  2.09e-02  6.73e-01  
  5  +3.9833e-01  +1.2793e+00  8.81e-01  4.92e-03  2.50e-01  7.11e-03  1.26e-02  4.91e-01  
  6  +3.3777e-01  +6.9230e-01  3.55e-01  1.97e-03  9.67e-02  8.71e-04  5.89e-03  7.10e-01  
  7  +2.9868e-01  +4.6467e-01  1.66e-01  8.88e-04  4.32e-02  2.93e-04  3.02e-03  6.28e-01  
  8  +2.7412e-01  +3.3484e-01  6.07e-02  3.11e-04  1.52e-02  8.15e-05  1.19e-03  7.93e-01  
  9  +2.6373e-01  +2.8329e-01  1.96e-02  9.78e-05  4.77e-03  2.12e-05  4.07e-04  8.43e-01  
 10  +2.5912e-01  +2.6317e-01  4.05e-03  1.97e-05  9.64e-04  4.06e-06  8.70e-05  8.38e-01  
 11  +2.5798e-01  +2.5825e-01  2.69e-04  1.30e-06  6.38e-05  2.54e-07  5.89e-06  9.37e-01  
 12  +2.5790e-01  +2.5790e-01  3.64e-06  1.77e-08  8.64e-07  3.37e-09  8.01e-08  9.88e-01  
 13  +2.5790e-01  +2.5790e-01  3.65e-08  1.77e-10  8.66e-09  3.38e-11  8.03e-10  9.90e-01  
 14  +2.5790e-01  +2.5790e-01  3.65e-10  1.77e-12  8.67e-11  3.39e-13  8.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0907ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.579e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 4.013e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 4.905e-03 seconds
Iteration: 11, Objective: 0.2579
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 376 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 3.403e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 376
  constraints   = 626
  nnz(P)        = 0
  nnz(A)        = 4494
  cones (total) = 1
    : Nonnegative = 1,  numel = 626

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9763e-01  +2.5218e+02  2.52e+02  9.43e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.4997e-01  +5.4666e+01  5.41e+01  4.18e-01  1.38e+01  3.85e-03  5.72e-01  5.93e-01  
  2  +5.0463e-01  +7.0862e+00  6.58e+00  1.11e-01  4.97e+00  1.90e-02  2.25e-01  9.90e-01  
  3  +4.8335e-01  +2.1316e+00  1.65e+00  2.21e-02  1.13e+00  8.47e-03  5.27e-02  7.82e-01  
  4  +4.2864e-01  +1.5069e+00  1.08e+00  6.86e-03  3.52e-01  1.07e-02  1.69e-02  7.16e-01  
  5  +3.8039e-01  +1.0358e+00  6.55e-01  3.76e-03  1.88e-01  3.39e-03  1.01e-02  5.89e-01  
  6  +3.3064e-01  +6.7364e-01  3.43e-01  1.87e-03  9.11e-02  1.29e-03  5.66e-03  5.25e-01  
  7  +2.8753e-01  +4.1683e-01  1.29e-01  6.95e-04  3.35e-02  2.44e-04  2.47e-03  7.59e-01  
  8  +2.7300e-01  +3.4623e-01  7.32e-02  3.76e-04  1.82e-02  1.12e-04  1.45e-03  6.27e-01  
  9  +2.5766e-01  +2.7081e-01  1.32e-02  6.56e-05  3.17e-03  1.60e-05  2.87e-04  8.46e-01  
 10  +2.5419e-01  +2.5482e-01  6.30e-04  3.12e-06  1.51e-04  6.21e-07  1.44e-05  9.60e-01  
 11  +2.5400e-01  +2.5401e-01  7.82e-06  3.88e-08  1.87e-06  7.12e-09  1.80e-07  9.90e-01  
 12  +2.5400e-01  +2.5400e-01  7.82e-08  3.88e-10  1.87e-08  7.12e-11  1.80e-09  9.90e-01  
 13  +2.5400e-01  +2.5400e-01  7.82e-10  3.88e-12  1.87e-10  7.12e-13  1.80e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4748ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.540e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 3.403e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 4.772e-03 seconds
Iteration: 12, Objective: 0.2540
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 386 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 3.290e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 386
  constraints   = 636
  nnz(P)        = 0
  nnz(A)        = 4566
  cones (total) = 1
    : Nonnegative = 1,  numel = 636

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9765e-01  +2.5228e+02  2.52e+02  9.44e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.4679e-01  +5.4741e+01  5.42e+01  4.17e-01  1.36e+01  3.87e-03  5.70e-01  5.93e-01  
  2  +5.0167e-01  +7.1099e+00  6.61e+00  1.09e-01  4.87e+00  1.91e-02  2.23e-01  9.90e-01  
  3  +4.7842e-01  +2.1180e+00  1.64e+00  2.10e-02  1.06e+00  8.64e-03  5.02e-02  7.90e-01  
  4  +4.2677e-01  +1.5234e+00  1.10e+00  7.62e-03  3.85e-01  9.11e-03  1.90e-02  6.74e-01  
  5  +3.9444e-01  +1.2515e+00  8.57e-01  5.19e-03  2.59e-01  5.63e-03  1.35e-02  4.36e-01  
  6  +3.3404e-01  +7.2989e-01  3.96e-01  2.24e-03  1.08e-01  1.08e-03  6.63e-03  6.78e-01  
  7  +3.0353e-01  +5.4562e-01  2.42e-01  1.33e-03  6.38e-02  5.63e-04  4.32e-03  4.32e-01  
  8  +2.7514e-01  +3.8152e-01  1.06e-01  5.69e-04  2.72e-02  2.14e-04  2.06e-03  5.88e-01  
  9  +2.6348e-01  +3.2155e-01  5.81e-02  3.00e-04  1.44e-02  1.06e-04  1.15e-03  5.58e-01  
 10  +2.5209e-01  +2.6555e-01  1.35e-02  6.77e-05  3.25e-03  1.82e-05  2.83e-04  8.56e-01  
 11  +2.4876e-01  +2.5024e-01  1.48e-03  7.42e-06  3.56e-04  1.62e-06  3.26e-05  9.17e-01  
 12  +2.4833e-01  +2.4843e-01  9.87e-05  4.92e-07  2.35e-05  7.94e-08  2.24e-06  9.75e-01  
 13  +2.4830e-01  +2.4830e-01  1.09e-06  5.44e-09  2.60e-07  8.72e-10  2.49e-08  9.89e-01  
 14  +2.4830e-01  +2.4830e-01  1.09e-08  5.45e-11  2.61e-09  8.74e-12  2.49e-10  9.90e-01  
 15  +2.4830e-01  +2.4830e-01  1.10e-10  5.47e-13  2.62e-11  8.79e-14  2.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.192ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.483e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 3.290e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 5.289e-03 seconds
Iteration: 13, Objective: 0.2483
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 396 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 3.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 396
  constraints   = 646
  nnz(P)        = 0
  nnz(A)        = 4640
  cones (total) = 1
    : Nonnegative = 1,  numel = 646

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9763e-01  +2.5222e+02  2.52e+02  9.44e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.4440e-01  +5.4795e+01  5.43e+01  4.17e-01  1.35e+01  3.88e-03  5.69e-01  5.93e-01  
  2  +4.9945e-01  +7.1451e+00  6.65e+00  1.08e-01  4.77e+00  1.92e-02  2.22e-01  9.90e-01  
  3  +4.7492e-01  +2.2211e+00  1.75e+00  2.16e-02  1.08e+00  9.01e-03  5.20e-02  7.80e-01  
  4  +4.1313e-01  +1.5027e+00  1.09e+00  7.05e-03  3.52e-01  9.12e-03  1.77e-02  7.23e-01  
  5  +3.8366e-01  +1.2095e+00  8.26e-01  5.02e-03  2.48e-01  4.68e-03  1.32e-02  4.31e-01  
  6  +3.1742e-01  +6.3586e-01  3.18e-01  1.79e-03  8.58e-02  5.63e-04  5.47e-03  7.53e-01  
  7  +2.8331e-01  +4.5013e-01  1.67e-01  9.32e-04  4.42e-02  2.10e-04  3.20e-03  6.38e-01  
  8  +2.5854e-01  +3.1563e-01  5.71e-02  3.06e-04  1.45e-02  6.45e-05  1.17e-03  7.24e-01  
  9  +2.4805e-01  +2.6244e-01  1.44e-02  7.55e-05  3.57e-03  1.17e-05  3.14e-04  9.00e-01  
 10  +2.4475e-01  +2.4626e-01  1.51e-03  7.90e-06  3.72e-04  1.04e-06  3.51e-05  9.29e-01  
 11  +2.4434e-01  +2.4448e-01  1.33e-04  6.93e-07  3.26e-05  8.65e-08  3.26e-06  9.45e-01  
 12  +2.4430e-01  +2.4430e-01  1.57e-06  8.14e-09  3.83e-07  1.02e-09  3.86e-08  9.89e-01  
 13  +2.4430e-01  +2.4430e-01  1.57e-08  8.16e-11  3.84e-09  1.02e-11  3.87e-10  9.90e-01  
 14  +2.4430e-01  +2.4430e-01  1.57e-10  8.16e-13  3.84e-11  1.02e-13  3.88e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0171ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.443e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 3.001e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 5.008e-03 seconds
Iteration: 14, Objective: 0.2443
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:49 PM: Your problem has 406 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:49 PM: Finished problem compilation (took 4.153e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 406
  constraints   = 656
  nnz(P)        = 0
  nnz(A)        = 4735
  cones (total) = 1
    : Nonnegative = 1,  numel = 656

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9762e-01  +2.5216e+02  2.52e+02  9.44e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.4220e-01  +5.4734e+01  5.42e+01  4.17e-01  1.33e+01  3.89e-03  5.67e-01  5.94e-01  
  2  +4.9683e-01  +7.3498e+00  6.85e+00  1.09e-01  4.72e+00  1.93e-02  2.22e-01  9.81e-01  
  3  +4.6821e-01  +1.9983e+00  1.53e+00  1.77e-02  8.80e-01  8.67e-03  4.28e-02  8.26e-01  
  4  +4.1751e-01  +1.7120e+00  1.29e+00  8.39e-03  4.17e-01  1.02e-02  2.09e-02  6.01e-01  
  5  +3.8165e-01  +1.2722e+00  8.91e-01  5.53e-03  2.69e-01  4.08e-03  1.47e-02  4.95e-01  
  6  +3.1197e-01  +6.2117e-01  3.09e-01  1.73e-03  8.16e-02  5.83e-04  5.26e-03  7.71e-01  
  7  +2.7712e-01  +4.3105e-01  1.54e-01  8.56e-04  3.99e-02  2.01e-04  2.95e-03  6.70e-01  
  8  +2.5416e-01  +3.0515e-01  5.10e-02  2.71e-04  1.25e-02  5.97e-05  1.03e-03  7.59e-01  
  9  +2.4662e-01  +2.6781e-01  2.12e-02  1.09e-04  5.09e-03  2.34e-05  4.35e-04  6.77e-01  
 10  +2.4252e-01  +2.4895e-01  6.43e-03  3.23e-05  1.51e-03  6.81e-06  1.34e-04  7.34e-01  
 11  +2.4128e-01  +2.4347e-01  2.19e-03  1.08e-05  5.10e-04  2.23e-06  4.63e-05  7.10e-01  
 12  +2.4066e-01  +2.4082e-01  1.62e-04  8.01e-07  3.77e-05  1.22e-07  3.51e-06  9.81e-01  
 13  +2.4060e-01  +2.4060e-01  2.26e-06  1.12e-08  5.26e-07  1.69e-09  4.91e-08  9.86e-01  
 14  +2.4060e-01  +2.4060e-01  2.27e-08  1.12e-10  5.27e-09  1.69e-11  4.92e-10  9.90e-01  
 15  +2.4060e-01  +2.4060e-01  2.27e-10  1.12e-12  5.27e-11  1.69e-13  4.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.49ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:49 PM: Optimal value: 2.406e-01
(CVXPY) Sep 20 03:13:49 PM: Compilation took 4.153e-03 seconds
(CVXPY) Sep 20 03:13:49 PM: Solver (including time spent in interface) took 6.441e-03 seconds
Iteration: 15, Objective: 0.2406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:50 PM: Your problem has 416 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:50 PM: Finished problem compilation (took 3.284e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 416
  constraints   = 666
  nnz(P)        = 0
  nnz(A)        = 4812
  cones (total) = 1
    : Nonnegative = 1,  numel = 666

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9761e-01  +2.5221e+02  2.52e+02  9.45e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.4067e-01  +5.4792e+01  5.43e+01  4.18e-01  1.32e+01  3.89e-03  5.67e-01  5.94e-01  
  2  +4.9536e-01  +7.9124e+00  7.42e+00  1.15e-01  4.93e+00  1.92e-02  2.33e-01  9.47e-01  
  3  +4.6626e-01  +2.0326e+00  1.57e+00  1.82e-02  8.99e-01  8.12e-03  4.44e-02  8.31e-01  
  4  +4.1522e-01  +1.7527e+00  1.34e+00  8.78e-03  4.33e-01  9.54e-03  2.20e-02  5.95e-01  
  5  +3.6407e-01  +1.0236e+00  6.60e-01  4.22e-03  2.02e-01  2.00e-04  1.17e-02  7.70e-01  
  6  +3.1588e-01  +6.8027e-01  3.64e-01  2.11e-03  9.92e-02  1.29e-04  6.46e-03  5.14e-01  
  7  +2.6586e-01  +3.7559e-01  1.10e-01  6.04e-04  2.79e-02  6.45e-05  2.14e-03  8.42e-01  
  8  +2.5141e-01  +3.0075e-01  4.93e-02  2.66e-04  1.22e-02  3.32e-05  1.01e-03  6.97e-01  
  9  +2.4257e-01  +2.5609e-01  1.35e-02  7.12e-05  3.28e-03  9.52e-06  2.86e-04  7.90e-01  
 10  +2.4017e-01  +2.4559e-01  5.41e-03  2.77e-05  1.28e-03  3.84e-06  1.16e-04  6.61e-01  
 11  +2.3908e-01  +2.4079e-01  1.72e-03  8.55e-06  3.94e-04  1.26e-06  3.82e-05  8.78e-01  
 12  +2.3854e-01  +2.3864e-01  1.04e-04  5.14e-07  2.37e-05  6.87e-08  2.40e-06  9.76e-01  
 13  +2.3850e-01  +2.3850e-01  1.09e-06  5.35e-09  2.46e-07  7.10e-10  2.52e-08  9.90e-01  
 14  +2.3850e-01  +2.3850e-01  1.09e-08  5.36e-11  2.47e-09  7.12e-12  2.52e-10  9.90e-01  
 15  +2.3850e-01  +2.3850e-01  1.09e-10  5.36e-13  2.47e-11  7.14e-14  2.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.4604ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:50 PM: Optimal value: 2.385e-01
(CVXPY) Sep 20 03:13:50 PM: Compilation took 3.284e-03 seconds
(CVXPY) Sep 20 03:13:50 PM: Solver (including time spent in interface) took 7.257e-03 seconds
Iteration: 16, Objective: 0.2385
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:50 PM: Your problem has 426 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:50 PM: Finished problem compilation (took 4.307e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 426
  constraints   = 676
  nnz(P)        = 0
  nnz(A)        = 4880
  cones (total) = 1
    : Nonnegative = 1,  numel = 676

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9753e-01  +2.5224e+02  2.52e+02  9.45e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.3666e-01  +5.4955e+01  5.44e+01  4.19e-01  1.31e+01  3.90e-03  5.67e-01  5.93e-01  
  2  +4.9156e-01  +8.2503e+00  7.76e+00  1.19e-01  5.02e+00  1.94e-02  2.40e-01  9.30e-01  
  3  +4.6224e-01  +2.0985e+00  1.64e+00  1.93e-02  9.44e-01  7.75e-03  4.71e-02  8.24e-01  
  4  +4.0994e-01  +1.8788e+00  1.47e+00  9.74e-03  4.75e-01  9.21e-03  2.45e-02  5.97e-01  
  5  +3.5758e-01  +1.0840e+00  7.26e-01  4.51e-03  2.15e-01  7.65e-04  1.24e-02  7.69e-01  
  6  +3.1015e-01  +6.8507e-01  3.75e-01  2.19e-03  1.02e-01  3.48e-04  6.69e-03  5.23e-01  
  7  +2.8354e-01  +5.1213e-01  2.29e-01  1.29e-03  5.96e-02  2.05e-04  4.29e-03  4.14e-01  
  8  +2.6280e-01  +3.8494e-01  1.22e-01  6.76e-04  3.09e-02  1.07e-04  2.41e-03  4.89e-01  
  9  +2.4637e-01  +2.8952e-01  4.31e-02  2.34e-04  1.07e-02  3.67e-05  9.02e-04  6.70e-01  
 10  +2.3893e-01  +2.4870e-01  9.77e-03  5.28e-05  2.39e-03  7.86e-06  2.15e-04  7.87e-01  
 11  +2.3734e-01  +2.4011e-01  2.76e-03  1.49e-05  6.71e-04  2.08e-06  6.37e-05  8.81e-01  
 12  +2.3681e-01  +2.3783e-01  1.02e-03  5.37e-06  2.42e-04  7.51e-07  2.40e-05  7.27e-01  
 13  +2.3651e-01  +2.3655e-01  4.17e-05  2.18e-07  9.79e-06  2.86e-08  9.97e-07  9.66e-01  
 14  +2.3650e-01  +2.3650e-01  4.24e-07  2.21e-09  9.95e-08  2.90e-10  1.02e-08  9.90e-01  
 15  +2.3650e-01  +2.3650e-01  4.24e-09  2.22e-11  9.96e-10  2.91e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.6764ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:50 PM: Optimal value: 2.365e-01
(CVXPY) Sep 20 03:13:50 PM: Compilation took 4.307e-03 seconds
(CVXPY) Sep 20 03:13:50 PM: Solver (including time spent in interface) took 4.058e-03 seconds
Iteration: 17, Objective: 0.2365
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:50 PM: Your problem has 428 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:50 PM: Finished problem compilation (took 2.803e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 428
  constraints   = 678
  nnz(P)        = 0
  nnz(A)        = 4900
  cones (total) = 1
    : Nonnegative = 1,  numel = 678

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9747e-01  +2.5227e+02  2.52e+02  9.45e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.3527e-01  +5.5044e+01  5.45e+01  4.20e-01  1.31e+01  3.90e-03  5.69e-01  5.92e-01  
  2  +4.8976e-01  +7.9030e+00  7.41e+00  1.14e-01  4.85e+00  1.96e-02  2.33e-01  9.53e-01  
  3  +4.5937e-01  +2.0718e+00  1.61e+00  1.88e-02  9.17e-01  7.98e-03  4.60e-02  8.21e-01  
  4  +4.1533e-01  +1.9662e+00  1.55e+00  1.09e-02  5.30e-01  9.62e-03  2.71e-02  5.29e-01  
  5  +3.6853e-01  +1.3066e+00  9.38e-01  5.70e-03  2.74e-01  3.66e-03  1.52e-02  6.04e-01  
  6  +3.0353e-01  +6.0944e-01  3.06e-01  1.76e-03  8.20e-02  6.57e-04  5.43e-03  7.20e-01  
  7  +2.7718e-01  +4.6396e-01  1.87e-01  1.07e-03  4.91e-02  2.90e-04  3.64e-03  5.69e-01  
  8  +2.6276e-01  +3.8041e-01  1.18e-01  6.63e-04  3.03e-02  1.66e-04  2.37e-03  5.00e-01  
  9  +2.4589e-01  +2.8772e-01  4.18e-02  2.28e-04  1.04e-02  5.23e-05  8.80e-04  7.22e-01  
 10  +2.3854e-01  +2.4682e-01  8.28e-03  4.51e-05  2.04e-03  9.53e-06  1.84e-04  8.03e-01  
 11  +2.3744e-01  +2.4067e-01  3.23e-03  1.74e-05  7.83e-04  2.89e-06  7.46e-05  8.39e-01  
 12  +2.3680e-01  +2.3780e-01  1.01e-03  5.32e-06  2.39e-04  8.46e-07  2.38e-05  7.57e-01  
 13  +2.3651e-01  +2.3656e-01  4.19e-05  2.20e-07  9.88e-06  3.09e-08  1.01e-06  9.75e-01  
 14  +2.3650e-01  +2.3650e-01  4.27e-07  2.24e-09  1.01e-07  3.15e-10  1.03e-08  9.90e-01  
 15  +2.3650e-01  +2.3650e-01  4.27e-09  2.24e-11  1.01e-09  3.15e-12  1.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.2857ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:50 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:50 PM: Optimal value: 2.365e-01
(CVXPY) Sep 20 03:13:50 PM: Compilation took 2.803e-03 seconds
(CVXPY) Sep 20 03:13:50 PM: Solver (including time spent in interface) took 7.674e-03 seconds
FULL MODEL:
  Accruacy: 0.742
  Our objective: 0.484

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.032)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.164)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x5 = 0 AND x7 = 1)                       <-- (term's our objective: 0.052)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1)            <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.036)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0)                       <-- (term's our objective: 0.032)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.6203739643096924
Best over terms:
  Our final objective: 0.16399999999999995
    Its accruacy: 0.582
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16399999999999995
  Highest accruacy: 0.582
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

