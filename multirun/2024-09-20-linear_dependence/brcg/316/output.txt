Command:
python test_script.py -s linear_dependence -d 8 -n 50000 --seed 56 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.156
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.16224
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:50 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:50 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:50 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:50 PM: Finished problem compilation (took 1.083e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3196e+02  6.31e+02  1.70e-01  8.23e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6455e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0121e-01  +1.5742e+01  1.52e+01  4.25e-02  2.04e+01  4.79e-06  1.95e-01  4.49e-01  
  5  +5.0000e-01  +1.1596e+00  6.60e-01  1.97e-03  9.82e-01  2.75e-05  1.88e-01  3.06e-01  
  6  +4.9999e-01  +6.3614e-01  1.36e-01  4.06e-04  2.03e-01  9.18e-06  3.33e-02  8.38e-01  
  7  +4.9971e-01  +7.7359e-01  2.74e-01  6.38e-04  3.19e-01  1.57e-04  3.51e-03  9.35e-01  
  8  +4.8961e-01  +7.3107e-01  2.41e-01  2.92e-05  1.46e-02  5.06e-03  9.04e-05  9.74e-01  
  9  +4.7335e-01  +6.2471e-01  1.51e-01  7.90e-06  3.96e-03  7.74e-03  2.47e-05  7.50e-01  
 10  +4.6272e-01  +4.9879e-01  3.61e-02  1.93e-06  9.64e-04  7.43e-05  6.46e-06  8.63e-01  
 11  +4.5514e-01  +4.6118e-01  6.03e-03  2.92e-07  1.46e-04  1.04e-05  1.06e-06  8.50e-01  
 12  +4.5307e-01  +4.5343e-01  3.58e-04  1.50e-08  7.49e-06  2.63e-07  6.28e-08  9.75e-01  
 13  +4.5296e-01  +4.5296e-01  3.61e-06  1.50e-10  7.51e-08  2.65e-09  6.32e-10  9.90e-01  
 14  +4.5296e-01  +4.5296e-01  3.61e-08  1.50e-12  7.51e-10  2.65e-11  6.32e-12  9.90e-01  
 15  +4.5296e-01  +4.5296e-01  3.62e-10  1.51e-14  7.54e-12  3.19e-13  7.56e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 318.1869ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:51 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:51 PM: Optimal value: 4.530e-01
(CVXPY) Sep 20 03:15:51 PM: Compilation took 1.083e-01 seconds
(CVXPY) Sep 20 03:15:51 PM: Solver (including time spent in interface) took 3.492e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4530
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:51 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:51 PM: Finished problem compilation (took 1.122e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 319261
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3164e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6436e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5600e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.55e-01  
  5  +5.0003e-01  +1.6419e+00  1.14e+00  3.42e-03  1.77e+00  3.01e-05  1.88e-01  2.31e-01  
  6  +5.0000e-01  +6.5029e-01  1.50e-01  4.48e-04  2.33e-01  4.48e-06  3.20e-02  8.89e-01  
  7  +5.0000e-01  +7.1654e-01  2.17e-01  6.44e-04  3.34e-01  8.83e-06  2.01e-02  6.05e-01  
  8  +4.9998e-01  +7.2326e-01  2.23e-01  6.49e-04  3.37e-01  1.90e-05  8.40e-03  6.27e-01  
  9  +4.9835e-01  +7.2373e-01  2.25e-01  6.46e-05  3.39e-02  8.22e-04  1.79e-04  9.87e-01  
 10  +4.9403e-01  +7.0945e-01  2.15e-01  1.88e-05  9.85e-03  2.65e-03  5.08e-05  7.20e-01  
 11  +4.9033e-01  +6.9082e-01  2.00e-01  1.16e-05  6.06e-03  3.23e-03  3.11e-05  4.94e-01  
 12  +4.9092e-01  +6.8363e-01  1.93e-01  1.11e-05  5.80e-03  2.23e-03  2.98e-05  2.87e-01  
 13  +4.8983e-01  +6.6629e-01  1.76e-01  9.30e-06  4.87e-03  8.75e-04  2.50e-05  6.37e-01  
 14  +4.8577e-01  +6.4953e-01  1.64e-01  7.63e-06  3.99e-03  7.29e-04  2.07e-05  3.12e-01  
 15  +4.6287e-01  +5.5923e-01  9.64e-02  3.28e-06  1.71e-03  1.92e-04  9.30e-06  8.48e-01  
 16  +4.3330e-01  +4.5766e-01  2.44e-02  8.01e-07  4.17e-04  1.83e-06  2.47e-06  8.50e-01  
 17  +4.2239e-01  +4.2298e-01  5.83e-04  1.84e-08  9.58e-06  1.85e-08  5.86e-08  9.79e-01  
 18  +4.2210e-01  +4.2211e-01  5.84e-06  1.84e-10  9.58e-08  1.85e-10  5.87e-10  9.90e-01  
 19  +4.2210e-01  +4.2210e-01  5.84e-08  1.85e-12  9.59e-10  1.93e-12  6.10e-12  9.90e-01  
 20  +4.2210e-01  +4.2210e-01  5.85e-10  1.84e-14  9.60e-12  2.01e-14  6.35e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 469.811ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:51 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:51 PM: Optimal value: 4.221e-01
(CVXPY) Sep 20 03:15:51 PM: Compilation took 1.122e-01 seconds
(CVXPY) Sep 20 03:15:51 PM: Solver (including time spent in interface) took 5.004e-01 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:52 PM: Your problem has 25030 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:52 PM: Finished problem compilation (took 1.144e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25030
  constraints   = 50030
  nnz(P)        = 0
  nnz(A)        = 319693
  cones (total) = 1
    : Nonnegative = 1,  numel = 50030

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3156e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5602e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.55e-01  
  5  +5.0003e-01  +1.6488e+00  1.15e+00  3.44e-03  1.78e+00  3.02e-05  1.88e-01  2.30e-01  
  6  +5.0001e-01  +7.5257e-01  2.53e-01  7.54e-04  3.91e-01  7.12e-06  5.21e-02  7.74e-01  
  7  +5.0000e-01  +8.3396e-01  3.34e-01  9.92e-04  5.14e-01  1.31e-05  2.58e-02  7.49e-01  
  8  +4.9981e-01  +7.0575e-01  2.06e-01  3.87e-04  2.02e-01  1.03e-04  1.52e-03  9.49e-01  
  9  +4.9685e-01  +6.9793e-01  2.01e-01  3.54e-05  1.86e-02  1.54e-03  9.70e-05  9.36e-01  
 10  +4.9624e-01  +6.9573e-01  1.99e-01  2.76e-05  1.44e-02  1.74e-03  7.49e-05  3.30e-01  
 11  +4.9782e-01  +6.9289e-01  1.95e-01  2.11e-05  1.11e-02  6.19e-04  5.62e-05  9.30e-01  
 12  +4.9638e-01  +6.8769e-01  1.91e-01  1.36e-05  7.16e-03  7.95e-04  3.62e-05  4.83e-01  
 13  +4.9332e-01  +6.7570e-01  1.82e-01  9.03e-06  4.74e-03  8.54e-04  2.40e-05  5.23e-01  
 14  +4.9100e-01  +6.6630e-01  1.75e-01  8.14e-06  4.26e-03  7.30e-04  2.18e-05  2.22e-01  
 15  +4.8487e-01  +6.4067e-01  1.56e-01  7.28e-06  3.81e-03  6.88e-06  2.06e-05  7.89e-01  
 16  +4.7433e-01  +5.9582e-01  1.21e-01  5.56e-06  2.90e-03  7.76e-07  1.60e-05  8.59e-01  
 17  +4.5680e-01  +5.3778e-01  8.10e-02  2.99e-06  1.56e-03  7.01e-07  8.75e-06  6.46e-01  
 18  +4.3147e-01  +4.5324e-01  2.18e-02  7.09e-07  3.68e-04  2.14e-07  2.20e-06  8.91e-01  
 19  +4.3136e-01  +4.5287e-01  2.15e-02  7.00e-07  3.64e-04  2.18e-07  2.18e-06  6.34e-02  
 20  +4.3132e-01  +4.5274e-01  2.14e-02  6.94e-07  3.61e-04  2.34e-07  2.15e-06  1.35e-01  
 21  +4.2734e-01  +4.4002e-01  1.27e-02  4.06e-07  2.11e-04  1.50e-07  1.27e-06  5.08e-01  
 22  +4.2207e-01  +4.2315e-01  1.09e-03  3.45e-08  1.79e-05  1.68e-08  1.10e-07  9.90e-01  
 23  +4.2157e-01  +4.2158e-01  1.09e-05  3.46e-10  1.80e-07  1.68e-10  1.11e-09  9.90e-01  
 24  +4.2156e-01  +4.2156e-01  1.09e-07  3.46e-12  1.80e-09  1.68e-12  1.11e-11  9.90e-01  
 25  +4.2156e-01  +4.2156e-01  1.10e-09  3.49e-14  1.82e-11  1.68e-14  1.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 582.0616ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:52 PM: Optimal value: 4.216e-01
(CVXPY) Sep 20 03:15:52 PM: Compilation took 1.144e-01 seconds
(CVXPY) Sep 20 03:15:52 PM: Solver (including time spent in interface) took 6.140e-01 seconds
Iteration: 3, Objective: 0.4216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:15:52 PM: Your problem has 25033 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:15:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:15:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:15:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:15:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:15:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:15:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:15:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:15:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:15:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:15:52 PM: Finished problem compilation (took 1.122e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25033
  constraints   = 50033
  nnz(P)        = 0
  nnz(A)        = 320212
  cones (total) = 1
    : Nonnegative = 1,  numel = 50033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3465e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3154e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6433e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0120e-01  +1.5600e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.55e-01  
  5  +5.0003e-01  +1.6302e+00  1.13e+00  3.39e-03  1.75e+00  3.02e-05  1.88e-01  2.35e-01  
  6  +5.0001e-01  +7.5829e-01  2.58e-01  7.71e-04  4.00e-01  7.43e-06  5.30e-02  7.69e-01  
  7  +4.9999e-01  +7.4967e-01  2.50e-01  7.42e-04  3.85e-01  1.36e-05  2.08e-02  6.80e-01  
  8  +4.9968e-01  +7.2884e-01  2.29e-01  3.59e-04  1.87e-01  1.69e-04  1.28e-03  9.48e-01  
  9  +4.9371e-01  +7.1348e-01  2.20e-01  2.40e-05  1.26e-02  3.04e-03  6.58e-05  9.49e-01  
 10  +4.9240e-01  +6.9702e-01  2.05e-01  1.57e-05  8.21e-03  2.89e-03  4.25e-05  6.13e-01  
 11  +4.8522e-01  +6.6895e-01  1.84e-01  8.52e-06  4.46e-03  3.78e-03  2.32e-05  5.38e-01  
 12  +4.8268e-01  +6.5733e-01  1.75e-01  7.70e-06  4.03e-03  3.48e-03  2.11e-05  1.37e-01  
 13  +4.8137e-01  +6.4879e-01  1.67e-01  7.43e-06  3.88e-03  2.96e-03  2.11e-05  6.18e-02  
 14  +4.5723e-01  +5.3332e-01  7.61e-02  2.86e-06  1.49e-03  3.02e-04  8.48e-06  8.32e-01  
 15  +4.4499e-01  +5.0306e-01  5.81e-02  1.95e-06  1.01e-03  1.13e-04  5.83e-06  6.34e-01  
 16  +4.3459e-01  +4.6668e-01  3.21e-02  1.05e-06  5.48e-04  5.52e-05  3.25e-06  4.85e-01  
 17  +4.3439e-01  +4.6505e-01  3.07e-02  9.93e-07  5.16e-04  3.00e-05  3.06e-06  4.82e-01  
 18  +4.3377e-01  +4.6270e-01  2.89e-02  9.30e-07  4.84e-04  2.08e-05  2.87e-06  3.32e-01  
 19  +4.2646e-01  +4.3835e-01  1.19e-02  3.81e-07  1.98e-04  7.54e-06  1.21e-06  6.27e-01  
 20  +4.2308e-01  +4.2716e-01  4.08e-03  1.31e-07  6.79e-05  1.60e-06  4.18e-07  7.90e-01  
 21  +4.2161e-01  +4.2236e-01  7.52e-04  2.41e-08  1.25e-05  7.69e-08  7.75e-08  9.59e-01  
 22  +4.2126e-01  +4.2127e-01  8.04e-06  2.57e-10  1.34e-07  7.75e-10  8.30e-10  9.90e-01  
 23  +4.2126e-01  +4.2126e-01  8.04e-08  2.57e-12  1.34e-09  7.75e-12  8.30e-12  9.90e-01  
 24  +4.2126e-01  +4.2126e-01  8.16e-10  2.61e-14  1.36e-11  7.75e-14  8.30e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 570.7472ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:15:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:15:53 PM: Optimal value: 4.213e-01
(CVXPY) Sep 20 03:15:53 PM: Compilation took 1.122e-01 seconds
(CVXPY) Sep 20 03:15:53 PM: Solver (including time spent in interface) took 6.007e-01 seconds
FULL MODEL:
  Accruacy: 0.57924
  Our objective: 0.15847999999999995

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.156)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.00076)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.00072)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0006)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.396782398223877
Best over terms:
  Our final objective: 0.15600000000000006
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15600000000000006
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

