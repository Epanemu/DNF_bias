Command:
python test_script.py -s linear_dependence -d 4 -n 10000 --seed 34 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29960000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.2996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:36 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:36 PM: Finished problem compilation (took 1.490e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0010e+03  5.00e+03  9.84e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +6.0817e-01  +9.6883e+02  9.68e+02  3.38e-01  4.80e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5098e-01  +1.5075e+02  1.50e+02  1.40e-01  2.43e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1053e-01  +3.2009e+01  3.15e+01  1.11e-01  1.89e+01  1.74e-05  2.25e-01  6.86e-02  
  4  +5.0001e-01  +1.1705e+00  6.70e-01  4.50e-03  7.74e-01  4.85e-06  1.42e-01  9.50e-01  
  5  +4.9966e-01  +9.0855e-01  4.09e-01  2.66e-03  4.59e-01  9.47e-06  2.80e-02  8.64e-01  
  6  +4.7822e-01  +9.7500e-01  4.97e-01  2.54e-04  4.47e-02  4.03e-04  7.28e-04  9.80e-01  
  7  +4.4027e-01  +6.2946e-01  1.89e-01  4.71e-05  8.24e-03  3.63e-04  1.44e-04  8.26e-01  
  8  +4.0597e-01  +4.3953e-01  3.36e-02  7.89e-06  1.37e-03  2.86e-06  3.24e-05  9.17e-01  
  9  +3.9717e-01  +3.9776e-01  5.87e-04  1.31e-07  2.28e-05  2.72e-08  5.97e-07  9.85e-01  
 10  +3.9700e-01  +3.9701e-01  5.87e-06  1.31e-09  2.27e-07  2.72e-10  5.98e-09  9.90e-01  
 11  +3.9700e-01  +3.9700e-01  5.87e-08  1.31e-11  2.27e-09  2.74e-12  6.03e-11  9.90e-01  
 12  +3.9700e-01  +3.9700e-01  5.87e-10  1.31e-13  2.28e-11  2.77e-14  6.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.2044ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:36 PM: Optimal value: 3.970e-01
(CVXPY) Sep 20 03:06:36 PM: Compilation took 1.490e-02 seconds
(CVXPY) Sep 20 03:06:36 PM: Solver (including time spent in interface) took 3.799e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3970
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:36 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:36 PM: Finished problem compilation (took 1.464e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 44642
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +5.0015e+03  5.00e+03  9.84e-01  9.26e+01  1.00e+00  1.00e+00   ------   
  1  +6.0792e-01  +9.6946e+02  9.69e+02  3.39e-01  5.15e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5065e-01  +1.5005e+02  1.50e+02  1.39e-01  2.60e+01  8.26e-03  2.27e-01  7.28e-01  
  3  +5.1036e-01  +3.1651e+01  3.11e+01  1.10e-01  2.01e+01  1.74e-05  2.24e-01  7.18e-02  
  4  +5.0028e-01  +2.0530e+00  1.55e+00  1.04e-02  1.90e+00  5.63e-06  1.75e-01  5.39e-01  
  5  +4.9998e-01  +8.2995e-01  3.30e-01  2.20e-03  4.07e-01  2.55e-06  3.81e-02  8.59e-01  
  6  +4.9200e-01  +1.6884e+00  1.20e+00  8.95e-04  1.71e-01  1.41e-04  2.35e-03  9.89e-01  
  7  +4.7388e-01  +1.2839e+00  8.10e-01  2.38e-04  4.55e-02  2.75e-04  6.19e-04  7.47e-01  
  8  +4.6451e-01  +1.1389e+00  6.74e-01  1.53e-04  2.91e-02  2.31e-04  3.95e-04  4.89e-01  
  9  +4.6851e-01  +1.0280e+00  5.60e-01  1.38e-04  2.63e-02  1.01e-04  3.56e-04  3.99e-01  
 10  +4.3801e-01  +8.0819e-01  3.70e-01  6.92e-05  1.31e-02  7.18e-05  1.88e-04  5.24e-01  
 11  +3.8554e-01  +4.8689e-01  1.01e-01  1.86e-05  3.49e-03  6.27e-07  5.89e-05  8.30e-01  
 12  +3.5396e-01  +3.6289e-01  8.92e-03  1.63e-06  3.03e-04  2.35e-07  5.88e-06  9.38e-01  
 13  +3.5034e-01  +3.5044e-01  9.70e-05  1.76e-08  3.28e-06  2.42e-09  6.52e-08  9.89e-01  
 14  +3.5030e-01  +3.5030e-01  9.70e-07  1.76e-10  3.28e-08  2.42e-11  6.52e-10  9.90e-01  
 15  +3.5030e-01  +3.5030e-01  9.70e-09  1.76e-12  3.28e-10  2.43e-13  6.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.575ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:36 PM: Optimal value: 3.503e-01
(CVXPY) Sep 20 03:06:36 PM: Compilation took 1.464e-02 seconds
(CVXPY) Sep 20 03:06:36 PM: Solver (including time spent in interface) took 5.110e-02 seconds
FULL MODEL:
  Accruacy: 0.6498
  Our objective: 0.29960000000000003

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2996)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4932034015655518
Best over terms:
  Our final objective: 0.29960000000000003
    Its accruacy: 0.6498
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29960000000000003
  Highest accruacy: 0.6498
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

