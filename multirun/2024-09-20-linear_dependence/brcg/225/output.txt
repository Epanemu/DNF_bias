Command:
python test_script.py -s linear_dependence -d 6 -n 5000 --seed 43 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1372
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 6.

Computed total variation: 0.1572
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:36 PM: Your problem has 2513 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Finished problem compilation (took 9.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2513
  constraints   = 5013
  nnz(P)        = 0
  nnz(A)        = 22513
  cones (total) = 1
    : Nonnegative = 1,  numel = 5013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.79e-01  6.97e+01  1.00e+00  1.00e+00   ------   
  1  +5.9310e-01  +5.1464e+02  5.14e+02  3.83e-01  4.22e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4180e-01  +6.8264e+01  6.77e+01  1.46e-01  2.04e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.0996e-01  +1.6775e+01  1.63e+01  1.03e-01  1.40e+01  2.83e-05  2.38e-01  1.32e-01  
  4  +5.0021e-01  +1.0118e+00  5.12e-01  4.91e-03  6.85e-01  6.90e-06  1.17e-01  9.90e-01  
  5  +5.0000e-01  +6.1285e-01  1.13e-01  1.07e-03  1.50e-01  3.04e-06  2.49e-02  8.36e-01  
  6  +4.9683e-01  +8.1752e-01  3.21e-01  5.10e-04  7.23e-02  1.18e-04  1.59e-03  9.71e-01  
  7  +4.8838e-01  +6.9280e-01  2.04e-01  1.26e-04  1.78e-02  2.31e-04  3.86e-04  7.67e-01  
  8  +4.7692e-01  +5.3784e-01  6.09e-02  3.32e-05  4.69e-03  7.10e-06  1.09e-04  8.70e-01  
  9  +4.6775e-01  +4.8429e-01  1.65e-02  8.08e-06  1.14e-03  1.24e-06  2.80e-05  9.34e-01  
 10  +4.6327e-01  +4.6536e-01  2.09e-03  9.04e-07  1.28e-04  1.64e-07  3.57e-06  9.22e-01  
 11  +4.6251e-01  +4.6254e-01  3.12e-05  1.28e-08  1.80e-06  2.47e-09  5.36e-08  9.87e-01  
 12  +4.6250e-01  +4.6250e-01  3.12e-07  1.28e-10  1.80e-08  2.47e-11  5.36e-10  9.90e-01  
 13  +4.6250e-01  +4.6250e-01  3.12e-09  1.28e-12  1.80e-10  2.60e-13  5.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.1007ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:36 PM: Optimal value: 4.625e-01
(CVXPY) Sep 20 03:09:36 PM: Compilation took 9.000e-03 seconds
(CVXPY) Sep 20 03:09:36 PM: Solver (including time spent in interface) took 2.218e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4625
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:36 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Finished problem compilation (took 1.022e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 26981
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.79e-01  7.30e+01  1.00e+00  1.00e+00   ------   
  1  +5.9292e-01  +5.1501e+02  5.14e+02  3.84e-01  4.42e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4143e-01  +6.7906e+01  6.74e+01  1.46e-01  2.12e+01  1.16e-02  2.44e-01  8.29e-01  
  3  +5.0976e-01  +1.6570e+01  1.61e+01  1.03e-01  1.45e+01  2.84e-05  2.37e-01  1.39e-01  
  4  +5.0056e-01  +1.6130e+00  1.11e+00  1.07e-02  1.54e+00  8.18e-06  1.57e-01  6.38e-01  
  5  +5.0006e-01  +7.2318e-01  2.23e-01  2.12e-03  3.11e-01  2.91e-06  4.84e-02  7.64e-01  
  6  +4.9995e-01  +7.5489e-01  2.55e-01  2.31e-03  3.39e-01  6.34e-06  1.90e-02  7.34e-01  
  7  +4.9766e-01  +6.9615e-01  1.98e-01  4.35e-04  6.45e-02  5.90e-05  1.29e-03  9.35e-01  
  8  +4.9575e-01  +6.8172e-01  1.86e-01  2.49e-04  3.70e-02  8.53e-05  7.16e-04  5.14e-01  
  9  +4.9137e-01  +6.4464e-01  1.53e-01  9.99e-05  1.48e-02  9.25e-05  2.79e-04  9.36e-01  
 10  +4.8912e-01  +6.3750e-01  1.48e-01  8.00e-05  1.19e-02  9.22e-05  2.23e-04  3.12e-01  
 11  +4.8566e-01  +6.2205e-01  1.36e-01  6.48e-05  9.61e-03  6.48e-05  1.82e-04  4.41e-01  
 12  +4.8061e-01  +6.0139e-01  1.21e-01  5.45e-05  8.07e-03  2.66e-05  1.55e-04  6.18e-01  
 13  +4.6567e-01  +5.4823e-01  8.26e-02  2.99e-05  4.42e-03  1.68e-05  8.76e-05  5.92e-01  
 14  +4.6429e-01  +5.4324e-01  7.89e-02  2.84e-05  4.19e-03  1.54e-05  8.33e-05  1.39e-01  
 15  +4.5340e-01  +5.0545e-01  5.20e-02  1.77e-05  2.61e-03  9.41e-06  5.34e-05  4.02e-01  
 16  +4.3704e-01  +4.4925e-01  1.22e-02  3.84e-06  5.66e-04  1.53e-06  1.20e-05  9.90e-01  
 17  +4.3163e-01  +4.3190e-01  2.70e-04  8.40e-08  1.24e-05  3.05e-08  2.68e-07  9.80e-01  
 18  +4.3150e-01  +4.3150e-01  2.70e-06  8.40e-10  1.24e-07  3.05e-10  2.68e-09  9.90e-01  
 19  +4.3150e-01  +4.3150e-01  2.70e-08  8.40e-12  1.24e-09  3.06e-12  2.68e-11  9.90e-01  
 20  +4.3150e-01  +4.3150e-01  2.70e-10  8.40e-14  1.24e-11  3.07e-14  2.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.7887ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:36 PM: Optimal value: 4.315e-01
(CVXPY) Sep 20 03:09:36 PM: Compilation took 1.022e-02 seconds
(CVXPY) Sep 20 03:09:36 PM: Solver (including time spent in interface) took 3.565e-02 seconds
Iteration: 2, Objective: 0.4315
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:36 PM: Your problem has 2529 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Finished problem compilation (took 9.122e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2529
  constraints   = 5029
  nnz(P)        = 0
  nnz(A)        = 27645
  cones (total) = 1
    : Nonnegative = 1,  numel = 5029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.79e-01  7.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.9286e-01  +5.1509e+02  5.14e+02  3.84e-01  4.42e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4134e-01  +6.7834e+01  6.73e+01  1.46e-01  2.11e+01  1.16e-02  2.44e-01  8.30e-01  
  3  +5.0974e-01  +1.6541e+01  1.60e+01  1.02e-01  1.45e+01  2.84e-05  2.37e-01  1.41e-01  
  4  +5.0050e-01  +1.5270e+00  1.03e+00  9.89e-03  1.43e+00  8.11e-06  1.52e-01  6.78e-01  
  5  +5.0013e-01  +8.4993e-01  3.50e-01  3.34e-03  4.88e-01  3.85e-06  6.82e-02  5.85e-01  
  6  +5.0008e-01  +8.4684e-01  3.47e-01  3.27e-03  4.77e-01  5.10e-06  3.85e-02  5.69e-01  
  7  +5.0002e-01  +8.5527e-01  3.55e-01  3.12e-03  4.57e-01  6.81e-06  2.11e-02  6.17e-01  
  8  +4.9745e-01  +7.4570e-01  2.48e-01  4.00e-04  5.95e-02  6.67e-05  1.19e-03  9.49e-01  
  9  +4.9334e-01  +7.0179e-01  2.08e-01  1.81e-04  2.69e-02  1.00e-04  5.25e-04  6.22e-01  
 10  +4.9523e-01  +7.1523e-01  2.20e-01  1.73e-04  2.58e-02  8.57e-05  4.85e-04  3.52e-01  
 11  +4.9001e-01  +6.6557e-01  1.76e-01  9.24e-05  1.37e-02  6.07e-05  2.58e-04  8.15e-01  
 12  +4.8730e-01  +6.5533e-01  1.68e-01  7.85e-05  1.17e-02  5.78e-05  2.20e-04  2.39e-01  
 13  +4.8469e-01  +6.4248e-01  1.58e-01  7.25e-05  1.08e-02  4.41e-05  2.05e-04  2.62e-01  
 14  +4.7366e-01  +5.9428e-01  1.21e-01  5.19e-05  7.68e-03  1.87e-05  1.52e-04  6.33e-01  
 15  +4.4716e-01  +4.9547e-01  4.83e-02  1.66e-05  2.46e-03  6.41e-06  5.18e-05  7.64e-01  
 16  +4.3880e-01  +4.6640e-01  2.76e-02  9.27e-06  1.37e-03  3.61e-06  2.96e-05  4.48e-01  
 17  +4.3209e-01  +4.4301e-01  1.09e-02  3.58e-06  5.27e-04  1.64e-06  1.17e-05  9.90e-01  
 18  +4.2766e-01  +4.2847e-01  8.14e-04  2.66e-07  3.92e-05  1.20e-07  8.88e-07  9.29e-01  
 19  +4.2730e-01  +4.2731e-01  8.29e-06  2.71e-09  3.99e-07  1.22e-09  9.06e-09  9.90e-01  
 20  +4.2730e-01  +4.2730e-01  8.29e-08  2.71e-11  3.99e-09  1.22e-11  9.06e-11  9.90e-01  
 21  +4.2730e-01  +4.2730e-01  8.29e-10  2.71e-13  3.99e-11  1.22e-13  9.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.5561ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:36 PM: Optimal value: 4.273e-01
(CVXPY) Sep 20 03:09:36 PM: Compilation took 9.122e-03 seconds
(CVXPY) Sep 20 03:09:36 PM: Solver (including time spent in interface) took 3.919e-02 seconds
Iteration: 3, Objective: 0.4273
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:36 PM: Your problem has 2532 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Finished problem compilation (took 1.046e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2532
  constraints   = 5032
  nnz(P)        = 0
  nnz(A)        = 27891
  cones (total) = 1
    : Nonnegative = 1,  numel = 5032

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.9284e-01  +5.1507e+02  5.14e+02  3.84e-01  4.42e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4129e-01  +6.7770e+01  6.72e+01  1.46e-01  2.11e+01  1.16e-02  2.44e-01  8.31e-01  
  3  +5.0972e-01  +1.6521e+01  1.60e+01  1.02e-01  1.44e+01  2.84e-05  2.37e-01  1.42e-01  
  4  +5.0051e-01  +1.5292e+00  1.03e+00  9.91e-03  1.43e+00  8.12e-06  1.52e-01  6.78e-01  
  5  +5.0013e-01  +8.5866e-01  3.59e-01  3.43e-03  5.00e-01  4.02e-06  6.83e-02  6.05e-01  
  6  +5.0007e-01  +8.5155e-01  3.51e-01  3.31e-03  4.84e-01  5.36e-06  3.82e-02  5.57e-01  
  7  +4.9982e-01  +8.2082e-01  3.21e-01  2.55e-03  3.74e-01  1.11e-05  1.31e-02  6.82e-01  
  8  +4.9753e-01  +7.8610e-01  2.89e-01  6.00e-04  8.92e-02  6.29e-05  1.81e-03  8.63e-01  
  9  +4.9827e-01  +7.3664e-01  2.38e-01  4.22e-04  6.28e-02  2.88e-05  1.22e-03  7.82e-01  
 10  +4.9485e-01  +7.0828e-01  2.13e-01  1.78e-04  2.65e-02  5.62e-05  4.98e-04  6.14e-01  
 11  +4.9246e-01  +6.9701e-01  2.05e-01  1.28e-04  1.91e-02  6.59e-05  3.58e-04  3.41e-01  
 12  +4.8946e-01  +6.6906e-01  1.80e-01  1.03e-04  1.53e-02  2.81e-05  2.91e-04  7.16e-01  
 13  +4.8368e-01  +6.4117e-01  1.57e-01  7.83e-05  1.16e-02  2.08e-05  2.26e-04  5.53e-01  
 14  +4.8131e-01  +6.3132e-01  1.50e-01  7.43e-05  1.10e-02  1.77e-05  2.15e-04  2.74e-01  
 15  +4.6848e-01  +5.8111e-01  1.13e-01  4.60e-05  6.81e-03  1.41e-05  1.37e-04  4.36e-01  
 16  +4.4321e-01  +4.8507e-01  4.19e-02  1.48e-05  2.19e-03  4.07e-06  4.74e-05  7.92e-01  
 17  +4.4055e-01  +4.7590e-01  3.53e-02  1.23e-05  1.81e-03  3.58e-06  3.94e-05  2.27e-01  
 18  +4.4012e-01  +4.7422e-01  3.41e-02  1.18e-05  1.74e-03  3.66e-06  3.80e-05  1.72e-01  
 19  +4.3134e-01  +4.4390e-01  1.26e-02  4.23e-06  6.24e-04  1.63e-06  1.41e-05  9.11e-01  
 20  +4.2652e-01  +4.2748e-01  9.64e-04  3.22e-07  4.75e-05  1.28e-07  1.10e-06  9.36e-01  
 21  +4.2610e-01  +4.2611e-01  9.73e-06  3.25e-09  4.79e-07  1.28e-09  1.11e-08  9.90e-01  
 22  +4.2610e-01  +4.2610e-01  9.72e-08  3.25e-11  4.79e-09  1.28e-11  1.11e-10  9.90e-01  
 23  +4.2610e-01  +4.2610e-01  9.73e-10  3.25e-13  4.79e-11  1.28e-13  1.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.7283ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:36 PM: Optimal value: 4.261e-01
(CVXPY) Sep 20 03:09:36 PM: Compilation took 1.046e-02 seconds
(CVXPY) Sep 20 03:09:36 PM: Solver (including time spent in interface) took 4.095e-02 seconds
Iteration: 4, Objective: 0.4261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:36 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Finished problem compilation (took 1.503e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 28023
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.9275e-01  +5.1517e+02  5.15e+02  3.84e-01  4.41e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4124e-01  +6.7725e+01  6.72e+01  1.46e-01  2.11e+01  1.16e-02  2.44e-01  8.31e-01  
  3  +5.0971e-01  +1.6514e+01  1.60e+01  1.02e-01  1.44e+01  2.85e-05  2.37e-01  1.42e-01  
  4  +5.0050e-01  +1.5134e+00  1.01e+00  9.77e-03  1.41e+00  8.12e-06  1.50e-01  6.86e-01  
  5  +5.0012e-01  +8.4999e-01  3.50e-01  3.34e-03  4.88e-01  4.06e-06  6.59e-02  6.21e-01  
  6  +5.0004e-01  +8.5335e-01  3.53e-01  3.30e-03  4.82e-01  6.16e-06  3.31e-02  6.16e-01  
  7  +4.9857e-01  +7.6122e-01  2.63e-01  8.61e-04  1.28e-01  4.08e-05  2.75e-03  9.36e-01  
  8  +4.9576e-01  +7.3203e-01  2.36e-01  3.47e-04  5.16e-02  8.67e-05  1.03e-03  6.51e-01  
  9  +4.9611e-01  +7.2767e-01  2.32e-01  2.95e-04  4.38e-02  6.91e-05  8.49e-04  4.59e-01  
 10  +4.9176e-01  +6.8516e-01  1.93e-01  1.25e-04  1.86e-02  7.48e-05  3.53e-04  9.07e-01  
 11  +4.9146e-01  +6.8360e-01  1.92e-01  1.24e-04  1.85e-02  7.14e-05  3.50e-04  5.10e-02  
 12  +4.8761e-01  +6.6672e-01  1.79e-01  9.93e-05  1.47e-02  5.18e-05  2.83e-04  4.99e-01  
 13  +4.8518e-01  +6.5699e-01  1.72e-01  8.85e-05  1.31e-02  4.81e-05  2.53e-04  1.87e-01  
 14  +4.7342e-01  +6.0790e-01  1.34e-01  5.83e-05  8.63e-03  2.19e-05  1.72e-04  7.20e-01  
 15  +4.4901e-01  +5.1006e-01  6.11e-02  2.28e-05  3.36e-03  6.84e-06  7.21e-05  7.45e-01  
 16  +4.3658e-01  +4.6461e-01  2.80e-02  9.89e-06  1.46e-03  3.13e-06  3.27e-05  6.46e-01  
 17  +4.3634e-01  +4.6347e-01  2.71e-02  9.70e-06  1.43e-03  3.01e-06  3.24e-05  8.32e-02  
 18  +4.3438e-01  +4.5688e-01  2.25e-02  7.84e-06  1.16e-03  2.65e-06  2.62e-05  3.28e-01  
 19  +4.2727e-01  +4.3191e-01  4.64e-03  1.59e-06  2.34e-04  6.13e-07  5.50e-06  9.51e-01  
 20  +4.2570e-01  +4.2664e-01  9.37e-04  3.21e-07  4.72e-05  1.25e-07  1.12e-06  8.59e-01  
 21  +4.2530e-01  +4.2531e-01  9.75e-06  3.34e-09  4.92e-07  1.30e-09  1.17e-08  9.90e-01  
 22  +4.2530e-01  +4.2530e-01  9.78e-08  3.35e-11  4.93e-09  1.30e-11  1.18e-10  9.90e-01  
 23  +4.2530e-01  +4.2530e-01  9.79e-10  3.35e-13  4.94e-11  1.30e-13  1.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.2205ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:36 PM: Optimal value: 4.253e-01
(CVXPY) Sep 20 03:09:36 PM: Compilation took 1.503e-02 seconds
(CVXPY) Sep 20 03:09:36 PM: Solver (including time spent in interface) took 4.349e-02 seconds
Iteration: 5, Objective: 0.4253
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:36 PM: Your problem has 2536 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:36 PM: Finished problem compilation (took 1.100e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2536
  constraints   = 5036
  nnz(P)        = 0
  nnz(A)        = 28106
  cones (total) = 1
    : Nonnegative = 1,  numel = 5036

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.9277e-01  +5.1517e+02  5.15e+02  3.84e-01  4.41e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4124e-01  +6.7736e+01  6.72e+01  1.46e-01  2.11e+01  1.16e-02  2.44e-01  8.31e-01  
  3  +5.0970e-01  +1.6507e+01  1.60e+01  1.02e-01  1.44e+01  2.85e-05  2.37e-01  1.42e-01  
  4  +5.0050e-01  +1.5147e+00  1.01e+00  9.78e-03  1.41e+00  8.12e-06  1.51e-01  6.86e-01  
  5  +5.0013e-01  +8.5988e-01  3.60e-01  3.44e-03  5.02e-01  4.12e-06  6.75e-02  6.08e-01  
  6  +5.0005e-01  +8.5770e-01  3.58e-01  3.34e-03  4.88e-01  6.13e-06  3.36e-02  6.24e-01  
  7  +4.9882e-01  +7.7575e-01  2.77e-01  1.04e-03  1.53e-01  3.49e-05  3.40e-03  9.18e-01  
  8  +4.9616e-01  +7.4678e-01  2.51e-01  3.92e-04  5.82e-02  8.22e-05  1.17e-03  6.80e-01  
  9  +4.9646e-01  +7.4614e-01  2.50e-01  3.89e-04  5.77e-02  7.59e-05  1.15e-03  9.98e-02  
 10  +4.9616e-01  +7.3757e-01  2.41e-01  3.25e-04  4.84e-02  7.10e-05  9.45e-04  3.32e-01  
 11  +4.9517e-01  +7.2316e-01  2.28e-01  2.40e-04  3.57e-02  6.78e-05  6.86e-04  4.70e-01  
 12  +4.9202e-01  +7.0556e-01  2.14e-01  1.57e-04  2.34e-02  8.70e-05  4.46e-04  3.74e-01  
 13  +4.9138e-01  +6.9560e-01  2.04e-01  1.42e-04  2.12e-02  6.20e-05  4.04e-04  3.74e-01  
 14  +4.8473e-01  +6.6499e-01  1.80e-01  9.13e-05  1.35e-02  6.53e-05  2.61e-04  4.43e-01  
 15  +4.7275e-01  +6.0208e-01  1.29e-01  5.88e-05  8.70e-03  3.05e-06  1.75e-04  9.90e-01  
 16  +4.4975e-01  +5.1376e-01  6.40e-02  2.40e-05  3.54e-03  3.87e-06  7.59e-05  7.46e-01  
 17  +4.4111e-01  +4.8249e-01  4.14e-02  1.50e-05  2.21e-03  2.56e-06  4.91e-05  3.83e-01  
 18  +4.3919e-01  +4.7518e-01  3.60e-02  1.28e-05  1.89e-03  3.30e-06  4.22e-05  4.82e-01  
 19  +4.2917e-01  +4.3975e-01  1.06e-02  3.69e-06  5.44e-04  9.72e-07  1.27e-05  7.34e-01  
 20  +4.2505e-01  +4.2538e-01  3.38e-04  1.17e-07  1.73e-05  3.12e-08  4.16e-07  9.76e-01  
 21  +4.2490e-01  +4.2490e-01  3.38e-06  1.17e-09  1.73e-07  3.11e-10  4.16e-09  9.90e-01  
 22  +4.2490e-01  +4.2490e-01  3.38e-08  1.17e-11  1.73e-09  3.11e-12  4.16e-11  9.90e-01  
 23  +4.2490e-01  +4.2490e-01  3.38e-10  1.17e-13  1.73e-11  3.12e-14  4.17e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.4636ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:36 PM: Optimal value: 4.249e-01
(CVXPY) Sep 20 03:09:36 PM: Compilation took 1.100e-02 seconds
(CVXPY) Sep 20 03:09:36 PM: Solver (including time spent in interface) took 4.811e-02 seconds
FULL MODEL:
  Accruacy: 0.5746
  Our objective: 0.14919999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0)                       <-- (term's our objective: 0.066)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 1)                       <-- (term's our objective: 0.0712)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.002)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.5157113075256348
Best over terms:
  Our final objective: 0.0712
    Its accruacy: 0.5356
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.0712
  Highest accruacy: 0.5356
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

