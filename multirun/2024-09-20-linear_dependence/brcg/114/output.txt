Command:
python test_script.py -s linear_dependence -d 3 -n 10000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.3032
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 3.

Computed total variation: 0.30319999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:13 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:13 PM: Finished problem compilation (took 1.089e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 30007
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +5.0009e+03  5.00e+03  9.84e-01  7.88e+01  1.00e+00  1.00e+00   ------   
  1  +6.2010e-01  +9.2710e+02  9.26e+02  3.06e-01  4.10e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5578e-01  +1.5875e+02  1.58e+02  1.36e-01  2.17e+01  6.68e-03  2.21e-01  6.63e-01  
  3  +5.0914e-01  +2.7090e+01  2.66e+01  1.02e-01  1.59e+01  1.13e-05  2.19e-01  5.65e-02  
  4  +4.9999e-01  +1.2601e+00  7.60e-01  5.08e-03  7.98e-01  4.10e-06  1.64e-01  7.03e-01  
  5  +4.9972e-01  +8.5535e-01  3.56e-01  2.33e-03  3.69e-01  5.47e-06  3.28e-02  8.47e-01  
  6  +4.7777e-01  +1.0960e+00  6.18e-01  3.46e-04  5.56e-02  2.86e-04  1.01e-03  9.84e-01  
  7  +4.3586e-01  +6.2997e-01  1.94e-01  4.71e-05  7.53e-03  3.01e-04  1.45e-04  8.72e-01  
  8  +4.0027e-01  +4.3090e-01  3.06e-02  6.85e-06  1.09e-03  2.76e-06  2.90e-05  9.90e-01  
  9  +3.9284e-01  +3.9336e-01  5.25e-04  1.17e-07  1.85e-05  3.81e-08  5.28e-07  9.83e-01  
 10  +3.9270e-01  +3.9271e-01  5.26e-06  1.17e-09  1.85e-07  3.81e-10  5.28e-09  9.90e-01  
 11  +3.9270e-01  +3.9270e-01  5.26e-08  1.17e-11  1.85e-09  3.81e-12  5.29e-11  9.90e-01  
 12  +3.9270e-01  +3.9270e-01  5.26e-10  1.17e-13  1.85e-11  3.82e-14  5.30e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.6763ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:13 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:13 PM: Optimal value: 3.927e-01
(CVXPY) Sep 20 03:05:13 PM: Compilation took 1.089e-02 seconds
(CVXPY) Sep 20 03:05:13 PM: Solver (including time spent in interface) took 2.729e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3927
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:13 PM: Your problem has 5012 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:13 PM: Finished problem compilation (took 1.089e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5012
  constraints   = 10012
  nnz(P)        = 0
  nnz(A)        = 37018
  cones (total) = 1
    : Nonnegative = 1,  numel = 10012

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +5.0015e+03  5.00e+03  9.84e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +6.1969e-01  +9.2905e+02  9.28e+02  3.07e-01  4.43e+01  4.25e-03  4.38e-01  6.93e-01  
  2  +5.5542e-01  +1.5807e+02  1.58e+02  1.36e-01  2.34e+01  6.76e-03  2.21e-01  6.67e-01  
  3  +5.0896e-01  +2.6741e+01  2.62e+01  1.02e-01  1.70e+01  1.13e-05  2.19e-01  5.99e-02  
  4  +5.0063e-01  +3.1632e+00  2.66e+00  1.76e-02  2.94e+00  5.00e-06  1.98e-01  2.53e-01  
  5  +5.0006e-01  +1.0089e+00  5.09e-01  3.39e-03  5.76e-01  1.75e-06  6.74e-02  7.52e-01  
  6  +4.9950e-01  +1.1822e+00  6.83e-01  3.44e-03  5.93e-01  9.20e-06  1.43e-02  8.29e-01  
  7  +4.9967e-01  +1.1355e+00  6.36e-01  2.58e-03  4.48e-01  7.37e-06  8.67e-03  8.16e-01  
  8  +4.8763e-01  +1.0379e+00  5.50e-01  1.42e-04  2.50e-02  1.48e-04  3.49e-04  9.60e-01  
  9  +4.7820e-01  +9.6979e-01  4.92e-01  1.06e-04  1.87e-02  1.26e-04  2.64e-04  3.90e-01  
 10  +4.7386e-01  +9.3270e-01  4.59e-01  1.04e-04  1.83e-02  1.04e-04  2.63e-04  5.49e-02  
 11  +4.6234e-01  +8.7066e-01  4.08e-01  8.45e-05  1.48e-02  9.19e-05  2.18e-04  2.07e-01  
 12  +4.3011e-01  +6.8732e-01  2.57e-01  5.20e-05  9.02e-03  8.63e-07  1.46e-04  8.98e-01  
 13  +3.7566e-01  +4.4787e-01  7.22e-02  1.31e-05  2.25e-03  1.41e-06  4.24e-05  7.86e-01  
 14  +3.4990e-01  +3.5310e-01  3.20e-03  5.81e-07  9.94e-05  7.09e-08  2.12e-06  9.65e-01  
 15  +3.4851e-01  +3.4855e-01  3.26e-05  5.92e-09  1.01e-06  7.16e-10  2.19e-08  9.90e-01  
 16  +3.4850e-01  +3.4850e-01  3.26e-07  5.92e-11  1.01e-08  7.16e-12  2.19e-10  9.90e-01  
 17  +3.4850e-01  +3.4850e-01  3.26e-09  5.92e-13  1.01e-10  7.18e-14  2.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.5704ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:13 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:13 PM: Optimal value: 3.485e-01
(CVXPY) Sep 20 03:05:13 PM: Compilation took 1.089e-02 seconds
(CVXPY) Sep 20 03:05:13 PM: Solver (including time spent in interface) took 4.495e-02 seconds
FULL MODEL:
  Accruacy: 0.6516
  Our objective: 0.3032

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.056915044784546
Best over terms:
  Our final objective: 0.3032
    Its accruacy: 0.6516
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.3032
  Highest accruacy: 0.6516
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

