Command:
python test_script.py -s linear_dependence -d 7 -n 500 --seed 21 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14400000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 7.

Computed total variation: 0.376
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:22 PM: Your problem has 265 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Finished problem compilation (took 4.200e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 265
  constraints   = 515
  nnz(P)        = 0
  nnz(A)        = 2515
  cones (total) = 1
    : Nonnegative = 1,  numel = 515

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +2.5094e+02  2.50e+02  9.36e-01  2.26e+01  1.00e+00  1.01e+00   ------   
  1  +5.8723e-01  +5.2949e+01  5.24e+01  3.80e-01  1.38e+01  3.86e-03  5.48e-01  6.11e-01  
  2  +5.3449e-01  +6.6441e+00  6.11e+00  1.20e-01  5.45e+00  1.36e-02  2.40e-01  9.06e-01  
  3  +5.0063e-01  +1.2660e+00  7.65e-01  2.30e-02  1.03e+00  1.29e-04  1.79e-01  8.40e-01  
  4  +4.9869e-01  +6.9939e-01  2.01e-01  5.83e-03  2.68e-01  6.88e-05  3.61e-02  8.39e-01  
  5  +4.7978e-01  +6.5885e-01  1.79e-01  1.37e-03  6.42e-02  4.36e-04  4.31e-03  9.05e-01  
  6  +4.5920e-01  +5.6021e-01  1.01e-01  5.23e-04  2.44e-02  2.63e-04  1.80e-03  6.72e-01  
  7  +4.4134e-01  +4.9112e-01  4.98e-02  2.17e-04  1.01e-02  2.13e-05  8.47e-04  9.90e-01  
  8  +4.2824e-01  +4.3483e-01  6.59e-03  2.65e-05  1.23e-03  4.20e-06  1.13e-04  9.37e-01  
  9  +4.2614e-01  +4.2626e-01  1.21e-04  4.82e-07  2.24e-05  9.24e-08  2.09e-06  9.90e-01  
 10  +4.2610e-01  +4.2610e-01  1.21e-06  4.81e-09  2.24e-07  9.24e-10  2.09e-08  9.90e-01  
 11  +4.2610e-01  +4.2610e-01  1.21e-08  4.81e-11  2.24e-09  9.24e-12  2.09e-10  9.90e-01  
 12  +4.2610e-01  +4.2610e-01  1.21e-10  4.81e-13  2.24e-11  9.25e-14  2.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7453ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:22 PM: Optimal value: 4.261e-01
(CVXPY) Sep 20 03:11:22 PM: Compilation took 4.200e-03 seconds
(CVXPY) Sep 20 03:11:22 PM: Solver (including time spent in interface) took 4.108e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:22 PM: Your problem has 275 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Finished problem compilation (took 3.650e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 275
  constraints   = 525
  nnz(P)        = 0
  nnz(A)        = 3004
  cones (total) = 1
    : Nonnegative = 1,  numel = 525

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +2.5102e+02  2.51e+02  9.37e-01  2.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.8450e-01  +5.3187e+01  5.26e+01  3.86e-01  1.43e+01  3.85e-03  5.54e-01  6.08e-01  
  2  +5.3171e-01  +6.3719e+00  5.84e+00  1.16e-01  5.43e+00  1.42e-02  2.35e-01  9.36e-01  
  3  +5.0006e-01  +1.2273e+00  7.27e-01  2.24e-02  1.04e+00  2.25e-04  1.56e-01  9.90e-01  
  4  +4.9686e-01  +7.9358e-01  2.97e-01  8.07e-03  3.86e-01  2.05e-04  3.64e-02  8.06e-01  
  5  +4.8362e-01  +7.3271e-01  2.49e-01  2.86e-03  1.40e-01  5.52e-04  8.97e-03  7.87e-01  
  6  +4.7552e-01  +6.9943e-01  2.24e-01  1.75e-03  8.65e-02  6.21e-04  5.28e-03  5.21e-01  
  7  +4.7495e-01  +6.9784e-01  2.23e-01  1.73e-03  8.52e-02  5.94e-04  5.20e-03  6.18e-02  
  8  +4.6965e-01  +6.9089e-01  2.21e-01  1.38e-03  6.80e-02  2.99e-04  4.15e-03  7.57e-01  
  9  +4.5733e-01  +6.2874e-01  1.71e-01  8.61e-04  4.23e-02  2.61e-04  2.61e-03  4.01e-01  
 10  +4.4129e-01  +5.5852e-01  1.17e-01  4.90e-04  2.41e-02  1.51e-04  1.51e-03  7.03e-01  
 11  +4.1767e-01  +4.5933e-01  4.17e-02  1.53e-04  7.53e-03  4.78e-05  4.98e-04  8.31e-01  
 12  +4.1045e-01  +4.3187e-01  2.14e-02  7.65e-05  3.77e-03  2.66e-05  2.54e-04  7.32e-01  
 13  +4.0356e-01  +4.0680e-01  3.24e-03  1.13e-05  5.56e-04  3.87e-06  3.90e-05  8.72e-01  
 14  +4.0223e-01  +4.0230e-01  6.85e-05  2.38e-07  1.16e-05  8.52e-08  8.33e-07  9.90e-01  
 15  +4.0220e-01  +4.0220e-01  6.85e-07  2.38e-09  1.16e-07  8.52e-10  8.34e-09  9.90e-01  
 16  +4.0220e-01  +4.0220e-01  6.85e-09  2.38e-11  1.16e-09  8.53e-12  8.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8801ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:22 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 03:11:22 PM: Compilation took 3.650e-03 seconds
(CVXPY) Sep 20 03:11:22 PM: Solver (including time spent in interface) took 3.251e-03 seconds
Iteration: 2, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:22 PM: Your problem has 285 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Finished problem compilation (took 3.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 285
  constraints   = 535
  nnz(P)        = 0
  nnz(A)        = 3308
  cones (total) = 1
    : Nonnegative = 1,  numel = 535

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9886e-01  +2.5138e+02  2.51e+02  9.38e-01  2.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.8188e-01  +5.3395e+01  5.28e+01  3.91e-01  1.43e+01  3.84e-03  5.58e-01  6.06e-01  
  2  +5.2975e-01  +6.1808e+00  5.65e+00  1.13e-01  5.26e+00  1.46e-02  2.29e-01  9.59e-01  
  3  +5.0025e-01  +1.3114e+00  8.11e-01  2.54e-02  1.18e+00  6.67e-04  1.44e-01  9.90e-01  
  4  +4.9369e-01  +8.0867e-01  3.15e-01  6.91e-03  3.38e-01  8.37e-04  2.38e-02  8.87e-01  
  5  +4.8262e-01  +7.6980e-01  2.87e-01  3.28e-03  1.63e-01  1.46e-03  9.92e-03  6.47e-01  
  6  +4.6228e-01  +6.7845e-01  2.16e-01  1.30e-03  6.49e-02  1.85e-03  3.92e-03  6.75e-01  
  7  +4.4667e-01  +6.2831e-01  1.82e-01  9.56e-04  4.75e-02  3.91e-04  2.93e-03  7.87e-01  
  8  +4.2316e-01  +5.2980e-01  1.07e-01  4.56e-04  2.26e-02  2.37e-04  1.46e-03  5.39e-01  
  9  +4.0112e-01  +4.3941e-01  3.83e-02  1.51e-04  7.46e-03  3.89e-05  5.09e-04  9.51e-01  
 10  +3.9133e-01  +4.0019e-01  8.86e-03  3.42e-05  1.69e-03  9.28e-06  1.19e-04  8.24e-01  
 11  +3.8860e-01  +3.8938e-01  7.80e-04  3.00e-06  1.48e-04  8.08e-07  1.06e-05  9.12e-01  
 12  +3.8844e-01  +3.8880e-01  3.57e-04  1.34e-06  6.56e-05  3.98e-07  4.84e-06  7.51e-01  
 13  +3.8831e-01  +3.8835e-01  3.16e-05  1.16e-07  5.69e-06  3.56e-08  4.31e-07  9.25e-01  
 14  +3.8830e-01  +3.8830e-01  3.92e-07  1.43e-09  7.02e-08  4.46e-10  5.34e-09  9.89e-01  
 15  +3.8830e-01  +3.8830e-01  3.93e-09  1.44e-11  7.03e-10  4.47e-12  5.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5793ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:22 PM: Optimal value: 3.883e-01
(CVXPY) Sep 20 03:11:22 PM: Compilation took 3.001e-03 seconds
(CVXPY) Sep 20 03:11:22 PM: Solver (including time spent in interface) took 4.205e-03 seconds
Iteration: 3, Objective: 0.3883
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:22 PM: Your problem has 295 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Finished problem compilation (took 3.269e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 295
  constraints   = 545
  nnz(P)        = 0
  nnz(A)        = 3522
  cones (total) = 1
    : Nonnegative = 1,  numel = 545

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9879e-01  +2.5142e+02  2.51e+02  9.38e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.7963e-01  +5.3420e+01  5.28e+01  3.93e-01  1.42e+01  3.85e-03  5.58e-01  6.06e-01  
  2  +5.2762e-01  +5.9535e+00  5.43e+00  1.08e-01  5.01e+00  1.49e-02  2.20e-01  9.84e-01  
  3  +5.0075e-01  +1.4828e+00  9.82e-01  3.06e-02  1.43e+00  1.67e-03  1.31e-01  9.42e-01  
  4  +4.8733e-01  +9.6045e-01  4.73e-01  6.59e-03  3.27e-01  3.28e-03  1.91e-02  9.07e-01  
  5  +4.7416e-01  +9.1156e-01  4.37e-01  3.67e-03  1.83e-01  4.43e-03  1.05e-02  5.03e-01  
  6  +4.5452e-01  +8.1450e-01  3.60e-01  2.09e-03  1.04e-01  3.71e-03  6.05e-03  5.92e-01  
  7  +4.0935e-01  +5.5232e-01  1.43e-01  6.50e-04  3.20e-02  7.68e-04  2.06e-03  7.94e-01  
  8  +3.9402e-01  +4.9349e-01  9.95e-02  4.32e-04  2.14e-02  4.08e-04  1.43e-03  4.97e-01  
  9  +3.7519e-01  +4.1784e-01  4.27e-02  1.76e-04  8.78e-03  6.80e-05  6.26e-04  9.11e-01  
 10  +3.6268e-01  +3.6864e-01  5.96e-03  2.37e-05  1.19e-03  8.77e-06  9.00e-05  8.66e-01  
 11  +3.6077e-01  +3.6123e-01  4.66e-04  1.85e-06  9.21e-05  6.53e-07  7.13e-06  9.24e-01  
 12  +3.6060e-01  +3.6061e-01  5.58e-06  2.21e-08  1.10e-06  7.27e-09  8.59e-08  9.90e-01  
 13  +3.6060e-01  +3.6060e-01  5.58e-08  2.21e-10  1.10e-08  7.27e-11  8.59e-10  9.90e-01  
 14  +3.6060e-01  +3.6060e-01  5.58e-10  2.21e-12  1.10e-10  7.28e-13  8.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7709ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:22 PM: Optimal value: 3.606e-01
(CVXPY) Sep 20 03:11:22 PM: Compilation took 3.269e-03 seconds
(CVXPY) Sep 20 03:11:22 PM: Solver (including time spent in interface) took 2.406e-03 seconds
Iteration: 4, Objective: 0.3606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:22 PM: Your problem has 305 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Finished problem compilation (took 1.391e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 305
  constraints   = 555
  nnz(P)        = 0
  nnz(A)        = 3646
  cones (total) = 1
    : Nonnegative = 1,  numel = 555

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9860e-01  +2.5163e+02  2.51e+02  9.39e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.7584e-01  +5.3596e+01  5.30e+01  3.96e-01  1.41e+01  3.85e-03  5.61e-01  6.04e-01  
  2  +5.2522e-01  +5.9903e+00  5.47e+00  1.07e-01  4.93e+00  1.52e-02  2.19e-01  9.90e-01  
  3  +5.0331e-01  +1.6140e+00  1.11e+00  3.25e-02  1.56e+00  2.43e-03  9.66e-02  8.31e-01  
  4  +4.9426e-01  +1.5475e+00  1.05e+00  1.39e-02  6.90e-01  4.63e-03  3.66e-02  6.77e-01  
  5  +4.7246e-01  +1.1264e+00  6.54e-01  5.32e-03  2.64e-01  3.94e-03  1.46e-02  6.55e-01  
  6  +4.5929e-01  +1.1080e+00  6.49e-01  3.44e-03  1.71e-01  4.88e-03  9.38e-03  4.44e-01  
  7  +4.4356e-01  +9.4775e-01  5.04e-01  2.49e-03  1.23e-01  2.99e-03  7.05e-03  3.76e-01  
  8  +4.0651e-01  +6.1960e-01  2.13e-01  1.02e-03  4.96e-02  2.74e-05  3.27e-03  8.37e-01  
  9  +3.8348e-01  +5.0058e-01  1.17e-01  5.33e-04  2.56e-02  2.95e-05  1.84e-03  5.18e-01  
 10  +3.6359e-01  +3.9953e-01  3.59e-02  1.60e-04  7.66e-03  1.07e-05  5.99e-04  7.03e-01  
 11  +3.5674e-01  +3.6661e-01  9.88e-03  4.32e-05  2.07e-03  5.79e-06  1.68e-04  8.35e-01  
 12  +3.5451e-01  +3.5722e-01  2.71e-03  1.17e-05  5.61e-04  2.07e-06  4.67e-05  8.52e-01  
 13  +3.5367e-01  +3.5375e-01  7.34e-05  3.16e-07  1.52e-05  5.34e-08  1.28e-06  9.73e-01  
 14  +3.5365e-01  +3.5365e-01  7.35e-07  3.17e-09  1.52e-07  5.35e-10  1.28e-08  9.90e-01  
 15  +3.5365e-01  +3.5365e-01  7.35e-09  3.17e-11  1.52e-09  5.35e-12  1.28e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0065ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:22 PM: Optimal value: 3.537e-01
(CVXPY) Sep 20 03:11:22 PM: Compilation took 1.391e-03 seconds
(CVXPY) Sep 20 03:11:22 PM: Solver (including time spent in interface) took 5.227e-03 seconds
Iteration: 5, Objective: 0.3537
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:22 PM: Your problem has 315 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Finished problem compilation (took 2.413e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 315
  constraints   = 565
  nnz(P)        = 0
  nnz(A)        = 3763
  cones (total) = 1
    : Nonnegative = 1,  numel = 565

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9855e-01  +2.5160e+02  2.51e+02  9.39e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.7394e-01  +5.3675e+01  5.31e+01  3.99e-01  1.39e+01  3.85e-03  5.61e-01  6.04e-01  
  2  +5.2374e-01  +6.0510e+00  5.53e+00  1.07e-01  4.89e+00  1.55e-02  2.19e-01  9.90e-01  
  3  +5.0381e-01  +1.5422e+00  1.04e+00  2.81e-02  1.36e+00  2.61e-03  7.85e-02  8.15e-01  
  4  +4.9699e-01  +1.5340e+00  1.04e+00  1.41e-02  7.02e-01  4.57e-03  3.64e-02  5.79e-01  
  5  +4.7641e-01  +1.2034e+00  7.27e-01  5.95e-03  2.96e-01  4.19e-03  1.58e-02  6.59e-01  
  6  +4.5941e-01  +1.1221e+00  6.63e-01  3.44e-03  1.71e-01  4.90e-03  9.24e-03  4.93e-01  
  7  +4.4447e-01  +9.6789e-01  5.23e-01  2.71e-03  1.33e-01  2.59e-03  7.60e-03  3.60e-01  
  8  +3.9910e-01  +6.0351e-01  2.04e-01  9.78e-04  4.72e-02  2.48e-05  3.11e-03  8.52e-01  
  9  +3.7316e-01  +4.7564e-01  1.02e-01  4.67e-04  2.23e-02  4.80e-05  1.62e-03  6.71e-01  
 10  +3.5389e-01  +3.8367e-01  2.98e-02  1.31e-04  6.25e-03  1.49e-05  4.95e-04  7.27e-01  
 11  +3.4904e-01  +3.6194e-01  1.29e-02  5.64e-05  2.68e-03  9.87e-06  2.20e-04  8.04e-01  
 12  +3.4523e-01  +3.4637e-01  1.15e-03  4.97e-06  2.36e-04  8.67e-07  2.00e-05  9.24e-01  
 13  +3.4499e-01  +3.4540e-01  4.08e-04  1.77e-06  8.39e-05  3.29e-07  7.16e-06  7.37e-01  
 14  +3.4485e-01  +3.4486e-01  6.32e-06  2.74e-08  1.30e-06  5.01e-09  1.11e-07  9.85e-01  
 15  +3.4485e-01  +3.4485e-01  6.35e-08  2.75e-10  1.30e-08  5.03e-11  1.12e-09  9.90e-01  
 16  +3.4485e-01  +3.4485e-01  6.35e-10  2.75e-12  1.30e-10  5.03e-13  1.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5567ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:22 PM: Optimal value: 3.449e-01
(CVXPY) Sep 20 03:11:22 PM: Compilation took 2.413e-03 seconds
(CVXPY) Sep 20 03:11:22 PM: Solver (including time spent in interface) took 4.195e-03 seconds
Iteration: 6, Objective: 0.3449
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:22 PM: Your problem has 325 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Finished problem compilation (took 5.631e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 325
  constraints   = 575
  nnz(P)        = 0
  nnz(A)        = 3871
  cones (total) = 1
    : Nonnegative = 1,  numel = 575

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9847e-01  +2.5174e+02  2.51e+02  9.40e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.7241e-01  +5.3837e+01  5.33e+01  4.02e-01  1.38e+01  3.85e-03  5.62e-01  6.02e-01  
  2  +5.2270e-01  +6.0845e+00  5.56e+00  1.07e-01  4.86e+00  1.56e-02  2.21e-01  9.90e-01  
  3  +5.0422e-01  +1.6383e+00  1.13e+00  2.88e-02  1.39e+00  3.20e-03  7.79e-02  7.65e-01  
  4  +4.9749e-01  +1.6113e+00  1.11e+00  1.53e-02  7.56e-01  5.07e-03  3.93e-02  5.37e-01  
  5  +4.7778e-01  +1.2571e+00  7.79e-01  7.06e-03  3.48e-01  3.89e-03  1.89e-02  6.41e-01  
  6  +4.5933e-01  +1.1507e+00  6.91e-01  3.88e-03  1.91e-01  4.35e-03  1.05e-02  5.45e-01  
  7  +4.4456e-01  +1.0030e+00  5.58e-01  2.94e-03  1.44e-01  2.55e-03  8.26e-03  3.93e-01  
  8  +4.0716e-01  +6.8676e-01  2.80e-01  1.40e-03  6.71e-02  1.11e-04  4.38e-03  8.25e-01  
  9  +3.6919e-01  +4.7296e-01  1.04e-01  4.78e-04  2.27e-02  4.24e-05  1.68e-03  6.73e-01  
 10  +3.5498e-01  +4.0732e-01  5.23e-02  2.34e-04  1.10e-02  3.28e-05  8.75e-04  6.72e-01  
 11  +3.4321e-01  +3.5569e-01  1.25e-02  5.40e-05  2.56e-03  8.27e-06  2.19e-04  7.95e-01  
 12  +3.3955e-01  +3.4084e-01  1.29e-03  5.50e-06  2.61e-04  8.47e-07  2.37e-05  9.10e-01  
 13  +3.3911e-01  +3.3915e-01  3.55e-05  1.50e-07  7.13e-06  2.23e-08  6.63e-07  9.75e-01  
 14  +3.3910e-01  +3.3910e-01  3.55e-07  1.50e-09  7.13e-08  2.23e-10  6.64e-09  9.90e-01  
 15  +3.3910e-01  +3.3910e-01  3.55e-09  1.50e-11  7.14e-10  2.23e-12  6.64e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7674ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:22 PM: Optimal value: 3.391e-01
(CVXPY) Sep 20 03:11:22 PM: Compilation took 5.631e-03 seconds
(CVXPY) Sep 20 03:11:22 PM: Solver (including time spent in interface) took 4.990e-03 seconds
Iteration: 7, Objective: 0.3391
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:22 PM: Your problem has 330 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:22 PM: Finished problem compilation (took 4.029e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 330
  constraints   = 580
  nnz(P)        = 0
  nnz(A)        = 3921
  cones (total) = 1
    : Nonnegative = 1,  numel = 580

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9845e-01  +2.5174e+02  2.51e+02  9.40e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.7148e-01  +5.3924e+01  5.34e+01  4.03e-01  1.38e+01  3.85e-03  5.64e-01  6.01e-01  
  2  +5.2201e-01  +6.1110e+00  5.59e+00  1.08e-01  4.85e+00  1.57e-02  2.22e-01  9.90e-01  
  3  +5.0427e-01  +1.6630e+00  1.16e+00  2.85e-02  1.37e+00  3.41e-03  7.64e-02  7.48e-01  
  4  +4.9687e-01  +1.6246e+00  1.13e+00  1.49e-02  7.33e-01  5.35e-03  3.83e-02  5.43e-01  
  5  +4.7306e-01  +1.1695e+00  6.96e-01  6.22e-03  3.04e-01  3.07e-03  1.70e-02  7.12e-01  
  6  +4.6087e-01  +1.1512e+00  6.90e-01  4.12e-03  2.02e-01  3.66e-03  1.12e-02  4.53e-01  
  7  +4.4683e-01  +1.0271e+00  5.80e-01  3.16e-03  1.54e-01  2.59e-03  8.83e-03  3.37e-01  
  8  +4.1273e-01  +7.3324e-01  3.21e-01  1.71e-03  8.18e-02  2.37e-05  5.36e-03  8.28e-01  
  9  +3.7262e-01  +5.0226e-01  1.30e-01  6.15e-04  2.90e-02  2.62e-05  2.17e-03  6.59e-01  
 10  +3.5910e-01  +4.3829e-01  7.92e-02  3.67e-04  1.72e-02  2.27e-05  1.37e-03  4.39e-01  
 11  +3.4293e-01  +3.6268e-01  1.98e-02  8.94e-05  4.18e-03  7.17e-06  3.68e-04  7.73e-01  
 12  +3.3756e-01  +3.3890e-01  1.34e-03  6.03e-06  2.81e-04  5.62e-07  2.64e-05  9.44e-01  
 13  +3.3722e-01  +3.3756e-01  3.40e-04  1.50e-06  6.97e-05  1.64e-07  6.82e-06  7.82e-01  
 14  +3.3710e-01  +3.3712e-01  1.21e-05  5.29e-08  2.46e-06  8.85e-09  2.44e-07  9.90e-01  
 15  +3.3710e-01  +3.3710e-01  1.21e-07  5.29e-10  2.46e-08  8.85e-11  2.44e-09  9.90e-01  
 16  +3.3710e-01  +3.3710e-01  1.21e-09  5.29e-12  2.46e-10  8.88e-13  2.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2681ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:22 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:22 PM: Optimal value: 3.371e-01
(CVXPY) Sep 20 03:11:22 PM: Compilation took 4.029e-03 seconds
(CVXPY) Sep 20 03:11:22 PM: Solver (including time spent in interface) took 4.292e-03 seconds
Iteration: 8, Objective: 0.3371
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:23 PM: Your problem has 333 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Finished problem compilation (took 3.280e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 333
  constraints   = 583
  nnz(P)        = 0
  nnz(A)        = 3952
  cones (total) = 1
    : Nonnegative = 1,  numel = 583

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9843e-01  +2.5174e+02  2.51e+02  9.40e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.7069e-01  +5.3993e+01  5.34e+01  4.04e-01  1.37e+01  3.85e-03  5.65e-01  6.00e-01  
  2  +5.2152e-01  +6.1368e+00  5.62e+00  1.08e-01  4.84e+00  1.58e-02  2.23e-01  9.90e-01  
  3  +5.0424e-01  +1.6849e+00  1.18e+00  2.83e-02  1.37e+00  3.58e-03  7.53e-02  7.37e-01  
  4  +4.9577e-01  +1.6513e+00  1.16e+00  1.44e-02  7.08e-01  5.67e-03  3.70e-02  5.69e-01  
  5  +4.7352e-01  +1.1922e+00  7.19e-01  6.81e-03  3.32e-01  2.77e-03  1.87e-02  6.49e-01  
  6  +4.6048e-01  +1.1460e+00  6.86e-01  4.39e-03  2.14e-01  3.22e-03  1.20e-02  4.48e-01  
  7  +4.4697e-01  +1.0379e+00  5.91e-01  3.29e-03  1.60e-01  2.53e-03  9.28e-03  3.43e-01  
  8  +4.2355e-01  +8.1088e-01  3.87e-01  2.30e-03  1.10e-01  2.17e-05  7.10e-03  7.92e-01  
  9  +3.7918e-01  +5.4588e-01  1.67e-01  7.93e-04  3.74e-02  2.44e-05  2.72e-03  6.58e-01  
 10  +3.6080e-01  +4.5194e-01  9.11e-02  4.25e-04  1.99e-02  2.33e-05  1.58e-03  4.98e-01  
 11  +3.4284e-01  +3.6316e-01  2.03e-02  9.32e-05  4.34e-03  6.03e-06  3.82e-04  7.81e-01  
 12  +3.3874e-01  +3.4433e-01  5.59e-03  2.55e-05  1.19e-03  2.04e-06  1.09e-04  7.50e-01  
 13  +3.3817e-01  +3.4182e-01  3.65e-03  1.65e-05  7.66e-04  1.69e-06  7.20e-05  4.77e-01  
 14  +3.3719e-01  +3.3771e-01  5.19e-04  2.29e-06  1.06e-04  3.06e-07  1.04e-05  9.07e-01  
 15  +3.3701e-01  +3.3703e-01  2.22e-05  9.61e-08  4.46e-06  1.38e-08  4.49e-07  9.64e-01  
 16  +3.3700e-01  +3.3700e-01  2.23e-07  9.63e-10  4.47e-08  1.39e-10  4.51e-09  9.90e-01  
 17  +3.3700e-01  +3.3700e-01  2.23e-09  9.63e-12  4.47e-10  1.39e-12  4.51e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9901ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:23 PM: Optimal value: 3.370e-01
(CVXPY) Sep 20 03:11:23 PM: Compilation took 3.280e-03 seconds
(CVXPY) Sep 20 03:11:23 PM: Solver (including time spent in interface) took 4.190e-03 seconds
Iteration: 9, Objective: 0.3370
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:23 PM: Your problem has 336 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Finished problem compilation (took 4.672e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 336
  constraints   = 586
  nnz(P)        = 0
  nnz(A)        = 3998
  cones (total) = 1
    : Nonnegative = 1,  numel = 586

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9831e-01  +2.5172e+02  2.51e+02  9.40e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.6889e-01  +5.4075e+01  5.35e+01  4.06e-01  1.37e+01  3.84e-03  5.67e-01  5.98e-01  
  2  +5.2070e-01  +6.1958e+00  5.68e+00  1.09e-01  4.85e+00  1.60e-02  2.24e-01  9.90e-01  
  3  +5.0412e-01  +1.7271e+00  1.22e+00  2.83e-02  1.37e+00  3.87e-03  7.43e-02  7.20e-01  
  4  +4.9441e-01  +1.6913e+00  1.20e+00  1.43e-02  7.02e-01  6.01e-03  3.64e-02  5.83e-01  
  5  +4.7201e-01  +1.2414e+00  7.69e-01  7.22e-03  3.51e-01  2.83e-03  1.97e-02  6.32e-01  
  6  +4.5484e-01  +1.1572e+00  7.02e-01  4.35e-03  2.12e-01  3.24e-03  1.20e-02  4.81e-01  
  7  +4.4603e-01  +1.0773e+00  6.31e-01  3.64e-03  1.77e-01  2.45e-03  1.02e-02  2.90e-01  
  8  +4.2788e-01  +8.7098e-01  4.43e-01  2.85e-03  1.36e-01  2.10e-04  8.70e-03  6.82e-01  
  9  +3.8948e-01  +6.2361e-01  2.34e-01  1.20e-03  5.66e-02  1.25e-04  3.97e-03  5.95e-01  
 10  +3.5758e-01  +4.4459e-01  8.70e-02  4.21e-04  1.97e-02  4.96e-05  1.58e-03  7.14e-01  
 11  +3.4179e-01  +3.6586e-01  2.41e-02  1.14e-04  5.31e-03  1.42e-05  4.65e-04  7.55e-01  
 12  +3.3688e-01  +3.4269e-01  5.81e-03  2.73e-05  1.27e-03  3.50e-06  1.17e-04  7.75e-01  
 13  +3.3621e-01  +3.3969e-01  3.48e-03  1.62e-05  7.49e-04  2.28e-06  7.08e-05  5.43e-01  
 14  +3.3529e-01  +3.3584e-01  5.46e-04  2.46e-06  1.14e-04  3.76e-07  1.13e-05  8.84e-01  
 15  +3.3511e-01  +3.3514e-01  3.06e-05  1.34e-07  6.21e-06  2.14e-08  6.37e-07  9.54e-01  
 16  +3.3510e-01  +3.3510e-01  3.08e-07  1.35e-09  6.25e-08  2.15e-10  6.42e-09  9.90e-01  
 17  +3.3510e-01  +3.3510e-01  3.08e-09  1.35e-11  6.25e-10  2.15e-12  6.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5156ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:23 PM: Optimal value: 3.351e-01
(CVXPY) Sep 20 03:11:23 PM: Compilation took 4.672e-03 seconds
(CVXPY) Sep 20 03:11:23 PM: Solver (including time spent in interface) took 4.843e-03 seconds
Iteration: 10, Objective: 0.3351
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:23 PM: Your problem has 345 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Finished problem compilation (took 3.122e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 345
  constraints   = 595
  nnz(P)        = 0
  nnz(A)        = 4096
  cones (total) = 1
    : Nonnegative = 1,  numel = 595

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9829e-01  +2.5174e+02  2.51e+02  9.41e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.6768e-01  +5.4109e+01  5.35e+01  4.09e-01  1.36e+01  3.84e-03  5.68e-01  5.98e-01  
  2  +5.2002e-01  +6.5696e+00  6.05e+00  1.14e-01  5.01e+00  1.60e-02  2.34e-01  9.64e-01  
  3  +5.0454e-01  +1.9178e+00  1.41e+00  3.14e-02  1.50e+00  4.28e-03  8.07e-02  6.83e-01  
  4  +4.9381e-01  +1.8045e+00  1.31e+00  1.58e-02  7.69e-01  6.04e-03  4.02e-02  5.68e-01  
  5  +4.7213e-01  +1.3116e+00  8.40e-01  8.13e-03  3.93e-01  3.03e-03  2.21e-02  6.03e-01  
  6  +4.5688e-01  +1.2698e+00  8.13e-01  5.09e-03  2.47e-01  3.76e-03  1.39e-02  4.57e-01  
  7  +4.4544e-01  +1.1374e+00  6.92e-01  4.03e-03  1.95e-01  2.70e-03  1.13e-02  3.08e-01  
  8  +4.2370e-01  +8.7121e-01  4.48e-01  2.80e-03  1.33e-01  2.31e-05  8.57e-03  7.98e-01  
  9  +3.9048e-01  +6.5289e-01  2.62e-01  1.37e-03  6.46e-02  3.31e-05  4.54e-03  5.19e-01  
 10  +3.5412e-01  +4.4271e-01  8.86e-02  4.32e-04  2.01e-02  4.41e-05  1.63e-03  8.13e-01  
 11  +3.3765e-01  +3.6603e-01  2.84e-02  1.33e-04  6.17e-03  1.66e-05  5.54e-04  7.51e-01  
 12  +3.3122e-01  +3.3726e-01  6.05e-03  2.78e-05  1.29e-03  3.71e-06  1.24e-04  8.17e-01  
 13  +3.3031e-01  +3.3342e-01  3.10e-03  1.41e-05  6.54e-04  2.14e-06  6.43e-05  6.82e-01  
 14  +3.2935e-01  +3.2950e-01  1.47e-04  6.60e-07  3.06e-05  9.57e-08  3.09e-06  9.58e-01  
 15  +3.2930e-01  +3.2930e-01  1.60e-06  7.21e-09  3.35e-07  1.04e-09  3.39e-08  9.89e-01  
 16  +3.2930e-01  +3.2930e-01  1.60e-08  7.21e-11  3.35e-09  1.04e-11  3.39e-10  9.90e-01  
 17  +3.2930e-01  +3.2930e-01  1.60e-10  7.22e-13  3.35e-11  1.04e-13  3.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2527ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:23 PM: Optimal value: 3.293e-01
(CVXPY) Sep 20 03:11:23 PM: Compilation took 3.122e-03 seconds
(CVXPY) Sep 20 03:11:23 PM: Solver (including time spent in interface) took 5.046e-03 seconds
Iteration: 11, Objective: 0.3293
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:23 PM: Your problem has 355 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 355
  constraints   = 605
  nnz(P)        = 0
  nnz(A)        = 4190
  cones (total) = 1
    : Nonnegative = 1,  numel = 605

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9818e-01  +2.5190e+02  2.51e+02  9.41e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.6556e-01  +5.4173e+01  5.36e+01  4.10e-01  1.35e+01  3.84e-03  5.68e-01  5.98e-01  
  2  +5.1848e-01  +6.4166e+00  5.90e+00  1.10e-01  4.80e+00  1.62e-02  2.27e-01  9.80e-01  
  3  +5.0353e-01  +2.1043e+00  1.60e+00  3.29e-02  1.57e+00  5.29e-03  8.32e-02  6.59e-01  
  4  +4.8927e-01  +1.8781e+00  1.39e+00  1.54e-02  7.51e-01  7.02e-03  3.94e-02  5.89e-01  
  5  +4.5577e-01  +1.2998e+00  8.44e-01  5.99e-03  2.89e-01  5.02e-03  1.62e-02  6.94e-01  
  6  +4.4142e-01  +1.1736e+00  7.32e-01  4.27e-03  2.06e-01  3.94e-03  1.18e-02  4.23e-01  
  7  +4.0336e-01  +7.5657e-01  3.53e-01  2.08e-03  9.79e-02  3.41e-05  6.62e-03  7.71e-01  
  8  +3.6881e-01  +5.5001e-01  1.81e-01  9.56e-04  4.44e-02  5.17e-05  3.38e-03  6.20e-01  
  9  +3.4949e-01  +4.4473e-01  9.52e-02  4.85e-04  2.24e-02  3.28e-05  1.86e-03  5.14e-01  
 10  +3.3343e-01  +3.6156e-01  2.81e-02  1.39e-04  6.41e-03  1.04e-05  5.88e-04  7.13e-01  
 11  +3.2772e-01  +3.3484e-01  7.13e-03  3.38e-05  1.56e-03  4.67e-06  1.54e-04  9.11e-01  
 12  +3.2669e-01  +3.3045e-01  3.76e-03  1.76e-05  8.09e-04  2.59e-06  8.18e-05  6.19e-01  
 13  +3.2561e-01  +3.2594e-01  3.29e-04  1.52e-06  7.02e-05  2.21e-07  7.31e-06  9.23e-01  
 14  +3.2550e-01  +3.2551e-01  4.11e-06  1.90e-08  8.74e-07  2.70e-09  9.17e-08  9.88e-01  
 15  +3.2550e-01  +3.2550e-01  4.11e-08  1.90e-10  8.74e-09  2.70e-11  9.17e-10  9.90e-01  
 16  +3.2550e-01  +3.2550e-01  4.11e-10  1.90e-12  8.74e-11  2.70e-13  9.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.284ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:23 PM: Optimal value: 3.255e-01
(CVXPY) Sep 20 03:11:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:23 PM: Solver (including time spent in interface) took 9.912e-03 seconds
Iteration: 12, Objective: 0.3255
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:23 PM: Your problem has 357 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Finished problem compilation (took 1.000e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 357
  constraints   = 607
  nnz(P)        = 0
  nnz(A)        = 4240
  cones (total) = 1
    : Nonnegative = 1,  numel = 607

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9818e-01  +2.5191e+02  2.51e+02  9.41e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.6531e-01  +5.4200e+01  5.36e+01  4.11e-01  1.35e+01  3.84e-03  5.68e-01  5.97e-01  
  2  +5.1841e-01  +6.6514e+00  6.13e+00  1.14e-01  4.96e+00  1.62e-02  2.33e-01  9.63e-01  
  3  +5.0361e-01  +2.1237e+00  1.62e+00  3.34e-02  1.59e+00  5.11e-03  8.45e-02  6.64e-01  
  4  +4.8938e-01  +1.8942e+00  1.40e+00  1.59e-02  7.71e-01  6.64e-03  4.05e-02  5.90e-01  
  5  +4.5476e-01  +1.2861e+00  8.31e-01  5.92e-03  2.86e-01  4.80e-03  1.61e-02  7.02e-01  
  6  +4.4049e-01  +1.1639e+00  7.23e-01  4.23e-03  2.04e-01  3.76e-03  1.18e-02  4.28e-01  
  7  +4.0128e-01  +7.4542e-01  3.44e-01  1.99e-03  9.34e-02  3.34e-05  6.33e-03  7.92e-01  
  8  +3.7233e-01  +5.7350e-01  2.01e-01  1.08e-03  5.01e-02  5.17e-05  3.76e-03  5.31e-01  
  9  +3.4958e-01  +4.4527e-01  9.57e-02  4.90e-04  2.27e-02  3.04e-05  1.89e-03  5.62e-01  
 10  +3.3377e-01  +3.6350e-01  2.97e-02  1.48e-04  6.82e-03  1.05e-05  6.20e-04  7.04e-01  
 11  +3.2820e-01  +3.3704e-01  8.84e-03  4.26e-05  1.97e-03  4.38e-06  1.90e-04  7.93e-01  
 12  +3.2711e-01  +3.3228e-01  5.18e-03  2.45e-05  1.13e-03  2.91e-06  1.12e-04  5.49e-01  
 13  +3.2570e-01  +3.2631e-01  6.12e-04  2.85e-06  1.31e-04  3.58e-07  1.36e-05  9.07e-01  
 14  +3.2550e-01  +3.2551e-01  1.06e-05  4.89e-08  2.26e-06  5.94e-09  2.37e-07  9.84e-01  
 15  +3.2550e-01  +3.2550e-01  1.06e-07  4.89e-10  2.26e-08  5.94e-11  2.37e-09  9.90e-01  
 16  +3.2550e-01  +3.2550e-01  1.06e-09  4.89e-12  2.26e-10  5.94e-13  2.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2136ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:23 PM: Optimal value: 3.255e-01
(CVXPY) Sep 20 03:11:23 PM: Compilation took 1.000e-02 seconds
(CVXPY) Sep 20 03:11:23 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 13, Objective: 0.3255
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:23 PM: Your problem has 358 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:23 PM: Finished problem compilation (took 5.697e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 358
  constraints   = 608
  nnz(P)        = 0
  nnz(A)        = 4262
  cones (total) = 1
    : Nonnegative = 1,  numel = 608

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9818e-01  +2.5190e+02  2.51e+02  9.42e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.6531e-01  +5.4200e+01  5.36e+01  4.11e-01  1.35e+01  3.84e-03  5.68e-01  5.97e-01  
  2  +5.1860e-01  +6.8202e+00  6.30e+00  1.17e-01  5.05e+00  1.61e-02  2.38e-01  9.51e-01  
  3  +5.0377e-01  +2.1371e+00  1.63e+00  3.38e-02  1.61e+00  4.98e-03  8.55e-02  6.67e-01  
  4  +4.8928e-01  +1.9027e+00  1.41e+00  1.59e-02  7.72e-01  6.50e-03  4.05e-02  5.97e-01  
  5  +4.5444e-01  +1.2899e+00  8.35e-01  5.94e-03  2.87e-01  4.73e-03  1.62e-02  6.99e-01  
  6  +4.4025e-01  +1.1707e+00  7.30e-01  4.25e-03  2.05e-01  3.72e-03  1.18e-02  4.33e-01  
  7  +4.0062e-01  +7.3963e-01  3.39e-01  1.95e-03  9.17e-02  3.28e-05  6.24e-03  7.88e-01  
  8  +3.7310e-01  +5.7856e-01  2.05e-01  1.10e-03  5.12e-02  5.18e-05  3.84e-03  5.10e-01  
  9  +3.5041e-01  +4.5013e-01  9.97e-02  5.12e-04  2.37e-02  3.11e-05  1.96e-03  5.51e-01  
 10  +3.3381e-01  +3.6382e-01  3.00e-02  1.49e-04  6.88e-03  1.05e-05  6.27e-04  7.16e-01  
 11  +3.2854e-01  +3.3869e-01  1.02e-02  4.89e-05  2.26e-03  5.41e-06  2.18e-04  7.94e-01  
 12  +3.2676e-01  +3.3089e-01  4.13e-03  1.96e-05  9.03e-04  2.35e-06  9.05e-05  6.55e-01  
 13  +3.2562e-01  +3.2599e-01  3.67e-04  1.73e-06  7.95e-05  2.18e-07  8.24e-06  9.35e-01  
 14  +3.2550e-01  +3.2551e-01  5.21e-06  2.44e-08  1.13e-06  3.05e-09  1.18e-07  9.86e-01  
 15  +3.2550e-01  +3.2550e-01  5.21e-08  2.44e-10  1.13e-08  3.05e-11  1.18e-09  9.90e-01  
 16  +3.2550e-01  +3.2550e-01  5.21e-10  2.44e-12  1.13e-10  3.06e-13  1.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.3759ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:23 PM: Optimal value: 3.255e-01
(CVXPY) Sep 20 03:11:23 PM: Compilation took 5.697e-03 seconds
(CVXPY) Sep 20 03:11:23 PM: Solver (including time spent in interface) took 5.807e-03 seconds
FULL MODEL:
  Accruacy: 0.634
  Our objective: 0.268

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.144)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1)                       <-- (term's our objective: 0.044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.056)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.14414119720459
Best over terms:
  Our final objective: 0.14399999999999996
    Its accruacy: 0.572
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14399999999999996
  Highest accruacy: 0.572
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

