Command:
python test_script.py -s linear_dependence -d 9 -n 50000 --seed 21 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14611999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 9.

Computed total variation: 0.16856
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:23 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:23 PM: Finished problem compilation (took 1.648e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 300019
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8095e-01  +5.4248e+03  5.42e+03  4.36e-01  1.71e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3208e-01  +6.1481e+02  6.14e+02  1.78e-01  8.95e+01  1.62e-02  2.78e-01  9.28e-01  
  3  +5.0907e-01  +1.6048e+02  1.60e+02  1.50e-01  7.61e+01  4.51e-05  2.60e-01  2.61e-01  
  4  +5.0135e-01  +1.7495e+01  1.70e+01  4.67e-02  2.35e+01  5.22e-06  1.96e-01  4.48e-01  
  5  +5.0000e-01  +1.1771e+00  6.77e-01  2.02e-03  1.05e+00  2.53e-05  1.91e-01  2.39e-01  
  6  +5.0000e-01  +6.3245e-01  1.32e-01  3.95e-04  2.07e-01  7.08e-06  3.47e-02  8.34e-01  
  7  +4.9958e-01  +8.9454e-01  3.95e-01  7.07e-04  3.71e-01  2.06e-04  3.03e-03  9.62e-01  
  8  +4.9975e-01  +7.5758e-01  2.58e-01  3.87e-04  2.03e-01  1.20e-04  1.45e-03  8.05e-01  
  9  +4.9311e-01  +7.2406e-01  2.31e-01  1.70e-05  8.97e-03  3.00e-03  4.99e-05  9.66e-01  
 10  +4.8650e-01  +6.4883e-01  1.62e-01  9.65e-06  5.07e-03  2.03e-03  2.90e-05  5.14e-01  
 11  +4.8436e-01  +6.1488e-01  1.31e-01  8.11e-06  4.26e-03  8.65e-04  2.48e-05  3.98e-01  
 12  +4.7891e-01  +5.6437e-01  8.55e-02  5.12e-06  2.69e-03  8.78e-06  1.61e-05  8.24e-01  
 13  +4.6333e-01  +4.7999e-01  1.67e-02  8.60e-07  4.51e-04  9.56e-08  2.89e-06  9.25e-01  
 14  +4.5943e-01  +4.6185e-01  2.42e-03  1.20e-07  6.30e-05  1.38e-08  4.21e-07  8.61e-01  
 15  +4.5862e-01  +4.5884e-01  2.26e-04  9.57e-09  5.02e-06  1.80e-09  3.93e-08  9.68e-01  
 16  +4.5854e-01  +4.5854e-01  2.28e-06  9.50e-11  4.98e-08  1.82e-11  3.98e-10  9.90e-01  
 17  +4.5854e-01  +4.5854e-01  2.28e-08  9.49e-13  4.98e-10  1.82e-13  3.99e-12  9.90e-01  
 18  +4.5854e-01  +4.5854e-01  2.39e-10  9.87e-15  5.22e-12  6.36e-15  1.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 537.6205ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:23 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:23 PM: Optimal value: 4.585e-01
(CVXPY) Sep 20 03:21:23 PM: Compilation took 1.648e-01 seconds
(CVXPY) Sep 20 03:21:23 PM: Solver (including time spent in interface) took 6.053e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:24 PM: Your problem has 25029 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:24 PM: Finished problem compilation (took 2.849e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25029
  constraints   = 50029
  nnz(P)        = 0
  nnz(A)        = 343272
  cones (total) = 1
    : Nonnegative = 1,  numel = 50029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4251e+03  5.42e+03  4.36e-01  1.77e+02  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3204e-01  +6.1453e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6031e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7377e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +4.9999e-01  +1.1120e+00  6.12e-01  1.83e-03  9.87e-01  2.86e-05  1.87e-01  3.46e-01  
  6  +4.9999e-01  +8.6468e-01  3.65e-01  1.09e-03  5.89e-01  1.82e-05  8.89e-02  6.37e-01  
  7  +5.0000e-01  +9.4601e-01  4.46e-01  1.33e-03  7.17e-01  1.80e-05  5.60e-02  8.03e-01  
  8  +5.0004e-01  +1.0257e+00  5.26e-01  1.56e-03  8.44e-01  3.25e-06  4.34e-02  9.90e-01  
  9  +5.0001e-01  +7.9614e-01  2.96e-01  8.56e-04  4.63e-01  5.21e-06  1.00e-02  7.84e-01  
 10  +4.9953e-01  +7.2818e-01  2.29e-01  5.77e-05  3.15e-02  2.23e-04  1.58e-04  9.85e-01  
 11  +4.9696e-01  +7.1380e-01  2.17e-01  1.07e-05  5.83e-03  1.14e-03  2.85e-05  8.25e-01  
 12  +4.9627e-01  +7.0623e-01  2.10e-01  9.47e-06  5.18e-03  9.93e-04  2.52e-05  2.49e-01  
 13  +4.9577e-01  +7.0262e-01  2.07e-01  9.46e-06  5.17e-03  9.53e-04  2.52e-05  1.06e-02  
 14  +4.9462e-01  +6.8820e-01  1.94e-01  8.32e-06  4.55e-03  6.47e-04  2.22e-05  3.75e-01  
 15  +4.9403e-01  +6.8177e-01  1.88e-01  8.19e-06  4.47e-03  5.05e-04  2.19e-05  1.65e-01  
 16  +4.9381e-01  +6.8040e-01  1.87e-01  8.16e-06  4.46e-03  4.89e-04  2.18e-05  2.29e-02  
 17  +4.9307e-01  +6.7586e-01  1.83e-01  7.98e-06  4.36e-03  4.41e-04  2.14e-05  8.52e-02  
 18  +4.8937e-01  +6.5722e-01  1.68e-01  6.98e-06  3.81e-03  3.25e-04  1.89e-05  2.82e-01  
 19  +4.8145e-01  +6.1828e-01  1.37e-01  5.93e-06  3.23e-03  5.12e-05  1.65e-05  6.23e-01  
 20  +4.5743e-01  +5.2977e-01  7.23e-02  2.43e-06  1.32e-03  2.51e-05  7.07e-06  6.34e-01  
 21  +4.3175e-01  +4.4180e-01  1.00e-02  3.22e-07  1.75e-04  2.45e-07  1.01e-06  9.07e-01  
 22  +4.2710e-01  +4.2723e-01  1.25e-04  3.93e-09  2.13e-06  2.46e-09  1.24e-08  9.88e-01  
 23  +4.2704e-01  +4.2704e-01  1.25e-06  3.93e-11  2.13e-08  2.46e-11  1.24e-10  9.90e-01  
 24  +4.2704e-01  +4.2704e-01  1.25e-08  3.93e-13  2.13e-10  2.58e-13  1.30e-12  9.90e-01  
 25  +4.2704e-01  +4.2704e-01  1.25e-10  3.97e-15  2.13e-12  2.70e-15  1.36e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 782.6215ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:25 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:25 PM: Optimal value: 4.270e-01
(CVXPY) Sep 20 03:21:25 PM: Compilation took 2.849e-01 seconds
(CVXPY) Sep 20 03:21:25 PM: Solver (including time spent in interface) took 8.245e-01 seconds
Iteration: 2, Objective: 0.4270
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:25 PM: Your problem has 25035 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:25 PM: Finished problem compilation (took 1.392e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25035
  constraints   = 50035
  nnz(P)        = 0
  nnz(A)        = 344864
  cones (total) = 1
    : Nonnegative = 1,  numel = 50035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8094e-01  +5.4252e+03  5.42e+03  4.36e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3204e-01  +6.1447e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6029e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7378e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +4.9999e-01  +1.1082e+00  6.08e-01  1.82e-03  9.81e-01  2.86e-05  1.87e-01  3.49e-01  
  6  +4.9999e-01  +8.9284e-01  3.93e-01  1.17e-03  6.34e-01  1.91e-05  9.45e-02  6.34e-01  
  7  +4.9999e-01  +8.4809e-01  3.48e-01  1.04e-03  5.62e-01  1.89e-05  6.02e-02  4.74e-01  
  8  +4.9995e-01  +7.7605e-01  2.76e-01  8.12e-04  4.39e-01  3.10e-05  1.38e-02  9.90e-01  
  9  +4.9801e-01  +6.9996e-01  2.02e-01  9.78e-05  5.33e-02  9.22e-04  2.92e-04  9.82e-01  
 10  +4.8959e-01  +6.7019e-01  1.81e-01  1.77e-05  9.66e-03  4.41e-03  5.04e-05  8.36e-01  
 11  +4.9045e-01  +6.6701e-01  1.77e-01  1.57e-05  8.57e-03  3.53e-03  4.42e-05  3.62e-01  
 12  +4.9087e-01  +6.6593e-01  1.75e-01  1.56e-05  8.51e-03  3.24e-03  4.36e-05  8.56e-02  
 13  +4.8828e-01  +6.5834e-01  1.70e-01  1.16e-05  6.31e-03  3.60e-03  3.22e-05  3.51e-01  
 14  +4.8836e-01  +6.5817e-01  1.70e-01  1.15e-05  6.30e-03  3.51e-03  3.21e-05  2.54e-02  
 15  +4.8718e-01  +6.4863e-01  1.61e-01  9.57e-06  5.22e-03  2.49e-03  2.66e-05  4.54e-01  
 16  +4.7719e-01  +6.0436e-01  1.27e-01  5.20e-06  2.83e-03  1.17e-03  1.46e-05  8.28e-01  
 17  +4.5682e-01  +5.2867e-01  7.19e-02  2.53e-06  1.37e-03  4.79e-04  7.44e-06  5.85e-01  
 18  +4.5653e-01  +5.2759e-01  7.11e-02  2.49e-06  1.35e-03  4.36e-04  7.33e-06  8.92e-02  
 19  +4.4600e-01  +4.9095e-01  4.49e-02  1.49e-06  8.09e-04  4.52e-06  4.50e-06  9.27e-01  
 20  +4.4253e-01  +4.7937e-01  3.68e-02  1.21e-06  6.55e-04  3.55e-06  3.68e-06  2.18e-01  
 21  +4.4129e-01  +4.7509e-01  3.38e-02  1.09e-06  5.94e-04  2.74e-06  3.34e-06  2.71e-01  
 22  +4.4040e-01  +4.7190e-01  3.15e-02  1.01e-06  5.48e-04  1.87e-06  3.08e-06  3.91e-01  
 23  +4.3416e-01  +4.5137e-01  1.72e-02  5.47e-07  2.97e-04  9.64e-07  1.70e-06  4.89e-01  
 24  +4.2727e-01  +4.2879e-01  1.53e-03  4.82e-08  2.61e-05  3.03e-08  1.53e-07  9.90e-01  
 25  +4.2657e-01  +4.2658e-01  1.55e-05  4.89e-10  2.65e-07  3.06e-10  1.55e-09  9.90e-01  
 26  +4.2656e-01  +4.2656e-01  1.55e-07  4.89e-12  2.65e-09  3.06e-12  1.55e-11  9.90e-01  
 27  +4.2656e-01  +4.2656e-01  1.56e-09  4.93e-14  2.67e-11  3.06e-14  1.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 825.0186ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:26 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:26 PM: Optimal value: 4.266e-01
(CVXPY) Sep 20 03:21:26 PM: Compilation took 1.392e-01 seconds
(CVXPY) Sep 20 03:21:26 PM: Solver (including time spent in interface) took 8.693e-01 seconds
Iteration: 3, Objective: 0.4266
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:26 PM: Your problem has 25036 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:26 PM: Finished problem compilation (took 1.541e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25036
  constraints   = 50036
  nnz(P)        = 0
  nnz(A)        = 345068
  cones (total) = 1
    : Nonnegative = 1,  numel = 50036

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4252e+03  5.42e+03  4.36e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3204e-01  +6.1446e+02  6.14e+02  1.78e-01  9.26e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6029e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7379e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +4.9999e-01  +1.1074e+00  6.07e-01  1.81e-03  9.80e-01  2.86e-05  1.87e-01  3.49e-01  
  6  +4.9999e-01  +8.9634e-01  3.96e-01  1.18e-03  6.40e-01  1.94e-05  9.62e-02  6.18e-01  
  7  +4.9999e-01  +8.4338e-01  3.43e-01  1.02e-03  5.54e-01  1.91e-05  6.12e-02  4.50e-01  
  8  +4.9997e-01  +8.4701e-01  3.47e-01  1.02e-03  5.54e-01  2.65e-05  1.98e-02  9.90e-01  
  9  +4.9936e-01  +7.1347e-01  2.14e-01  2.53e-04  1.38e-01  3.03e-04  8.47e-04  9.61e-01  
 10  +4.9281e-01  +6.8950e-01  1.97e-01  2.50e-05  1.36e-02  3.20e-03  7.08e-05  9.17e-01  
 11  +4.9196e-01  +6.8707e-01  1.95e-01  2.09e-05  1.14e-02  3.45e-03  5.88e-05  2.39e-01  
 12  +4.9272e-01  +6.8361e-01  1.91e-01  1.81e-05  9.90e-03  2.79e-03  5.02e-05  3.91e-01  
 13  +4.9400e-01  +6.6937e-01  1.75e-01  1.23e-05  6.72e-03  1.00e-03  3.33e-05  9.40e-01  
 14  +4.9399e-01  +6.6931e-01  1.75e-01  1.23e-05  6.72e-03  9.91e-04  3.33e-05  1.29e-02  
 15  +4.8836e-01  +6.4543e-01  1.57e-01  6.91e-06  3.77e-03  5.34e-04  1.88e-05  9.35e-01  
 16  +4.7425e-01  +5.8949e-01  1.15e-01  4.53e-06  2.47e-03  1.60e-04  1.28e-05  6.47e-01  
 17  +4.5710e-01  +5.2915e-01  7.21e-02  2.61e-06  1.42e-03  6.98e-06  7.70e-06  8.16e-01  
 18  +4.5462e-01  +5.2072e-01  6.61e-02  2.35e-06  1.28e-03  5.80e-06  6.98e-06  1.80e-01  
 19  +4.5037e-01  +5.0613e-01  5.58e-02  1.90e-06  1.03e-03  2.64e-06  5.67e-06  6.03e-01  
 20  +4.4354e-01  +4.8294e-01  3.94e-02  1.28e-06  6.93e-04  6.70e-07  3.87e-06  9.39e-01  
 21  +4.3251e-01  +4.4634e-01  1.38e-02  4.42e-07  2.40e-04  2.25e-07  1.39e-06  6.70e-01  
 22  +4.2677e-01  +4.2746e-01  6.93e-04  2.20e-08  1.19e-05  1.06e-08  7.02e-08  9.58e-01  
 23  +4.2646e-01  +4.2647e-01  7.05e-06  2.24e-10  1.21e-07  1.07e-10  7.14e-10  9.90e-01  
 24  +4.2646e-01  +4.2646e-01  7.05e-08  2.24e-12  1.21e-09  1.07e-12  7.14e-12  9.90e-01  
 25  +4.2646e-01  +4.2646e-01  7.05e-10  2.24e-14  1.21e-11  1.09e-14  7.23e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 891.1581ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:27 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:27 PM: Optimal value: 4.265e-01
(CVXPY) Sep 20 03:21:27 PM: Compilation took 1.541e-01 seconds
(CVXPY) Sep 20 03:21:27 PM: Solver (including time spent in interface) took 9.324e-01 seconds
Iteration: 4, Objective: 0.4265
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:27 PM: Your problem has 25041 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:27 PM: Finished problem compilation (took 1.818e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25041
  constraints   = 50041
  nnz(P)        = 0
  nnz(A)        = 345780
  cones (total) = 1
    : Nonnegative = 1,  numel = 50041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1440e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6027e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7380e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +4.9999e-01  +1.1092e+00  6.09e-01  1.82e-03  9.83e-01  2.87e-05  1.87e-01  3.49e-01  
  6  +4.9999e-01  +8.7140e-01  3.71e-01  1.11e-03  5.99e-01  1.93e-05  9.42e-02  5.63e-01  
  7  +4.9999e-01  +8.4845e-01  3.48e-01  1.04e-03  5.62e-01  1.96e-05  6.05e-02  5.10e-01  
  8  +4.9994e-01  +7.4414e-01  2.44e-01  7.16e-04  3.87e-01  3.62e-05  1.14e-02  9.90e-01  
  9  +4.9705e-01  +7.1104e-01  2.14e-01  7.95e-05  4.33e-02  1.36e-03  2.36e-04  9.81e-01  
 10  +4.9237e-01  +6.8868e-01  1.96e-01  2.70e-05  1.47e-02  3.20e-03  7.74e-05  7.64e-01  
 11  +4.9209e-01  +6.8233e-01  1.90e-01  2.09e-05  1.14e-02  2.93e-03  5.86e-05  4.65e-01  
 12  +4.8952e-01  +6.6128e-01  1.72e-01  1.12e-05  6.13e-03  2.47e-03  3.10e-05  8.40e-01  
 13  +4.8951e-01  +6.6116e-01  1.72e-01  1.12e-05  6.13e-03  2.45e-03  3.10e-05  6.14e-03  
 14  +4.8832e-01  +6.5313e-01  1.65e-01  9.73e-06  5.31e-03  1.71e-03  2.69e-05  4.12e-01  
 15  +4.7334e-01  +5.9209e-01  1.19e-01  4.47e-06  2.44e-03  1.45e-03  1.26e-05  6.68e-01  
 16  +4.5780e-01  +5.3338e-01  7.56e-02  2.73e-06  1.48e-03  3.75e-04  8.04e-06  6.12e-01  
 17  +4.5651e-01  +5.2877e-01  7.23e-02  2.57e-06  1.40e-03  2.79e-04  7.60e-06  2.47e-01  
 18  +4.5035e-01  +5.0736e-01  5.70e-02  1.94e-06  1.05e-03  8.09e-05  5.81e-06  6.75e-01  
 19  +4.4579e-01  +4.9169e-01  4.59e-02  1.52e-06  8.27e-04  3.86e-05  4.61e-06  5.19e-01  
 20  +4.3664e-01  +4.6096e-01  2.43e-02  7.91e-07  4.29e-04  1.89e-05  2.46e-06  4.90e-01  
 21  +4.2781e-01  +4.3156e-01  3.75e-03  1.20e-07  6.48e-05  2.09e-06  3.81e-07  8.82e-01  
 22  +4.2620e-01  +4.2628e-01  8.18e-05  2.60e-09  1.41e-06  4.31e-08  8.34e-09  9.79e-01  
 23  +4.2616e-01  +4.2616e-01  8.18e-07  2.60e-11  1.41e-08  4.30e-10  8.34e-11  9.90e-01  
 24  +4.2616e-01  +4.2616e-01  8.18e-09  2.60e-13  1.41e-10  4.30e-12  8.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 830.2211ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:28 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:28 PM: Optimal value: 4.262e-01
(CVXPY) Sep 20 03:21:28 PM: Compilation took 1.818e-01 seconds
(CVXPY) Sep 20 03:21:28 PM: Solver (including time spent in interface) took 8.703e-01 seconds
Iteration: 5, Objective: 0.4262
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:29 PM: Your problem has 25043 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:29 PM: Finished problem compilation (took 1.529e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25043
  constraints   = 50043
  nnz(P)        = 0
  nnz(A)        = 346112
  cones (total) = 1
    : Nonnegative = 1,  numel = 50043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3203e-01  +6.1436e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6026e+02  1.60e+02  1.50e-01  7.87e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7381e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +4.9999e-01  +1.1068e+00  6.07e-01  1.81e-03  9.79e-01  2.87e-05  1.87e-01  3.51e-01  
  6  +4.9999e-01  +8.4020e-01  3.40e-01  1.02e-03  5.49e-01  1.85e-05  8.65e-02  5.85e-01  
  7  +4.9999e-01  +8.8027e-01  3.80e-01  1.13e-03  6.13e-01  2.04e-05  5.05e-02  7.33e-01  
  8  +5.0002e-01  +9.7345e-01  4.73e-01  1.41e-03  7.60e-01  8.06e-06  3.67e-02  9.48e-01  
  9  +5.0002e-01  +9.4504e-01  4.45e-01  1.32e-03  7.12e-01  7.70e-06  2.74e-02  3.62e-01  
 10  +5.0002e-01  +8.2155e-01  3.22e-01  9.29e-04  5.03e-01  3.13e-06  1.08e-02  9.90e-01  
 11  +4.9985e-01  +7.6809e-01  2.68e-01  1.10e-04  6.04e-02  7.93e-05  3.07e-04  9.73e-01  
 12  +4.9837e-01  +7.5978e-01  2.61e-01  1.31e-05  7.15e-03  6.73e-04  3.48e-05  8.88e-01  
 13  +4.9683e-01  +7.3916e-01  2.42e-01  1.17e-05  6.42e-03  5.72e-04  3.13e-05  1.88e-01  
 14  +4.9620e-01  +7.3016e-01  2.34e-01  1.17e-05  6.38e-03  5.03e-04  3.12e-05  5.32e-02  
 15  +4.9572e-01  +7.1482e-01  2.19e-01  1.10e-05  6.00e-03  3.61e-04  2.93e-05  2.49e-01  
 16  +4.9459e-01  +6.9651e-01  2.02e-01  1.01e-05  5.50e-03  2.26e-04  2.70e-05  3.38e-01  
 17  +4.9247e-01  +6.8417e-01  1.92e-01  8.74e-06  4.78e-03  2.06e-04  2.35e-05  2.13e-01  
 18  +4.9189e-01  +6.8075e-01  1.89e-01  8.68e-06  4.74e-03  1.91e-04  2.34e-05  4.61e-02  
 19  +4.8220e-01  +6.2804e-01  1.46e-01  6.04e-06  3.29e-03  4.05e-05  1.67e-05  7.43e-01  
 20  +4.6427e-01  +5.5713e-01  9.29e-02  3.52e-06  1.91e-03  4.11e-06  1.02e-05  7.69e-01  
 21  +4.6070e-01  +5.4460e-01  8.39e-02  3.10e-06  1.69e-03  3.20e-06  9.10e-06  2.49e-01  
 22  +4.5762e-01  +5.3380e-01  7.62e-02  2.75e-06  1.50e-03  2.46e-06  8.13e-06  2.85e-01  
 23  +4.4819e-01  +5.0087e-01  5.27e-02  1.79e-06  9.73e-04  9.33e-07  5.41e-06  7.83e-01  
 24  +4.4304e-01  +4.8276e-01  3.97e-02  1.29e-06  7.00e-04  6.17e-07  3.93e-06  9.44e-01  
 25  +4.3206e-01  +4.4616e-01  1.41e-02  4.53e-07  2.46e-04  2.13e-07  1.43e-06  6.84e-01  
 26  +4.2934e-01  +4.3714e-01  7.80e-03  2.50e-07  1.35e-04  1.18e-07  7.93e-07  4.76e-01  
 27  +4.2911e-01  +4.3608e-01  6.96e-03  2.22e-07  1.21e-04  1.09e-07  7.07e-07  7.21e-01  
 28  +4.2848e-01  +4.3401e-01  5.52e-03  1.76e-07  9.55e-05  8.79e-08  5.61e-07  6.51e-01  
 29  +4.2726e-01  +4.3014e-01  2.88e-03  9.18e-08  4.98e-05  4.61e-08  2.94e-07  5.93e-01  
 30  +4.2603e-01  +4.2626e-01  2.34e-04  7.48e-09  4.05e-06  3.71e-09  2.40e-08  9.90e-01  
 31  +4.2592e-01  +4.2592e-01  2.36e-06  7.53e-11  4.08e-08  3.73e-11  2.42e-10  9.90e-01  
 32  +4.2592e-01  +4.2592e-01  2.36e-08  7.53e-13  4.08e-10  3.73e-13  2.42e-12  9.90e-01  
 33  +4.2592e-01  +4.2592e-01  2.39e-10  7.62e-15  4.13e-12  3.73e-15  2.42e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 984.6872ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:30 PM: Optimal value: 4.259e-01
(CVXPY) Sep 20 03:21:30 PM: Compilation took 1.529e-01 seconds
(CVXPY) Sep 20 03:21:30 PM: Solver (including time spent in interface) took 1.061e+00 seconds
Iteration: 6, Objective: 0.4259
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:30 PM: Your problem has 25048 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:30 PM: Finished problem compilation (took 1.922e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25048
  constraints   = 50048
  nnz(P)        = 0
  nnz(A)        = 346977
  cones (total) = 1
    : Nonnegative = 1,  numel = 50048

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8092e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3202e-01  +6.1432e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6025e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7380e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.2951e+00  7.95e-01  2.38e-03  1.28e+00  2.85e-05  1.89e-01  2.69e-01  
  6  +5.0000e-01  +8.1513e-01  3.15e-01  9.41e-04  5.09e-01  1.28e-05  7.16e-02  6.42e-01  
  7  +4.9999e-01  +8.0204e-01  3.02e-01  9.01e-04  4.87e-01  1.47e-05  4.65e-02  4.44e-01  
  8  +4.9994e-01  +7.8197e-01  2.82e-01  8.14e-04  4.40e-01  3.88e-05  9.65e-03  9.53e-01  
  9  +4.9657e-01  +7.3209e-01  2.36e-01  6.14e-05  3.35e-02  1.58e-03  1.77e-04  9.83e-01  
 10  +4.9252e-01  +7.1576e-01  2.23e-01  2.77e-05  1.51e-02  3.12e-03  7.86e-05  5.76e-01  
 11  +4.9791e-01  +6.9196e-01  1.94e-01  2.32e-05  1.27e-02  1.76e-04  6.29e-05  9.57e-01  
 12  +4.9769e-01  +6.9067e-01  1.93e-01  2.15e-05  1.17e-02  1.81e-04  5.80e-05  1.13e-01  
 13  +4.9541e-01  +6.7904e-01  1.84e-01  1.24e-05  6.78e-03  2.48e-04  3.35e-05  5.36e-01  
 14  +4.9342e-01  +6.6939e-01  1.76e-01  9.87e-06  5.39e-03  1.94e-04  2.67e-05  4.70e-01  
 15  +4.9337e-01  +6.6923e-01  1.76e-01  9.87e-06  5.39e-03  1.93e-04  2.67e-05  4.55e-03  
 16  +4.8976e-01  +6.5556e-01  1.66e-01  8.38e-06  4.57e-03  1.19e-04  2.29e-05  4.64e-01  
 17  +4.7418e-01  +5.9215e-01  1.18e-01  4.51e-06  2.45e-03  6.19e-05  1.27e-05  6.74e-01  
 18  +4.6261e-01  +5.5161e-01  8.90e-02  3.31e-06  1.80e-03  2.70e-05  9.66e-06  4.61e-01  
 19  +4.5726e-01  +5.3333e-01  7.61e-02  2.75e-06  1.50e-03  1.88e-05  8.15e-06  2.86e-01  
 20  +4.4780e-01  +5.0113e-01  5.33e-02  1.83e-06  9.92e-04  4.22e-06  5.53e-06  7.49e-01  
 21  +4.4360e-01  +4.8646e-01  4.29e-02  1.41e-06  7.67e-04  1.36e-06  4.31e-06  7.94e-01  
 22  +4.3206e-01  +4.4774e-01  1.57e-02  5.08e-07  2.75e-04  4.11e-07  1.60e-06  7.27e-01  
 23  +4.2789e-01  +4.3391e-01  6.02e-03  1.94e-07  1.05e-04  1.52e-07  6.20e-07  6.50e-01  
 24  +4.2782e-01  +4.3348e-01  5.67e-03  1.82e-07  9.88e-05  1.20e-07  5.84e-07  4.56e-01  
 25  +4.2751e-01  +4.3241e-01  4.90e-03  1.57e-07  8.52e-05  9.17e-08  5.04e-07  5.42e-01  
 26  +4.2688e-01  +4.3040e-01  3.52e-03  1.13e-07  6.12e-05  6.49e-08  3.62e-07  3.60e-01  
 27  +4.2533e-01  +4.2549e-01  1.54e-04  4.94e-09  2.68e-06  2.51e-09  1.60e-08  9.90e-01  
 28  +4.2526e-01  +4.2526e-01  1.54e-06  4.95e-11  2.69e-08  2.51e-11  1.60e-10  9.90e-01  
 29  +4.2526e-01  +4.2526e-01  1.54e-08  4.95e-13  2.69e-10  2.51e-13  1.60e-12  9.90e-01  
 30  +4.2526e-01  +4.2526e-01  1.57e-10  4.98e-15  2.72e-12  2.51e-15  1.60e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0250639s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:31 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:31 PM: Optimal value: 4.253e-01
(CVXPY) Sep 20 03:21:31 PM: Compilation took 1.922e-01 seconds
(CVXPY) Sep 20 03:21:31 PM: Solver (including time spent in interface) took 1.065e+00 seconds
Iteration: 7, Objective: 0.4253
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:31 PM: Your problem has 25056 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:32 PM: Finished problem compilation (took 1.703e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25056
  constraints   = 50056
  nnz(P)        = 0
  nnz(A)        = 348065
  cones (total) = 1
    : Nonnegative = 1,  numel = 50056

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4253e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3202e-01  +6.1427e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0905e-01  +1.6023e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7380e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.3119e+00  8.12e-01  2.43e-03  1.31e+00  2.85e-05  1.89e-01  2.64e-01  
  6  +5.0000e-01  +7.7496e-01  2.75e-01  8.21e-04  4.44e-01  1.13e-05  6.19e-02  6.87e-01  
  7  +4.9999e-01  +7.9836e-01  2.98e-01  8.90e-04  4.81e-01  1.50e-05  3.86e-02  5.36e-01  
  8  +4.9992e-01  +7.9472e-01  2.95e-01  8.26e-04  4.47e-01  4.74e-05  7.49e-03  9.55e-01  
  9  +4.9604e-01  +7.5658e-01  2.61e-01  5.51e-05  3.00e-02  1.82e-03  1.58e-04  9.79e-01  
 10  +4.9034e-01  +7.2579e-01  2.35e-01  2.12e-05  1.16e-02  3.81e-03  5.97e-05  6.57e-01  
 11  +4.9474e-01  +6.9018e-01  1.95e-01  1.56e-05  8.50e-03  6.75e-04  4.24e-05  8.95e-01  
 12  +4.9423e-01  +6.8592e-01  1.92e-01  1.39e-05  7.59e-03  6.10e-04  3.78e-05  2.47e-01  
 13  +4.9181e-01  +6.7448e-01  1.83e-01  1.07e-05  5.87e-03  6.34e-04  2.93e-05  3.07e-01  
 14  +4.9178e-01  +6.7433e-01  1.83e-01  1.07e-05  5.86e-03  6.31e-04  2.93e-05  3.68e-03  
 15  +4.8962e-01  +6.6305e-01  1.73e-01  9.59e-06  5.23e-03  4.12e-04  2.64e-05  3.78e-01  
 16  +4.7291e-01  +5.9019e-01  1.17e-01  4.40e-06  2.40e-03  2.43e-04  1.24e-05  7.40e-01  
 17  +4.7247e-01  +5.8870e-01  1.16e-01  4.37e-06  2.38e-03  2.31e-04  1.24e-05  3.78e-02  
 18  +4.7009e-01  +5.8051e-01  1.10e-01  4.21e-06  2.29e-03  1.52e-04  1.20e-05  2.55e-01  
 19  +4.5937e-01  +5.4237e-01  8.30e-02  3.03e-06  1.65e-03  9.75e-05  8.91e-06  3.19e-01  
 20  +4.5656e-01  +5.3277e-01  7.62e-02  2.74e-06  1.49e-03  6.89e-05  8.10e-06  2.75e-01  
 21  +4.4808e-01  +5.0356e-01  5.55e-02  1.90e-06  1.03e-03  1.71e-05  5.76e-06  7.09e-01  
 22  +4.4398e-01  +4.8940e-01  4.54e-02  1.52e-06  8.27e-04  9.12e-06  4.66e-06  4.78e-01  
 23  +4.3121e-01  +4.4602e-01  1.48e-02  4.82e-07  2.61e-04  1.54e-06  1.53e-06  8.23e-01  
 24  +4.2736e-01  +4.3321e-01  5.85e-03  1.89e-07  1.02e-04  5.53e-07  6.06e-07  6.45e-01  
 25  +4.2729e-01  +4.3285e-01  5.56e-03  1.79e-07  9.72e-05  3.62e-07  5.77e-07  4.04e-01  
 26  +4.2704e-01  +4.3194e-01  4.90e-03  1.58e-07  8.55e-05  2.13e-07  5.07e-07  5.14e-01  
 27  +4.2638e-01  +4.2984e-01  3.46e-03  1.11e-07  6.02e-05  1.41e-07  3.58e-07  3.69e-01  
 28  +4.2486e-01  +4.2499e-01  1.31e-04  4.23e-09  2.29e-06  2.91e-09  1.37e-08  9.90e-01  
 29  +4.2480e-01  +4.2480e-01  1.32e-06  4.24e-11  2.30e-08  2.92e-11  1.37e-10  9.90e-01  
 30  +4.2480e-01  +4.2480e-01  1.32e-08  4.24e-13  2.30e-10  2.92e-13  1.37e-12  9.90e-01  
 31  +4.2480e-01  +4.2480e-01  1.34e-10  4.45e-15  2.33e-12  2.92e-15  1.37e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 923.3125ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:33 PM: Optimal value: 4.248e-01
(CVXPY) Sep 20 03:21:33 PM: Compilation took 1.703e-01 seconds
(CVXPY) Sep 20 03:21:33 PM: Solver (including time spent in interface) took 9.686e-01 seconds
Iteration: 8, Objective: 0.4248
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:33 PM: Your problem has 25057 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:33 PM: Finished problem compilation (took 1.339e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25057
  constraints   = 50057
  nnz(P)        = 0
  nnz(A)        = 348254
  cones (total) = 1
    : Nonnegative = 1,  numel = 50057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8091e-01  +5.4254e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3201e-01  +6.1423e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.28e-01  
  3  +5.0904e-01  +1.6022e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.62e-01  
  4  +5.0134e-01  +1.7380e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.3116e+00  8.12e-01  2.43e-03  1.31e+00  2.85e-05  1.89e-01  2.65e-01  
  6  +5.0000e-01  +7.7336e-01  2.73e-01  8.16e-04  4.41e-01  1.13e-05  6.15e-02  6.89e-01  
  7  +4.9999e-01  +7.7051e-01  2.71e-01  8.06e-04  4.36e-01  1.67e-05  3.10e-02  5.95e-01  
  8  +4.9984e-01  +7.9772e-01  2.98e-01  7.51e-04  4.07e-01  8.55e-05  4.49e-03  9.88e-01  
  9  +4.9417e-01  +7.6698e-01  2.73e-01  4.34e-05  2.37e-02  2.67e-03  1.24e-04  9.72e-01  
 10  +4.9133e-01  +7.4451e-01  2.53e-01  2.66e-05  1.45e-02  3.47e-03  7.51e-05  4.60e-01  
 11  +4.9576e-01  +7.0124e-01  2.05e-01  1.96e-05  1.07e-02  7.25e-04  5.33e-05  8.58e-01  
 12  +4.9525e-01  +6.9537e-01  2.00e-01  1.64e-05  8.95e-03  6.69e-04  4.45e-05  3.30e-01  
 13  +4.9449e-01  +6.8642e-01  1.92e-01  1.34e-05  7.35e-03  4.97e-04  3.64e-05  4.71e-01  
 14  +4.9287e-01  +6.7897e-01  1.86e-01  1.13e-05  6.18e-03  5.07e-04  3.07e-05  2.19e-01  
 15  +4.9283e-01  +6.7868e-01  1.86e-01  1.13e-05  6.17e-03  4.97e-04  3.07e-05  1.68e-02  
 16  +4.8836e-01  +6.5593e-01  1.68e-01  8.46e-06  4.62e-03  1.99e-04  2.33e-05  7.20e-01  
 17  +4.7412e-01  +5.9433e-01  1.20e-01  4.92e-06  2.68e-03  7.18e-05  1.40e-05  7.07e-01  
 18  +4.7111e-01  +5.8385e-01  1.13e-01  4.54e-06  2.47e-03  5.99e-05  1.30e-05  1.47e-01  
 19  +4.5611e-01  +5.3098e-01  7.49e-02  2.76e-06  1.50e-03  2.97e-05  8.20e-06  4.76e-01  
 20  +4.5482e-01  +5.2684e-01  7.20e-02  2.61e-06  1.42e-03  2.27e-05  7.78e-06  2.35e-01  
 21  +4.4719e-01  +5.0120e-01  5.40e-02  1.86e-06  1.01e-03  5.69e-06  5.65e-06  7.31e-01  
 22  +4.3888e-01  +4.7277e-01  3.39e-02  1.13e-06  6.10e-04  1.89e-06  3.49e-06  7.03e-01  
 23  +4.2693e-01  +4.3256e-01  5.63e-03  1.83e-07  9.91e-05  2.10e-07  5.90e-07  8.89e-01  
 24  +4.2692e-01  +4.3252e-01  5.60e-03  1.82e-07  9.85e-05  2.07e-07  5.86e-07  2.62e-02  
 25  +4.2633e-01  +4.3034e-01  4.01e-03  1.30e-07  7.02e-05  6.45e-08  4.18e-07  9.90e-01  
 26  +4.2504e-01  +4.2629e-01  1.25e-03  4.04e-08  2.19e-05  2.00e-08  1.31e-07  7.25e-01  
 27  +4.2447e-01  +4.2448e-01  1.42e-05  4.59e-10  2.49e-07  2.26e-10  1.49e-09  9.89e-01  
 28  +4.2446e-01  +4.2446e-01  1.42e-07  4.59e-12  2.49e-09  2.26e-12  1.49e-11  9.90e-01  
 29  +4.2446e-01  +4.2446e-01  1.44e-09  4.66e-14  2.53e-11  2.26e-14  1.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 968.844ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:34 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:34 PM: Optimal value: 4.245e-01
(CVXPY) Sep 20 03:21:34 PM: Compilation took 1.339e-01 seconds
(CVXPY) Sep 20 03:21:34 PM: Solver (including time spent in interface) took 1.006e+00 seconds
Iteration: 9, Objective: 0.4245
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:34 PM: Your problem has 25062 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:34 PM: Finished problem compilation (took 2.336e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25062
  constraints   = 50062
  nnz(P)        = 0
  nnz(A)        = 348792
  cones (total) = 1
    : Nonnegative = 1,  numel = 50062

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3201e-01  +6.1419e+02  6.14e+02  1.78e-01  9.25e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6020e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0134e-01  +1.7383e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.3087e+00  8.09e-01  2.42e-03  1.30e+00  2.85e-05  1.89e-01  2.66e-01  
  6  +5.0000e-01  +7.4912e-01  2.49e-01  7.44e-04  4.02e-01  1.07e-05  5.63e-02  7.07e-01  
  7  +4.9998e-01  +7.8127e-01  2.81e-01  8.38e-04  4.53e-01  1.84e-05  2.74e-02  6.64e-01  
  8  +4.9973e-01  +7.5317e-01  2.53e-01  5.47e-04  2.97e-01  1.32e-04  2.55e-03  9.65e-01  
  9  +4.9471e-01  +7.3359e-01  2.39e-01  4.42e-05  2.41e-02  2.40e-03  1.27e-04  9.50e-01  
 10  +4.9252e-01  +7.1886e-01  2.26e-01  2.80e-05  1.53e-02  3.06e-03  7.93e-05  4.66e-01  
 11  +4.9583e-01  +6.9592e-01  2.00e-01  2.13e-05  1.16e-02  9.56e-04  5.81e-05  8.45e-01  
 12  +4.9562e-01  +6.9433e-01  1.99e-01  1.99e-05  1.09e-02  9.49e-04  5.42e-05  1.20e-01  
 13  +4.9454e-01  +6.8783e-01  1.93e-01  1.55e-05  8.47e-03  9.58e-04  4.22e-05  3.67e-01  
 14  +4.9291e-01  +6.7835e-01  1.85e-01  1.20e-05  6.54e-03  8.63e-04  3.26e-05  4.29e-01  
 15  +4.9289e-01  +6.7820e-01  1.85e-01  1.20e-05  6.54e-03  8.53e-04  3.26e-05  1.10e-02  
 16  +4.8937e-01  +6.6053e-01  1.71e-01  9.04e-06  4.93e-03  4.38e-04  2.48e-05  6.68e-01  
 17  +4.7428e-01  +5.9598e-01  1.22e-01  4.79e-06  2.61e-03  1.95e-04  1.36e-05  7.39e-01  
 18  +4.7082e-01  +5.8373e-01  1.13e-01  4.39e-06  2.39e-03  1.62e-04  1.26e-05  1.42e-01  
 19  +4.6136e-01  +5.5024e-01  8.89e-02  3.32e-06  1.80e-03  1.07e-04  9.73e-06  3.04e-01  
 20  +4.5529e-01  +5.2938e-01  7.41e-02  2.68e-06  1.46e-03  6.68e-05  8.00e-06  3.46e-01  
 21  +4.5031e-01  +5.1243e-01  6.21e-02  2.16e-06  1.17e-03  1.51e-05  6.50e-06  7.40e-01  
 22  +4.4000e-01  +4.7701e-01  3.70e-02  1.24e-06  6.75e-04  6.13e-06  3.86e-06  5.79e-01  
 23  +4.2829e-01  +4.3722e-01  8.93e-03  2.91e-07  1.58e-04  8.55e-07  9.36e-07  8.55e-01  
 24  +4.2784e-01  +4.3570e-01  7.86e-03  2.56e-07  1.39e-04  7.11e-07  8.23e-07  1.81e-01  
 25  +4.2729e-01  +4.3384e-01  6.55e-03  2.13e-07  1.15e-04  5.44e-07  6.84e-07  2.53e-01  
 26  +4.2702e-01  +4.3268e-01  5.66e-03  1.83e-07  9.94e-05  1.40e-07  5.92e-07  8.85e-01  
 27  +4.2649e-01  +4.3097e-01  4.48e-03  1.45e-07  7.87e-05  8.60e-08  4.69e-07  7.00e-01  
 28  +4.2547e-01  +4.2774e-01  2.27e-03  7.34e-08  3.98e-05  4.25e-08  2.38e-07  5.65e-01  
 29  +4.2454e-01  +4.2479e-01  2.50e-04  8.09e-09  4.38e-06  3.81e-09  2.63e-08  9.90e-01  
 30  +4.2442e-01  +4.2443e-01  4.22e-06  1.37e-10  7.40e-08  6.46e-11  4.45e-10  9.84e-01  
 31  +4.2442e-01  +4.2442e-01  4.22e-08  1.37e-12  7.40e-10  6.46e-13  4.45e-12  9.90e-01  
 32  +4.2442e-01  +4.2442e-01  4.22e-10  1.35e-14  7.41e-12  6.65e-15  4.57e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0078272s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:35 PM: Optimal value: 4.244e-01
(CVXPY) Sep 20 03:21:35 PM: Compilation took 2.336e-01 seconds
(CVXPY) Sep 20 03:21:35 PM: Solver (including time spent in interface) took 1.050e+00 seconds
Iteration: 10, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:35 PM: Your problem has 25069 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:36 PM: Finished problem compilation (took 1.413e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25069
  constraints   = 50069
  nnz(P)        = 0
  nnz(A)        = 349942
  cones (total) = 1
    : Nonnegative = 1,  numel = 50069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4256e+03  5.43e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1409e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6018e+02  1.60e+02  1.50e-01  7.86e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0134e-01  +1.7384e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.3225e+00  8.23e-01  2.46e-03  1.33e+00  2.85e-05  1.89e-01  2.62e-01  
  6  +5.0000e-01  +7.5724e-01  2.57e-01  7.68e-04  4.15e-01  1.08e-05  5.78e-02  6.98e-01  
  7  +4.9998e-01  +8.4565e-01  3.46e-01  1.02e-03  5.53e-01  2.36e-05  2.29e-02  8.46e-01  
  8  +4.9952e-01  +7.3334e-01  2.34e-01  3.48e-04  1.89e-01  2.30e-04  1.26e-03  9.49e-01  
  9  +4.9329e-01  +7.1245e-01  2.19e-01  3.05e-05  1.66e-02  3.01e-03  8.67e-05  9.31e-01  
 10  +4.9171e-01  +7.0500e-01  2.13e-01  2.31e-05  1.26e-02  3.43e-03  6.51e-05  3.23e-01  
 11  +4.9712e-01  +6.9323e-01  1.96e-01  1.93e-05  1.05e-02  2.37e-04  5.22e-05  9.90e-01  
 12  +4.9598e-01  +6.8775e-01  1.92e-01  1.47e-05  8.04e-03  2.52e-04  3.97e-05  3.73e-01  
 13  +4.9469e-01  +6.8214e-01  1.87e-01  1.23e-05  6.74e-03  2.58e-04  3.34e-05  2.41e-01  
 14  +4.9449e-01  +6.8086e-01  1.86e-01  1.21e-05  6.61e-03  2.32e-04  3.27e-05  1.12e-01  
 15  +4.8788e-01  +6.5343e-01  1.66e-01  7.48e-06  4.08e-03  1.25e-04  2.05e-05  8.25e-01  
 16  +4.7108e-01  +5.8737e-01  1.16e-01  4.43e-06  2.41e-03  5.99e-05  1.26e-05  5.71e-01  
 17  +4.6504e-01  +5.6597e-01  1.01e-01  3.81e-06  2.07e-03  3.83e-05  1.11e-05  2.92e-01  
 18  +4.6158e-01  +5.5395e-01  9.24e-02  3.44e-06  1.87e-03  2.66e-05  1.01e-05  2.73e-01  
 19  +4.5724e-01  +5.3878e-01  8.15e-02  2.97e-06  1.62e-03  1.65e-05  8.83e-06  3.55e-01  
 20  +4.4727e-01  +5.0385e-01  5.66e-02  1.96e-06  1.06e-03  5.85e-07  5.95e-06  9.30e-01  
 21  +4.3850e-01  +4.7333e-01  3.48e-02  1.16e-06  6.32e-04  4.28e-07  3.63e-06  6.69e-01  
 22  +4.2662e-01  +4.3272e-01  6.09e-03  1.99e-07  1.08e-04  8.69e-08  6.43e-07  9.73e-01  
 23  +4.2659e-01  +4.3262e-01  6.03e-03  1.96e-07  1.06e-04  8.63e-08  6.35e-07  4.48e-02  
 24  +4.2651e-01  +4.3235e-01  5.83e-03  1.90e-07  1.03e-04  8.43e-08  6.12e-07  1.33e-01  
 25  +4.2634e-01  +4.3167e-01  5.33e-03  1.74e-07  9.41e-05  7.91e-08  5.64e-07  6.02e-01  
 26  +4.2554e-01  +4.2907e-01  3.53e-03  1.15e-07  6.24e-05  5.30e-08  3.74e-07  4.77e-01  
 27  +4.2526e-01  +4.2818e-01  2.92e-03  9.48e-08  5.14e-05  4.43e-08  3.08e-07  4.65e-01  
 28  +4.2413e-01  +4.2458e-01  4.50e-04  1.46e-08  7.92e-06  6.82e-09  4.77e-08  8.68e-01  
 29  +4.2392e-01  +4.2393e-01  4.88e-06  1.58e-10  8.58e-08  7.38e-11  5.17e-10  9.89e-01  
 30  +4.2392e-01  +4.2392e-01  4.88e-08  1.58e-12  8.58e-10  7.38e-13  5.17e-12  9.90e-01  
 31  +4.2392e-01  +4.2392e-01  4.94e-10  1.60e-14  8.69e-12  7.41e-15  5.20e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2378058s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:37 PM: Optimal value: 4.239e-01
(CVXPY) Sep 20 03:21:37 PM: Compilation took 1.413e-01 seconds
(CVXPY) Sep 20 03:21:37 PM: Solver (including time spent in interface) took 1.278e+00 seconds
Iteration: 11, Objective: 0.4239
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:21:37 PM: Your problem has 25072 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:21:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:21:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:21:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:21:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:21:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:21:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:21:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:21:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:21:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:21:37 PM: Finished problem compilation (took 1.519e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25072
  constraints   = 50072
  nnz(P)        = 0
  nnz(A)        = 350294
  cones (total) = 1
    : Nonnegative = 1,  numel = 50072

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.70e+02  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4255e+03  5.42e+03  4.37e-01  1.77e+02  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3200e-01  +6.1410e+02  6.14e+02  1.78e-01  9.24e+01  1.63e-02  2.78e-01  9.29e-01  
  3  +5.0904e-01  +1.6018e+02  1.60e+02  1.50e-01  7.85e+01  4.52e-05  2.60e-01  2.63e-01  
  4  +5.0134e-01  +1.7381e+01  1.69e+01  4.64e-02  2.42e+01  5.24e-06  1.95e-01  4.53e-01  
  5  +5.0000e-01  +1.3237e+00  8.24e-01  2.46e-03  1.33e+00  2.85e-05  1.89e-01  2.62e-01  
  6  +5.0000e-01  +7.5942e-01  2.59e-01  7.75e-04  4.19e-01  1.08e-05  5.82e-02  6.96e-01  
  7  +4.9998e-01  +8.5876e-01  3.59e-01  1.07e-03  5.75e-01  2.19e-05  2.58e-02  8.25e-01  
  8  +4.9966e-01  +7.3692e-01  2.37e-01  4.36e-04  2.37e-01  1.63e-04  1.75e-03  9.37e-01  
  9  +4.9561e-01  +7.2286e-01  2.27e-01  4.67e-05  2.55e-02  1.99e-03  1.34e-04  9.25e-01  
 10  +4.9384e-01  +7.1325e-01  2.19e-01  3.08e-05  1.68e-02  2.56e-03  8.72e-05  4.28e-01  
 11  +4.9653e-01  +7.0494e-01  2.08e-01  2.86e-05  1.56e-02  1.14e-03  7.87e-05  5.93e-01  
 12  +4.9641e-01  +7.0317e-01  2.07e-01  2.60e-05  1.42e-02  1.12e-03  7.12e-05  1.81e-01  
 13  +4.9781e-01  +6.9877e-01  2.01e-01  2.42e-05  1.32e-02  4.52e-04  6.54e-05  6.44e-01  
 14  +4.9782e-01  +6.9839e-01  2.01e-01  2.36e-05  1.29e-02  4.36e-04  6.38e-05  7.73e-02  
 15  +4.9756e-01  +6.9236e-01  1.95e-01  1.62e-05  8.89e-03  2.36e-04  4.36e-05  8.81e-01  
 16  +4.9597e-01  +6.8430e-01  1.88e-01  1.10e-05  6.04e-03  1.27e-04  2.96e-05  8.77e-01  
 17  +4.9389e-01  +6.7575e-01  1.82e-01  9.14e-06  5.00e-03  1.34e-04  2.46e-05  2.07e-01  
 18  +4.9378e-01  +6.7540e-01  1.82e-01  9.14e-06  5.00e-03  1.32e-04  2.46e-05  7.83e-03  
 19  +4.8769e-01  +6.5277e-01  1.65e-01  7.40e-06  4.04e-03  7.66e-05  2.03e-05  5.00e-01  
 20  +4.7151e-01  +5.8943e-01  1.18e-01  4.52e-06  2.46e-03  3.80e-05  1.29e-05  5.43e-01  
 21  +4.5908e-01  +5.4522e-01  8.61e-02  3.25e-06  1.76e-03  8.00e-06  9.63e-06  6.50e-01  
 22  +4.5704e-01  +5.3820e-01  8.12e-02  2.99e-06  1.62e-03  5.16e-06  8.90e-06  3.78e-01  
 23  +4.5092e-01  +5.1685e-01  6.59e-02  2.32e-06  1.26e-03  1.86e-06  7.01e-06  7.10e-01  
 24  +4.3883e-01  +4.7473e-01  3.59e-02  1.22e-06  6.60e-04  8.49e-07  3.80e-06  5.76e-01  
 25  +4.3137e-01  +4.4909e-01  1.77e-02  5.86e-07  3.18e-04  3.74e-07  1.87e-06  6.41e-01  
 26  +4.2806e-01  +4.3788e-01  9.81e-03  3.21e-07  1.74e-04  1.98e-07  1.03e-06  5.35e-01  
 27  +4.2770e-01  +4.3660e-01  8.90e-03  2.91e-07  1.58e-04  1.76e-07  9.37e-07  1.94e-01  
 28  +4.2719e-01  +4.3483e-01  7.65e-03  2.49e-07  1.35e-04  1.45e-07  8.02e-07  2.93e-01  
 29  +4.2666e-01  +4.3278e-01  6.12e-03  1.99e-07  1.08e-04  9.51e-08  6.42e-07  9.90e-01  
 30  +4.2468e-01  +4.2650e-01  1.82e-03  5.90e-08  3.20e-05  2.83e-08  1.92e-07  7.77e-01  
 31  +4.2394e-01  +4.2415e-01  2.13e-04  6.93e-09  3.76e-06  3.20e-09  2.27e-08  9.90e-01  
 32  +4.2384e-01  +4.2385e-01  4.21e-06  1.37e-10  7.41e-08  6.31e-11  4.47e-10  9.83e-01  
 33  +4.2384e-01  +4.2384e-01  4.21e-08  1.37e-12  7.41e-10  6.31e-13  4.47e-12  9.90e-01  
 34  +4.2384e-01  +4.2384e-01  4.21e-10  1.36e-14  7.41e-12  6.59e-15  4.65e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1634927s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:21:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:21:38 PM: Optimal value: 4.238e-01
(CVXPY) Sep 20 03:21:38 PM: Compilation took 1.519e-01 seconds
(CVXPY) Sep 20 03:21:38 PM: Solver (including time spent in interface) took 1.205e+00 seconds
FULL MODEL:
  Accruacy: 0.5758
  Our objective: 0.1516

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.14612)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00076)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00072)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.00116)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.00028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00068)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.00052)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.00068)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.00028)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 24.514544010162354
Best over terms:
  Our final objective: 0.14612000000000003
    Its accruacy: 0.57306
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14612000000000003
  Highest accruacy: 0.57306
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

