Command:
python test_script.py -s linear_dependence -d 9 -n 1000 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.532
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:35 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:35 PM: Finished problem compilation (took 5.174e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +5.0093e+02  5.00e+02  9.56e-01  3.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.8055e-01  +1.0889e+02  1.08e+02  4.15e-01  2.30e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3022e-01  +1.2424e+01  1.19e+01  1.43e-01  1.01e+01  1.65e-02  2.70e-01  9.51e-01  
  3  +5.0553e-01  +3.0223e+00  2.52e+00  5.26e-02  3.62e+00  4.11e-05  2.30e-01  5.05e-01  
  4  +5.0069e-01  +8.3637e-01  3.36e-01  7.47e-03  5.39e-01  1.16e-05  7.17e-02  7.84e-01  
  5  +4.9860e-01  +8.2454e-01  3.26e-01  3.94e-03  2.90e-01  4.63e-05  1.31e-02  8.82e-01  
  6  +4.8845e-01  +7.4393e-01  2.55e-01  8.85e-04  6.58e-02  1.51e-04  2.61e-03  8.02e-01  
  7  +4.7220e-01  +6.3006e-01  1.58e-01  4.38e-04  3.22e-02  8.58e-05  1.40e-03  5.63e-01  
  8  +4.5031e-01  +5.0307e-01  5.28e-02  1.32e-04  9.65e-03  8.88e-06  4.79e-04  9.90e-01  
  9  +4.3642e-01  +4.4309e-01  6.67e-03  1.42e-05  1.04e-03  2.41e-06  6.00e-05  9.76e-01  
 10  +4.3413e-01  +4.3423e-01  9.87e-05  2.04e-07  1.49e-05  3.43e-08  8.97e-07  9.85e-01  
 11  +4.3410e-01  +4.3410e-01  9.87e-07  2.04e-09  1.49e-07  3.43e-10  8.97e-09  9.90e-01  
 12  +4.3410e-01  +4.3410e-01  9.87e-09  2.04e-11  1.49e-09  3.44e-12  8.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0573ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:35 PM: Optimal value: 4.341e-01
(CVXPY) Sep 20 03:17:35 PM: Compilation took 5.174e-03 seconds
(CVXPY) Sep 20 03:17:35 PM: Solver (including time spent in interface) took 6.524e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:35 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:35 PM: Finished problem compilation (took 4.038e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 6986
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9999e-01  +5.0160e+02  5.01e+02  9.56e-01  3.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.8003e-01  +1.0914e+02  1.09e+02  4.19e-01  2.38e+01  3.77e-03  5.81e-01  5.85e-01  
  2  +5.2924e-01  +1.2267e+01  1.17e+01  1.43e-01  1.03e+01  1.69e-02  2.71e-01  9.63e-01  
  3  +5.0520e-01  +2.9484e+00  2.44e+00  5.16e-02  3.67e+00  4.25e-05  2.24e-01  5.61e-01  
  4  +5.0084e-01  +9.2918e-01  4.28e-01  9.61e-03  7.12e-01  1.31e-05  7.89e-02  7.20e-01  
  5  +4.9906e-01  +8.6838e-01  3.69e-01  5.37e-03  4.06e-01  3.60e-05  1.85e-02  8.34e-01  
  6  +4.8812e-01  +7.7619e-01  2.88e-01  1.02e-03  7.86e-02  1.47e-04  2.92e-03  8.44e-01  
  7  +4.8177e-01  +7.2130e-01  2.40e-01  7.65e-04  5.86e-02  1.13e-04  2.21e-03  4.35e-01  
  8  +4.8110e-01  +7.1113e-01  2.30e-01  7.06e-04  5.40e-02  1.02e-04  2.03e-03  3.35e-01  
  9  +4.7168e-01  +6.5603e-01  1.84e-01  4.42e-04  3.38e-02  9.58e-05  1.28e-03  4.33e-01  
 10  +4.6474e-01  +6.2851e-01  1.64e-01  3.26e-04  2.48e-02  9.58e-05  9.46e-04  3.40e-01  
 11  +4.5134e-01  +5.5783e-01  1.06e-01  2.12e-04  1.61e-02  5.18e-05  6.36e-04  8.99e-01  
 12  +4.3738e-01  +5.0786e-01  7.05e-02  1.25e-04  9.44e-03  3.51e-05  3.85e-04  4.19e-01  
 13  +4.1350e-01  +4.2142e-01  7.92e-03  1.26e-05  9.55e-04  2.76e-06  4.16e-05  9.22e-01  
 14  +4.1015e-01  +4.1026e-01  1.10e-04  1.75e-07  1.32e-05  3.49e-08  5.86e-07  9.86e-01  
 15  +4.1010e-01  +4.1010e-01  1.10e-06  1.75e-09  1.32e-07  3.49e-10  5.87e-09  9.90e-01  
 16  +4.1010e-01  +4.1010e-01  1.10e-08  1.75e-11  1.32e-09  3.49e-12  5.87e-11  9.90e-01  
 17  +4.1010e-01  +4.1010e-01  1.10e-10  1.75e-13  1.32e-11  3.49e-14  5.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0609ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:35 PM: Optimal value: 4.101e-01
(CVXPY) Sep 20 03:17:35 PM: Compilation took 4.038e-03 seconds
(CVXPY) Sep 20 03:17:35 PM: Solver (including time spent in interface) took 8.088e-03 seconds
Iteration: 2, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:36 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Finished problem compilation (took 3.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7428
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9992e-01  +5.0129e+02  5.01e+02  9.56e-01  3.73e+01  1.00e+00  1.01e+00   ------   
  1  +5.7898e-01  +1.0912e+02  1.09e+02  4.20e-01  2.38e+01  3.78e-03  5.82e-01  5.85e-01  
  2  +5.2831e-01  +1.2082e+01  1.16e+01  1.40e-01  1.01e+01  1.71e-02  2.67e-01  9.75e-01  
  3  +5.0484e-01  +2.8658e+00  2.36e+00  5.01e-02  3.57e+00  4.38e-05  2.13e-01  6.21e-01  
  4  +5.0099e-01  +1.0965e+00  5.96e-01  1.33e-02  9.83e-01  1.72e-05  8.66e-02  6.38e-01  
  5  +4.9564e-01  +1.0972e+00  6.02e-01  4.76e-03  3.66e-01  8.44e-05  1.37e-02  9.37e-01  
  6  +4.7933e-01  +8.8900e-01  4.10e-01  1.35e-03  1.04e-01  1.51e-04  3.83e-03  7.28e-01  
  7  +4.6512e-01  +7.5728e-01  2.92e-01  8.22e-04  6.30e-02  1.13e-04  2.42e-03  4.47e-01  
  8  +4.6342e-01  +7.5852e-01  2.95e-01  6.81e-04  5.22e-02  1.38e-04  1.95e-03  4.16e-01  
  9  +4.5698e-01  +7.0146e-01  2.44e-01  4.95e-04  3.79e-02  1.28e-04  1.43e-03  5.99e-01  
 10  +4.4996e-01  +6.5041e-01  2.00e-01  4.29e-04  3.28e-02  9.79e-05  1.27e-03  4.25e-01  
 11  +4.2302e-01  +5.2616e-01  1.03e-01  1.87e-04  1.42e-02  5.10e-05  5.83e-04  6.14e-01  
 12  +4.0143e-01  +4.3299e-01  3.16e-02  5.56e-05  4.21e-03  1.42e-05  1.87e-04  7.16e-01  
 13  +3.9115e-01  +3.9307e-01  1.92e-03  3.32e-06  2.52e-04  1.07e-06  1.19e-05  9.83e-01  
 14  +3.9031e-01  +3.9033e-01  1.98e-05  3.42e-08  2.59e-06  1.10e-08  1.23e-07  9.90e-01  
 15  +3.9030e-01  +3.9030e-01  1.98e-07  3.42e-10  2.59e-08  1.10e-10  1.23e-09  9.90e-01  
 16  +3.9030e-01  +3.9030e-01  1.98e-09  3.42e-12  2.59e-10  1.10e-12  1.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:36 PM: Optimal value: 3.903e-01
(CVXPY) Sep 20 03:17:36 PM: Compilation took 3.998e-03 seconds
(CVXPY) Sep 20 03:17:36 PM: Solver (including time spent in interface) took 7.538e-03 seconds
Iteration: 3, Objective: 0.3903
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:36 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Finished problem compilation (took 5.523e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7663
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9983e-01  +5.0135e+02  5.01e+02  9.57e-01  3.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.7764e-01  +1.0919e+02  1.09e+02  4.22e-01  2.36e+01  3.77e-03  5.83e-01  5.84e-01  
  2  +5.2730e-01  +1.1905e+01  1.14e+01  1.38e-01  9.80e+00  1.74e-02  2.62e-01  9.89e-01  
  3  +5.0453e-01  +2.7921e+00  2.29e+00  4.88e-02  3.48e+00  4.59e-05  2.00e-01  6.86e-01  
  4  +5.0081e-01  +1.1500e+00  6.49e-01  1.43e-02  1.06e+00  2.07e-05  7.77e-02  6.41e-01  
  5  +4.8880e-01  +1.2198e+00  7.31e-01  3.43e-03  2.65e-01  1.54e-04  9.28e-03  9.36e-01  
  6  +4.6471e-01  +8.8348e-01  4.19e-01  1.17e-03  8.99e-02  1.50e-04  3.27e-03  6.91e-01  
  7  +4.5942e-01  +8.6650e-01  4.07e-01  9.70e-04  7.47e-02  1.72e-04  2.70e-03  3.66e-01  
  8  +4.3554e-01  +6.9635e-01  2.61e-01  5.64e-04  4.31e-02  1.11e-04  1.66e-03  6.05e-01  
  9  +4.0816e-01  +5.4330e-01  1.35e-01  2.72e-04  2.06e-02  5.49e-05  8.59e-04  5.33e-01  
 10  +3.9671e-01  +4.7683e-01  8.01e-02  1.60e-04  1.21e-02  5.04e-05  5.31e-04  9.90e-01  
 11  +3.7753e-01  +3.9680e-01  1.93e-02  3.72e-05  2.80e-03  1.08e-05  1.34e-04  7.69e-01  
 12  +3.7181e-01  +3.7508e-01  3.27e-03  6.16e-06  4.64e-04  1.80e-06  2.35e-05  8.56e-01  
 13  +3.7062e-01  +3.7066e-01  4.09e-05  7.66e-08  5.78e-06  2.19e-08  2.98e-07  9.89e-01  
 14  +3.7060e-01  +3.7060e-01  4.09e-07  7.66e-10  5.78e-08  2.19e-10  2.98e-09  9.90e-01  
 15  +3.7060e-01  +3.7060e-01  4.09e-09  7.66e-12  5.78e-10  2.19e-12  2.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8058ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:36 PM: Optimal value: 3.706e-01
(CVXPY) Sep 20 03:17:36 PM: Compilation took 5.523e-03 seconds
(CVXPY) Sep 20 03:17:36 PM: Solver (including time spent in interface) took 7.535e-03 seconds
Iteration: 4, Objective: 0.3706
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:36 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Finished problem compilation (took 4.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 7856
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0151e+02  5.01e+02  9.57e-01  3.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.7588e-01  +1.0930e+02  1.09e+02  4.24e-01  2.35e+01  3.77e-03  5.84e-01  5.84e-01  
  2  +5.2630e-01  +1.2056e+01  1.15e+01  1.38e-01  9.73e+00  1.76e-02  2.62e-01  9.90e-01  
  3  +5.0520e-01  +2.6081e+00  2.10e+00  4.67e-02  3.39e+00  5.33e-05  1.58e-01  8.07e-01  
  4  +5.0049e-01  +1.2173e+00  7.17e-01  1.51e-02  1.13e+00  3.97e-05  5.64e-02  6.79e-01  
  5  +4.8712e-01  +1.2093e+00  7.22e-01  3.34e-03  2.61e-01  2.12e-04  8.71e-03  8.78e-01  
  6  +4.6573e-01  +9.5064e-01  4.85e-01  1.52e-03  1.18e-01  1.94e-04  4.10e-03  5.99e-01  
  7  +4.5085e-01  +8.7429e-01  4.23e-01  1.03e-03  7.98e-02  1.99e-04  2.84e-03  5.02e-01  
  8  +4.0442e-01  +5.6612e-01  1.62e-01  3.60e-04  2.74e-02  5.18e-05  1.12e-03  8.35e-01  
  9  +3.9567e-01  +5.2810e-01  1.32e-01  2.84e-04  2.15e-02  4.47e-05  9.04e-04  2.44e-01  
 10  +3.7464e-01  +4.3187e-01  5.72e-02  1.19e-04  8.94e-03  3.31e-05  4.10e-04  9.90e-01  
 11  +3.6162e-01  +3.7598e-01  1.44e-02  2.91e-05  2.18e-03  8.00e-06  1.07e-04  7.88e-01  
 12  +3.5787e-01  +3.6098e-01  3.11e-03  6.22e-06  4.65e-04  1.72e-06  2.37e-05  8.10e-01  
 13  +3.5716e-01  +3.5825e-01  1.09e-03  2.13e-06  1.59e-04  6.09e-07  8.23e-06  8.08e-01  
 14  +3.5677e-01  +3.5683e-01  5.84e-05  1.13e-07  8.44e-06  3.28e-08  4.41e-07  9.51e-01  
 15  +3.5675e-01  +3.5675e-01  5.95e-07  1.15e-09  8.61e-08  3.34e-10  4.49e-09  9.90e-01  
 16  +3.5675e-01  +3.5675e-01  5.95e-09  1.15e-11  8.61e-10  3.34e-12  4.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.7138ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:36 PM: Optimal value: 3.568e-01
(CVXPY) Sep 20 03:17:36 PM: Compilation took 4.009e-03 seconds
(CVXPY) Sep 20 03:17:36 PM: Solver (including time spent in interface) took 9.154e-03 seconds
Iteration: 5, Objective: 0.3568
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:36 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Finished problem compilation (took 4.618e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 8090
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0165e+02  5.01e+02  9.57e-01  3.70e+01  1.00e+00  1.02e+00   ------   
  1  +5.7440e-01  +1.0937e+02  1.09e+02  4.26e-01  2.33e+01  3.77e-03  5.86e-01  5.83e-01  
  2  +5.2532e-01  +1.2206e+01  1.17e+01  1.39e-01  9.64e+00  1.79e-02  2.62e-01  9.90e-01  
  3  +5.0544e-01  +2.2564e+00  1.75e+00  3.88e-02  2.88e+00  5.95e-05  1.18e-01  9.05e-01  
  4  +4.9858e-01  +1.3859e+00  8.87e-01  8.95e-03  6.98e-01  1.56e-04  2.33e-02  9.01e-01  
  5  +4.8136e-01  +1.2297e+00  7.48e-01  2.61e-03  2.06e-01  3.84e-04  6.56e-03  7.36e-01  
  6  +4.5553e-01  +9.7313e-01  5.18e-01  1.47e-03  1.14e-01  2.65e-04  3.91e-03  5.16e-01  
  7  +4.3294e-01  +8.2679e-01  3.94e-01  9.61e-04  7.41e-02  2.07e-04  2.67e-03  3.94e-01  
  8  +3.9094e-01  +5.6486e-01  1.74e-01  4.15e-04  3.14e-02  6.33e-05  1.32e-03  9.53e-01  
  9  +3.7659e-01  +4.9884e-01  1.22e-01  2.69e-04  2.03e-02  4.63e-05  8.94e-04  3.66e-01  
 10  +3.6269e-01  +4.3277e-01  7.01e-02  1.49e-04  1.11e-02  3.89e-05  5.22e-04  9.90e-01  
 11  +3.4800e-01  +3.7017e-01  2.22e-02  4.53e-05  3.38e-03  1.17e-05  1.72e-04  7.22e-01  
 12  +3.4257e-01  +3.4700e-01  4.43e-03  8.96e-06  6.66e-04  2.42e-06  3.53e-05  9.90e-01  
 13  +3.4171e-01  +3.4382e-01  2.11e-03  4.23e-06  3.14e-04  1.16e-06  1.68e-05  6.11e-01  
 14  +3.4109e-01  +3.4159e-01  4.94e-04  9.69e-07  7.19e-05  2.70e-07  3.92e-06  8.54e-01  
 15  +3.4090e-01  +3.4091e-01  5.77e-06  1.13e-08  8.37e-07  3.14e-09  4.57e-08  9.89e-01  
 16  +3.4090e-01  +3.4090e-01  5.77e-08  1.13e-10  8.37e-09  3.14e-11  4.57e-10  9.90e-01  
 17  +3.4090e-01  +3.4090e-01  5.77e-10  1.13e-12  8.37e-11  3.15e-13  4.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.9028ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:36 PM: Optimal value: 3.409e-01
(CVXPY) Sep 20 03:17:36 PM: Compilation took 4.618e-03 seconds
(CVXPY) Sep 20 03:17:36 PM: Solver (including time spent in interface) took 9.418e-03 seconds
Iteration: 6, Objective: 0.3409
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:36 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Finished problem compilation (took 4.989e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8318
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0157e+02  5.01e+02  9.57e-01  3.69e+01  1.00e+00  1.02e+00   ------   
  1  +5.7304e-01  +1.0945e+02  1.09e+02  4.27e-01  2.32e+01  3.78e-03  5.85e-01  5.83e-01  
  2  +5.2449e-01  +1.2288e+01  1.18e+01  1.39e-01  9.59e+00  1.80e-02  2.62e-01  9.90e-01  
  3  +5.0571e-01  +2.0601e+00  1.55e+00  3.36e-02  2.52e+00  6.44e-05  9.69e-02  9.32e-01  
  4  +5.0528e-01  +2.1603e+00  1.65e+00  2.19e-02  1.70e+00  1.26e-04  5.46e-02  4.92e-01  
  5  +4.9476e-01  +1.8233e+00  1.33e+00  5.68e-03  4.51e-01  3.17e-04  1.37e-02  8.17e-01  
  6  +4.7110e-01  +1.2866e+00  8.16e-01  2.39e-03  1.89e-01  2.90e-04  6.00e-03  7.00e-01  
  7  +4.5091e-01  +1.1060e+00  6.55e-01  1.62e-03  1.27e-01  2.64e-04  4.18e-03  4.15e-01  
  8  +4.3422e-01  +9.7409e-01  5.40e-01  1.29e-03  1.00e-01  2.17e-04  3.47e-03  2.59e-01  
  9  +4.0519e-01  +7.2130e-01  3.16e-01  8.55e-04  6.51e-02  1.35e-04  2.59e-03  9.90e-01  
 10  +3.5897e-01  +4.6538e-01  1.06e-01  2.46e-04  1.86e-02  4.25e-05  8.28e-04  7.60e-01  
 11  +3.3916e-01  +3.7103e-01  3.19e-02  7.16e-05  5.38e-03  1.33e-05  2.65e-04  7.52e-01  
 12  +3.3437e-01  +3.5271e-01  1.83e-02  3.88e-05  2.92e-03  8.16e-06  1.50e-04  5.66e-01  
 13  +3.2913e-01  +3.3157e-01  2.44e-03  5.03e-06  3.79e-04  1.11e-06  2.05e-05  9.03e-01  
 14  +3.2831e-01  +3.2834e-01  3.15e-05  6.48e-08  4.88e-06  1.42e-08  2.66e-07  9.87e-01  
 15  +3.2830e-01  +3.2830e-01  3.15e-07  6.48e-10  4.88e-08  1.42e-10  2.66e-09  9.90e-01  
 16  +3.2830e-01  +3.2830e-01  3.15e-09  6.48e-12  4.88e-10  1.42e-12  2.66e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6776ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:36 PM: Optimal value: 3.283e-01
(CVXPY) Sep 20 03:17:36 PM: Compilation took 4.989e-03 seconds
(CVXPY) Sep 20 03:17:36 PM: Solver (including time spent in interface) took 9.194e-03 seconds
Iteration: 7, Objective: 0.3283
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:36 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Finished problem compilation (took 4.238e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8429
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0153e+02  5.01e+02  9.57e-01  3.68e+01  1.00e+00  1.02e+00   ------   
  1  +5.7192e-01  +1.0945e+02  1.09e+02  4.28e-01  2.30e+01  3.78e-03  5.85e-01  5.83e-01  
  2  +5.2388e-01  +1.2378e+01  1.19e+01  1.38e-01  9.50e+00  1.81e-02  2.61e-01  9.90e-01  
  3  +5.0685e-01  +2.4854e+00  1.98e+00  3.98e-02  2.98e+00  1.04e-03  1.06e-01  8.18e-01  
  4  +5.0583e-01  +2.3776e+00  1.87e+00  2.66e-02  2.04e+00  1.58e-03  6.61e-02  4.00e-01  
  5  +5.0264e-01  +2.1857e+00  1.68e+00  2.27e-02  1.72e+00  9.36e-04  6.22e-02  3.10e-01  
  6  +4.8771e-01  +1.6676e+00  1.18e+00  3.87e-03  3.06e-01  3.13e-03  9.30e-03  8.58e-01  
  7  +4.7153e-01  +1.4364e+00  9.65e-01  2.68e-03  2.11e-01  2.44e-03  6.63e-03  3.74e-01  
  8  +4.4762e-01  +1.0869e+00  6.39e-01  1.76e-03  1.36e-01  4.55e-04  4.60e-03  6.80e-01  
  9  +4.2036e-01  +8.8823e-01  4.68e-01  1.15e-03  8.82e-02  3.14e-04  3.17e-03  3.78e-01  
 10  +3.6808e-01  +5.4037e-01  1.72e-01  4.01e-04  3.02e-02  5.83e-05  1.28e-03  8.23e-01  
 11  +3.4227e-01  +4.1686e-01  7.46e-02  1.68e-04  1.26e-02  2.84e-05  5.93e-04  6.70e-01  
 12  +3.2991e-01  +3.6096e-01  3.11e-02  6.82e-05  5.11e-03  1.30e-05  2.59e-04  6.79e-01  
 13  +3.2187e-01  +3.2624e-01  4.37e-03  9.48e-06  7.08e-04  1.76e-06  3.82e-05  8.62e-01  
 14  +3.2059e-01  +3.2088e-01  2.90e-04  6.27e-07  4.68e-05  1.19e-07  2.57e-06  9.44e-01  
 15  +3.2050e-01  +3.2050e-01  2.96e-06  6.40e-09  4.78e-07  1.22e-09  2.63e-08  9.90e-01  
 16  +3.2050e-01  +3.2050e-01  2.96e-08  6.40e-11  4.78e-09  1.22e-11  2.63e-10  9.90e-01  
 17  +3.2050e-01  +3.2050e-01  2.97e-10  6.42e-13  4.79e-11  1.22e-13  2.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.2505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:36 PM: Optimal value: 3.205e-01
(CVXPY) Sep 20 03:17:36 PM: Compilation took 4.238e-03 seconds
(CVXPY) Sep 20 03:17:36 PM: Solver (including time spent in interface) took 1.053e-02 seconds
Iteration: 8, Objective: 0.3205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:36 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Finished problem compilation (took 6.536e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 8531
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0156e+02  5.01e+02  9.58e-01  3.66e+01  1.00e+00  1.02e+00   ------   
  1  +5.7012e-01  +1.0954e+02  1.09e+02  4.29e-01  2.29e+01  3.78e-03  5.85e-01  5.83e-01  
  2  +5.2299e-01  +1.2505e+01  1.20e+01  1.38e-01  9.43e+00  1.83e-02  2.60e-01  9.90e-01  
  3  +5.0851e-01  +3.3352e+00  2.83e+00  5.09e-02  3.78e+00  2.77e-03  1.25e-01  6.64e-01  
  4  +5.0401e-01  +2.5110e+00  2.01e+00  2.65e-02  2.03e+00  3.78e-03  6.56e-02  5.58e-01  
  5  +5.0130e-01  +2.5159e+00  2.01e+00  2.04e-02  1.56e+00  2.20e-03  5.12e-02  6.51e-01  
  6  +4.8365e-01  +1.9253e+00  1.44e+00  4.46e-03  3.52e-01  5.41e-03  1.07e-02  7.96e-01  
  7  +4.6774e-01  +1.6206e+00  1.15e+00  3.18e-03  2.49e-01  3.81e-03  7.81e-03  3.64e-01  
  8  +4.4610e-01  +1.2542e+00  8.08e-01  2.12e-03  1.64e-01  1.49e-03  5.43e-03  5.41e-01  
  9  +4.2586e-01  +1.0484e+00  6.22e-01  1.57e-03  1.21e-01  8.42e-04  4.22e-03  4.00e-01  
 10  +3.6983e-01  +5.8852e-01  2.19e-01  5.14e-04  3.88e-02  3.54e-05  1.58e-03  8.82e-01  
 11  +3.4664e-01  +4.8217e-01  1.36e-01  3.08e-04  2.32e-02  3.77e-05  1.04e-03  5.36e-01  
 12  +3.2858e-01  +3.9771e-01  6.91e-02  1.55e-04  1.16e-02  2.06e-05  5.67e-04  5.15e-01  
 13  +3.1170e-01  +3.2057e-01  8.87e-03  1.96e-05  1.47e-03  3.07e-06  8.05e-05  9.18e-01  
 14  +3.0894e-01  +3.0933e-01  3.93e-04  8.59e-07  6.44e-05  1.67e-07  3.68e-06  9.90e-01  
 15  +3.0880e-01  +3.0881e-01  4.05e-06  8.86e-09  6.64e-07  1.72e-09  3.80e-08  9.90e-01  
 16  +3.0880e-01  +3.0880e-01  4.05e-08  8.86e-11  6.64e-09  1.72e-11  3.81e-10  9.90e-01  
 17  +3.0880e-01  +3.0880e-01  4.05e-10  8.86e-13  6.64e-11  1.72e-13  3.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.1319ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:36 PM: Optimal value: 3.088e-01
(CVXPY) Sep 20 03:17:36 PM: Compilation took 6.536e-03 seconds
(CVXPY) Sep 20 03:17:36 PM: Solver (including time spent in interface) took 9.769e-03 seconds
Iteration: 9, Objective: 0.3088
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:36 PM: Your problem has 609 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 609
  constraints   = 1109
  nnz(P)        = 0
  nnz(A)        = 8667
  cones (total) = 1
    : Nonnegative = 1,  numel = 1109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0189e+02  5.01e+02  9.58e-01  3.65e+01  1.00e+00  1.02e+00   ------   
  1  +5.6843e-01  +1.0963e+02  1.09e+02  4.30e-01  2.27e+01  3.78e-03  5.86e-01  5.83e-01  
  2  +5.2206e-01  +1.2652e+01  1.21e+01  1.38e-01  9.36e+00  1.85e-02  2.59e-01  9.90e-01  
  3  +5.0892e-01  +3.6315e+00  3.12e+00  5.23e-02  3.88e+00  3.52e-03  1.24e-01  6.24e-01  
  4  +5.0481e-01  +2.8360e+00  2.33e+00  3.03e-02  2.31e+00  4.25e-03  7.28e-02  4.76e-01  
  5  +5.0139e-01  +2.7785e+00  2.28e+00  2.28e-02  1.74e+00  2.71e-03  5.59e-02  6.20e-01  
  6  +4.8329e-01  +2.0471e+00  1.56e+00  5.13e-03  4.05e-01  6.00e-03  1.21e-02  7.88e-01  
  7  +4.6145e-01  +1.6453e+00  1.18e+00  3.13e-03  2.45e-01  4.36e-03  7.62e-03  4.61e-01  
  8  +4.3399e-01  +1.1266e+00  6.93e-01  1.94e-03  1.49e-01  2.42e-04  5.07e-03  7.03e-01  
  9  +4.1139e-01  +9.5625e-01  5.45e-01  1.41e-03  1.08e-01  1.95e-04  3.85e-03  3.21e-01  
 10  +3.6306e-01  +6.1926e-01  2.56e-01  6.22e-04  4.68e-02  1.08e-04  1.93e-03  8.81e-01  
 11  +3.2584e-01  +4.1631e-01  9.05e-02  2.11e-04  1.58e-02  3.56e-05  7.52e-04  7.25e-01  
 12  +3.1534e-01  +3.6716e-01  5.18e-02  1.18e-04  8.89e-03  2.19e-05  4.45e-04  5.35e-01  
 13  +3.0465e-01  +3.1896e-01  1.43e-02  3.20e-05  2.42e-03  6.45e-06  1.31e-04  8.93e-01  
 14  +3.0158e-01  +3.0593e-01  4.35e-03  9.65e-06  7.31e-04  2.00e-06  4.07e-05  8.74e-01  
 15  +3.0012e-01  +3.0019e-01  6.76e-05  1.50e-07  1.13e-05  3.04e-08  6.41e-07  9.85e-01  
 16  +3.0010e-01  +3.0010e-01  6.76e-07  1.50e-09  1.13e-07  3.04e-10  6.42e-09  9.90e-01  
 17  +3.0010e-01  +3.0010e-01  6.76e-09  1.50e-11  1.13e-09  3.04e-12  6.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.0126ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:36 PM: Optimal value: 3.001e-01
(CVXPY) Sep 20 03:17:36 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 03:17:36 PM: Solver (including time spent in interface) took 1.459e-02 seconds
Iteration: 10, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:36 PM: Your problem has 619 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:36 PM: Finished problem compilation (took 4.015e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 619
  constraints   = 1119
  nnz(P)        = 0
  nnz(A)        = 8771
  cones (total) = 1
    : Nonnegative = 1,  numel = 1119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0190e+02  5.01e+02  9.58e-01  3.63e+01  1.00e+00  1.02e+00   ------   
  1  +5.6704e-01  +1.0970e+02  1.09e+02  4.30e-01  2.26e+01  3.79e-03  5.85e-01  5.83e-01  
  2  +5.2136e-01  +1.2729e+01  1.22e+01  1.38e-01  9.26e+00  1.86e-02  2.59e-01  9.90e-01  
  3  +5.0883e-01  +3.6676e+00  3.16e+00  5.09e-02  3.77e+00  3.75e-03  1.19e-01  6.20e-01  
  4  +5.0568e-01  +3.0503e+00  2.54e+00  3.28e-02  2.49e+00  4.30e-03  7.76e-02  3.77e-01  
  5  +5.0206e-01  +2.8842e+00  2.38e+00  2.67e-02  2.02e+00  2.67e-03  6.59e-02  4.78e-01  
  6  +4.8406e-01  +1.9904e+00  1.51e+00  5.34e-03  4.22e-01  6.03e-03  1.25e-02  8.15e-01  
  7  +4.6593e-01  +1.7243e+00  1.26e+00  3.52e-03  2.76e-01  5.27e-03  8.45e-03  3.98e-01  
  8  +4.4480e-01  +1.3851e+00  9.40e-01  2.50e-03  1.94e-01  2.70e-03  6.23e-03  4.27e-01  
  9  +4.1561e-01  +1.0846e+00  6.69e-01  1.66e-03  1.27e-01  1.45e-03  4.38e-03  4.24e-01  
 10  +3.7071e-01  +7.0283e-01  3.32e-01  8.24e-04  6.19e-02  2.46e-04  2.45e-03  7.01e-01  
 11  +3.3201e-01  +4.7333e-01  1.41e-01  3.39e-04  2.53e-02  8.27e-05  1.15e-03  6.16e-01  
 12  +3.1136e-01  +3.6629e-01  5.49e-02  1.30e-04  9.67e-03  2.98e-05  4.89e-04  6.36e-01  
 13  +3.0122e-01  +3.1791e-01  1.67e-02  3.85e-05  2.89e-03  8.38e-06  1.59e-04  8.71e-01  
 14  +2.9653e-01  +2.9758e-01  1.05e-03  2.39e-06  1.80e-04  4.78e-07  1.05e-05  9.40e-01  
 15  +2.9620e-01  +2.9622e-01  1.45e-05  3.31e-08  2.49e-06  6.26e-09  1.46e-07  9.87e-01  
 16  +2.9620e-01  +2.9620e-01  1.45e-07  3.31e-10  2.49e-08  6.26e-11  1.46e-09  9.90e-01  
 17  +2.9620e-01  +2.9620e-01  1.45e-09  3.31e-12  2.49e-10  6.26e-13  1.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.5918ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:36 PM: Optimal value: 2.962e-01
(CVXPY) Sep 20 03:17:36 PM: Compilation took 4.015e-03 seconds
(CVXPY) Sep 20 03:17:36 PM: Solver (including time spent in interface) took 1.251e-02 seconds
Iteration: 11, Objective: 0.2962
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:37 PM: Your problem has 629 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 629
  constraints   = 1129
  nnz(P)        = 0
  nnz(A)        = 8932
  cones (total) = 1
    : Nonnegative = 1,  numel = 1129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0200e+02  5.01e+02  9.58e-01  3.62e+01  1.00e+00  1.02e+00   ------   
  1  +5.6608e-01  +1.0974e+02  1.09e+02  4.32e-01  2.25e+01  3.79e-03  5.85e-01  5.82e-01  
  2  +5.2067e-01  +1.2805e+01  1.23e+01  1.38e-01  9.20e+00  1.88e-02  2.58e-01  9.90e-01  
  3  +5.0861e-01  +3.6393e+00  3.13e+00  4.89e-02  3.62e+00  3.85e-03  1.14e-01  6.25e-01  
  4  +5.0628e-01  +3.2013e+00  2.70e+00  3.45e-02  2.60e+00  4.34e-03  8.06e-02  3.05e-01  
  5  +5.0241e-01  +2.9518e+00  2.45e+00  2.89e-02  2.17e+00  2.65e-03  7.15e-02  3.95e-01  
  6  +4.8469e-01  +1.9548e+00  1.47e+00  5.52e-03  4.36e-01  5.89e-03  1.30e-02  8.25e-01  
  7  +4.6603e-01  +1.7311e+00  1.27e+00  3.61e-03  2.83e-01  5.52e-03  8.63e-03  4.08e-01  
  8  +4.4417e-01  +1.4292e+00  9.85e-01  2.53e-03  1.96e-01  3.49e-03  6.25e-03  4.00e-01  
  9  +4.1641e-01  +1.1212e+00  7.05e-01  1.78e-03  1.37e-01  1.69e-03  4.67e-03  4.04e-01  
 10  +3.5507e-01  +5.9294e-01  2.38e-01  5.85e-04  4.37e-02  1.49e-05  1.80e-03  8.30e-01  
 11  +3.2871e-01  +4.6214e-01  1.33e-01  3.25e-04  2.42e-02  2.56e-05  1.10e-03  5.53e-01  
 12  +3.0722e-01  +3.5516e-01  4.79e-02  1.14e-04  8.48e-03  1.55e-05  4.33e-04  7.78e-01  
 13  +2.9730e-01  +3.1038e-01  1.31e-02  3.04e-05  2.28e-03  5.06e-06  1.27e-04  8.52e-01  
 14  +2.9350e-01  +2.9413e-01  6.32e-04  1.45e-06  1.09e-04  2.24e-07  6.38e-06  9.53e-01  
 15  +2.9330e-01  +2.9331e-01  7.27e-06  1.67e-08  1.26e-06  2.53e-09  7.40e-08  9.89e-01  
 16  +2.9330e-01  +2.9330e-01  7.27e-08  1.67e-10  1.26e-08  2.53e-11  7.40e-10  9.90e-01  
 17  +2.9330e-01  +2.9330e-01  7.27e-10  1.67e-12  1.26e-10  2.53e-13  7.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.4463ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:37 PM: Optimal value: 2.933e-01
(CVXPY) Sep 20 03:17:37 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 03:17:37 PM: Solver (including time spent in interface) took 1.302e-02 seconds
Iteration: 12, Objective: 0.2933
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:37 PM: Your problem has 639 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 639
  constraints   = 1139
  nnz(P)        = 0
  nnz(A)        = 9031
  cones (total) = 1
    : Nonnegative = 1,  numel = 1139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0200e+02  5.02e+02  9.58e-01  3.61e+01  1.00e+00  1.02e+00   ------   
  1  +5.6543e-01  +1.0965e+02  1.09e+02  4.32e-01  2.23e+01  3.79e-03  5.84e-01  5.83e-01  
  2  +5.2011e-01  +1.2865e+01  1.23e+01  1.37e-01  9.08e+00  1.88e-02  2.56e-01  9.90e-01  
  3  +5.0822e-01  +3.5394e+00  3.03e+00  4.59e-02  3.39e+00  3.84e-03  1.07e-01  6.39e-01  
  4  +5.0666e-01  +3.2914e+00  2.78e+00  3.51e-02  2.64e+00  4.32e-03  8.12e-02  2.48e-01  
  5  +5.0242e-01  +3.0182e+00  2.52e+00  2.94e-02  2.20e+00  2.61e-03  7.27e-02  3.80e-01  
  6  +4.8255e-01  +1.9414e+00  1.46e+00  5.05e-03  3.98e-01  6.24e-03  1.18e-02  8.45e-01  
  7  +4.6305e-01  +1.7455e+00  1.28e+00  3.42e-03  2.68e-01  5.73e-03  8.12e-03  4.10e-01  
  8  +4.2398e-01  +1.1541e+00  7.30e-01  1.90e-03  1.46e-01  8.02e-04  4.86e-03  6.81e-01  
  9  +3.6205e-01  +6.6501e-01  3.03e-01  7.44e-04  5.56e-02  1.25e-04  2.19e-03  7.54e-01  
 10  +3.2411e-01  +4.5779e-01  1.34e-01  3.26e-04  2.41e-02  5.68e-05  1.09e-03  6.62e-01  
 11  +3.0513e-01  +3.5935e-01  5.42e-02  1.29e-04  9.54e-03  2.60e-05  4.68e-04  7.68e-01  
 12  +2.9800e-01  +3.2724e-01  2.92e-02  6.81e-05  5.06e-03  1.39e-05  2.60e-04  4.91e-01  
 13  +2.9167e-01  +2.9841e-01  6.75e-03  1.54e-05  1.15e-03  3.19e-06  6.24e-05  9.24e-01  
 14  +2.8968e-01  +2.9051e-01  8.25e-04  1.86e-06  1.39e-04  3.74e-07  7.82e-06  9.25e-01  
 15  +2.8940e-01  +2.8942e-01  1.15e-05  2.60e-08  1.95e-06  5.07e-09  1.10e-07  9.86e-01  
 16  +2.8940e-01  +2.8940e-01  1.15e-07  2.60e-10  1.95e-08  5.07e-11  1.10e-09  9.90e-01  
 17  +2.8940e-01  +2.8940e-01  1.15e-09  2.60e-12  1.95e-10  5.08e-13  1.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.3286ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:37 PM: Optimal value: 2.894e-01
(CVXPY) Sep 20 03:17:37 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 03:17:37 PM: Solver (including time spent in interface) took 1.315e-02 seconds
Iteration: 13, Objective: 0.2894
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:37 PM: Your problem has 649 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Finished problem compilation (took 5.071e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 649
  constraints   = 1149
  nnz(P)        = 0
  nnz(A)        = 9115
  cones (total) = 1
    : Nonnegative = 1,  numel = 1149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0203e+02  5.02e+02  9.59e-01  3.59e+01  1.00e+00  1.02e+00   ------   
  1  +5.6476e-01  +1.0968e+02  1.09e+02  4.33e-01  2.21e+01  3.79e-03  5.84e-01  5.83e-01  
  2  +5.1965e-01  +1.2900e+01  1.24e+01  1.37e-01  9.00e+00  1.89e-02  2.56e-01  9.90e-01  
  3  +5.0793e-01  +3.4598e+00  2.95e+00  4.40e-02  3.24e+00  3.81e-03  1.02e-01  6.49e-01  
  4  +5.0669e-01  +3.2877e+00  2.78e+00  3.47e-02  2.60e+00  4.27e-03  8.02e-02  2.22e-01  
  5  +5.0256e-01  +3.0575e+00  2.55e+00  2.95e-02  2.20e+00  2.70e-03  7.22e-02  3.70e-01  
  6  +4.8402e-01  +2.0347e+00  1.55e+00  5.65e-03  4.44e-01  6.05e-03  1.32e-02  8.24e-01  
  7  +4.6610e-01  +1.8383e+00  1.37e+00  3.84e-03  3.00e-01  5.76e-03  9.10e-03  3.90e-01  
  8  +4.4094e-01  +1.4667e+00  1.03e+00  2.61e-03  2.01e-01  3.31e-03  6.42e-03  4.29e-01  
  9  +4.0930e-01  +1.1183e+00  7.09e-01  1.76e-03  1.34e-01  1.73e-03  4.59e-03  3.81e-01  
 10  +3.4940e-01  +5.9755e-01  2.48e-01  6.17e-04  4.57e-02  1.48e-05  1.89e-03  8.48e-01  
 11  +3.1326e-01  +4.0762e-01  9.44e-02  2.28e-04  1.68e-02  2.05e-05  7.85e-04  7.23e-01  
 12  +3.0630e-01  +3.7698e-01  7.07e-02  1.65e-04  1.23e-02  2.25e-05  5.86e-04  5.03e-01  
 13  +2.9213e-01  +3.1363e-01  2.15e-02  4.88e-05  3.65e-03  7.25e-06  1.88e-04  7.28e-01  
 14  +2.8674e-01  +2.9056e-01  3.82e-03  8.57e-06  6.40e-04  1.33e-06  3.48e-05  8.47e-01  
 15  +2.8558e-01  +2.8579e-01  2.14e-04  4.79e-07  3.58e-05  9.00e-08  2.00e-06  9.90e-01  
 16  +2.8550e-01  +2.8550e-01  2.16e-06  4.83e-09  3.61e-07  9.03e-10  2.02e-08  9.90e-01  
 17  +2.8550e-01  +2.8550e-01  2.16e-08  4.83e-11  3.61e-09  9.03e-12  2.02e-10  9.90e-01  
 18  +2.8550e-01  +2.8550e-01  2.16e-10  4.83e-13  3.61e-11  9.03e-14  2.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.8146ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:37 PM: Optimal value: 2.855e-01
(CVXPY) Sep 20 03:17:37 PM: Compilation took 5.071e-03 seconds
(CVXPY) Sep 20 03:17:37 PM: Solver (including time spent in interface) took 1.510e-02 seconds
Iteration: 14, Objective: 0.2855
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:37 PM: Your problem has 659 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Finished problem compilation (took 6.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 659
  constraints   = 1159
  nnz(P)        = 0
  nnz(A)        = 9315
  cones (total) = 1
    : Nonnegative = 1,  numel = 1159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0201e+02  5.02e+02  9.59e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.6430e-01  +1.0953e+02  1.09e+02  4.32e-01  2.20e+01  3.80e-03  5.80e-01  5.85e-01  
  2  +5.1921e-01  +1.2887e+01  1.24e+01  1.35e-01  8.88e+00  1.88e-02  2.53e-01  9.90e-01  
  3  +5.0735e-01  +3.2834e+00  2.78e+00  4.02e-02  2.97e+00  3.67e-03  9.35e-02  6.70e-01  
  4  +5.0646e-01  +3.1991e+00  2.69e+00  3.29e-02  2.47e+00  4.13e-03  7.58e-02  1.96e-01  
  5  +5.0244e-01  +3.0868e+00  2.58e+00  2.84e-02  2.12e+00  2.78e-03  6.86e-02  3.80e-01  
  6  +4.8433e-01  +2.1870e+00  1.70e+00  6.21e-03  4.88e-01  5.98e-03  1.44e-02  7.96e-01  
  7  +4.6286e-01  +1.8903e+00  1.43e+00  4.04e-03  3.15e-01  5.18e-03  9.59e-03  4.26e-01  
  8  +4.4086e-01  +1.5835e+00  1.14e+00  2.83e-03  2.19e-01  3.43e-03  6.92e-03  4.20e-01  
  9  +3.9803e-01  +9.9913e-01  6.01e-01  1.54e-03  1.16e-01  5.61e-04  4.14e-03  6.37e-01  
 10  +3.3966e-01  +5.4607e-01  2.06e-01  5.08e-04  3.74e-02  1.09e-04  1.58e-03  6.86e-01  
 11  +3.1136e-01  +4.0463e-01  9.33e-02  2.23e-04  1.65e-02  5.02e-05  7.66e-04  7.12e-01  
 12  +3.0160e-01  +3.5836e-01  5.68e-02  1.32e-04  9.80e-03  3.08e-05  4.73e-04  5.09e-01  
 13  +2.8980e-01  +3.0379e-01  1.40e-02  3.19e-05  2.37e-03  7.29e-06  1.22e-04  8.12e-01  
 14  +2.8664e-01  +2.8988e-01  3.23e-03  7.31e-06  5.44e-04  1.53e-06  2.93e-05  9.03e-01  
 15  +2.8556e-01  +2.8573e-01  1.70e-04  3.81e-07  2.85e-05  6.96e-08  1.59e-06  9.88e-01  
 16  +2.8550e-01  +2.8550e-01  1.78e-06  3.99e-09  2.98e-07  7.25e-10  1.67e-08  9.90e-01  
 17  +2.8550e-01  +2.8550e-01  1.78e-08  3.99e-11  2.98e-09  7.26e-12  1.67e-10  9.90e-01  
 18  +2.8550e-01  +2.8550e-01  1.78e-10  3.99e-13  2.98e-11  7.27e-14  1.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.8045ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:37 PM: Optimal value: 2.855e-01
(CVXPY) Sep 20 03:17:37 PM: Compilation took 6.512e-03 seconds
(CVXPY) Sep 20 03:17:37 PM: Solver (including time spent in interface) took 1.502e-02 seconds
Iteration: 15, Objective: 0.2855
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:37 PM: Your problem has 669 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Finished problem compilation (took 4.996e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 669
  constraints   = 1169
  nnz(P)        = 0
  nnz(A)        = 9429
  cones (total) = 1
    : Nonnegative = 1,  numel = 1169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0208e+02  5.02e+02  9.59e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.6288e-01  +1.0961e+02  1.09e+02  4.33e-01  2.19e+01  3.80e-03  5.81e-01  5.84e-01  
  2  +5.1831e-01  +1.2991e+01  1.25e+01  1.35e-01  8.82e+00  1.89e-02  2.53e-01  9.90e-01  
  3  +5.0652e-01  +3.0303e+00  2.52e+00  3.52e-02  2.62e+00  3.49e-03  8.24e-02  7.06e-01  
  4  +5.0606e-01  +3.0909e+00  2.58e+00  3.05e-02  2.29e+00  3.93e-03  7.04e-02  1.87e-01  
  5  +5.0149e-01  +3.3241e+00  2.82e+00  2.44e-02  1.84e+00  3.38e-03  5.66e-02  5.45e-01  
  6  +4.8324e-01  +2.4897e+00  2.01e+00  7.13e-03  5.57e-01  5.78e-03  1.65e-02  7.13e-01  
  7  +4.6053e-01  +2.0593e+00  1.60e+00  4.62e-03  3.59e-01  4.63e-03  1.10e-02  4.13e-01  
  8  +4.3373e-01  +1.6441e+00  1.21e+00  2.96e-03  2.28e-01  2.94e-03  7.28e-03  4.80e-01  
  9  +4.0020e-01  +1.0652e+00  6.65e-01  1.86e-03  1.40e-01  2.33e-05  5.07e-03  8.02e-01  
 10  +3.4098e-01  +5.7290e-01  2.32e-01  5.79e-04  4.25e-02  2.28e-05  1.79e-03  6.97e-01  
 11  +3.0828e-01  +4.0151e-01  9.32e-02  2.28e-04  1.67e-02  2.37e-05  7.93e-04  7.18e-01  
 12  +2.9871e-01  +3.5580e-01  5.71e-02  1.36e-04  1.00e-02  1.77e-05  4.91e-04  5.12e-01  
 13  +2.8805e-01  +3.0463e-01  1.66e-02  3.86e-05  2.85e-03  6.27e-06  1.49e-04  8.18e-01  
 14  +2.8416e-01  +2.8735e-01  3.19e-03  7.37e-06  5.45e-04  1.24e-06  2.94e-05  8.41e-01  
 15  +2.8325e-01  +2.8351e-01  2.60e-04  6.00e-07  4.43e-05  1.05e-07  2.42e-06  9.44e-01  
 16  +2.8317e-01  +2.8317e-01  2.65e-06  6.10e-09  4.51e-07  1.07e-09  2.47e-08  9.90e-01  
 17  +2.8317e-01  +2.8317e-01  2.65e-08  6.11e-11  4.51e-09  1.07e-11  2.47e-10  9.90e-01  
 18  +2.8317e-01  +2.8317e-01  2.65e-10  6.11e-13  4.51e-11  1.07e-13  2.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.4597ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:37 PM: Optimal value: 2.832e-01
(CVXPY) Sep 20 03:17:37 PM: Compilation took 4.996e-03 seconds
(CVXPY) Sep 20 03:17:37 PM: Solver (including time spent in interface) took 1.506e-02 seconds
Iteration: 16, Objective: 0.2832
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:37 PM: Your problem has 679 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Finished problem compilation (took 6.138e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 679
  constraints   = 1179
  nnz(P)        = 0
  nnz(A)        = 9498
  cones (total) = 1
    : Nonnegative = 1,  numel = 1179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0217e+02  5.02e+02  9.59e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.6157e-01  +1.0969e+02  1.09e+02  4.34e-01  2.17e+01  3.80e-03  5.81e-01  5.84e-01  
  2  +5.1733e-01  +1.3112e+01  1.26e+01  1.34e-01  8.75e+00  1.91e-02  2.52e-01  9.90e-01  
  3  +5.0540e-01  +2.6726e+00  2.17e+00  2.90e-02  2.17e+00  3.17e-03  6.84e-02  7.58e-01  
  4  +5.0499e-01  +2.8334e+00  2.33e+00  2.56e-02  1.94e+00  3.60e-03  5.92e-02  2.30e-01  
  5  +4.9841e-01  +3.3245e+00  2.83e+00  1.73e-02  1.32e+00  4.31e-03  3.93e-02  6.65e-01  
  6  +4.7748e-01  +2.4781e+00  2.00e+00  6.69e-03  5.21e-01  5.22e-03  1.55e-02  6.16e-01  
  7  +4.4766e-01  +1.9422e+00  1.49e+00  3.97e-03  3.06e-01  3.79e-03  9.55e-03  4.97e-01  
  8  +4.3092e-01  +1.6590e+00  1.23e+00  3.16e-03  2.41e-01  2.37e-03  7.85e-03  3.50e-01  
  9  +3.9860e-01  +1.0981e+00  6.99e-01  1.95e-03  1.45e-01  1.92e-04  5.29e-03  7.76e-01  
 10  +3.3867e-01  +5.6771e-01  2.29e-01  5.82e-04  4.25e-02  5.12e-05  1.81e-03  7.13e-01  
 11  +3.0936e-01  +4.1720e-01  1.08e-01  2.69e-04  1.96e-02  3.46e-05  9.30e-04  6.51e-01  
 12  +2.9739e-01  +3.5781e-01  6.04e-02  1.47e-04  1.08e-02  2.10e-05  5.32e-04  5.05e-01  
 13  +2.8895e-01  +3.1648e-01  2.75e-02  6.60e-05  4.85e-03  1.06e-05  2.50e-04  6.67e-01  
 14  +2.8277e-01  +2.8765e-01  4.88e-03  1.16e-05  8.53e-04  1.89e-06  4.59e-05  8.47e-01  
 15  +2.8166e-01  +2.8274e-01  1.08e-03  2.57e-06  1.89e-04  4.30e-07  1.03e-05  8.29e-01  
 16  +2.8135e-01  +2.8140e-01  4.76e-05  1.13e-07  8.28e-06  1.88e-08  4.56e-07  9.58e-01  
 17  +2.8133e-01  +2.8133e-01  4.77e-07  1.13e-09  8.31e-08  1.89e-10  4.57e-09  9.90e-01  
 18  +2.8133e-01  +2.8133e-01  4.77e-09  1.13e-11  8.31e-10  1.89e-12  4.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.2062ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:37 PM: Optimal value: 2.813e-01
(CVXPY) Sep 20 03:17:37 PM: Compilation took 6.138e-03 seconds
(CVXPY) Sep 20 03:17:37 PM: Solver (including time spent in interface) took 1.856e-02 seconds
Iteration: 17, Objective: 0.2813
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:37 PM: Your problem has 689 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Finished problem compilation (took 5.553e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 689
  constraints   = 1189
  nnz(P)        = 0
  nnz(A)        = 9562
  cones (total) = 1
    : Nonnegative = 1,  numel = 1189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0217e+02  5.02e+02  9.59e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.6060e-01  +1.0978e+02  1.09e+02  4.34e-01  2.16e+01  3.81e-03  5.81e-01  5.84e-01  
  2  +5.1661e-01  +1.3163e+01  1.26e+01  1.34e-01  8.70e+00  1.92e-02  2.52e-01  9.90e-01  
  3  +5.0466e-01  +2.4336e+00  1.93e+00  2.52e-02  1.89e+00  2.95e-03  5.97e-02  7.91e-01  
  4  +5.0386e-01  +2.6782e+00  2.17e+00  2.17e-02  1.64e+00  3.48e-03  5.00e-02  3.21e-01  
  5  +4.9360e-01  +2.9779e+00  2.48e+00  1.19e-02  9.19e-01  4.98e-03  2.71e-02  7.00e-01  
  6  +4.6569e-01  +1.9875e+00  1.52e+00  5.05e-03  3.89e-01  3.51e-03  1.20e-02  6.28e-01  
  7  +4.4437e-01  +1.7556e+00  1.31e+00  3.58e-03  2.74e-01  2.77e-03  8.68e-03  4.23e-01  
  8  +4.2764e-01  +1.5421e+00  1.11e+00  2.90e-03  2.21e-01  1.98e-03  7.27e-03  2.86e-01  
  9  +3.8586e-01  +9.7572e-01  5.90e-01  1.59e-03  1.18e-01  2.39e-04  4.42e-03  7.53e-01  
 10  +3.3147e-01  +5.3538e-01  2.04e-01  5.27e-04  3.83e-02  6.19e-05  1.68e-03  6.92e-01  
 11  +3.0325e-01  +3.9009e-01  8.68e-02  2.17e-04  1.58e-02  3.21e-05  7.64e-04  6.92e-01  
 12  +2.9511e-01  +3.5193e-01  5.68e-02  1.38e-04  1.01e-02  2.29e-05  5.00e-04  4.99e-01  
 13  +2.8562e-01  +3.0754e-01  2.19e-02  5.21e-05  3.83e-03  9.04e-06  2.00e-04  6.78e-01  
 14  +2.8105e-01  +2.8697e-01  5.93e-03  1.39e-05  1.02e-03  2.49e-06  5.60e-05  8.31e-01  
 15  +2.7924e-01  +2.7964e-01  4.01e-04  9.25e-07  6.79e-05  1.60e-07  3.89e-06  9.55e-01  
 16  +2.7910e-01  +2.7911e-01  4.24e-06  9.78e-09  7.17e-07  1.68e-09  4.13e-08  9.90e-01  
 17  +2.7910e-01  +2.7910e-01  4.25e-08  9.78e-11  7.18e-09  1.68e-11  4.13e-10  9.90e-01  
 18  +2.7910e-01  +2.7910e-01  4.26e-10  9.82e-13  7.21e-11  1.69e-13  4.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.0703ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:37 PM: Optimal value: 2.791e-01
(CVXPY) Sep 20 03:17:37 PM: Compilation took 5.553e-03 seconds
(CVXPY) Sep 20 03:17:37 PM: Solver (including time spent in interface) took 1.551e-02 seconds
Iteration: 18, Objective: 0.2791
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:37 PM: Your problem has 699 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:37 PM: Finished problem compilation (took 5.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 699
  constraints   = 1199
  nnz(P)        = 0
  nnz(A)        = 9730
  cones (total) = 1
    : Nonnegative = 1,  numel = 1199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0221e+02  5.02e+02  9.59e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.6034e-01  +1.0976e+02  1.09e+02  4.34e-01  2.15e+01  3.81e-03  5.79e-01  5.84e-01  
  2  +5.1635e-01  +1.3169e+01  1.27e+01  1.34e-01  8.62e+00  1.92e-02  2.50e-01  9.90e-01  
  3  +5.0427e-01  +2.3037e+00  1.80e+00  2.32e-02  1.74e+00  2.82e-03  5.51e-02  8.08e-01  
  4  +5.0283e-01  +2.6650e+00  2.16e+00  1.90e-02  1.45e+00  3.56e-03  4.37e-02  4.36e-01  
  5  +4.8874e-01  +2.6774e+00  2.19e+00  8.94e-03  6.93e-01  5.30e-03  2.05e-02  6.99e-01  
  6  +4.6134e-01  +1.9288e+00  1.47e+00  4.91e-03  3.77e-01  3.10e-03  1.17e-02  5.33e-01  
  7  +4.4203e-01  +1.7008e+00  1.26e+00  3.59e-03  2.74e-01  2.32e-03  8.81e-03  4.06e-01  
  8  +4.2377e-01  +1.4794e+00  1.06e+00  2.82e-03  2.14e-01  1.67e-03  7.14e-03  3.06e-01  
  9  +3.7371e-01  +8.5364e-01  4.80e-01  1.27e-03  9.39e-02  1.47e-04  3.62e-03  8.11e-01  
 10  +3.2961e-01  +5.3944e-01  2.10e-01  5.45e-04  3.96e-02  5.99e-05  1.75e-03  5.88e-01  
 11  +3.0126e-01  +3.8330e-01  8.20e-02  2.06e-04  1.50e-02  2.84e-05  7.29e-04  7.10e-01  
 12  +2.9499e-01  +3.5434e-01  5.94e-02  1.44e-04  1.06e-02  2.25e-05  5.24e-04  4.36e-01  
 13  +2.8516e-01  +3.0882e-01  2.37e-02  5.60e-05  4.11e-03  9.15e-06  2.16e-04  6.48e-01  
 14  +2.7930e-01  +2.8274e-01  3.44e-03  7.99e-06  5.86e-04  1.42e-06  3.28e-05  9.60e-01  
 15  +2.7816e-01  +2.7834e-01  1.77e-04  4.08e-07  2.99e-05  6.97e-08  1.72e-06  9.62e-01  
 16  +2.7810e-01  +2.7810e-01  1.81e-06  4.18e-09  3.06e-07  7.13e-10  1.77e-08  9.90e-01  
 17  +2.7810e-01  +2.7810e-01  1.81e-08  4.19e-11  3.07e-09  7.14e-12  1.77e-10  9.90e-01  
 18  +2.7810e-01  +2.7810e-01  1.82e-10  4.20e-13  3.08e-11  7.18e-14  1.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.3789ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:37 PM: Optimal value: 2.781e-01
(CVXPY) Sep 20 03:17:37 PM: Compilation took 5.508e-03 seconds
(CVXPY) Sep 20 03:17:37 PM: Solver (including time spent in interface) took 1.758e-02 seconds
Iteration: 19, Objective: 0.2781
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:38 PM: Your problem has 703 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Finished problem compilation (took 4.987e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 703
  constraints   = 1203
  nnz(P)        = 0
  nnz(A)        = 9769
  cones (total) = 1
    : Nonnegative = 1,  numel = 1203

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0218e+02  5.02e+02  9.59e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.5975e-01  +1.0980e+02  1.09e+02  4.35e-01  2.14e+01  3.82e-03  5.79e-01  5.84e-01  
  2  +5.1600e-01  +1.3210e+01  1.27e+01  1.33e-01  8.60e+00  1.92e-02  2.50e-01  9.90e-01  
  3  +5.0387e-01  +2.1737e+00  1.67e+00  2.12e-02  1.60e+00  2.70e-03  5.05e-02  8.25e-01  
  4  +4.9884e-01  +3.1947e+00  2.70e+00  1.46e-02  1.12e+00  4.74e-03  3.28e-02  7.83e-01  
  5  +4.7709e-01  +2.4182e+00  1.94e+00  6.84e-03  5.29e-01  4.15e-03  1.59e-02  6.06e-01  
  6  +4.5016e-01  +2.0455e+00  1.60e+00  4.33e-03  3.33e-01  3.68e-03  1.03e-02  4.23e-01  
  7  +4.2669e-01  +1.6333e+00  1.21e+00  3.11e-03  2.36e-01  2.12e-03  7.73e-03  3.96e-01  
  8  +3.9415e-01  +1.0839e+00  6.90e-01  2.02e-03  1.50e-01  1.69e-05  5.56e-03  8.66e-01  
  9  +3.3603e-01  +5.8453e-01  2.49e-01  6.43e-04  4.68e-02  2.23e-05  2.00e-03  6.94e-01  
 10  +3.0560e-01  +4.1659e-01  1.11e-01  2.83e-04  2.06e-02  2.12e-05  9.72e-04  6.31e-01  
 11  +2.9225e-01  +3.4972e-01  5.75e-02  1.41e-04  1.03e-02  1.46e-05  5.09e-04  5.83e-01  
 12  +2.8421e-01  +3.1124e-01  2.70e-02  6.46e-05  4.75e-03  8.97e-06  2.46e-04  6.92e-01  
 13  +2.7751e-01  +2.8132e-01  3.82e-03  8.95e-06  6.57e-04  1.47e-06  3.64e-05  9.43e-01  
 14  +2.7627e-01  +2.7648e-01  2.09e-04  4.87e-07  3.57e-05  7.84e-08  2.05e-06  9.59e-01  
 15  +2.7620e-01  +2.7620e-01  2.17e-06  5.05e-09  3.70e-07  8.11e-10  2.13e-08  9.90e-01  
 16  +2.7620e-01  +2.7620e-01  2.17e-08  5.06e-11  3.71e-09  8.13e-12  2.13e-10  9.90e-01  
 17  +2.7620e-01  +2.7620e-01  2.18e-10  5.08e-13  3.72e-11  8.17e-14  2.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.5639ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:38 PM: Optimal value: 2.762e-01
(CVXPY) Sep 20 03:17:38 PM: Compilation took 4.987e-03 seconds
(CVXPY) Sep 20 03:17:38 PM: Solver (including time spent in interface) took 1.658e-02 seconds
Iteration: 20, Objective: 0.2762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:38 PM: Your problem has 713 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Finished problem compilation (took 6.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 713
  constraints   = 1213
  nnz(P)        = 0
  nnz(A)        = 9844
  cones (total) = 1
    : Nonnegative = 1,  numel = 1213

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0229e+02  5.02e+02  9.60e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.5859e-01  +1.0985e+02  1.09e+02  4.36e-01  2.13e+01  3.82e-03  5.79e-01  5.84e-01  
  2  +5.1543e-01  +1.3310e+01  1.28e+01  1.33e-01  8.53e+00  1.94e-02  2.49e-01  9.90e-01  
  3  +5.0341e-01  +2.1948e+00  1.69e+00  2.08e-02  1.56e+00  2.86e-03  4.95e-02  8.27e-01  
  4  +4.9797e-01  +2.5249e+00  2.03e+00  1.41e-02  1.08e+00  4.07e-03  3.26e-02  5.76e-01  
  5  +4.7813e-01  +2.1016e+00  1.62e+00  5.72e-03  4.44e-01  5.97e-03  1.32e-02  6.21e-01  
  6  +4.5113e-01  +1.8623e+00  1.41e+00  3.75e-03  2.89e-01  5.66e-03  8.89e-03  4.06e-01  
  7  +4.3146e-01  +1.6043e+00  1.17e+00  2.99e-03  2.28e-01  3.82e-03  7.33e-03  2.90e-01  
  8  +3.8703e-01  +1.0140e+00  6.27e-01  1.76e-03  1.30e-01  3.08e-05  4.86e-03  7.53e-01  
  9  +3.3562e-01  +5.9335e-01  2.58e-01  6.82e-04  4.94e-02  2.31e-05  2.13e-03  6.10e-01  
 10  +3.0191e-01  +4.0456e-01  1.03e-01  2.64e-04  1.91e-02  1.94e-05  9.25e-04  6.76e-01  
 11  +2.9037e-01  +3.4784e-01  5.75e-02  1.43e-04  1.04e-02  1.42e-05  5.23e-04  5.48e-01  
 12  +2.8152e-01  +3.0555e-01  2.40e-02  5.80e-05  4.21e-03  8.36e-06  2.27e-04  7.77e-01  
 13  +2.7553e-01  +2.7950e-01  3.97e-03  9.31e-06  6.75e-04  1.48e-06  3.93e-05  9.11e-01  
 14  +2.7428e-01  +2.7451e-01  2.28e-04  5.30e-07  3.84e-05  8.18e-08  2.31e-06  9.49e-01  
 15  +2.7420e-01  +2.7420e-01  2.39e-06  5.56e-09  4.03e-07  8.57e-10  2.43e-08  9.90e-01  
 16  +2.7420e-01  +2.7420e-01  2.40e-08  5.56e-11  4.03e-09  8.58e-12  2.44e-10  9.90e-01  
 17  +2.7420e-01  +2.7420e-01  2.40e-10  5.56e-13  4.03e-11  8.59e-14  2.44e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.3339ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:38 PM: Optimal value: 2.742e-01
(CVXPY) Sep 20 03:17:38 PM: Compilation took 6.001e-03 seconds
(CVXPY) Sep 20 03:17:38 PM: Solver (including time spent in interface) took 2.008e-02 seconds
Iteration: 21, Objective: 0.2742
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:38 PM: Your problem has 723 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Finished problem compilation (took 5.722e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 723
  constraints   = 1223
  nnz(P)        = 0
  nnz(A)        = 9912
  cones (total) = 1
    : Nonnegative = 1,  numel = 1223

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0235e+02  5.02e+02  9.60e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.5691e-01  +1.0991e+02  1.09e+02  4.36e-01  2.12e+01  3.82e-03  5.79e-01  5.84e-01  
  2  +5.1428e-01  +1.3446e+01  1.29e+01  1.32e-01  8.46e+00  1.96e-02  2.48e-01  9.90e-01  
  3  +5.0233e-01  +2.1598e+00  1.66e+00  1.93e-02  1.45e+00  3.08e-03  4.58e-02  8.37e-01  
  4  +4.9387e-01  +2.3900e+00  1.90e+00  1.10e-02  8.41e-01  5.18e-03  2.52e-02  6.09e-01  
  5  +4.6506e-01  +1.8612e+00  1.40e+00  4.46e-03  3.45e-01  6.03e-03  1.04e-02  6.51e-01  
  6  +4.3998e-01  +1.7253e+00  1.29e+00  3.14e-03  2.41e-01  6.02e-03  7.47e-03  3.66e-01  
  7  +4.0344e-01  +1.1195e+00  7.16e-01  2.22e-03  1.64e-01  4.23e-05  5.95e-03  5.36e-01  
  8  +3.3654e-01  +6.0828e-01  2.72e-01  7.16e-04  5.18e-02  3.69e-05  2.17e-03  7.08e-01  
  9  +3.0150e-01  +4.2115e-01  1.20e-01  3.12e-04  2.24e-02  2.71e-05  1.07e-03  6.31e-01  
 10  +2.8688e-01  +3.4772e-01  6.08e-02  1.53e-04  1.11e-02  1.71e-05  5.58e-04  5.85e-01  
 11  +2.7701e-01  +2.9934e-01  2.23e-02  5.49e-05  3.97e-03  8.56e-06  2.16e-04  8.53e-01  
 12  +2.7163e-01  +2.7599e-01  4.36e-03  1.04e-05  7.52e-04  1.69e-06  4.45e-05  8.98e-01  
 13  +2.7025e-01  +2.7041e-01  1.57e-04  3.73e-07  2.68e-05  5.53e-08  1.65e-06  9.67e-01  
 14  +2.7020e-01  +2.7020e-01  1.59e-06  3.77e-09  2.71e-07  5.58e-10  1.67e-08  9.90e-01  
 15  +2.7020e-01  +2.7020e-01  1.59e-08  3.77e-11  2.71e-09  5.58e-12  1.67e-10  9.90e-01  
 16  +2.7020e-01  +2.7020e-01  1.59e-10  3.77e-13  2.72e-11  5.59e-14  1.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.3121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:38 PM: Optimal value: 2.702e-01
(CVXPY) Sep 20 03:17:38 PM: Compilation took 5.722e-03 seconds
(CVXPY) Sep 20 03:17:38 PM: Solver (including time spent in interface) took 1.457e-02 seconds
Iteration: 22, Objective: 0.2702
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:38 PM: Your problem has 733 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Finished problem compilation (took 6.018e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 733
  constraints   = 1233
  nnz(P)        = 0
  nnz(A)        = 10035
  cones (total) = 1
    : Nonnegative = 1,  numel = 1233

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0235e+02  5.02e+02  9.60e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5654e-01  +1.0992e+02  1.09e+02  4.37e-01  2.11e+01  3.82e-03  5.78e-01  5.84e-01  
  2  +5.1394e-01  +1.3439e+01  1.29e+01  1.32e-01  8.38e+00  1.95e-02  2.48e-01  9.90e-01  
  3  +5.0188e-01  +2.1182e+00  1.62e+00  1.85e-02  1.39e+00  3.12e-03  4.40e-02  8.43e-01  
  4  +4.9256e-01  +2.3119e+00  1.82e+00  1.02e-02  7.80e-01  5.38e-03  2.35e-02  6.10e-01  
  5  +4.6206e-01  +1.7824e+00  1.32e+00  4.34e-03  3.33e-01  5.57e-03  1.02e-02  6.47e-01  
  6  +4.3838e-01  +1.6732e+00  1.23e+00  3.11e-03  2.38e-01  5.50e-03  7.46e-03  3.74e-01  
  7  +3.9932e-01  +1.1141e+00  7.15e-01  2.20e-03  1.62e-01  4.02e-05  5.93e-03  5.93e-01  
  8  +3.3432e-01  +5.9355e-01  2.59e-01  6.87e-04  4.96e-02  2.65e-05  2.11e-03  6.92e-01  
  9  +3.0339e-01  +4.3633e-01  1.33e-01  3.46e-04  2.48e-02  2.70e-05  1.18e-03  5.83e-01  
 10  +2.8570e-01  +3.4635e-01  6.06e-02  1.53e-04  1.10e-02  1.51e-05  5.60e-04  6.03e-01  
 11  +2.7542e-01  +2.9679e-01  2.14e-02  5.25e-05  3.79e-03  7.73e-06  2.07e-04  8.47e-01  
 12  +2.7068e-01  +2.7682e-01  6.15e-03  1.46e-05  1.05e-03  2.31e-06  6.17e-05  8.00e-01  
 13  +2.6881e-01  +2.6916e-01  3.47e-04  8.16e-07  5.86e-05  1.21e-07  3.58e-06  9.46e-01  
 14  +2.6870e-01  +2.6871e-01  3.79e-06  8.92e-09  6.40e-07  1.31e-09  3.93e-08  9.89e-01  
 15  +2.6870e-01  +2.6870e-01  3.79e-08  8.92e-11  6.40e-09  1.31e-11  3.93e-10  9.90e-01  
 16  +2.6870e-01  +2.6870e-01  3.79e-10  8.92e-13  6.40e-11  1.32e-13  3.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.1759ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:38 PM: Optimal value: 2.687e-01
(CVXPY) Sep 20 03:17:38 PM: Compilation took 6.018e-03 seconds
(CVXPY) Sep 20 03:17:38 PM: Solver (including time spent in interface) took 1.704e-02 seconds
Iteration: 23, Objective: 0.2687
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:38 PM: Your problem has 734 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 734
  constraints   = 1234
  nnz(P)        = 0
  nnz(A)        = 10050
  cones (total) = 1
    : Nonnegative = 1,  numel = 1234

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0235e+02  5.02e+02  9.60e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5654e-01  +1.0992e+02  1.09e+02  4.37e-01  2.11e+01  3.82e-03  5.78e-01  5.84e-01  
  2  +5.1394e-01  +1.3440e+01  1.29e+01  1.32e-01  8.37e+00  1.95e-02  2.48e-01  9.90e-01  
  3  +5.0188e-01  +2.1312e+00  1.63e+00  1.87e-02  1.39e+00  3.14e-03  4.44e-02  8.42e-01  
  4  +4.9240e-01  +2.3207e+00  1.83e+00  1.02e-02  7.79e-01  5.43e-03  2.35e-02  6.13e-01  
  5  +4.6173e-01  +1.7810e+00  1.32e+00  4.34e-03  3.34e-01  5.51e-03  1.03e-02  6.47e-01  
  6  +4.3807e-01  +1.6708e+00  1.23e+00  3.12e-03  2.38e-01  5.44e-03  7.48e-03  3.74e-01  
  7  +3.9925e-01  +1.1143e+00  7.15e-01  2.20e-03  1.62e-01  3.99e-05  5.94e-03  5.97e-01  
  8  +3.3436e-01  +5.9406e-01  2.60e-01  6.89e-04  4.97e-02  2.64e-05  2.11e-03  6.92e-01  
  9  +3.0307e-01  +4.3483e-01  1.32e-01  3.43e-04  2.46e-02  2.68e-05  1.17e-03  5.89e-01  
 10  +2.8532e-01  +3.4455e-01  5.92e-02  1.49e-04  1.08e-02  1.50e-05  5.47e-04  6.14e-01  
 11  +2.7525e-01  +2.9596e-01  2.07e-02  5.08e-05  3.66e-03  7.78e-06  2.00e-04  8.71e-01  
 12  +2.7048e-01  +2.7596e-01  5.48e-03  1.30e-05  9.37e-04  2.10e-06  5.52e-05  8.17e-01  
 13  +2.6879e-01  +2.6907e-01  2.80e-04  6.59e-07  4.73e-05  9.94e-08  2.89e-06  9.51e-01  
 14  +2.6870e-01  +2.6870e-01  2.88e-06  6.78e-09  4.86e-07  1.02e-09  2.99e-08  9.90e-01  
 15  +2.6870e-01  +2.6870e-01  2.88e-08  6.78e-11  4.87e-09  1.02e-11  2.99e-10  9.90e-01  
 16  +2.6870e-01  +2.6870e-01  2.88e-10  6.78e-13  4.87e-11  1.02e-13  2.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.7523ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:38 PM: Optimal value: 2.687e-01
(CVXPY) Sep 20 03:17:38 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 03:17:38 PM: Solver (including time spent in interface) took 1.588e-02 seconds
Iteration: 24, Objective: 0.2687
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:38 PM: Your problem has 744 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Finished problem compilation (took 5.650e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 744
  constraints   = 1244
  nnz(P)        = 0
  nnz(A)        = 10118
  cones (total) = 1
    : Nonnegative = 1,  numel = 1244

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0237e+02  5.02e+02  9.60e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.5581e-01  +1.0994e+02  1.09e+02  4.37e-01  2.10e+01  3.82e-03  5.78e-01  5.84e-01  
  2  +5.1331e-01  +1.3469e+01  1.30e+01  1.31e-01  8.31e+00  1.96e-02  2.47e-01  9.90e-01  
  3  +5.0136e-01  +2.1731e+00  1.67e+00  1.87e-02  1.39e+00  3.33e-03  4.44e-02  8.40e-01  
  4  +4.8988e-01  +2.2900e+00  1.80e+00  9.35e-03  7.15e-01  5.94e-03  2.17e-02  6.27e-01  
  5  +4.5487e-01  +1.6819e+00  1.23e+00  4.08e-03  3.10e-01  4.83e-03  9.77e-03  6.58e-01  
  6  +4.3472e-01  +1.5634e+00  1.13e+00  3.07e-03  2.33e-01  4.46e-03  7.49e-03  3.35e-01  
  7  +3.8904e-01  +1.0056e+00  6.17e-01  1.84e-03  1.35e-01  3.62e-05  5.06e-03  6.80e-01  
  8  +3.2360e-01  +5.2586e-01  2.02e-01  5.39e-04  3.85e-02  2.22e-05  1.71e-03  7.14e-01  
  9  +3.0373e-01  +4.3598e-01  1.32e-01  3.44e-04  2.46e-02  2.64e-05  1.17e-03  4.78e-01  
 10  +2.8550e-01  +3.4529e-01  5.98e-02  1.52e-04  1.09e-02  1.36e-05  5.58e-04  5.73e-01  
 11  +2.7561e-01  +2.9784e-01  2.22e-02  5.54e-05  3.96e-03  7.50e-06  2.18e-04  8.08e-01  
 12  +2.7116e-01  +2.7878e-01  7.62e-03  1.84e-05  1.31e-03  2.87e-06  7.72e-05  8.23e-01  
 13  +2.6890e-01  +2.6949e-01  5.91e-04  1.40e-06  1.00e-04  2.09e-07  6.18e-06  9.34e-01  
 14  +2.6870e-01  +2.6871e-01  8.57e-06  2.04e-08  1.45e-06  2.99e-09  9.03e-08  9.87e-01  
 15  +2.6870e-01  +2.6870e-01  8.57e-08  2.04e-10  1.45e-08  3.00e-11  9.03e-10  9.90e-01  
 16  +2.6870e-01  +2.6870e-01  8.58e-10  2.04e-12  1.46e-10  3.00e-13  9.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.9211ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:38 PM: Optimal value: 2.687e-01
(CVXPY) Sep 20 03:17:38 PM: Compilation took 5.650e-03 seconds
(CVXPY) Sep 20 03:17:38 PM: Solver (including time spent in interface) took 1.835e-02 seconds
Iteration: 25, Objective: 0.2687
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:38 PM: Your problem has 749 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Finished problem compilation (took 6.415e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 749
  constraints   = 1249
  nnz(P)        = 0
  nnz(A)        = 10144
  cones (total) = 1
    : Nonnegative = 1,  numel = 1249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0238e+02  5.02e+02  9.60e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5550e-01  +1.0996e+02  1.09e+02  4.37e-01  2.09e+01  3.82e-03  5.78e-01  5.84e-01  
  2  +5.1315e-01  +1.3480e+01  1.30e+01  1.31e-01  8.28e+00  1.96e-02  2.47e-01  9.90e-01  
  3  +5.0124e-01  +2.2082e+00  1.71e+00  1.90e-02  1.41e+00  3.41e-03  4.51e-02  8.37e-01  
  4  +4.8913e-01  +2.2976e+00  1.81e+00  9.27e-03  7.07e-01  6.10e-03  2.15e-02  6.30e-01  
  5  +4.5205e-01  +1.6477e+00  1.20e+00  3.96e-03  3.00e-01  4.59e-03  9.55e-03  6.73e-01  
  6  +4.3251e-01  +1.5197e+00  1.09e+00  3.02e-03  2.28e-01  4.06e-03  7.42e-03  3.30e-01  
  7  +3.8438e-01  +9.6855e-01  5.84e-01  1.73e-03  1.26e-01  3.40e-05  4.78e-03  7.11e-01  
  8  +3.2087e-01  +5.1168e-01  1.91e-01  5.11e-04  3.64e-02  2.07e-05  1.64e-03  7.10e-01  
  9  +3.0030e-01  +4.1867e-01  1.18e-01  3.08e-04  2.20e-02  2.44e-05  1.06e-03  5.21e-01  
 10  +2.8579e-01  +3.4721e-01  6.14e-02  1.57e-04  1.12e-02  1.43e-05  5.74e-04  5.17e-01  
 11  +2.7616e-01  +3.0088e-01  2.47e-02  6.19e-05  4.43e-03  7.38e-06  2.41e-04  7.13e-01  
 12  +2.7126e-01  +2.7922e-01  7.96e-03  1.94e-05  1.38e-03  2.80e-06  8.07e-05  8.21e-01  
 13  +2.6913e-01  +2.7042e-01  1.30e-03  3.10e-06  2.21e-04  4.45e-07  1.36e-05  8.42e-01  
 14  +2.6871e-01  +2.6875e-01  3.41e-05  8.12e-08  5.79e-06  1.17e-08  3.61e-07  9.80e-01  
 15  +2.6870e-01  +2.6870e-01  3.41e-07  8.12e-10  5.79e-08  1.17e-10  3.61e-09  9.90e-01  
 16  +2.6870e-01  +2.6870e-01  3.41e-09  8.13e-12  5.79e-10  1.17e-12  3.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.8733ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:38 PM: Optimal value: 2.687e-01
(CVXPY) Sep 20 03:17:38 PM: Compilation took 6.415e-03 seconds
(CVXPY) Sep 20 03:17:38 PM: Solver (including time spent in interface) took 1.623e-02 seconds
Iteration: 26, Objective: 0.2687
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:38 PM: Your problem has 759 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:38 PM: Finished problem compilation (took 5.946e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 759
  constraints   = 1259
  nnz(P)        = 0
  nnz(A)        = 10230
  cones (total) = 1
    : Nonnegative = 1,  numel = 1259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0238e+02  5.02e+02  9.60e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.5490e-01  +1.1000e+02  1.09e+02  4.38e-01  2.08e+01  3.83e-03  5.78e-01  5.84e-01  
  2  +5.1285e-01  +1.3525e+01  1.30e+01  1.31e-01  8.22e+00  1.97e-02  2.47e-01  9.90e-01  
  3  +5.0092e-01  +2.2688e+00  1.77e+00  1.93e-02  1.43e+00  3.57e-03  4.58e-02  8.34e-01  
  4  +4.8721e-01  +2.3029e+00  1.82e+00  8.92e-03  6.79e-01  6.48e-03  2.07e-02  6.40e-01  
  5  +4.4296e-01  +1.5508e+00  1.11e+00  3.46e-03  2.61e-01  4.35e-03  8.43e-03  7.22e-01  
  6  +4.2657e-01  +1.3832e+00  9.57e-01  2.84e-03  2.12e-01  3.00e-03  7.11e-03  3.00e-01  
  7  +3.6716e-01  +8.4546e-01  4.78e-01  1.36e-03  9.80e-02  2.78e-05  3.86e-03  8.03e-01  
  8  +3.1694e-01  +5.0895e-01  1.92e-01  5.25e-04  3.72e-02  2.59e-05  1.72e-03  6.42e-01  
  9  +2.9542e-01  +3.9788e-01  1.02e-01  2.71e-04  1.92e-02  2.11e-05  9.58e-04  5.65e-01  
 10  +2.8390e-01  +3.4044e-01  5.65e-02  1.46e-04  1.04e-02  1.42e-05  5.41e-04  5.40e-01  
 11  +2.7639e-01  +3.0297e-01  2.66e-02  6.75e-05  4.80e-03  7.45e-06  2.64e-04  5.96e-01  
 12  +2.7131e-01  +2.7934e-01  8.03e-03  1.98e-05  1.40e-03  2.80e-06  8.22e-05  8.48e-01  
 13  +2.6911e-01  +2.7035e-01  1.24e-03  2.97e-06  2.11e-04  4.29e-07  1.30e-05  8.73e-01  
 14  +2.6871e-01  +2.6874e-01  3.17e-05  7.57e-08  5.38e-06  1.14e-08  3.37e-07  9.90e-01  
 15  +2.6870e-01  +2.6870e-01  3.17e-07  7.58e-10  5.38e-08  1.14e-10  3.38e-09  9.90e-01  
 16  +2.6870e-01  +2.6870e-01  3.17e-09  7.58e-12  5.38e-10  1.15e-12  3.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.5099ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:38 PM: Optimal value: 2.687e-01
(CVXPY) Sep 20 03:17:38 PM: Compilation took 5.946e-03 seconds
(CVXPY) Sep 20 03:17:38 PM: Solver (including time spent in interface) took 2.010e-02 seconds
Iteration: 27, Objective: 0.2687
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:39 PM: Your problem has 763 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:39 PM: Finished problem compilation (took 6.528e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 763
  constraints   = 1263
  nnz(P)        = 0
  nnz(A)        = 10245
  cones (total) = 1
    : Nonnegative = 1,  numel = 1263

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0241e+02  5.02e+02  9.60e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.5461e-01  +1.1001e+02  1.09e+02  4.38e-01  2.07e+01  3.83e-03  5.78e-01  5.84e-01  
  2  +5.1260e-01  +1.3539e+01  1.30e+01  1.31e-01  8.19e+00  1.97e-02  2.47e-01  9.90e-01  
  3  +5.0054e-01  +2.1423e+00  1.64e+00  1.78e-02  1.31e+00  3.44e-03  4.23e-02  8.48e-01  
  4  +4.8662e-01  +2.1968e+00  1.71e+00  8.31e-03  6.33e-01  6.35e-03  1.93e-02  6.40e-01  
  5  +4.4460e-01  +1.5741e+00  1.13e+00  3.56e-03  2.68e-01  4.63e-03  8.64e-03  6.77e-01  
  6  +4.2657e-01  +1.3856e+00  9.59e-01  2.89e-03  2.16e-01  2.90e-03  7.28e-03  3.32e-01  
  7  +3.6743e-01  +8.6098e-01  4.94e-01  1.37e-03  9.90e-02  3.75e-04  3.86e-03  7.36e-01  
  8  +3.2022e-01  +5.3376e-01  2.14e-01  5.84e-04  4.14e-02  1.24e-04  1.89e-03  5.87e-01  
  9  +2.9745e-01  +4.1052e-01  1.13e-01  3.01e-04  2.13e-02  6.32e-05  1.06e-03  5.38e-01  
 10  +2.8423e-01  +3.4305e-01  5.88e-02  1.52e-04  1.08e-02  3.19e-05  5.63e-04  5.84e-01  
 11  +2.7667e-01  +3.0454e-01  2.79e-02  7.12e-05  5.05e-03  1.44e-05  2.77e-04  6.21e-01  
 12  +2.7144e-01  +2.7993e-01  8.49e-03  2.11e-05  1.50e-03  3.94e-06  8.74e-05  8.45e-01  
 13  +2.6914e-01  +2.7047e-01  1.33e-03  3.21e-06  2.28e-04  5.73e-07  1.41e-05  8.78e-01  
 14  +2.6871e-01  +2.6875e-01  3.95e-05  9.52e-08  6.75e-06  1.53e-08  4.25e-07  9.90e-01  
 15  +2.6870e-01  +2.6870e-01  3.96e-07  9.53e-10  6.76e-08  1.53e-10  4.25e-09  9.90e-01  
 16  +2.6870e-01  +2.6870e-01  3.96e-09  9.53e-12  6.76e-10  1.54e-12  4.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.9628ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:39 PM: Optimal value: 2.687e-01
(CVXPY) Sep 20 03:17:39 PM: Compilation took 6.528e-03 seconds
(CVXPY) Sep 20 03:17:39 PM: Solver (including time spent in interface) took 2.110e-02 seconds
Iteration: 28, Objective: 0.2687
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:39 PM: Your problem has 766 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:39 PM: Finished problem compilation (took 1.270e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 766
  constraints   = 1266
  nnz(P)        = 0
  nnz(A)        = 10269
  cones (total) = 1
    : Nonnegative = 1,  numel = 1266

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0242e+02  5.02e+02  9.60e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.5449e-01  +1.1001e+02  1.09e+02  4.38e-01  2.07e+01  3.83e-03  5.77e-01  5.84e-01  
  2  +5.1250e-01  +1.3545e+01  1.30e+01  1.31e-01  8.17e+00  1.97e-02  2.47e-01  9.90e-01  
  3  +5.0040e-01  +2.1518e+00  1.65e+00  1.78e-02  1.31e+00  3.48e-03  4.23e-02  8.49e-01  
  4  +4.8602e-01  +2.1884e+00  1.70e+00  8.20e-03  6.23e-01  6.41e-03  1.91e-02  6.42e-01  
  5  +4.4605e-01  +1.6124e+00  1.17e+00  3.76e-03  2.83e-01  4.68e-03  9.13e-03  6.47e-01  
  6  +4.2907e-01  +1.4446e+00  1.02e+00  3.07e-03  2.29e-01  3.21e-03  7.68e-03  3.18e-01  
  7  +3.7187e-01  +9.0362e-01  5.32e-01  1.50e-03  1.08e-01  2.61e-04  4.19e-03  7.67e-01  
  8  +3.2224e-01  +5.4335e-01  2.21e-01  6.06e-04  4.30e-02  8.64e-05  1.95e-03  6.00e-01  
  9  +2.9930e-01  +4.2011e-01  1.21e-01  3.23e-04  2.28e-02  4.87e-05  1.12e-03  5.25e-01  
 10  +2.8473e-01  +3.4548e-01  6.07e-02  1.57e-04  1.12e-02  2.55e-05  5.81e-04  5.99e-01  
 11  +2.7693e-01  +3.0557e-01  2.86e-02  7.33e-05  5.20e-03  1.21e-05  2.85e-04  6.59e-01  
 12  +2.7172e-01  +2.8118e-01  9.46e-03  2.36e-05  1.67e-03  3.96e-06  9.72e-05  8.06e-01  
 13  +2.6927e-01  +2.7097e-01  1.70e-03  4.13e-06  2.93e-04  6.77e-07  1.81e-05  8.91e-01  
 14  +2.6872e-01  +2.6878e-01  5.65e-05  1.36e-07  9.66e-06  2.12e-08  6.09e-07  9.87e-01  
 15  +2.6870e-01  +2.6870e-01  5.66e-07  1.36e-09  9.66e-08  2.12e-10  6.09e-09  9.90e-01  
 16  +2.6870e-01  +2.6870e-01  5.66e-09  1.37e-11  9.67e-10  2.12e-12  6.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.0941ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:39 PM: Optimal value: 2.687e-01
(CVXPY) Sep 20 03:17:39 PM: Compilation took 1.270e-02 seconds
(CVXPY) Sep 20 03:17:39 PM: Solver (including time spent in interface) took 2.906e-02 seconds
Iteration: 29, Objective: 0.2687
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:17:39 PM: Your problem has 767 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:17:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:17:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:17:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:17:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:17:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:17:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:17:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:17:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:17:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:17:39 PM: Finished problem compilation (took 9.700e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 767
  constraints   = 1267
  nnz(P)        = 0
  nnz(A)        = 10273
  cones (total) = 1
    : Nonnegative = 1,  numel = 1267

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0242e+02  5.02e+02  9.60e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.5440e-01  +1.1002e+02  1.09e+02  4.38e-01  2.07e+01  3.83e-03  5.78e-01  5.84e-01  
  2  +5.1245e-01  +1.3553e+01  1.30e+01  1.31e-01  8.17e+00  1.97e-02  2.47e-01  9.90e-01  
  3  +5.0037e-01  +2.1529e+00  1.65e+00  1.78e-02  1.31e+00  3.49e-03  4.23e-02  8.49e-01  
  4  +4.8589e-01  +2.1866e+00  1.70e+00  8.17e-03  6.21e-01  6.43e-03  1.90e-02  6.42e-01  
  5  +4.4655e-01  +1.6245e+00  1.18e+00  3.80e-03  2.86e-01  4.76e-03  9.24e-03  6.37e-01  
  6  +4.2938e-01  +1.4583e+00  1.03e+00  3.10e-03  2.31e-01  3.31e-03  7.74e-03  3.19e-01  
  7  +3.7237e-01  +9.0924e-01  5.37e-01  1.52e-03  1.10e-01  2.36e-04  4.24e-03  7.71e-01  
  8  +3.2233e-01  +5.4388e-01  2.22e-01  6.08e-04  4.30e-02  7.87e-05  1.95e-03  6.03e-01  
  9  +2.9944e-01  +4.2101e-01  1.22e-01  3.25e-04  2.30e-02  4.55e-05  1.13e-03  5.24e-01  
 10  +2.8476e-01  +3.4567e-01  6.09e-02  1.58e-04  1.12e-02  2.41e-05  5.82e-04  6.00e-01  
 11  +2.7698e-01  +3.0576e-01  2.88e-02  7.37e-05  5.23e-03  1.17e-05  2.86e-04  6.63e-01  
 12  +2.7173e-01  +2.8122e-01  9.49e-03  2.37e-05  1.68e-03  3.89e-06  9.76e-05  8.05e-01  
 13  +2.6927e-01  +2.7098e-01  1.71e-03  4.16e-06  2.95e-04  6.73e-07  1.82e-05  8.92e-01  
 14  +2.6872e-01  +2.6878e-01  5.78e-05  1.40e-07  9.88e-06  2.16e-08  6.23e-07  9.86e-01  
 15  +2.6870e-01  +2.6870e-01  5.79e-07  1.40e-09  9.89e-08  2.16e-10  6.24e-09  9.90e-01  
 16  +2.6870e-01  +2.6870e-01  5.79e-09  1.40e-11  9.90e-10  2.16e-12  6.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.7204ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:17:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:17:39 PM: Optimal value: 2.687e-01
(CVXPY) Sep 20 03:17:39 PM: Compilation took 9.700e-03 seconds
(CVXPY) Sep 20 03:17:39 PM: Solver (including time spent in interface) took 2.422e-02 seconds
FULL MODEL:
  Accruacy: 0.689
  Our objective: 0.378

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.022)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.022)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.01)
 OR (x2 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.022)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.157474756240845
Best over terms:
  Our final objective: 0.17999999999999997
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.17999999999999997
  Highest accruacy: 0.59
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

