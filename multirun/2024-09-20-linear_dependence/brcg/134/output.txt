Command:
python test_script.py -s linear_dependence -d 4 -n 100 --seed 21 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.32
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.38000000000000006
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:58 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:58 PM: Finished problem compilation (took 4.154e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9604e-01  +5.0943e+01  5.04e+01  8.58e-01  7.88e+00  1.00e+00  1.04e+00   ------   
  1  +6.0123e-01  +1.0110e+01  9.51e+00  2.94e-01  4.14e+00  4.08e-03  4.90e-01  6.70e-01  
  2  +5.2772e-01  +1.4840e+00  9.56e-01  5.88e-02  9.76e-01  9.81e-03  1.47e-01  9.39e-01  
  3  +5.2152e-01  +1.4092e+00  8.88e-01  4.19e-02  7.05e-01  1.18e-02  1.07e-01  3.01e-01  
  4  +4.9810e-01  +1.2912e+00  7.93e-01  2.52e-02  4.28e-01  1.08e-02  7.02e-02  5.72e-01  
  5  +4.5799e-01  +9.5091e-01  4.93e-01  9.79e-03  1.68e-01  9.30e-03  2.99e-02  5.89e-01  
  6  +3.9729e-01  +4.8937e-01  9.21e-02  2.08e-03  3.46e-02  5.91e-05  8.95e-03  9.46e-01  
  7  +3.7290e-01  +3.8188e-01  8.97e-03  1.92e-04  3.18e-03  2.98e-05  9.45e-04  9.73e-01  
  8  +3.7013e-01  +3.7023e-01  9.85e-05  2.11e-06  3.48e-05  3.26e-07  1.05e-05  9.90e-01  
  9  +3.7010e-01  +3.7010e-01  9.85e-07  2.11e-08  3.48e-07  3.26e-09  1.05e-07  9.90e-01  
 10  +3.7010e-01  +3.7010e-01  9.85e-09  2.11e-10  3.48e-09  3.26e-11  1.05e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 320.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:58 PM: Optimal value: 3.701e-01
(CVXPY) Sep 20 03:05:58 PM: Compilation took 4.154e-03 seconds
(CVXPY) Sep 20 03:05:58 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:58 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:58 PM: Finished problem compilation (took 3.422e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 485
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9037e-01  +5.1463e+01  5.10e+01  8.67e-01  8.38e+00  1.00e+00  1.07e+00   ------   
  1  +5.7993e-01  +1.0397e+01  9.82e+00  3.18e-01  4.40e+00  4.01e-03  5.25e-01  6.55e-01  
  2  +5.1331e-01  +1.6698e+00  1.16e+00  6.72e-02  1.16e+00  1.17e-02  1.69e-01  9.21e-01  
  3  +4.7788e-01  +1.4239e+00  9.46e-01  3.47e-02  6.17e-01  1.24e-02  9.47e-02  5.45e-01  
  4  +4.3179e-01  +7.7586e-01  3.44e-01  1.04e-02  1.86e-01  5.54e-03  3.17e-02  6.90e-01  
  5  +4.0035e-01  +6.7424e-01  2.74e-01  5.12e-03  9.37e-02  6.28e-03  1.56e-02  5.51e-01  
  6  +3.6187e-01  +4.5018e-01  8.83e-02  1.88e-03  3.43e-02  4.71e-04  6.28e-03  8.50e-01  
  7  +3.3691e-01  +3.5119e-01  1.43e-02  2.84e-04  5.37e-03  7.33e-05  9.97e-04  8.65e-01  
  8  +3.3101e-01  +3.3260e-01  1.58e-03  3.09e-05  5.90e-04  7.92e-06  1.11e-04  8.92e-01  
  9  +3.3074e-01  +3.3183e-01  1.09e-03  2.03e-05  3.85e-04  5.90e-06  7.38e-05  4.55e-01  
 10  +3.3023e-01  +3.3029e-01  5.96e-05  1.11e-06  2.09e-05  3.71e-07  4.05e-06  9.90e-01  
 11  +3.3020e-01  +3.3020e-01  6.05e-07  1.12e-08  2.12e-07  3.73e-09  4.12e-08  9.90e-01  
 12  +3.3020e-01  +3.3020e-01  6.05e-09  1.12e-10  2.12e-09  3.73e-11  4.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 526.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:58 PM: Optimal value: 3.302e-01
(CVXPY) Sep 20 03:05:58 PM: Compilation took 3.422e-03 seconds
(CVXPY) Sep 20 03:05:58 PM: Solver (including time spent in interface) took 4.060e-04 seconds
Iteration: 2, Objective: 0.3302
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:58 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:58 PM: Finished problem compilation (took 2.199e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 522
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8879e-01  +5.1333e+01  5.08e+01  8.70e-01  8.30e+00  1.00e+00  1.07e+00   ------   
  1  +5.6346e-01  +1.0564e+01  1.00e+01  3.29e-01  4.42e+00  3.98e-03  5.39e-01  6.43e-01  
  2  +4.9925e-01  +1.7193e+00  1.22e+00  6.78e-02  1.15e+00  1.29e-02  1.73e-01  9.30e-01  
  3  +4.4728e-01  +1.1142e+00  6.67e-01  2.35e-02  4.09e-01  1.00e-02  6.67e-02  6.81e-01  
  4  +3.9904e-01  +9.0714e-01  5.08e-01  1.13e-02  1.99e-01  9.65e-03  3.48e-02  5.44e-01  
  5  +3.4414e-01  +4.8053e-01  1.36e-01  3.35e-03  5.70e-02  7.32e-05  1.25e-02  8.65e-01  
  6  +3.1395e-01  +3.2551e-01  1.16e-02  2.79e-04  4.68e-03  1.13e-05  1.22e-03  9.19e-01  
  7  +3.1103e-01  +3.1313e-01  2.09e-03  5.01e-05  8.39e-04  3.21e-06  2.29e-04  8.44e-01  
  8  +3.1060e-01  +3.1149e-01  8.96e-04  2.09e-05  3.49e-04  2.37e-06  1.01e-04  7.52e-01  
  9  +3.1032e-01  +3.1037e-01  5.37e-05  1.23e-06  2.07e-05  1.20e-07  6.29e-06  9.41e-01  
 10  +3.1030e-01  +3.1030e-01  9.57e-07  2.19e-08  3.67e-07  2.54e-09  1.13e-07  9.87e-01  
 11  +3.1030e-01  +3.1030e-01  9.57e-09  2.19e-10  3.67e-09  2.54e-11  1.13e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 413µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:58 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:58 PM: Optimal value: 3.103e-01
(CVXPY) Sep 20 03:05:58 PM: Compilation took 2.199e-03 seconds
(CVXPY) Sep 20 03:05:58 PM: Solver (including time spent in interface) took 1.368e-03 seconds
Iteration: 3, Objective: 0.3103
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:59 PM: Your problem has 76 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:59 PM: Finished problem compilation (took 3.338e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 76
  constraints   = 126
  nnz(P)        = 0
  nnz(A)        = 533
  cones (total) = 1
    : Nonnegative = 1,  numel = 126

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8868e-01  +5.1354e+01  5.09e+01  8.71e-01  8.32e+00  1.00e+00  1.07e+00   ------   
  1  +5.6245e-01  +1.0582e+01  1.00e+01  3.31e-01  4.43e+00  3.98e-03  5.40e-01  6.42e-01  
  2  +4.9773e-01  +1.7253e+00  1.23e+00  6.83e-02  1.16e+00  1.30e-02  1.75e-01  9.29e-01  
  3  +4.4516e-01  +1.0824e+00  6.37e-01  2.26e-02  3.95e-01  9.66e-03  6.50e-02  6.89e-01  
  4  +3.9795e-01  +8.8096e-01  4.83e-01  1.10e-02  1.93e-01  9.11e-03  3.41e-02  5.43e-01  
  5  +3.4383e-01  +4.7824e-01  1.34e-01  3.32e-03  5.66e-02  7.05e-05  1.25e-02  8.65e-01  
  6  +3.1400e-01  +3.2576e-01  1.18e-02  2.85e-04  4.79e-03  1.15e-05  1.25e-03  9.17e-01  
  7  +3.1103e-01  +3.1313e-01  2.10e-03  5.04e-05  8.45e-04  3.42e-06  2.31e-04  8.52e-01  
  8  +3.1060e-01  +3.1150e-01  9.00e-04  2.10e-05  3.53e-04  2.38e-06  1.02e-04  7.42e-01  
  9  +3.1032e-01  +3.1039e-01  6.36e-05  1.47e-06  2.46e-05  1.43e-07  7.50e-06  9.30e-01  
 10  +3.1030e-01  +3.1030e-01  9.02e-07  2.07e-08  3.48e-07  2.20e-09  1.08e-07  9.88e-01  
 11  +3.1030e-01  +3.1030e-01  9.02e-09  2.07e-10  3.48e-09  2.20e-11  1.08e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 558.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:59 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:59 PM: Optimal value: 3.103e-01
(CVXPY) Sep 20 03:05:59 PM: Compilation took 3.338e-03 seconds
(CVXPY) Sep 20 03:05:59 PM: Solver (including time spent in interface) took 7.479e-04 seconds
FULL MODEL:
  Accruacy: 0.69
  Our objective: 0.38

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.32)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.3694913387298584
Best over terms:
  Our final objective: 0.32
    Its accruacy: 0.66
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.32
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

