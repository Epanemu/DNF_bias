Command:
python test_script.py -s linear_dependence -d 3 -n 5000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30519999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.3052
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:02 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:02 PM: Finished problem compilation (took 9.836e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0002e-01  +2.5010e+03  2.50e+03  9.77e-01  5.54e+01  1.00e+00  1.00e+00   ------   
  1  +6.2002e-01  +4.6378e+02  4.63e+02  3.04e-01  2.88e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5553e-01  +7.9353e+01  7.88e+01  1.33e-01  1.50e+01  6.69e-03  2.20e-01  6.66e-01  
  3  +5.0738e-01  +1.1782e+01  1.13e+01  8.06e-02  8.69e+00  9.69e-06  2.17e-01  7.82e-02  
  4  +4.9994e-01  +1.1355e+00  6.36e-01  6.01e-03  6.65e-01  6.18e-06  1.37e-01  7.44e-01  
  5  +4.9883e-01  +9.3265e-01  4.34e-01  3.65e-03  4.08e-01  1.65e-05  2.31e-02  8.88e-01  
  6  +4.8255e-01  +8.7144e-01  3.89e-01  5.67e-04  6.45e-02  1.85e-04  1.70e-03  9.30e-01  
  7  +4.3379e-01  +5.9183e-01  1.58e-01  7.55e-05  8.53e-03  3.42e-04  2.34e-04  8.82e-01  
  8  +4.0068e-01  +4.5049e-01  4.98e-02  2.22e-05  2.48e-03  2.68e-05  9.29e-05  9.19e-01  
  9  +3.8912e-01  +3.9069e-01  1.57e-03  6.92e-07  7.74e-05  4.66e-07  3.13e-06  9.72e-01  
 10  +3.8870e-01  +3.8872e-01  1.60e-05  7.03e-09  7.87e-07  4.73e-09  3.19e-08  9.90e-01  
 11  +3.8870e-01  +3.8870e-01  1.60e-07  7.03e-11  7.86e-09  4.73e-11  3.20e-10  9.90e-01  
 12  +3.8870e-01  +3.8870e-01  1.60e-09  7.03e-13  7.86e-11  4.73e-13  3.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.712ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:02 PM: Optimal value: 3.887e-01
(CVXPY) Sep 20 03:05:02 PM: Compilation took 9.836e-03 seconds
(CVXPY) Sep 20 03:05:02 PM: Solver (including time spent in interface) took 1.519e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3887
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:02 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:02 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:02 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:02 PM: Finished problem compilation (took 6.181e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 17762
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +2.5014e+03  2.50e+03  9.77e-01  5.89e+01  1.00e+00  1.00e+00   ------   
  1  +6.1951e-01  +4.6453e+02  4.64e+02  3.05e-01  3.06e+01  4.25e-03  4.37e-01  6.93e-01  
  2  +5.5505e-01  +7.8854e+01  7.83e+01  1.32e-01  1.58e+01  6.76e-03  2.19e-01  6.70e-01  
  3  +5.0705e-01  +1.1433e+01  1.09e+01  7.89e-02  9.03e+00  9.56e-06  2.16e-01  8.57e-02  
  4  +5.0070e-01  +2.2844e+00  1.78e+00  1.67e-02  1.94e+00  6.83e-06  1.76e-01  3.55e-01  
  5  +5.0011e-01  +1.1232e+00  6.23e-01  5.83e-03  6.87e-01  3.81e-06  6.71e-02  6.64e-01  
  6  +4.9823e-01  +1.7317e+00  1.23e+00  4.86e-03  5.89e-01  2.76e-05  1.42e-02  9.37e-01  
  7  +4.8617e-01  +1.4287e+00  9.42e-01  7.89e-04  9.66e-02  1.22e-04  2.05e-03  8.56e-01  
  8  +4.6815e-01  +1.1148e+00  6.47e-01  3.31e-04  4.04e-02  1.29e-04  8.59e-04  6.26e-01  
  9  +4.7323e-01  +1.0988e+00  6.26e-01  3.15e-04  3.85e-02  1.08e-04  8.02e-04  2.95e-01  
 10  +4.6464e-01  +9.7348e-01  5.09e-01  2.32e-04  2.82e-02  7.85e-05  5.99e-04  4.46e-01  
 11  +4.5315e-01  +8.3218e-01  3.79e-01  1.73e-04  2.10e-02  3.80e-05  4.65e-04  7.01e-01  
 12  +4.1130e-01  +6.0674e-01  1.95e-01  7.31e-05  8.79e-03  2.03e-05  2.13e-04  8.49e-01  
 13  +3.6164e-01  +3.9444e-01  3.28e-02  1.20e-05  1.43e-03  1.73e-06  4.14e-05  9.90e-01  
 14  +3.4798e-01  +3.4915e-01  1.16e-03  4.20e-07  5.00e-05  5.33e-08  1.55e-06  9.67e-01  
 15  +3.4750e-01  +3.4752e-01  1.16e-05  4.20e-09  4.99e-07  5.32e-10  1.55e-08  9.90e-01  
 16  +3.4750e-01  +3.4750e-01  1.16e-07  4.20e-11  4.99e-09  5.32e-12  1.55e-10  9.90e-01  
 17  +3.4750e-01  +3.4750e-01  1.16e-09  4.20e-13  4.99e-11  5.32e-14  1.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.9842ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:02 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:02 PM: Optimal value: 3.475e-01
(CVXPY) Sep 20 03:05:02 PM: Compilation took 6.181e-03 seconds
(CVXPY) Sep 20 03:05:02 PM: Solver (including time spent in interface) took 2.738e-02 seconds
FULL MODEL:
  Accruacy: 0.6526
  Our objective: 0.30519999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3052)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.2114667892456055
Best over terms:
  Our final objective: 0.30519999999999997
    Its accruacy: 0.6526
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30519999999999997
  Highest accruacy: 0.6526
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

