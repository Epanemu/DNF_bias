Command:
python test_script.py -s linear_dependence -d 2 -n 100 --seed 56 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5800000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 2.

Computed total variation: 0.5800000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:36 PM: Your problem has 55 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:36 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 105
  nnz(P)        = 0
  nnz(A)        = 255
  cones (total) = 1
    : Nonnegative = 1,  numel = 105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8587e-01  +5.1773e+01  5.13e+01  8.50e-01  6.73e+00  1.00e+00  1.07e+00   ------   
  1  +6.1259e-01  +9.1114e+00  8.50e+00  2.28e-01  2.99e+00  4.45e-03  4.06e-01  7.37e-01  
  2  +4.8891e-01  +1.7962e+00  1.31e+00  4.93e-02  7.37e-01  7.44e-03  1.15e-01  8.28e-01  
  3  +3.6094e-01  +1.1202e+00  7.59e-01  1.63e-02  2.44e-01  6.60e-03  4.28e-02  6.71e-01  
  4  +2.4737e-01  +4.3116e-01  1.84e-01  5.02e-03  6.88e-02  3.05e-05  2.27e-02  6.42e-01  
  5  +2.1211e-01  +2.2105e-01  8.95e-03  2.44e-04  3.28e-03  8.28e-06  1.49e-03  9.52e-01  
  6  +2.1012e-01  +2.1021e-01  8.98e-05  2.45e-06  3.30e-05  9.94e-08  1.58e-05  9.90e-01  
  7  +2.1010e-01  +2.1010e-01  8.98e-07  2.45e-08  3.30e-07  9.93e-10  1.58e-07  9.90e-01  
  8  +2.1010e-01  +2.1010e-01  8.98e-09  2.45e-10  3.30e-09  9.93e-12  1.58e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 231.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:36 PM: Optimal value: 2.101e-01
(CVXPY) Sep 20 03:03:36 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:36 PM: Your problem has 56 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:36 PM: Finished problem compilation (took 3.125e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 106
  nnz(P)        = 0
  nnz(A)        = 275
  cones (total) = 1
    : Nonnegative = 1,  numel = 106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8579e-01  +5.1767e+01  5.13e+01  8.52e-01  6.93e+00  1.00e+00  1.08e+00   ------   
  1  +6.0946e-01  +9.2307e+00  8.62e+00  2.36e-01  3.12e+00  4.39e-03  4.21e-01  7.30e-01  
  2  +4.8874e-01  +1.8377e+00  1.35e+00  5.12e-02  7.78e-01  7.74e-03  1.21e-01  8.27e-01  
  3  +3.5679e-01  +1.1483e+00  7.92e-01  1.70e-02  2.60e-01  6.75e-03  4.55e-02  6.88e-01  
  4  +2.4426e-01  +4.1965e-01  1.75e-01  4.89e-03  6.81e-02  3.00e-05  2.29e-02  7.12e-01  
  5  +2.1234e-01  +2.2248e-01  1.01e-02  2.80e-04  3.85e-03  6.01e-06  1.73e-03  9.38e-01  
  6  +2.1012e-01  +2.1023e-01  1.04e-04  2.87e-06  3.93e-05  7.71e-08  1.87e-05  9.89e-01  
  7  +2.1010e-01  +2.1010e-01  1.04e-06  2.87e-08  3.93e-07  7.71e-10  1.87e-07  9.90e-01  
  8  +2.1010e-01  +2.1010e-01  1.04e-08  2.87e-10  3.93e-09  7.71e-12  1.87e-09  9.90e-01  
  9  +2.1010e-01  +2.1010e-01  1.04e-10  2.87e-12  3.93e-11  7.71e-14  1.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:36 PM: Optimal value: 2.101e-01
(CVXPY) Sep 20 03:03:36 PM: Compilation took 3.125e-03 seconds
(CVXPY) Sep 20 03:03:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:36 PM: Your problem has 57 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:36 PM: Finished problem compilation (took 2.613e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 57
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 297
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8341e-01  +5.1841e+01  5.14e+01  8.52e-01  7.17e+00  1.00e+00  1.07e+00   ------   
  1  +5.9653e-01  +9.3406e+00  8.74e+00  2.45e-01  3.33e+00  4.30e-03  4.33e-01  7.24e-01  
  2  +4.8659e-01  +1.8467e+00  1.36e+00  5.06e-02  8.03e-01  7.87e-03  1.18e-01  8.38e-01  
  3  +3.5343e-01  +1.0952e+00  7.42e-01  1.58e-02  2.52e-01  6.40e-03  4.20e-02  6.86e-01  
  4  +2.3638e-01  +3.7478e-01  1.38e-01  3.92e-03  5.65e-02  2.62e-05  1.93e-02  7.46e-01  
  5  +2.1173e-01  +2.1906e-01  7.33e-03  2.04e-04  2.92e-03  2.31e-06  1.25e-03  9.42e-01  
  6  +2.1019e-01  +2.1059e-01  3.96e-04  1.10e-05  1.57e-04  1.48e-07  7.08e-05  9.45e-01  
  7  +2.1010e-01  +2.1011e-01  4.28e-06  1.18e-07  1.69e-06  2.10e-09  7.71e-07  9.90e-01  
  8  +2.1010e-01  +2.1010e-01  4.28e-08  1.18e-09  1.69e-08  2.10e-11  7.71e-09  9.90e-01  
  9  +2.1010e-01  +2.1010e-01  4.28e-10  1.18e-11  1.69e-10  2.10e-13  7.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 213.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:36 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:36 PM: Optimal value: 2.101e-01
(CVXPY) Sep 20 03:03:36 PM: Compilation took 2.613e-03 seconds
(CVXPY) Sep 20 03:03:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.79
  Our objective: 0.5800000000000001

IF 
    (x0 = 0) <-- (term's our objective: 0.58)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8323743343353271
Best over terms:
  Our final objective: 0.5800000000000001
    Its accruacy: 0.79
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5800000000000001
  Highest accruacy: 0.79
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

