Command:
python test_script.py -s linear_dependence -d 4 -n 100 --seed 73 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.38
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.39999999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:53 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:53 PM: Finished problem compilation (took 4.481e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9489e-01  +5.1230e+01  5.07e+01  8.59e-01  7.96e+00  1.00e+00  1.05e+00   ------   
  1  +5.9888e-01  +1.0121e+01  9.52e+00  2.94e-01  4.18e+00  4.07e-03  4.93e-01  6.72e-01  
  2  +5.1985e-01  +1.3481e+00  8.28e-01  4.92e-02  8.36e-01  1.02e-02  1.25e-01  9.90e-01  
  3  +5.0640e-01  +1.3699e+00  8.63e-01  3.11e-02  5.42e-01  1.47e-02  7.87e-02  4.24e-01  
  4  +4.5687e-01  +1.1269e+00  6.70e-01  1.45e-02  2.54e-01  1.33e-02  4.05e-02  6.16e-01  
  5  +3.9310e-01  +6.4694e-01  2.54e-01  5.64e-03  9.51e-02  1.92e-03  2.04e-02  6.35e-01  
  6  +3.5139e-01  +4.3227e-01  8.09e-02  1.78e-03  2.95e-02  3.69e-04  7.99e-03  7.96e-01  
  7  +3.3135e-01  +3.3547e-01  4.12e-03  8.98e-05  1.48e-03  1.32e-05  4.56e-04  9.90e-01  
  8  +3.3011e-01  +3.3015e-01  4.11e-05  8.97e-07  1.48e-05  1.31e-07  4.59e-06  9.90e-01  
  9  +3.3010e-01  +3.3010e-01  4.11e-07  8.97e-09  1.48e-07  1.31e-09  4.59e-08  9.90e-01  
 10  +3.3010e-01  +3.3010e-01  4.11e-09  8.97e-11  1.48e-09  1.31e-11  4.59e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 290.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:53 PM: Optimal value: 3.301e-01
(CVXPY) Sep 20 03:05:53 PM: Compilation took 4.481e-03 seconds
(CVXPY) Sep 20 03:05:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:53 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:53 PM: Finished problem compilation (took 2.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 464
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9218e-01  +5.1348e+01  5.09e+01  8.65e-01  8.25e+00  1.00e+00  1.05e+00   ------   
  1  +5.8081e-01  +1.0329e+01  9.75e+00  3.11e-01  4.32e+00  4.04e-03  5.11e-01  6.59e-01  
  2  +5.1076e-01  +1.6150e+00  1.10e+00  6.10e-02  1.06e+00  1.16e-02  1.51e-01  9.38e-01  
  3  +4.6446e-01  +1.4228e+00  9.58e-01  2.84e-02  5.07e-01  1.49e-02  7.51e-02  5.84e-01  
  4  +4.0565e-01  +7.9359e-01  3.88e-01  9.43e-03  1.67e-01  6.18e-03  2.81e-02  6.74e-01  
  5  +3.7993e-01  +6.8150e-01  3.02e-01  5.65e-03  1.00e-01  5.32e-03  1.74e-02  4.46e-01  
  6  +3.3391e-01  +4.3425e-01  1.00e-01  2.10e-03  3.62e-02  4.17e-05  7.52e-03  8.94e-01  
  7  +3.0551e-01  +3.2009e-01  1.46e-02  2.85e-04  4.89e-03  9.81e-06  1.14e-03  8.59e-01  
  8  +3.0097e-01  +3.0285e-01  1.88e-03  3.67e-05  6.28e-04  1.36e-06  1.52e-04  8.68e-01  
  9  +3.0055e-01  +3.0136e-01  8.06e-04  1.54e-05  2.69e-04  3.21e-06  6.34e-05  8.64e-01  
 10  +3.0024e-01  +3.0033e-01  8.89e-05  1.68e-06  2.95e-05  3.55e-07  6.95e-06  8.94e-01  
 11  +3.0020e-01  +3.0020e-01  9.67e-07  1.83e-08  3.21e-07  3.86e-09  7.58e-08  9.89e-01  
 12  +3.0020e-01  +3.0020e-01  9.67e-09  1.83e-10  3.21e-09  3.86e-11  7.58e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 363.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:53 PM: Optimal value: 3.002e-01
(CVXPY) Sep 20 03:05:53 PM: Compilation took 2.992e-03 seconds
(CVXPY) Sep 20 03:05:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.7
  Our objective: 0.4

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.38)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.1)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.246631145477295
Best over terms:
  Our final objective: 0.37999999999999995
    Its accruacy: 0.69
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.37999999999999995
  Highest accruacy: 0.69
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

