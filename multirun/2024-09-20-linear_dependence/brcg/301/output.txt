Command:
python test_script.py -s linear_dependence -d 8 -n 1000 --seed 56 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 8.

Computed total variation: 0.42800000000000005
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:15 PM: Your problem has 517 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:15 PM: Finished problem compilation (took 5.523e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 517
  constraints   = 1017
  nnz(P)        = 0
  nnz(A)        = 5517
  cones (total) = 1
    : Nonnegative = 1,  numel = 1017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9993e-01  +5.0091e+02  5.00e+02  9.55e-01  3.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.8378e-01  +1.0733e+02  1.07e+02  4.03e-01  2.16e+01  3.82e-03  5.62e-01  5.98e-01  
  2  +5.3312e-01  +1.2759e+01  1.22e+01  1.38e-01  9.38e+00  1.50e-02  2.59e-01  9.20e-01  
  3  +5.0554e-01  +3.0011e+00  2.50e+00  5.15e-02  3.39e+00  3.46e-05  2.28e-01  4.32e-01  
  4  +5.0065e-01  +8.3025e-01  3.30e-01  7.26e-03  5.00e-01  1.06e-05  7.14e-02  7.85e-01  
  5  +4.9867e-01  +8.2020e-01  3.22e-01  4.02e-03  2.83e-01  4.07e-05  1.36e-02  8.72e-01  
  6  +4.8819e-01  +7.4018e-01  2.52e-01  8.50e-04  6.03e-02  1.45e-04  2.51e-03  8.17e-01  
  7  +4.6867e-01  +6.0417e-01  1.36e-01  3.63e-04  2.55e-02  6.61e-05  1.18e-03  6.48e-01  
  8  +4.5057e-01  +5.0576e-01  5.52e-02  1.38e-04  9.65e-03  1.51e-05  5.04e-04  9.90e-01  
  9  +4.3633e-01  +4.4256e-01  6.23e-03  1.33e-05  9.32e-04  1.99e-06  5.61e-05  9.57e-01  
 10  +4.3413e-01  +4.3422e-01  9.09e-05  1.88e-07  1.31e-05  2.85e-08  8.25e-07  9.86e-01  
 11  +4.3410e-01  +4.3410e-01  9.09e-07  1.88e-09  1.31e-07  2.85e-10  8.25e-09  9.90e-01  
 12  +4.3410e-01  +4.3410e-01  9.09e-09  1.88e-11  1.31e-09  2.85e-12  8.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.7377ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:15 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:15 PM: Optimal value: 4.341e-01
(CVXPY) Sep 20 03:14:15 PM: Compilation took 5.523e-03 seconds
(CVXPY) Sep 20 03:14:15 PM: Solver (including time spent in interface) took 6.404e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:15 PM: Your problem has 527 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:15 PM: Finished problem compilation (took 4.863e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 527
  constraints   = 1027
  nnz(P)        = 0
  nnz(A)        = 6475
  cones (total) = 1
    : Nonnegative = 1,  numel = 1027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9997e-01  +5.0141e+02  5.01e+02  9.55e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.8317e-01  +1.0753e+02  1.07e+02  4.06e-01  2.24e+01  3.81e-03  5.67e-01  5.97e-01  
  2  +5.3208e-01  +1.2575e+01  1.20e+01  1.37e-01  9.56e+00  1.52e-02  2.59e-01  9.32e-01  
  3  +5.0516e-01  +2.9212e+00  2.42e+00  5.03e-02  3.43e+00  3.55e-05  2.23e-01  4.84e-01  
  4  +5.0076e-01  +8.8919e-01  3.88e-01  8.61e-03  6.12e-01  1.10e-05  7.38e-02  7.44e-01  
  5  +4.9846e-01  +8.8591e-01  3.87e-01  4.52e-03  3.29e-01  4.29e-05  1.46e-02  8.78e-01  
  6  +4.8664e-01  +7.7853e-01  2.92e-01  9.40e-04  6.92e-02  1.43e-04  2.70e-03  8.16e-01  
  7  +4.8070e-01  +7.3069e-01  2.50e-01  7.31e-04  5.37e-02  1.23e-04  2.11e-03  3.02e-01  
  8  +4.7819e-01  +6.9614e-01  2.18e-01  5.97e-04  4.38e-02  9.68e-05  1.72e-03  5.63e-01  
  9  +4.6633e-01  +6.3358e-01  1.67e-01  3.39e-04  2.48e-02  9.25e-05  9.82e-04  5.30e-01  
 10  +4.5488e-01  +5.7983e-01  1.25e-01  2.56e-04  1.87e-02  6.06e-05  7.68e-04  5.91e-01  
 11  +4.3219e-01  +4.9004e-01  5.78e-02  9.59e-05  6.97e-03  3.29e-05  2.97e-04  6.69e-01  
 12  +4.1237e-01  +4.1732e-01  4.94e-03  7.88e-06  5.70e-04  2.43e-06  2.60e-05  9.90e-01  
 13  +4.1016e-01  +4.1029e-01  1.28e-04  2.03e-07  1.47e-05  7.43e-08  6.79e-07  9.83e-01  
 14  +4.1010e-01  +4.1010e-01  1.28e-06  2.03e-09  1.47e-07  7.43e-10  6.80e-09  9.90e-01  
 15  +4.1010e-01  +4.1010e-01  1.28e-08  2.03e-11  1.47e-09  7.43e-12  6.80e-11  9.90e-01  
 16  +4.1010e-01  +4.1010e-01  1.28e-10  2.03e-13  1.47e-11  7.44e-14  6.80e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.9712ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:15 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:15 PM: Optimal value: 4.101e-01
(CVXPY) Sep 20 03:14:15 PM: Compilation took 4.863e-03 seconds
(CVXPY) Sep 20 03:14:15 PM: Solver (including time spent in interface) took 6.767e-03 seconds
Iteration: 2, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:16 PM: Your problem has 537 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Finished problem compilation (took 4.479e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 537
  constraints   = 1037
  nnz(P)        = 0
  nnz(A)        = 6918
  cones (total) = 1
    : Nonnegative = 1,  numel = 1037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9989e-01  +5.0131e+02  5.01e+02  9.56e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.8209e-01  +1.0759e+02  1.07e+02  4.08e-01  2.24e+01  3.81e-03  5.68e-01  5.96e-01  
  2  +5.3115e-01  +1.2388e+01  1.19e+01  1.35e-01  9.38e+00  1.54e-02  2.55e-01  9.43e-01  
  3  +5.0480e-01  +2.8452e+00  2.34e+00  4.90e-02  3.35e+00  3.63e-05  2.14e-01  5.37e-01  
  4  +5.0107e-01  +1.1171e+00  6.16e-01  1.36e-02  9.62e-01  1.47e-05  9.18e-02  6.17e-01  
  5  +4.9837e-01  +1.0405e+00  5.42e-01  6.89e-03  5.04e-01  4.27e-05  2.20e-02  8.53e-01  
  6  +4.8415e-01  +8.8761e-01  4.03e-01  1.41e-03  1.05e-01  1.40e-04  3.99e-03  8.25e-01  
  7  +4.7463e-01  +8.0172e-01  3.27e-01  9.56e-04  7.05e-02  1.25e-04  2.73e-03  4.55e-01  
  8  +4.6497e-01  +7.3934e-01  2.74e-01  6.09e-04  4.48e-02  1.30e-04  1.75e-03  6.19e-01  
  9  +4.5795e-01  +6.9724e-01  2.39e-01  5.47e-04  4.02e-02  1.07e-04  1.60e-03  2.57e-01  
 10  +4.3052e-01  +5.6906e-01  1.39e-01  2.57e-04  1.87e-02  6.72e-05  7.97e-04  6.07e-01  
 11  +3.9681e-01  +4.2135e-01  2.45e-02  4.41e-05  3.20e-03  7.44e-06  1.55e-04  8.72e-01  
 12  +3.8844e-01  +3.9125e-01  2.81e-03  5.01e-06  3.62e-04  8.66e-07  1.86e-05  8.90e-01  
 13  +3.8732e-01  +3.8737e-01  4.93e-05  8.75e-08  6.32e-06  2.17e-08  3.28e-07  9.90e-01  
 14  +3.8730e-01  +3.8730e-01  4.93e-07  8.75e-10  6.32e-08  2.17e-10  3.28e-09  9.90e-01  
 15  +3.8730e-01  +3.8730e-01  4.93e-09  8.75e-12  6.32e-10  2.17e-12  3.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.1499ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:16 PM: Optimal value: 3.873e-01
(CVXPY) Sep 20 03:14:16 PM: Compilation took 4.479e-03 seconds
(CVXPY) Sep 20 03:14:16 PM: Solver (including time spent in interface) took 7.518e-03 seconds
Iteration: 3, Objective: 0.3873
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:16 PM: Your problem has 547 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Finished problem compilation (took 3.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 547
  constraints   = 1047
  nnz(P)        = 0
  nnz(A)        = 7187
  cones (total) = 1
    : Nonnegative = 1,  numel = 1047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0204e+02  5.02e+02  9.56e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.7906e-01  +1.0789e+02  1.07e+02  4.11e-01  2.23e+01  3.80e-03  5.72e-01  5.95e-01  
  2  +5.2927e-01  +1.2062e+01  1.15e+01  1.31e-01  9.00e+00  1.60e-02  2.47e-01  9.69e-01  
  3  +5.0393e-01  +2.6742e+00  2.17e+00  4.55e-02  3.13e+00  3.88e-05  1.92e-01  6.72e-01  
  4  +5.0043e-01  +1.2334e+00  7.33e-01  1.53e-02  1.09e+00  2.50e-05  7.13e-02  6.79e-01  
  5  +4.8525e-01  +1.1913e+00  7.06e-01  3.20e-03  2.40e-01  1.61e-04  8.40e-03  9.38e-01  
  6  +4.6660e-01  +9.1719e-01  4.51e-01  1.59e-03  1.18e-01  1.19e-04  4.39e-03  5.56e-01  
  7  +4.4993e-01  +7.9789e-01  3.48e-01  8.68e-04  6.39e-02  1.27e-04  2.48e-03  5.67e-01  
  8  +4.4436e-01  +7.6622e-01  3.22e-01  7.24e-04  5.33e-02  1.36e-04  2.08e-03  4.05e-01  
  9  +4.1231e-01  +5.6068e-01  1.48e-01  3.12e-04  2.27e-02  6.23e-05  9.83e-04  8.63e-01  
 10  +3.9520e-01  +4.8373e-01  8.85e-02  1.76e-04  1.27e-02  3.98e-05  5.88e-04  5.68e-01  
 11  +3.7306e-01  +3.8737e-01  1.43e-02  2.68e-05  1.93e-03  7.62e-06  1.00e-04  9.90e-01  
 12  +3.6780e-01  +3.6855e-01  7.52e-04  1.39e-06  9.99e-05  3.82e-07  5.43e-06  9.49e-01  
 13  +3.6750e-01  +3.6751e-01  7.61e-06  1.41e-08  1.01e-06  3.86e-09  5.50e-08  9.90e-01  
 14  +3.6750e-01  +3.6750e-01  7.61e-08  1.41e-10  1.01e-08  3.86e-11  5.50e-10  9.90e-01  
 15  +3.6750e-01  +3.6750e-01  7.61e-10  1.41e-12  1.01e-10  3.86e-13  5.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.4615ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:16 PM: Optimal value: 3.675e-01
(CVXPY) Sep 20 03:14:16 PM: Compilation took 3.998e-03 seconds
(CVXPY) Sep 20 03:14:16 PM: Solver (including time spent in interface) took 7.269e-03 seconds
Iteration: 4, Objective: 0.3675
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:16 PM: Your problem has 557 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Finished problem compilation (took 3.625e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 557
  constraints   = 1057
  nnz(P)        = 0
  nnz(A)        = 7359
  cones (total) = 1
    : Nonnegative = 1,  numel = 1057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0204e+02  5.02e+02  9.56e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.7743e-01  +1.0790e+02  1.07e+02  4.12e-01  2.21e+01  3.81e-03  5.72e-01  5.95e-01  
  2  +5.2788e-01  +1.1781e+01  1.13e+01  1.27e-01  8.69e+00  1.62e-02  2.40e-01  9.87e-01  
  3  +5.0342e-01  +2.5582e+00  2.05e+00  4.31e-02  2.97e+00  4.12e-05  1.73e-01  7.69e-01  
  4  +4.9952e-01  +1.2938e+00  7.94e-01  1.49e-02  1.08e+00  3.60e-05  5.49e-02  7.30e-01  
  5  +4.7521e-01  +1.1979e+00  7.23e-01  2.49e-03  1.87e-01  2.32e-04  6.37e-03  9.16e-01  
  6  +4.4984e-01  +9.5340e-01  5.04e-01  1.37e-03  1.01e-01  1.84e-04  3.71e-03  5.11e-01  
  7  +4.3292e-01  +8.3370e-01  4.01e-01  9.96e-04  7.33e-02  1.52e-04  2.82e-03  3.54e-01  
  8  +3.9771e-01  +5.9725e-01  2.00e-01  4.64e-04  3.36e-02  8.85e-05  1.48e-03  9.90e-01  
  9  +3.7363e-01  +4.8023e-01  1.07e-01  2.31e-04  1.66e-02  4.69e-05  8.10e-04  6.47e-01  
 10  +3.5211e-01  +3.7911e-01  2.70e-02  5.66e-05  4.05e-03  1.10e-05  2.25e-04  7.87e-01  
 11  +3.4454e-01  +3.4675e-01  2.21e-03  4.56e-06  3.26e-04  8.83e-07  1.95e-05  9.40e-01  
 12  +3.4381e-01  +3.4383e-01  2.55e-05  5.26e-08  3.76e-06  1.02e-08  2.28e-07  9.90e-01  
 13  +3.4380e-01  +3.4380e-01  2.55e-07  5.25e-10  3.76e-08  1.02e-10  2.28e-09  9.90e-01  
 14  +3.4380e-01  +3.4380e-01  2.55e-09  5.25e-12  3.76e-10  1.02e-12  2.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.9803ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:16 PM: Optimal value: 3.438e-01
(CVXPY) Sep 20 03:14:16 PM: Compilation took 3.625e-03 seconds
(CVXPY) Sep 20 03:14:16 PM: Solver (including time spent in interface) took 7.016e-03 seconds
Iteration: 5, Objective: 0.3438
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:16 PM: Your problem has 567 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Finished problem compilation (took 5.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 567
  constraints   = 1067
  nnz(P)        = 0
  nnz(A)        = 7648
  cones (total) = 1
    : Nonnegative = 1,  numel = 1067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0196e+02  5.01e+02  9.56e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7680e-01  +1.0790e+02  1.07e+02  4.13e-01  2.20e+01  3.81e-03  5.71e-01  5.95e-01  
  2  +5.2729e-01  +1.1754e+01  1.12e+01  1.26e-01  8.57e+00  1.63e-02  2.39e-01  9.90e-01  
  3  +5.0383e-01  +2.5848e+00  2.08e+00  4.39e-02  3.04e+00  4.50e-05  1.61e-01  7.89e-01  
  4  +4.9929e-01  +1.2980e+00  7.99e-01  1.42e-02  1.03e+00  4.38e-05  4.72e-02  7.56e-01  
  5  +4.7453e-01  +1.1788e+00  7.04e-01  2.34e-03  1.77e-01  2.56e-04  5.94e-03  9.01e-01  
  6  +4.5130e-01  +1.0011e+00  5.50e-01  1.42e-03  1.06e-01  2.37e-04  3.74e-03  5.51e-01  
  7  +4.3074e-01  +8.5430e-01  4.24e-01  1.02e-03  7.57e-02  1.78e-04  2.84e-03  3.33e-01  
  8  +3.8701e-01  +5.6664e-01  1.80e-01  4.25e-04  3.09e-02  7.22e-05  1.36e-03  9.90e-01  
  9  +3.5763e-01  +4.2302e-01  6.54e-02  1.46e-04  1.06e-02  2.60e-05  5.29e-04  7.59e-01  
 10  +3.4113e-01  +3.5393e-01  1.28e-02  2.67e-05  1.98e-03  6.13e-06  1.11e-04  9.77e-01  
 11  +3.3713e-01  +3.3748e-01  3.52e-04  7.30e-07  5.43e-05  1.61e-07  3.17e-06  9.90e-01  
 12  +3.3700e-01  +3.3700e-01  3.52e-06  7.30e-09  5.43e-07  1.61e-09  3.17e-08  9.90e-01  
 13  +3.3700e-01  +3.3700e-01  3.52e-08  7.30e-11  5.43e-09  1.61e-11  3.17e-10  9.90e-01  
 14  +3.3700e-01  +3.3700e-01  3.52e-10  7.30e-13  5.43e-11  1.61e-13  3.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.4156ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:16 PM: Optimal value: 3.370e-01
(CVXPY) Sep 20 03:14:16 PM: Compilation took 5.010e-03 seconds
(CVXPY) Sep 20 03:14:16 PM: Solver (including time spent in interface) took 7.130e-03 seconds
Iteration: 6, Objective: 0.3370
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:16 PM: Your problem has 577 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Finished problem compilation (took 4.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 577
  constraints   = 1077
  nnz(P)        = 0
  nnz(A)        = 7820
  cones (total) = 1
    : Nonnegative = 1,  numel = 1077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0206e+02  5.02e+02  9.57e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7501e-01  +1.0806e+02  1.07e+02  4.15e-01  2.19e+01  3.81e-03  5.72e-01  5.94e-01  
  2  +5.2635e-01  +1.1894e+01  1.14e+01  1.26e-01  8.53e+00  1.65e-02  2.39e-01  9.90e-01  
  3  +5.0435e-01  +2.3601e+00  1.86e+00  3.95e-02  2.79e+00  5.15e-05  1.25e-01  8.85e-01  
  4  +4.9630e-01  +1.2558e+00  7.60e-01  7.67e-03  5.74e-01  1.15e-04  2.01e-02  9.31e-01  
  5  +4.7518e-01  +1.1037e+00  6.29e-01  2.19e-03  1.65e-01  2.95e-04  5.49e-03  7.38e-01  
  6  +4.4991e-01  +9.6969e-01  5.20e-01  1.38e-03  1.03e-01  2.71e-04  3.64e-03  5.03e-01  
  7  +3.9938e-01  +6.5930e-01  2.60e-01  6.29e-04  4.59e-02  9.55e-05  1.89e-03  6.31e-01  
  8  +3.6110e-01  +4.6128e-01  1.00e-01  2.38e-04  1.73e-02  3.11e-05  8.38e-04  6.27e-01  
  9  +3.5226e-01  +4.2147e-01  6.92e-02  1.62e-04  1.18e-02  2.45e-05  6.00e-04  4.66e-01  
 10  +3.4077e-01  +3.6922e-01  2.84e-02  6.50e-05  4.76e-03  1.08e-05  2.59e-04  6.61e-01  
 11  +3.3388e-01  +3.3879e-01  4.91e-03  1.08e-05  8.00e-04  2.08e-06  4.61e-05  8.89e-01  
 12  +3.3231e-01  +3.3264e-01  3.30e-04  7.09e-07  5.29e-05  1.40e-07  3.12e-06  9.55e-01  
 13  +3.3220e-01  +3.3220e-01  3.33e-06  7.14e-09  5.33e-07  1.41e-09  3.15e-08  9.90e-01  
 14  +3.3220e-01  +3.3220e-01  3.33e-08  7.15e-11  5.33e-09  1.41e-11  3.15e-10  9.90e-01  
 15  +3.3220e-01  +3.3220e-01  3.33e-10  7.15e-13  5.33e-11  1.41e-13  3.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.1884ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:16 PM: Optimal value: 3.322e-01
(CVXPY) Sep 20 03:14:16 PM: Compilation took 4.001e-03 seconds
(CVXPY) Sep 20 03:14:16 PM: Solver (including time spent in interface) took 7.998e-03 seconds
Iteration: 7, Objective: 0.3322
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:16 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 7960
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0213e+02  5.02e+02  9.57e-01  3.53e+01  1.00e+00  1.02e+00   ------   
  1  +5.7434e-01  +1.0807e+02  1.07e+02  4.16e-01  2.17e+01  3.81e-03  5.72e-01  5.94e-01  
  2  +5.2592e-01  +1.1950e+01  1.14e+01  1.26e-01  8.45e+00  1.66e-02  2.38e-01  9.90e-01  
  3  +5.0457e-01  +2.2410e+00  1.74e+00  3.66e-02  2.60e+00  5.43e-05  1.11e-01  9.14e-01  
  4  +4.9760e-01  +1.7308e+00  1.23e+00  1.02e-02  7.67e-01  1.56e-04  2.55e-02  8.64e-01  
  5  +4.7285e-01  +1.4204e+00  9.48e-01  2.68e-03  2.03e-01  3.61e-04  6.57e-03  7.52e-01  
  6  +4.4349e-01  +1.0953e+00  6.52e-01  1.64e-03  1.22e-01  2.51e-04  4.29e-03  4.65e-01  
  7  +4.0896e-01  +8.0436e-01  3.95e-01  9.72e-04  7.13e-02  1.38e-04  2.78e-03  4.57e-01  
  8  +3.6577e-01  +5.0758e-01  1.42e-01  3.47e-04  2.50e-02  4.53e-05  1.16e-03  7.28e-01  
  9  +3.5535e-01  +4.5331e-01  9.80e-02  2.35e-04  1.70e-02  3.34e-05  8.18e-04  3.67e-01  
 10  +3.4112e-01  +3.8035e-01  3.92e-02  9.14e-05  6.68e-03  1.43e-05  3.43e-04  6.46e-01  
 11  +3.3713e-01  +3.6137e-01  2.42e-02  5.55e-05  4.08e-03  9.43e-06  2.13e-04  5.05e-01  
 12  +3.3188e-01  +3.3740e-01  5.52e-03  1.25e-05  9.19e-04  2.14e-06  5.00e-05  7.96e-01  
 13  +3.3038e-01  +3.3063e-01  2.58e-04  5.82e-07  4.29e-05  9.85e-08  2.37e-06  9.55e-01  
 14  +3.3030e-01  +3.3030e-01  2.62e-06  5.92e-09  4.37e-07  1.00e-09  2.42e-08  9.90e-01  
 15  +3.3030e-01  +3.3030e-01  2.63e-08  5.93e-11  4.37e-09  1.00e-11  2.42e-10  9.90e-01  
 16  +3.3030e-01  +3.3030e-01  2.63e-10  5.93e-13  4.37e-11  1.00e-13  2.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4155ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:16 PM: Optimal value: 3.303e-01
(CVXPY) Sep 20 03:14:16 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 03:14:16 PM: Solver (including time spent in interface) took 1.000e-02 seconds
Iteration: 8, Objective: 0.3303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:16 PM: Your problem has 597 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Finished problem compilation (took 2.996e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 597
  constraints   = 1097
  nnz(P)        = 0
  nnz(A)        = 8077
  cones (total) = 1
    : Nonnegative = 1,  numel = 1097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0217e+02  5.02e+02  9.57e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.7260e-01  +1.0825e+02  1.08e+02  4.18e-01  2.16e+01  3.81e-03  5.73e-01  5.93e-01  
  2  +5.2501e-01  +1.2076e+01  1.16e+01  1.26e-01  8.41e+00  1.68e-02  2.39e-01  9.90e-01  
  3  +5.0489e-01  +2.0048e+00  1.50e+00  3.04e-02  2.20e+00  6.03e-05  8.64e-02  9.52e-01  
  4  +5.0327e-01  +2.1324e+00  1.63e+00  1.67e-02  1.25e+00  1.33e-04  4.05e-02  5.91e-01  
  5  +4.8798e-01  +1.8385e+00  1.35e+00  4.59e-03  3.49e-01  3.25e-04  1.09e-02  7.64e-01  
  6  +4.6754e-01  +1.4904e+00  1.02e+00  2.91e-03  2.19e-01  2.98e-04  7.19e-03  4.51e-01  
  7  +4.4386e-01  +1.1998e+00  7.56e-01  1.95e-03  1.45e-01  2.46e-04  5.08e-03  4.37e-01  
  8  +3.9588e-01  +7.3617e-01  3.40e-01  8.57e-04  6.21e-02  1.07e-04  2.55e-03  7.30e-01  
  9  +3.5862e-01  +5.0260e-01  1.44e-01  3.56e-04  2.54e-02  3.98e-05  1.22e-03  5.71e-01  
 10  +3.4986e-01  +4.5875e-01  1.09e-01  2.62e-04  1.87e-02  3.26e-05  9.41e-04  3.03e-01  
 11  +3.3069e-01  +3.6238e-01  3.17e-02  7.33e-05  5.25e-03  1.15e-05  2.98e-04  8.08e-01  
 12  +3.2768e-01  +3.4850e-01  2.08e-02  4.78e-05  3.42e-03  7.82e-06  2.00e-04  4.85e-01  
 13  +3.2257e-01  +3.2613e-01  3.56e-03  8.02e-06  5.75e-04  1.34e-06  3.55e-05  8.82e-01  
 14  +3.2153e-01  +3.2163e-01  9.89e-05  2.22e-07  1.59e-05  3.64e-08  1.00e-06  9.75e-01  
 15  +3.2150e-01  +3.2150e-01  9.90e-07  2.22e-09  1.59e-07  3.64e-10  1.00e-08  9.90e-01  
 16  +3.2150e-01  +3.2150e-01  9.90e-09  2.22e-11  1.59e-09  3.64e-12  1.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4848ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:16 PM: Optimal value: 3.215e-01
(CVXPY) Sep 20 03:14:16 PM: Compilation took 2.996e-03 seconds
(CVXPY) Sep 20 03:14:16 PM: Solver (including time spent in interface) took 1.019e-02 seconds
Iteration: 9, Objective: 0.3215
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:16 PM: Your problem has 607 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Finished problem compilation (took 4.013e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 607
  constraints   = 1107
  nnz(P)        = 0
  nnz(A)        = 8180
  cones (total) = 1
    : Nonnegative = 1,  numel = 1107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0219e+02  5.02e+02  9.57e-01  3.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.7165e-01  +1.0828e+02  1.08e+02  4.19e-01  2.15e+01  3.81e-03  5.74e-01  5.93e-01  
  2  +5.2440e-01  +1.2151e+01  1.16e+01  1.26e-01  8.33e+00  1.69e-02  2.39e-01  9.90e-01  
  3  +5.0503e-01  +1.8642e+00  1.36e+00  2.66e-02  1.93e+00  6.42e-05  7.36e-02  9.63e-01  
  4  +5.0469e-01  +1.9707e+00  1.47e+00  1.73e-02  1.29e+00  1.14e-04  4.24e-02  4.62e-01  
  5  +4.9644e-01  +2.1980e+00  1.70e+00  7.09e-03  5.37e-01  3.53e-04  1.66e-02  8.40e-01  
  6  +4.7761e-01  +1.6891e+00  1.21e+00  3.80e-03  2.86e-01  3.36e-04  9.23e-03  5.39e-01  
  7  +4.5544e-01  +1.3604e+00  9.05e-01  2.40e-03  1.78e-01  3.12e-04  6.09e-03  5.25e-01  
  8  +4.2446e-01  +1.0047e+00  5.80e-01  1.54e-03  1.12e-01  1.99e-04  4.23e-03  5.43e-01  
  9  +3.7705e-01  +6.2885e-01  2.52e-01  6.27e-04  4.48e-02  6.94e-05  1.98e-03  6.04e-01  
 10  +3.4505e-01  +4.4258e-01  9.75e-02  2.38e-04  1.68e-02  2.93e-05  8.69e-04  6.56e-01  
 11  +3.2992e-01  +3.6676e-01  3.68e-02  8.65e-05  6.08e-03  1.39e-05  3.49e-04  7.97e-01  
 12  +3.2551e-01  +3.4633e-01  2.08e-02  4.81e-05  3.39e-03  8.03e-06  2.02e-04  5.46e-01  
 13  +3.2029e-01  +3.2263e-01  2.34e-03  5.31e-06  3.74e-04  8.55e-07  2.37e-05  9.09e-01  
 14  +3.1962e-01  +3.1968e-01  5.91e-05  1.34e-07  9.45e-06  2.11e-08  6.08e-07  9.76e-01  
 15  +3.1960e-01  +3.1960e-01  5.91e-07  1.34e-09  9.45e-08  2.11e-10  6.08e-09  9.90e-01  
 16  +3.1960e-01  +3.1960e-01  5.91e-09  1.34e-11  9.45e-10  2.11e-12  6.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6857ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:16 PM: Optimal value: 3.196e-01
(CVXPY) Sep 20 03:14:16 PM: Compilation took 4.013e-03 seconds
(CVXPY) Sep 20 03:14:16 PM: Solver (including time spent in interface) took 8.969e-03 seconds
Iteration: 10, Objective: 0.3196
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:16 PM: Your problem has 617 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:16 PM: Finished problem compilation (took 4.966e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 617
  constraints   = 1117
  nnz(P)        = 0
  nnz(A)        = 8252
  cones (total) = 1
    : Nonnegative = 1,  numel = 1117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0207e+02  5.02e+02  9.57e-01  3.49e+01  1.00e+00  1.02e+00   ------   
  1  +5.7037e-01  +1.0837e+02  1.08e+02  4.20e-01  2.14e+01  3.81e-03  5.74e-01  5.92e-01  
  2  +5.2354e-01  +1.2244e+01  1.17e+01  1.26e-01  8.30e+00  1.71e-02  2.39e-01  9.90e-01  
  3  +5.0651e-01  +2.4578e+00  1.95e+00  3.48e-02  2.51e+00  1.26e-03  8.88e-02  8.13e-01  
  4  +5.0618e-01  +2.5044e+00  2.00e+00  2.59e-02  1.91e+00  1.73e-03  6.26e-02  3.24e-01  
  5  +5.0273e-01  +2.3444e+00  1.84e+00  2.29e-02  1.66e+00  1.12e-03  5.99e-02  2.64e-01  
  6  +4.8794e-01  +1.9328e+00  1.44e+00  4.87e-03  3.68e-01  3.33e-03  1.15e-02  8.21e-01  
  7  +4.6959e-01  +1.6518e+00  1.18e+00  3.25e-03  2.43e-01  2.74e-03  7.90e-03  3.90e-01  
  8  +4.5086e-01  +1.3742e+00  9.23e-01  2.40e-03  1.78e-01  1.59e-03  6.10e-03  3.90e-01  
  9  +4.1854e-01  +9.7832e-01  5.60e-01  1.52e-03  1.10e-01  2.59e-04  4.24e-03  6.97e-01  
 10  +3.6694e-01  +5.7155e-01  2.05e-01  5.09e-04  3.61e-02  6.40e-05  1.65e-03  6.72e-01  
 11  +3.4492e-01  +4.5700e-01  1.12e-01  2.69e-04  1.89e-02  4.05e-05  9.64e-04  5.54e-01  
 12  +3.2841e-01  +3.7257e-01  4.42e-02  1.05e-04  7.34e-03  1.73e-05  4.12e-04  7.10e-01  
 13  +3.2242e-01  +3.4351e-01  2.11e-02  4.95e-05  3.48e-03  8.37e-06  2.05e-04  5.78e-01  
 14  +3.1739e-01  +3.1980e-01  2.40e-03  5.60e-06  3.93e-04  9.07e-07  2.46e-05  8.98e-01  
 15  +3.1671e-01  +3.1675e-01  3.71e-05  8.63e-08  6.06e-06  1.37e-08  3.85e-07  9.90e-01  
 16  +3.1670e-01  +3.1670e-01  3.71e-07  8.63e-10  6.06e-08  1.37e-10  3.85e-09  9.90e-01  
 17  +3.1670e-01  +3.1670e-01  3.72e-09  8.64e-12  6.06e-10  1.37e-12  3.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.6153ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:16 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:16 PM: Optimal value: 3.167e-01
(CVXPY) Sep 20 03:14:16 PM: Compilation took 4.966e-03 seconds
(CVXPY) Sep 20 03:14:16 PM: Solver (including time spent in interface) took 1.390e-02 seconds
Iteration: 11, Objective: 0.3167
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:17 PM: Your problem has 625 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 625
  constraints   = 1125
  nnz(P)        = 0
  nnz(A)        = 8398
  cones (total) = 1
    : Nonnegative = 1,  numel = 1125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0204e+02  5.02e+02  9.58e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.7017e-01  +1.0836e+02  1.08e+02  4.21e-01  2.12e+01  3.81e-03  5.74e-01  5.92e-01  
  2  +5.2334e-01  +1.2254e+01  1.17e+01  1.26e-01  8.24e+00  1.71e-02  2.38e-01  9.90e-01  
  3  +5.0681e-01  +2.6131e+00  2.11e+00  3.66e-02  2.63e+00  1.58e-03  9.22e-02  7.82e-01  
  4  +5.0626e-01  +2.6227e+00  2.12e+00  2.71e-02  1.99e+00  2.11e-03  6.52e-02  3.20e-01  
  5  +5.0269e-01  +2.4362e+00  1.93e+00  2.38e-02  1.72e+00  1.32e-03  6.20e-02  2.80e-01  
  6  +4.8700e-01  +1.9394e+00  1.45e+00  4.85e-03  3.66e-01  3.85e-03  1.15e-02  8.28e-01  
  7  +4.6775e-01  +1.6730e+00  1.21e+00  3.19e-03  2.38e-01  3.31e-03  7.76e-03  4.00e-01  
  8  +4.4814e-01  +1.3775e+00  9.29e-01  2.38e-03  1.76e-01  1.88e-03  6.06e-03  3.66e-01  
  9  +4.1675e-01  +9.8461e-01  5.68e-01  1.53e-03  1.10e-01  3.54e-04  4.27e-03  6.49e-01  
 10  +3.6422e-01  +5.5862e-01  1.94e-01  4.85e-04  3.43e-02  7.11e-05  1.58e-03  6.98e-01  
 11  +3.4450e-01  +4.5933e-01  1.15e-01  2.75e-04  1.93e-02  4.67e-05  9.79e-04  5.29e-01  
 12  +3.2630e-01  +3.6822e-01  4.19e-02  9.83e-05  6.89e-03  1.77e-05  3.90e-04  7.38e-01  
 13  +3.2023e-01  +3.3957e-01  1.93e-02  4.48e-05  3.14e-03  8.19e-06  1.87e-04  6.02e-01  
 14  +3.1542e-01  +3.1752e-01  2.10e-03  4.82e-06  3.37e-04  8.33e-07  2.13e-05  9.01e-01  
 15  +3.1481e-01  +3.1484e-01  3.06e-05  7.02e-08  4.92e-06  1.17e-08  3.15e-07  9.90e-01  
 16  +3.1480e-01  +3.1480e-01  3.06e-07  7.02e-10  4.92e-08  1.17e-10  3.15e-09  9.90e-01  
 17  +3.1480e-01  +3.1480e-01  3.06e-09  7.02e-12  4.92e-10  1.17e-12  3.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.6317ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:17 PM: Optimal value: 3.148e-01
(CVXPY) Sep 20 03:14:17 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 03:14:17 PM: Solver (including time spent in interface) took 1.100e-02 seconds
Iteration: 12, Objective: 0.3148
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:17 PM: Your problem has 632 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 632
  constraints   = 1132
  nnz(P)        = 0
  nnz(A)        = 8461
  cones (total) = 1
    : Nonnegative = 1,  numel = 1132

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0204e+02  5.02e+02  9.58e-01  3.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.6995e-01  +1.0834e+02  1.08e+02  4.21e-01  2.11e+01  3.81e-03  5.73e-01  5.93e-01  
  2  +5.2313e-01  +1.2275e+01  1.18e+01  1.26e-01  8.16e+00  1.71e-02  2.38e-01  9.90e-01  
  3  +5.0702e-01  +2.7373e+00  2.23e+00  3.78e-02  2.70e+00  1.86e-03  9.38e-02  7.58e-01  
  4  +5.0634e-01  +2.7280e+00  2.22e+00  2.81e-02  2.05e+00  2.44e-03  6.71e-02  3.10e-01  
  5  +5.0272e-01  +2.5296e+00  2.03e+00  2.47e-02  1.77e+00  1.52e-03  6.37e-02  2.85e-01  
  6  +4.8617e-01  +1.9889e+00  1.50e+00  4.92e-03  3.70e-01  4.40e-03  1.17e-02  8.30e-01  
  7  +4.6748e-01  +1.6763e+00  1.21e+00  3.40e-03  2.53e-01  3.32e-03  8.32e-03  3.66e-01  
  8  +4.4699e-01  +1.3486e+00  9.02e-01  2.44e-03  1.79e-01  1.63e-03  6.28e-03  4.33e-01  
  9  +4.1940e-01  +1.0244e+00  6.05e-01  1.66e-03  1.20e-01  4.02e-04  4.63e-03  6.44e-01  
 10  +3.6859e-01  +6.0009e-01  2.31e-01  5.83e-04  4.12e-02  1.00e-04  1.87e-03  6.55e-01  
 11  +3.4335e-01  +4.6220e-01  1.19e-01  2.89e-04  2.02e-02  5.46e-05  1.04e-03  6.28e-01  
 12  +3.2768e-01  +3.8108e-01  5.34e-02  1.27e-04  8.85e-03  2.40e-05  4.98e-04  6.08e-01  
 13  +3.2036e-01  +3.4486e-01  2.45e-02  5.75e-05  4.02e-03  1.09e-05  2.39e-04  5.73e-01  
 14  +3.1480e-01  +3.1790e-01  3.09e-03  7.21e-06  5.04e-04  1.28e-06  3.20e-05  9.04e-01  
 15  +3.1393e-01  +3.1401e-01  8.46e-05  1.97e-07  1.37e-05  3.32e-08  8.90e-07  9.78e-01  
 16  +3.1390e-01  +3.1390e-01  8.49e-07  1.97e-09  1.38e-07  3.33e-10  8.93e-09  9.90e-01  
 17  +3.1390e-01  +3.1390e-01  8.49e-09  1.97e-11  1.38e-09  3.34e-12  8.94e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.2069ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:17 PM: Optimal value: 3.139e-01
(CVXPY) Sep 20 03:14:17 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:14:17 PM: Solver (including time spent in interface) took 1.624e-02 seconds
Iteration: 13, Objective: 0.3139
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:17 PM: Your problem has 642 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 642
  constraints   = 1142
  nnz(P)        = 0
  nnz(A)        = 8553
  cones (total) = 1
    : Nonnegative = 1,  numel = 1142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0187e+02  5.01e+02  9.58e-01  3.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.6852e-01  +1.0840e+02  1.08e+02  4.22e-01  2.10e+01  3.81e-03  5.74e-01  5.92e-01  
  2  +5.2249e-01  +1.2370e+01  1.18e+01  1.26e-01  8.10e+00  1.73e-02  2.38e-01  9.90e-01  
  3  +5.0754e-01  +3.0300e+00  2.52e+00  4.03e-02  2.87e+00  2.50e-03  9.74e-02  7.08e-01  
  4  +5.0656e-01  +2.9580e+00  2.45e+00  3.02e-02  2.19e+00  3.13e-03  7.14e-02  2.87e-01  
  5  +5.0277e-01  +2.7315e+00  2.23e+00  2.65e-02  1.90e+00  1.93e-03  6.71e-02  2.98e-01  
  6  +4.8594e-01  +2.0621e+00  1.58e+00  5.45e-03  4.08e-01  5.00e-03  1.29e-02  8.21e-01  
  7  +4.6702e-01  +1.7691e+00  1.30e+00  3.66e-03  2.72e-01  4.15e-03  8.92e-03  3.83e-01  
  8  +4.4760e-01  +1.4489e+00  1.00e+00  2.67e-03  1.96e-01  2.36e-03  6.82e-03  3.82e-01  
  9  +4.2074e-01  +1.1061e+00  6.85e-01  1.84e-03  1.33e-01  9.28e-04  5.05e-03  4.73e-01  
 10  +3.6603e-01  +5.9679e-01  2.31e-01  5.93e-04  4.16e-02  1.08e-04  1.91e-03  7.34e-01  
 11  +3.4500e-01  +4.8981e-01  1.45e-01  3.59e-04  2.50e-02  7.06e-05  1.28e-03  5.55e-01  
 12  +3.3275e-01  +4.2486e-01  9.21e-02  2.25e-04  1.56e-02  4.42e-05  8.59e-04  3.75e-01  
 13  +3.1962e-01  +3.5689e-01  3.73e-02  8.93e-05  6.20e-03  1.74e-05  3.74e-04  6.24e-01  
 14  +3.1215e-01  +3.1978e-01  7.63e-03  1.81e-05  1.25e-03  3.27e-06  8.18e-05  8.68e-01  
 15  +3.1010e-01  +3.1043e-01  3.27e-04  7.71e-07  5.35e-05  1.25e-07  3.63e-06  9.66e-01  
 16  +3.1000e-01  +3.1000e-01  3.47e-06  8.19e-09  5.68e-07  1.33e-09  3.87e-08  9.89e-01  
 17  +3.1000e-01  +3.1000e-01  3.48e-08  8.20e-11  5.68e-09  1.33e-11  3.87e-10  9.90e-01  
 18  +3.1000e-01  +3.1000e-01  3.49e-10  8.23e-13  5.71e-11  1.33e-13  3.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0939ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:17 PM: Optimal value: 3.100e-01
(CVXPY) Sep 20 03:14:17 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 03:14:17 PM: Solver (including time spent in interface) took 1.209e-02 seconds
Iteration: 14, Objective: 0.3100
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:17 PM: Your problem has 649 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 649
  constraints   = 1149
  nnz(P)        = 0
  nnz(A)        = 8620
  cones (total) = 1
    : Nonnegative = 1,  numel = 1149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0184e+02  5.01e+02  9.58e-01  3.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.6793e-01  +1.0845e+02  1.08e+02  4.23e-01  2.09e+01  3.82e-03  5.74e-01  5.92e-01  
  2  +5.2209e-01  +1.2382e+01  1.19e+01  1.26e-01  8.06e+00  1.73e-02  2.38e-01  9.90e-01  
  3  +5.0759e-01  +3.0916e+00  2.58e+00  4.04e-02  2.86e+00  2.70e-03  9.70e-02  6.97e-01  
  4  +5.0662e-01  +3.0195e+00  2.51e+00  3.08e-02  2.22e+00  3.31e-03  7.25e-02  2.70e-01  
  5  +5.0284e-01  +2.8001e+00  2.30e+00  2.71e-02  1.93e+00  2.09e-03  6.82e-02  2.94e-01  
  6  +4.8702e-01  +2.1315e+00  1.64e+00  6.13e-03  4.57e-01  4.94e-03  1.45e-02  8.01e-01  
  7  +4.6589e-01  +1.7798e+00  1.31e+00  3.88e-03  2.87e-01  3.91e-03  9.52e-03  4.35e-01  
  8  +4.4772e-01  +1.4405e+00  9.93e-01  2.81e-03  2.05e-01  1.90e-03  7.23e-03  4.41e-01  
  9  +4.2143e-01  +1.1090e+00  6.88e-01  1.93e-03  1.38e-01  6.96e-04  5.31e-03  5.28e-01  
 10  +3.6586e-01  +6.0291e-01  2.37e-01  6.13e-04  4.29e-02  9.18e-05  1.98e-03  7.59e-01  
 11  +3.4215e-01  +4.8150e-01  1.39e-01  3.48e-04  2.42e-02  6.12e-05  1.26e-03  6.23e-01  
 12  +3.3062e-01  +4.1914e-01  8.85e-02  2.18e-04  1.51e-02  3.86e-05  8.43e-04  3.77e-01  
 13  +3.1834e-01  +3.5462e-01  3.63e-02  8.78e-05  6.08e-03  1.56e-05  3.71e-04  6.15e-01  
 14  +3.1081e-01  +3.1675e-01  5.94e-03  1.42e-05  9.83e-04  2.36e-06  6.51e-05  9.07e-01  
 15  +3.0946e-01  +3.1071e-01  1.24e-03  2.96e-06  2.05e-04  4.87e-07  1.40e-05  8.23e-01  
 16  +3.0910e-01  +3.0912e-01  1.67e-05  3.96e-08  2.74e-06  6.39e-09  1.88e-07  9.87e-01  
 17  +3.0910e-01  +3.0910e-01  1.67e-07  3.96e-10  2.74e-08  6.39e-11  1.88e-09  9.90e-01  
 18  +3.0910e-01  +3.0910e-01  1.67e-09  3.97e-12  2.74e-10  6.41e-13  1.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.93ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:17 PM: Optimal value: 3.091e-01
(CVXPY) Sep 20 03:14:17 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:14:17 PM: Solver (including time spent in interface) took 2.450e-02 seconds
Iteration: 15, Objective: 0.3091
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:17 PM: Your problem has 655 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 655
  constraints   = 1155
  nnz(P)        = 0
  nnz(A)        = 8686
  cones (total) = 1
    : Nonnegative = 1,  numel = 1155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0184e+02  5.01e+02  9.58e-01  3.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.6783e-01  +1.0841e+02  1.08e+02  4.23e-01  2.08e+01  3.82e-03  5.74e-01  5.92e-01  
  2  +5.2201e-01  +1.2378e+01  1.19e+01  1.26e-01  7.99e+00  1.73e-02  2.37e-01  9.90e-01  
  3  +5.0756e-01  +3.0924e+00  2.58e+00  4.02e-02  2.83e+00  2.73e-03  9.64e-02  6.97e-01  
  4  +5.0662e-01  +3.0270e+00  2.52e+00  3.08e-02  2.21e+00  3.33e-03  7.25e-02  2.65e-01  
  5  +5.0286e-01  +2.8129e+00  2.31e+00  2.72e-02  1.93e+00  2.12e-03  6.82e-02  2.92e-01  
  6  +4.8734e-01  +2.1525e+00  1.67e+00  6.30e-03  4.69e-01  4.91e-03  1.50e-02  7.95e-01  
  7  +4.6517e-01  +1.7692e+00  1.30e+00  3.88e-03  2.86e-01  3.78e-03  9.56e-03  4.57e-01  
  8  +4.4790e-01  +1.4385e+00  9.91e-01  2.84e-03  2.07e-01  1.78e-03  7.32e-03  4.51e-01  
  9  +4.2139e-01  +1.1019e+00  6.81e-01  1.93e-03  1.38e-01  6.10e-04  5.33e-03  5.55e-01  
 10  +3.6645e-01  +6.1164e-01  2.45e-01  6.34e-04  4.43e-02  9.93e-05  2.04e-03  7.55e-01  
 11  +3.4363e-01  +4.9063e-01  1.47e-01  3.69e-04  2.56e-02  6.47e-05  1.32e-03  5.64e-01  
 12  +3.3250e-01  +4.3017e-01  9.77e-02  2.42e-04  1.67e-02  4.29e-05  9.21e-04  3.51e-01  
 13  +3.1733e-01  +3.4931e-01  3.20e-02  7.76e-05  5.36e-03  1.37e-05  3.29e-04  7.04e-01  
 14  +3.1106e-01  +3.1791e-01  6.85e-03  1.65e-05  1.14e-03  2.77e-06  7.48e-05  8.77e-01  
 15  +3.0958e-01  +3.1117e-01  1.58e-03  3.78e-06  2.61e-04  6.12e-07  1.77e-05  8.91e-01  
 16  +3.0912e-01  +3.0917e-01  5.54e-05  1.32e-07  9.12e-06  2.07e-08  6.29e-07  9.65e-01  
 17  +3.0910e-01  +3.0910e-01  5.61e-07  1.34e-09  9.24e-08  2.09e-10  6.38e-09  9.90e-01  
 18  +3.0910e-01  +3.0910e-01  5.62e-09  1.34e-11  9.25e-10  2.10e-12  6.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.454ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:17 PM: Optimal value: 3.091e-01
(CVXPY) Sep 20 03:14:17 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:14:17 PM: Solver (including time spent in interface) took 2.183e-02 seconds
Iteration: 16, Objective: 0.3091
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:17 PM: Your problem has 664 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 664
  constraints   = 1164
  nnz(P)        = 0
  nnz(A)        = 8778
  cones (total) = 1
    : Nonnegative = 1,  numel = 1164

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0181e+02  5.01e+02  9.58e-01  3.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.6698e-01  +1.0847e+02  1.08e+02  4.24e-01  2.07e+01  3.82e-03  5.73e-01  5.92e-01  
  2  +5.2150e-01  +1.2422e+01  1.19e+01  1.26e-01  7.94e+00  1.74e-02  2.37e-01  9.90e-01  
  3  +5.0752e-01  +3.1285e+00  2.62e+00  3.96e-02  2.78e+00  2.91e-03  9.42e-02  6.90e-01  
  4  +5.0664e-01  +3.0728e+00  2.57e+00  3.09e-02  2.21e+00  3.49e-03  7.25e-02  2.44e-01  
  5  +5.0285e-01  +2.8800e+00  2.38e+00  2.75e-02  1.95e+00  2.27e-03  6.83e-02  2.90e-01  
  6  +4.8699e-01  +2.2284e+00  1.74e+00  6.55e-03  4.86e-01  5.19e-03  1.55e-02  7.87e-01  
  7  +4.6375e-01  +1.8448e+00  1.38e+00  3.94e-03  2.90e-01  4.22e-03  9.66e-03  4.73e-01  
  8  +4.4326e-01  +1.4758e+00  1.03e+00  2.83e-03  2.06e-01  1.96e-03  7.26e-03  4.58e-01  
  9  +3.9830e-01  +9.0789e-01  5.10e-01  1.37e-03  9.68e-02  3.80e-04  3.94e-03  6.55e-01  
 10  +3.5293e-01  +5.5064e-01  1.98e-01  5.27e-04  3.64e-02  9.96e-05  1.80e-03  6.12e-01  
 11  +3.3472e-01  +4.5138e-01  1.17e-01  2.98e-04  2.05e-02  5.83e-05  1.12e-03  5.10e-01  
 12  +3.1746e-01  +3.5760e-01  4.01e-02  9.99e-05  6.86e-03  1.83e-05  4.20e-04  8.03e-01  
 13  +3.1189e-01  +3.2966e-01  1.78e-02  4.37e-05  3.01e-03  7.86e-06  1.94e-04  6.35e-01  
 14  +3.0830e-01  +3.1221e-01  3.91e-03  9.54e-06  6.56e-04  1.64e-06  4.46e-05  8.32e-01  
 15  +3.0729e-01  +3.0759e-01  3.04e-04  7.37e-07  5.07e-05  1.19e-07  3.54e-06  9.35e-01  
 16  +3.0720e-01  +3.0720e-01  3.61e-06  8.76e-09  6.02e-07  1.39e-09  4.22e-08  9.89e-01  
 17  +3.0720e-01  +3.0720e-01  3.62e-08  8.78e-11  6.03e-09  1.39e-11  4.23e-10  9.90e-01  
 18  +3.0720e-01  +3.0720e-01  3.65e-10  8.86e-13  6.09e-11  1.41e-13  4.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.7238ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:17 PM: Optimal value: 3.072e-01
(CVXPY) Sep 20 03:14:17 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:14:17 PM: Solver (including time spent in interface) took 1.928e-02 seconds
Iteration: 17, Objective: 0.3072
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:17 PM: Your problem has 670 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:17 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 670
  constraints   = 1170
  nnz(P)        = 0
  nnz(A)        = 8831
  cones (total) = 1
    : Nonnegative = 1,  numel = 1170

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0180e+02  5.01e+02  9.58e-01  3.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.6633e-01  +1.0852e+02  1.08e+02  4.24e-01  2.07e+01  3.82e-03  5.73e-01  5.92e-01  
  2  +5.2100e-01  +1.2456e+01  1.19e+01  1.26e-01  7.90e+00  1.74e-02  2.37e-01  9.90e-01  
  3  +5.0742e-01  +3.1352e+00  2.63e+00  3.87e-02  2.72e+00  3.03e-03  9.20e-02  6.88e-01  
  4  +5.0658e-01  +3.0824e+00  2.58e+00  3.07e-02  2.19e+00  3.58e-03  7.19e-02  2.28e-01  
  5  +5.0284e-01  +2.9165e+00  2.41e+00  2.74e-02  1.94e+00  2.39e-03  6.78e-02  2.91e-01  
  6  +4.8737e-01  +2.2777e+00  1.79e+00  6.92e-03  5.12e-01  5.22e-03  1.64e-02  7.70e-01  
  7  +4.6293e-01  +1.8272e+00  1.36e+00  4.07e-03  2.98e-01  3.88e-03  1.00e-02  4.97e-01  
  8  +4.4802e-01  +1.5672e+00  1.12e+00  3.20e-03  2.32e-01  2.32e-03  8.13e-03  3.65e-01  
  9  +4.0857e-01  +1.0070e+00  5.98e-01  1.68e-03  1.19e-01  2.85e-04  4.74e-03  7.27e-01  
 10  +3.5859e-01  +5.8484e-01  2.26e-01  6.10e-04  4.23e-02  7.23e-05  2.02e-03  6.62e-01  
 11  +3.3422e-01  +4.5129e-01  1.17e-01  3.02e-04  2.07e-02  4.57e-05  1.13e-03  6.92e-01  
 12  +3.1612e-01  +3.5058e-01  3.45e-02  8.69e-05  5.96e-03  1.39e-05  3.64e-04  8.65e-01  
 13  +3.1044e-01  +3.2206e-01  1.16e-02  2.89e-05  1.98e-03  4.59e-06  1.29e-04  8.13e-01  
 14  +3.0823e-01  +3.1175e-01  3.53e-03  8.66e-06  5.94e-04  1.36e-06  4.05e-05  7.73e-01  
 15  +3.0730e-01  +3.0764e-01  3.40e-04  8.27e-07  5.67e-05  1.25e-07  3.98e-06  9.18e-01  
 16  +3.0720e-01  +3.0721e-01  4.82e-06  1.17e-08  8.05e-07  1.76e-09  5.68e-08  9.86e-01  
 17  +3.0720e-01  +3.0720e-01  4.83e-08  1.18e-10  8.06e-09  1.76e-11  5.69e-10  9.90e-01  
 18  +3.0720e-01  +3.0720e-01  4.89e-10  1.19e-12  8.16e-11  1.79e-13  5.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6918ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:17 PM: Optimal value: 3.072e-01
(CVXPY) Sep 20 03:14:17 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:14:17 PM: Solver (including time spent in interface) took 1.784e-02 seconds
FULL MODEL:
  Accruacy: 0.655
  Our objective: 0.31000000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.03)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.198659420013428
Best over terms:
  Our final objective: 0.17999999999999997
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.17999999999999997
  Highest accruacy: 0.59
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

