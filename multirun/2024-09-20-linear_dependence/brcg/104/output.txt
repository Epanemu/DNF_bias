Command:
python test_script.py -s linear_dependence -d 3 -n 1000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29200000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 3.

Computed total variation: 0.292
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:57 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:57 PM: Finished problem compilation (took 6.680e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 3007
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0088e+02  5.00e+02  9.50e-01  2.43e+01  1.00e+00  1.00e+00   ------   
  1  +6.1947e-01  +9.3118e+01  9.25e+01  2.96e-01  1.25e+01  4.25e-03  4.37e-01  6.94e-01  
  2  +5.5377e-01  +1.5887e+01  1.53e+01  1.19e-01  5.98e+00  6.80e-03  2.14e-01  6.82e-01  
  3  +5.0154e-01  +1.7998e+00  1.30e+00  2.69e-02  1.28e+00  1.00e-03  2.02e-01  3.08e-01  
  4  +4.9976e-01  +7.9251e-01  2.93e-01  6.00e-03  2.95e-01  3.85e-04  4.54e-02  8.41e-01  
  5  +4.7442e-01  +9.7797e-01  5.04e-01  1.35e-03  6.84e-02  7.12e-03  3.92e-03  9.64e-01  
  6  +4.4658e-01  +6.7582e-01  2.29e-01  5.70e-04  2.86e-02  8.95e-04  1.89e-03  6.65e-01  
  7  +4.1588e-01  +5.0369e-01  8.78e-02  2.02e-04  1.00e-02  8.06e-06  8.06e-04  8.75e-01  
  8  +3.9747e-01  +4.1672e-01  1.92e-02  4.24e-05  2.11e-03  1.94e-06  1.90e-04  7.81e-01  
  9  +3.9354e-01  +3.9821e-01  4.66e-03  1.02e-05  5.06e-04  1.87e-06  4.68e-05  9.90e-01  
 10  +3.9211e-01  +3.9216e-01  4.71e-05  1.03e-07  5.11e-06  1.89e-08  4.79e-07  9.90e-01  
 11  +3.9210e-01  +3.9210e-01  4.71e-07  1.03e-09  5.11e-08  1.89e-10  4.79e-09  9.90e-01  
 12  +3.9210e-01  +3.9210e-01  4.71e-09  1.03e-11  5.11e-10  1.89e-12  4.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.48ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:57 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:57 PM: Optimal value: 3.921e-01
(CVXPY) Sep 20 03:04:57 PM: Compilation took 6.680e-03 seconds
(CVXPY) Sep 20 03:04:57 PM: Solver (including time spent in interface) took 6.461e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3921
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:57 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:57 PM: Finished problem compilation (took 3.839e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 3574
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9910e-01  +5.0157e+02  5.01e+02  9.50e-01  2.59e+01  1.00e+00  1.01e+00   ------   
  1  +6.1642e-01  +9.3730e+01  9.31e+01  2.99e-01  1.34e+01  4.24e-03  4.43e-01  6.91e-01  
  2  +5.5170e-01  +1.5464e+01  1.49e+01  1.16e-01  6.18e+00  7.12e-03  2.09e-01  7.05e-01  
  3  +5.0228e-01  +2.1831e+00  1.68e+00  3.44e-02  1.74e+00  1.47e-03  1.95e-01  3.03e-01  
  4  +4.9969e-01  +1.0847e+00  5.85e-01  1.15e-02  6.04e-01  8.68e-04  6.01e-02  7.68e-01  
  5  +4.7782e-01  +1.2831e+00  8.05e-01  2.92e-03  1.59e-01  7.48e-03  8.10e-03  9.10e-01  
  6  +4.6754e-01  +1.1387e+00  6.71e-01  2.00e-03  1.09e-01  6.68e-03  5.58e-03  3.51e-01  
  7  +4.6680e-01  +9.4072e-01  4.74e-01  1.35e-03  7.29e-02  7.21e-05  3.69e-03  9.03e-01  
  8  +4.5669e-01  +8.7365e-01  4.17e-01  9.26e-04  5.01e-02  1.05e-04  2.55e-03  4.53e-01  
  9  +4.3711e-01  +7.1246e-01  2.75e-01  6.70e-04  3.59e-02  1.37e-04  1.98e-03  9.24e-01  
 10  +4.1216e-01  +5.9822e-01  1.86e-01  3.66e-04  1.95e-02  1.04e-04  1.12e-03  4.45e-01  
 11  +3.9358e-01  +5.1546e-01  1.22e-01  2.28e-04  1.21e-02  7.28e-05  7.36e-04  9.90e-01  
 12  +3.6744e-01  +4.0776e-01  4.03e-02  7.23e-05  3.83e-03  2.07e-05  2.56e-04  6.72e-01  
 13  +3.5481e-01  +3.5679e-01  1.97e-03  3.52e-06  1.86e-04  8.19e-07  1.32e-05  9.52e-01  
 14  +3.5411e-01  +3.5413e-01  1.99e-05  3.55e-08  1.88e-06  8.30e-09  1.34e-07  9.90e-01  
 15  +3.5410e-01  +3.5410e-01  1.99e-07  3.55e-10  1.88e-08  8.30e-11  1.34e-09  9.90e-01  
 16  +3.5410e-01  +3.5410e-01  1.99e-09  3.55e-12  1.88e-10  8.30e-13  1.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3238ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:57 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:57 PM: Optimal value: 3.541e-01
(CVXPY) Sep 20 03:04:57 PM: Compilation took 3.839e-03 seconds
(CVXPY) Sep 20 03:04:57 PM: Solver (including time spent in interface) took 3.843e-03 seconds
FULL MODEL:
  Accruacy: 0.646
  Our objective: 0.29200000000000004

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.292)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9626777172088623
Best over terms:
  Our final objective: 0.29200000000000004
    Its accruacy: 0.646
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29200000000000004
  Highest accruacy: 0.646
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

