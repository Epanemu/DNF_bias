Command:
python test_script.py -s linear_dependence -d 3 -n 50000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29804
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 3.

Computed total variation: 0.29803999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:19 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:19 PM: Finished problem compilation (took 4.768e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 150007
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.77e+02  1.00e+00  1.00e+00   ------   
  1  +6.2016e-01  +4.6339e+03  4.63e+03  3.09e-01  9.24e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5597e-01  +7.9392e+02  7.93e+02  1.40e-01  5.00e+01  6.67e-03  2.21e-01  6.61e-01  
  3  +5.1044e-01  +1.4834e+02  1.48e+02  1.26e-01  4.47e+01  1.25e-05  2.20e-01  4.47e-02  
  4  +5.0006e-01  +1.8006e+00  1.30e+00  3.88e-03  1.37e+00  1.21e-06  1.62e-01  9.90e-01  
  5  +4.9999e-01  +7.8983e-01  2.90e-01  8.63e-04  3.06e-01  7.61e-07  3.40e-02  8.28e-01  
  6  +4.9752e-01  +1.2276e+00  7.30e-01  3.48e-04  1.26e-01  6.43e-05  9.74e-04  9.84e-01  
  7  +4.7795e-01  +1.0120e+00  5.34e-01  3.35e-05  1.21e-02  4.74e-04  8.98e-05  9.09e-01  
  8  +4.5555e-01  +7.6318e-01  3.08e-01  1.71e-05  6.13e-03  1.72e-04  4.99e-05  5.51e-01  
  9  +4.2079e-01  +5.0400e-01  8.32e-02  4.36e-06  1.55e-03  1.54e-06  1.51e-05  8.04e-01  
 10  +4.0243e-01  +4.0987e-01  7.44e-03  3.78e-07  1.35e-04  7.73e-08  1.47e-06  9.18e-01  
 11  +4.0013e-01  +4.0082e-01  6.90e-04  3.07e-08  1.09e-05  6.42e-09  1.38e-07  9.50e-01  
 12  +3.9994e-01  +3.9995e-01  6.98e-06  3.10e-10  1.10e-07  6.50e-11  1.39e-09  9.90e-01  
 13  +3.9994e-01  +3.9994e-01  6.98e-08  3.10e-12  1.10e-09  6.50e-13  1.39e-11  9.90e-01  
 14  +3.9994e-01  +3.9994e-01  6.99e-10  3.12e-14  1.11e-11  7.03e-15  1.50e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 196.2474ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:19 PM: Optimal value: 3.999e-01
(CVXPY) Sep 20 03:05:19 PM: Compilation took 4.768e-02 seconds
(CVXPY) Sep 20 03:05:19 PM: Solver (including time spent in interface) took 2.224e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3999
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:20 PM: Your problem has 25012 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:20 PM: Finished problem compilation (took 6.782e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25012
  constraints   = 50012
  nnz(P)        = 0
  nnz(A)        = 185102
  cones (total) = 1
    : Nonnegative = 1,  numel = 50012

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5003e+04  2.50e+04  9.93e-01  1.91e+02  1.00e+00  1.00e+00   ------   
  1  +6.2007e-01  +4.6358e+03  4.64e+03  3.09e-01  9.98e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5588e-01  +7.9298e+02  7.92e+02  1.40e-01  5.40e+01  6.68e-03  2.21e-01  6.62e-01  
  3  +5.1040e-01  +1.4793e+02  1.47e+02  1.26e-01  4.83e+01  1.25e-05  2.20e-01  4.53e-02  
  4  +5.0019e-01  +3.7813e+00  3.28e+00  9.76e-03  3.69e+00  1.45e-06  1.92e-01  4.72e-01  
  5  +5.0003e-01  +1.4830e+00  9.83e-01  2.93e-03  1.12e+00  9.08e-07  1.17e-01  5.56e-01  
  6  +5.0001e-01  +1.2313e+00  7.31e-01  2.17e-03  8.31e-01  1.04e-06  5.47e-02  5.89e-01  
  7  +4.9950e-01  +9.8034e-01  4.81e-01  7.55e-04  2.95e-01  1.08e-05  2.48e-03  9.82e-01  
  8  +4.9915e-01  +9.7894e-01  4.80e-01  5.13e-04  2.01e-01  1.75e-05  1.49e-03  4.15e-01  
  9  +4.9904e-01  +9.8347e-01  4.84e-01  3.71e-04  1.46e-01  1.92e-05  1.01e-03  5.93e-01  
 10  +4.9822e-01  +9.8055e-01  4.82e-01  1.96e-04  7.72e-02  3.33e-05  5.03e-04  6.24e-01  
 11  +4.9679e-01  +9.7315e-01  4.76e-01  1.14e-04  4.50e-02  5.60e-05  2.87e-04  4.39e-01  
 12  +4.9754e-01  +9.7797e-01  4.80e-01  9.02e-05  3.57e-02  3.35e-05  2.22e-04  7.64e-01  
 13  +4.9404e-01  +9.5998e-01  4.66e-01  4.24e-05  1.67e-02  6.71e-05  1.04e-04  5.42e-01  
 14  +4.8914e-01  +9.3535e-01  4.46e-01  2.78e-05  1.10e-02  8.56e-05  6.83e-05  4.11e-01  
 15  +4.7685e-01  +8.7428e-01  3.97e-01  1.79e-05  7.04e-03  2.17e-05  4.48e-05  9.90e-01  
 16  +4.3982e-01  +6.9946e-01  2.60e-01  9.49e-06  3.70e-03  1.25e-05  2.55e-05  5.31e-01  
 17  +3.8200e-01  +4.6056e-01  7.86e-02  2.96e-06  1.14e-03  1.00e-07  9.56e-06  7.51e-01  
 18  +3.5311e-01  +3.5754e-01  4.43e-03  1.61e-07  6.19e-05  1.19e-08  5.83e-07  9.52e-01  
 19  +3.5110e-01  +3.5115e-01  4.50e-05  1.64e-09  6.29e-07  1.20e-10  6.01e-09  9.90e-01  
 20  +3.5108e-01  +3.5108e-01  4.50e-07  1.64e-11  6.29e-09  1.20e-12  6.01e-11  9.90e-01  
 21  +3.5108e-01  +3.5108e-01  4.50e-09  1.64e-13  6.29e-11  1.22e-14  6.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 352.6529ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:20 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:20 PM: Optimal value: 3.511e-01
(CVXPY) Sep 20 03:05:20 PM: Compilation took 6.782e-02 seconds
(CVXPY) Sep 20 03:05:20 PM: Solver (including time spent in interface) took 3.734e-01 seconds
FULL MODEL:
  Accruacy: 0.64902
  Our objective: 0.29803999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.29804)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.7898168563842773
Best over terms:
  Our final objective: 0.29803999999999997
    Its accruacy: 0.64902
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29803999999999997
  Highest accruacy: 0.64902
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

