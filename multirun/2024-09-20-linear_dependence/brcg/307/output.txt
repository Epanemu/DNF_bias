Command:
python test_script.py -s linear_dependence -d 8 -n 5000 --seed 73 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.152
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 8.

Computed total variation: 0.244
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:47 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:47 PM: Finished problem compilation (took 1.054e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 27517
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3494e+02  5.34e+02  4.16e-01  4.97e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3466e-01  +6.3326e+01  6.28e+01  1.58e-01  2.42e+01  1.47e-02  2.65e-01  9.02e-01  
  3  +5.0890e-01  +1.6230e+01  1.57e+01  1.05e-01  1.58e+01  3.90e-05  2.51e-01  2.32e-01  
  4  +5.0045e-01  +1.0986e+00  5.98e-01  5.80e-03  9.04e-01  6.57e-06  1.03e-01  9.90e-01  
  5  +5.0011e-01  +6.8893e-01  1.89e-01  1.79e-03  2.80e-01  8.57e-06  2.36e-02  8.55e-01  
  6  +4.9937e-01  +8.2067e-01  3.21e-01  5.65e-04  8.98e-02  1.79e-04  1.68e-03  9.54e-01  
  7  +4.9625e-01  +7.7731e-01  2.81e-01  1.75e-04  2.78e-02  4.60e-04  5.04e-04  7.36e-01  
  8  +4.8414e-01  +6.3201e-01  1.48e-01  9.56e-05  1.51e-02  4.10e-06  2.98e-04  7.32e-01  
  9  +4.6651e-01  +5.3415e-01  6.76e-02  3.47e-05  5.47e-03  4.75e-06  1.19e-04  9.90e-01  
 10  +4.4881e-01  +4.5856e-01  9.75e-03  4.20e-06  6.61e-04  4.60e-07  1.70e-05  9.09e-01  
 11  +4.4542e-01  +4.4577e-01  3.47e-04  1.44e-07  2.26e-05  1.63e-08  6.10e-07  9.67e-01  
 12  +4.4530e-01  +4.4530e-01  3.47e-06  1.44e-09  2.26e-07  1.64e-10  6.11e-09  9.90e-01  
 13  +4.4530e-01  +4.4530e-01  3.47e-08  1.44e-11  2.26e-09  1.65e-12  6.16e-11  9.90e-01  
 14  +4.4530e-01  +4.4530e-01  3.47e-10  1.44e-13  2.26e-11  1.67e-14  6.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.4179ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:47 PM: Optimal value: 4.453e-01
(CVXPY) Sep 20 03:14:47 PM: Compilation took 1.054e-02 seconds
(CVXPY) Sep 20 03:14:47 PM: Solver (including time spent in interface) took 3.021e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4453
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:47 PM: Your problem has 2527 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:47 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:47 PM: Finished problem compilation (took 9.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2527
  constraints   = 5027
  nnz(P)        = 0
  nnz(A)        = 31917
  cones (total) = 1
    : Nonnegative = 1,  numel = 5027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8401e-01  +5.3517e+02  5.35e+02  4.16e-01  5.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3438e-01  +6.3080e+01  6.25e+01  1.58e-01  2.50e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0878e-01  +1.6098e+01  1.56e+01  1.05e-01  1.62e+01  3.91e-05  2.50e-01  2.40e-01  
  4  +5.0044e-01  +1.1115e+00  6.11e-01  5.95e-03  9.60e-01  6.88e-06  1.00e-01  9.90e-01  
  5  +5.0018e-01  +7.8368e-01  2.83e-01  2.72e-03  4.41e-01  6.41e-06  4.07e-02  6.30e-01  
  6  +5.0013e-01  +7.9667e-01  2.97e-01  2.55e-03  4.16e-01  1.50e-05  1.44e-02  7.02e-01  
  7  +4.9886e-01  +7.8181e-01  2.83e-01  3.71e-04  6.13e-02  1.71e-04  1.04e-03  9.29e-01  
  8  +4.9550e-01  +7.4790e-01  2.52e-01  1.60e-04  2.64e-02  3.16e-04  4.43e-04  6.14e-01  
  9  +4.9560e-01  +7.4790e-01  2.52e-01  1.60e-04  2.65e-02  3.11e-04  4.42e-04  1.30e-02  
 10  +4.9419e-01  +7.3200e-01  2.38e-01  1.45e-04  2.39e-02  2.69e-04  3.98e-04  1.89e-01  
 11  +4.9019e-01  +6.9981e-01  2.10e-01  1.08e-04  1.78e-02  2.18e-04  2.99e-04  3.95e-01  
 12  +4.8600e-01  +6.7263e-01  1.87e-01  8.61e-05  1.42e-02  1.59e-04  2.40e-04  3.79e-01  
 13  +4.7969e-01  +6.4006e-01  1.60e-01  6.84e-05  1.12e-02  1.14e-04  1.92e-04  3.33e-01  
 14  +4.7142e-01  +6.0133e-01  1.30e-01  5.15e-05  8.46e-03  7.16e-05  1.48e-04  3.94e-01  
 15  +4.6510e-01  +5.6720e-01  1.02e-01  4.02e-05  6.59e-03  7.05e-07  1.18e-04  9.57e-01  
 16  +4.5992e-01  +5.4875e-01  8.88e-02  3.32e-05  5.44e-03  1.47e-06  9.81e-05  2.29e-01  
 17  +4.4628e-01  +5.0030e-01  5.40e-02  1.82e-05  2.98e-03  4.71e-06  5.51e-05  7.52e-01  
 18  +4.2708e-01  +4.3361e-01  6.53e-03  2.06e-06  3.37e-04  7.83e-07  6.56e-06  9.90e-01  
 19  +4.2413e-01  +4.2420e-01  6.99e-05  2.20e-08  3.59e-06  7.79e-09  7.06e-08  9.90e-01  
 20  +4.2410e-01  +4.2410e-01  6.99e-07  2.20e-10  3.59e-08  7.79e-11  7.06e-10  9.90e-01  
 21  +4.2410e-01  +4.2410e-01  6.99e-09  2.20e-12  3.59e-10  7.81e-13  7.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 44.1056ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:47 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:47 PM: Optimal value: 4.241e-01
(CVXPY) Sep 20 03:14:47 PM: Compilation took 9.008e-03 seconds
(CVXPY) Sep 20 03:14:47 PM: Solver (including time spent in interface) took 4.751e-02 seconds
Iteration: 2, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:48 PM: Your problem has 2537 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Finished problem compilation (took 1.062e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2537
  constraints   = 5037
  nnz(P)        = 0
  nnz(A)        = 32518
  cones (total) = 1
    : Nonnegative = 1,  numel = 5037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8374e-01  +5.3527e+02  5.35e+02  4.17e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3415e-01  +6.2842e+01  6.23e+01  1.58e-01  2.49e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0871e-01  +1.6029e+01  1.55e+01  1.04e-01  1.62e+01  3.93e-05  2.49e-01  2.46e-01  
  4  +5.0072e-01  +1.6204e+00  1.12e+00  1.09e-02  1.74e+00  8.09e-06  1.37e-01  7.35e-01  
  5  +5.0018e-01  +9.1335e-01  4.13e-01  3.95e-03  6.38e-01  6.58e-06  6.35e-02  6.31e-01  
  6  +5.0012e-01  +9.2266e-01  4.23e-01  3.92e-03  6.36e-01  9.91e-06  3.49e-02  5.31e-01  
  7  +4.9901e-01  +8.4531e-01  3.46e-01  1.25e-03  2.05e-01  5.43e-05  3.92e-03  9.08e-01  
  8  +4.9406e-01  +7.9444e-01  3.00e-01  2.91e-04  4.80e-02  2.04e-04  8.26e-04  7.90e-01  
  9  +4.8906e-01  +7.3578e-01  2.47e-01  1.89e-04  3.11e-02  1.64e-04  5.38e-04  4.88e-01  
 10  +4.8929e-01  +7.3759e-01  2.48e-01  1.89e-04  3.12e-02  1.64e-04  5.37e-04  1.25e-02  
 11  +4.9097e-01  +7.5038e-01  2.59e-01  1.76e-04  2.91e-02  1.49e-04  4.89e-04  2.99e-01  
 12  +4.9029e-01  +7.3442e-01  2.44e-01  1.61e-04  2.66e-02  9.54e-05  4.45e-04  3.86e-01  
 13  +4.8560e-01  +7.0849e-01  2.23e-01  1.17e-04  1.93e-02  9.92e-05  3.25e-04  3.17e-01  
 14  +4.8177e-01  +6.8144e-01  2.00e-01  9.60e-05  1.58e-02  5.61e-05  2.68e-04  5.21e-01  
 15  +4.7973e-01  +6.7090e-01  1.91e-01  9.09e-05  1.50e-02  4.61e-05  2.55e-04  2.10e-01  
 16  +4.5991e-01  +5.8751e-01  1.28e-01  4.69e-05  7.70e-03  2.76e-05  1.37e-04  6.48e-01  
 17  +4.3750e-01  +4.9813e-01  6.06e-02  2.12e-05  3.47e-03  9.65e-06  6.61e-05  6.13e-01  
 18  +4.2578e-01  +4.5332e-01  2.75e-02  9.27e-06  1.51e-03  3.91e-06  2.99e-05  8.78e-01  
 19  +4.2302e-01  +4.4268e-01  1.97e-02  6.48e-06  1.06e-03  3.02e-06  2.11e-05  8.98e-01  
 20  +4.1557e-01  +4.1777e-01  2.20e-03  7.30e-07  1.19e-04  3.29e-07  2.45e-06  8.89e-01  
 21  +4.1461e-01  +4.1464e-01  2.50e-05  8.27e-09  1.35e-06  3.67e-09  2.80e-08  9.89e-01  
 22  +4.1460e-01  +4.1460e-01  2.50e-07  8.27e-11  1.35e-08  3.67e-11  2.80e-10  9.90e-01  
 23  +4.1460e-01  +4.1460e-01  2.50e-09  8.27e-13  1.35e-10  3.68e-13  2.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.5607ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:48 PM: Optimal value: 4.146e-01
(CVXPY) Sep 20 03:14:48 PM: Compilation took 1.062e-02 seconds
(CVXPY) Sep 20 03:14:48 PM: Solver (including time spent in interface) took 4.977e-02 seconds
Iteration: 3, Objective: 0.4146
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:48 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Finished problem compilation (took 1.210e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 32941
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8346e-01  +5.3544e+02  5.35e+02  4.17e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3394e-01  +6.2654e+01  6.21e+01  1.57e-01  2.48e+01  1.49e-02  2.63e-01  9.10e-01  
  3  +5.0867e-01  +1.5981e+01  1.55e+01  1.04e-01  1.61e+01  3.95e-05  2.48e-01  2.51e-01  
  4  +5.0078e-01  +1.7314e+00  1.23e+00  1.20e-02  1.91e+00  8.41e-06  1.41e-01  6.99e-01  
  5  +5.0020e-01  +9.7990e-01  4.80e-01  4.58e-03  7.40e-01  7.39e-06  6.73e-02  6.39e-01  
  6  +5.0014e-01  +1.0032e+00  5.03e-01  4.68e-03  7.57e-01  1.03e-05  4.09e-02  4.96e-01  
  7  +4.9879e-01  +8.8055e-01  3.82e-01  1.32e-03  2.17e-01  5.79e-05  4.09e-03  9.16e-01  
  8  +4.9341e-01  +8.2066e-01  3.27e-01  3.28e-04  5.43e-02  1.98e-04  9.29e-04  7.74e-01  
  9  +4.8615e-01  +7.3842e-01  2.52e-01  1.84e-04  3.03e-02  1.53e-04  5.22e-04  6.02e-01  
 10  +4.8872e-01  +7.6447e-01  2.76e-01  1.71e-04  2.83e-02  1.60e-04  4.72e-04  2.77e-01  
 11  +4.8762e-01  +7.5351e-01  2.66e-01  1.59e-04  2.63e-02  1.28e-04  4.38e-04  2.48e-01  
 12  +4.8126e-01  +7.2077e-01  2.40e-01  1.16e-04  1.91e-02  1.25e-04  3.23e-04  3.30e-01  
 13  +4.7576e-01  +6.9221e-01  2.16e-01  9.85e-05  1.62e-02  9.87e-05  2.78e-04  2.55e-01  
 14  +4.5934e-01  +6.0677e-01  1.47e-01  6.18e-05  1.01e-02  2.51e-06  1.83e-04  9.38e-01  
 15  +4.3715e-01  +5.1767e-01  8.05e-02  3.00e-05  4.90e-03  2.42e-06  9.42e-05  5.54e-01  
 16  +4.3207e-01  +4.9819e-01  6.61e-02  2.40e-05  3.92e-03  2.90e-06  7.66e-05  2.93e-01  
 17  +4.1747e-01  +4.4208e-01  2.46e-02  8.48e-06  1.38e-03  3.18e-06  2.84e-05  9.71e-01  
 18  +4.1157e-01  +4.2093e-01  9.36e-03  3.19e-06  5.20e-04  1.35e-06  1.09e-05  9.90e-01  
 19  +4.0786e-01  +4.0846e-01  6.03e-04  2.06e-07  3.36e-05  8.56e-08  7.18e-07  9.43e-01  
 20  +4.0760e-01  +4.0761e-01  6.09e-06  2.08e-09  3.39e-07  8.64e-10  7.27e-09  9.90e-01  
 21  +4.0760e-01  +4.0760e-01  6.09e-08  2.08e-11  3.39e-09  8.64e-12  7.27e-11  9.90e-01  
 22  +4.0760e-01  +4.0760e-01  6.09e-10  2.08e-13  3.40e-11  8.64e-14  7.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.4876ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:48 PM: Optimal value: 4.076e-01
(CVXPY) Sep 20 03:14:48 PM: Compilation took 1.210e-02 seconds
(CVXPY) Sep 20 03:14:48 PM: Solver (including time spent in interface) took 4.838e-02 seconds
Iteration: 4, Objective: 0.4076
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:48 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Finished problem compilation (took 1.271e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 33715
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8325e-01  +5.3560e+02  5.35e+02  4.18e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3381e-01  +6.2534e+01  6.20e+01  1.57e-01  2.47e+01  1.49e-02  2.63e-01  9.12e-01  
  3  +5.0864e-01  +1.5953e+01  1.54e+01  1.04e-01  1.60e+01  3.96e-05  2.47e-01  2.54e-01  
  4  +5.0075e-01  +1.6697e+00  1.17e+00  1.14e-02  1.82e+00  8.31e-06  1.37e-01  7.25e-01  
  5  +5.0015e-01  +9.1698e-01  4.17e-01  3.98e-03  6.43e-01  7.77e-06  5.52e-02  7.28e-01  
  6  +5.0004e-01  +9.5470e-01  4.55e-01  4.07e-03  6.59e-01  1.38e-05  2.72e-02  6.06e-01  
  7  +4.9596e-01  +8.8029e-01  3.84e-01  5.31e-04  8.80e-02  1.72e-04  1.50e-03  9.52e-01  
  8  +4.8713e-01  +7.8879e-01  3.02e-01  2.02e-04  3.34e-02  2.79e-04  5.65e-04  6.64e-01  
  9  +4.8780e-01  +7.9976e-01  3.12e-01  1.77e-04  2.94e-02  2.73e-04  4.86e-04  3.07e-01  
 10  +4.8361e-01  +7.5241e-01  2.69e-01  1.49e-04  2.47e-02  1.21e-04  4.15e-04  5.05e-01  
 11  +4.6776e-01  +6.6185e-01  1.94e-01  8.37e-05  1.38e-02  2.02e-05  2.41e-04  9.71e-01  
 12  +4.5650e-01  +6.1770e-01  1.61e-01  6.86e-05  1.13e-02  1.57e-05  2.06e-04  5.46e-01  
 13  +4.3639e-01  +5.2951e-01  9.31e-02  3.69e-05  6.04e-03  8.33e-06  1.18e-04  4.97e-01  
 14  +4.1415e-01  +4.4309e-01  2.89e-02  1.06e-05  1.73e-03  2.36e-06  3.64e-05  7.29e-01  
 15  +4.1207e-01  +4.3514e-01  2.31e-02  8.35e-06  1.36e-03  2.04e-06  2.89e-05  3.11e-01  
 16  +4.0604e-01  +4.1242e-01  6.37e-03  2.28e-06  3.71e-04  7.48e-07  8.11e-06  9.13e-01  
 17  +4.0358e-01  +4.0376e-01  1.87e-04  6.67e-08  1.09e-05  2.25e-08  2.41e-07  9.83e-01  
 18  +4.0350e-01  +4.0350e-01  1.87e-06  6.67e-10  1.09e-07  2.25e-10  2.41e-09  9.90e-01  
 19  +4.0350e-01  +4.0350e-01  1.87e-08  6.67e-12  1.09e-09  2.25e-12  2.41e-11  9.90e-01  
 20  +4.0350e-01  +4.0350e-01  1.87e-10  6.68e-14  1.09e-11  2.25e-14  2.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.6425ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:48 PM: Optimal value: 4.035e-01
(CVXPY) Sep 20 03:14:48 PM: Compilation took 1.271e-02 seconds
(CVXPY) Sep 20 03:14:48 PM: Solver (including time spent in interface) took 4.652e-02 seconds
Iteration: 5, Objective: 0.4035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:48 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Finished problem compilation (took 1.219e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 34368
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8303e-01  +5.3572e+02  5.35e+02  4.18e-01  5.14e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3357e-01  +6.2285e+01  6.18e+01  1.57e-01  2.45e+01  1.50e-02  2.62e-01  9.15e-01  
  3  +5.0858e-01  +1.5882e+01  1.54e+01  1.03e-01  1.60e+01  3.98e-05  2.46e-01  2.59e-01  
  4  +5.0074e-01  +1.6717e+00  1.17e+00  1.14e-02  1.82e+00  8.41e-06  1.34e-01  7.29e-01  
  5  +5.0025e-01  +1.0627e+00  5.62e-01  5.39e-03  8.69e-01  8.52e-06  6.53e-02  6.17e-01  
  6  +4.9993e-01  +1.1358e+00  6.36e-01  4.63e-03  7.56e-01  2.40e-05  1.93e-02  8.11e-01  
  7  +4.9411e-01  +1.0059e+00  5.12e-01  4.85e-04  8.05e-02  2.30e-04  1.36e-03  9.32e-01  
  8  +4.9458e-01  +9.5966e-01  4.65e-01  4.30e-04  7.15e-02  1.48e-04  1.18e-03  3.82e-01  
  9  +4.9207e-01  +9.2331e-01  4.31e-01  3.41e-04  5.66e-02  1.47e-04  9.34e-04  2.65e-01  
 10  +4.8700e-01  +8.3474e-01  3.48e-01  2.06e-04  3.42e-02  9.65e-05  5.66e-04  6.90e-01  
 11  +4.8418e-01  +8.0971e-01  3.26e-01  2.02e-04  3.34e-02  7.86e-05  5.63e-04  8.46e-02  
 12  +4.6605e-01  +6.9570e-01  2.30e-01  1.00e-04  1.65e-02  5.28e-05  2.88e-04  7.06e-01  
 13  +4.6313e-01  +6.8296e-01  2.20e-01  9.61e-05  1.58e-02  4.31e-05  2.79e-04  2.17e-01  
 14  +4.5699e-01  +6.5134e-01  1.94e-01  8.54e-05  1.40e-02  2.77e-05  2.54e-04  4.64e-01  
 15  +4.4010e-01  +5.7383e-01  1.34e-01  5.53e-05  9.04e-03  1.73e-05  1.73e-04  3.61e-01  
 16  +4.1128e-01  +4.4760e-01  3.63e-02  1.38e-05  2.25e-03  2.96e-06  4.82e-05  9.42e-01  
 17  +4.1050e-01  +4.4488e-01  3.44e-02  1.30e-05  2.11e-03  2.89e-06  4.51e-05  1.08e-01  
 18  +4.0860e-01  +4.3773e-01  2.91e-02  1.09e-05  1.77e-03  2.72e-06  3.82e-05  3.38e-01  
 19  +4.0094e-01  +4.0924e-01  8.31e-03  3.06e-06  4.98e-04  1.02e-06  1.12e-05  9.90e-01  
 20  +3.9792e-01  +3.9849e-01  5.67e-04  2.08e-07  3.38e-05  6.89e-08  7.77e-07  9.39e-01  
 21  +3.9770e-01  +3.9771e-01  5.71e-06  2.10e-09  3.41e-07  6.95e-10  7.84e-09  9.90e-01  
 22  +3.9770e-01  +3.9770e-01  5.71e-08  2.10e-11  3.41e-09  6.95e-12  7.84e-11  9.90e-01  
 23  +3.9770e-01  +3.9770e-01  5.71e-10  2.10e-13  3.41e-11  6.95e-14  7.85e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.1136ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:48 PM: Optimal value: 3.977e-01
(CVXPY) Sep 20 03:14:48 PM: Compilation took 1.219e-02 seconds
(CVXPY) Sep 20 03:14:48 PM: Solver (including time spent in interface) took 5.225e-02 seconds
Iteration: 6, Objective: 0.3977
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:48 PM: Your problem has 2577 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Finished problem compilation (took 1.155e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2577
  constraints   = 5077
  nnz(P)        = 0
  nnz(A)        = 34679
  cones (total) = 1
    : Nonnegative = 1,  numel = 5077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8294e-01  +5.3570e+02  5.35e+02  4.18e-01  5.13e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3349e-01  +6.2200e+01  6.17e+01  1.57e-01  2.44e+01  1.50e-02  2.62e-01  9.15e-01  
  3  +5.0856e-01  +1.5858e+01  1.53e+01  1.03e-01  1.59e+01  3.99e-05  2.46e-01  2.61e-01  
  4  +5.0071e-01  +1.6042e+00  1.10e+00  1.08e-02  1.72e+00  8.27e-06  1.30e-01  7.56e-01  
  5  +5.0027e-01  +1.0688e+00  5.69e-01  5.46e-03  8.80e-01  8.57e-06  6.34e-02  5.83e-01  
  6  +4.9999e-01  +1.1538e+00  6.54e-01  4.76e-03  7.77e-01  2.38e-05  1.95e-02  7.98e-01  
  7  +4.9476e-01  +1.0363e+00  5.42e-01  5.26e-04  8.74e-02  2.21e-04  1.46e-03  9.28e-01  
  8  +4.9499e-01  +9.5855e-01  4.64e-01  4.37e-04  7.25e-02  1.14e-04  1.19e-03  5.09e-01  
  9  +4.8981e-01  +8.4762e-01  3.58e-01  2.39e-04  3.96e-02  7.82e-05  6.52e-04  7.74e-01  
 10  +4.8772e-01  +8.3676e-01  3.49e-01  2.01e-04  3.32e-02  7.86e-05  5.48e-04  2.72e-01  
 11  +4.7975e-01  +7.6786e-01  2.88e-01  1.62e-04  2.67e-02  3.29e-05  4.54e-04  6.59e-01  
 12  +4.6396e-01  +6.8415e-01  2.20e-01  1.03e-04  1.69e-02  2.14e-05  3.00e-04  7.73e-01  
 13  +4.6174e-01  +6.7301e-01  2.11e-01  1.00e-04  1.65e-02  1.99e-05  2.96e-04  1.19e-01  
 14  +4.4205e-01  +5.8547e-01  1.43e-01  6.04e-05  9.89e-03  1.31e-05  1.89e-04  4.28e-01  
 15  +4.4081e-01  +5.7995e-01  1.39e-01  5.84e-05  9.55e-03  1.33e-05  1.83e-04  2.12e-01  
 16  +4.2891e-01  +5.2936e-01  1.00e-01  4.08e-05  6.66e-03  9.25e-06  1.33e-04  3.15e-01  
 17  +4.0873e-01  +4.4469e-01  3.60e-02  1.38e-05  2.24e-03  3.68e-06  4.86e-05  9.04e-01  
 18  +4.0632e-01  +4.3533e-01  2.90e-02  1.10e-05  1.79e-03  3.12e-06  3.92e-05  4.12e-01  
 19  +4.0339e-01  +4.2344e-01  2.00e-02  7.45e-06  1.21e-03  2.45e-06  2.69e-05  8.62e-01  
 20  +3.9867e-01  +4.0624e-01  7.58e-03  2.81e-06  4.56e-04  9.25e-07  1.04e-05  6.44e-01  
 21  +3.9586e-01  +3.9600e-01  1.44e-04  5.32e-08  8.65e-06  1.71e-08  2.01e-07  9.82e-01  
 22  +3.9580e-01  +3.9580e-01  1.44e-06  5.32e-10  8.65e-08  1.71e-10  2.01e-09  9.90e-01  
 23  +3.9580e-01  +3.9580e-01  1.44e-08  5.32e-12  8.65e-10  1.71e-12  2.01e-11  9.90e-01  
 24  +3.9580e-01  +3.9580e-01  1.44e-10  5.32e-14  8.65e-12  1.72e-14  2.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.0481ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:48 PM: Optimal value: 3.958e-01
(CVXPY) Sep 20 03:14:48 PM: Compilation took 1.155e-02 seconds
(CVXPY) Sep 20 03:14:48 PM: Solver (including time spent in interface) took 5.418e-02 seconds
Iteration: 7, Objective: 0.3958
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:48 PM: Your problem has 2587 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:48 PM: Finished problem compilation (took 1.592e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2587
  constraints   = 5087
  nnz(P)        = 0
  nnz(A)        = 34956
  cones (total) = 1
    : Nonnegative = 1,  numel = 5087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8281e-01  +5.3575e+02  5.35e+02  4.19e-01  5.12e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3339e-01  +6.2093e+01  6.16e+01  1.56e-01  2.43e+01  1.50e-02  2.62e-01  9.17e-01  
  3  +5.0854e-01  +1.5830e+01  1.53e+01  1.03e-01  1.59e+01  3.99e-05  2.45e-01  2.63e-01  
  4  +5.0072e-01  +1.6310e+00  1.13e+00  1.10e-02  1.76e+00  8.36e-06  1.31e-01  7.48e-01  
  5  +5.0024e-01  +1.0533e+00  5.53e-01  5.30e-03  8.54e-01  8.82e-06  5.98e-02  6.19e-01  
  6  +4.9957e-01  +1.2981e+00  7.99e-01  3.73e-03  6.13e-01  4.60e-05  1.19e-02  9.23e-01  
  7  +4.9315e-01  +1.1372e+00  6.44e-01  5.51e-04  9.14e-02  2.47e-04  1.53e-03  8.73e-01  
  8  +4.9559e-01  +1.1126e+00  6.17e-01  5.27e-04  8.75e-02  1.89e-04  1.43e-03  2.59e-01  
  9  +4.9099e-01  +9.4901e-01  4.58e-01  3.39e-04  5.62e-02  1.09e-04  9.28e-04  5.69e-01  
 10  +4.8653e-01  +8.9739e-01  4.11e-01  2.42e-04  4.01e-02  1.04e-04  6.65e-04  4.05e-01  
 11  +4.8342e-01  +8.5862e-01  3.75e-01  2.36e-04  3.89e-02  7.95e-05  6.61e-04  8.84e-02  
 12  +4.6751e-01  +7.3416e-01  2.67e-01  1.30e-04  2.13e-02  4.86e-05  3.75e-04  6.49e-01  
 13  +4.6254e-01  +7.0868e-01  2.46e-01  1.14e-04  1.87e-02  4.39e-05  3.34e-04  1.55e-01  
 14  +4.6145e-01  +7.0237e-01  2.41e-01  1.13e-04  1.86e-02  4.16e-05  3.34e-04  1.95e-02  
 15  +4.4483e-01  +6.1917e-01  1.74e-01  7.49e-05  1.22e-02  2.71e-05  2.32e-04  3.90e-01  
 16  +4.4249e-01  +6.0521e-01  1.63e-01  6.92e-05  1.13e-02  2.27e-05  2.16e-04  3.40e-01  
 17  +4.2787e-01  +5.3606e-01  1.08e-01  4.44e-05  7.23e-03  1.26e-05  1.46e-04  6.05e-01  
 18  +4.0944e-01  +4.5454e-01  4.51e-02  1.75e-05  2.84e-03  4.88e-06  6.18e-05  9.90e-01  
 19  +4.0095e-01  +4.2086e-01  1.99e-02  7.60e-06  1.23e-03  2.18e-06  2.80e-05  6.09e-01  
 20  +3.9976e-01  +4.1477e-01  1.50e-02  5.71e-06  9.28e-04  1.78e-06  2.11e-05  9.90e-01  
 21  +3.9763e-01  +4.0715e-01  9.53e-03  3.60e-06  5.85e-04  1.14e-06  1.35e-05  4.72e-01  
 22  +3.9407e-01  +3.9426e-01  1.85e-04  7.03e-08  1.14e-05  2.17e-08  2.69e-07  9.87e-01  
 23  +3.9400e-01  +3.9400e-01  1.85e-06  7.03e-10  1.14e-07  2.17e-10  2.70e-09  9.90e-01  
 24  +3.9400e-01  +3.9400e-01  1.86e-08  7.04e-12  1.14e-09  2.17e-12  2.70e-11  9.90e-01  
 25  +3.9400e-01  +3.9400e-01  1.86e-10  7.04e-14  1.14e-11  2.17e-14  2.70e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.0338ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:48 PM: Optimal value: 3.940e-01
(CVXPY) Sep 20 03:14:48 PM: Compilation took 1.592e-02 seconds
(CVXPY) Sep 20 03:14:48 PM: Solver (including time spent in interface) took 5.763e-02 seconds
Iteration: 8, Objective: 0.3940
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:48 PM: Your problem has 2594 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:49 PM: Finished problem compilation (took 1.205e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2594
  constraints   = 5094
  nnz(P)        = 0
  nnz(A)        = 35165
  cones (total) = 1
    : Nonnegative = 1,  numel = 5094

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.80e-01  8.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.8280e-01  +5.3560e+02  5.35e+02  4.19e-01  5.11e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3336e-01  +6.2054e+01  6.15e+01  1.56e-01  2.42e+01  1.50e-02  2.61e-01  9.17e-01  
  3  +5.0852e-01  +1.5810e+01  1.53e+01  1.03e-01  1.58e+01  3.99e-05  2.45e-01  2.65e-01  
  4  +5.0073e-01  +1.6450e+00  1.14e+00  1.12e-02  1.78e+00  8.42e-06  1.31e-01  7.43e-01  
  5  +5.0024e-01  +1.0554e+00  5.55e-01  5.32e-03  8.57e-01  8.99e-06  5.87e-02  6.33e-01  
  6  +4.9934e-01  +1.3356e+00  8.36e-01  3.31e-03  5.45e-01  5.64e-05  1.02e-02  9.41e-01  
  7  +4.9213e-01  +1.1694e+00  6.77e-01  5.33e-04  8.82e-02  2.72e-04  1.47e-03  8.56e-01  
  8  +4.9250e-01  +1.0816e+00  5.89e-01  4.57e-04  7.58e-02  1.75e-04  1.25e-03  3.54e-01  
  9  +4.8457e-01  +9.1697e-01  4.32e-01  2.55e-04  4.22e-02  1.25e-04  7.04e-04  6.04e-01  
 10  +4.8254e-01  +8.8666e-01  4.04e-01  2.51e-04  4.14e-02  1.05e-04  7.02e-04  3.74e-02  
 11  +4.7074e-01  +7.9414e-01  3.23e-01  1.60e-04  2.63e-02  7.99e-05  4.57e-04  5.06e-01  
 12  +4.5101e-01  +6.6824e-01  2.17e-01  9.47e-05  1.55e-02  4.65e-05  2.86e-04  4.56e-01  
 13  +4.4991e-01  +6.5932e-01  2.09e-01  9.38e-05  1.53e-02  4.23e-05  2.85e-04  4.38e-02  
 14  +4.3663e-01  +5.9367e-01  1.57e-01  6.59e-05  1.07e-02  2.86e-05  2.08e-04  3.60e-01  
 15  +4.3125e-01  +5.6539e-01  1.34e-01  5.52e-05  9.00e-03  2.22e-05  1.78e-04  3.14e-01  
 16  +4.2125e-01  +5.1804e-01  9.68e-02  3.89e-05  6.34e-03  1.50e-05  1.31e-04  3.50e-01  
 17  +4.0138e-01  +4.2629e-01  2.49e-02  9.62e-06  1.56e-03  2.65e-06  3.51e-05  9.61e-01  
 18  +4.0076e-01  +4.2386e-01  2.31e-02  8.85e-06  1.44e-03  2.49e-06  3.24e-05  1.20e-01  
 19  +3.9821e-01  +4.1281e-01  1.46e-02  5.57e-06  9.03e-04  1.75e-06  2.07e-05  9.90e-01  
 20  +3.9395e-01  +3.9730e-01  3.35e-03  1.28e-06  2.07e-04  3.97e-07  4.87e-06  8.02e-01  
 21  +3.9272e-01  +3.9276e-01  4.00e-05  1.53e-08  2.48e-06  4.72e-09  5.88e-08  9.88e-01  
 22  +3.9270e-01  +3.9270e-01  4.01e-07  1.53e-10  2.48e-08  4.73e-11  5.89e-10  9.90e-01  
 23  +3.9270e-01  +3.9270e-01  4.01e-09  1.53e-12  2.48e-10  4.73e-13  5.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.5045ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:49 PM: Optimal value: 3.927e-01
(CVXPY) Sep 20 03:14:49 PM: Compilation took 1.205e-02 seconds
(CVXPY) Sep 20 03:14:49 PM: Solver (including time spent in interface) took 5.324e-02 seconds
Iteration: 9, Objective: 0.3927
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:49 PM: Your problem has 2604 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:49 PM: Finished problem compilation (took 1.192e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2604
  constraints   = 5104
  nnz(P)        = 0
  nnz(A)        = 35675
  cones (total) = 1
    : Nonnegative = 1,  numel = 5104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8264e-01  +5.3563e+02  5.35e+02  4.19e-01  5.11e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3323e-01  +6.1921e+01  6.14e+01  1.56e-01  2.41e+01  1.50e-02  2.61e-01  9.19e-01  
  3  +5.0849e-01  +1.5774e+01  1.53e+01  1.03e-01  1.57e+01  4.00e-05  2.44e-01  2.68e-01  
  4  +5.0073e-01  +1.6615e+00  1.16e+00  1.14e-02  1.81e+00  8.51e-06  1.30e-01  7.40e-01  
  5  +5.0023e-01  +1.0727e+00  5.72e-01  5.48e-03  8.82e-01  9.61e-06  5.63e-02  6.55e-01  
  6  +4.9798e-01  +1.5682e+00  1.07e+00  2.19e-03  3.62e-01  1.18e-04  6.18e-03  9.90e-01  
  7  +4.9008e-01  +1.2938e+00  8.04e-01  6.14e-04  1.02e-01  2.57e-04  1.70e-03  7.33e-01  
  8  +4.8665e-01  +1.0908e+00  6.04e-01  4.14e-04  6.85e-02  1.48e-04  1.14e-03  5.09e-01  
  9  +4.8503e-01  +1.0238e+00  5.39e-01  3.37e-04  5.57e-02  1.17e-04  9.25e-04  3.41e-01  
 10  +4.8550e-01  +9.8307e-01  4.98e-01  3.30e-04  5.45e-02  8.73e-05  9.09e-04  1.71e-01  
 11  +4.7636e-01  +8.9142e-01  4.15e-01  2.18e-04  3.60e-02  7.94e-05  6.11e-04  4.07e-01  
 12  +4.7562e-01  +8.7301e-01  3.97e-01  2.15e-04  3.55e-02  6.94e-05  6.09e-04  7.01e-02  
 13  +4.6039e-01  +7.4367e-01  2.83e-01  1.37e-04  2.25e-02  3.84e-05  4.04e-04  5.45e-01  
 14  +4.3367e-01  +5.9014e-01  1.56e-01  6.64e-05  1.08e-02  1.80e-05  2.12e-04  5.64e-01  
 15  +4.3354e-01  +5.8818e-01  1.55e-01  6.58e-05  1.07e-02  1.77e-05  2.11e-04  6.10e-02  
 16  +4.3207e-01  +5.7914e-01  1.47e-01  6.16e-05  1.00e-02  1.70e-05  1.98e-04  2.57e-01  
 17  +4.2259e-01  +5.3226e-01  1.10e-01  4.49e-05  7.30e-03  1.25e-05  1.50e-04  4.42e-01  
 18  +4.0409e-01  +4.4416e-01  4.01e-02  1.59e-05  2.58e-03  4.46e-06  5.75e-05  9.90e-01  
 19  +3.9849e-01  +4.2112e-01  2.26e-02  8.85e-06  1.43e-03  2.58e-06  3.29e-05  5.38e-01  
 20  +3.9764e-01  +4.1696e-01  1.93e-02  7.52e-06  1.22e-03  2.22e-06  2.81e-05  5.64e-01  
 21  +3.9463e-01  +4.0543e-01  1.08e-02  4.18e-06  6.78e-04  1.24e-06  1.59e-05  5.11e-01  
 22  +3.9099e-01  +3.9151e-01  5.13e-04  1.99e-07  3.22e-05  5.69e-08  7.76e-07  9.90e-01  
 23  +3.9080e-01  +3.9081e-01  5.17e-06  2.00e-09  3.24e-07  5.73e-10  7.83e-09  9.90e-01  
 24  +3.9080e-01  +3.9080e-01  5.17e-08  2.00e-11  3.25e-09  5.73e-12  7.83e-11  9.90e-01  
 25  +3.9080e-01  +3.9080e-01  5.17e-10  2.00e-13  3.25e-11  5.73e-14  7.83e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.4396ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:49 PM: Optimal value: 3.908e-01
(CVXPY) Sep 20 03:14:49 PM: Compilation took 1.192e-02 seconds
(CVXPY) Sep 20 03:14:49 PM: Solver (including time spent in interface) took 5.651e-02 seconds
Iteration: 10, Objective: 0.3908
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:49 PM: Your problem has 2608 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:49 PM: Finished problem compilation (took 1.001e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2608
  constraints   = 5108
  nnz(P)        = 0
  nnz(A)        = 35792
  cones (total) = 1
    : Nonnegative = 1,  numel = 5108

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8255e-01  +5.3570e+02  5.35e+02  4.19e-01  5.10e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3316e-01  +6.1850e+01  6.13e+01  1.56e-01  2.41e+01  1.50e-02  2.61e-01  9.19e-01  
  3  +5.0848e-01  +1.5762e+01  1.53e+01  1.03e-01  1.57e+01  4.01e-05  2.44e-01  2.69e-01  
  4  +5.0073e-01  +1.6535e+00  1.15e+00  1.13e-02  1.80e+00  8.50e-06  1.29e-01  7.44e-01  
  5  +5.0024e-01  +1.0846e+00  5.84e-01  5.59e-03  9.00e-01  9.78e-06  5.61e-02  6.51e-01  
  6  +4.9773e-01  +1.5336e+00  1.04e+00  1.96e-03  3.24e-01  1.29e-04  5.48e-03  9.90e-01  
  7  +4.8933e-01  +1.2497e+00  7.60e-01  5.62e-04  9.31e-02  2.61e-04  1.55e-03  7.28e-01  
  8  +4.8627e-01  +1.0745e+00  5.88e-01  3.76e-04  6.22e-02  1.56e-04  1.03e-03  5.42e-01  
  9  +4.8518e-01  +1.0150e+00  5.30e-01  3.18e-04  5.26e-02  1.21e-04  8.71e-04  3.21e-01  
 10  +4.8367e-01  +8.9460e-01  4.11e-01  2.46e-04  4.06e-02  4.08e-05  6.78e-04  6.95e-01  
 11  +4.7460e-01  +7.7460e-01  3.00e-01  1.78e-04  2.92e-02  1.94e-05  5.08e-04  9.90e-01  
 12  +4.4741e-01  +6.3734e-01  1.90e-01  8.37e-05  1.37e-02  1.46e-05  2.55e-04  5.62e-01  
 13  +4.3705e-01  +5.9065e-01  1.54e-01  6.63e-05  1.08e-02  1.20e-05  2.10e-04  2.82e-01  
 14  +4.3216e-01  +5.6933e-01  1.37e-01  5.84e-05  9.53e-03  1.11e-05  1.89e-04  1.97e-01  
 15  +4.2315e-01  +5.2973e-01  1.07e-01  4.45e-05  7.24e-03  8.92e-06  1.49e-04  3.21e-01  
 16  +4.0303e-01  +4.4173e-01  3.87e-02  1.55e-05  2.52e-03  4.14e-06  5.67e-05  9.90e-01  
 17  +3.9833e-01  +4.2247e-01  2.41e-02  9.52e-06  1.54e-03  2.66e-06  3.56e-05  5.19e-01  
 18  +3.9741e-01  +4.1805e-01  2.06e-02  8.11e-06  1.32e-03  2.32e-06  3.04e-05  6.02e-01  
 19  +3.9504e-01  +4.0898e-01  1.39e-02  5.44e-06  8.81e-04  1.58e-06  2.07e-05  4.47e-01  
 20  +3.9051e-01  +3.9163e-01  1.11e-03  4.35e-07  7.04e-05  1.23e-07  1.71e-06  9.90e-01  
 21  +3.9010e-01  +3.9012e-01  1.15e-05  4.51e-09  7.30e-07  1.27e-09  1.78e-08  9.90e-01  
 22  +3.9010e-01  +3.9010e-01  1.16e-07  4.51e-11  7.31e-09  1.28e-11  1.78e-10  9.90e-01  
 23  +3.9010e-01  +3.9010e-01  1.16e-09  4.51e-13  7.31e-11  1.28e-13  1.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.8036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:49 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 03:14:49 PM: Compilation took 1.001e-02 seconds
(CVXPY) Sep 20 03:14:49 PM: Solver (including time spent in interface) took 5.494e-02 seconds
Iteration: 11, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:14:49 PM: Your problem has 2613 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:14:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:14:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:14:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:14:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:14:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:14:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:14:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:14:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:14:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:14:49 PM: Finished problem compilation (took 9.718e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2613
  constraints   = 5113
  nnz(P)        = 0
  nnz(A)        = 35931
  cones (total) = 1
    : Nonnegative = 1,  numel = 5113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.07e+01  1.00e+00  1.00e+00   ------   
  1  +5.8257e-01  +5.3559e+02  5.35e+02  4.19e-01  5.10e+01  3.82e-03  5.63e-01  5.97e-01  
  2  +5.3316e-01  +6.1837e+01  6.13e+01  1.56e-01  2.40e+01  1.50e-02  2.60e-01  9.19e-01  
  3  +5.0847e-01  +1.5750e+01  1.52e+01  1.03e-01  1.57e+01  4.01e-05  2.43e-01  2.69e-01  
  4  +5.0073e-01  +1.6574e+00  1.16e+00  1.13e-02  1.80e+00  8.52e-06  1.29e-01  7.43e-01  
  5  +5.0022e-01  +1.0594e+00  5.59e-01  5.35e-03  8.60e-01  9.89e-06  5.29e-02  6.78e-01  
  6  +4.9725e-01  +1.6090e+00  1.11e+00  1.85e-03  3.06e-01  1.50e-04  5.15e-03  9.90e-01  
  7  +4.8773e-01  +1.2880e+00  8.00e-01  5.36e-04  8.87e-02  2.89e-04  1.47e-03  7.24e-01  
  8  +4.8396e-01  +1.1116e+00  6.28e-01  3.76e-04  6.22e-02  1.81e-04  1.03e-03  4.71e-01  
  9  +4.8478e-01  +1.0439e+00  5.59e-01  3.30e-04  5.46e-02  1.24e-04  9.02e-04  3.38e-01  
 10  +4.8009e-01  +9.2521e-01  4.45e-01  2.43e-04  4.02e-02  6.89e-05  6.74e-04  5.38e-01  
 11  +4.7559e-01  +8.4425e-01  3.69e-01  2.05e-04  3.38e-02  3.85e-05  5.79e-04  5.10e-01  
 12  +4.5075e-01  +6.6464e-01  2.14e-01  9.80e-05  1.60e-02  1.75e-05  2.96e-04  8.88e-01  
 13  +4.3759e-01  +6.0075e-01  1.63e-01  7.22e-05  1.18e-02  1.31e-05  2.29e-04  3.19e-01  
 14  +4.3130e-01  +5.7177e-01  1.40e-01  6.10e-05  9.93e-03  1.13e-05  1.98e-04  1.89e-01  
 15  +4.1567e-01  +4.9843e-01  8.28e-02  3.44e-05  5.58e-03  8.86e-06  1.19e-04  9.90e-01  
 16  +4.0376e-01  +4.4722e-01  4.35e-02  1.77e-05  2.87e-03  4.49e-06  6.50e-05  4.91e-01  
 17  +3.9667e-01  +4.1699e-01  2.03e-02  8.11e-06  1.31e-03  2.15e-06  3.08e-05  6.24e-01  
 18  +3.9619e-01  +4.1425e-01  1.81e-02  7.17e-06  1.16e-03  1.95e-06  2.73e-05  4.81e-01  
 19  +3.9272e-01  +4.0059e-01  7.87e-03  3.10e-06  5.03e-04  8.47e-07  1.21e-05  7.32e-01  
 20  +3.9010e-01  +3.9036e-01  2.65e-04  1.04e-07  1.69e-05  2.78e-08  4.14e-07  9.90e-01  
 21  +3.9000e-01  +3.9000e-01  2.65e-06  1.05e-09  1.69e-07  2.78e-10  4.16e-09  9.90e-01  
 22  +3.9000e-01  +3.9000e-01  2.65e-08  1.05e-11  1.69e-09  2.78e-12  4.16e-11  9.90e-01  
 23  +3.9000e-01  +3.9000e-01  2.66e-10  1.05e-13  1.70e-11  2.78e-14  4.16e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.3441ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:14:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:14:49 PM: Optimal value: 3.900e-01
(CVXPY) Sep 20 03:14:49 PM: Compilation took 9.718e-03 seconds
(CVXPY) Sep 20 03:14:49 PM: Solver (including time spent in interface) took 6.307e-02 seconds
FULL MODEL:
  Accruacy: 0.6006
  Our objective: 0.20119999999999993

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.152)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0048)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.0064)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0028)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.0056)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.836853504180908
Best over terms:
  Our final objective: 0.15199999999999997
    Its accruacy: 0.576
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15199999999999997
  Highest accruacy: 0.576
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

