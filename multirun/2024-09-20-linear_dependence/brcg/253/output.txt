Command:
python test_script.py -s linear_dependence -d 7 -n 100 --seed 34 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 7.

Computed total variation: 0.76
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 1.010e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9712e-01  +5.1132e+01  5.06e+01  8.68e-01  9.50e+00  1.00e+00  1.04e+00   ------   
  1  +5.8244e-01  +1.0936e+01  1.04e+01  3.54e-01  5.55e+00  3.83e-03  5.66e-01  6.13e-01  
  2  +5.1801e-01  +1.6329e+00  1.11e+00  8.06e-02  1.55e+00  1.53e-02  2.07e-01  9.90e-01  
  3  +4.9245e-01  +8.7631e-01  3.84e-01  2.05e-02  4.11e-01  9.27e-03  6.24e-02  7.80e-01  
  4  +4.6414e-01  +6.9589e-01  2.32e-01  7.64e-03  1.55e-01  7.25e-03  2.53e-02  6.40e-01  
  5  +4.4398e-01  +5.3418e-01  9.02e-02  2.75e-03  5.49e-02  2.34e-03  1.02e-02  6.53e-01  
  6  +4.3229e-01  +4.8240e-01  5.01e-02  1.19e-03  2.38e-02  1.12e-03  5.16e-03  6.18e-01  
  7  +4.2222e-01  +4.2882e-01  6.60e-03  1.49e-04  2.99e-03  1.05e-05  7.38e-04  9.85e-01  
  8  +4.2013e-01  +4.2021e-01  8.06e-05  1.76e-06  3.53e-05  1.18e-07  9.09e-06  9.88e-01  
  9  +4.2010e-01  +4.2010e-01  8.06e-07  1.76e-08  3.53e-07  1.18e-09  9.09e-08  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  8.06e-09  1.76e-10  3.53e-09  1.18e-11  9.10e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 342.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 1.010e-02 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 627
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9106e-01  +5.1997e+01  5.15e+01  8.74e-01  9.64e+00  1.00e+00  1.06e+00   ------   
  1  +5.5091e-01  +1.1014e+01  1.05e+01  3.60e-01  5.48e+00  3.84e-03  5.72e-01  6.18e-01  
  2  +4.8205e-01  +2.0163e+00  1.53e+00  8.83e-02  1.75e+00  1.71e-02  2.14e-01  9.24e-01  
  3  +4.1593e-01  +1.0413e+00  6.25e-01  2.35e-02  4.85e-01  9.79e-03  6.46e-02  7.97e-01  
  4  +3.7350e-01  +6.1708e-01  2.44e-01  7.65e-03  1.56e-01  3.64e-03  2.43e-02  7.18e-01  
  5  +3.5107e-01  +4.8078e-01  1.30e-01  3.53e-03  7.28e-02  1.75e-03  1.18e-02  6.07e-01  
  6  +3.3095e-01  +3.7231e-01  4.14e-02  9.37e-04  2.01e-02  6.46e-04  3.26e-03  7.82e-01  
  7  +3.2098e-01  +3.4633e-01  2.54e-02  4.52e-04  1.00e-02  3.02e-04  1.66e-03  7.19e-01  
  8  +3.1084e-01  +3.1187e-01  1.03e-03  1.76e-05  3.92e-04  6.00e-06  6.69e-05  9.72e-01  
  9  +3.1041e-01  +3.1042e-01  1.49e-05  2.57e-07  5.68e-06  5.99e-08  9.83e-07  9.85e-01  
 10  +3.1040e-01  +3.1040e-01  1.53e-07  2.65e-09  5.84e-08  6.18e-10  1.02e-08  9.90e-01  
 11  +3.1040e-01  +3.1040e-01  1.53e-09  2.65e-11  5.84e-10  6.18e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 448.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 3.104e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3104
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 9.874e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 722
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8794e-01  +5.2363e+01  5.19e+01  8.79e-01  9.65e+00  1.00e+00  1.07e+00   ------   
  1  +5.3712e-01  +1.1061e+01  1.05e+01  3.70e-01  5.40e+00  3.83e-03  5.79e-01  6.17e-01  
  2  +4.6255e-01  +2.1843e+00  1.72e+00  8.93e-02  1.76e+00  1.82e-02  2.13e-01  9.11e-01  
  3  +3.7990e-01  +9.0862e-01  5.29e-01  1.86e-02  3.89e-01  8.22e-03  5.12e-02  8.29e-01  
  4  +3.5037e-01  +7.2991e-01  3.80e-01  1.13e-02  2.36e-01  5.54e-03  3.41e-02  4.47e-01  
  5  +3.0920e-01  +4.4543e-01  1.36e-01  3.63e-03  7.54e-02  1.71e-03  1.26e-02  7.01e-01  
  6  +2.9672e-01  +3.8509e-01  8.84e-02  2.12e-03  4.74e-02  1.12e-03  7.42e-03  5.11e-01  
  7  +2.8065e-01  +3.1486e-01  3.42e-02  7.60e-04  1.77e-02  3.20e-04  2.81e-03  7.54e-01  
  8  +2.7120e-01  +2.7326e-01  2.06e-03  4.52e-05  1.05e-03  1.47e-05  1.73e-04  9.49e-01  
  9  +2.7078e-01  +2.7148e-01  6.94e-04  1.51e-05  3.45e-04  4.38e-06  5.92e-05  8.04e-01  
 10  +2.7057e-01  +2.7072e-01  1.53e-04  3.12e-06  6.97e-05  9.19e-07  1.30e-05  8.74e-01  
 11  +2.7050e-01  +2.7050e-01  2.45e-06  4.94e-08  1.10e-06  1.32e-08  2.09e-07  9.88e-01  
 12  +2.7050e-01  +2.7050e-01  2.45e-08  4.94e-10  1.10e-08  1.32e-10  2.09e-09  9.90e-01  
 13  +2.7050e-01  +2.7050e-01  2.45e-10  4.94e-12  1.10e-10  1.33e-12  2.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 600.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 2.705e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 9.874e-03 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2705
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 95 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 6.720e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 145
  nnz(P)        = 0
  nnz(A)        = 780
  cones (total) = 1
    : Nonnegative = 1,  numel = 145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8390e-01  +5.2602e+01  5.21e+01  8.84e-01  9.46e+00  1.00e+00  1.08e+00   ------   
  1  +5.0519e-01  +1.1164e+01  1.07e+01  3.73e-01  5.19e+00  3.89e-03  5.79e-01  6.16e-01  
  2  +4.1266e-01  +1.8931e+00  1.48e+00  6.88e-02  1.33e+00  1.99e-02  1.73e-01  9.90e-01  
  3  +3.2823e-01  +9.0632e-01  5.78e-01  1.87e-02  3.69e-01  9.41e-03  5.37e-02  7.75e-01  
  4  +2.8726e-01  +6.5383e-01  3.67e-01  1.08e-02  2.12e-01  5.04e-03  3.39e-02  4.92e-01  
  5  +2.3859e-01  +3.5061e-01  1.12e-01  3.04e-03  6.06e-02  1.30e-03  1.10e-02  7.06e-01  
  6  +2.1857e-01  +2.5045e-01  3.19e-02  8.34e-04  1.68e-02  3.46e-04  3.26e-03  7.18e-01  
  7  +2.1114e-01  +2.1288e-01  1.74e-03  4.58e-05  9.14e-04  1.53e-05  1.87e-04  9.48e-01  
  8  +2.1085e-01  +2.1154e-01  6.96e-04  1.72e-05  3.36e-04  4.03e-06  7.75e-05  8.40e-01  
  9  +2.1064e-01  +2.1075e-01  1.09e-04  2.63e-06  5.10e-05  5.81e-07  1.27e-05  8.45e-01  
 10  +2.1060e-01  +2.1060e-01  1.97e-06  4.71e-08  9.14e-07  9.21e-09  2.33e-07  9.84e-01  
 11  +2.1060e-01  +2.1060e-01  1.97e-08  4.71e-10  9.14e-09  9.21e-11  2.33e-09  9.90e-01  
 12  +2.1060e-01  +2.1060e-01  1.97e-10  4.71e-12  9.14e-11  9.24e-13  2.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 660.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 2.106e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 6.720e-03 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2106
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 105 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 5.090e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 105
  constraints   = 155
  nnz(P)        = 0
  nnz(A)        = 843
  cones (total) = 1
    : Nonnegative = 1,  numel = 155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8249e-01  +5.2736e+01  5.23e+01  8.87e-01  9.31e+00  1.00e+00  1.08e+00   ------   
  1  +4.9328e-01  +1.1279e+01  1.08e+01  3.81e-01  5.10e+00  3.90e-03  5.82e-01  6.11e-01  
  2  +3.9388e-01  +2.0462e+00  1.65e+00  7.29e-02  1.37e+00  2.06e-02  1.84e-01  9.67e-01  
  3  +3.1077e-01  +1.0345e+00  7.24e-01  2.40e-02  4.60e-01  1.02e-02  6.90e-02  6.92e-01  
  4  +2.7331e-01  +7.2107e-01  4.48e-01  1.38e-02  2.60e-01  5.56e-03  4.36e-02  4.65e-01  
  5  +2.3374e-01  +4.1214e-01  1.78e-01  5.18e-03  9.64e-02  1.83e-03  1.88e-02  6.36e-01  
  6  +2.1301e-01  +2.7900e-01  6.60e-02  1.85e-03  3.44e-02  6.14e-04  7.39e-03  6.54e-01  
  7  +2.0214e-01  +2.0898e-01  6.85e-03  1.90e-04  3.51e-03  5.06e-05  8.10e-04  9.10e-01  
  8  +2.0078e-01  +2.0141e-01  6.31e-04  1.76e-05  3.20e-04  3.18e-06  8.02e-05  9.07e-01  
  9  +2.0063e-01  +2.0072e-01  9.42e-05  2.55e-06  4.57e-05  3.58e-07  1.44e-05  8.67e-01  
 10  +2.0060e-01  +2.0060e-01  1.38e-06  3.70e-08  6.64e-07  4.52e-09  2.22e-07  9.86e-01  
 11  +2.0060e-01  +2.0060e-01  1.38e-08  3.69e-10  6.63e-09  4.51e-11  2.22e-09  9.90e-01  
 12  +2.0060e-01  +2.0060e-01  1.38e-10  3.69e-12  6.63e-11  4.55e-13  2.23e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 651.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 2.006e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 5.090e-03 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.2006
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 115 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 165
  nnz(P)        = 0
  nnz(A)        = 908
  cones (total) = 1
    : Nonnegative = 1,  numel = 165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7807e-01  +5.2830e+01  5.24e+01  8.91e-01  9.19e+00  1.00e+00  1.08e+00   ------   
  1  +4.6451e-01  +1.1517e+01  1.11e+01  3.92e-01  5.09e+00  3.93e-03  5.94e-01  5.98e-01  
  2  +3.5504e-01  +2.3058e+00  1.95e+00  8.37e-02  1.55e+00  2.21e-02  2.05e-01  9.31e-01  
  3  +2.8438e-01  +9.5377e-01  6.69e-01  2.46e-02  4.63e-01  8.59e-03  6.97e-02  7.13e-01  
  4  +2.4946e-01  +6.4714e-01  3.98e-01  1.34e-02  2.49e-01  4.62e-03  4.23e-02  5.15e-01  
  5  +2.1398e-01  +3.4965e-01  1.36e-01  4.25e-03  7.90e-02  1.44e-03  1.54e-02  6.76e-01  
  6  +2.0796e-01  +3.1826e-01  1.10e-01  3.19e-03  6.24e-02  1.16e-03  1.16e-02  3.53e-01  
  7  +1.9347e-01  +2.3912e-01  4.57e-02  1.20e-03  2.47e-02  3.63e-04  4.61e-03  7.89e-01  
  8  +1.8163e-01  +1.8396e-01  2.33e-03  5.90e-05  1.22e-03  1.08e-05  2.39e-04  9.64e-01  
  9  +1.8106e-01  +1.8145e-01  3.91e-04  1.00e-05  2.05e-04  1.42e-06  4.37e-05  9.28e-01  
 10  +1.8093e-01  +1.8099e-01  6.54e-05  1.66e-06  3.41e-05  2.47e-07  7.65e-06  9.49e-01  
 11  +1.8090e-01  +1.8090e-01  7.26e-07  1.84e-08  3.78e-07  2.62e-09  8.57e-08  9.89e-01  
 12  +1.8090e-01  +1.8090e-01  7.26e-09  1.84e-10  3.78e-09  2.62e-11  8.57e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 961.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 1.809e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.1809
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 125 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 9.173e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 125
  constraints   = 175
  nnz(P)        = 0
  nnz(A)        = 944
  cones (total) = 1
    : Nonnegative = 1,  numel = 175

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7269e-01  +5.2861e+01  5.24e+01  8.93e-01  8.99e+00  1.00e+00  1.08e+00   ------   
  1  +4.1373e-01  +1.1988e+01  1.16e+01  3.98e-01  4.99e+00  4.09e-03  5.96e-01  5.79e-01  
  2  +3.0373e-01  +2.2065e+00  1.90e+00  8.29e-02  1.46e+00  2.35e-02  2.04e-01  9.49e-01  
  3  +2.4143e-01  +8.9585e-01  6.54e-01  2.55e-02  4.52e-01  9.26e-03  7.25e-02  7.18e-01  
  4  +2.1137e-01  +5.9166e-01  3.80e-01  1.38e-02  2.44e-01  4.90e-03  4.35e-02  5.12e-01  
  5  +1.7981e-01  +3.1690e-01  1.37e-01  4.54e-03  8.04e-02  1.62e-03  1.65e-02  6.82e-01  
  6  +1.6037e-01  +2.0106e-01  4.07e-02  1.21e-03  2.15e-02  3.96e-04  5.10e-03  7.63e-01  
  7  +1.5207e-01  +1.5563e-01  3.55e-03  1.03e-04  1.83e-03  1.28e-05  4.72e-04  9.80e-01  
  8  +1.5110e-01  +1.5138e-01  2.85e-04  8.29e-06  1.46e-04  6.61e-07  4.11e-05  9.15e-01  
  9  +1.5100e-01  +1.5101e-01  8.82e-06  2.55e-07  4.45e-06  1.76e-08  1.40e-06  9.72e-01  
 10  +1.5100e-01  +1.5100e-01  8.81e-08  2.54e-09  4.44e-08  1.76e-10  1.40e-08  9.90e-01  
 11  +1.5100e-01  +1.5100e-01  8.82e-10  2.55e-11  4.44e-10  1.76e-12  1.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 761.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 1.510e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 9.173e-03 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.1510
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 135 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 2.978e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 135
  constraints   = 185
  nnz(P)        = 0
  nnz(A)        = 983
  cones (total) = 1
    : Nonnegative = 1,  numel = 185

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7142e-01  +5.2979e+01  5.25e+01  8.96e-01  8.81e+00  1.00e+00  1.09e+00   ------   
  1  +4.0369e-01  +1.2074e+01  1.17e+01  4.01e-01  4.84e+00  4.12e-03  5.96e-01  5.77e-01  
  2  +2.8414e-01  +2.2456e+00  1.96e+00  8.19e-02  1.43e+00  2.39e-02  2.03e-01  9.45e-01  
  3  +2.3532e-01  +1.0732e+00  8.38e-01  3.26e-02  5.77e-01  9.78e-03  9.10e-02  7.38e-01  
  4  +1.8868e-01  +4.5046e-01  2.62e-01  9.55e-03  1.68e-01  2.71e-03  3.09e-02  7.47e-01  
  5  +1.5630e-01  +2.3590e-01  7.96e-02  2.68e-03  4.75e-02  6.55e-04  9.92e-03  7.71e-01  
  6  +1.4344e-01  +1.5434e-01  1.09e-02  3.58e-04  6.35e-03  5.88e-05  1.42e-03  9.29e-01  
  7  +1.4144e-01  +1.4277e-01  1.33e-03  4.41e-05  7.73e-04  6.02e-06  1.83e-04  8.75e-01  
  8  +1.4118e-01  +1.4147e-01  2.92e-04  9.58e-06  1.65e-04  1.03e-06  4.47e-05  8.55e-01  
  9  +1.4110e-01  +1.4111e-01  1.07e-05  3.50e-07  5.98e-06  2.98e-08  1.71e-06  9.67e-01  
 10  +1.4110e-01  +1.4110e-01  1.07e-07  3.52e-09  6.01e-08  2.99e-10  1.73e-08  9.90e-01  
 11  +1.4110e-01  +1.4110e-01  1.08e-09  3.53e-11  6.04e-10  3.00e-12  1.74e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 825.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 1.411e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 2.978e-03 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.1411
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 136 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 4.193e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 136
  constraints   = 186
  nnz(P)        = 0
  nnz(A)        = 989
  cones (total) = 1
    : Nonnegative = 1,  numel = 186

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7109e-01  +5.2954e+01  5.25e+01  8.97e-01  8.80e+00  1.00e+00  1.09e+00   ------   
  1  +4.0145e-01  +1.2067e+01  1.17e+01  4.02e-01  4.83e+00  4.13e-03  5.96e-01  5.77e-01  
  2  +2.7764e-01  +2.2741e+00  2.00e+00  8.14e-02  1.41e+00  2.40e-02  2.02e-01  9.42e-01  
  3  +2.4207e-01  +1.2723e+00  1.03e+00  4.11e-02  7.24e-01  1.14e-02  1.12e-01  6.49e-01  
  4  +1.9221e-01  +4.4890e-01  2.57e-01  9.63e-03  1.69e-01  2.59e-03  3.05e-02  7.92e-01  
  5  +1.5991e-01  +2.6473e-01  1.05e-01  3.56e-03  6.35e-02  9.17e-04  1.26e-02  6.86e-01  
  6  +1.4778e-01  +2.1278e-01  6.50e-02  1.99e-03  3.68e-02  4.99e-04  7.35e-03  5.67e-01  
  7  +1.3272e-01  +1.3802e-01  5.29e-03  1.56e-04  2.89e-03  2.65e-05  6.17e-04  9.45e-01  
  8  +1.3145e-01  +1.3222e-01  7.70e-04  2.29e-05  4.18e-04  3.11e-06  9.63e-05  8.55e-01  
  9  +1.3122e-01  +1.3127e-01  5.37e-05  1.60e-06  2.87e-05  1.48e-07  7.49e-06  9.40e-01  
 10  +1.3120e-01  +1.3120e-01  6.05e-07  1.80e-08  3.21e-07  1.61e-09  8.64e-08  9.89e-01  
 11  +1.3120e-01  +1.3120e-01  6.07e-09  1.81e-10  3.22e-09  1.62e-11  8.67e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 796.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 1.312e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 4.193e-03 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 143 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 143
  constraints   = 193
  nnz(P)        = 0
  nnz(A)        = 1010
  cones (total) = 1
    : Nonnegative = 1,  numel = 193

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7018e-01  +5.2993e+01  5.25e+01  8.98e-01  8.67e+00  1.00e+00  1.09e+00   ------   
  1  +3.8827e-01  +1.2150e+01  1.18e+01  4.03e-01  4.76e+00  4.14e-03  5.98e-01  5.73e-01  
  2  +2.5331e-01  +2.6710e+00  2.42e+00  9.33e-02  1.56e+00  2.39e-02  2.31e-01  8.73e-01  
  3  +2.1795e-01  +7.9594e-01  5.78e-01  2.37e-02  4.07e-01  6.85e-03  6.83e-02  7.75e-01  
  4  +1.8068e-01  +4.8834e-01  3.08e-01  1.17e-02  1.99e-01  3.23e-03  3.78e-02  5.63e-01  
  5  +1.5491e-01  +2.8322e-01  1.28e-01  4.52e-03  7.68e-02  1.28e-03  1.63e-02  6.16e-01  
  6  +1.4311e-01  +2.0731e-01  6.42e-02  2.10e-03  3.62e-02  6.02e-04  8.03e-03  5.81e-01  
  7  +1.3241e-01  +1.3737e-01  4.96e-03  1.60e-04  2.75e-03  2.58e-05  6.44e-04  9.60e-01  
  8  +1.3153e-01  +1.3269e-01  1.16e-03  3.80e-05  6.48e-04  5.26e-06  1.61e-04  7.72e-01  
  9  +1.3131e-01  +1.3167e-01  3.62e-04  1.16e-05  1.97e-04  1.23e-06  5.42e-05  8.85e-01  
 10  +1.3120e-01  +1.3122e-01  1.15e-05  3.68e-07  6.19e-06  2.71e-08  1.80e-06  9.79e-01  
 11  +1.3120e-01  +1.3120e-01  1.15e-07  3.68e-09  6.19e-08  2.71e-10  1.81e-08  9.90e-01  
 12  +1.3120e-01  +1.3120e-01  1.15e-09  3.69e-11  6.20e-10  2.71e-12  1.81e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 784.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 1.312e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:00 PM: Your problem has 144 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:00 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 144
  constraints   = 194
  nnz(P)        = 0
  nnz(A)        = 1017
  cones (total) = 1
    : Nonnegative = 1,  numel = 194

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6972e-01  +5.3050e+01  5.26e+01  8.99e-01  8.66e+00  1.00e+00  1.09e+00   ------   
  1  +3.8323e-01  +1.2220e+01  1.18e+01  4.04e-01  4.77e+00  4.16e-03  5.99e-01  5.71e-01  
  2  +2.5236e-01  +2.6972e+00  2.44e+00  9.53e-02  1.59e+00  2.40e-02  2.35e-01  8.69e-01  
  3  +2.1742e-01  +8.0463e-01  5.87e-01  2.43e-02  4.16e-01  6.95e-03  6.98e-02  7.84e-01  
  4  +1.7698e-01  +4.7687e-01  3.00e-01  1.15e-02  1.95e-01  3.05e-03  3.77e-02  5.85e-01  
  5  +1.4522e-01  +2.2449e-01  7.93e-02  2.82e-03  4.76e-02  6.94e-04  1.08e-02  7.59e-01  
  6  +1.3700e-01  +1.6925e-01  3.23e-02  1.11e-03  1.88e-02  2.44e-04  4.41e-03  6.87e-01  
  7  +1.3163e-01  +1.3387e-01  2.25e-03  7.71e-05  1.30e-03  1.35e-05  3.21e-04  9.29e-01  
  8  +1.3126e-01  +1.3187e-01  6.15e-04  2.09e-05  3.49e-04  2.41e-06  1.03e-04  8.06e-01  
  9  +1.3112e-01  +1.3120e-01  7.70e-05  2.58e-06  4.26e-05  2.35e-07  1.43e-05  8.86e-01  
 10  +1.3110e-01  +1.3110e-01  1.66e-06  5.54e-08  9.12e-07  4.36e-09  3.19e-07  9.88e-01  
 11  +1.3110e-01  +1.3110e-01  1.66e-08  5.54e-10  9.12e-09  4.36e-11  3.19e-09  9.90e-01  
 12  +1.3110e-01  +1.3110e-01  1.67e-10  5.54e-12  9.12e-11  4.37e-13  3.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 810.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:00 PM: Optimal value: 1.311e-01
(CVXPY) Sep 20 03:11:00 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 11, Objective: 0.1311
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:01 PM: Your problem has 146 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 146
  constraints   = 196
  nnz(P)        = 0
  nnz(A)        = 1028
  cones (total) = 1
    : Nonnegative = 1,  numel = 196

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6949e-01  +5.3059e+01  5.26e+01  8.99e-01  8.64e+00  1.00e+00  1.09e+00   ------   
  1  +3.8020e-01  +1.2272e+01  1.19e+01  4.06e-01  4.76e+00  4.17e-03  6.01e-01  5.69e-01  
  2  +2.5161e-01  +2.7790e+00  2.53e+00  9.90e-02  1.64e+00  2.40e-02  2.44e-01  8.54e-01  
  3  +2.1714e-01  +8.1478e-01  5.98e-01  2.48e-02  4.23e-01  7.09e-03  7.15e-02  7.72e-01  
  4  +1.7758e-01  +4.9204e-01  3.14e-01  1.22e-02  2.06e-01  3.14e-03  3.99e-02  5.84e-01  
  5  +1.4630e-01  +2.3172e-01  8.54e-02  3.09e-03  5.19e-02  7.33e-04  1.18e-02  7.55e-01  
  6  +1.3891e-01  +1.8284e-01  4.39e-02  1.52e-03  2.58e-02  3.34e-04  5.99e-03  6.05e-01  
  7  +1.3182e-01  +1.3506e-01  3.25e-03  1.12e-04  1.89e-03  1.96e-05  4.62e-04  9.29e-01  
  8  +1.3124e-01  +1.3174e-01  4.96e-04  1.71e-05  2.85e-04  1.40e-06  8.17e-05  9.03e-01  
  9  +1.3111e-01  +1.3117e-01  5.12e-05  1.73e-06  2.85e-05  1.19e-07  9.64e-06  9.07e-01  
 10  +1.3110e-01  +1.3110e-01  7.38e-07  2.49e-08  4.09e-07  1.67e-09  1.42e-07  9.88e-01  
 11  +1.3110e-01  +1.3110e-01  7.40e-09  2.49e-10  4.09e-09  1.67e-11  1.43e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 796.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:01 PM: Optimal value: 1.311e-01
(CVXPY) Sep 20 03:11:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.85
  Our objective: 0.7000000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1)                                  <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x2 = 1 AND x4 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1)                                  <-- (term's our objective: 0.16)
 OR (x1 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.08)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.04)
 OR (x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.695955991744995
Best over terms:
  Our final objective: 0.16000000000000006
    Its accruacy: 0.58
    Its hamming distance: 7
  Shortest hamming distance: 1
    Its our objective: 0.09999999999999999
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

