Command:
python test_script.py -s linear_dependence -d 7 -n 1000 --seed 34 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.17600000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 7.

Computed total variation: 0.328
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:38 PM: Your problem has 515 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Finished problem compilation (took 8.150e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 515
  constraints   = 1015
  nnz(P)        = 0
  nnz(A)        = 5015
  cones (total) = 1
    : Nonnegative = 1,  numel = 1015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9992e-01  +5.0077e+02  5.00e+02  9.54e-01  3.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.8780e-01  +1.0547e+02  1.05e+02  3.89e-01  2.00e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3663e-01  +1.3229e+01  1.27e+01  1.34e-01  8.71e+00  1.33e-02  2.49e-01  8.82e-01  
  3  +5.0602e-01  +3.0466e+00  2.54e+00  5.20e-02  3.24e+00  2.90e-05  2.29e-01  3.33e-01  
  4  +5.0049e-01  +7.4307e-01  2.43e-01  5.32e-03  3.48e-01  9.35e-06  6.49e-02  8.54e-01  
  5  +4.9962e-01  +7.7806e-01  2.78e-01  4.62e-03  3.05e-01  2.84e-05  1.96e-02  7.72e-01  
  6  +4.8868e-01  +7.0508e-01  2.16e-01  5.97e-04  4.00e-02  1.89e-04  1.88e-03  9.10e-01  
  7  +4.6993e-01  +5.6940e-01  9.95e-02  2.55e-04  1.70e-02  2.72e-05  9.34e-04  7.13e-01  
  8  +4.5329e-01  +4.9007e-01  3.68e-02  8.16e-05  5.42e-03  1.02e-05  3.34e-04  8.14e-01  
  9  +4.4524e-01  +4.5499e-01  9.75e-03  2.07e-05  1.37e-03  4.13e-06  8.99e-05  9.90e-01  
 10  +4.4215e-01  +4.4229e-01  1.41e-04  2.96e-07  1.97e-05  5.22e-08  1.33e-06  9.87e-01  
 11  +4.4210e-01  +4.4210e-01  1.41e-06  2.96e-09  1.96e-07  5.22e-10  1.33e-08  9.90e-01  
 12  +4.4210e-01  +4.4210e-01  1.41e-08  2.96e-11  1.96e-09  5.22e-12  1.33e-10  9.90e-01  
 13  +4.4210e-01  +4.4210e-01  1.41e-10  2.96e-13  1.96e-11  5.23e-14  1.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.8288ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:38 PM: Optimal value: 4.421e-01
(CVXPY) Sep 20 03:11:38 PM: Compilation took 8.150e-03 seconds
(CVXPY) Sep 20 03:11:38 PM: Solver (including time spent in interface) took 4.163e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:38 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Finished problem compilation (took 3.519e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 6055
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +5.0126e+02  5.01e+02  9.55e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.8658e-01  +1.0576e+02  1.05e+02  3.92e-01  2.09e+01  3.85e-03  5.53e-01  6.09e-01  
  2  +5.3471e-01  +1.2863e+01  1.23e+01  1.32e-01  8.84e+00  1.37e-02  2.46e-01  9.03e-01  
  3  +5.0486e-01  +2.8120e+00  2.31e+00  4.78e-02  3.12e+00  2.93e-05  2.17e-01  4.44e-01  
  4  +5.0126e-01  +1.1728e+00  6.72e-01  1.46e-02  9.89e-01  1.30e-05  1.05e-01  5.64e-01  
  5  +4.9883e-01  +9.9092e-01  4.92e-01  6.94e-03  4.82e-01  3.46e-05  2.41e-02  9.18e-01  
  6  +4.8669e-01  +8.5076e-01  3.64e-01  1.43e-03  1.01e-01  1.16e-04  4.22e-03  8.28e-01  
  7  +4.7869e-01  +7.7583e-01  2.97e-01  9.80e-04  6.89e-02  1.04e-04  2.91e-03  3.75e-01  
  8  +4.7504e-01  +7.4119e-01  2.66e-01  8.40e-04  5.89e-02  9.23e-05  2.54e-03  3.23e-01  
  9  +4.6054e-01  +6.2266e-01  1.62e-01  4.24e-04  2.96e-02  6.11e-05  1.33e-03  7.00e-01  
 10  +4.5790e-01  +6.0897e-01  1.51e-01  3.55e-04  2.48e-02  6.31e-05  1.09e-03  2.85e-01  
 11  +4.4897e-01  +5.5260e-01  1.04e-01  1.84e-04  1.29e-02  6.47e-05  5.51e-04  9.90e-01  
 12  +4.3885e-01  +5.1403e-01  7.52e-02  1.60e-04  1.11e-02  3.11e-05  5.23e-04  2.93e-01  
 13  +4.2004e-01  +4.3498e-01  1.49e-02  2.39e-05  1.66e-03  1.26e-05  7.71e-05  8.87e-01  
 14  +4.1236e-01  +4.1287e-01  5.09e-04  8.17e-07  5.66e-05  3.23e-07  2.75e-06  9.87e-01  
 15  +4.1210e-01  +4.1211e-01  5.10e-06  8.18e-09  5.66e-07  3.22e-09  2.76e-08  9.90e-01  
 16  +4.1210e-01  +4.1210e-01  5.10e-08  8.18e-11  5.66e-09  3.22e-11  2.76e-10  9.90e-01  
 17  +4.1210e-01  +4.1210e-01  5.10e-10  8.18e-13  5.66e-11  3.23e-13  2.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.372ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:38 PM: Optimal value: 4.121e-01
(CVXPY) Sep 20 03:11:38 PM: Compilation took 3.519e-03 seconds
(CVXPY) Sep 20 03:11:38 PM: Solver (including time spent in interface) took 8.527e-03 seconds
Iteration: 2, Objective: 0.4121
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:38 PM: Your problem has 535 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Finished problem compilation (took 4.065e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 535
  constraints   = 1035
  nnz(P)        = 0
  nnz(A)        = 6575
  cones (total) = 1
    : Nonnegative = 1,  numel = 1035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9966e-01  +5.0146e+02  5.01e+02  9.55e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.8564e-01  +1.0589e+02  1.05e+02  3.94e-01  2.10e+01  3.85e-03  5.53e-01  6.09e-01  
  2  +5.3402e-01  +1.2726e+01  1.22e+01  1.30e-01  8.73e+00  1.39e-02  2.43e-01  9.11e-01  
  3  +5.0465e-01  +2.7734e+00  2.27e+00  4.71e-02  3.10e+00  2.98e-05  2.11e-01  4.76e-01  
  4  +5.0132e-01  +1.2385e+00  7.37e-01  1.60e-02  1.09e+00  1.40e-05  1.05e-01  5.42e-01  
  5  +4.9797e-01  +9.4291e-01  4.45e-01  5.46e-03  3.84e-01  4.16e-05  1.74e-02  9.90e-01  
  6  +4.8459e-01  +8.1933e-01  3.35e-01  1.24e-03  8.86e-02  1.27e-04  3.51e-03  8.01e-01  
  7  +4.7474e-01  +7.7853e-01  3.04e-01  7.60e-04  5.41e-02  1.58e-04  2.13e-03  4.85e-01  
  8  +4.6809e-01  +7.4050e-01  2.72e-01  6.51e-04  4.62e-02  1.35e-04  1.86e-03  4.07e-01  
  9  +4.4367e-01  +6.1241e-01  1.69e-01  3.71e-04  2.62e-02  6.94e-05  1.14e-03  9.82e-01  
 10  +4.1329e-01  +4.8329e-01  7.00e-02  1.34e-04  9.36e-03  2.68e-05  4.45e-04  6.52e-01  
 11  +3.9848e-01  +4.2511e-01  2.66e-02  4.95e-05  3.44e-03  1.53e-05  1.79e-04  9.90e-01  
 12  +3.9096e-01  +3.9739e-01  6.43e-03  1.17e-05  8.14e-04  3.96e-06  4.39e-05  8.43e-01  
 13  +3.8835e-01  +3.8847e-01  1.17e-04  2.13e-07  1.48e-05  6.39e-08  8.14e-07  9.84e-01  
 14  +3.8830e-01  +3.8830e-01  1.17e-06  2.12e-09  1.48e-07  6.38e-10  8.14e-09  9.90e-01  
 15  +3.8830e-01  +3.8830e-01  1.17e-08  2.12e-11  1.48e-09  6.39e-12  8.14e-11  9.90e-01  
 16  +3.8830e-01  +3.8830e-01  1.17e-10  2.12e-13  1.48e-11  6.39e-14  8.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.743ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:38 PM: Optimal value: 3.883e-01
(CVXPY) Sep 20 03:11:38 PM: Compilation took 4.065e-03 seconds
(CVXPY) Sep 20 03:11:38 PM: Solver (including time spent in interface) took 4.021e-03 seconds
Iteration: 3, Objective: 0.3883
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:38 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Finished problem compilation (took 4.058e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6803
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0152e+02  5.01e+02  9.55e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.8431e-01  +1.0591e+02  1.05e+02  3.95e-01  2.09e+01  3.85e-03  5.54e-01  6.09e-01  
  2  +5.3332e-01  +1.2598e+01  1.21e+01  1.28e-01  8.50e+00  1.40e-02  2.40e-01  9.21e-01  
  3  +5.0428e-01  +2.7006e+00  2.20e+00  4.57e-02  3.00e+00  3.02e-05  2.03e-01  5.25e-01  
  4  +5.0079e-01  +1.1001e+00  5.99e-01  1.29e-02  8.82e-01  1.33e-05  7.84e-02  6.45e-01  
  5  +4.8817e-01  +1.1274e+00  6.39e-01  2.70e-03  1.93e-01  1.20e-04  7.30e-03  9.71e-01  
  6  +4.7078e-01  +9.5387e-01  4.83e-01  1.33e-03  9.47e-02  1.34e-04  3.70e-03  5.26e-01  
  7  +4.4864e-01  +7.7421e-01  3.26e-01  7.36e-04  5.19e-02  1.07e-04  2.16e-03  5.22e-01  
  8  +4.2623e-01  +5.9828e-01  1.72e-01  3.74e-04  2.62e-02  8.59e-05  1.17e-03  9.90e-01  
  9  +3.9905e-01  +4.7461e-01  7.56e-02  1.48e-04  1.03e-02  3.62e-05  5.01e-04  6.64e-01  
 10  +3.8515e-01  +4.1647e-01  3.13e-02  5.93e-05  4.12e-03  1.84e-05  2.11e-04  9.90e-01  
 11  +3.8395e-01  +4.1218e-01  2.82e-02  5.24e-05  3.65e-03  1.69e-05  1.86e-04  1.55e-01  
 12  +3.8005e-01  +3.9632e-01  1.63e-02  3.00e-05  2.08e-03  1.04e-05  1.09e-04  9.90e-01  
 13  +3.7397e-01  +3.7497e-01  1.00e-03  1.83e-06  1.27e-04  5.24e-07  6.88e-06  9.80e-01  
 14  +3.7360e-01  +3.7361e-01  1.01e-05  1.85e-08  1.28e-06  5.27e-09  6.98e-08  9.90e-01  
 15  +3.7360e-01  +3.7360e-01  1.01e-07  1.85e-10  1.28e-08  5.27e-11  6.98e-10  9.90e-01  
 16  +3.7360e-01  +3.7360e-01  1.01e-09  1.85e-12  1.28e-10  5.27e-13  6.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.9079ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:38 PM: Optimal value: 3.736e-01
(CVXPY) Sep 20 03:11:38 PM: Compilation took 4.058e-03 seconds
(CVXPY) Sep 20 03:11:38 PM: Solver (including time spent in interface) took 4.222e-03 seconds
Iteration: 4, Objective: 0.3736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:38 PM: Your problem has 555 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Finished problem compilation (took 4.046e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 555
  constraints   = 1055
  nnz(P)        = 0
  nnz(A)        = 7013
  cones (total) = 1
    : Nonnegative = 1,  numel = 1055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0167e+02  5.01e+02  9.55e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.8270e-01  +1.0602e+02  1.05e+02  3.97e-01  2.08e+01  3.85e-03  5.54e-01  6.08e-01  
  2  +5.3241e-01  +1.2416e+01  1.19e+01  1.26e-01  8.29e+00  1.42e-02  2.35e-01  9.32e-01  
  3  +5.0397e-01  +2.6448e+00  2.14e+00  4.46e-02  2.93e+00  3.11e-05  1.94e-01  5.76e-01  
  4  +5.0099e-01  +1.3387e+00  8.38e-01  1.77e-02  1.20e+00  1.75e-05  8.99e-02  5.52e-01  
  5  +4.8780e-01  +1.2801e+00  7.92e-01  3.64e-03  2.60e-01  1.27e-04  9.69e-03  9.90e-01  
  6  +4.6226e-01  +9.8712e-01  5.25e-01  1.38e-03  9.82e-02  1.47e-04  3.84e-03  6.38e-01  
  7  +4.4337e-01  +8.2924e-01  3.86e-01  9.19e-04  6.47e-02  1.18e-04  2.69e-03  4.23e-01  
  8  +4.1378e-01  +6.2933e-01  2.16e-01  4.80e-04  3.35e-02  7.38e-05  1.55e-03  6.38e-01  
  9  +3.7885e-01  +4.4180e-01  6.29e-02  1.33e-04  9.20e-03  2.22e-05  4.89e-04  8.35e-01  
 10  +3.7085e-01  +4.0714e-01  3.63e-02  7.58e-05  5.24e-03  1.49e-05  2.98e-04  7.97e-01  
 11  +3.6938e-01  +4.0008e-01  3.07e-02  6.24e-05  4.33e-03  1.33e-05  2.44e-04  2.57e-01  
 12  +3.6847e-01  +3.9377e-01  2.53e-02  5.23e-05  3.62e-03  1.21e-05  2.06e-04  5.79e-01  
 13  +3.6623e-01  +3.8844e-01  2.22e-02  4.42e-05  3.06e-03  1.14e-05  1.71e-04  3.67e-01  
 14  +3.6076e-01  +3.6642e-01  5.66e-03  1.12e-05  7.74e-04  2.85e-06  4.49e-05  7.55e-01  
 15  +3.5892e-01  +3.5900e-01  7.19e-05  1.42e-07  9.84e-06  3.44e-08  5.80e-07  9.87e-01  
 16  +3.5890e-01  +3.5890e-01  7.19e-07  1.42e-09  9.84e-08  3.44e-10  5.80e-09  9.90e-01  
 17  +3.5890e-01  +3.5890e-01  7.19e-09  1.42e-11  9.84e-10  3.44e-12  5.80e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.0598ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:38 PM: Optimal value: 3.589e-01
(CVXPY) Sep 20 03:11:38 PM: Compilation took 4.046e-03 seconds
(CVXPY) Sep 20 03:11:38 PM: Solver (including time spent in interface) took 8.454e-03 seconds
Iteration: 5, Objective: 0.3589
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:38 PM: Your problem has 565 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Finished problem compilation (took 8.075e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 565
  constraints   = 1065
  nnz(P)        = 0
  nnz(A)        = 7130
  cones (total) = 1
    : Nonnegative = 1,  numel = 1065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0171e+02  5.01e+02  9.56e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.8056e-01  +1.0619e+02  1.06e+02  3.99e-01  2.06e+01  3.85e-03  5.56e-01  6.07e-01  
  2  +5.3123e-01  +1.2194e+01  1.17e+01  1.23e-01  8.06e+00  1.45e-02  2.30e-01  9.47e-01  
  3  +5.0356e-01  +2.5677e+00  2.06e+00  4.31e-02  2.82e+00  3.25e-05  1.82e-01  6.46e-01  
  4  +5.0007e-01  +1.2188e+00  7.19e-01  1.45e-02  9.86e-01  2.19e-05  6.26e-02  6.85e-01  
  5  +4.8226e-01  +1.4334e+00  9.51e-01  3.71e-03  2.65e-01  1.68e-04  9.71e-03  9.46e-01  
  6  +4.6182e-01  +1.1647e+00  7.03e-01  1.91e-03  1.36e-01  1.73e-04  5.22e-03  5.17e-01  
  7  +4.4864e-01  +1.0161e+00  5.67e-01  1.40e-03  9.90e-02  1.70e-04  3.96e-03  3.99e-01  
  8  +4.1505e-01  +6.8562e-01  2.71e-01  6.46e-04  4.49e-02  9.94e-05  2.05e-03  8.27e-01  
  9  +3.9384e-01  +5.7000e-01  1.76e-01  3.99e-04  2.76e-02  6.28e-05  1.36e-03  3.90e-01  
 10  +3.6204e-01  +4.0380e-01  4.18e-02  9.11e-05  6.24e-03  1.55e-05  3.59e-04  9.17e-01  
 11  +3.5598e-01  +3.7690e-01  2.09e-02  4.41e-05  3.03e-03  8.75e-06  1.78e-04  6.06e-01  
 12  +3.5554e-01  +3.7434e-01  1.88e-02  4.09e-05  2.80e-03  7.15e-06  1.75e-04  8.29e-02  
 13  +3.5552e-01  +3.7427e-01  1.88e-02  4.08e-05  2.79e-03  7.22e-06  1.74e-04  4.15e-02  
 14  +3.5503e-01  +3.7307e-01  1.80e-02  3.77e-05  2.59e-03  7.85e-06  1.53e-04  3.14e-01  
 15  +3.5015e-01  +3.5287e-01  2.71e-03  5.66e-06  3.89e-04  1.31e-06  2.41e-05  9.90e-01  
 16  +3.4921e-01  +3.4924e-01  2.92e-05  6.08e-08  4.18e-06  1.36e-08  2.61e-07  9.90e-01  
 17  +3.4920e-01  +3.4920e-01  2.92e-07  6.08e-10  4.18e-08  1.36e-10  2.61e-09  9.90e-01  
 18  +3.4920e-01  +3.4920e-01  2.92e-09  6.08e-12  4.18e-10  1.36e-12  2.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0982ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:38 PM: Optimal value: 3.492e-01
(CVXPY) Sep 20 03:11:38 PM: Compilation took 8.075e-03 seconds
(CVXPY) Sep 20 03:11:38 PM: Solver (including time spent in interface) took 8.504e-03 seconds
Iteration: 6, Objective: 0.3492
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:38 PM: Your problem has 575 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Finished problem compilation (took 3.936e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 575
  constraints   = 1075
  nnz(P)        = 0
  nnz(A)        = 7261
  cones (total) = 1
    : Nonnegative = 1,  numel = 1075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0164e+02  5.01e+02  9.56e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.7991e-01  +1.0628e+02  1.06e+02  3.99e-01  2.05e+01  3.86e-03  5.55e-01  6.07e-01  
  2  +5.3060e-01  +1.2063e+01  1.15e+01  1.21e-01  7.89e+00  1.46e-02  2.28e-01  9.54e-01  
  3  +5.0332e-01  +2.5182e+00  2.01e+00  4.21e-02  2.75e+00  3.32e-05  1.75e-01  6.88e-01  
  4  +4.9970e-01  +1.2538e+00  7.54e-01  1.45e-02  9.90e-01  2.62e-05  5.74e-02  7.06e-01  
  5  +4.8067e-01  +1.3972e+00  9.17e-01  3.52e-03  2.50e-01  1.78e-04  9.26e-03  9.48e-01  
  6  +4.6096e-01  +1.1244e+00  6.63e-01  1.91e-03  1.35e-01  1.80e-04  5.25e-03  5.64e-01  
  7  +4.4570e-01  +9.9171e-01  5.46e-01  1.35e-03  9.49e-02  1.72e-04  3.85e-03  3.78e-01  
  8  +4.2726e-01  +7.9399e-01  3.67e-01  9.30e-04  6.46e-02  1.42e-04  2.84e-03  6.91e-01  
  9  +3.9184e-01  +5.6954e-01  1.78e-01  4.07e-04  2.80e-02  5.99e-05  1.38e-03  5.67e-01  
 10  +3.7928e-01  +5.0340e-01  1.24e-01  2.78e-04  1.90e-02  4.24e-05  9.92e-04  3.29e-01  
 11  +3.6139e-01  +4.1052e-01  4.91e-02  1.08e-04  7.35e-03  1.86e-05  4.21e-04  7.09e-01  
 12  +3.5370e-01  +3.7401e-01  2.03e-02  4.32e-05  2.95e-03  8.51e-06  1.76e-04  6.64e-01  
 13  +3.5339e-01  +3.7174e-01  1.83e-02  4.02e-05  2.74e-03  7.03e-06  1.72e-04  8.12e-02  
 14  +3.5336e-01  +3.7161e-01  1.82e-02  3.99e-05  2.72e-03  7.10e-06  1.70e-04  5.38e-02  
 15  +3.5314e-01  +3.7166e-01  1.85e-02  3.89e-05  2.67e-03  7.94e-06  1.59e-04  2.03e-01  
 16  +3.4832e-01  +3.5088e-01  2.56e-03  5.37e-06  3.67e-04  1.22e-06  2.30e-05  9.90e-01  
 17  +3.4741e-01  +3.4744e-01  2.89e-05  6.04e-08  4.14e-06  1.32e-08  2.62e-07  9.89e-01  
 18  +3.4740e-01  +3.4740e-01  2.89e-07  6.04e-10  4.14e-08  1.32e-10  2.62e-09  9.90e-01  
 19  +3.4740e-01  +3.4740e-01  2.89e-09  6.04e-12  4.14e-10  1.32e-12  2.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.914ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:38 PM: Optimal value: 3.474e-01
(CVXPY) Sep 20 03:11:38 PM: Compilation took 3.936e-03 seconds
(CVXPY) Sep 20 03:11:38 PM: Solver (including time spent in interface) took 1.232e-02 seconds
Iteration: 7, Objective: 0.3474
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:38 PM: Your problem has 584 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:38 PM: Finished problem compilation (took 8.316e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 584
  constraints   = 1084
  nnz(P)        = 0
  nnz(A)        = 7471
  cones (total) = 1
    : Nonnegative = 1,  numel = 1084

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0164e+02  5.01e+02  9.56e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.7978e-01  +1.0619e+02  1.06e+02  3.99e-01  2.03e+01  3.87e-03  5.53e-01  6.08e-01  
  2  +5.3022e-01  +1.1957e+01  1.14e+01  1.20e-01  7.75e+00  1.46e-02  2.25e-01  9.57e-01  
  3  +5.0318e-01  +2.4821e+00  1.98e+00  4.13e-02  2.70e+00  3.34e-05  1.71e-01  7.12e-01  
  4  +4.9937e-01  +1.2522e+00  7.53e-01  1.39e-02  9.53e-01  2.91e-05  5.24e-02  7.30e-01  
  5  +4.7894e-01  +1.3000e+00  8.21e-01  3.12e-03  2.22e-01  1.78e-04  8.33e-03  9.33e-01  
  6  +4.6436e-01  +1.1458e+00  6.81e-01  2.01e-03  1.42e-01  1.92e-04  5.50e-03  4.60e-01  
  7  +4.5204e-01  +1.0477e+00  5.96e-01  1.50e-03  1.06e-01  1.92e-04  4.20e-03  3.13e-01  
  8  +4.3523e-01  +8.7828e-01  4.43e-01  1.12e-03  7.80e-02  1.49e-04  3.29e-03  4.19e-01  
  9  +3.9829e-01  +6.1189e-01  2.14e-01  4.88e-04  3.37e-02  6.92e-05  1.60e-03  6.46e-01  
 10  +3.8119e-01  +5.1676e-01  1.36e-01  3.02e-04  2.08e-02  4.48e-05  1.06e-03  3.97e-01  
 11  +3.6603e-01  +4.3341e-01  6.74e-02  1.48e-04  1.01e-02  2.82e-05  5.61e-04  7.20e-01  
 12  +3.5452e-01  +3.7788e-01  2.34e-02  5.06e-05  3.45e-03  9.87e-06  2.04e-04  6.70e-01  
 13  +3.5421e-01  +3.7700e-01  2.28e-02  4.81e-05  3.30e-03  9.86e-06  1.93e-04  1.23e-01  
 14  +3.5047e-01  +3.5919e-01  8.72e-03  1.84e-05  1.26e-03  4.32e-06  7.68e-05  9.90e-01  
 15  +3.4753e-01  +3.4788e-01  3.50e-04  7.33e-07  5.02e-05  1.48e-07  3.18e-06  9.84e-01  
 16  +3.4740e-01  +3.4740e-01  3.51e-06  7.36e-09  5.04e-07  1.48e-09  3.20e-08  9.90e-01  
 17  +3.4740e-01  +3.4740e-01  3.51e-08  7.36e-11  5.04e-09  1.48e-11  3.20e-10  9.90e-01  
 18  +3.4740e-01  +3.4740e-01  3.51e-10  7.36e-13  5.04e-11  1.48e-13  3.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8119ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:38 PM: Optimal value: 3.474e-01
(CVXPY) Sep 20 03:11:38 PM: Compilation took 8.316e-03 seconds
(CVXPY) Sep 20 03:11:38 PM: Solver (including time spent in interface) took 8.698e-03 seconds
Iteration: 8, Objective: 0.3474
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:39 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 7524
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0164e+02  5.01e+02  9.56e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.7979e-01  +1.0616e+02  1.06e+02  3.99e-01  2.03e+01  3.87e-03  5.53e-01  6.08e-01  
  2  +5.3006e-01  +1.1916e+01  1.14e+01  1.20e-01  7.71e+00  1.46e-02  2.25e-01  9.58e-01  
  3  +5.0316e-01  +2.4772e+00  1.97e+00  4.12e-02  2.69e+00  3.35e-05  1.70e-01  7.16e-01  
  4  +4.9934e-01  +1.2641e+00  7.65e-01  1.40e-02  9.61e-01  2.98e-05  5.23e-02  7.29e-01  
  5  +4.7864e-01  +1.2740e+00  7.95e-01  3.02e-03  2.14e-01  1.76e-04  8.10e-03  9.26e-01  
  6  +4.6586e-01  +1.1553e+00  6.89e-01  2.04e-03  1.44e-01  2.00e-04  5.57e-03  4.56e-01  
  7  +4.5292e-01  +1.0501e+00  5.97e-01  1.51e-03  1.06e-01  1.98e-04  4.21e-03  3.25e-01  
  8  +4.3464e-01  +8.6774e-01  4.33e-01  1.09e-03  7.63e-02  1.50e-04  3.24e-03  4.68e-01  
  9  +3.9822e-01  +6.0955e-01  2.11e-01  4.86e-04  3.35e-02  6.78e-05  1.60e-03  6.23e-01  
 10  +3.8145e-01  +5.1708e-01  1.36e-01  3.04e-04  2.09e-02  4.40e-05  1.07e-03  3.84e-01  
 11  +3.6612e-01  +4.3367e-01  6.76e-02  1.49e-04  1.02e-02  2.76e-05  5.64e-04  7.13e-01  
 12  +3.5456e-01  +3.7800e-01  2.34e-02  5.08e-05  3.47e-03  9.68e-06  2.06e-04  6.70e-01  
 13  +3.5427e-01  +3.7719e-01  2.29e-02  4.85e-05  3.32e-03  9.71e-06  1.95e-04  1.16e-01  
 14  +3.5072e-01  +3.6017e-01  9.45e-03  1.99e-05  1.36e-03  4.67e-06  8.33e-05  9.90e-01  
 15  +3.4755e-01  +3.4796e-01  4.13e-04  8.68e-07  5.94e-05  1.71e-07  3.76e-06  9.86e-01  
 16  +3.4740e-01  +3.4741e-01  4.18e-06  8.76e-09  6.00e-07  1.72e-09  3.81e-08  9.90e-01  
 17  +3.4740e-01  +3.4740e-01  4.18e-08  8.76e-11  6.00e-09  1.72e-11  3.81e-10  9.90e-01  
 18  +3.4740e-01  +3.4740e-01  4.18e-10  8.76e-13  6.00e-11  1.73e-13  3.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.3016ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:39 PM: Optimal value: 3.474e-01
(CVXPY) Sep 20 03:11:39 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:39 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.3474
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:39 PM: Your problem has 593 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 593
  constraints   = 1093
  nnz(P)        = 0
  nnz(A)        = 7597
  cones (total) = 1
    : Nonnegative = 1,  numel = 1093

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0162e+02  5.01e+02  9.56e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.7944e-01  +1.0606e+02  1.05e+02  3.99e-01  2.02e+01  3.86e-03  5.53e-01  6.09e-01  
  2  +5.2984e-01  +1.1856e+01  1.13e+01  1.19e-01  7.64e+00  1.45e-02  2.24e-01  9.60e-01  
  3  +5.0309e-01  +2.4616e+00  1.96e+00  4.10e-02  2.67e+00  3.36e-05  1.68e-01  7.26e-01  
  4  +4.9926e-01  +1.2808e+00  7.82e-01  1.42e-02  9.69e-01  3.08e-05  5.19e-02  7.29e-01  
  5  +4.7842e-01  +1.2409e+00  7.62e-01  2.94e-03  2.08e-01  1.71e-04  7.90e-03  9.18e-01  
  6  +4.6567e-01  +1.1372e+00  6.72e-01  1.99e-03  1.40e-01  1.99e-04  5.42e-03  4.61e-01  
  7  +4.5292e-01  +1.0387e+00  5.86e-01  1.48e-03  1.04e-01  1.98e-04  4.15e-03  3.29e-01  
  8  +4.3135e-01  +8.4023e-01  4.09e-01  1.02e-03  7.10e-02  1.40e-04  3.06e-03  4.70e-01  
  9  +3.9749e-01  +6.0965e-01  2.12e-01  4.90e-04  3.36e-02  6.79e-05  1.62e-03  5.72e-01  
 10  +3.8044e-01  +5.1514e-01  1.35e-01  3.03e-04  2.07e-02  4.28e-05  1.07e-03  3.76e-01  
 11  +3.6322e-01  +4.2391e-01  6.07e-02  1.32e-04  8.97e-03  2.29e-05  5.05e-04  6.81e-01  
 12  +3.5478e-01  +3.8383e-01  2.91e-02  6.21e-05  4.22e-03  1.15e-05  2.52e-04  6.12e-01  
 13  +3.4788e-01  +3.5215e-01  4.26e-03  9.07e-06  6.14e-04  1.98e-06  3.93e-05  9.90e-01  
 14  +3.4643e-01  +3.4650e-01  7.17e-05  1.52e-07  1.03e-05  3.03e-08  6.77e-07  9.87e-01  
 15  +3.4640e-01  +3.4640e-01  7.17e-07  1.52e-09  1.03e-07  3.03e-10  6.77e-09  9.90e-01  
 16  +3.4640e-01  +3.4640e-01  7.17e-09  1.52e-11  1.03e-09  3.03e-12  6.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8039ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:39 PM: Optimal value: 3.464e-01
(CVXPY) Sep 20 03:11:39 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:39 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.3464
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:39 PM: Your problem has 596 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 596
  constraints   = 1096
  nnz(P)        = 0
  nnz(A)        = 7617
  cones (total) = 1
    : Nonnegative = 1,  numel = 1096

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +5.0162e+02  5.01e+02  9.56e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.7935e-01  +1.0603e+02  1.05e+02  3.99e-01  2.02e+01  3.87e-03  5.52e-01  6.09e-01  
  2  +5.2967e-01  +1.1814e+01  1.13e+01  1.19e-01  7.60e+00  1.46e-02  2.23e-01  9.61e-01  
  3  +5.0303e-01  +2.4476e+00  1.94e+00  4.07e-02  2.65e+00  3.37e-05  1.66e-01  7.36e-01  
  4  +4.9911e-01  +1.2632e+00  7.64e-01  1.37e-02  9.35e-01  3.14e-05  4.94e-02  7.40e-01  
  5  +4.7782e-01  +1.2167e+00  7.39e-01  2.80e-03  1.98e-01  1.73e-04  7.53e-03  9.19e-01  
  6  +4.6637e-01  +1.1383e+00  6.72e-01  1.97e-03  1.38e-01  2.07e-04  5.34e-03  4.49e-01  
  7  +4.5094e-01  +1.0142e+00  5.63e-01  1.41e-03  9.89e-02  1.96e-04  3.96e-03  3.61e-01  
  8  +4.3167e-01  +8.4449e-01  4.13e-01  1.02e-03  7.10e-02  1.51e-04  3.05e-03  4.79e-01  
  9  +3.9092e-01  +5.6318e-01  1.72e-01  3.94e-04  2.70e-02  5.33e-05  1.33e-03  6.89e-01  
 10  +3.7690e-01  +4.9118e-01  1.14e-01  2.56e-04  1.75e-02  3.59e-05  9.16e-04  3.57e-01  
 11  +3.6272e-01  +4.2099e-01  5.83e-02  1.26e-04  8.55e-03  2.04e-05  4.81e-04  5.70e-01  
 12  +3.5764e-01  +3.9512e-01  3.75e-02  8.13e-05  5.51e-03  1.55e-05  3.22e-04  6.24e-01  
 13  +3.4984e-01  +3.6121e-01  1.14e-02  2.43e-05  1.64e-03  4.62e-06  1.02e-04  7.10e-01  
 14  +3.4693e-01  +3.4862e-01  1.69e-03  3.60e-06  2.43e-04  6.74e-07  1.57e-05  8.55e-01  
 15  +3.4641e-01  +3.4644e-01  2.81e-05  5.96e-08  4.03e-06  1.10e-08  2.63e-07  9.84e-01  
 16  +3.4640e-01  +3.4640e-01  2.81e-07  5.96e-10  4.03e-08  1.10e-10  2.63e-09  9.90e-01  
 17  +3.4640e-01  +3.4640e-01  2.81e-09  5.96e-12  4.03e-10  1.10e-12  2.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.6106ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:39 PM: Optimal value: 3.464e-01
(CVXPY) Sep 20 03:11:39 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:39 PM: Solver (including time spent in interface) took 1.510e-02 seconds
Iteration: 11, Objective: 0.3464
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:39 PM: Your problem has 598 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 598
  constraints   = 1098
  nnz(P)        = 0
  nnz(A)        = 7653
  cones (total) = 1
    : Nonnegative = 1,  numel = 1098

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +5.0160e+02  5.01e+02  9.56e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.7930e-01  +1.0602e+02  1.05e+02  3.99e-01  2.01e+01  3.87e-03  5.52e-01  6.09e-01  
  2  +5.2959e-01  +1.1794e+01  1.13e+01  1.19e-01  7.57e+00  1.46e-02  2.23e-01  9.62e-01  
  3  +5.0301e-01  +2.4408e+00  1.94e+00  4.05e-02  2.64e+00  3.38e-05  1.65e-01  7.42e-01  
  4  +4.9911e-01  +1.2785e+00  7.79e-01  1.39e-02  9.49e-01  3.19e-05  4.98e-02  7.35e-01  
  5  +4.7757e-01  +1.2098e+00  7.32e-01  2.76e-03  1.95e-01  1.73e-04  7.42e-03  9.15e-01  
  6  +4.6655e-01  +1.1411e+00  6.75e-01  1.97e-03  1.38e-01  2.10e-04  5.33e-03  4.47e-01  
  7  +4.5138e-01  +1.0183e+00  5.67e-01  1.43e-03  1.00e-01  1.97e-04  4.01e-03  3.53e-01  
  8  +4.3058e-01  +8.3889e-01  4.08e-01  1.01e-03  6.97e-02  1.47e-04  3.00e-03  4.73e-01  
  9  +3.9063e-01  +5.6378e-01  1.73e-01  3.96e-04  2.71e-02  5.39e-05  1.34e-03  6.77e-01  
 10  +3.6877e-01  +4.4939e-01  8.06e-02  1.79e-04  1.22e-02  2.63e-05  6.65e-04  5.89e-01  
 11  +3.6352e-01  +4.2483e-01  6.13e-02  1.33e-04  9.01e-03  2.20e-05  5.05e-04  3.62e-01  
 12  +3.5498e-01  +3.8189e-01  2.69e-02  5.77e-05  3.91e-03  1.39e-05  2.33e-04  9.90e-01  
 13  +3.4701e-01  +3.4880e-01  1.79e-03  3.81e-06  2.58e-04  7.65e-07  1.65e-05  9.49e-01  
 14  +3.4641e-01  +3.4645e-01  4.07e-05  8.66e-08  5.85e-06  1.72e-08  3.81e-07  9.80e-01  
 15  +3.4640e-01  +3.4640e-01  4.08e-07  8.66e-10  5.85e-08  1.72e-10  3.81e-09  9.90e-01  
 16  +3.4640e-01  +3.4640e-01  4.08e-09  8.66e-12  5.85e-10  1.72e-12  3.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.9671ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:39 PM: Optimal value: 3.464e-01
(CVXPY) Sep 20 03:11:39 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:39 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 12, Objective: 0.3464
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:11:39 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:11:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:11:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:11:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:11:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:11:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:11:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:11:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:11:39 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 7661
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0164e+02  5.01e+02  9.56e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.7905e-01  +1.0600e+02  1.05e+02  4.00e-01  2.01e+01  3.86e-03  5.53e-01  6.09e-01  
  2  +5.2954e-01  +1.1785e+01  1.13e+01  1.18e-01  7.54e+00  1.46e-02  2.23e-01  9.63e-01  
  3  +5.0298e-01  +2.4341e+00  1.93e+00  4.04e-02  2.63e+00  3.39e-05  1.64e-01  7.47e-01  
  4  +4.9899e-01  +1.2761e+00  7.77e-01  1.37e-02  9.34e-01  3.27e-05  4.85e-02  7.43e-01  
  5  +4.7733e-01  +1.2049e+00  7.28e-01  2.76e-03  1.95e-01  1.73e-04  7.44e-03  9.15e-01  
  6  +4.6659e-01  +1.1374e+00  6.71e-01  1.98e-03  1.39e-01  2.08e-04  5.37e-03  4.47e-01  
  7  +4.5199e-01  +1.0226e+00  5.71e-01  1.44e-03  1.01e-01  2.00e-04  4.04e-03  3.47e-01  
  8  +4.3130e-01  +8.3936e-01  4.08e-01  1.02e-03  7.07e-02  1.50e-04  3.05e-03  5.27e-01  
  9  +3.8967e-01  +5.5627e-01  1.67e-01  3.81e-04  2.61e-02  5.12e-05  1.29e-03  6.96e-01  
 10  +3.6757e-01  +4.4251e-01  7.49e-02  1.67e-04  1.14e-02  2.41e-05  6.22e-04  6.02e-01  
 11  +3.6326e-01  +4.2260e-01  5.93e-02  1.29e-04  8.75e-03  2.15e-05  4.91e-04  3.72e-01  
 12  +3.5363e-01  +3.7626e-01  2.26e-02  4.85e-05  3.28e-03  1.15e-05  1.97e-04  9.90e-01  
 13  +3.4687e-01  +3.4823e-01  1.36e-03  2.89e-06  1.95e-04  5.80e-07  1.26e-05  9.66e-01  
 14  +3.4641e-01  +3.4644e-01  2.69e-05  5.72e-08  3.86e-06  1.14e-08  2.52e-07  9.82e-01  
 15  +3.4640e-01  +3.4640e-01  2.69e-07  5.72e-10  3.86e-08  1.14e-10  2.52e-09  9.90e-01  
 16  +3.4640e-01  +3.4640e-01  2.69e-09  5.72e-12  3.86e-10  1.14e-12  2.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.6009ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:11:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:11:39 PM: Optimal value: 3.464e-01
(CVXPY) Sep 20 03:11:39 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:11:39 PM: Solver (including time spent in interface) took 1.678e-02 seconds
FULL MODEL:
  Accruacy: 0.642
  Our objective: 0.28400000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.176)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1)                       <-- (term's our objective: 0.03)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.204074859619141
Best over terms:
  Our final objective: 0.176
    Its accruacy: 0.588
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.176
  Highest accruacy: 0.588
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

