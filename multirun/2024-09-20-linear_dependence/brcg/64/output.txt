Command:
python test_script.py -s linear_dependence -d 2 -n 1000 --seed 21 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5860000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 2.

Computed total variation: 0.5860000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:53 PM: Your problem has 505 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:53 PM: Finished problem compilation (took 5.833e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 505
  constraints   = 1005
  nnz(P)        = 0
  nnz(A)        = 2505
  cones (total) = 1
    : Nonnegative = 1,  numel = 1005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9867e-01  +5.0180e+02  5.01e+02  9.48e-01  2.24e+01  1.00e+00  1.01e+00   ------   
  1  +6.3493e-01  +8.7712e+01  8.71e+01  2.57e-01  1.05e+01  4.49e-03  3.90e-01  7.26e-01  
  2  +5.5167e-01  +1.5052e+01  1.45e+01  1.05e-01  4.96e+00  5.63e-03  1.91e-01  6.61e-01  
  3  +4.9350e-01  +2.7146e+00  2.22e+00  3.67e-02  1.67e+00  1.00e-02  1.19e-01  9.25e-01  
  4  +3.8034e-01  +3.0111e+00  2.63e+00  6.28e-03  3.10e-01  7.98e-02  1.43e-02  8.97e-01  
  5  +3.5516e-01  +1.5286e+00  1.17e+00  3.22e-03  1.55e-01  6.53e-04  8.06e-03  6.33e-01  
  6  +2.5912e-01  +5.3683e-01  2.78e-01  7.40e-04  3.41e-02  5.03e-06  2.48e-03  7.49e-01  
  7  +2.1074e-01  +2.3789e-01  2.72e-02  7.78e-05  3.48e-03  9.40e-06  4.46e-04  9.45e-01  
  8  +2.0716e-01  +2.0757e-01  4.10e-04  1.17e-06  5.25e-05  1.06e-07  7.27e-06  9.84e-01  
  9  +2.0710e-01  +2.0710e-01  4.09e-06  1.17e-08  5.24e-07  1.06e-09  7.28e-08  9.90e-01  
 10  +2.0710e-01  +2.0710e-01  4.09e-08  1.17e-10  5.24e-09  1.06e-11  7.28e-10  9.90e-01  
 11  +2.0710e-01  +2.0710e-01  4.09e-10  1.17e-12  5.24e-11  1.06e-13  7.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8777ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:53 PM: Optimal value: 2.071e-01
(CVXPY) Sep 20 03:03:53 PM: Compilation took 5.833e-03 seconds
(CVXPY) Sep 20 03:03:53 PM: Solver (including time spent in interface) took 4.624e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.2071
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:53 PM: Your problem has 506 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:53 PM: Finished problem compilation (took 5.293e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 506
  constraints   = 1006
  nnz(P)        = 0
  nnz(A)        = 2697
  cones (total) = 1
    : Nonnegative = 1,  numel = 1006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9864e-01  +5.0182e+02  5.01e+02  9.48e-01  2.31e+01  1.00e+00  1.01e+00   ------   
  1  +6.3420e-01  +8.8104e+01  8.75e+01  2.60e-01  1.09e+01  4.48e-03  3.94e-01  7.24e-01  
  2  +5.5167e-01  +1.5080e+01  1.45e+01  1.06e-01  5.13e+00  5.74e-03  1.92e-01  6.65e-01  
  3  +4.9292e-01  +2.5989e+00  2.11e+00  3.52e-02  1.65e+00  1.00e-02  1.16e-01  9.62e-01  
  4  +3.7689e-01  +2.8515e+00  2.47e+00  6.04e-03  3.07e-01  8.10e-02  1.40e-02  8.97e-01  
  5  +3.5223e-01  +1.7474e+00  1.40e+00  3.64e-03  1.81e-01  1.86e-02  9.02e-03  5.12e-01  
  6  +2.9134e-01  +8.9381e-01  6.02e-01  1.62e-03  7.81e-02  1.82e-03  4.88e-03  6.67e-01  
  7  +2.2731e-01  +3.3751e-01  1.10e-01  3.13e-04  1.45e-02  1.15e-05  1.42e-03  7.77e-01  
  8  +2.0805e-01  +2.1344e-01  5.39e-03  1.55e-05  7.13e-04  1.00e-06  9.41e-05  9.55e-01  
  9  +2.0711e-01  +2.0716e-01  5.46e-05  1.57e-07  7.22e-06  1.02e-08  9.75e-07  9.90e-01  
 10  +2.0710e-01  +2.0710e-01  5.46e-07  1.57e-09  7.21e-08  1.02e-10  9.75e-09  9.90e-01  
 11  +2.0710e-01  +2.0710e-01  5.46e-09  1.57e-11  7.21e-10  1.02e-12  9.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9421ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:53 PM: Optimal value: 2.071e-01
(CVXPY) Sep 20 03:03:53 PM: Compilation took 5.293e-03 seconds
(CVXPY) Sep 20 03:03:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2071
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:53 PM: Your problem has 507 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:53 PM: Finished problem compilation (took 5.292e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 507
  constraints   = 1007
  nnz(P)        = 0
  nnz(A)        = 2896
  cones (total) = 1
    : Nonnegative = 1,  numel = 1007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9843e-01  +5.0181e+02  5.01e+02  9.48e-01  2.39e+01  1.00e+00  1.01e+00   ------   
  1  +6.2421e-01  +9.0463e+01  8.98e+01  2.78e-01  1.18e+01  4.34e-03  4.16e-01  7.10e-01  
  2  +5.5171e-01  +1.5260e+01  1.47e+01  1.07e-01  5.37e+00  6.32e-03  1.94e-01  6.94e-01  
  3  +4.9266e-01  +2.4344e+00  1.94e+00  3.37e-02  1.63e+00  8.92e-03  1.19e-01  9.90e-01  
  4  +3.6354e-01  +2.6771e+00  2.31e+00  5.59e-03  2.93e-01  8.07e-02  1.31e-02  9.05e-01  
  5  +3.3672e-01  +1.3055e+00  9.69e-01  2.72e-03  1.38e-01  6.41e-04  7.16e-03  6.28e-01  
  6  +2.4926e-01  +4.7391e-01  2.25e-01  6.16e-04  3.00e-02  4.78e-06  2.23e-03  7.43e-01  
  7  +2.1001e-01  +2.2951e-01  1.95e-02  5.60e-05  2.67e-03  5.76e-06  3.26e-04  9.50e-01  
  8  +2.0718e-01  +2.0769e-01  5.12e-04  1.47e-06  7.00e-05  1.39e-07  9.11e-06  9.73e-01  
  9  +2.0710e-01  +2.0711e-01  5.11e-06  1.47e-08  6.99e-07  1.39e-09  9.12e-08  9.90e-01  
 10  +2.0710e-01  +2.0710e-01  5.11e-08  1.47e-10  6.99e-09  1.39e-11  9.12e-10  9.90e-01  
 11  +2.0710e-01  +2.0710e-01  5.11e-10  1.47e-12  6.99e-11  1.39e-13  9.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9961ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:53 PM: Optimal value: 2.071e-01
(CVXPY) Sep 20 03:03:53 PM: Compilation took 5.292e-03 seconds
(CVXPY) Sep 20 03:03:53 PM: Solver (including time spent in interface) took 4.631e-03 seconds
FULL MODEL:
  Accruacy: 0.793
  Our objective: 0.5860000000000001

IF 
    (x0 = 0) <-- (term's our objective: 0.586)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7904534339904785
Best over terms:
  Our final objective: 0.5860000000000001
    Its accruacy: 0.793
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5860000000000001
  Highest accruacy: 0.793
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

