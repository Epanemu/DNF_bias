Command:
python test_script.py -s linear_dependence -d 4 -n 50 --seed 34 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.36000000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.56
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:43 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:43 PM: Finished problem compilation (took 4.547e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8786e-01  +2.6402e+01  2.59e+01  8.15e-01  5.51e+00  1.00e+00  1.10e+00   ------   
  1  +5.8590e-01  +5.2657e+00  4.68e+00  2.78e-01  2.79e+00  4.02e-03  5.13e-01  6.79e-01  
  2  +4.8991e-01  +1.2153e+00  7.25e-01  6.20e-02  7.22e-01  1.07e-02  1.65e-01  8.52e-01  
  3  +4.0847e-01  +7.7090e-01  3.62e-01  1.84e-02  2.21e-01  7.38e-03  5.80e-02  7.09e-01  
  4  +3.5834e-01  +4.2159e-01  6.32e-02  3.35e-03  3.85e-02  8.23e-04  1.46e-02  8.13e-01  
  5  +3.4123e-01  +3.4602e-01  4.79e-03  2.27e-04  2.61e-03  5.21e-05  1.29e-03  9.51e-01  
  6  +3.4011e-01  +3.4016e-01  5.04e-05  2.37e-06  2.73e-05  5.42e-07  1.37e-05  9.89e-01  
  7  +3.4010e-01  +3.4010e-01  5.04e-07  2.37e-08  2.73e-07  5.42e-09  1.37e-07  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  5.04e-09  2.37e-10  2.73e-09  5.42e-11  1.37e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 196.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:43 PM: Optimal value: 3.401e-01
(CVXPY) Sep 20 03:05:43 PM: Compilation took 4.547e-03 seconds
(CVXPY) Sep 20 03:05:43 PM: Solver (including time spent in interface) took 9.940e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:43 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:43 PM: Finished problem compilation (took 4.666e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 256
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7477e-01  +2.6954e+01  2.65e+01  8.32e-01  5.80e+00  1.00e+00  1.15e+00   ------   
  1  +5.2647e-01  +5.4123e+00  4.89e+00  3.02e-01  2.92e+00  3.97e-03  5.55e-01  6.65e-01  
  2  +4.0243e-01  +1.3869e+00  9.84e-01  6.45e-02  7.65e-01  1.29e-02  1.78e-01  8.27e-01  
  3  +3.1385e-01  +6.6956e-01  3.56e-01  1.83e-02  2.18e-01  5.18e-03  6.09e-02  7.24e-01  
  4  +2.6257e-01  +4.0665e-01  1.44e-01  6.50e-03  7.71e-02  2.06e-03  2.47e-02  6.87e-01  
  5  +2.3709e-01  +2.8865e-01  5.16e-02  2.44e-03  2.85e-02  4.74e-04  9.89e-03  9.90e-01  
  6  +2.2232e-01  +2.2925e-01  6.93e-03  3.04e-04  3.57e-03  6.48e-05  1.30e-03  8.79e-01  
  7  +2.2039e-01  +2.2066e-01  2.73e-04  1.21e-05  1.41e-04  1.82e-06  5.29e-05  9.59e-01  
  8  +2.2030e-01  +2.2032e-01  1.33e-05  6.01e-07  6.98e-06  9.24e-08  2.79e-06  9.62e-01  
  9  +2.2030e-01  +2.2030e-01  1.33e-07  6.03e-09  6.99e-08  9.23e-10  2.81e-08  9.90e-01  
 10  +2.2030e-01  +2.2030e-01  1.33e-09  6.03e-11  7.00e-10  9.24e-12  2.81e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 230.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:43 PM: Optimal value: 2.203e-01
(CVXPY) Sep 20 03:05:43 PM: Compilation took 4.666e-03 seconds
(CVXPY) Sep 20 03:05:43 PM: Solver (including time spent in interface) took 9.925e-04 seconds
Iteration: 2, Objective: 0.2203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:43 PM: Your problem has 45 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:43 PM: Finished problem compilation (took 3.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 45
  constraints   = 70
  nnz(P)        = 0
  nnz(A)        = 261
  cones (total) = 1
    : Nonnegative = 1,  numel = 70

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7440e-01  +2.6929e+01  2.65e+01  8.34e-01  5.79e+00  1.00e+00  1.15e+00   ------   
  1  +5.2392e-01  +5.4177e+00  4.89e+00  3.04e-01  2.91e+00  3.96e-03  5.58e-01  6.64e-01  
  2  +4.0021e-01  +1.3710e+00  9.71e-01  6.36e-02  7.53e-01  1.32e-02  1.76e-01  8.35e-01  
  3  +3.0418e-01  +6.1778e-01  3.14e-01  1.56e-02  1.86e-01  4.84e-03  5.20e-02  7.64e-01  
  4  +2.7807e-01  +4.9399e-01  2.16e-01  9.97e-03  1.18e-01  3.42e-03  3.50e-02  3.85e-01  
  5  +2.3413e-01  +2.8728e-01  5.31e-02  2.54e-03  2.95e-02  4.00e-04  9.90e-03  9.90e-01  
  6  +2.2173e-01  +2.2749e-01  5.76e-03  2.66e-04  3.10e-03  4.29e-05  1.08e-03  8.97e-01  
  7  +2.2038e-01  +2.2067e-01  2.84e-04  1.33e-05  1.54e-04  1.40e-06  5.55e-05  9.49e-01  
  8  +2.2031e-01  +2.2033e-01  2.04e-05  9.72e-07  1.12e-05  1.16e-07  4.39e-06  9.35e-01  
  9  +2.2030e-01  +2.2030e-01  2.07e-07  9.86e-09  1.13e-07  1.17e-09  4.47e-08  9.90e-01  
 10  +2.2030e-01  +2.2030e-01  2.07e-09  9.86e-11  1.13e-09  1.17e-11  4.47e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 251.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:43 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:43 PM: Optimal value: 2.203e-01
(CVXPY) Sep 20 03:05:43 PM: Compilation took 3.004e-03 seconds
(CVXPY) Sep 20 03:05:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.78
  Our objective: 0.5599999999999999

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.36)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x3 = 0)                       <-- (term's our objective: 0.36)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.9483256340026855
Best over terms:
  Our final objective: 0.36000000000000004
    Its accruacy: 0.68
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.36000000000000004
  Highest accruacy: 0.68
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

