Command:
python test_script.py -s linear_dependence -d 5 -n 1000 --seed 21 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29200000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.312
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:49 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Finished problem compilation (took 5.015e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +5.0092e+02  5.00e+02  9.52e-01  2.87e+01  1.00e+00  1.00e+00   ------   
  1  +5.9905e-01  +1.0059e+02  1.00e+02  3.51e-01  1.66e+01  3.99e-03  5.04e-01  6.46e-01  
  2  +5.4427e-01  +1.4330e+01  1.38e+01  1.25e-01  7.32e+00  1.00e-02  2.28e-01  7.98e-01  
  3  +5.0295e-01  +2.2153e+00  1.71e+00  3.50e-02  1.96e+00  1.36e-05  2.10e-01  3.74e-01  
  4  +5.0018e-01  +8.1902e-01  3.19e-01  6.66e-03  3.86e-01  6.53e-06  5.36e-02  8.08e-01  
  5  +4.8146e-01  +1.2032e+00  7.22e-01  2.14e-03  1.28e-01  1.27e-04  6.10e-03  9.44e-01  
  6  +4.4460e-01  +6.2278e-01  1.78e-01  4.15e-04  2.45e-02  4.56e-05  1.35e-03  9.05e-01  
  7  +4.1516e-01  +4.9725e-01  8.21e-02  1.92e-04  1.13e-02  2.79e-05  7.85e-04  7.51e-01  
  8  +3.9600e-01  +4.0949e-01  1.35e-02  2.95e-05  1.73e-03  5.00e-06  1.33e-04  9.76e-01  
  9  +3.9224e-01  +3.9269e-01  4.53e-04  9.90e-07  5.79e-05  1.82e-07  4.61e-06  9.90e-01  
 10  +3.9210e-01  +3.9211e-01  4.52e-06  9.89e-09  5.78e-07  1.82e-09  4.61e-08  9.90e-01  
 11  +3.9210e-01  +3.9210e-01  4.52e-08  9.89e-11  5.78e-09  1.82e-11  4.61e-10  9.90e-01  
 12  +3.9210e-01  +3.9210e-01  4.52e-10  9.89e-13  5.78e-11  1.82e-13  4.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.9004ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:49 PM: Optimal value: 3.921e-01
(CVXPY) Sep 20 03:07:49 PM: Compilation took 5.015e-03 seconds
(CVXPY) Sep 20 03:07:49 PM: Solver (including time spent in interface) took 4.170e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3921
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:49 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Finished problem compilation (took 3.543e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 4968
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0117e+02  5.01e+02  9.53e-01  3.03e+01  1.00e+00  1.01e+00   ------   
  1  +5.9719e-01  +1.0078e+02  1.00e+02  3.53e-01  1.74e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4202e-01  +1.3836e+01  1.33e+01  1.21e-01  7.39e+00  1.03e-02  2.21e-01  8.20e-01  
  3  +5.0178e-01  +2.0320e+00  1.53e+00  3.14e-02  1.86e+00  1.35e-04  1.94e-01  5.11e-01  
  4  +4.9963e-01  +1.1158e+00  6.16e-01  1.21e-02  7.42e-01  9.22e-05  6.43e-02  7.68e-01  
  5  +4.8007e-01  +1.8016e+00  1.32e+00  4.74e-03  3.00e-01  7.57e-04  1.31e-02  9.90e-01  
  6  +4.6055e-01  +1.1784e+00  7.18e-01  2.08e-03  1.31e-01  4.27e-04  5.98e-03  5.80e-01  
  7  +4.4665e-01  +9.5718e-01  5.11e-01  1.28e-03  8.08e-02  3.25e-04  3.70e-03  4.57e-01  
  8  +4.3311e-01  +8.3197e-01  3.99e-01  7.12e-04  4.47e-02  3.20e-04  2.01e-03  6.92e-01  
  9  +4.2168e-01  +6.3028e-01  2.09e-01  4.89e-04  3.05e-02  5.58e-05  1.52e-03  8.99e-01  
 10  +3.7796e-01  +4.4702e-01  6.91e-02  1.22e-04  7.53e-03  2.39e-05  4.05e-04  7.49e-01  
 11  +3.5760e-01  +3.6707e-01  9.47e-03  1.69e-05  1.04e-03  3.76e-06  6.24e-05  8.81e-01  
 12  +3.5439e-01  +3.5510e-01  7.12e-04  1.27e-06  7.83e-05  4.21e-07  4.80e-06  9.90e-01  
 13  +3.5410e-01  +3.5411e-01  7.11e-06  1.27e-08  7.83e-07  4.21e-09  4.80e-08  9.90e-01  
 14  +3.5410e-01  +3.5410e-01  7.11e-08  1.27e-10  7.83e-09  4.21e-11  4.80e-10  9.90e-01  
 15  +3.5410e-01  +3.5410e-01  7.11e-10  1.27e-12  7.83e-11  4.21e-13  4.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1085ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:49 PM: Optimal value: 3.541e-01
(CVXPY) Sep 20 03:07:49 PM: Compilation took 3.543e-03 seconds
(CVXPY) Sep 20 03:07:49 PM: Solver (including time spent in interface) took 6.303e-03 seconds
Iteration: 2, Objective: 0.3541
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:49 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Finished problem compilation (took 3.987e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 5093
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0122e+02  5.01e+02  9.53e-01  3.03e+01  1.00e+00  1.01e+00   ------   
  1  +5.9676e-01  +1.0079e+02  1.00e+02  3.54e-01  1.74e+01  3.99e-03  5.06e-01  6.45e-01  
  2  +5.4164e-01  +1.3753e+01  1.32e+01  1.20e-01  7.30e+00  1.03e-02  2.20e-01  8.24e-01  
  3  +5.0130e-01  +1.9270e+00  1.43e+00  2.93e-02  1.74e+00  1.07e-04  1.88e-01  5.70e-01  
  4  +4.9872e-01  +1.0463e+00  5.48e-01  1.03e-02  6.30e-01  8.89e-05  4.80e-02  8.55e-01  
  5  +4.6708e-01  +1.0711e+00  6.04e-01  1.82e-03  1.15e-01  7.87e-04  5.02e-03  9.58e-01  
  6  +4.4577e-01  +8.7343e-01  4.28e-01  9.56e-04  6.03e-02  5.98e-04  2.65e-03  6.03e-01  
  7  +4.4208e-01  +8.2489e-01  3.83e-01  9.01e-04  5.68e-02  4.16e-04  2.54e-03  2.13e-01  
  8  +4.1485e-01  +6.8266e-01  2.68e-01  5.08e-04  3.18e-02  1.39e-04  1.50e-03  9.50e-01  
  9  +3.7251e-01  +4.6031e-01  8.78e-02  1.65e-04  1.02e-02  3.67e-05  5.67e-04  6.84e-01  
 10  +3.5088e-01  +3.6188e-01  1.10e-02  2.09e-05  1.28e-03  4.34e-06  8.09e-05  8.84e-01  
 11  +3.4783e-01  +3.4946e-01  1.64e-03  3.09e-06  1.90e-04  9.01e-07  1.23e-05  9.90e-01  
 12  +3.4721e-01  +3.4722e-01  1.78e-05  3.37e-08  2.07e-06  9.78e-09  1.35e-07  9.89e-01  
 13  +3.4720e-01  +3.4720e-01  1.78e-07  3.37e-10  2.07e-08  9.78e-11  1.35e-09  9.90e-01  
 14  +3.4720e-01  +3.4720e-01  1.78e-09  3.37e-12  2.07e-10  9.78e-13  1.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1475ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:49 PM: Optimal value: 3.472e-01
(CVXPY) Sep 20 03:07:49 PM: Compilation took 3.987e-03 seconds
(CVXPY) Sep 20 03:07:49 PM: Solver (including time spent in interface) took 5.559e-03 seconds
Iteration: 3, Objective: 0.3472
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:49 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Finished problem compilation (took 5.880e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 5373
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0118e+02  5.01e+02  9.53e-01  3.05e+01  1.00e+00  1.01e+00   ------   
  1  +5.9551e-01  +1.0096e+02  1.00e+02  3.56e-01  1.75e+01  3.99e-03  5.07e-01  6.43e-01  
  2  +5.4064e-01  +1.3541e+01  1.30e+01  1.18e-01  7.22e+00  1.05e-02  2.17e-01  8.34e-01  
  3  +5.0132e-01  +1.9825e+00  1.48e+00  3.05e-02  1.81e+00  2.15e-04  1.84e-01  5.86e-01  
  4  +4.9860e-01  +1.3058e+00  8.07e-01  1.47e-02  9.03e-01  2.16e-04  6.18e-02  7.68e-01  
  5  +4.6793e-01  +1.2613e+00  7.93e-01  2.61e-03  1.67e-01  1.39e-03  7.20e-03  9.47e-01  
  6  +4.5677e-01  +1.0925e+00  6.36e-01  1.73e-03  1.10e-01  9.91e-04  4.74e-03  5.20e-01  
  7  +4.5147e-01  +9.7856e-01  5.27e-01  1.29e-03  8.18e-02  4.88e-04  3.55e-03  6.32e-01  
  8  +4.2988e-01  +7.6704e-01  3.37e-01  8.18e-04  5.16e-02  7.99e-05  2.42e-03  9.66e-01  
  9  +3.8492e-01  +5.3467e-01  1.50e-01  3.00e-04  1.87e-02  3.78e-05  9.90e-04  6.34e-01  
 10  +3.5337e-01  +3.8216e-01  2.88e-02  5.86e-05  3.62e-03  1.64e-05  2.28e-04  9.90e-01  
 11  +3.4710e-01  +3.5571e-01  8.62e-03  1.75e-05  1.08e-03  4.80e-06  7.15e-05  7.79e-01  
 12  +3.4458e-01  +3.4544e-01  8.57e-04  1.74e-06  1.07e-04  4.69e-07  7.28e-06  9.05e-01  
 13  +3.4430e-01  +3.4432e-01  1.14e-05  2.31e-08  1.43e-06  6.05e-09  9.69e-08  9.90e-01  
 14  +3.4430e-01  +3.4430e-01  1.14e-07  2.31e-10  1.43e-08  6.06e-11  9.69e-10  9.90e-01  
 15  +3.4430e-01  +3.4430e-01  1.14e-09  2.31e-12  1.43e-10  6.06e-13  9.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5584ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:49 PM: Optimal value: 3.443e-01
(CVXPY) Sep 20 03:07:49 PM: Compilation took 5.880e-03 seconds
(CVXPY) Sep 20 03:07:49 PM: Solver (including time spent in interface) took 7.564e-03 seconds
Iteration: 4, Objective: 0.3443
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:49 PM: Your problem has 532 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:49 PM: Finished problem compilation (took 3.917e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 532
  constraints   = 1032
  nnz(P)        = 0
  nnz(A)        = 5385
  cones (total) = 1
    : Nonnegative = 1,  numel = 1032

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0114e+02  5.01e+02  9.53e-01  3.05e+01  1.00e+00  1.01e+00   ------   
  1  +5.9536e-01  +1.0094e+02  1.00e+02  3.56e-01  1.75e+01  3.99e-03  5.07e-01  6.43e-01  
  2  +5.4056e-01  +1.3522e+01  1.30e+01  1.18e-01  7.20e+00  1.05e-02  2.16e-01  8.35e-01  
  3  +5.0138e-01  +2.0058e+00  1.50e+00  3.09e-02  1.84e+00  2.45e-04  1.84e-01  5.82e-01  
  4  +4.9837e-01  +1.2467e+00  7.48e-01  1.34e-02  8.25e-01  2.44e-04  5.51e-02  8.03e-01  
  5  +4.6585e-01  +1.1302e+00  6.64e-01  2.11e-03  1.35e-01  1.62e-03  5.85e-03  9.32e-01  
  6  +4.5903e-01  +1.0940e+00  6.35e-01  1.66e-03  1.06e-01  1.58e-03  4.48e-03  3.53e-01  
  7  +4.5147e-01  +9.7553e-01  5.24e-01  1.26e-03  8.04e-02  6.80e-04  3.48e-03  6.01e-01  
  8  +4.2695e-01  +7.6525e-01  3.38e-01  8.05e-04  5.07e-02  6.07e-05  2.39e-03  9.24e-01  
  9  +3.8203e-01  +5.2437e-01  1.42e-01  2.88e-04  1.79e-02  2.67e-05  9.65e-04  6.29e-01  
 10  +3.5187e-01  +3.7668e-01  2.48e-02  5.10e-05  3.15e-03  1.00e-05  2.02e-04  9.18e-01  
 11  +3.4636e-01  +3.5247e-01  6.12e-03  1.25e-05  7.73e-04  2.95e-06  5.19e-05  9.08e-01  
 12  +3.4567e-01  +3.4975e-01  4.08e-03  8.29e-06  5.11e-04  1.99e-06  3.43e-05  3.89e-01  
 13  +3.4462e-01  +3.4552e-01  8.95e-04  1.82e-06  1.12e-04  4.36e-07  7.61e-06  9.90e-01  
 14  +3.4430e-01  +3.4431e-01  1.08e-05  2.19e-08  1.35e-06  5.18e-09  9.16e-08  9.89e-01  
 15  +3.4430e-01  +3.4430e-01  1.08e-07  2.19e-10  1.35e-08  5.18e-11  9.17e-10  9.90e-01  
 16  +3.4430e-01  +3.4430e-01  1.08e-09  2.19e-12  1.35e-10  5.19e-13  9.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4497ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:49 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:49 PM: Optimal value: 3.443e-01
(CVXPY) Sep 20 03:07:49 PM: Compilation took 3.917e-03 seconds
(CVXPY) Sep 20 03:07:49 PM: Solver (including time spent in interface) took 5.705e-03 seconds
FULL MODEL:
  Accruacy: 0.656
  Our objective: 0.312

IF 
    (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.292)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1)            <-- (term's our objective: 0.014)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.6675686836242676
Best over terms:
  Our final objective: 0.29200000000000004
    Its accruacy: 0.646
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29200000000000004
  Highest accruacy: 0.646
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

