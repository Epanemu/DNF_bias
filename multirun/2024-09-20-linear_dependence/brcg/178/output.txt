Command:
python test_script.py -s linear_dependence -d 5 -n 500 --seed 34 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.28
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.34
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:35 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:35 PM: Finished problem compilation (took 6.325e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +2.5087e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9860e-01  +5.0509e+01  4.99e+01  3.44e-01  1.15e+01  3.99e-03  5.05e-01  6.46e-01  
  2  +5.4252e-01  +7.2313e+00  6.69e+00  1.14e-01  4.67e+00  1.02e-02  2.23e-01  8.14e-01  
  3  +5.0097e-01  +1.3607e+00  8.60e-01  2.55e-02  1.01e+00  1.18e-03  1.89e-01  5.62e-01  
  4  +4.9899e-01  +7.0900e-01  2.10e-01  6.06e-03  2.47e-01  5.25e-04  3.87e-02  8.39e-01  
  5  +4.7240e-01  +7.1330e-01  2.41e-01  1.27e-03  5.32e-02  5.08e-03  3.94e-03  9.35e-01  
  6  +4.5349e-01  +5.8328e-01  1.30e-01  6.35e-04  2.64e-02  1.83e-03  2.18e-03  5.33e-01  
  7  +4.3600e-01  +4.8854e-01  5.25e-02  2.35e-04  9.70e-03  1.12e-04  9.01e-04  8.92e-01  
  8  +4.2816e-01  +4.5362e-01  2.55e-02  1.07e-04  4.41e-03  2.55e-05  4.38e-04  9.90e-01  
  9  +4.2033e-01  +4.2103e-01  7.03e-04  2.84e-06  1.17e-04  5.78e-07  1.25e-05  9.75e-01  
 10  +4.2010e-01  +4.2011e-01  7.04e-06  2.85e-08  1.18e-06  5.79e-09  1.25e-07  9.90e-01  
 11  +4.2010e-01  +4.2010e-01  7.04e-08  2.85e-10  1.18e-08  5.79e-11  1.25e-09  9.90e-01  
 12  +4.2010e-01  +4.2010e-01  7.04e-10  2.85e-12  1.18e-10  5.79e-13  1.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5163ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:35 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 03:07:35 PM: Compilation took 6.325e-03 seconds
(CVXPY) Sep 20 03:07:35 PM: Solver (including time spent in interface) took 1.504e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:35 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:35 PM: Finished problem compilation (took 3.123e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2523
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9860e-01  +2.5148e+02  2.51e+02  9.34e-01  2.11e+01  1.00e+00  1.01e+00   ------   
  1  +5.9325e-01  +5.0792e+01  5.02e+01  3.48e-01  1.20e+01  3.98e-03  5.11e-01  6.43e-01  
  2  +5.3734e-01  +6.6724e+00  6.14e+00  1.04e-01  4.47e+00  1.08e-02  2.06e-01  8.68e-01  
  3  +5.0060e-01  +1.6156e+00  1.12e+00  3.29e-02  1.37e+00  2.80e-03  1.56e-01  6.90e-01  
  4  +4.8639e-01  +9.2480e-01  4.38e-01  6.20e-03  2.75e-01  5.07e-03  1.85e-02  9.64e-01  
  5  +4.6803e-01  +7.9353e-01  3.26e-01  2.71e-03  1.21e-01  6.11e-03  7.98e-03  5.95e-01  
  6  +4.6568e-01  +8.0767e-01  3.42e-01  2.32e-03  1.03e-01  6.22e-03  6.67e-03  3.22e-01  
  7  +4.6127e-01  +8.2571e-01  3.64e-01  1.94e-03  8.62e-02  2.68e-03  5.57e-03  7.38e-01  
  8  +4.4503e-01  +7.4692e-01  3.02e-01  1.61e-03  7.15e-02  4.62e-04  4.68e-03  7.18e-01  
  9  +4.0398e-01  +5.4896e-01  1.45e-01  5.18e-04  2.28e-02  3.12e-04  1.60e-03  6.85e-01  
 10  +3.6829e-01  +3.9355e-01  2.53e-02  9.25e-05  4.04e-03  3.36e-05  3.22e-04  8.68e-01  
 11  +3.6044e-01  +3.6596e-01  5.52e-03  1.99e-05  8.80e-04  7.27e-06  7.22e-05  8.46e-01  
 12  +3.5832e-01  +3.5838e-01  5.99e-05  2.15e-07  9.54e-06  7.72e-08  7.91e-07  9.89e-01  
 13  +3.5830e-01  +3.5830e-01  5.98e-07  2.15e-09  9.54e-08  7.72e-10  7.91e-09  9.90e-01  
 14  +3.5830e-01  +3.5830e-01  5.98e-09  2.15e-11  9.54e-10  7.72e-12  7.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8523ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:35 PM: Optimal value: 3.583e-01
(CVXPY) Sep 20 03:07:35 PM: Compilation took 3.123e-03 seconds
(CVXPY) Sep 20 03:07:35 PM: Solver (including time spent in interface) took 3.000e-03 seconds
Iteration: 2, Objective: 0.3583
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:35 PM: Your problem has 278 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:35 PM: Finished problem compilation (took 3.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 278
  constraints   = 528
  nnz(P)        = 0
  nnz(A)        = 2616
  cones (total) = 1
    : Nonnegative = 1,  numel = 528

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9850e-01  +2.5144e+02  2.51e+02  9.35e-01  2.10e+01  1.00e+00  1.01e+00   ------   
  1  +5.9030e-01  +5.0849e+01  5.03e+01  3.50e-01  1.19e+01  3.98e-03  5.12e-01  6.42e-01  
  2  +5.3547e-01  +6.4683e+00  5.93e+00  9.94e-02  4.26e+00  1.11e-02  1.97e-01  8.88e-01  
  3  +4.9975e-01  +1.6521e+00  1.15e+00  3.32e-02  1.39e+00  3.52e-03  1.36e-01  7.84e-01  
  4  +4.7047e-01  +1.7041e+00  1.23e+00  9.93e-03  4.39e-01  1.25e-02  2.77e-02  9.07e-01  
  5  +4.4329e-01  +1.0594e+00  6.16e-01  3.89e-03  1.71e-01  6.15e-03  1.16e-02  6.35e-01  
  6  +4.3211e-01  +9.6047e-01  5.28e-01  2.65e-03  1.17e-01  4.93e-03  7.71e-03  4.97e-01  
  7  +4.2862e-01  +9.3323e-01  5.05e-01  2.22e-03  9.75e-02  3.90e-03  6.42e-03  3.85e-01  
  8  +4.1471e-01  +7.5085e-01  3.36e-01  1.73e-03  7.55e-02  2.66e-04  5.43e-03  6.26e-01  
  9  +3.7476e-01  +5.3494e-01  1.60e-01  6.54e-04  2.83e-02  1.39e-04  2.25e-03  6.18e-01  
 10  +3.4326e-01  +3.7372e-01  3.05e-02  1.25e-04  5.36e-03  2.06e-05  5.08e-04  8.12e-01  
 11  +3.3603e-01  +3.4080e-01  4.77e-03  1.96e-05  8.35e-04  4.34e-06  8.41e-05  9.46e-01  
 12  +3.3571e-01  +3.3956e-01  3.85e-03  1.55e-05  6.62e-04  3.57e-06  6.67e-05  2.95e-01  
 13  +3.3462e-01  +3.3521e-01  5.92e-04  2.38e-06  1.02e-04  5.64e-07  1.04e-05  9.90e-01  
 14  +3.3440e-01  +3.3441e-01  6.12e-06  2.46e-08  1.05e-06  5.78e-09  1.07e-07  9.90e-01  
 15  +3.3440e-01  +3.3440e-01  6.12e-08  2.46e-10  1.05e-08  5.78e-11  1.07e-09  9.90e-01  
 16  +3.3440e-01  +3.3440e-01  6.12e-10  2.46e-12  1.05e-10  5.78e-13  1.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.4351ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:35 PM: Optimal value: 3.344e-01
(CVXPY) Sep 20 03:07:35 PM: Compilation took 3.511e-03 seconds
(CVXPY) Sep 20 03:07:35 PM: Solver (including time spent in interface) took 3.012e-03 seconds
Iteration: 3, Objective: 0.3344
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:35 PM: Your problem has 280 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:35 PM: Finished problem compilation (took 3.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 280
  constraints   = 530
  nnz(P)        = 0
  nnz(A)        = 2649
  cones (total) = 1
    : Nonnegative = 1,  numel = 530

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9847e-01  +2.5146e+02  2.51e+02  9.35e-01  2.10e+01  1.00e+00  1.01e+00   ------   
  1  +5.8976e-01  +5.0860e+01  5.03e+01  3.51e-01  1.19e+01  3.98e-03  5.12e-01  6.42e-01  
  2  +5.3521e-01  +6.4413e+00  5.91e+00  9.85e-02  4.22e+00  1.11e-02  1.96e-01  8.91e-01  
  3  +4.9976e-01  +1.6565e+00  1.16e+00  3.32e-02  1.39e+00  3.54e-03  1.34e-01  7.91e-01  
  4  +4.6734e-01  +1.5919e+00  1.12e+00  8.43e-03  3.73e-01  1.34e-02  2.35e-02  9.08e-01  
  5  +4.4208e-01  +1.1629e+00  7.21e-01  4.09e-03  1.80e-01  9.13e-03  1.17e-02  5.65e-01  
  6  +4.2787e-01  +1.0698e+00  6.42e-01  2.89e-03  1.27e-01  8.21e-03  8.28e-03  4.01e-01  
  7  +4.1694e-01  +8.1963e-01  4.03e-01  2.14e-03  9.34e-02  6.47e-05  6.67e-03  7.04e-01  
  8  +3.7250e-01  +5.4956e-01  1.77e-01  7.80e-04  3.37e-02  4.58e-05  2.73e-03  6.44e-01  
  9  +3.4542e-01  +4.0066e-01  5.52e-02  2.42e-04  1.03e-02  2.27e-05  9.82e-04  7.18e-01  
 10  +3.4064e-01  +3.7401e-01  3.34e-02  1.49e-04  6.34e-03  1.83e-05  6.50e-04  5.72e-01  
 11  +3.4042e-01  +3.7350e-01  3.31e-02  1.47e-04  6.27e-03  1.97e-05  6.34e-04  1.39e-01  
 12  +3.3694e-01  +3.5998e-01  2.30e-02  9.92e-05  4.23e-03  1.62e-05  4.29e-04  4.99e-01  
 13  +3.3172e-01  +3.3575e-01  4.03e-03  1.73e-05  7.38e-04  2.96e-06  7.84e-05  8.40e-01  
 14  +3.3103e-01  +3.3271e-01  1.68e-03  7.10e-06  3.03e-04  1.32e-06  3.23e-05  9.76e-01  
 15  +3.3051e-01  +3.3053e-01  2.34e-05  9.87e-08  4.21e-06  1.85e-08  4.52e-07  9.86e-01  
 16  +3.3050e-01  +3.3050e-01  2.34e-07  9.87e-10  4.21e-08  1.85e-10  4.52e-09  9.90e-01  
 17  +3.3050e-01  +3.3050e-01  2.34e-09  9.87e-12  4.21e-10  1.85e-12  4.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3085ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:35 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:35 PM: Optimal value: 3.305e-01
(CVXPY) Sep 20 03:07:35 PM: Compilation took 3.005e-03 seconds
(CVXPY) Sep 20 03:07:35 PM: Solver (including time spent in interface) took 3.507e-03 seconds
FULL MODEL:
  Accruacy: 0.67
  Our objective: 0.3400000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x4 = 0)                       <-- (term's our objective: 0.148)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1)                       <-- (term's our objective: 0.132)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.2875609397888184
Best over terms:
  Our final objective: 0.14799999999999996
    Its accruacy: 0.574
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.14799999999999996
  Highest accruacy: 0.574
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

