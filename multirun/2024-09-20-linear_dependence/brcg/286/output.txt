Command:
python test_script.py -s linear_dependence -d 8 -n 50 --seed 56 -m brcg -k 8 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 8.

Computed total variation: 0.9600000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:24 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Finished problem compilation (took 4.210e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 292
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9321e-01  +2.6000e+01  2.55e+01  8.34e-01  6.76e+00  1.00e+00  1.08e+00   ------   
  1  +5.7217e-01  +5.7315e+00  5.16e+00  3.57e-01  3.89e+00  3.77e-03  6.01e-01  6.03e-01  
  2  +4.9497e-01  +1.1565e+00  6.62e-01  7.98e-02  1.06e+00  1.88e-02  2.23e-01  9.90e-01  
  3  +4.4388e-01  +8.0926e-01  3.65e-01  2.43e-02  3.39e-01  1.48e-02  8.35e-02  7.33e-01  
  4  +4.1725e-01  +5.0914e-01  9.19e-02  5.77e-03  7.97e-02  2.50e-03  2.38e-02  7.81e-01  
  5  +4.0309e-01  +4.1709e-01  1.40e-02  8.28e-04  1.14e-02  8.97e-05  4.07e-03  9.90e-01  
  6  +4.0014e-01  +4.0032e-01  1.82e-04  1.07e-05  1.47e-04  1.08e-06  5.39e-05  9.87e-01  
  7  +4.0010e-01  +4.0010e-01  1.82e-06  1.07e-07  1.47e-06  1.08e-08  5.39e-07  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  1.82e-08  1.07e-09  1.47e-08  1.08e-10  5.39e-09  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  1.82e-10  1.07e-11  1.47e-10  1.08e-12  5.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 249.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:24 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 03:13:24 PM: Compilation took 4.210e-03 seconds
(CVXPY) Sep 20 03:13:24 PM: Solver (including time spent in interface) took 5.159e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:24 PM: Your problem has 52 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Finished problem compilation (took 2.885e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 52
  constraints   = 77
  nnz(P)        = 0
  nnz(A)        = 383
  cones (total) = 1
    : Nonnegative = 1,  numel = 77

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7402e-01  +2.6878e+01  2.64e+01  8.45e-01  7.12e+00  1.00e+00  1.11e+00   ------   
  1  +4.8988e-01  +5.8610e+00  5.37e+00  3.64e-01  3.96e+00  3.86e-03  6.08e-01  6.05e-01  
  2  +3.7584e-01  +1.2356e+00  8.60e-01  7.58e-02  1.05e+00  2.25e-02  1.96e-01  9.74e-01  
  3  +2.9248e-01  +6.1726e-01  3.25e-01  1.98e-02  2.82e-01  1.12e-02  6.03e-02  7.38e-01  
  4  +2.3981e-01  +4.2769e-01  1.88e-01  8.56e-03  1.32e-01  5.98e-03  2.83e-02  7.05e-01  
  5  +2.0818e-01  +2.9439e-01  8.62e-02  3.65e-03  5.76e-02  2.65e-03  1.26e-02  5.87e-01  
  6  +1.8319e-01  +1.9058e-01  7.40e-03  3.10e-04  4.88e-03  1.46e-04  1.13e-03  9.36e-01  
  7  +1.8045e-01  +1.8057e-01  1.19e-04  5.03e-06  7.88e-05  1.65e-06  1.86e-05  9.84e-01  
  8  +1.8040e-01  +1.8040e-01  2.30e-06  1.02e-07  1.57e-06  1.78e-08  3.94e-07  9.80e-01  
  9  +1.8040e-01  +1.8040e-01  2.30e-08  1.02e-09  1.56e-08  1.77e-10  3.95e-09  9.90e-01  
 10  +1.8040e-01  +1.8040e-01  2.30e-10  1.02e-11  1.56e-10  1.77e-12  3.95e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 309.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:24 PM: Optimal value: 1.804e-01
(CVXPY) Sep 20 03:13:24 PM: Compilation took 2.885e-03 seconds
(CVXPY) Sep 20 03:13:24 PM: Solver (including time spent in interface) took 1.178e-03 seconds
Iteration: 2, Objective: 0.1804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:24 PM: Your problem has 62 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 87
  nnz(P)        = 0
  nnz(A)        = 421
  cones (total) = 1
    : Nonnegative = 1,  numel = 87

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6702e-01  +2.7093e+01  2.66e+01  8.54e-01  6.86e+00  1.00e+00  1.12e+00   ------   
  1  +4.4234e-01  +5.9147e+00  5.47e+00  3.69e-01  3.71e+00  3.96e-03  6.03e-01  6.04e-01  
  2  +3.1112e-01  +1.3192e+00  1.01e+00  8.05e-02  1.04e+00  2.24e-02  1.99e-01  9.27e-01  
  3  +2.2476e-01  +6.9431e-01  4.70e-01  2.85e-02  3.85e-01  1.17e-02  8.15e-02  6.72e-01  
  4  +1.6441e-01  +2.8601e-01  1.22e-01  6.65e-03  9.51e-02  3.00e-03  2.10e-02  8.09e-01  
  5  +1.4385e-01  +2.1588e-01  7.20e-02  3.59e-03  5.38e-02  1.68e-03  1.17e-02  5.30e-01  
  6  +1.2346e-01  +1.3229e-01  8.83e-03  4.29e-04  6.45e-03  1.76e-04  1.49e-03  8.82e-01  
  7  +1.2078e-01  +1.2148e-01  7.00e-04  3.43e-05  5.14e-04  1.23e-05  1.21e-04  9.19e-01  
  8  +1.2067e-01  +1.2112e-01  4.44e-04  2.13e-05  3.18e-04  6.52e-06  8.04e-05  6.04e-01  
  9  +1.2051e-01  +1.2052e-01  1.53e-05  7.61e-07  1.12e-05  1.19e-07  2.97e-06  9.63e-01  
 10  +1.2050e-01  +1.2050e-01  1.59e-07  7.98e-09  1.16e-07  1.23e-09  3.15e-08  9.89e-01  
 11  +1.2050e-01  +1.2050e-01  1.60e-09  7.99e-11  1.17e-09  1.23e-11  3.15e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 310µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:24 PM: Optimal value: 1.205e-01
(CVXPY) Sep 20 03:13:24 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 03:13:24 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:24 PM: Your problem has 72 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Finished problem compilation (took 1.082e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 97
  nnz(P)        = 0
  nnz(A)        = 451
  cones (total) = 1
    : Nonnegative = 1,  numel = 97

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6289e-01  +2.7209e+01  2.67e+01  8.62e-01  6.60e+00  1.00e+00  1.13e+00   ------   
  1  +3.9858e-01  +5.8034e+00  5.40e+00  3.66e-01  3.40e+00  4.03e-03  5.88e-01  6.17e-01  
  2  +2.0540e-01  +1.1484e+00  9.43e-01  6.19e-02  7.65e-01  2.06e-02  1.63e-01  9.36e-01  
  3  +1.6631e-01  +4.5113e-01  2.85e-01  1.91e-02  2.38e-01  6.79e-03  5.61e-02  7.64e-01  
  4  +1.4090e-01  +2.8653e-01  1.46e-01  9.01e-03  1.19e-01  3.51e-03  2.73e-02  5.65e-01  
  5  +1.1930e-01  +1.9124e-01  7.19e-02  3.91e-03  5.62e-02  1.77e-03  1.24e-02  5.91e-01  
  6  +1.0275e-01  +1.1084e-01  8.09e-03  4.19e-04  6.16e-03  1.76e-04  1.42e-03  8.96e-01  
  7  +1.0085e-01  +1.0162e-01  7.67e-04  4.05e-05  5.89e-04  1.43e-05  1.40e-04  9.02e-01  
  8  +1.0076e-01  +1.0124e-01  4.77e-04  2.48e-05  3.57e-04  7.05e-06  9.18e-05  6.29e-01  
  9  +1.0061e-01  +1.0062e-01  1.53e-05  8.24e-07  1.17e-05  1.22e-07  3.16e-06  9.66e-01  
 10  +1.0060e-01  +1.0060e-01  1.60e-07  8.66e-09  1.22e-07  1.26e-09  3.35e-08  9.89e-01  
 11  +1.0060e-01  +1.0060e-01  1.60e-09  8.67e-11  1.22e-09  1.26e-11  3.36e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 321.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:24 PM: Optimal value: 1.006e-01
(CVXPY) Sep 20 03:13:24 PM: Compilation took 1.082e-03 seconds
(CVXPY) Sep 20 03:13:24 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1006
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:24 PM: Your problem has 82 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Finished problem compilation (took 3.020e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 82
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 497
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6073e-01  +2.7302e+01  2.68e+01  8.69e-01  6.46e+00  1.00e+00  1.13e+00   ------   
  1  +3.8005e-01  +5.9061e+00  5.53e+00  3.78e-01  3.31e+00  4.08e-03  5.91e-01  6.09e-01  
  2  +1.8269e-01  +1.4506e+00  1.27e+00  8.29e-02  9.87e-01  2.07e-02  2.11e-01  8.44e-01  
  3  +1.2934e-01  +4.2678e-01  2.97e-01  1.92e-02  2.38e-01  6.01e-03  5.89e-02  8.06e-01  
  4  +9.7299e-02  +1.7645e-01  7.91e-02  4.77e-03  6.11e-02  1.70e-03  1.62e-02  7.58e-01  
  5  +8.2502e-02  +9.2263e-02  9.76e-03  5.65e-04  7.32e-03  1.80e-04  2.00e-03  8.95e-01  
  6  +8.0839e-02  +8.1772e-02  9.33e-04  5.50e-05  7.05e-04  1.44e-05  1.99e-04  9.01e-01  
  7  +8.0764e-02  +8.1433e-02  6.70e-04  3.84e-05  4.93e-04  8.79e-06  1.50e-04  4.98e-01  
  8  +8.0617e-02  +8.0678e-02  6.06e-05  3.58e-06  4.50e-05  6.14e-07  1.49e-05  9.03e-01  
  9  +8.0600e-02  +8.0602e-02  1.33e-06  7.95e-08  9.95e-07  1.14e-08  3.36e-07  9.90e-01  
 10  +8.0600e-02  +8.0600e-02  1.33e-08  7.95e-10  9.95e-09  1.14e-10  3.36e-09  9.90e-01  
 11  +8.0600e-02  +8.0600e-02  1.33e-10  7.95e-12  9.95e-11  1.14e-12  3.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 356.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:24 PM: Optimal value: 8.060e-02
(CVXPY) Sep 20 03:13:24 PM: Compilation took 3.020e-03 seconds
(CVXPY) Sep 20 03:13:24 PM: Solver (including time spent in interface) took 9.892e-04 seconds
Iteration: 5, Objective: 0.0806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:24 PM: Your problem has 92 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:24 PM: Finished problem compilation (took 2.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 92
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 532
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5167e-01  +2.7655e+01  2.72e+01  8.74e-01  6.29e+00  1.00e+00  1.14e+00   ------   
  1  +2.9234e-01  +6.2508e+00  5.96e+00  3.82e-01  3.20e+00  4.37e-03  5.95e-01  5.86e-01  
  2  +1.0048e-01  +1.4293e+00  1.33e+00  8.84e-02  9.88e-01  2.17e-02  2.25e-01  8.27e-01  
  3  +7.3382e-02  +3.1947e-01  2.46e-01  1.75e-02  2.05e-01  5.83e-03  5.39e-02  8.42e-01  
  4  +3.6702e-02  +1.4762e-01  1.11e-01  6.99e-03  8.65e-02  1.63e-03  2.41e-02  8.73e-01  
  5  +2.2143e-02  +3.0164e-02  8.02e-03  4.98e-04  6.16e-03  1.01e-04  1.82e-03  9.45e-01  
  6  +2.0930e-02  +2.1854e-02  9.24e-04  5.91e-05  7.18e-04  9.07e-06  2.23e-04  8.79e-01  
  7  +2.0842e-02  +2.1451e-02  6.09e-04  3.89e-05  4.63e-04  5.37e-06  1.63e-04  5.52e-01  
  8  +2.0710e-02  +2.0736e-02  2.58e-05  1.74e-06  2.01e-05  6.42e-08  7.90e-06  9.52e-01  
  9  +2.0700e-02  +2.0700e-02  2.80e-07  1.92e-08  2.19e-07  7.47e-10  8.94e-08  9.89e-01  
 10  +2.0700e-02  +2.0700e-02  2.80e-09  1.92e-10  2.19e-09  7.47e-12  8.94e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 413.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:24 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:24 PM: Optimal value: 2.070e-02
(CVXPY) Sep 20 03:13:24 PM: Compilation took 2.992e-03 seconds
(CVXPY) Sep 20 03:13:24 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:25 PM: Your problem has 93 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:25 PM: Finished problem compilation (took 2.972e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 118
  nnz(P)        = 0
  nnz(A)        = 536
  cones (total) = 1
    : Nonnegative = 1,  numel = 118

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4902e-01  +2.7678e+01  2.72e+01  8.74e-01  6.28e+00  1.00e+00  1.14e+00   ------   
  1  +2.7367e-01  +6.3617e+00  6.09e+00  3.86e-01  3.21e+00  4.44e-03  5.98e-01  5.77e-01  
  2  +9.8989e-02  +1.5567e+00  1.46e+00  9.96e-02  1.09e+00  2.21e-02  2.46e-01  7.93e-01  
  3  +7.6048e-02  +3.4029e-01  2.64e-01  1.94e-02  2.25e-01  6.37e-03  5.82e-02  8.24e-01  
  4  +3.9929e-02  +1.7654e-01  1.37e-01  8.84e-03  1.08e-01  2.18e-03  2.96e-02  8.09e-01  
  5  +2.4668e-02  +4.8919e-02  2.43e-02  1.55e-03  1.88e-02  3.41e-04  5.51e-03  8.46e-01  
  6  +2.0979e-02  +2.2162e-02  1.18e-03  7.59e-05  9.19e-04  1.27e-05  2.77e-04  9.53e-01  
  7  +2.0836e-02  +2.1396e-02  5.60e-04  3.64e-05  4.29e-04  4.77e-06  1.52e-04  7.35e-01  
  8  +2.0713e-02  +2.0750e-02  3.67e-05  2.48e-06  2.85e-05  1.74e-07  1.13e-05  9.29e-01  
  9  +2.0700e-02  +2.0701e-02  4.69e-07  3.20e-08  3.66e-07  2.17e-09  1.50e-07  9.87e-01  
 10  +2.0700e-02  +2.0700e-02  4.69e-09  3.20e-10  3.66e-09  2.17e-11  1.50e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 416.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:25 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:25 PM: Optimal value: 2.070e-02
(CVXPY) Sep 20 03:13:25 PM: Compilation took 2.972e-03 seconds
(CVXPY) Sep 20 03:13:25 PM: Solver (including time spent in interface) took 9.894e-04 seconds
Iteration: 7, Objective: 0.0207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:13:25 PM: Your problem has 94 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:13:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:13:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:13:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:13:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:13:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:13:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:13:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:13:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:13:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:13:25 PM: Finished problem compilation (took 2.969e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 94
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 543
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4848e-01  +2.7675e+01  2.72e+01  8.75e-01  6.29e+00  1.00e+00  1.15e+00   ------   
  1  +2.6650e-01  +6.3464e+00  6.08e+00  3.85e-01  3.20e+00  4.44e-03  5.97e-01  5.78e-01  
  2  +7.9248e-02  +1.7094e+00  1.63e+00  1.08e-01  1.16e+00  2.13e-02  2.62e-01  7.47e-01  
  3  +7.5235e-02  +3.7670e-01  3.01e-01  2.33e-02  2.64e-01  6.89e-03  6.82e-02  7.77e-01  
  4  +4.1623e-02  +1.9991e-01  1.58e-01  1.08e-02  1.28e-01  2.76e-03  3.52e-02  7.63e-01  
  5  +2.5243e-02  +5.8029e-02  3.28e-02  2.13e-03  2.57e-02  5.66e-04  7.49e-03  7.96e-01  
  6  +2.0974e-02  +2.2234e-02  1.26e-03  8.23e-05  9.90e-04  1.62e-05  2.98e-04  9.64e-01  
  7  +2.0816e-02  +2.1256e-02  4.41e-04  2.95e-05  3.45e-04  3.56e-06  1.24e-04  8.63e-01  
  8  +2.0709e-02  +2.0734e-02  2.47e-05  1.69e-06  1.94e-05  1.08e-07  7.76e-06  9.40e-01  
  9  +2.0700e-02  +2.0700e-02  2.81e-07  1.94e-08  2.20e-07  1.23e-09  9.12e-08  9.88e-01  
 10  +2.0700e-02  +2.0700e-02  2.81e-09  1.94e-10  2.20e-09  1.23e-11  9.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 371.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:13:25 PM: Problem status: optimal
(CVXPY) Sep 20 03:13:25 PM: Optimal value: 2.070e-02
(CVXPY) Sep 20 03:13:25 PM: Compilation took 2.969e-03 seconds
(CVXPY) Sep 20 03:13:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.98
  Our objective: 0.96

IF 
    (x0 = 0 AND x1 = 0 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x3 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.36)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x7 = 0)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 0 AND x4 = 1 AND x7 = 1)                       <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0)                                  <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1)                       <-- (term's our objective: 0.16)
 OR (x1 = 1 AND x4 = 1 AND x5 = 0)                                  <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.0011351108551025
Best over terms:
  Our final objective: 0.36
    Its accruacy: 0.68
    Its hamming distance: 4
  Shortest hamming distance: 3
    Its our objective: 0.12
  Highest accruacy: 0.68
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

