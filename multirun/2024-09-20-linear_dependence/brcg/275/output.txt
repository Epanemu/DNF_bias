Command:
python test_script.py -s linear_dependence -d 7 -n 50000 --seed 43 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14412
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 7.

Computed total variation: 0.14668
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:36 PM: Your problem has 25015 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:37 PM: Finished problem compilation (took 9.474e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25015
  constraints   = 50015
  nnz(P)        = 0
  nnz(A)        = 250015
  cones (total) = 1
    : Nonnegative = 1,  numel = 50015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.36e+02  1.00e+00  1.00e+00   ------   
  1  +5.8817e-01  +5.2537e+03  5.25e+03  4.08e-01  1.48e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3830e-01  +6.5385e+02  6.53e+02  1.62e-01  7.53e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1022e-01  +1.6870e+02  1.68e+02  1.43e-01  6.66e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0103e-01  +1.3458e+01  1.30e+01  3.68e-02  1.68e+01  4.21e-06  1.94e-01  4.54e-01  
  5  +5.0000e-01  +1.1124e+00  6.12e-01  1.84e-03  8.68e-01  2.85e-05  1.83e-01  4.01e-01  
  6  +4.9999e-01  +6.2478e-01  1.25e-01  3.73e-04  1.77e-01  9.64e-06  3.15e-02  8.42e-01  
  7  +4.9934e-01  +9.7451e-01  4.75e-01  7.00e-04  3.32e-01  3.80e-04  2.72e-03  9.62e-01  
  8  +4.8691e-01  +8.8909e-01  4.02e-01  3.89e-05  1.85e-02  6.76e-03  1.22e-04  9.55e-01  
  9  +4.7527e-01  +6.1591e-01  1.41e-01  7.29e-06  3.47e-03  4.67e-03  2.29e-05  9.03e-01  
 10  +4.6337e-01  +4.9219e-01  2.88e-02  1.49e-06  7.05e-04  4.50e-05  5.04e-06  8.92e-01  
 11  +4.5644e-01  +4.5848e-01  2.04e-03  9.82e-08  4.66e-05  2.40e-06  3.56e-07  9.34e-01  
 12  +4.5584e-01  +4.5605e-01  2.12e-04  9.15e-09  4.34e-06  1.81e-07  3.70e-08  9.25e-01  
 13  +4.5576e-01  +4.5576e-01  2.36e-06  9.82e-11  4.66e-08  1.94e-09  4.12e-10  9.89e-01  
 14  +4.5576e-01  +4.5576e-01  2.36e-08  9.82e-13  4.66e-10  1.94e-11  4.13e-12  9.90e-01  
 15  +4.5576e-01  +4.5576e-01  2.58e-10  1.07e-14  5.06e-12  1.08e-12  1.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 308.9292ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:37 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:37 PM: Optimal value: 4.558e-01
(CVXPY) Sep 20 03:12:37 PM: Compilation took 9.474e-02 seconds
(CVXPY) Sep 20 03:12:37 PM: Solver (including time spent in interface) took 3.418e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4558
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:37 PM: Your problem has 25025 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:37 PM: Finished problem compilation (took 1.264e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25025
  constraints   = 50025
  nnz(P)        = 0
  nnz(A)        = 292488
  cones (total) = 1
    : Nonnegative = 1,  numel = 50025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2538e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5350e+02  6.53e+02  1.62e-01  7.83e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6851e+02  1.68e+02  1.43e-01  6.93e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0102e-01  +1.3298e+01  1.28e+01  3.64e-02  1.73e+01  4.23e-06  1.93e-01  4.61e-01  
  5  +5.0003e-01  +1.5719e+00  1.07e+00  3.22e-03  1.58e+00  3.08e-05  1.84e-01  2.96e-01  
  6  +5.0000e-01  +6.3366e-01  1.34e-01  3.99e-04  1.96e-01  4.17e-06  2.91e-02  9.37e-01  
  7  +5.0000e-01  +6.6577e-01  1.66e-01  4.94e-04  2.43e-01  5.63e-06  2.45e-02  3.58e-01  
  8  +5.0000e-01  +6.8815e-01  1.88e-01  5.59e-04  2.76e-01  7.76e-06  1.74e-02  4.44e-01  
  9  +4.9996e-01  +7.6778e-01  2.68e-01  6.92e-04  3.42e-01  3.13e-05  4.34e-03  9.90e-01  
 10  +4.9750e-01  +7.5168e-01  2.54e-01  3.26e-05  1.62e-02  1.33e-03  9.08e-05  9.79e-01  
 11  +4.9720e-01  +7.1511e-01  2.18e-01  2.18e-05  1.08e-02  1.07e-03  5.97e-05  5.90e-01  
 12  +4.9414e-01  +6.7741e-01  1.83e-01  1.05e-05  5.22e-03  1.20e-03  2.83e-05  7.51e-01  
 13  +4.9311e-01  +6.7237e-01  1.79e-01  9.19e-06  4.57e-03  1.13e-03  2.48e-05  2.35e-01  
 14  +4.9208e-01  +6.6490e-01  1.73e-01  8.57e-06  4.26e-03  8.73e-04  2.32e-05  2.47e-01  
 15  +4.8135e-01  +6.1704e-01  1.36e-01  5.14e-06  2.55e-03  5.32e-04  1.42e-05  6.42e-01  
 16  +4.7354e-01  +5.8744e-01  1.14e-01  4.12e-06  2.04e-03  4.10e-04  1.16e-05  2.24e-01  
 17  +4.6978e-01  +5.7321e-01  1.03e-01  3.84e-06  1.90e-03  2.96e-04  1.15e-05  9.18e-02  
 18  +4.6965e-01  +5.7266e-01  1.03e-01  3.83e-06  1.90e-03  2.84e-04  1.15e-05  3.71e-02  
 19  +4.5243e-01  +5.0415e-01  5.17e-02  1.87e-06  9.27e-04  2.85e-06  5.75e-06  8.77e-01  
 20  +4.4790e-01  +4.9476e-01  4.69e-02  1.56e-06  7.71e-04  2.30e-06  4.68e-06  3.73e-01  
 21  +4.2996e-01  +4.3411e-01  4.15e-03  1.31e-07  6.47e-05  7.62e-08  4.12e-07  9.43e-01  
 22  +4.2807e-01  +4.2812e-01  5.73e-05  1.80e-09  8.89e-07  1.02e-09  5.69e-09  9.86e-01  
 23  +4.2804e-01  +4.2804e-01  5.74e-07  1.80e-11  8.90e-09  1.03e-11  5.70e-11  9.90e-01  
 24  +4.2804e-01  +4.2804e-01  5.75e-09  1.80e-13  8.90e-11  1.06e-13  5.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 519.9036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:38 PM: Optimal value: 4.280e-01
(CVXPY) Sep 20 03:12:38 PM: Compilation took 1.264e-01 seconds
(CVXPY) Sep 20 03:12:38 PM: Solver (including time spent in interface) took 5.527e-01 seconds
Iteration: 2, Objective: 0.4280
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:12:38 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:12:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:12:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:12:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:12:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:12:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:12:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:12:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:12:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:12:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:12:38 PM: Finished problem compilation (took 9.446e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 292883
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.46e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2539e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5344e+02  6.53e+02  1.62e-01  7.83e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6849e+02  1.68e+02  1.43e-01  6.93e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0102e-01  +1.3301e+01  1.28e+01  3.64e-02  1.73e+01  4.24e-06  1.93e-01  4.61e-01  
  5  +5.0003e-01  +1.5712e+00  1.07e+00  3.22e-03  1.58e+00  3.09e-05  1.84e-01  2.97e-01  
  6  +5.0001e-01  +7.5798e-01  2.58e-01  7.70e-04  3.79e-01  7.75e-06  5.42e-02  7.83e-01  
  7  +5.0000e-01  +7.5215e-01  2.52e-01  7.51e-04  3.70e-01  1.19e-05  2.54e-02  6.29e-01  
  8  +4.9988e-01  +7.2595e-01  2.26e-01  5.36e-04  2.65e-01  7.64e-05  2.75e-03  9.19e-01  
  9  +4.9810e-01  +7.1979e-01  2.22e-01  6.88e-05  3.42e-02  1.02e-03  1.96e-04  9.29e-01  
 10  +4.9512e-01  +6.9666e-01  2.02e-01  2.32e-05  1.15e-02  2.33e-03  6.41e-05  7.86e-01  
 11  +4.9389e-01  +6.9008e-01  1.96e-01  1.78e-05  8.86e-03  2.62e-03  4.90e-05  3.07e-01  
 12  +4.9343e-01  +6.7715e-01  1.84e-01  1.30e-05  6.45e-03  2.03e-03  3.54e-05  5.91e-01  
 13  +4.9377e-01  +6.7371e-01  1.80e-01  1.27e-05  6.30e-03  1.55e-03  3.45e-05  2.23e-01  
 14  +4.9334e-01  +6.6629e-01  1.73e-01  1.09e-05  5.43e-03  1.01e-03  2.97e-05  4.74e-01  
 15  +4.8965e-01  +6.4902e-01  1.59e-01  8.08e-06  4.01e-03  7.99e-04  2.21e-05  4.95e-01  
 16  +4.7387e-01  +5.8677e-01  1.13e-01  4.00e-06  1.98e-03  6.19e-04  1.12e-05  6.05e-01  
 17  +4.7112e-01  +5.7616e-01  1.05e-01  3.85e-06  1.91e-03  5.07e-04  1.12e-05  3.97e-02  
 18  +4.6942e-01  +5.7075e-01  1.01e-01  3.75e-06  1.86e-03  3.35e-04  1.09e-05  2.92e-01  
 19  +4.4539e-01  +4.8350e-01  3.81e-02  1.29e-06  6.39e-04  7.20e-05  3.93e-06  7.16e-01  
 20  +4.3025e-01  +4.3524e-01  4.99e-03  1.60e-07  7.88e-05  7.35e-07  5.05e-07  9.54e-01  
 21  +4.2790e-01  +4.2805e-01  1.56e-04  4.93e-09  2.43e-06  1.97e-08  1.57e-08  9.73e-01  
 22  +4.2782e-01  +4.2782e-01  1.56e-06  4.95e-11  2.44e-08  1.97e-10  1.58e-10  9.90e-01  
 23  +4.2782e-01  +4.2782e-01  1.56e-08  4.95e-13  2.44e-10  1.97e-12  1.58e-12  9.90e-01  
 24  +4.2782e-01  +4.2782e-01  1.56e-10  4.93e-15  2.44e-12  2.04e-14  1.63e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 593.353ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:12:38 PM: Problem status: optimal
(CVXPY) Sep 20 03:12:38 PM: Optimal value: 4.278e-01
(CVXPY) Sep 20 03:12:38 PM: Compilation took 9.446e-02 seconds
(CVXPY) Sep 20 03:12:38 PM: Solver (including time spent in interface) took 6.323e-01 seconds
FULL MODEL:
  Accruacy: 0.57248
  Our objective: 0.14495999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.14412)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.00048)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.00036)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.796008586883545
Best over terms:
  Our final objective: 0.14412000000000003
    Its accruacy: 0.57206
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14412000000000003
  Highest accruacy: 0.57206
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

