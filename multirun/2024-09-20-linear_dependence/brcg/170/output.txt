Command:
python test_script.py -s linear_dependence -d 5 -n 100 --seed 43 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.34
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.5
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:14 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:14 PM: Finished problem compilation (took 4.493e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9703e-01  +5.0987e+01  5.05e+01  8.62e-01  8.45e+00  1.00e+00  1.04e+00   ------   
  1  +5.9341e-01  +1.0437e+01  9.84e+00  3.17e-01  4.65e+00  3.97e-03  5.19e-01  6.48e-01  
  2  +5.2481e-01  +1.4562e+00  9.31e-01  6.14e-02  1.08e+00  1.16e-02  1.56e-01  9.85e-01  
  3  +5.1635e-01  +1.2869e+00  7.71e-01  4.10e-02  7.33e-01  1.22e-02  1.08e-01  3.42e-01  
  4  +4.9215e-01  +1.0763e+00  5.84e-01  1.93e-02  3.51e-01  1.03e-02  5.58e-02  7.07e-01  
  5  +4.5885e-01  +7.8355e-01  3.25e-01  7.38e-03  1.35e-01  7.01e-03  2.34e-02  5.94e-01  
  6  +4.2123e-01  +5.4563e-01  1.24e-01  2.57e-03  4.62e-02  2.14e-03  1.00e-02  6.59e-01  
  7  +3.9795e-01  +4.2281e-01  2.49e-02  5.11e-04  9.12e-03  9.49e-05  2.32e-03  9.90e-01  
  8  +3.9027e-01  +3.9079e-01  5.20e-04  1.05e-05  1.87e-04  1.61e-06  4.98e-05  9.81e-01  
  9  +3.9010e-01  +3.9011e-01  5.20e-06  1.05e-07  1.87e-06  1.61e-08  4.98e-07  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  5.20e-08  1.05e-09  1.87e-08  1.61e-10  4.98e-09  9.90e-01  
 11  +3.9010e-01  +3.9010e-01  5.20e-10  1.05e-11  1.87e-10  1.61e-12  4.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 324.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:14 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:14 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 03:07:14 PM: Compilation took 4.493e-03 seconds
(CVXPY) Sep 20 03:07:14 PM: Solver (including time spent in interface) took 1.647e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:14 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:14 PM: Finished problem compilation (took 4.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 522
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8948e-01  +5.1938e+01  5.14e+01  8.69e-01  8.72e+00  1.00e+00  1.07e+00   ------   
  1  +5.6057e-01  +1.0652e+01  1.01e+01  3.32e-01  4.74e+00  3.94e-03  5.45e-01  6.42e-01  
  2  +4.9846e-01  +1.9354e+00  1.44e+00  7.77e-02  1.41e+00  1.35e-02  1.89e-01  8.94e-01  
  3  +4.3193e-01  +1.2809e+00  8.49e-01  2.60e-02  4.89e-01  1.22e-02  6.98e-02  7.42e-01  
  4  +3.7550e-01  +8.4463e-01  4.69e-01  1.02e-02  1.91e-01  8.38e-03  3.07e-02  6.05e-01  
  5  +3.2911e-01  +5.5420e-01  2.25e-01  4.67e-03  8.56e-02  3.18e-03  1.58e-02  5.42e-01  
  6  +2.9038e-01  +3.2258e-01  3.22e-02  7.02e-04  1.25e-02  2.16e-04  2.88e-03  8.88e-01  
  7  +2.8099e-01  +2.8332e-01  2.33e-03  5.00e-05  8.89e-04  1.33e-05  2.29e-04  9.33e-01  
  8  +2.8025e-01  +2.8037e-01  1.24e-04  2.66e-06  4.72e-05  4.19e-07  1.28e-05  9.88e-01  
  9  +2.8020e-01  +2.8020e-01  2.04e-06  4.37e-08  7.74e-07  5.11e-09  2.21e-07  9.83e-01  
 10  +2.8020e-01  +2.8020e-01  2.04e-08  4.37e-10  7.73e-09  5.10e-11  2.21e-09  9.90e-01  
 11  +2.8020e-01  +2.8020e-01  2.04e-10  4.37e-12  7.73e-11  5.10e-13  2.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 414.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:14 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:14 PM: Optimal value: 2.802e-01
(CVXPY) Sep 20 03:07:14 PM: Compilation took 4.008e-03 seconds
(CVXPY) Sep 20 03:07:14 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:15 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:15 PM: Finished problem compilation (took 2.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 560
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8869e-01  +5.1831e+01  5.13e+01  8.73e-01  8.64e+00  1.00e+00  1.07e+00   ------   
  1  +5.5252e-01  +1.0727e+01  1.02e+01  3.40e-01  4.68e+00  3.93e-03  5.51e-01  6.36e-01  
  2  +4.9014e-01  +1.9332e+00  1.44e+00  7.66e-02  1.36e+00  1.42e-02  1.89e-01  9.05e-01  
  3  +4.0380e-01  +1.3085e+00  9.05e-01  2.40e-02  4.43e-01  1.44e-02  6.62e-02  7.89e-01  
  4  +3.3724e-01  +7.4562e-01  4.08e-01  9.29e-03  1.68e-01  5.35e-03  2.92e-02  6.10e-01  
  5  +2.7750e-01  +3.3319e-01  5.57e-02  1.37e-03  2.39e-02  6.02e-05  5.54e-03  9.01e-01  
  6  +2.6203e-01  +2.6771e-01  5.67e-03  1.37e-04  2.36e-03  1.10e-05  6.48e-04  9.15e-01  
  7  +2.6058e-01  +2.6143e-01  8.55e-04  2.06e-05  3.55e-04  1.87e-06  1.02e-04  8.72e-01  
  8  +2.6032e-01  +2.6037e-01  5.46e-05  1.30e-06  2.24e-05  1.32e-07  6.84e-06  9.62e-01  
  9  +2.6030e-01  +2.6030e-01  6.50e-07  1.55e-08  2.66e-07  1.45e-09  8.32e-08  9.88e-01  
 10  +2.6030e-01  +2.6030e-01  6.51e-09  1.55e-10  2.66e-09  1.45e-11  8.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 402.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:15 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:15 PM: Optimal value: 2.603e-01
(CVXPY) Sep 20 03:07:15 PM: Compilation took 2.000e-03 seconds
(CVXPY) Sep 20 03:07:15 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:15 PM: Your problem has 79 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:15 PM: Finished problem compilation (took 3.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 573
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8782e-01  +5.1688e+01  5.12e+01  8.74e-01  8.61e+00  1.00e+00  1.07e+00   ------   
  1  +5.4463e-01  +1.0728e+01  1.02e+01  3.41e-01  4.66e+00  3.94e-03  5.51e-01  6.35e-01  
  2  +4.7918e-01  +1.9288e+00  1.45e+00  7.30e-02  1.29e+00  1.47e-02  1.81e-01  9.16e-01  
  3  +3.7982e-01  +1.3130e+00  9.33e-01  2.39e-02  4.34e-01  1.47e-02  6.63e-02  7.52e-01  
  4  +3.1568e-01  +6.3783e-01  3.22e-01  8.23e-03  1.45e-01  3.48e-03  2.67e-02  6.52e-01  
  5  +2.6947e-01  +3.0694e-01  3.75e-02  1.03e-03  1.75e-02  1.84e-04  4.21e-03  8.95e-01  
  6  +2.6141e-01  +2.6524e-01  3.83e-03  1.05e-04  1.78e-03  1.88e-05  4.64e-04  8.96e-01  
  7  +2.6086e-01  +2.6279e-01  1.92e-03  4.88e-05  8.32e-04  8.50e-06  2.30e-04  7.67e-01  
  8  +2.6035e-01  +2.6050e-01  1.50e-04  3.67e-06  6.25e-05  5.13e-07  1.88e-05  9.41e-01  
  9  +2.6030e-01  +2.6030e-01  2.77e-06  6.69e-08  1.14e-06  7.58e-09  3.61e-07  9.82e-01  
 10  +2.6030e-01  +2.6030e-01  2.77e-08  6.68e-10  1.14e-08  7.57e-11  3.61e-09  9.90e-01  
 11  +2.6030e-01  +2.6030e-01  2.77e-10  6.68e-12  1.14e-10  7.57e-13  3.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 570.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:15 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:15 PM: Optimal value: 2.603e-01
(CVXPY) Sep 20 03:07:15 PM: Compilation took 3.004e-03 seconds
(CVXPY) Sep 20 03:07:15 PM: Solver (including time spent in interface) took 9.918e-04 seconds
Iteration: 4, Objective: 0.2603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:15 PM: Your problem has 82 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:15 PM: Finished problem compilation (took 4.362e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 82
  constraints   = 132
  nnz(P)        = 0
  nnz(A)        = 589
  cones (total) = 1
    : Nonnegative = 1,  numel = 132

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8580e-01  +5.1946e+01  5.15e+01  8.76e-01  8.56e+00  1.00e+00  1.08e+00   ------   
  1  +5.3185e-01  +1.0900e+01  1.04e+01  3.48e-01  4.68e+00  3.93e-03  5.65e-01  6.26e-01  
  2  +4.6555e-01  +2.2247e+00  1.76e+00  8.62e-02  1.49e+00  1.54e-02  2.11e-01  8.62e-01  
  3  +3.7409e-01  +1.3537e+00  9.80e-01  2.84e-02  5.06e-01  1.24e-02  8.01e-02  7.33e-01  
  4  +3.0805e-01  +6.5330e-01  3.45e-01  9.24e-03  1.61e-01  3.26e-03  3.06e-02  6.51e-01  
  5  +2.6843e-01  +3.6582e-01  9.74e-02  2.72e-03  4.61e-02  7.61e-04  1.10e-02  6.94e-01  
  6  +2.5309e-01  +2.6639e-01  1.33e-02  3.77e-04  6.31e-03  9.37e-05  1.72e-03  8.55e-01  
  7  +2.5116e-01  +2.5425e-01  3.09e-03  8.77e-05  1.47e-03  2.08e-05  4.10e-04  7.80e-01  
  8  +2.5080e-01  +2.5240e-01  1.60e-03  4.24e-05  7.12e-04  9.11e-06  2.12e-04  6.58e-01  
  9  +2.5044e-01  +2.5057e-01  1.29e-04  3.35e-06  5.63e-05  5.42e-07  1.80e-05  9.29e-01  
 10  +2.5040e-01  +2.5040e-01  1.81e-06  4.68e-08  7.86e-07  6.54e-09  2.60e-07  9.89e-01  
 11  +2.5040e-01  +2.5040e-01  1.82e-08  4.68e-10  7.86e-09  6.55e-11  2.61e-09  9.90e-01  
 12  +2.5040e-01  +2.5040e-01  1.82e-10  4.68e-12  7.86e-11  6.57e-13  2.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 500.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:15 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:15 PM: Optimal value: 2.504e-01
(CVXPY) Sep 20 03:07:15 PM: Compilation took 4.362e-03 seconds
(CVXPY) Sep 20 03:07:15 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.75
  Our objective: 0.49999999999999994

IF 
    (x0 = 0 AND x1 = 0 AND x3 = 1)                       <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.34)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.4408791065216064
Best over terms:
  Our final objective: 0.34
    Its accruacy: 0.67
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.34
  Highest accruacy: 0.67
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

