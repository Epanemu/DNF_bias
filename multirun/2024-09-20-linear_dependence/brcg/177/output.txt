Command:
python test_script.py -s linear_dependence -d 5 -n 500 --seed 73 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.34
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.38
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:33 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Finished problem compilation (took 5.178e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +2.5116e+02  2.51e+02  9.33e-01  2.02e+01  1.00e+00  1.01e+00   ------   
  1  +5.9819e-01  +5.0527e+01  4.99e+01  3.43e-01  1.16e+01  3.99e-03  5.06e-01  6.46e-01  
  2  +5.4119e-01  +7.0813e+00  6.54e+00  1.11e-01  4.60e+00  1.03e-02  2.17e-01  8.28e-01  
  3  +5.0005e-01  +1.5010e+00  1.00e+00  2.94e-02  1.17e+00  2.52e-03  1.74e-01  6.55e-01  
  4  +4.9273e-01  +9.3819e-01  4.45e-01  9.39e-03  3.91e-01  3.24e-03  3.35e-02  8.60e-01  
  5  +4.5300e-01  +7.9520e-01  3.42e-01  1.95e-03  8.28e-02  1.13e-02  5.86e-03  8.44e-01  
  6  +4.2878e-01  +6.3684e-01  2.08e-01  1.09e-03  4.54e-02  4.97e-03  3.77e-03  4.23e-01  
  7  +4.0055e-01  +4.7355e-01  7.30e-02  3.61e-04  1.49e-02  4.31e-05  1.56e-03  8.55e-01  
  8  +3.8349e-01  +3.8870e-01  5.20e-03  2.41e-05  9.94e-04  2.04e-06  1.20e-04  9.35e-01  
  9  +3.8211e-01  +3.8217e-01  5.43e-05  2.51e-07  1.03e-05  2.11e-08  1.27e-06  9.89e-01  
 10  +3.8210e-01  +3.8210e-01  5.43e-07  2.51e-09  1.03e-07  2.11e-10  1.27e-08  9.90e-01  
 11  +3.8210e-01  +3.8210e-01  5.43e-09  2.51e-11  1.03e-09  2.11e-12  1.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5677ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:33 PM: Optimal value: 3.821e-01
(CVXPY) Sep 20 03:07:33 PM: Compilation took 5.178e-03 seconds
(CVXPY) Sep 20 03:07:33 PM: Solver (including time spent in interface) took 2.007e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:33 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Finished problem compilation (took 3.634e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2562
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9885e-01  +2.5112e+02  2.51e+02  9.34e-01  2.15e+01  1.00e+00  1.01e+00   ------   
  1  +5.9482e-01  +5.0704e+01  5.01e+01  3.48e-01  1.22e+01  3.98e-03  5.09e-01  6.44e-01  
  2  +5.3795e-01  +6.7284e+00  6.19e+00  1.06e-01  4.62e+00  1.07e-02  2.08e-01  8.60e-01  
  3  +4.9803e-01  +1.3383e+00  8.40e-01  2.48e-02  1.06e+00  2.71e-03  1.41e-01  9.14e-01  
  4  +4.8243e-01  +1.1577e+00  6.75e-01  1.02e-02  4.56e-01  6.63e-03  3.16e-02  8.26e-01  
  5  +4.4628e-01  +8.8680e-01  4.41e-01  2.80e-03  1.26e-01  1.14e-02  8.13e-03  7.59e-01  
  6  +4.4285e-01  +8.8647e-01  4.44e-01  2.47e-03  1.12e-01  1.18e-02  7.04e-03  2.07e-01  
  7  +4.3698e-01  +8.6112e-01  4.24e-01  2.10e-03  9.48e-02  1.02e-02  5.96e-03  2.98e-01  
  8  +4.0437e-01  +6.6021e-01  2.56e-01  1.00e-03  4.50e-02  1.27e-04  2.97e-03  9.63e-01  
  9  +3.5018e-01  +4.0773e-01  5.75e-02  2.14e-04  9.41e-03  2.90e-05  7.46e-04  8.31e-01  
 10  +3.3324e-01  +3.4171e-01  8.47e-03  3.17e-05  1.39e-03  4.84e-06  1.23e-04  8.61e-01  
 11  +3.3077e-01  +3.3245e-01  1.69e-03  6.29e-06  2.75e-04  1.87e-06  2.52e-05  9.90e-01  
 12  +3.3011e-01  +3.3013e-01  2.24e-05  8.37e-08  3.66e-06  2.48e-08  3.37e-07  9.87e-01  
 13  +3.3010e-01  +3.3010e-01  2.24e-07  8.37e-10  3.66e-08  2.48e-10  3.37e-09  9.90e-01  
 14  +3.3010e-01  +3.3010e-01  2.24e-09  8.37e-12  3.66e-10  2.48e-12  3.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0254ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:33 PM: Optimal value: 3.301e-01
(CVXPY) Sep 20 03:07:33 PM: Compilation took 3.634e-03 seconds
(CVXPY) Sep 20 03:07:33 PM: Solver (including time spent in interface) took 2.411e-03 seconds
Iteration: 2, Objective: 0.3301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:33 PM: Your problem has 274 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 274
  constraints   = 524
  nnz(P)        = 0
  nnz(A)        = 2649
  cones (total) = 1
    : Nonnegative = 1,  numel = 524

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9860e-01  +2.5133e+02  2.51e+02  9.34e-01  2.16e+01  1.00e+00  1.01e+00   ------   
  1  +5.9223e-01  +5.0835e+01  5.02e+01  3.50e-01  1.23e+01  3.98e-03  5.11e-01  6.42e-01  
  2  +5.3645e-01  +6.5735e+00  6.04e+00  1.02e-01  4.50e+00  1.09e-02  2.02e-01  8.77e-01  
  3  +4.9844e-01  +1.4987e+00  1.00e+00  2.91e-02  1.25e+00  3.37e-03  1.34e-01  8.79e-01  
  4  +4.7694e-01  +1.4245e+00  9.48e-01  1.09e-02  4.92e-01  9.72e-03  3.08e-02  8.42e-01  
  5  +4.4039e-01  +1.0780e+00  6.38e-01  3.68e-03  1.67e-01  1.27e-02  1.04e-02  6.80e-01  
  6  +4.1614e-01  +8.3375e-01  4.18e-01  1.83e-03  8.25e-02  6.22e-03  5.29e-03  6.95e-01  
  7  +4.1042e-01  +7.7132e-01  3.61e-01  1.76e-03  7.93e-02  4.33e-03  5.27e-03  4.33e-02  
  8  +3.7627e-01  +6.0435e-01  2.28e-01  8.90e-04  3.97e-02  2.60e-03  2.82e-03  5.41e-01  
  9  +3.3743e-01  +3.9089e-01  5.35e-02  2.10e-04  9.25e-03  2.23e-05  7.79e-04  9.19e-01  
 10  +3.2243e-01  +3.2878e-01  6.35e-03  2.49e-05  1.09e-03  3.02e-06  1.02e-04  8.90e-01  
 11  +3.2065e-01  +3.2186e-01  1.21e-03  4.72e-06  2.07e-04  1.17e-06  1.99e-05  9.78e-01  
 12  +3.2021e-01  +3.2022e-01  1.37e-05  5.34e-08  2.34e-06  1.32e-08  2.26e-07  9.89e-01  
 13  +3.2020e-01  +3.2020e-01  1.37e-07  5.34e-10  2.34e-08  1.32e-10  2.26e-09  9.90e-01  
 14  +3.2020e-01  +3.2020e-01  1.37e-09  5.34e-12  2.34e-10  1.32e-12  2.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2645ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:33 PM: Optimal value: 3.202e-01
(CVXPY) Sep 20 03:07:33 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 03:07:33 PM: Solver (including time spent in interface) took 3.049e-03 seconds
Iteration: 3, Objective: 0.3202
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:33 PM: Your problem has 277 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Finished problem compilation (took 3.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 277
  constraints   = 527
  nnz(P)        = 0
  nnz(A)        = 2686
  cones (total) = 1
    : Nonnegative = 1,  numel = 527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9860e-01  +2.5148e+02  2.51e+02  9.35e-01  2.15e+01  1.00e+00  1.01e+00   ------   
  1  +5.9151e-01  +5.0814e+01  5.02e+01  3.50e-01  1.22e+01  3.98e-03  5.11e-01  6.43e-01  
  2  +5.3581e-01  +6.5019e+00  5.97e+00  1.00e-01  4.39e+00  1.10e-02  1.98e-01  8.84e-01  
  3  +4.9943e-01  +1.6836e+00  1.18e+00  3.37e-02  1.45e+00  3.91e-03  1.34e-01  8.06e-01  
  4  +4.5914e-01  +1.4566e+00  9.97e-01  6.35e-03  2.91e-01  1.68e-02  1.68e-02  9.66e-01  
  5  +4.2198e-01  +1.0097e+00  5.88e-01  2.69e-03  1.22e-01  1.08e-02  7.46e-03  6.10e-01  
  6  +3.8739e-01  +7.2635e-01  3.39e-01  1.42e-03  6.38e-02  2.11e-03  4.30e-03  6.87e-01  
  7  +3.5358e-01  +5.2494e-01  1.71e-01  7.08e-04  3.13e-02  8.61e-04  2.42e-03  4.73e-01  
  8  +3.2083e-01  +3.4807e-01  2.72e-02  1.13e-04  4.96e-03  1.85e-05  4.63e-04  9.64e-01  
  9  +3.1408e-01  +3.1954e-01  5.45e-03  2.27e-05  9.91e-04  4.09e-06  9.98e-05  8.47e-01  
 10  +3.1249e-01  +3.1305e-01  5.59e-04  2.32e-06  1.01e-04  4.98e-07  1.05e-05  9.90e-01  
 11  +3.1230e-01  +3.1231e-01  5.63e-06  2.34e-08  1.02e-06  5.00e-09  1.06e-07  9.90e-01  
 12  +3.1230e-01  +3.1230e-01  5.63e-08  2.34e-10  1.02e-08  5.00e-11  1.06e-09  9.90e-01  
 13  +3.1230e-01  +3.1230e-01  5.63e-10  2.34e-12  1.02e-10  5.00e-13  1.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1358ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:33 PM: Optimal value: 3.123e-01
(CVXPY) Sep 20 03:07:33 PM: Compilation took 3.007e-03 seconds
(CVXPY) Sep 20 03:07:33 PM: Solver (including time spent in interface) took 2.994e-03 seconds
Iteration: 4, Objective: 0.3123
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:33 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Finished problem compilation (took 3.584e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2772
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9854e-01  +2.5141e+02  2.51e+02  9.35e-01  2.15e+01  1.00e+00  1.01e+00   ------   
  1  +5.8992e-01  +5.0899e+01  5.03e+01  3.51e-01  1.22e+01  3.98e-03  5.12e-01  6.42e-01  
  2  +5.3461e-01  +6.3737e+00  5.84e+00  9.78e-02  4.29e+00  1.12e-02  1.94e-01  8.97e-01  
  3  +4.9890e-01  +1.7129e+00  1.21e+00  3.36e-02  1.45e+00  4.42e-03  1.22e-01  8.54e-01  
  4  +4.6041e-01  +1.7288e+00  1.27e+00  8.60e-03  3.93e-01  1.76e-02  2.29e-02  8.85e-01  
  5  +4.2703e-01  +1.1276e+00  7.01e-01  3.60e-03  1.64e-01  9.33e-03  1.00e-02  6.44e-01  
  6  +4.1700e-01  +1.0349e+00  6.18e-01  2.87e-03  1.30e-01  7.21e-03  8.10e-03  3.10e-01  
  7  +3.9486e-01  +7.7911e-01  3.84e-01  1.87e-03  8.37e-02  6.39e-05  5.74e-03  7.87e-01  
  8  +3.4135e-01  +4.6538e-01  1.24e-01  5.32e-04  2.34e-02  2.58e-05  1.92e-03  6.98e-01  
  9  +3.1839e-01  +3.4853e-01  3.01e-02  1.32e-04  5.75e-03  7.46e-06  5.59e-04  7.29e-01  
 10  +3.1234e-01  +3.1920e-01  6.86e-03  3.01e-05  1.31e-03  2.27e-06  1.37e-04  7.88e-01  
 11  +3.1094e-01  +3.1265e-01  1.71e-03  7.48e-06  3.26e-04  1.28e-06  3.53e-05  9.59e-01  
 12  +3.1041e-01  +3.1043e-01  2.11e-05  9.24e-08  4.02e-06  1.57e-08  4.39e-07  9.88e-01  
 13  +3.1040e-01  +3.1040e-01  2.11e-07  9.23e-10  4.02e-08  1.57e-10  4.39e-09  9.90e-01  
 14  +3.1040e-01  +3.1040e-01  2.11e-09  9.23e-12  4.02e-10  1.57e-12  4.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.06ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:33 PM: Optimal value: 3.104e-01
(CVXPY) Sep 20 03:07:33 PM: Compilation took 3.584e-03 seconds
(CVXPY) Sep 20 03:07:33 PM: Solver (including time spent in interface) took 2.015e-03 seconds
Iteration: 5, Objective: 0.3104
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:33 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Finished problem compilation (took 3.056e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 2817
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9854e-01  +2.5139e+02  2.51e+02  9.35e-01  2.16e+01  1.00e+00  1.01e+00   ------   
  1  +5.8974e-01  +5.0878e+01  5.03e+01  3.52e-01  1.22e+01  3.98e-03  5.12e-01  6.42e-01  
  2  +5.3442e-01  +6.3493e+00  5.81e+00  9.74e-02  4.26e+00  1.12e-02  1.93e-01  8.98e-01  
  3  +4.9852e-01  +1.6753e+00  1.18e+00  3.25e-02  1.40e+00  4.44e-03  1.18e-01  8.84e-01  
  4  +4.5864e-01  +1.7620e+00  1.30e+00  8.66e-03  3.96e-01  1.82e-02  2.30e-02  8.81e-01  
  5  +4.2500e-01  +1.1462e+00  7.21e-01  3.63e-03  1.65e-01  9.81e-03  1.01e-02  6.41e-01  
  6  +4.1527e-01  +1.0508e+00  6.36e-01  2.93e-03  1.33e-01  7.43e-03  8.27e-03  3.07e-01  
  7  +3.8925e-01  +7.4536e-01  3.56e-01  1.71e-03  7.66e-02  6.51e-05  5.35e-03  7.81e-01  
  8  +3.3676e-01  +4.3691e-01  1.00e-01  4.36e-04  1.92e-02  2.40e-05  1.62e-03  7.39e-01  
  9  +3.2829e-01  +3.9462e-01  6.63e-02  2.92e-04  1.28e-02  2.64e-05  1.16e-03  4.31e-01  
 10  +3.2262e-01  +3.6686e-01  4.42e-02  1.93e-04  8.42e-03  3.37e-05  8.00e-04  7.28e-01  
 11  +3.1271e-01  +3.2059e-01  7.88e-03  3.46e-05  1.51e-03  5.99e-06  1.58e-04  8.29e-01  
 12  +3.1098e-01  +3.1278e-01  1.80e-03  7.88e-06  3.43e-04  1.50e-06  3.72e-05  9.90e-01  
 13  +3.1041e-01  +3.1043e-01  2.33e-05  1.02e-07  4.43e-06  1.92e-08  4.85e-07  9.87e-01  
 14  +3.1040e-01  +3.1040e-01  2.33e-07  1.02e-09  4.43e-08  1.92e-10  4.85e-09  9.90e-01  
 15  +3.1040e-01  +3.1040e-01  2.33e-09  1.02e-11  4.43e-10  1.92e-12  4.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.2203ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:33 PM: Optimal value: 3.104e-01
(CVXPY) Sep 20 03:07:33 PM: Compilation took 3.056e-03 seconds
(CVXPY) Sep 20 03:07:33 PM: Solver (including time spent in interface) took 2.551e-03 seconds
Iteration: 6, Objective: 0.3104
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:33 PM: Your problem has 284 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:33 PM: Finished problem compilation (took 2.643e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 284
  constraints   = 534
  nnz(P)        = 0
  nnz(A)        = 2848
  cones (total) = 1
    : Nonnegative = 1,  numel = 534

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9854e-01  +2.5138e+02  2.51e+02  9.35e-01  2.16e+01  1.00e+00  1.01e+00   ------   
  1  +5.8976e-01  +5.0886e+01  5.03e+01  3.52e-01  1.22e+01  3.98e-03  5.12e-01  6.42e-01  
  2  +5.3428e-01  +6.3344e+00  5.80e+00  9.73e-02  4.25e+00  1.12e-02  1.93e-01  9.00e-01  
  3  +4.9829e-01  +1.6491e+00  1.15e+00  3.18e-02  1.37e+00  4.43e-03  1.16e-01  9.03e-01  
  4  +4.5861e-01  +1.8216e+00  1.36e+00  9.08e-03  4.15e-01  1.82e-02  2.42e-02  8.81e-01  
  5  +4.2442e-01  +1.1529e+00  7.28e-01  3.67e-03  1.67e-01  9.54e-03  1.02e-02  6.54e-01  
  6  +4.1485e-01  +1.0488e+00  6.34e-01  2.94e-03  1.33e-01  6.99e-03  8.34e-03  3.16e-01  
  7  +3.9060e-01  +7.6075e-01  3.70e-01  1.78e-03  7.97e-02  6.21e-05  5.54e-03  8.00e-01  
  8  +3.3674e-01  +4.3765e-01  1.01e-01  4.38e-04  1.92e-02  2.21e-05  1.62e-03  7.44e-01  
  9  +3.2854e-01  +3.9640e-01  6.79e-02  2.98e-04  1.31e-02  2.53e-05  1.18e-03  4.12e-01  
 10  +3.2262e-01  +3.6733e-01  4.47e-02  1.95e-04  8.52e-03  3.29e-05  8.08e-04  7.11e-01  
 11  +3.1280e-01  +3.2107e-01  8.27e-03  3.64e-05  1.58e-03  6.12e-06  1.65e-04  8.20e-01  
 12  +3.1124e-01  +3.1392e-01  2.68e-03  1.17e-05  5.12e-04  2.21e-06  5.52e-05  9.52e-01  
 13  +3.1041e-01  +3.1046e-01  4.40e-05  1.93e-07  8.40e-06  3.57e-08  9.19e-07  9.84e-01  
 14  +3.1040e-01  +3.1040e-01  4.40e-07  1.93e-09  8.39e-08  3.57e-10  9.19e-09  9.90e-01  
 15  +3.1040e-01  +3.1040e-01  4.40e-09  1.93e-11  8.39e-10  3.57e-12  9.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1618ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:33 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:33 PM: Optimal value: 3.104e-01
(CVXPY) Sep 20 03:07:33 PM: Compilation took 2.643e-03 seconds
(CVXPY) Sep 20 03:07:33 PM: Solver (including time spent in interface) took 2.873e-03 seconds
FULL MODEL:
  Accruacy: 0.688
  Our objective: 0.37600000000000006

IF 
    (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.34)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1)            <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8730237483978271
Best over terms:
  Our final objective: 0.33999999999999997
    Its accruacy: 0.67
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.33999999999999997
  Highest accruacy: 0.67
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

