Command:
python test_script.py -s linear_dependence -d 2 -n 500 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.552
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 2.

Computed total variation: 0.552
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:41 PM: Your problem has 255 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:41 PM: Finished problem compilation (took 2.430e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 255
  constraints   = 505
  nnz(P)        = 0
  nnz(A)        = 1255
  cones (total) = 1
    : Nonnegative = 1,  numel = 505

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9745e-01  +2.5168e+02  2.51e+02  9.27e-01  1.56e+01  1.00e+00  1.01e+00   ------   
  1  +6.3285e-01  +4.4061e+01  4.34e+01  2.52e-01  7.26e+00  4.49e-03  3.92e-01  7.27e-01  
  2  +5.4535e-01  +7.0389e+00  6.49e+00  8.77e-02  2.92e+00  5.91e-03  1.70e-01  7.22e-01  
  3  +4.8807e-01  +3.2098e+00  2.72e+00  2.27e-02  7.88e-01  2.36e-02  4.92e-02  9.90e-01  
  4  +4.4394e-01  +2.8518e+00  2.41e+00  1.02e-02  3.58e-01  3.47e-02  2.23e-02  6.12e-01  
  5  +3.7321e-01  +1.4221e+00  1.05e+00  4.91e-03  1.67e-01  2.81e-04  1.21e-02  6.32e-01  
  6  +2.6414e-01  +4.4770e-01  1.84e-01  9.88e-04  3.15e-02  5.90e-05  3.83e-03  8.24e-01  
  7  +2.2687e-01  +2.4141e-01  1.45e-02  8.10e-05  2.53e-03  1.06e-05  4.81e-04  9.42e-01  
  8  +2.2413e-01  +2.2430e-01  1.65e-04  9.14e-07  2.86e-05  1.05e-07  5.63e-06  9.88e-01  
  9  +2.2410e-01  +2.2410e-01  1.64e-06  9.14e-09  2.85e-07  1.05e-09  5.63e-08  9.90e-01  
 10  +2.2410e-01  +2.2410e-01  1.64e-08  9.14e-11  2.85e-09  1.05e-11  5.63e-10  9.90e-01  
 11  +2.2410e-01  +2.2410e-01  1.64e-10  9.14e-13  2.85e-11  1.05e-13  5.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1073ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:41 PM: Optimal value: 2.241e-01
(CVXPY) Sep 20 03:03:41 PM: Compilation took 2.430e-03 seconds
(CVXPY) Sep 20 03:03:41 PM: Solver (including time spent in interface) took 3.865e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.2241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:41 PM: Your problem has 256 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:41 PM: Finished problem compilation (took 4.228e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 256
  constraints   = 506
  nnz(P)        = 0
  nnz(A)        = 1351
  cones (total) = 1
    : Nonnegative = 1,  numel = 506

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9733e-01  +2.5171e+02  2.51e+02  9.27e-01  1.61e+01  1.00e+00  1.02e+00   ------   
  1  +6.3146e-01  +4.4365e+01  4.37e+01  2.55e-01  7.54e+00  4.47e-03  3.98e-01  7.24e-01  
  2  +5.4543e-01  +7.0725e+00  6.53e+00  8.81e-02  3.02e+00  6.08e-03  1.71e-01  7.27e-01  
  3  +4.8770e-01  +3.1789e+00  2.69e+00  2.25e-02  8.01e-01  2.36e-02  4.90e-02  9.90e-01  
  4  +4.4563e-01  +2.8408e+00  2.40e+00  1.05e-02  3.79e-01  3.35e-02  2.31e-02  6.00e-01  
  5  +3.9748e-01  +1.9108e+00  1.51e+00  6.88e-03  2.44e-01  1.20e-02  1.63e-02  4.13e-01  
  6  +3.3109e-01  +1.0853e+00  7.54e-01  3.87e-03  1.31e-01  1.59e-03  1.10e-02  5.57e-01  
  7  +2.5544e-01  +4.2160e-01  1.66e-01  9.06e-04  2.95e-02  1.02e-05  3.79e-03  7.36e-01  
  8  +2.2594e-01  +2.3625e-01  1.03e-02  5.76e-05  1.85e-03  3.68e-06  3.45e-04  9.48e-01  
  9  +2.2412e-01  +2.2423e-01  1.11e-04  6.17e-07  1.98e-05  3.84e-08  3.82e-06  9.89e-01  
 10  +2.2410e-01  +2.2410e-01  1.11e-06  6.17e-09  1.98e-07  3.84e-10  3.82e-08  9.90e-01  
 11  +2.2410e-01  +2.2410e-01  1.11e-08  6.17e-11  1.98e-09  3.84e-12  3.82e-10  9.90e-01  
 12  +2.2410e-01  +2.2410e-01  1.11e-10  6.17e-13  1.98e-11  3.84e-14  3.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3439ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:41 PM: Optimal value: 2.241e-01
(CVXPY) Sep 20 03:03:41 PM: Compilation took 4.228e-03 seconds
(CVXPY) Sep 20 03:03:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:41 PM: Your problem has 257 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:41 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 257
  constraints   = 507
  nnz(P)        = 0
  nnz(A)        = 1450
  cones (total) = 1
    : Nonnegative = 1,  numel = 507

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9700e-01  +2.5170e+02  2.51e+02  9.28e-01  1.66e+01  1.00e+00  1.01e+00   ------   
  1  +6.2165e-01  +4.5413e+01  4.48e+01  2.71e-01  8.15e+00  4.34e-03  4.18e-01  7.11e-01  
  2  +5.4592e-01  +7.2088e+00  6.66e+00  8.98e-02  3.18e+00  6.58e-03  1.73e-01  7.48e-01  
  3  +4.8841e-01  +3.0694e+00  2.58e+00  2.54e-02  9.32e-01  2.13e-02  5.59e-02  9.90e-01  
  4  +4.3702e-01  +2.7501e+00  2.31e+00  1.00e-02  3.73e-01  3.81e-02  2.21e-02  6.38e-01  
  5  +3.7364e-01  +1.4359e+00  1.06e+00  5.13e-03  1.85e-01  3.07e-04  1.28e-02  6.30e-01  
  6  +2.7069e-01  +5.0266e-01  2.32e-01  1.23e-03  4.20e-02  6.45e-05  4.52e-03  7.65e-01  
  7  +2.2761e-01  +2.4824e-01  2.06e-02  1.15e-04  3.84e-03  1.58e-05  6.74e-04  9.40e-01  
  8  +2.2425e-01  +2.2510e-01  8.55e-04  4.76e-06  1.58e-04  6.02e-07  2.93e-05  9.58e-01  
  9  +2.2410e-01  +2.2411e-01  8.60e-06  4.79e-08  1.59e-06  6.03e-09  2.96e-07  9.90e-01  
 10  +2.2410e-01  +2.2410e-01  8.60e-08  4.79e-10  1.59e-08  6.03e-11  2.96e-09  9.90e-01  
 11  +2.2410e-01  +2.2410e-01  8.60e-10  4.79e-12  1.59e-10  6.03e-13  2.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2557ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:41 PM: Optimal value: 2.241e-01
(CVXPY) Sep 20 03:03:41 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:41 PM: Solver (including time spent in interface) took 4.338e-03 seconds
FULL MODEL:
  Accruacy: 0.776
  Our objective: 0.552

IF 
    (x0 = 0) <-- (term's our objective: 0.552)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8073298931121826
Best over terms:
  Our final objective: 0.552
    Its accruacy: 0.776
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.552
  Highest accruacy: 0.776
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

