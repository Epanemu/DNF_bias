Command:
python test_script.py -s linear_dependence -d 9 -n 50 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 0.96
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:40 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Finished problem compilation (took 4.106e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8851e-01  +2.6640e+01  2.62e+01  8.38e-01  7.08e+00  1.00e+00  1.10e+00   ------   
  1  +5.5173e-01  +5.7566e+00  5.20e+00  3.61e-01  4.08e+00  3.69e-03  6.16e-01  6.09e-01  
  2  +4.3156e-01  +1.2411e+00  8.10e-01  7.59e-02  1.05e+00  2.21e-02  2.06e-01  9.90e-01  
  3  +3.5191e-01  +7.3421e-01  3.82e-01  2.33e-02  3.25e-01  1.09e-02  8.28e-02  6.94e-01  
  4  +2.9960e-01  +3.9822e-01  9.86e-02  5.10e-03  7.04e-02  1.86e-03  2.48e-02  7.65e-01  
  5  +2.8088e-01  +2.8422e-01  3.33e-03  1.77e-04  2.41e-03  2.93e-05  9.96e-04  9.74e-01  
  6  +2.8011e-01  +2.8014e-01  3.33e-05  1.76e-06  2.41e-05  2.92e-07  1.00e-05  9.90e-01  
  7  +2.8010e-01  +2.8010e-01  3.33e-07  1.76e-08  2.41e-07  2.92e-09  1.00e-07  9.90e-01  
  8  +2.8010e-01  +2.8010e-01  3.33e-09  1.76e-10  2.41e-09  2.92e-11  1.00e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 251.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:40 PM: Optimal value: 2.801e-01
(CVXPY) Sep 20 03:16:40 PM: Compilation took 4.106e-03 seconds
(CVXPY) Sep 20 03:16:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:40 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 400
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7696e-01  +2.8014e+01  2.75e+01  8.49e-01  7.28e+00  1.00e+00  1.16e+00   ------   
  1  +4.8806e-01  +5.9264e+00  5.44e+00  3.66e-01  4.07e+00  3.73e-03  6.35e-01  6.16e-01  
  2  +3.1220e-01  +1.2729e+00  9.61e-01  7.07e-02  1.01e+00  2.34e-02  1.88e-01  9.71e-01  
  3  +2.3458e-01  +5.6687e-01  3.32e-01  2.10e-02  3.13e-01  8.21e-03  6.28e-02  7.27e-01  
  4  +1.8916e-01  +3.1042e-01  1.21e-01  5.87e-03  9.60e-02  2.93e-03  2.02e-02  8.33e-01  
  5  +1.7828e-01  +2.9192e-01  1.14e-01  4.47e-03  8.82e-02  2.82e-03  1.49e-02  4.33e-01  
  6  +1.6046e-01  +2.4267e-01  8.22e-02  2.78e-03  5.88e-02  2.02e-03  9.63e-03  4.33e-01  
  7  +1.2485e-01  +1.3232e-01  7.47e-03  2.38e-04  4.98e-03  5.88e-05  8.84e-04  9.68e-01  
  8  +1.2058e-01  +1.2071e-01  1.28e-04  4.08e-06  8.50e-05  6.71e-07  1.54e-05  9.84e-01  
  9  +1.2050e-01  +1.2050e-01  1.86e-06  6.29e-08  1.28e-06  6.65e-09  2.42e-07  9.85e-01  
 10  +1.2050e-01  +1.2050e-01  1.85e-08  6.29e-10  1.28e-08  6.64e-11  2.42e-09  9.90e-01  
 11  +1.2050e-01  +1.2050e-01  1.86e-10  6.31e-12  1.28e-10  6.64e-13  2.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 322.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:40 PM: Optimal value: 1.205e-01
(CVXPY) Sep 20 03:16:40 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 03:16:40 PM: Solver (including time spent in interface) took 1.007e-03 seconds
Iteration: 2, Objective: 0.1205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:40 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Finished problem compilation (took 3.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 458
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7362e-01  +2.7958e+01  2.75e+01  8.57e-01  7.13e+00  1.00e+00  1.15e+00   ------   
  1  +4.5998e-01  +5.9321e+00  5.47e+00  3.73e-01  3.90e+00  3.80e-03  6.25e-01  6.15e-01  
  2  +2.8397e-01  +1.4186e+00  1.13e+00  8.04e-02  1.13e+00  2.24e-02  2.03e-01  9.09e-01  
  3  +1.9988e-01  +6.8497e-01  4.85e-01  2.62e-02  3.97e-01  1.18e-02  7.54e-02  7.57e-01  
  4  +1.2437e-01  +2.6683e-01  1.42e-01  6.36e-03  1.04e-01  3.36e-03  2.06e-02  8.21e-01  
  5  +1.0310e-01  +2.0443e-01  1.01e-01  3.86e-03  7.06e-02  2.52e-03  1.24e-02  5.03e-01  
  6  +6.8108e-02  +8.2719e-02  1.46e-02  5.29e-04  9.72e-03  1.63e-04  1.80e-03  9.90e-01  
  7  +6.0877e-02  +6.1211e-02  3.33e-04  1.21e-05  2.20e-04  2.31e-06  4.17e-05  9.77e-01  
  8  +6.0710e-02  +6.0729e-02  1.93e-05  7.75e-07  1.34e-05  1.20e-07  2.80e-06  9.43e-01  
  9  +6.0700e-02  +6.0700e-02  1.98e-07  8.04e-09  1.38e-07  1.21e-09  2.92e-08  9.90e-01  
 10  +6.0700e-02  +6.0700e-02  1.98e-09  8.04e-11  1.38e-09  1.21e-11  2.92e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 337.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:40 PM: Optimal value: 6.070e-02
(CVXPY) Sep 20 03:16:40 PM: Compilation took 3.004e-03 seconds
(CVXPY) Sep 20 03:16:40 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 3, Objective: 0.0607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:40 PM: Your problem has 74 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Finished problem compilation (took 5.816e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 99
  nnz(P)        = 0
  nnz(A)        = 505
  cones (total) = 1
    : Nonnegative = 1,  numel = 99

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6410e-01  +2.7538e+01  2.71e+01  8.64e-01  6.96e+00  1.00e+00  1.13e+00   ------   
  1  +4.0268e-01  +5.9262e+00  5.52e+00  3.79e-01  3.70e+00  3.95e-03  6.07e-01  6.08e-01  
  2  +2.3148e-01  +1.7251e+00  1.49e+00  1.05e-01  1.35e+00  2.08e-02  2.45e-01  7.92e-01  
  3  +1.5157e-01  +7.0448e-01  5.53e-01  3.49e-02  4.75e-01  9.60e-03  9.34e-02  7.15e-01  
  4  +9.5510e-02  +2.3794e-01  1.42e-01  8.18e-03  1.19e-01  2.76e-03  2.50e-02  7.77e-01  
  5  +7.6119e-02  +1.7328e-01  9.72e-02  4.57e-03  7.71e-02  1.97e-03  1.42e-02  5.93e-01  
  6  +4.7984e-02  +6.6292e-02  1.83e-02  8.12e-04  1.38e-02  1.87e-04  2.69e-03  9.90e-01  
  7  +4.1063e-02  +4.1905e-02  8.42e-04  3.70e-05  6.26e-04  6.76e-06  1.25e-04  9.56e-01  
  8  +4.0737e-02  +4.0833e-02  9.60e-05  4.51e-06  7.29e-05  6.92e-07  1.66e-05  9.18e-01  
  9  +4.0701e-02  +4.0704e-02  2.73e-06  1.31e-07  2.10e-06  2.21e-08  4.90e-07  9.81e-01  
 10  +4.0700e-02  +4.0700e-02  2.73e-08  1.31e-09  2.10e-08  2.21e-10  4.90e-09  9.90e-01  
 11  +4.0700e-02  +4.0700e-02  2.74e-10  1.32e-11  2.11e-10  2.22e-12  4.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 344.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:40 PM: Optimal value: 4.070e-02
(CVXPY) Sep 20 03:16:40 PM: Compilation took 5.816e-03 seconds
(CVXPY) Sep 20 03:16:40 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 4, Objective: 0.0407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:16:40 PM: Your problem has 84 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:16:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:16:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:16:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:16:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:16:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:16:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:16:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:16:40 PM: Finished problem compilation (took 3.554e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 539
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5760e-01  +2.7799e+01  2.73e+01  8.71e-01  6.74e+00  1.00e+00  1.15e+00   ------   
  1  +3.4875e-01  +5.9945e+00  5.65e+00  3.82e-01  3.50e+00  4.05e-03  6.06e-01  6.06e-01  
  2  +1.3682e-01  +2.0663e+00  1.93e+00  1.22e-01  1.44e+00  1.91e-02  2.81e-01  6.90e-01  
  3  +1.1643e-01  +4.7968e-01  3.63e-01  2.67e-02  3.33e-01  7.31e-03  7.44e-02  7.72e-01  
  4  +6.9571e-02  +2.4635e-01  1.77e-01  1.11e-02  1.48e-01  3.65e-03  3.50e-02  6.15e-01  
  5  +5.1912e-02  +1.3756e-01  8.56e-02  4.93e-03  6.93e-02  1.79e-03  1.62e-02  6.08e-01  
  6  +4.0458e-02  +1.0666e-01  6.62e-02  3.15e-03  5.08e-02  1.42e-03  1.03e-02  4.94e-01  
  7  +2.2615e-02  +2.7475e-02  4.86e-03  2.24e-04  3.62e-03  4.33e-05  7.67e-04  9.86e-01  
  8  +2.0979e-02  +2.1414e-02  4.35e-04  2.06e-05  3.28e-04  2.81e-06  7.28e-05  9.06e-01  
  9  +2.0822e-02  +2.0874e-02  5.21e-05  2.62e-06  4.07e-05  4.64e-07  9.85e-06  9.51e-01  
 10  +2.0800e-02  +2.0801e-02  6.68e-07  3.39e-08  5.24e-07  5.69e-09  1.28e-07  9.87e-01  
 11  +2.0800e-02  +2.0800e-02  6.68e-09  3.39e-10  5.24e-09  5.69e-11  1.28e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 430µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:16:40 PM: Problem status: optimal
(CVXPY) Sep 20 03:16:40 PM: Optimal value: 2.080e-02
(CVXPY) Sep 20 03:16:40 PM: Compilation took 3.554e-03 seconds
(CVXPY) Sep 20 03:16:40 PM: Solver (including time spent in interface) took 1.004e-03 seconds
FULL MODEL:
  Accruacy: 0.98
  Our objective: 0.96

IF 
    (x0 = 0 AND x1 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.32)
 OR (x0 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1)                                  <-- (term's our objective: 0.2)
 OR (x1 = 0 AND x4 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.24)
 OR (x1 = 1 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.16)
 OR (x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1)                       <-- (term's our objective: 0.28)
 OR (x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1) <-- (term's our objective: 0.08)
 OR (x3 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.9168694019317627
Best over terms:
  Our final objective: 0.31999999999999995
    Its accruacy: 0.66
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.31999999999999995
  Highest accruacy: 0.66
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

