Command:
python test_script.py -s linear_dependence -d 4 -n 500 --seed 43 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.28400000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.288
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:01 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:01 PM: Finished problem compilation (took 4.181e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +2.5093e+02  2.50e+02  9.32e-01  1.86e+01  1.00e+00  1.01e+00   ------   
  1  +6.0693e-01  +4.8858e+01  4.83e+01  3.19e-01  1.01e+01  4.09e-03  4.76e-01  6.68e-01  
  2  +5.4674e-01  +7.5534e+00  7.01e+00  1.11e-01  4.22e+00  8.53e-03  2.13e-01  7.65e-01  
  3  +5.0082e-01  +1.4559e+00  9.55e-01  2.81e-02  1.03e+00  2.32e-03  1.85e-01  4.94e-01  
  4  +4.9749e-01  +8.0883e-01  3.11e-01  8.25e-03  3.13e-01  1.65e-03  3.96e-02  8.37e-01  
  5  +4.5901e-01  +7.8072e-01  3.22e-01  1.52e-03  5.93e-02  1.24e-02  4.64e-03  9.20e-01  
  6  +4.3799e-01  +6.3286e-01  1.95e-01  9.13e-04  3.52e-02  4.77e-03  3.16e-03  4.22e-01  
  7  +4.0903e-01  +4.6866e-01  5.96e-02  2.68e-04  1.02e-02  4.21e-05  1.12e-03  8.62e-01  
  8  +3.9324e-01  +3.9702e-01  3.78e-03  1.63e-05  6.20e-04  1.76e-06  7.55e-05  9.43e-01  
  9  +3.9211e-01  +3.9215e-01  3.97e-05  1.70e-07  6.49e-06  1.90e-08  7.98e-07  9.90e-01  
 10  +3.9210e-01  +3.9210e-01  3.97e-07  1.70e-09  6.49e-08  1.90e-10  7.98e-09  9.90e-01  
 11  +3.9210e-01  +3.9210e-01  3.97e-09  1.70e-11  6.49e-10  1.90e-12  7.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3328ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:01 PM: Optimal value: 3.921e-01
(CVXPY) Sep 20 03:06:01 PM: Compilation took 4.181e-03 seconds
(CVXPY) Sep 20 03:06:01 PM: Solver (including time spent in interface) took 2.350e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3921
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:01 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:01 PM: Finished problem compilation (took 3.844e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 2287
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9844e-01  +2.5114e+02  2.51e+02  9.33e-01  1.99e+01  1.00e+00  1.02e+00   ------   
  1  +6.0128e-01  +4.9511e+01  4.89e+01  3.29e-01  1.09e+01  4.06e-03  4.90e-01  6.60e-01  
  2  +5.4229e-01  +7.1061e+00  6.56e+00  1.05e-01  4.26e+00  9.37e-03  2.06e-01  8.11e-01  
  3  +5.0016e-01  +1.5041e+00  1.00e+00  2.99e-02  1.17e+00  2.79e-03  1.65e-01  6.30e-01  
  4  +4.9433e-01  +1.0660e+00  5.72e-01  1.26e-02  5.14e-01  3.38e-03  4.46e-02  8.23e-01  
  5  +4.7561e-01  +9.2087e-01  4.45e-01  4.06e-03  1.68e-01  7.35e-03  1.21e-02  7.41e-01  
  6  +4.6803e-01  +9.0245e-01  4.34e-01  2.96e-03  1.23e-01  8.34e-03  8.58e-03  3.76e-01  
  7  +4.6697e-01  +8.8522e-01  4.18e-01  2.74e-03  1.14e-01  5.05e-03  7.96e-03  3.93e-01  
  8  +4.4584e-01  +7.9299e-01  3.47e-01  1.57e-03  6.52e-02  5.12e-03  4.60e-03  4.86e-01  
  9  +4.1195e-01  +5.9561e-01  1.84e-01  7.74e-04  3.17e-02  8.43e-04  2.50e-03  7.02e-01  
 10  +3.9518e-01  +5.2095e-01  1.26e-01  5.11e-04  2.09e-02  4.36e-04  1.74e-03  4.72e-01  
 11  +3.6125e-01  +3.7461e-01  1.34e-02  5.19e-05  2.10e-03  7.41e-06  2.03e-04  9.09e-01  
 12  +3.5638e-01  +3.5680e-01  4.26e-04  1.65e-06  6.69e-05  2.09e-07  6.91e-06  9.72e-01  
 13  +3.5620e-01  +3.5621e-01  4.28e-06  1.66e-08  6.72e-07  2.10e-09  6.99e-08  9.90e-01  
 14  +3.5620e-01  +3.5620e-01  4.27e-08  1.66e-10  6.72e-09  2.10e-11  6.99e-10  9.90e-01  
 15  +3.5620e-01  +3.5620e-01  4.27e-10  1.66e-12  6.72e-11  2.10e-13  6.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7312ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:01 PM: Optimal value: 3.562e-01
(CVXPY) Sep 20 03:06:01 PM: Compilation took 3.844e-03 seconds
(CVXPY) Sep 20 03:06:01 PM: Solver (including time spent in interface) took 2.009e-03 seconds
Iteration: 2, Objective: 0.3562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:01 PM: Your problem has 272 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:01 PM: Finished problem compilation (took 3.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 272
  constraints   = 522
  nnz(P)        = 0
  nnz(A)        = 2365
  cones (total) = 1
    : Nonnegative = 1,  numel = 522

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9841e-01  +2.5120e+02  2.51e+02  9.33e-01  1.99e+01  1.00e+00  1.02e+00   ------   
  1  +6.0025e-01  +4.9687e+01  4.91e+01  3.32e-01  1.09e+01  4.06e-03  4.92e-01  6.58e-01  
  2  +5.4164e-01  +7.0453e+00  6.50e+00  1.05e-01  4.26e+00  9.53e-03  2.06e-01  8.17e-01  
  3  +5.0025e-01  +1.5290e+00  1.03e+00  3.06e-02  1.20e+00  2.82e-03  1.65e-01  6.33e-01  
  4  +4.9410e-01  +1.0325e+00  5.38e-01  1.18e-02  4.79e-01  3.33e-03  4.09e-02  8.34e-01  
  5  +4.7781e-01  +9.1315e-01  4.35e-01  4.22e-03  1.75e-01  6.71e-03  1.26e-02  7.15e-01  
  6  +4.6960e-01  +8.9830e-01  4.29e-01  2.93e-03  1.22e-01  7.84e-03  8.47e-03  4.41e-01  
  7  +4.6358e-01  +8.6183e-01  3.98e-01  2.35e-03  9.81e-02  2.90e-03  6.82e-03  7.02e-01  
  8  +4.2463e-01  +6.6238e-01  2.38e-01  9.49e-04  3.93e-02  2.04e-03  2.90e-03  6.36e-01  
  9  +3.9607e-01  +5.3615e-01  1.40e-01  5.41e-04  2.22e-02  9.08e-04  1.79e-03  4.96e-01  
 10  +3.6251e-01  +3.8073e-01  1.82e-02  7.09e-05  2.88e-03  3.74e-05  2.74e-04  8.85e-01  
 11  +3.5701e-01  +3.5920e-01  2.19e-03  8.53e-06  3.46e-04  2.96e-06  3.46e-05  9.65e-01  
 12  +3.5623e-01  +3.5631e-01  7.90e-05  3.07e-07  1.25e-05  1.02e-07  1.26e-06  9.71e-01  
 13  +3.5620e-01  +3.5620e-01  7.91e-07  3.08e-09  1.25e-07  1.02e-09  1.26e-08  9.90e-01  
 14  +3.5620e-01  +3.5620e-01  7.92e-09  3.08e-11  1.25e-09  1.02e-11  1.26e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5552ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:01 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:01 PM: Optimal value: 3.562e-01
(CVXPY) Sep 20 03:06:01 PM: Compilation took 3.513e-03 seconds
(CVXPY) Sep 20 03:06:01 PM: Solver (including time spent in interface) took 3.019e-03 seconds
FULL MODEL:
  Accruacy: 0.644
  Our objective: 0.28800000000000003

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.284)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1) <-- (term's our objective: 0.004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4634981155395508
Best over terms:
  Our final objective: 0.28400000000000003
    Its accruacy: 0.642
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.28400000000000003
  Highest accruacy: 0.642
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

