Command:
python test_script.py -s linear_dependence -d 4 -n 100 --seed 34 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.38000000000000006
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:56 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:56 PM: Finished problem compilation (took 3.679e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9501e-01  +5.1332e+01  5.08e+01  8.59e-01  7.93e+00  1.00e+00  1.05e+00   ------   
  1  +5.9942e-01  +1.0142e+01  9.54e+00  2.94e-01  4.17e+00  4.06e-03  4.94e-01  6.72e-01  
  2  +5.2201e-01  +1.4109e+00  8.89e-01  5.32e-02  8.97e-01  1.01e-02  1.34e-01  9.68e-01  
  3  +5.1126e-01  +1.3917e+00  8.80e-01  3.53e-02  6.10e-01  1.30e-02  8.93e-02  3.88e-01  
  4  +4.7246e-01  +1.1171e+00  6.45e-01  1.67e-02  2.92e-01  1.10e-02  4.60e-02  6.00e-01  
  5  +4.2411e-01  +5.9215e-01  1.68e-01  5.22e-03  8.78e-02  7.28e-05  1.85e-02  7.81e-01  
  6  +3.9286e-01  +4.3908e-01  4.62e-02  1.04e-03  1.75e-02  7.53e-05  4.86e-03  8.22e-01  
  7  +3.8065e-01  +3.8258e-01  1.92e-03  4.19e-05  6.99e-04  6.29e-06  2.17e-04  9.90e-01  
  8  +3.8011e-01  +3.8012e-01  1.93e-05  4.20e-07  7.01e-06  6.30e-08  2.18e-06  9.90e-01  
  9  +3.8010e-01  +3.8010e-01  1.93e-07  4.20e-09  7.01e-08  6.30e-10  2.18e-08  9.90e-01  
 10  +3.8010e-01  +3.8010e-01  1.93e-09  4.20e-11  7.01e-10  6.30e-12  2.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 294.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:56 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:56 PM: Optimal value: 3.801e-01
(CVXPY) Sep 20 03:05:56 PM: Compilation took 3.679e-03 seconds
(CVXPY) Sep 20 03:05:56 PM: Solver (including time spent in interface) took 5.038e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:56 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:56 PM: Finished problem compilation (took 2.640e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 481
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9279e-01  +5.1309e+01  5.08e+01  8.66e-01  8.37e+00  1.00e+00  1.06e+00   ------   
  1  +5.8140e-01  +1.0450e+01  9.87e+00  3.20e-01  4.45e+00  4.00e-03  5.27e-01  6.51e-01  
  2  +5.1377e-01  +1.6867e+00  1.17e+00  6.77e-02  1.17e+00  1.21e-02  1.70e-01  9.26e-01  
  3  +4.7362e-01  +1.4676e+00  9.94e-01  3.20e-02  5.70e-01  1.53e-02  8.62e-02  5.67e-01  
  4  +4.0985e-01  +8.5486e-01  4.45e-01  1.06e-02  1.88e-01  7.77e-03  3.25e-02  6.56e-01  
  5  +3.8653e-01  +7.0999e-01  3.23e-01  6.74e-03  1.19e-01  5.95e-03  2.17e-02  3.72e-01  
  6  +3.5795e-01  +5.5245e-01  1.95e-01  3.86e-03  6.74e-02  3.04e-03  1.34e-02  4.64e-01  
  7  +3.2481e-01  +3.7569e-01  5.09e-02  1.02e-03  1.77e-02  5.67e-04  4.08e-03  7.63e-01  
  8  +3.1090e-01  +3.1257e-01  1.67e-03  3.38e-05  5.80e-04  9.87e-06  1.46e-04  9.71e-01  
  9  +3.1035e-01  +3.1048e-01  1.30e-04  2.64e-06  4.52e-05  6.48e-07  1.18e-05  9.22e-01  
 10  +3.1030e-01  +3.1030e-01  2.14e-06  4.37e-08  7.47e-07  9.27e-09  2.01e-07  9.86e-01  
 11  +3.1030e-01  +3.1030e-01  2.14e-08  4.37e-10  7.46e-09  9.26e-11  2.01e-09  9.90e-01  
 12  +3.1030e-01  +3.1030e-01  2.14e-10  4.37e-12  7.47e-11  9.26e-13  2.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 456.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:56 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:56 PM: Optimal value: 3.103e-01
(CVXPY) Sep 20 03:05:56 PM: Compilation took 2.640e-03 seconds
(CVXPY) Sep 20 03:05:56 PM: Solver (including time spent in interface) took 3.927e-04 seconds
FULL MODEL:
  Accruacy: 0.69
  Our objective: 0.38

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0)            <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.14)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.2598721981048584
Best over terms:
  Our final objective: 0.19999999999999998
    Its accruacy: 0.6
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.19999999999999998
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

