Command:
python test_script.py -s linear_dependence -d 6 -n 1000 --seed 43 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.158
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 6.

Computed total variation: 0.262
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:19 PM: Your problem has 513 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Finished problem compilation (took 5.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 1013
  nnz(P)        = 0
  nnz(A)        = 4513
  cones (total) = 1
    : Nonnegative = 1,  numel = 1013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9988e-01  +5.0080e+02  5.00e+02  9.53e-01  3.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.9277e-01  +1.0327e+02  1.03e+02  3.71e-01  1.83e+01  3.92e-03  5.27e-01  6.27e-01  
  2  +5.4040e-01  +1.3764e+01  1.32e+01  1.30e-01  8.02e+00  1.16e-02  2.39e-01  8.40e-01  
  3  +5.0572e-01  +2.9096e+00  2.40e+00  4.89e-02  2.89e+00  2.27e-05  2.23e-01  2.87e-01  
  4  +5.0048e-01  +7.6055e-01  2.60e-01  5.65e-03  3.49e-01  8.47e-06  6.74e-02  8.26e-01  
  5  +4.9942e-01  +7.1008e-01  2.11e-01  3.50e-03  2.18e-01  2.16e-05  1.51e-02  8.47e-01  
  6  +4.8842e-01  +6.4106e-01  1.53e-01  4.28e-04  2.70e-02  1.51e-04  1.31e-03  9.17e-01  
  7  +4.7624e-01  +5.7523e-01  9.90e-02  2.49e-04  1.57e-02  7.87e-05  8.21e-04  4.83e-01  
  8  +4.5861e-01  +4.8428e-01  2.57e-02  5.79e-05  3.63e-03  5.66e-06  2.21e-04  9.04e-01  
  9  +4.5045e-01  +4.5145e-01  1.00e-03  2.03e-06  1.27e-04  2.62e-07  8.63e-06  9.80e-01  
 10  +4.5010e-01  +4.5011e-01  1.02e-05  2.06e-08  1.29e-06  2.67e-09  8.84e-08  9.90e-01  
 11  +4.5010e-01  +4.5010e-01  1.02e-07  2.06e-10  1.29e-08  2.67e-11  8.84e-10  9.90e-01  
 12  +4.5010e-01  +4.5010e-01  1.02e-09  2.06e-12  1.29e-10  2.67e-13  8.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0438ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:19 PM: Optimal value: 4.501e-01
(CVXPY) Sep 20 03:09:19 PM: Compilation took 5.008e-03 seconds
(CVXPY) Sep 20 03:09:19 PM: Solver (including time spent in interface) took 3.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:19 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Finished problem compilation (took 3.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 5572
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0135e+02  5.01e+02  9.54e-01  3.23e+01  1.00e+00  1.01e+00   ------   
  1  +5.9122e-01  +1.0366e+02  1.03e+02  3.76e-01  1.93e+01  3.90e-03  5.35e-01  6.24e-01  
  2  +5.3836e-01  +1.3373e+01  1.28e+01  1.28e-01  8.18e+00  1.21e-02  2.37e-01  8.62e-01  
  3  +5.0459e-01  +2.6861e+00  2.18e+00  4.50e-02  2.79e+00  2.27e-05  2.14e-01  3.83e-01  
  4  +5.0097e-01  +1.0354e+00  5.34e-01  1.16e-02  7.45e-01  9.53e-06  9.10e-02  6.29e-01  
  5  +4.9891e-01  +7.6645e-01  2.68e-01  4.25e-03  2.81e-01  1.89e-05  1.58e-02  8.91e-01  
  6  +4.8910e-01  +7.0238e-01  2.13e-01  9.21e-04  6.21e-02  7.73e-05  2.63e-03  8.47e-01  
  7  +4.8649e-01  +7.0178e-01  2.15e-01  6.91e-04  4.65e-02  9.69e-05  1.95e-03  3.55e-01  
  8  +4.8083e-01  +6.7698e-01  1.96e-01  5.33e-04  3.59e-02  9.49e-05  1.50e-03  4.12e-01  
  9  +4.6706e-01  +6.1253e-01  1.45e-01  3.08e-04  2.08e-02  7.80e-05  8.80e-04  7.11e-01  
 10  +4.6560e-01  +6.0683e-01  1.41e-01  3.05e-04  2.07e-02  7.39e-05  8.75e-04  4.73e-02  
 11  +4.5367e-01  +5.6187e-01  1.08e-01  2.17e-04  1.47e-02  5.63e-05  6.32e-04  4.15e-01  
 12  +4.2455e-01  +4.4990e-01  2.53e-02  4.35e-05  2.97e-03  1.30e-05  1.35e-04  9.90e-01  
 13  +4.1504e-01  +4.1654e-01  1.50e-03  2.53e-06  1.77e-04  8.98e-07  8.31e-06  9.73e-01  
 14  +4.1431e-01  +4.1432e-01  1.60e-05  2.67e-08  1.88e-06  9.59e-09  8.86e-08  9.90e-01  
 15  +4.1430e-01  +4.1430e-01  1.60e-07  2.67e-10  1.88e-08  9.59e-11  8.86e-10  9.90e-01  
 16  +4.1430e-01  +4.1430e-01  1.60e-09  2.67e-12  1.88e-10  9.60e-13  8.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5251ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:19 PM: Optimal value: 4.143e-01
(CVXPY) Sep 20 03:09:19 PM: Compilation took 3.992e-03 seconds
(CVXPY) Sep 20 03:09:19 PM: Solver (including time spent in interface) took 5.083e-03 seconds
Iteration: 2, Objective: 0.4143
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:19 PM: Your problem has 532 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 532
  constraints   = 1032
  nnz(P)        = 0
  nnz(A)        = 5887
  cones (total) = 1
    : Nonnegative = 1,  numel = 1032

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0133e+02  5.01e+02  9.54e-01  3.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.9067e-01  +1.0372e+02  1.03e+02  3.77e-01  1.92e+01  3.90e-03  5.38e-01  6.24e-01  
  2  +5.3777e-01  +1.3266e+01  1.27e+01  1.27e-01  8.03e+00  1.23e-02  2.36e-01  8.69e-01  
  3  +5.0416e-01  +2.5966e+00  2.09e+00  4.35e-02  2.69e+00  2.27e-05  2.10e-01  4.28e-01  
  4  +5.0103e-01  +1.1401e+00  6.39e-01  1.38e-02  8.82e-01  1.06e-05  9.44e-02  5.84e-01  
  5  +4.9663e-01  +1.2924e+00  7.96e-01  6.49e-03  4.30e-01  6.24e-05  1.89e-02  9.90e-01  
  6  +4.8184e-01  +1.0058e+00  5.24e-01  1.71e-03  1.15e-01  1.14e-04  4.83e-03  7.50e-01  
  7  +4.7516e-01  +9.1028e-01  4.35e-01  1.20e-03  8.10e-02  1.28e-04  3.37e-03  4.86e-01  
  8  +4.7397e-01  +8.7774e-01  4.04e-01  1.14e-03  7.71e-02  1.19e-04  3.24e-03  1.30e-01  
  9  +4.7786e-01  +9.0065e-01  4.23e-01  1.12e-03  7.55e-02  1.54e-04  3.09e-03  3.26e-01  
 10  +4.6231e-01  +7.0517e-01  2.43e-01  6.49e-04  4.37e-02  9.18e-05  1.90e-03  9.90e-01  
 11  +4.3644e-01  +5.6921e-01  1.33e-01  3.02e-04  2.04e-02  5.12e-05  9.36e-04  6.20e-01  
 12  +4.1669e-01  +4.7739e-01  6.07e-02  1.27e-04  8.75e-03  2.64e-05  4.13e-04  7.12e-01  
 13  +4.1222e-01  +4.5962e-01  4.74e-02  9.48e-05  6.52e-03  2.23e-05  3.12e-04  3.40e-01  
 14  +4.0734e-01  +4.3852e-01  3.12e-02  6.23e-05  4.35e-03  1.94e-05  2.10e-04  9.90e-01  
 15  +4.0041e-01  +4.1326e-01  1.29e-02  2.47e-05  1.74e-03  8.03e-06  8.72e-05  6.41e-01  
 16  +3.9579e-01  +3.9624e-01  4.53e-04  8.59e-07  6.10e-05  2.55e-07  3.17e-06  9.68e-01  
 17  +3.9560e-01  +3.9561e-01  4.54e-06  8.59e-09  6.11e-07  2.55e-09  3.18e-08  9.90e-01  
 18  +3.9560e-01  +3.9560e-01  4.54e-08  8.59e-11  6.11e-09  2.55e-11  3.18e-10  9.90e-01  
 19  +3.9560e-01  +3.9560e-01  4.54e-10  8.59e-13  6.11e-11  2.55e-13  3.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2833ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:19 PM: Optimal value: 3.956e-01
(CVXPY) Sep 20 03:09:19 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 03:09:19 PM: Solver (including time spent in interface) took 6.274e-03 seconds
Iteration: 3, Objective: 0.3956
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:19 PM: Your problem has 542 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Finished problem compilation (took 3.264e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 542
  constraints   = 1042
  nnz(P)        = 0
  nnz(A)        = 6177
  cones (total) = 1
    : Nonnegative = 1,  numel = 1042

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0128e+02  5.01e+02  9.55e-01  3.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.8959e-01  +1.0385e+02  1.03e+02  3.79e-01  1.92e+01  3.90e-03  5.38e-01  6.23e-01  
  2  +5.3689e-01  +1.3083e+01  1.25e+01  1.25e-01  7.88e+00  1.24e-02  2.33e-01  8.78e-01  
  3  +5.0393e-01  +2.5574e+00  2.05e+00  4.28e-02  2.65e+00  2.32e-05  2.04e-01  4.63e-01  
  4  +5.0093e-01  +1.1798e+00  6.79e-01  1.45e-02  9.30e-01  1.15e-05  9.01e-02  5.84e-01  
  5  +4.9516e-01  +1.3567e+00  8.62e-01  6.47e-03  4.30e-01  6.48e-05  1.88e-02  9.16e-01  
  6  +4.7583e-01  +1.0227e+00  5.47e-01  1.64e-03  1.10e-01  1.16e-04  4.68e-03  7.53e-01  
  7  +4.6325e-01  +8.8303e-01  4.20e-01  1.09e-03  7.28e-02  1.13e-04  3.17e-03  4.44e-01  
  8  +4.5520e-01  +8.1267e-01  3.57e-01  8.72e-04  5.82e-02  1.04e-04  2.58e-03  2.55e-01  
  9  +4.4530e-01  +6.8226e-01  2.37e-01  5.79e-04  3.87e-02  1.06e-04  1.77e-03  8.11e-01  
 10  +4.2758e-01  +5.6931e-01  1.42e-01  3.29e-04  2.19e-02  6.15e-05  1.06e-03  8.39e-01  
 11  +4.0534e-01  +4.5676e-01  5.14e-02  1.11e-04  7.38e-03  2.11e-05  3.87e-04  7.05e-01  
 12  +4.0326e-01  +4.4786e-01  4.46e-02  9.22e-05  6.10e-03  1.97e-05  3.21e-04  2.61e-01  
 13  +3.9911e-01  +4.2576e-01  2.66e-02  5.53e-05  3.68e-03  1.55e-05  1.96e-04  9.90e-01  
 14  +3.9159e-01  +3.9683e-01  5.23e-03  1.05e-05  7.07e-04  2.86e-06  3.94e-05  8.45e-01  
 15  +3.8978e-01  +3.8999e-01  2.16e-04  4.27e-07  2.90e-05  1.16e-07  1.64e-06  9.64e-01  
 16  +3.8970e-01  +3.8970e-01  2.16e-06  4.28e-09  2.90e-07  1.16e-09  1.65e-08  9.90e-01  
 17  +3.8970e-01  +3.8970e-01  2.16e-08  4.28e-11  2.91e-09  1.16e-11  1.65e-10  9.90e-01  
 18  +3.8970e-01  +3.8970e-01  2.16e-10  4.28e-13  2.91e-11  1.16e-13  1.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6969ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:19 PM: Optimal value: 3.897e-01
(CVXPY) Sep 20 03:09:19 PM: Compilation took 3.264e-03 seconds
(CVXPY) Sep 20 03:09:19 PM: Solver (including time spent in interface) took 5.646e-03 seconds
Iteration: 4, Objective: 0.3897
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:19 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Finished problem compilation (took 3.994e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6289
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0130e+02  5.01e+02  9.55e-01  3.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.8920e-01  +1.0396e+02  1.03e+02  3.80e-01  1.92e+01  3.90e-03  5.39e-01  6.22e-01  
  2  +5.3646e-01  +1.2995e+01  1.25e+01  1.25e-01  7.86e+00  1.25e-02  2.32e-01  8.82e-01  
  3  +5.0391e-01  +2.5578e+00  2.05e+00  4.28e-02  2.65e+00  2.36e-05  2.03e-01  4.72e-01  
  4  +5.0092e-01  +1.1866e+00  6.86e-01  1.47e-02  9.40e-01  1.18e-05  8.90e-02  5.85e-01  
  5  +4.9102e-01  +1.6731e+00  1.18e+00  5.46e-03  3.65e-01  1.15e-04  1.52e-02  9.90e-01  
  6  +4.6845e-01  +1.0853e+00  6.17e-01  1.63e-03  1.09e-01  1.10e-04  4.67e-03  7.02e-01  
  7  +4.5586e-01  +9.4940e-01  4.94e-01  1.14e-03  7.60e-02  1.17e-04  3.32e-03  3.75e-01  
  8  +4.5060e-01  +8.3409e-01  3.83e-01  9.24e-04  6.17e-02  1.25e-04  2.77e-03  4.16e-01  
  9  +4.2598e-01  +6.2841e-01  2.02e-01  4.61e-04  3.06e-02  6.47e-05  1.50e-03  5.39e-01  
 10  +4.0113e-01  +4.5845e-01  5.73e-02  1.29e-04  8.51e-03  1.68e-05  4.69e-04  7.33e-01  
 11  +3.9533e-01  +4.2588e-01  3.05e-02  6.71e-05  4.41e-03  1.08e-05  2.50e-04  6.06e-01  
 12  +3.9072e-01  +4.0231e-01  1.16e-02  2.52e-05  1.65e-03  4.13e-06  9.74e-05  6.17e-01  
 13  +3.8814e-01  +3.8942e-01  1.28e-03  2.73e-06  1.79e-04  5.91e-07  1.09e-05  9.68e-01  
 14  +3.8779e-01  +3.8805e-01  2.60e-04  5.32e-07  3.47e-05  1.24e-07  2.23e-06  9.56e-01  
 15  +3.8770e-01  +3.8771e-01  3.89e-06  7.93e-09  5.17e-07  1.86e-09  3.34e-08  9.85e-01  
 16  +3.8770e-01  +3.8770e-01  3.92e-08  7.97e-11  5.19e-09  1.87e-11  3.36e-10  9.90e-01  
 17  +3.8770e-01  +3.8770e-01  3.92e-10  7.97e-13  5.19e-11  1.91e-13  3.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6268ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:19 PM: Optimal value: 3.877e-01
(CVXPY) Sep 20 03:09:19 PM: Compilation took 3.994e-03 seconds
(CVXPY) Sep 20 03:09:19 PM: Solver (including time spent in interface) took 6.997e-03 seconds
Iteration: 5, Objective: 0.3877
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:19 PM: Your problem has 551 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:19 PM: Finished problem compilation (took 4.015e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 1051
  nnz(P)        = 0
  nnz(A)        = 6399
  cones (total) = 1
    : Nonnegative = 1,  numel = 1051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0133e+02  5.01e+02  9.55e-01  3.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.8891e-01  +1.0404e+02  1.03e+02  3.81e-01  1.91e+01  3.90e-03  5.39e-01  6.22e-01  
  2  +5.3627e-01  +1.2962e+01  1.24e+01  1.24e-01  7.79e+00  1.25e-02  2.32e-01  8.85e-01  
  3  +5.0387e-01  +2.5498e+00  2.05e+00  4.28e-02  2.64e+00  2.38e-05  2.01e-01  4.81e-01  
  4  +5.0073e-01  +1.1218e+00  6.21e-01  1.33e-02  8.51e-01  1.15e-05  8.00e-02  6.26e-01  
  5  +4.8839e-01  +1.5013e+00  1.01e+00  4.18e-03  2.80e-01  1.15e-04  1.16e-02  9.59e-01  
  6  +4.6327e-01  +9.5567e-01  4.92e-01  1.27e-03  8.46e-02  9.69e-05  3.68e-03  7.11e-01  
  7  +4.5691e-01  +8.9438e-01  4.37e-01  1.05e-03  6.99e-02  1.11e-04  3.06e-03  3.04e-01  
  8  +4.4566e-01  +7.8091e-01  3.35e-01  7.95e-04  5.29e-02  9.97e-05  2.41e-03  3.67e-01  
  9  +4.1703e-01  +5.6251e-01  1.45e-01  3.32e-04  2.19e-02  4.22e-05  1.12e-03  6.47e-01  
 10  +4.0604e-01  +4.9769e-01  9.17e-02  2.04e-04  1.34e-02  2.94e-05  7.23e-04  4.39e-01  
 11  +3.9472e-01  +4.3630e-01  4.16e-02  9.04e-05  5.92e-03  1.41e-05  3.38e-04  5.80e-01  
 12  +3.9011e-01  +4.1368e-01  2.36e-02  4.98e-05  3.26e-03  8.22e-06  1.91e-04  4.55e-01  
 13  +3.8719e-01  +3.9654e-01  9.35e-03  1.97e-05  1.29e-03  4.86e-06  7.73e-05  9.90e-01  
 14  +3.8441e-01  +3.8552e-01  1.12e-03  2.34e-06  1.53e-04  5.69e-07  9.41e-06  8.85e-01  
 15  +3.8407e-01  +3.8427e-01  1.98e-04  3.99e-07  2.59e-05  9.74e-08  1.68e-06  9.90e-01  
 16  +3.8400e-01  +3.8400e-01  2.23e-06  4.47e-09  2.91e-07  1.09e-09  1.89e-08  9.89e-01  
 17  +3.8400e-01  +3.8400e-01  2.23e-08  4.48e-11  2.91e-09  1.09e-11  1.89e-10  9.90e-01  
 18  +3.8400e-01  +3.8400e-01  2.23e-10  4.48e-13  2.91e-11  1.10e-13  1.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3999ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:19 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:19 PM: Optimal value: 3.840e-01
(CVXPY) Sep 20 03:09:19 PM: Compilation took 4.015e-03 seconds
(CVXPY) Sep 20 03:09:19 PM: Solver (including time spent in interface) took 6.972e-03 seconds
FULL MODEL:
  Accruacy: 0.613
  Our objective: 0.22600000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.158)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1)            <-- (term's our objective: 0.018)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.222838878631592
Best over terms:
  Our final objective: 0.15799999999999997
    Its accruacy: 0.579
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15799999999999997
  Highest accruacy: 0.579
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

