Command:
python test_script.py -s linear_dependence -d 6 -n 100 --seed 56 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 6.

Computed total variation: 0.5
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:52 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Finished problem compilation (took 4.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 463
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9730e-01  +5.0864e+01  5.04e+01  8.65e-01  8.98e+00  1.00e+00  1.03e+00   ------   
  1  +5.8823e-01  +1.0696e+01  1.01e+01  3.38e-01  5.11e+00  3.90e-03  5.43e-01  6.28e-01  
  2  +5.2388e-01  +1.5314e+00  1.01e+00  7.13e-02  1.31e+00  1.33e-02  1.83e-01  9.90e-01  
  3  +5.0031e-01  +7.3201e-01  2.32e-01  1.53e-02  2.88e-01  5.68e-03  4.86e-02  7.78e-01  
  4  +4.8396e-01  +7.0349e-01  2.20e-01  6.72e-03  1.30e-01  9.16e-03  2.14e-02  6.35e-01  
  5  +4.6281e-01  +5.4365e-01  8.08e-02  2.56e-03  4.89e-02  8.15e-05  9.26e-03  7.44e-01  
  6  +4.4804e-01  +4.7079e-01  2.28e-02  5.83e-04  1.11e-02  3.74e-05  2.24e-03  8.01e-01  
  7  +4.4055e-01  +4.4216e-01  1.61e-03  3.72e-05  7.08e-04  4.10e-06  1.50e-04  9.63e-01  
  8  +4.4010e-01  +4.4012e-01  1.67e-05  3.84e-07  7.32e-06  4.24e-08  1.56e-06  9.90e-01  
  9  +4.4010e-01  +4.4010e-01  1.67e-07  3.84e-09  7.32e-08  4.24e-10  1.56e-08  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  1.67e-09  3.84e-11  7.32e-10  4.24e-12  1.56e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 392.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:52 PM: Optimal value: 4.401e-01
(CVXPY) Sep 20 03:08:52 PM: Compilation took 4.004e-03 seconds
(CVXPY) Sep 20 03:08:52 PM: Solver (including time spent in interface) took 1.054e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:52 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Finished problem compilation (took 2.763e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 573
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9580e-01  +5.1032e+01  5.05e+01  8.71e-01  9.15e+00  1.00e+00  1.04e+00   ------   
  1  +5.7890e-01  +1.0848e+01  1.03e+01  3.55e-01  5.16e+00  3.88e-03  5.58e-01  6.19e-01  
  2  +5.1842e-01  +1.5951e+00  1.08e+00  7.54e-02  1.40e+00  1.45e-02  1.94e-01  9.90e-01  
  3  +4.9347e-01  +8.9063e-01  3.97e-01  2.00e-02  3.84e-01  9.36e-03  6.12e-02  7.54e-01  
  4  +4.6390e-01  +7.3060e-01  2.67e-01  7.82e-03  1.52e-01  8.50e-03  2.59e-02  6.36e-01  
  5  +4.5292e-01  +6.6374e-01  2.11e-01  5.93e-03  1.15e-01  5.09e-03  2.05e-02  3.79e-01  
  6  +4.2727e-01  +5.1764e-01  9.04e-02  2.14e-03  4.13e-02  2.15e-03  7.96e-03  6.26e-01  
  7  +4.1268e-01  +4.4494e-01  3.23e-02  6.89e-04  1.33e-02  7.99e-04  2.62e-03  7.12e-01  
  8  +4.0341e-01  +4.1209e-01  8.69e-03  1.68e-04  3.23e-03  8.99e-05  6.89e-04  9.13e-01  
  9  +4.0049e-01  +4.0122e-01  7.23e-04  1.37e-05  2.64e-04  7.16e-06  5.75e-05  9.18e-01  
 10  +4.0021e-01  +4.0024e-01  2.91e-05  5.41e-07  1.04e-05  1.81e-07  2.35e-06  9.90e-01  
 11  +4.0020e-01  +4.0020e-01  2.92e-07  5.44e-09  1.04e-07  1.82e-09  2.36e-08  9.90e-01  
 12  +4.0020e-01  +4.0020e-01  2.92e-09  5.44e-11  1.04e-09  1.82e-11  2.36e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 425.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:52 PM: Optimal value: 4.002e-01
(CVXPY) Sep 20 03:08:52 PM: Compilation took 2.763e-03 seconds
(CVXPY) Sep 20 03:08:52 PM: Solver (including time spent in interface) took 7.529e-04 seconds
Iteration: 2, Objective: 0.4002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:52 PM: Your problem has 83 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Finished problem compilation (took 1.990e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 133
  nnz(P)        = 0
  nnz(A)        = 644
  cones (total) = 1
    : Nonnegative = 1,  numel = 133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9315e-01  +5.1382e+01  5.09e+01  8.77e-01  9.06e+00  1.00e+00  1.06e+00   ------   
  1  +5.5735e-01  +1.0901e+01  1.03e+01  3.62e-01  4.99e+00  3.89e-03  5.63e-01  6.20e-01  
  2  +4.9888e-01  +1.9327e+00  1.43e+00  8.49e-02  1.54e+00  1.58e-02  2.08e-01  9.21e-01  
  3  +4.4452e-01  +1.2135e+00  7.69e-01  2.72e-02  5.18e-01  1.24e-02  7.74e-02  7.44e-01  
  4  +4.0461e-01  +7.2892e-01  3.24e-01  9.69e-03  1.82e-01  5.22e-03  3.15e-02  6.56e-01  
  5  +3.7563e-01  +5.4650e-01  1.71e-01  4.43e-03  8.29e-02  2.61e-03  1.58e-02  5.44e-01  
  6  +3.4909e-01  +3.8398e-01  3.49e-02  8.75e-04  1.62e-02  3.81e-04  3.54e-03  8.27e-01  
  7  +3.4076e-01  +3.4185e-01  1.09e-03  2.73e-05  5.02e-04  3.64e-06  1.17e-04  9.89e-01  
  8  +3.4044e-01  +3.4055e-01  1.13e-04  2.74e-06  5.01e-05  3.78e-07  1.28e-05  9.38e-01  
  9  +3.4040e-01  +3.4040e-01  1.86e-06  4.51e-08  8.26e-07  6.47e-09  2.11e-07  9.85e-01  
 10  +3.4040e-01  +3.4040e-01  1.86e-08  4.51e-10  8.26e-09  6.47e-11  2.11e-09  9.90e-01  
 11  +3.4040e-01  +3.4040e-01  1.87e-10  4.52e-12  8.26e-11  6.49e-13  2.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 481.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:52 PM: Optimal value: 3.404e-01
(CVXPY) Sep 20 03:08:52 PM: Compilation took 1.990e-03 seconds
(CVXPY) Sep 20 03:08:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:52 PM: Your problem has 93 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Finished problem compilation (took 2.850e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 727
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9194e-01  +5.1275e+01  5.08e+01  8.82e-01  9.02e+00  1.00e+00  1.06e+00   ------   
  1  +5.4727e-01  +1.1008e+01  1.05e+01  3.76e-01  4.96e+00  3.89e-03  5.72e-01  6.11e-01  
  2  +4.8813e-01  +1.7450e+00  1.26e+00  7.55e-02  1.37e+00  1.72e-02  1.92e-01  9.90e-01  
  3  +4.2115e-01  +1.0817e+00  6.61e-01  2.18e-02  4.13e-01  1.44e-02  6.30e-02  7.47e-01  
  4  +3.7539e-01  +6.7902e-01  3.04e-01  8.20e-03  1.54e-01  5.96e-03  2.64e-02  6.76e-01  
  5  +3.3620e-01  +3.9364e-01  5.74e-02  1.59e-03  2.91e-02  2.63e-04  5.87e-03  9.25e-01  
  6  +3.2385e-01  +3.3614e-01  1.23e-02  3.29e-04  5.99e-03  5.27e-05  1.30e-03  9.49e-01  
  7  +3.2079e-01  +3.2172e-01  9.29e-04  2.48e-05  4.49e-04  3.55e-06  1.01e-04  9.23e-01  
  8  +3.2054e-01  +3.2066e-01  1.27e-04  3.32e-06  5.96e-05  4.70e-07  1.45e-05  9.11e-01  
  9  +3.2050e-01  +3.2050e-01  1.43e-06  3.76e-08  6.75e-07  5.17e-09  1.66e-07  9.89e-01  
 10  +3.2050e-01  +3.2050e-01  1.43e-08  3.76e-10  6.75e-09  5.17e-11  1.66e-09  9.90e-01  
 11  +3.2050e-01  +3.2050e-01  1.43e-10  3.76e-12  6.75e-11  5.17e-13  1.66e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 541.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:52 PM: Optimal value: 3.205e-01
(CVXPY) Sep 20 03:08:52 PM: Compilation took 2.850e-03 seconds
(CVXPY) Sep 20 03:08:52 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 4, Objective: 0.3205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:52 PM: Your problem has 103 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:52 PM: Finished problem compilation (took 3.476e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 103
  constraints   = 153
  nnz(P)        = 0
  nnz(A)        = 787
  cones (total) = 1
    : Nonnegative = 1,  numel = 153

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8995e-01  +5.1461e+01  5.10e+01  8.86e-01  8.88e+00  1.00e+00  1.07e+00   ------   
  1  +5.3119e-01  +1.1120e+01  1.06e+01  3.84e-01  4.88e+00  3.89e-03  5.81e-01  6.06e-01  
  2  +4.6998e-01  +1.8737e+00  1.40e+00  7.70e-02  1.38e+00  1.86e-02  1.97e-01  9.76e-01  
  3  +3.8266e-01  +1.0609e+00  6.78e-01  2.07e-02  3.82e-01  1.28e-02  6.16e-02  8.03e-01  
  4  +3.3897e-01  +5.6723e-01  2.28e-01  6.85e-03  1.24e-01  3.39e-03  2.32e-02  6.91e-01  
  5  +3.1157e-01  +4.0052e-01  8.90e-02  2.49e-03  4.49e-02  1.03e-03  9.36e-03  7.70e-01  
  6  +2.9534e-01  +3.1248e-01  1.71e-02  4.62e-04  8.27e-03  1.42e-04  1.90e-03  8.63e-01  
  7  +2.9139e-01  +2.9363e-01  2.24e-03  5.95e-05  1.06e-03  1.68e-05  2.55e-04  8.77e-01  
  8  +2.9099e-01  +2.9188e-01  8.90e-04  2.26e-05  3.99e-04  5.24e-06  1.05e-04  7.48e-01  
  9  +2.9072e-01  +2.9077e-01  4.94e-05  1.25e-06  2.20e-05  2.26e-07  6.08e-06  9.48e-01  
 10  +2.9070e-01  +2.9070e-01  5.20e-07  1.32e-08  2.32e-07  2.35e-09  6.46e-08  9.90e-01  
 11  +2.9070e-01  +2.9070e-01  5.21e-09  1.32e-10  2.32e-09  2.35e-11  6.46e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 632.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:52 PM: Optimal value: 2.907e-01
(CVXPY) Sep 20 03:08:52 PM: Compilation took 3.476e-03 seconds
(CVXPY) Sep 20 03:08:52 PM: Solver (including time spent in interface) took 1.092e-03 seconds
Iteration: 5, Objective: 0.2907
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:53 PM: Your problem has 113 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:53 PM: Finished problem compilation (took 2.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 113
  constraints   = 163
  nnz(P)        = 0
  nnz(A)        = 818
  cones (total) = 1
    : Nonnegative = 1,  numel = 163

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8871e-01  +5.1661e+01  5.12e+01  8.89e-01  8.66e+00  1.00e+00  1.07e+00   ------   
  1  +5.0969e-01  +1.1218e+01  1.07e+01  3.83e-01  4.71e+00  3.94e-03  5.80e-01  6.04e-01  
  2  +4.3640e-01  +2.3264e+00  1.89e+00  8.77e-02  1.49e+00  1.94e-02  2.19e-01  8.92e-01  
  3  +3.5551e-01  +1.0363e+00  6.81e-01  2.29e-02  4.04e-01  8.55e-03  6.73e-02  7.70e-01  
  4  +3.0582e-01  +5.2281e-01  2.17e-01  6.97e-03  1.20e-01  2.34e-03  2.33e-02  7.30e-01  
  5  +2.8863e-01  +4.3984e-01  1.51e-01  4.57e-03  7.95e-02  1.42e-03  1.60e-02  4.70e-01  
  6  +2.6289e-01  +3.0775e-01  4.49e-02  1.24e-03  2.17e-02  3.74e-04  4.93e-03  7.27e-01  
  7  +2.5228e-01  +2.5613e-01  3.85e-03  1.04e-04  1.81e-03  2.53e-05  4.46e-04  9.31e-01  
  8  +2.5145e-01  +2.5245e-01  1.00e-03  2.67e-05  4.63e-04  5.83e-06  1.20e-04  7.88e-01  
  9  +2.5118e-01  +2.5138e-01  2.09e-04  5.46e-06  9.44e-05  1.08e-06  2.58e-05  8.27e-01  
 10  +2.5110e-01  +2.5111e-01  6.39e-06  1.67e-07  2.88e-06  2.51e-08  8.00e-07  9.90e-01  
 11  +2.5110e-01  +2.5110e-01  6.41e-08  1.67e-09  2.89e-08  2.51e-10  8.02e-09  9.90e-01  
 12  +2.5110e-01  +2.5110e-01  6.41e-10  1.67e-11  2.89e-10  2.52e-12  8.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 794.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:53 PM: Optimal value: 2.511e-01
(CVXPY) Sep 20 03:08:53 PM: Compilation took 2.998e-03 seconds
(CVXPY) Sep 20 03:08:53 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 6, Objective: 0.2511
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:53 PM: Your problem has 120 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:53 PM: Finished problem compilation (took 3.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 120
  constraints   = 170
  nnz(P)        = 0
  nnz(A)        = 853
  cones (total) = 1
    : Nonnegative = 1,  numel = 170

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8789e-01  +5.1631e+01  5.11e+01  8.92e-01  8.55e+00  1.00e+00  1.07e+00   ------   
  1  +5.0077e-01  +1.1405e+01  1.09e+01  3.94e-01  4.70e+00  3.95e-03  5.90e-01  5.93e-01  
  2  +4.2911e-01  +2.3655e+00  1.94e+00  9.35e-02  1.55e+00  2.04e-02  2.34e-01  8.89e-01  
  3  +3.5308e-01  +1.0961e+00  7.43e-01  2.63e-02  4.52e-01  9.91e-03  7.74e-02  7.34e-01  
  4  +3.0305e-01  +5.2371e-01  2.21e-01  7.28e-03  1.23e-01  2.43e-03  2.46e-02  7.58e-01  
  5  +2.8647e-01  +4.4831e-01  1.62e-01  5.00e-03  8.49e-02  1.52e-03  1.77e-02  4.74e-01  
  6  +2.6119e-01  +3.0607e-01  4.49e-02  1.29e-03  2.19e-02  3.83e-04  5.04e-03  7.42e-01  
  7  +2.5178e-01  +2.5412e-01  2.35e-03  6.72e-05  1.13e-03  1.61e-05  2.75e-04  9.51e-01  
  8  +2.5152e-01  +2.5292e-01  1.40e-03  3.91e-05  6.53e-04  8.81e-06  1.68e-04  5.05e-01  
  9  +2.5116e-01  +2.5134e-01  1.78e-04  4.87e-06  8.09e-05  8.72e-07  2.24e-05  9.01e-01  
 10  +2.5110e-01  +2.5111e-01  8.83e-06  2.40e-07  3.97e-06  3.95e-08  1.14e-06  9.59e-01  
 11  +2.5110e-01  +2.5110e-01  8.86e-08  2.40e-09  3.98e-08  3.96e-10  1.14e-08  9.90e-01  
 12  +2.5110e-01  +2.5110e-01  8.88e-10  2.41e-11  3.99e-10  3.97e-12  1.15e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 713µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:53 PM: Optimal value: 2.511e-01
(CVXPY) Sep 20 03:08:53 PM: Compilation took 3.002e-03 seconds
(CVXPY) Sep 20 03:08:53 PM: Solver (including time spent in interface) took 9.985e-04 seconds
Iteration: 7, Objective: 0.2511
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:53 PM: Your problem has 121 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:53 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:53 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:53 PM: Finished problem compilation (took 2.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 121
  constraints   = 171
  nnz(P)        = 0
  nnz(A)        = 859
  cones (total) = 1
    : Nonnegative = 1,  numel = 171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8773e-01  +5.1619e+01  5.11e+01  8.92e-01  8.54e+00  1.00e+00  1.07e+00   ------   
  1  +4.9891e-01  +1.1437e+01  1.09e+01  3.95e-01  4.71e+00  3.95e-03  5.92e-01  5.91e-01  
  2  +4.2661e-01  +2.3718e+00  1.95e+00  9.43e-02  1.55e+00  2.07e-02  2.36e-01  8.90e-01  
  3  +3.4956e-01  +1.0896e+00  7.40e-01  2.62e-02  4.49e-01  9.94e-03  7.75e-02  7.37e-01  
  4  +3.0049e-01  +5.3268e-01  2.32e-01  7.72e-03  1.30e-01  2.57e-03  2.61e-02  7.42e-01  
  5  +2.8132e-01  +4.2911e-01  1.48e-01  4.67e-03  7.86e-02  1.39e-03  1.68e-02  5.10e-01  
  6  +2.5976e-01  +3.0116e-01  4.14e-02  1.24e-03  2.08e-02  3.54e-04  4.90e-03  7.33e-01  
  7  +2.5176e-01  +2.5402e-01  2.26e-03  6.75e-05  1.13e-03  1.26e-05  2.77e-04  9.67e-01  
  8  +2.5152e-01  +2.5297e-01  1.45e-03  4.19e-05  6.92e-04  7.50e-06  1.80e-04  4.77e-01  
  9  +2.5117e-01  +2.5137e-01  2.02e-04  5.81e-06  9.57e-05  8.74e-07  2.66e-05  8.78e-01  
 10  +2.5110e-01  +2.5112e-01  1.36e-05  3.90e-07  6.42e-06  5.36e-08  1.84e-06  9.52e-01  
 11  +2.5110e-01  +2.5110e-01  1.40e-07  4.01e-09  6.59e-08  5.50e-10  1.90e-08  9.90e-01  
 12  +2.5110e-01  +2.5110e-01  1.40e-09  4.01e-11  6.60e-10  5.50e-12  1.90e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 766.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:53 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:53 PM: Optimal value: 2.511e-01
(CVXPY) Sep 20 03:08:53 PM: Compilation took 2.010e-03 seconds
(CVXPY) Sep 20 03:08:53 PM: Solver (including time spent in interface) took 1.991e-03 seconds
FULL MODEL:
  Accruacy: 0.73
  Our objective: 0.45999999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.06)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.06)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.04)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1)                       <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.26438570022583
Best over terms:
  Our final objective: 0.12000000000000002
    Its accruacy: 0.56
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.12000000000000002
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

