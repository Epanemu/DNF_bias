Command:
python test_script.py -s linear_dependence -d 6 -n 10000 --seed 43 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1378
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 6.

Computed total variation: 0.144
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:51 PM: Your problem has 5013 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:51 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:51 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:51 PM: Finished problem compilation (took 1.621e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5013
  constraints   = 10013
  nnz(P)        = 0
  nnz(A)        = 45013
  cones (total) = 1
    : Nonnegative = 1,  numel = 10013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  9.91e+01  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +1.0289e+03  1.03e+03  3.86e-01  6.01e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4196e-01  +1.3637e+02  1.36e+02  1.50e-01  2.96e+01  1.15e-02  2.44e-01  8.24e-01  
  3  +5.1045e-01  +3.4027e+01  3.35e+01  1.18e-01  2.30e+01  2.90e-05  2.39e-01  1.21e-01  
  4  +5.0030e-01  +1.3617e+00  8.61e-01  5.83e-03  1.15e+00  4.66e-06  1.29e-01  9.90e-01  
  5  +5.0002e-01  +6.3957e-01  1.40e-01  9.31e-04  1.85e-01  3.91e-06  3.09e-02  8.67e-01  
  6  +4.9819e-01  +1.1318e+00  6.34e-01  6.92e-04  1.39e-01  2.14e-04  2.13e-03  9.83e-01  
  7  +4.9960e-01  +7.6819e-01  2.69e-01  3.02e-04  6.06e-02  1.42e-05  9.08e-04  8.44e-01  
  8  +4.9682e-01  +7.3637e-01  2.40e-01  6.17e-05  1.24e-02  6.08e-05  1.79e-04  8.10e-01  
  9  +4.8994e-01  +6.6136e-01  1.71e-01  5.38e-05  1.08e-02  2.27e-05  1.63e-04  2.29e-01  
 10  +4.8749e-01  +6.0909e-01  1.22e-01  4.16e-05  8.32e-03  2.04e-07  1.29e-04  8.68e-01  
 11  +4.7703e-01  +5.4796e-01  7.09e-02  2.00e-05  4.00e-03  2.60e-06  6.51e-05  9.90e-01  
 12  +4.6170e-01  +4.7489e-01  1.32e-02  3.18e-06  6.34e-04  3.42e-07  1.13e-05  9.05e-01  
 13  +4.5783e-01  +4.5942e-01  1.59e-03  3.45e-07  6.89e-05  4.52e-08  1.37e-06  8.98e-01  
 14  +4.5721e-01  +4.5723e-01  2.07e-05  4.25e-09  8.48e-07  6.23e-10  1.78e-08  9.88e-01  
 15  +4.5720e-01  +4.5720e-01  2.07e-07  4.25e-11  8.48e-09  6.23e-12  1.78e-10  9.90e-01  
 16  +4.5720e-01  +4.5720e-01  2.08e-09  4.26e-13  8.50e-11  7.11e-14  2.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.9389ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:51 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:51 PM: Optimal value: 4.572e-01
(CVXPY) Sep 20 03:09:51 PM: Compilation took 1.621e-02 seconds
(CVXPY) Sep 20 03:09:51 PM: Solver (including time spent in interface) took 5.997e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4572
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:52 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Finished problem compilation (took 1.596e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 53351
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.03e+02  1.00e+00  1.00e+00   ------   
  1  +5.9307e-01  +1.0290e+03  1.03e+03  3.86e-01  6.27e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4180e-01  +1.3603e+02  1.35e+02  1.50e-01  3.08e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1036e-01  +3.3838e+01  3.33e+01  1.18e-01  2.39e+01  2.90e-05  2.39e-01  1.24e-01  
  4  +5.0030e-01  +1.3833e+00  8.83e-01  5.99e-03  1.23e+00  4.93e-06  1.27e-01  9.90e-01  
  5  +5.0008e-01  +8.1246e-01  3.12e-01  2.09e-03  4.34e-01  3.55e-06  5.76e-02  5.99e-01  
  6  +5.0004e-01  +7.6894e-01  2.69e-01  1.76e-03  3.65e-01  5.90e-06  2.00e-02  7.66e-01  
  7  +4.9945e-01  +7.3677e-01  2.37e-01  5.27e-04  1.10e-01  5.15e-05  1.65e-03  9.22e-01  
  8  +4.9513e-01  +7.0181e-01  2.07e-01  7.71e-05  1.62e-02  3.22e-04  2.17e-04  8.69e-01  
  9  +4.9213e-01  +6.7254e-01  1.80e-01  6.08e-05  1.28e-02  2.50e-04  1.71e-04  3.33e-01  
 10  +4.9239e-01  +6.7406e-01  1.82e-01  6.09e-05  1.28e-02  2.46e-04  1.71e-04  2.74e-02  
 11  +4.9217e-01  +6.7392e-01  1.82e-01  5.12e-05  1.07e-02  2.31e-04  1.41e-04  3.41e-01  
 12  +4.9177e-01  +6.6424e-01  1.72e-01  4.74e-05  9.94e-03  1.50e-04  1.30e-04  3.41e-01  
 13  +4.8712e-01  +6.4292e-01  1.56e-01  3.37e-05  7.07e-03  1.45e-04  9.34e-05  3.77e-01  
 14  +4.7794e-01  +5.9987e-01  1.22e-01  2.55e-05  5.34e-03  2.22e-05  7.34e-05  7.12e-01  
 15  +4.5869e-01  +5.2346e-01  6.48e-02  1.12e-05  2.33e-03  4.95e-06  3.31e-05  8.88e-01  
 16  +4.3504e-01  +4.4308e-01  8.05e-03  1.27e-06  2.65e-04  2.79e-07  3.99e-06  9.38e-01  
 17  +4.3131e-01  +4.3153e-01  2.24e-04  3.49e-08  7.28e-06  1.13e-08  1.11e-07  9.83e-01  
 18  +4.3120e-01  +4.3120e-01  2.24e-06  3.49e-10  7.27e-08  1.13e-10  1.11e-09  9.90e-01  
 19  +4.3120e-01  +4.3120e-01  2.24e-08  3.49e-12  7.27e-10  1.14e-12  1.11e-11  9.90e-01  
 20  +4.3120e-01  +4.3120e-01  2.24e-10  3.50e-14  7.28e-12  1.14e-14  1.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.5727ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:52 PM: Optimal value: 4.312e-01
(CVXPY) Sep 20 03:09:52 PM: Compilation took 1.596e-02 seconds
(CVXPY) Sep 20 03:09:52 PM: Solver (including time spent in interface) took 8.213e-02 seconds
Iteration: 2, Objective: 0.4312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:52 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Finished problem compilation (took 2.144e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 53864
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.03e+02  1.00e+00  1.00e+00   ------   
  1  +5.9309e-01  +1.0290e+03  1.03e+03  3.86e-01  6.27e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4178e-01  +1.3600e+02  1.35e+02  1.50e-01  3.08e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1035e-01  +3.3809e+01  3.33e+01  1.18e-01  2.39e+01  2.90e-05  2.39e-01  1.24e-01  
  4  +5.0029e-01  +1.3845e+00  8.84e-01  6.00e-03  1.23e+00  4.95e-06  1.27e-01  9.90e-01  
  5  +5.0008e-01  +7.9836e-01  2.98e-01  2.00e-03  4.14e-01  3.56e-06  5.44e-02  6.24e-01  
  6  +5.0001e-01  +7.7731e-01  2.77e-01  1.75e-03  3.63e-01  8.50e-06  1.39e-02  8.64e-01  
  7  +4.9701e-01  +7.2664e-01  2.30e-01  1.25e-04  2.62e-02  2.39e-04  3.53e-04  9.78e-01  
  8  +4.9116e-01  +6.8591e-01  1.95e-01  5.57e-05  1.17e-02  3.75e-04  1.58e-04  5.91e-01  
  9  +4.8895e-01  +6.6582e-01  1.77e-01  4.87e-05  1.02e-02  2.37e-04  1.37e-04  3.65e-01  
 10  +4.8442e-01  +6.4512e-01  1.61e-01  3.65e-05  7.65e-03  2.30e-04  1.03e-04  3.06e-01  
 11  +4.8369e-01  +6.4080e-01  1.57e-01  3.61e-05  7.56e-03  2.02e-04  1.02e-04  7.84e-02  
 12  +4.7855e-01  +6.1530e-01  1.37e-01  2.94e-05  6.16e-03  7.18e-05  8.41e-05  5.92e-01  
 13  +4.5876e-01  +5.3735e-01  7.86e-02  1.39e-05  2.90e-03  3.74e-05  4.14e-05  5.65e-01  
 14  +4.3502e-01  +4.4935e-01  1.43e-02  2.37e-06  4.93e-04  2.54e-06  7.55e-06  8.64e-01  
 15  +4.3493e-01  +4.4923e-01  1.43e-02  2.33e-06  4.85e-04  2.54e-06  7.39e-06  4.41e-02  
 16  +4.3473e-01  +4.4820e-01  1.35e-02  2.22e-06  4.63e-04  1.97e-06  7.21e-06  2.65e-01  
 17  +4.3442e-01  +4.4716e-01  1.27e-02  2.06e-06  4.30e-04  1.45e-06  6.57e-06  5.78e-01  
 18  +4.3192e-01  +4.3928e-01  7.36e-03  1.17e-06  2.45e-04  8.24e-07  3.76e-06  4.72e-01  
 19  +4.2869e-01  +4.2889e-01  2.00e-04  3.19e-08  6.65e-06  1.78e-08  1.03e-07  9.90e-01  
 20  +4.2860e-01  +4.2860e-01  2.00e-06  3.19e-10  6.65e-08  1.78e-10  1.03e-09  9.90e-01  
 21  +4.2860e-01  +4.2860e-01  2.00e-08  3.19e-12  6.66e-10  1.78e-12  1.03e-11  9.90e-01  
 22  +4.2860e-01  +4.2860e-01  2.00e-10  3.19e-14  6.66e-12  1.78e-14  1.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 89.3018ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:52 PM: Optimal value: 4.286e-01
(CVXPY) Sep 20 03:09:52 PM: Compilation took 2.144e-02 seconds
(CVXPY) Sep 20 03:09:52 PM: Solver (including time spent in interface) took 9.492e-02 seconds
Iteration: 3, Objective: 0.4286
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:52 PM: Your problem has 5026 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Finished problem compilation (took 1.849e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5026
  constraints   = 10026
  nnz(P)        = 0
  nnz(A)        = 54031
  cones (total) = 1
    : Nonnegative = 1,  numel = 10026

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.03e+02  1.00e+00  1.00e+00   ------   
  1  +5.9305e-01  +1.0292e+03  1.03e+03  3.86e-01  6.28e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4175e-01  +1.3595e+02  1.35e+02  1.50e-01  3.08e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1035e-01  +3.3805e+01  3.33e+01  1.18e-01  2.39e+01  2.90e-05  2.39e-01  1.24e-01  
  4  +5.0030e-01  +1.3858e+00  8.86e-01  6.01e-03  1.24e+00  4.95e-06  1.27e-01  9.90e-01  
  5  +5.0006e-01  +7.7018e-01  2.70e-01  1.81e-03  3.75e-01  3.52e-06  4.96e-02  6.64e-01  
  6  +4.9994e-01  +8.0166e-01  3.02e-01  1.69e-03  3.52e-01  1.45e-05  9.08e-03  9.33e-01  
  7  +4.9577e-01  +7.5283e-01  2.57e-01  1.08e-04  2.26e-02  3.31e-04  3.03e-04  9.67e-01  
  8  +4.9204e-01  +7.1566e-01  2.24e-01  7.03e-05  1.48e-02  3.35e-04  1.98e-04  4.31e-01  
  9  +4.9062e-01  +6.9838e-01  2.08e-01  5.92e-05  1.24e-02  2.61e-04  1.66e-04  3.34e-01  
 10  +4.8853e-01  +6.6571e-01  1.77e-01  4.94e-05  1.04e-02  9.50e-05  1.40e-04  5.55e-01  
 11  +4.8636e-01  +6.5293e-01  1.67e-01  4.31e-05  9.03e-03  6.91e-05  1.22e-04  3.42e-01  
 12  +4.8141e-01  +6.2433e-01  1.43e-01  3.38e-05  7.08e-03  1.54e-05  9.69e-05  7.63e-01  
 13  +4.6180e-01  +5.4771e-01  8.59e-02  1.58e-05  3.30e-03  8.97e-06  4.72e-05  6.24e-01  
 14  +4.3873e-01  +4.6313e-01  2.44e-02  4.17e-06  8.69e-04  1.55e-06  1.33e-05  7.98e-01  
 15  +4.3636e-01  +4.5514e-01  1.88e-02  3.12e-06  6.51e-04  1.24e-06  9.98e-06  3.58e-01  
 16  +4.3603e-01  +4.5385e-01  1.78e-02  3.01e-06  6.28e-04  1.16e-06  9.85e-06  1.74e-01  
 17  +4.3521e-01  +4.5080e-01  1.56e-02  2.60e-06  5.42e-04  1.11e-06  8.41e-06  6.23e-01  
 18  +4.3146e-01  +4.3846e-01  7.00e-03  1.15e-06  2.39e-04  5.22e-07  3.74e-06  6.42e-01  
 19  +4.2874e-01  +4.2968e-01  9.39e-04  1.54e-07  3.20e-05  6.54e-08  5.08e-07  9.88e-01  
 20  +4.2831e-01  +4.2833e-01  1.88e-05  3.07e-09  6.40e-07  1.31e-09  1.02e-08  9.81e-01  
 21  +4.2830e-01  +4.2830e-01  1.88e-07  3.07e-11  6.40e-09  1.31e-11  1.02e-10  9.90e-01  
 22  +4.2830e-01  +4.2830e-01  1.88e-09  3.07e-13  6.40e-11  1.32e-13  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.0202ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:52 PM: Optimal value: 4.283e-01
(CVXPY) Sep 20 03:09:52 PM: Compilation took 1.849e-02 seconds
(CVXPY) Sep 20 03:09:52 PM: Solver (including time spent in interface) took 7.793e-02 seconds
Iteration: 4, Objective: 0.4283
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:52 PM: Your problem has 5027 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Finished problem compilation (took 1.905e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5027
  constraints   = 10027
  nnz(P)        = 0
  nnz(A)        = 54198
  cones (total) = 1
    : Nonnegative = 1,  numel = 10027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9304e-01  +1.0292e+03  1.03e+03  3.86e-01  6.28e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4174e-01  +1.3593e+02  1.35e+02  1.50e-01  3.08e+01  1.15e-02  2.45e-01  8.26e-01  
  3  +5.1034e-01  +3.3798e+01  3.33e+01  1.18e-01  2.39e+01  2.90e-05  2.39e-01  1.24e-01  
  4  +5.0030e-01  +1.3863e+00  8.86e-01  6.01e-03  1.24e+00  4.96e-06  1.27e-01  9.90e-01  
  5  +5.0007e-01  +7.8542e-01  2.85e-01  1.91e-03  3.96e-01  3.56e-06  5.19e-02  6.44e-01  
  6  +4.9997e-01  +7.6802e-01  2.68e-01  1.62e-03  3.38e-01  1.07e-05  1.08e-02  8.92e-01  
  7  +4.9642e-01  +7.3101e-01  2.35e-01  1.12e-04  2.36e-02  2.84e-04  3.17e-04  9.79e-01  
  8  +4.9156e-01  +6.9613e-01  2.05e-01  6.21e-05  1.30e-02  3.68e-04  1.75e-04  4.91e-01  
  9  +4.9028e-01  +6.8509e-01  1.95e-01  5.39e-05  1.13e-02  2.93e-04  1.51e-04  3.15e-01  
 10  +4.8483e-01  +6.3953e-01  1.55e-01  3.89e-05  8.16e-03  6.81e-05  1.11e-04  7.24e-01  
 11  +4.7942e-01  +6.1587e-01  1.36e-01  3.18e-05  6.66e-03  7.12e-07  9.34e-05  9.13e-01  
 12  +4.7497e-01  +5.9475e-01  1.20e-01  2.74e-05  5.74e-03  1.40e-06  8.11e-05  2.41e-01  
 13  +4.5098e-01  +5.0067e-01  4.97e-02  9.06e-06  1.89e-03  1.70e-06  2.80e-05  8.25e-01  
 14  +4.3425e-01  +4.4637e-01  1.21e-02  2.05e-06  4.26e-04  5.22e-07  6.61e-06  8.62e-01  
 15  +4.3413e-01  +4.4631e-01  1.22e-02  2.03e-06  4.22e-04  5.48e-07  6.54e-06  7.33e-02  
 16  +4.3024e-01  +4.3441e-01  4.17e-03  6.81e-07  1.42e-04  2.75e-07  2.23e-06  8.98e-01  
 17  +4.2837e-01  +4.2850e-01  1.39e-04  2.26e-08  4.71e-06  9.43e-09  7.48e-08  9.83e-01  
 18  +4.2830e-01  +4.2830e-01  1.39e-06  2.26e-10  4.71e-08  9.43e-11  7.49e-10  9.90e-01  
 19  +4.2830e-01  +4.2830e-01  1.39e-08  2.26e-12  4.71e-10  9.43e-13  7.49e-12  9.90e-01  
 20  +4.2830e-01  +4.2830e-01  1.39e-10  2.26e-14  4.71e-12  9.44e-15  7.50e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.8004ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:52 PM: Optimal value: 4.283e-01
(CVXPY) Sep 20 03:09:52 PM: Compilation took 1.905e-02 seconds
(CVXPY) Sep 20 03:09:52 PM: Solver (including time spent in interface) took 6.754e-02 seconds
Iteration: 5, Objective: 0.4283
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:52 PM: Your problem has 5028 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:52 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:52 PM: Finished problem compilation (took 1.823e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5028
  constraints   = 10028
  nnz(P)        = 0
  nnz(A)        = 54282
  cones (total) = 1
    : Nonnegative = 1,  numel = 10028

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9304e-01  +1.0292e+03  1.03e+03  3.86e-01  6.28e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4174e-01  +1.3593e+02  1.35e+02  1.50e-01  3.08e+01  1.15e-02  2.45e-01  8.26e-01  
  3  +5.1034e-01  +3.3796e+01  3.33e+01  1.18e-01  2.39e+01  2.90e-05  2.39e-01  1.24e-01  
  4  +5.0030e-01  +1.3864e+00  8.86e-01  6.01e-03  1.24e+00  4.96e-06  1.27e-01  9.90e-01  
  5  +5.0007e-01  +7.8637e-01  2.86e-01  1.92e-03  3.98e-01  3.57e-06  5.21e-02  6.43e-01  
  6  +4.9998e-01  +7.6692e-01  2.67e-01  1.62e-03  3.37e-01  1.06e-05  1.10e-02  8.89e-01  
  7  +4.9646e-01  +7.3098e-01  2.35e-01  1.13e-04  2.38e-02  2.82e-04  3.19e-04  9.79e-01  
  8  +4.9149e-01  +6.9570e-01  2.04e-01  6.16e-05  1.29e-02  3.72e-04  1.74e-04  4.97e-01  
  9  +4.9017e-01  +6.8458e-01  1.94e-01  5.34e-05  1.12e-02  2.97e-04  1.49e-04  3.15e-01  
 10  +4.8460e-01  +6.3841e-01  1.54e-01  3.84e-05  8.05e-03  6.48e-05  1.09e-04  7.34e-01  
 11  +4.7979e-01  +6.1656e-01  1.37e-01  3.27e-05  6.85e-03  1.46e-05  9.63e-05  6.97e-01  
 12  +4.7750e-01  +6.0478e-01  1.27e-01  3.04e-05  6.35e-03  1.15e-05  8.94e-05  2.50e-01  
 13  +4.6841e-01  +5.6880e-01  1.00e-01  2.14e-05  4.48e-03  7.50e-06  6.38e-05  5.30e-01  
 14  +4.4714e-01  +4.9313e-01  4.60e-02  8.09e-06  1.69e-03  3.27e-06  2.52e-05  6.84e-01  
 15  +4.3356e-01  +4.4554e-01  1.20e-02  1.99e-06  4.15e-04  8.01e-07  6.44e-06  8.16e-01  
 16  +4.3348e-01  +4.4503e-01  1.16e-02  1.95e-06  4.06e-04  7.44e-07  6.42e-06  2.33e-02  
 17  +4.3346e-01  +4.4498e-01  1.15e-02  1.94e-06  4.04e-04  7.45e-07  6.39e-06  2.52e-02  
 18  +4.3331e-01  +4.4479e-01  1.15e-02  1.89e-06  3.93e-04  7.90e-07  6.09e-06  2.11e-01  
 19  +4.3023e-01  +4.3452e-01  4.28e-03  6.98e-07  1.45e-04  3.19e-07  2.28e-06  9.04e-01  
 20  +4.2834e-01  +4.2842e-01  8.36e-05  1.36e-08  2.83e-06  5.97e-09  4.48e-08  9.89e-01  
 21  +4.2830e-01  +4.2830e-01  8.37e-07  1.36e-10  2.84e-08  5.98e-11  4.48e-10  9.90e-01  
 22  +4.2830e-01  +4.2830e-01  8.37e-09  1.36e-12  2.84e-10  6.02e-13  4.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.9315ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:52 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:52 PM: Optimal value: 4.283e-01
(CVXPY) Sep 20 03:09:52 PM: Compilation took 1.823e-02 seconds
(CVXPY) Sep 20 03:09:52 PM: Solver (including time spent in interface) took 7.794e-02 seconds
FULL MODEL:
  Accruacy: 0.572
  Our objective: 0.14400000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.1378)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1)            <-- (term's our objective: 0.0054)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.8987207412719727
Best over terms:
  Our final objective: 0.1378
    Its accruacy: 0.5689
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1378
  Highest accruacy: 0.5689
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

