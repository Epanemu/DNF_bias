Command:
python test_script.py -s linear_dependence -d 6 -n 500 --seed 21 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14400000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 6.

Computed total variation: 0.28400000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:17 PM: Your problem has 263 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Finished problem compilation (took 3.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 263
  constraints   = 513
  nnz(P)        = 0
  nnz(A)        = 2263
  cones (total) = 1
    : Nonnegative = 1,  numel = 513

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +2.5090e+02  2.50e+02  9.35e-01  2.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.9219e-01  +5.1845e+01  5.13e+01  3.64e-01  1.27e+01  3.91e-03  5.29e-01  6.27e-01  
  2  +5.3829e-01  +6.9109e+00  6.37e+00  1.17e-01  5.05e+00  1.19e-02  2.31e-01  8.63e-01  
  3  +5.0092e-01  +1.3355e+00  8.35e-01  2.49e-02  1.05e+00  6.63e-04  1.87e-01  6.75e-01  
  4  +4.9902e-01  +6.9700e-01  1.98e-01  5.77e-03  2.50e-01  2.89e-04  3.73e-02  8.42e-01  
  5  +4.7500e-01  +6.7692e-01  2.02e-01  1.15e-03  5.14e-02  2.61e-03  3.57e-03  9.35e-01  
  6  +4.5075e-01  +5.2821e-01  7.75e-02  3.69e-04  1.63e-02  6.24e-04  1.31e-03  7.11e-01  
  7  +4.3994e-01  +4.8467e-01  4.47e-02  1.92e-04  8.45e-03  1.60e-05  7.56e-04  9.90e-01  
  8  +4.2795e-01  +4.3382e-01  5.87e-03  2.36e-05  1.03e-03  2.42e-06  1.01e-04  8.89e-01  
  9  +4.2614e-01  +4.2625e-01  1.15e-04  4.59e-07  2.02e-05  7.75e-08  1.99e-06  9.90e-01  
 10  +4.2610e-01  +4.2610e-01  1.15e-06  4.59e-09  2.02e-07  7.75e-10  1.99e-08  9.90e-01  
 11  +4.2610e-01  +4.2610e-01  1.15e-08  4.59e-11  2.02e-09  7.75e-12  1.99e-10  9.90e-01  
 12  +4.2610e-01  +4.2610e-01  1.15e-10  4.59e-13  2.02e-11  7.75e-14  1.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5014ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:17 PM: Optimal value: 4.261e-01
(CVXPY) Sep 20 03:09:17 PM: Compilation took 3.992e-03 seconds
(CVXPY) Sep 20 03:09:17 PM: Solver (including time spent in interface) took 2.002e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:17 PM: Your problem has 273 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Finished problem compilation (took 3.697e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 273
  constraints   = 523
  nnz(P)        = 0
  nnz(A)        = 2792
  cones (total) = 1
    : Nonnegative = 1,  numel = 523

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +2.5120e+02  2.51e+02  9.36e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.8964e-01  +5.2219e+01  5.16e+01  3.71e-01  1.33e+01  3.90e-03  5.39e-01  6.22e-01  
  2  +5.3602e-01  +6.7080e+00  6.17e+00  1.16e-01  5.14e+00  1.25e-02  2.31e-01  8.87e-01  
  3  +4.9988e-01  +1.2066e+00  7.07e-01  2.14e-02  9.47e-01  4.21e-04  1.69e-01  8.70e-01  
  4  +4.9797e-01  +7.1092e-01  2.13e-01  6.09e-03  2.76e-01  2.64e-04  3.40e-02  8.50e-01  
  5  +4.8992e-01  +7.4839e-01  2.58e-01  3.59e-03  1.66e-01  7.65e-04  1.17e-02  8.05e-01  
  6  +4.7164e-01  +6.6110e-01  1.89e-01  1.23e-03  5.75e-02  1.24e-03  3.76e-03  7.25e-01  
  7  +4.5451e-01  +5.8228e-01  1.28e-01  6.22e-04  2.90e-02  8.77e-04  1.93e-03  5.69e-01  
  8  +4.4122e-01  +5.3121e-01  9.00e-02  3.73e-04  1.73e-02  6.02e-04  1.20e-03  4.29e-01  
  9  +4.3129e-01  +4.9146e-01  6.02e-02  2.31e-04  1.07e-02  3.31e-05  7.74e-04  9.90e-01  
 10  +4.1457e-01  +4.3102e-01  1.65e-02  5.80e-05  2.67e-03  8.92e-06  2.08e-04  7.45e-01  
 11  +4.0866e-01  +4.0996e-01  1.29e-03  4.45e-06  2.04e-04  1.55e-06  1.64e-05  9.90e-01  
 12  +4.0811e-01  +4.0812e-01  1.31e-05  4.50e-08  2.07e-06  1.56e-08  1.67e-07  9.90e-01  
 13  +4.0810e-01  +4.0810e-01  1.31e-07  4.50e-10  2.07e-08  1.56e-10  1.67e-09  9.90e-01  
 14  +4.0810e-01  +4.0810e-01  1.31e-09  4.50e-12  2.07e-10  1.56e-12  1.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3821ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:17 PM: Optimal value: 4.081e-01
(CVXPY) Sep 20 03:09:17 PM: Compilation took 3.697e-03 seconds
(CVXPY) Sep 20 03:09:17 PM: Solver (including time spent in interface) took 3.002e-03 seconds
Iteration: 2, Objective: 0.4081
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:17 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Finished problem compilation (took 3.281e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 3053
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9887e-01  +2.5123e+02  2.51e+02  9.37e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.8625e-01  +5.2417e+01  5.18e+01  3.76e-01  1.33e+01  3.89e-03  5.42e-01  6.20e-01  
  2  +5.3334e-01  +6.4272e+00  5.89e+00  1.11e-01  4.95e+00  1.29e-02  2.22e-01  9.16e-01  
  3  +4.9951e-01  +1.2284e+00  7.29e-01  2.24e-02  9.95e-01  7.24e-04  1.49e-01  9.67e-01  
  4  +4.9193e-01  +9.4671e-01  4.55e-01  9.17e-03  4.22e-01  1.22e-03  3.25e-02  8.85e-01  
  5  +4.7495e-01  +8.3137e-01  3.56e-01  3.39e-03  1.58e-01  2.08e-03  1.09e-02  6.99e-01  
  6  +4.6849e-01  +7.9151e-01  3.23e-01  2.51e-03  1.17e-01  1.99e-03  7.95e-03  3.55e-01  
  7  +4.5425e-01  +7.0036e-01  2.46e-01  1.28e-03  5.99e-02  6.13e-04  4.03e-03  9.44e-01  
  8  +4.4086e-01  +6.3098e-01  1.90e-01  9.21e-04  4.28e-02  3.73e-04  3.01e-03  4.18e-01  
  9  +4.0656e-01  +4.6374e-01  5.72e-02  2.36e-04  1.09e-02  1.91e-05  8.67e-04  9.87e-01  
 10  +3.8982e-01  +3.9390e-01  4.08e-03  1.65e-05  7.56e-04  1.45e-06  6.82e-05  9.39e-01  
 11  +3.8833e-01  +3.8841e-01  7.91e-05  3.17e-07  1.45e-05  3.11e-08  1.35e-06  9.82e-01  
 12  +3.8830e-01  +3.8830e-01  7.91e-07  3.17e-09  1.45e-07  3.11e-10  1.35e-08  9.90e-01  
 13  +3.8830e-01  +3.8830e-01  7.91e-09  3.17e-11  1.45e-09  3.12e-12  1.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1464ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:17 PM: Optimal value: 3.883e-01
(CVXPY) Sep 20 03:09:17 PM: Compilation took 3.281e-03 seconds
(CVXPY) Sep 20 03:09:17 PM: Solver (including time spent in interface) took 3.007e-03 seconds
Iteration: 3, Objective: 0.3883
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:17 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Finished problem compilation (took 3.392e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 3251
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9880e-01  +2.5122e+02  2.51e+02  9.37e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.8445e-01  +5.2486e+01  5.19e+01  3.78e-01  1.32e+01  3.89e-03  5.42e-01  6.19e-01  
  2  +5.3162e-01  +6.2379e+00  5.71e+00  1.07e-01  4.76e+00  1.31e-02  2.17e-01  9.34e-01  
  3  +4.9945e-01  +1.2814e+00  7.82e-01  2.42e-02  1.07e+00  1.12e-03  1.37e-01  9.90e-01  
  4  +4.8953e-01  +9.7178e-01  4.82e-01  8.59e-03  3.97e-01  2.07e-03  2.85e-02  8.43e-01  
  5  +4.7745e-01  +8.9094e-01  4.13e-01  4.38e-03  2.04e-01  2.81e-03  1.37e-02  5.60e-01  
  6  +4.6962e-01  +8.5589e-01  3.86e-01  3.11e-03  1.45e-01  3.10e-03  9.59e-03  3.51e-01  
  7  +4.4931e-01  +7.5790e-01  3.09e-01  1.61e-03  7.50e-02  1.97e-03  4.97e-03  7.81e-01  
  8  +4.0277e-01  +4.8784e-01  8.51e-02  3.58e-04  1.65e-02  5.81e-05  1.26e-03  8.93e-01  
  9  +3.8027e-01  +3.9802e-01  1.77e-02  7.41e-05  3.39e-03  1.48e-05  2.98e-04  9.11e-01  
 10  +3.7481e-01  +3.7597e-01  1.16e-03  4.78e-06  2.18e-04  1.05e-06  2.02e-05  9.79e-01  
 11  +3.7444e-01  +3.7453e-01  9.50e-05  3.92e-07  1.79e-05  7.44e-08  1.72e-06  9.19e-01  
 12  +3.7440e-01  +3.7440e-01  1.38e-06  5.68e-09  2.59e-07  1.05e-09  2.54e-08  9.89e-01  
 13  +3.7440e-01  +3.7440e-01  1.38e-08  5.67e-11  2.59e-09  1.05e-11  2.54e-10  9.90e-01  
 14  +3.7440e-01  +3.7440e-01  1.38e-10  5.67e-13  2.59e-11  1.05e-13  2.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3566ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:17 PM: Optimal value: 3.744e-01
(CVXPY) Sep 20 03:09:17 PM: Compilation took 3.392e-03 seconds
(CVXPY) Sep 20 03:09:17 PM: Solver (including time spent in interface) took 3.318e-03 seconds
Iteration: 4, Objective: 0.3744
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:17 PM: Your problem has 302 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Finished problem compilation (took 3.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 302
  constraints   = 552
  nnz(P)        = 0
  nnz(A)        = 3405
  cones (total) = 1
    : Nonnegative = 1,  numel = 552

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9861e-01  +2.5126e+02  2.51e+02  9.38e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.8136e-01  +5.2632e+01  5.21e+01  3.82e-01  1.31e+01  3.89e-03  5.45e-01  6.17e-01  
  2  +5.2927e-01  +5.9918e+00  5.46e+00  1.02e-01  4.52e+00  1.35e-02  2.08e-01  9.60e-01  
  3  +4.9946e-01  +1.4048e+00  9.05e-01  2.76e-02  1.23e+00  1.99e-03  1.20e-01  9.90e-01  
  4  +4.7466e-01  +1.1469e+00  6.72e-01  6.25e-03  2.92e-01  6.36e-03  1.86e-02  8.97e-01  
  5  +4.5607e-01  +1.0899e+00  6.34e-01  3.70e-03  1.73e-01  7.66e-03  1.10e-02  4.99e-01  
  6  +4.4103e-01  +8.9912e-01  4.58e-01  2.44e-03  1.13e-01  2.85e-03  7.58e-03  5.81e-01  
  7  +4.0277e-01  +5.7500e-01  1.72e-01  8.61e-04  3.94e-02  2.61e-05  3.13e-03  8.40e-01  
  8  +3.8221e-01  +4.6269e-01  8.05e-02  3.87e-04  1.76e-02  2.52e-05  1.57e-03  6.13e-01  
  9  +3.7147e-01  +4.0817e-01  3.67e-02  1.68e-04  7.62e-03  2.15e-05  7.18e-04  7.56e-01  
 10  +3.6735e-01  +3.8911e-01  2.18e-02  1.03e-04  4.67e-03  1.24e-05  4.87e-04  6.67e-01  
 11  +3.6652e-01  +3.8401e-01  1.75e-02  8.28e-05  3.75e-03  1.05e-05  3.93e-04  2.95e-01  
 12  +3.6586e-01  +3.8334e-01  1.75e-02  7.93e-05  3.60e-03  1.24e-05  3.57e-04  4.35e-01  
 13  +3.6140e-01  +3.6372e-01  2.32e-03  1.02e-05  4.64e-04  1.70e-06  4.81e-05  8.79e-01  
 14  +3.6071e-01  +3.6075e-01  3.93e-05  1.73e-07  7.84e-06  2.70e-08  8.26e-07  9.88e-01  
 15  +3.6070e-01  +3.6070e-01  3.93e-07  1.73e-09  7.85e-08  2.70e-10  8.27e-09  9.90e-01  
 16  +3.6070e-01  +3.6070e-01  3.93e-09  1.73e-11  7.84e-10  2.70e-12  8.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:17 PM: Optimal value: 3.607e-01
(CVXPY) Sep 20 03:09:17 PM: Compilation took 3.009e-03 seconds
(CVXPY) Sep 20 03:09:17 PM: Solver (including time spent in interface) took 3.914e-03 seconds
Iteration: 5, Objective: 0.3607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:17 PM: Your problem has 307 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Finished problem compilation (took 2.962e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 307
  constraints   = 557
  nnz(P)        = 0
  nnz(A)        = 3504
  cones (total) = 1
    : Nonnegative = 1,  numel = 557

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9861e-01  +2.5126e+02  2.51e+02  9.38e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.8094e-01  +5.2768e+01  5.22e+01  3.83e-01  1.31e+01  3.90e-03  5.45e-01  6.16e-01  
  2  +5.2858e-01  +5.9207e+00  5.39e+00  1.01e-01  4.47e+00  1.36e-02  2.07e-01  9.66e-01  
  3  +4.9948e-01  +1.4300e+00  9.30e-01  2.82e-02  1.25e+00  2.18e-03  1.17e-01  9.90e-01  
  4  +4.7654e-01  +1.2124e+00  7.36e-01  7.17e-03  3.35e-01  6.37e-03  2.13e-02  8.75e-01  
  5  +4.5744e-01  +1.1087e+00  6.51e-01  3.99e-03  1.87e-01  7.43e-03  1.19e-02  5.10e-01  
  6  +4.4274e-01  +9.3949e-01  4.97e-01  2.67e-03  1.24e-01  4.05e-03  8.22e-03  4.96e-01  
  7  +4.1205e-01  +6.4515e-01  2.33e-01  1.19e-03  5.46e-02  3.79e-05  4.15e-03  8.51e-01  
  8  +3.8769e-01  +5.0204e-01  1.14e-01  5.54e-04  2.52e-02  2.76e-05  2.15e-03  5.47e-01  
  9  +3.7444e-01  +4.3523e-01  6.08e-02  2.83e-04  1.29e-02  1.86e-05  1.19e-03  5.09e-01  
 10  +3.6484e-01  +3.8746e-01  2.26e-02  1.04e-04  4.70e-03  8.82e-06  4.68e-04  6.73e-01  
 11  +3.5924e-01  +3.6078e-01  1.54e-03  6.96e-06  3.15e-04  6.37e-07  3.34e-05  9.39e-01  
 12  +3.5881e-01  +3.5883e-01  2.67e-05  1.21e-07  5.47e-06  1.26e-08  5.87e-07  9.87e-01  
 13  +3.5880e-01  +3.5880e-01  2.67e-07  1.21e-09  5.47e-08  1.26e-10  5.87e-09  9.90e-01  
 14  +3.5880e-01  +3.5880e-01  2.67e-09  1.21e-11  5.47e-10  1.26e-12  5.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7073ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:17 PM: Optimal value: 3.588e-01
(CVXPY) Sep 20 03:09:17 PM: Compilation took 2.962e-03 seconds
(CVXPY) Sep 20 03:09:17 PM: Solver (including time spent in interface) took 2.992e-03 seconds
Iteration: 6, Objective: 0.3588
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:17 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Finished problem compilation (took 3.659e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 3533
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9859e-01  +2.5126e+02  2.51e+02  9.38e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.8056e-01  +5.2791e+01  5.22e+01  3.84e-01  1.31e+01  3.90e-03  5.46e-01  6.16e-01  
  2  +5.2827e-01  +5.8877e+00  5.36e+00  1.01e-01  4.44e+00  1.37e-02  2.06e-01  9.70e-01  
  3  +4.9951e-01  +1.4412e+00  9.42e-01  2.84e-02  1.26e+00  2.27e-03  1.15e-01  9.90e-01  
  4  +4.7658e-01  +1.2304e+00  7.54e-01  7.23e-03  3.38e-01  6.62e-03  2.14e-02  8.70e-01  
  5  +4.5623e-01  +1.1513e+00  6.95e-01  4.08e-03  1.91e-01  8.28e-03  1.20e-02  5.03e-01  
  6  +4.3989e-01  +9.4576e-01  5.06e-01  2.70e-03  1.26e-01  4.33e-03  8.33e-03  4.57e-01  
  7  +4.0364e-01  +5.9663e-01  1.93e-01  9.80e-04  4.49e-02  1.71e-04  3.50e-03  8.05e-01  
  8  +3.8919e-01  +5.1725e-01  1.28e-01  6.21e-04  2.83e-02  1.12e-04  2.37e-03  4.22e-01  
  9  +3.7036e-01  +4.1610e-01  4.57e-02  2.16e-04  9.78e-03  3.68e-05  9.20e-04  7.17e-01  
 10  +3.6149e-01  +3.7131e-01  9.82e-03  4.59e-05  2.08e-03  7.61e-06  2.10e-04  8.30e-01  
 11  +3.5905e-01  +3.5984e-01  7.90e-04  3.68e-06  1.66e-04  5.98e-07  1.75e-05  9.90e-01  
 12  +3.5880e-01  +3.5881e-01  9.80e-06  4.56e-08  2.06e-06  7.01e-09  2.18e-07  9.89e-01  
 13  +3.5880e-01  +3.5880e-01  9.80e-08  4.56e-10  2.06e-08  7.01e-11  2.18e-09  9.90e-01  
 14  +3.5880e-01  +3.5880e-01  9.80e-10  4.56e-12  2.06e-10  7.01e-13  2.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7889ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:17 PM: Optimal value: 3.588e-01
(CVXPY) Sep 20 03:09:17 PM: Compilation took 3.659e-03 seconds
(CVXPY) Sep 20 03:09:17 PM: Solver (including time spent in interface) took 2.925e-03 seconds
Iteration: 7, Objective: 0.3588
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:09:17 PM: Your problem has 313 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:09:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:09:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:09:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:09:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:09:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:09:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:09:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:09:17 PM: Finished problem compilation (took 3.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 313
  constraints   = 563
  nnz(P)        = 0
  nnz(A)        = 3573
  cones (total) = 1
    : Nonnegative = 1,  numel = 563

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9856e-01  +2.5132e+02  2.51e+02  9.38e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.7974e-01  +5.2819e+01  5.22e+01  3.85e-01  1.30e+01  3.90e-03  5.46e-01  6.16e-01  
  2  +5.2758e-01  +5.8107e+00  5.28e+00  9.90e-02  4.36e+00  1.38e-02  2.04e-01  9.77e-01  
  3  +4.9953e-01  +1.4625e+00  9.63e-01  2.86e-02  1.27e+00  2.46e-03  1.10e-01  9.90e-01  
  4  +4.7812e-01  +1.3005e+00  8.22e-01  8.04e-03  3.75e-01  6.69e-03  2.36e-02  8.52e-01  
  5  +4.5646e-01  +1.1279e+00  6.71e-01  4.13e-03  1.92e-01  7.29e-03  1.22e-02  5.39e-01  
  6  +4.4164e-01  +9.6451e-01  5.23e-01  2.84e-03  1.32e-01  4.50e-03  8.70e-03  4.32e-01  
  7  +4.1050e-01  +6.4566e-01  2.35e-01  1.23e-03  5.62e-02  4.16e-05  4.27e-03  8.44e-01  
  8  +3.9031e-01  +5.2574e-01  1.35e-01  6.67e-04  3.03e-02  3.74e-05  2.53e-03  4.95e-01  
  9  +3.7513e-01  +4.4226e-01  6.71e-02  3.20e-04  1.45e-02  2.75e-05  1.32e-03  6.02e-01  
 10  +3.6467e-01  +3.8775e-01  2.31e-02  1.09e-04  4.91e-03  9.98e-06  4.81e-04  6.68e-01  
 11  +3.5975e-01  +3.6306e-01  3.30e-03  1.55e-05  6.98e-04  1.86e-06  7.19e-05  9.10e-01  
 12  +3.5902e-01  +3.5975e-01  7.25e-04  3.38e-06  1.53e-04  4.92e-07  1.61e-05  9.12e-01  
 13  +3.5880e-01  +3.5881e-01  9.46e-06  4.41e-08  1.99e-06  6.19e-09  2.12e-07  9.87e-01  
 14  +3.5880e-01  +3.5880e-01  9.46e-08  4.41e-10  1.99e-08  6.19e-11  2.12e-09  9.90e-01  
 15  +3.5880e-01  +3.5880e-01  9.47e-10  4.41e-12  1.99e-10  6.20e-13  2.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8635ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:09:17 PM: Problem status: optimal
(CVXPY) Sep 20 03:09:17 PM: Optimal value: 3.588e-01
(CVXPY) Sep 20 03:09:17 PM: Compilation took 3.012e-03 seconds
(CVXPY) Sep 20 03:09:17 PM: Solver (including time spent in interface) took 3.248e-03 seconds
FULL MODEL:
  Accruacy: 0.642
  Our objective: 0.2840000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.144)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.004)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.037511110305786
Best over terms:
  Our final objective: 0.14399999999999996
    Its accruacy: 0.572
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14399999999999996
  Highest accruacy: 0.572
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

