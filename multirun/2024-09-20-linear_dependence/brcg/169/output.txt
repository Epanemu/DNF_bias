Command:
python test_script.py -s linear_dependence -d 5 -n 50 --seed 21 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.48
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.6799999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:12 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:12 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8577e-01  +2.6272e+01  2.58e+01  8.20e-01  5.85e+00  1.00e+00  1.09e+00   ------   
  1  +5.6715e-01  +5.3219e+00  4.75e+00  2.95e-01  3.05e+00  3.93e-03  5.31e-01  6.65e-01  
  2  +4.4678e-01  +1.0349e+00  5.88e-01  4.86e-02  6.01e-01  1.29e-02  1.28e-01  9.56e-01  
  3  +3.7631e-01  +5.8435e-01  2.08e-01  1.36e-02  1.68e-01  3.79e-03  4.23e-02  7.12e-01  
  4  +3.4384e-01  +4.2173e-01  7.79e-02  4.49e-03  5.37e-02  1.23e-03  1.75e-02  6.38e-01  
  5  +3.2411e-01  +3.3988e-01  1.58e-02  7.22e-04  8.68e-03  1.72e-04  3.78e-03  9.15e-01  
  6  +3.2015e-01  +3.2032e-01  1.75e-04  7.95e-06  9.55e-05  1.75e-06  4.31e-05  9.89e-01  
  7  +3.2010e-01  +3.2010e-01  1.75e-06  7.94e-08  9.55e-07  1.75e-08  4.31e-07  9.90e-01  
  8  +3.2010e-01  +3.2010e-01  1.75e-08  7.94e-10  9.55e-09  1.75e-10  4.31e-09  9.90e-01  
  9  +3.2010e-01  +3.2010e-01  1.75e-10  7.94e-12  9.55e-11  1.75e-12  4.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 226.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:12 PM: Optimal value: 3.201e-01
(CVXPY) Sep 20 03:07:12 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 03:07:12 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:12 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:12 PM: Finished problem compilation (took 2.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 291
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5906e-01  +2.7329e+01  2.69e+01  8.37e-01  6.20e+00  1.00e+00  1.16e+00   ------   
  1  +4.7188e-01  +5.5422e+00  5.07e+00  3.18e-01  3.21e+00  3.92e-03  5.77e-01  6.52e-01  
  2  +3.3351e-01  +1.0415e+00  7.08e-01  5.39e-02  6.65e-01  1.43e-02  1.46e-01  9.36e-01  
  3  +2.6818e-01  +6.3943e-01  3.71e-01  1.98e-02  2.48e-01  8.23e-03  6.59e-02  6.49e-01  
  4  +2.1054e-01  +3.3960e-01  1.29e-01  6.17e-03  7.64e-02  2.14e-03  2.42e-02  6.98e-01  
  5  +1.8423e-01  +1.9963e-01  1.54e-02  7.34e-04  8.98e-03  1.83e-04  3.32e-03  8.90e-01  
  6  +1.8045e-01  +1.8133e-01  8.77e-04  4.17e-05  5.09e-04  9.12e-06  1.95e-04  9.53e-01  
  7  +1.8022e-01  +1.8028e-01  5.58e-05  2.68e-06  3.24e-05  2.59e-07  1.38e-05  9.30e-01  
  8  +1.8020e-01  +1.8020e-01  1.69e-06  8.17e-08  9.81e-07  7.64e-09  4.69e-07  9.68e-01  
  9  +1.8020e-01  +1.8020e-01  1.68e-08  8.15e-10  9.78e-09  7.61e-11  4.69e-09  9.90e-01  
 10  +1.8020e-01  +1.8020e-01  1.68e-10  8.15e-12  9.78e-11  7.61e-13  4.69e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 235.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:12 PM: Optimal value: 1.802e-01
(CVXPY) Sep 20 03:07:12 PM: Compilation took 2.005e-03 seconds
(CVXPY) Sep 20 03:07:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:12 PM: Your problem has 53 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:12 PM: Finished problem compilation (took 2.049e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 53
  constraints   = 78
  nnz(P)        = 0
  nnz(A)        = 318
  cones (total) = 1
    : Nonnegative = 1,  numel = 78

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5295e-01  +2.7119e+01  2.67e+01  8.44e-01  6.06e+00  1.00e+00  1.15e+00   ------   
  1  +4.3276e-01  +5.4522e+00  5.02e+00  3.18e-01  3.06e+00  3.97e-03  5.67e-01  6.55e-01  
  2  +2.8942e-01  +1.3321e+00  1.04e+00  7.12e-02  8.38e-01  1.28e-02  1.84e-01  8.17e-01  
  3  +2.1255e-01  +5.7282e-01  3.60e-01  2.17e-02  2.54e-01  5.52e-03  6.79e-02  7.57e-01  
  4  +1.7053e-01  +2.2616e-01  5.56e-02  3.37e-03  3.86e-02  6.99e-04  1.26e-02  8.38e-01  
  5  +1.6103e-01  +1.6425e-01  3.22e-03  1.98e-04  2.24e-03  3.37e-05  7.94e-04  9.43e-01  
  6  +1.6052e-01  +1.6121e-01  6.96e-04  4.30e-05  4.83e-04  6.71e-06  1.80e-04  7.84e-01  
  7  +1.6037e-01  +1.6064e-01  2.66e-04  1.40e-05  1.60e-04  2.15e-06  7.01e-05  8.17e-01  
  8  +1.6031e-01  +1.6033e-01  2.33e-05  1.23e-06  1.41e-05  1.44e-07  6.63e-06  9.67e-01  
  9  +1.6030e-01  +1.6030e-01  2.68e-07  1.42e-08  1.62e-07  1.55e-09  7.79e-08  9.89e-01  
 10  +1.6030e-01  +1.6030e-01  2.68e-09  1.42e-10  1.62e-09  1.55e-11  7.79e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 265.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:12 PM: Optimal value: 1.603e-01
(CVXPY) Sep 20 03:07:12 PM: Compilation took 2.049e-03 seconds
(CVXPY) Sep 20 03:07:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:12 PM: Your problem has 55 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:12 PM: Finished problem compilation (took 2.177e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 80
  nnz(P)        = 0
  nnz(A)        = 325
  cones (total) = 1
    : Nonnegative = 1,  numel = 80

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4513e-01  +2.7430e+01  2.70e+01  8.46e-01  6.03e+00  1.00e+00  1.16e+00   ------   
  1  +4.0309e-01  +5.6752e+00  5.27e+00  3.28e-01  3.11e+00  4.03e-03  5.84e-01  6.36e-01  
  2  +2.6833e-01  +1.1705e+00  9.02e-01  6.67e-02  7.66e-01  1.44e-02  1.76e-01  8.73e-01  
  3  +2.0291e-01  +6.5006e-01  4.47e-01  2.79e-02  3.20e-01  7.33e-03  8.87e-02  7.07e-01  
  4  +1.6750e-01  +2.1374e-01  4.62e-02  3.02e-03  3.41e-02  5.58e-04  1.14e-02  8.90e-01  
  5  +1.6074e-01  +1.6277e-01  2.03e-03  1.36e-04  1.52e-03  2.21e-05  5.37e-04  9.56e-01  
  6  +1.6050e-01  +1.6114e-01  6.44e-04  4.20e-05  4.67e-04  5.93e-06  1.79e-04  8.02e-01  
  7  +1.6038e-01  +1.6069e-01  3.12e-04  1.67e-05  1.91e-04  2.52e-06  8.42e-05  7.13e-01  
  8  +1.6031e-01  +1.6034e-01  3.45e-05  1.82e-06  2.09e-05  2.26e-07  9.96e-06  8.91e-01  
  9  +1.6030e-01  +1.6030e-01  4.49e-07  2.37e-08  2.72e-07  2.63e-09  1.33e-07  9.88e-01  
 10  +1.6030e-01  +1.6030e-01  4.49e-09  2.37e-10  2.72e-09  2.63e-11  1.33e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 272.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:12 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:12 PM: Optimal value: 1.603e-01
(CVXPY) Sep 20 03:07:12 PM: Compilation took 2.177e-03 seconds
(CVXPY) Sep 20 03:07:12 PM: Solver (including time spent in interface) took 1.164e-03 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.68

IF 
    (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.48)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 1 AND x4 = 0)                       <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.6539595127105713
Best over terms:
  Our final objective: 0.48
    Its accruacy: 0.74
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.48
  Highest accruacy: 0.74
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

