Command:
python test_script.py -s linear_dependence -d 3 -n 500 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.28
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 3.

Computed total variation: 0.28
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:48 PM: Your problem has 257 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:48 PM: Finished problem compilation (took 3.091e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 257
  constraints   = 507
  nnz(P)        = 0
  nnz(A)        = 1507
  cones (total) = 1
    : Nonnegative = 1,  numel = 507

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +2.5082e+02  2.50e+02  9.30e-01  1.70e+01  1.00e+00  1.01e+00   ------   
  1  +6.1893e-01  +4.6788e+01  4.62e+01  2.90e-01  8.68e+00  4.25e-03  4.39e-01  6.94e-01  
  2  +5.5197e-01  +7.9991e+00  7.45e+00  1.09e-01  3.84e+00  6.92e-03  2.09e-01  6.98e-01  
  3  +5.0019e-01  +1.2686e+00  7.68e-01  2.28e-02  7.69e-01  2.46e-03  1.86e-01  4.52e-01  
  4  +4.9847e-01  +7.0507e-01  2.07e-01  5.86e-03  2.03e-01  1.29e-03  3.73e-02  8.34e-01  
  5  +4.6711e-01  +7.1883e-01  2.52e-01  1.23e-03  4.36e-02  1.29e-02  3.86e-03  9.30e-01  
  6  +4.4724e-01  +5.3426e-01  8.70e-02  4.40e-04  1.55e-02  1.14e-04  1.59e-03  7.47e-01  
  7  +4.3020e-01  +4.6071e-01  3.05e-02  1.34e-04  4.69e-03  3.60e-05  5.35e-04  6.78e-01  
  8  +4.2428e-01  +4.3686e-01  1.26e-02  5.16e-05  1.81e-03  1.21e-05  2.18e-04  9.90e-01  
  9  +4.2017e-01  +4.2037e-01  2.07e-04  8.34e-07  2.93e-05  1.84e-07  3.66e-06  9.84e-01  
 10  +4.2010e-01  +4.2010e-01  2.07e-06  8.34e-09  2.93e-07  1.84e-09  3.66e-08  9.90e-01  
 11  +4.2010e-01  +4.2010e-01  2.07e-08  8.34e-11  2.93e-09  1.84e-11  3.66e-10  9.90e-01  
 12  +4.2010e-01  +4.2010e-01  2.07e-10  8.34e-13  2.93e-11  1.84e-13  3.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1208ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:48 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 03:04:48 PM: Compilation took 3.091e-03 seconds
(CVXPY) Sep 20 03:04:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:48 PM: Your problem has 262 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:48 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:48 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:48 PM: Finished problem compilation (took 4.662e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 262
  constraints   = 512
  nnz(P)        = 0
  nnz(A)        = 1878
  cones (total) = 1
    : Nonnegative = 1,  numel = 512

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9780e-01  +2.5181e+02  2.51e+02  9.31e-01  1.84e+01  1.00e+00  1.02e+00   ------   
  1  +6.1082e-01  +4.7694e+01  4.71e+01  3.01e-01  9.57e+00  4.20e-03  4.58e-01  6.85e-01  
  2  +5.4742e-01  +7.5533e+00  7.01e+00  1.03e-01  3.91e+00  7.75e-03  2.00e-01  7.53e-01  
  3  +5.0075e-01  +1.6661e+00  1.17e+00  3.41e-02  1.23e+00  3.98e-03  1.68e-01  5.17e-01  
  4  +4.8258e-01  +1.3331e+00  8.51e-01  9.82e-03  3.76e-01  9.92e-03  3.00e-02  9.62e-01  
  5  +4.6750e-01  +9.5781e-01  4.90e-01  4.31e-03  1.65e-01  5.75e-03  1.36e-02  6.09e-01  
  6  +4.6756e-01  +1.0085e+00  5.41e-01  2.65e-03  1.02e-01  3.93e-03  7.52e-03  9.62e-01  
  7  +4.5788e-01  +8.2686e-01  3.69e-01  2.10e-03  8.09e-02  3.33e-05  6.09e-03  7.22e-01  
  8  +4.4012e-01  +7.3387e-01  2.94e-01  1.25e-03  4.78e-02  4.25e-05  3.68e-03  4.19e-01  
  9  +4.0797e-01  +5.5896e-01  1.51e-01  5.61e-04  2.14e-02  1.27e-04  1.79e-03  8.12e-01  
 10  +3.7312e-01  +4.0974e-01  3.66e-02  1.30e-04  4.92e-03  2.71e-05  4.67e-04  8.33e-01  
 11  +3.6125e-01  +3.6434e-01  3.09e-03  1.09e-05  4.11e-04  2.12e-06  4.13e-05  9.17e-01  
 12  +3.6012e-01  +3.6016e-01  4.17e-05  1.47e-07  5.53e-06  3.44e-08  5.61e-07  9.90e-01  
 13  +3.6010e-01  +3.6010e-01  4.17e-07  1.47e-09  5.53e-08  3.44e-10  5.61e-09  9.90e-01  
 14  +3.6010e-01  +3.6010e-01  4.17e-09  1.47e-11  5.53e-10  3.44e-12  5.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7118ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:48 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:48 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 03:04:48 PM: Compilation took 4.662e-03 seconds
(CVXPY) Sep 20 03:04:48 PM: Solver (including time spent in interface) took 4.840e-03 seconds
FULL MODEL:
  Accruacy: 0.64
  Our objective: 0.28

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.28)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.0118539333343506
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

