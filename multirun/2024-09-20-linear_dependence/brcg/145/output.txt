Command:
python test_script.py -s linear_dependence -d 4 -n 5000 --seed 43 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.27199999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.272
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:20 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:21 PM: Finished problem compilation (took 8.699e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5009e+03  2.50e+03  9.78e-01  6.06e+01  1.00e+00  1.00e+00   ------   
  1  +6.0811e-01  +4.8463e+02  4.84e+02  3.36e-01  3.37e+01  4.10e-03  4.73e-01  6.68e-01  
  2  +5.5077e-01  +7.5410e+01  7.49e+01  1.37e-01  1.68e+01  8.24e-03  2.27e-01  7.27e-01  
  3  +5.0955e-01  +1.5196e+01  1.47e+01  9.43e-02  1.12e+01  1.64e-05  2.24e-01  8.17e-02  
  4  +4.9999e-01  +1.0910e+00  5.91e-01  5.61e-03  6.79e-01  7.41e-06  1.38e-01  8.22e-01  
  5  +4.9945e-01  +8.1490e-01  3.15e-01  2.87e-03  3.50e-01  1.24e-05  2.66e-02  8.61e-01  
  6  +4.7228e-01  +8.3375e-01  3.61e-01  2.80e-04  3.46e-02  4.15e-04  8.33e-04  9.79e-01  
  7  +4.3793e-01  +5.6692e-01  1.29e-01  6.27e-05  7.70e-03  2.04e-04  2.06e-04  7.75e-01  
  8  +4.1010e-01  +4.2806e-01  1.80e-02  7.77e-06  9.50e-04  7.36e-06  3.31e-05  9.05e-01  
  9  +4.0517e-01  +4.0542e-01  2.51e-04  1.08e-07  1.32e-05  7.13e-08  4.76e-07  9.88e-01  
 10  +4.0510e-01  +4.0510e-01  2.51e-06  1.08e-09  1.32e-07  7.13e-10  4.76e-09  9.90e-01  
 11  +4.0510e-01  +4.0510e-01  2.51e-08  1.08e-11  1.32e-09  7.14e-12  4.77e-11  9.90e-01  
 12  +4.0510e-01  +4.0510e-01  2.51e-10  1.08e-13  1.32e-11  7.15e-14  4.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.572ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:21 PM: Optimal value: 4.051e-01
(CVXPY) Sep 20 03:06:21 PM: Compilation took 8.699e-03 seconds
(CVXPY) Sep 20 03:06:21 PM: Solver (including time spent in interface) took 1.985e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4051
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:21 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:21 PM: Finished problem compilation (took 7.944e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 21674
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0000e-01  +2.5012e+03  2.50e+03  9.78e-01  6.39e+01  1.00e+00  1.00e+00   ------   
  1  +6.0764e-01  +4.8509e+02  4.84e+02  3.37e-01  3.55e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5021e-01  +7.4801e+01  7.43e+01  1.36e-01  1.75e+01  8.30e-03  2.25e-01  7.32e-01  
  3  +5.0926e-01  +1.4890e+01  1.44e+01  9.30e-02  1.16e+01  1.63e-05  2.22e-01  8.84e-02  
  4  +5.0040e-01  +1.7578e+00  1.26e+00  1.19e-02  1.51e+00  8.36e-06  1.66e-01  5.11e-01  
  5  +5.0005e-01  +1.0160e+00  5.16e-01  4.86e-03  6.22e-01  5.08e-06  6.40e-02  6.56e-01  
  6  +4.9638e-01  +1.3231e+00  8.27e-01  2.28e-03  2.99e-01  5.95e-05  6.47e-03  9.77e-01  
  7  +4.7838e-01  +1.0632e+00  5.85e-01  3.66e-04  4.82e-02  2.37e-04  9.72e-04  8.51e-01  
  8  +4.7026e-01  +9.9644e-01  5.26e-01  2.46e-04  3.24e-02  2.41e-04  6.50e-04  4.29e-01  
  9  +4.6829e-01  +9.1859e-01  4.50e-01  2.18e-04  2.87e-02  1.48e-04  5.83e-04  2.89e-01  
 10  +4.7339e-01  +8.7462e-01  4.01e-01  2.07e-04  2.72e-02  6.44e-05  5.51e-04  5.25e-01  
 11  +4.4766e-01  +7.3570e-01  2.88e-01  1.11e-04  1.45e-02  5.25e-05  3.08e-04  5.16e-01  
 12  +4.0258e-01  +5.1308e-01  1.10e-01  4.04e-05  5.24e-03  1.10e-05  1.26e-04  7.00e-01  
 13  +3.6729e-01  +3.7410e-01  6.81e-03  2.42e-06  3.12e-04  9.94e-08  8.63e-06  9.70e-01  
 14  +3.6414e-01  +3.6421e-01  7.62e-05  2.70e-08  3.49e-06  1.29e-09  9.83e-08  9.89e-01  
 15  +3.6410e-01  +3.6410e-01  7.62e-07  2.70e-10  3.49e-08  1.29e-11  9.83e-10  9.90e-01  
 16  +3.6410e-01  +3.6410e-01  7.62e-09  2.70e-12  3.49e-10  1.29e-13  9.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.0322ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:21 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:21 PM: Optimal value: 3.641e-01
(CVXPY) Sep 20 03:06:21 PM: Compilation took 7.944e-03 seconds
(CVXPY) Sep 20 03:06:21 PM: Solver (including time spent in interface) took 2.445e-02 seconds
FULL MODEL:
  Accruacy: 0.636
  Our objective: 0.27199999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.272)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4743807315826416
Best over terms:
  Our final objective: 0.27199999999999996
    Its accruacy: 0.636
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.27199999999999996
  Highest accruacy: 0.636
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

