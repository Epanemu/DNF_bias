Command:
python test_script.py -s linear_dependence -d 5 -n 1000 --seed 56 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.354
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.362
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:41 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:41 PM: Finished problem compilation (took 5.858e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0112e+02  5.01e+02  9.52e-01  2.89e+01  1.00e+00  1.00e+00   ------   
  1  +5.9887e-01  +1.0059e+02  1.00e+02  3.51e-01  1.67e+01  3.99e-03  5.04e-01  6.46e-01  
  2  +5.4373e-01  +1.4208e+01  1.37e+01  1.24e-01  7.28e+00  1.01e-02  2.26e-01  8.03e-01  
  3  +5.0216e-01  +2.2202e+00  1.72e+00  3.49e-02  1.96e+00  4.72e-04  2.03e-01  4.39e-01  
  4  +4.9911e-01  +9.1428e-01  4.15e-01  8.05e-03  4.72e-01  2.58e-04  4.18e-02  8.75e-01  
  5  +4.6588e-01  +9.1209e-01  4.46e-01  1.21e-03  7.33e-02  3.25e-03  3.24e-03  9.43e-01  
  6  +4.3448e-01  +7.0694e-01  2.72e-01  7.11e-04  4.23e-02  1.15e-03  2.21e-03  4.26e-01  
  7  +4.0487e-01  +5.5870e-01  1.54e-01  3.85e-04  2.27e-02  9.87e-06  1.46e-03  8.69e-01  
  8  +3.7431e-01  +4.0076e-01  2.65e-02  6.00e-05  3.52e-03  2.00e-06  2.73e-04  8.33e-01  
  9  +3.6734e-01  +3.6824e-01  8.91e-04  2.00e-06  1.17e-04  7.38e-08  9.60e-06  9.66e-01  
 10  +3.6710e-01  +3.6711e-01  8.91e-06  2.00e-08  1.17e-06  7.39e-10  9.60e-08  9.90e-01  
 11  +3.6710e-01  +3.6710e-01  8.91e-08  2.00e-10  1.17e-08  7.39e-12  9.61e-10  9.90e-01  
 12  +3.6710e-01  +3.6710e-01  8.91e-10  2.00e-12  1.17e-10  7.39e-14  9.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8677ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:41 PM: Optimal value: 3.671e-01
(CVXPY) Sep 20 03:07:41 PM: Compilation took 5.858e-03 seconds
(CVXPY) Sep 20 03:07:41 PM: Solver (including time spent in interface) took 3.982e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3671
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:41 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:41 PM: Finished problem compilation (took 3.611e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 5076
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0105e+02  5.01e+02  9.53e-01  3.08e+01  1.00e+00  1.00e+00   ------   
  1  +5.9724e-01  +1.0077e+02  1.00e+02  3.53e-01  1.77e+01  3.99e-03  5.05e-01  6.44e-01  
  2  +5.4186e-01  +1.3798e+01  1.33e+01  1.21e-01  7.50e+00  1.03e-02  2.21e-01  8.21e-01  
  3  +5.0101e-01  +2.0039e+00  1.50e+00  3.07e-02  1.85e+00  4.90e-04  1.88e-01  5.79e-01  
  4  +4.9770e-01  +9.8327e-01  4.86e-01  8.52e-03  5.36e-01  4.10e-04  3.50e-02  9.17e-01  
  5  +4.5324e-01  +8.8374e-01  4.30e-01  1.05e-03  6.82e-02  4.07e-03  2.75e-03  9.56e-01  
  6  +4.5039e-01  +8.5901e-01  4.09e-01  1.01e-03  6.55e-02  3.23e-03  2.66e-03  1.42e-01  
  7  +4.3956e-01  +8.2624e-01  3.87e-01  7.79e-04  5.04e-02  3.15e-03  2.05e-03  3.25e-01  
  8  +4.1803e-01  +7.2364e-01  3.06e-01  6.82e-04  4.36e-02  1.06e-03  1.94e-03  3.55e-01  
  9  +3.7346e-01  +5.3458e-01  1.61e-01  2.91e-04  1.84e-02  5.60e-04  8.90e-04  5.79e-01  
 10  +3.3026e-01  +3.4853e-01  1.83e-02  3.39e-05  2.12e-03  4.55e-06  1.25e-04  9.15e-01  
 11  +3.2403e-01  +3.2642e-01  2.39e-03  4.41e-06  2.75e-04  1.37e-06  1.72e-05  9.90e-01  
 12  +3.2311e-01  +3.2314e-01  2.98e-05  5.52e-08  3.44e-06  1.70e-08  2.16e-07  9.87e-01  
 13  +3.2310e-01  +3.2310e-01  2.98e-07  5.51e-10  3.44e-08  1.70e-10  2.16e-09  9.90e-01  
 14  +3.2310e-01  +3.2310e-01  2.98e-09  5.52e-12  3.44e-10  1.70e-12  2.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.987ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:41 PM: Optimal value: 3.231e-01
(CVXPY) Sep 20 03:07:41 PM: Compilation took 3.611e-03 seconds
(CVXPY) Sep 20 03:07:41 PM: Solver (including time spent in interface) took 4.298e-03 seconds
Iteration: 2, Objective: 0.3231
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:41 PM: Your problem has 522 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:41 PM: Finished problem compilation (took 2.882e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 522
  constraints   = 1022
  nnz(P)        = 0
  nnz(A)        = 5156
  cones (total) = 1
    : Nonnegative = 1,  numel = 1022

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0106e+02  5.01e+02  9.53e-01  3.09e+01  1.00e+00  1.01e+00   ------   
  1  +5.9663e-01  +1.0089e+02  1.00e+02  3.54e-01  1.78e+01  3.98e-03  5.07e-01  6.44e-01  
  2  +5.4160e-01  +1.3753e+01  1.32e+01  1.20e-01  7.49e+00  1.04e-02  2.20e-01  8.25e-01  
  3  +5.0081e-01  +1.9577e+00  1.46e+00  2.98e-02  1.80e+00  4.55e-04  1.86e-01  6.07e-01  
  4  +4.9754e-01  +1.0753e+00  5.78e-01  1.00e-02  6.32e-01  4.26e-04  4.03e-02  8.86e-01  
  5  +4.8459e-01  +1.0397e+00  5.55e-01  3.73e-03  2.41e-01  1.41e-03  1.03e-02  7.68e-01  
  6  +4.7739e-01  +1.0181e+00  5.41e-01  2.62e-03  1.70e-01  1.67e-03  6.99e-03  4.24e-01  
  7  +4.6261e-01  +9.5494e-01  4.92e-01  1.59e-03  1.03e-01  1.84e-03  4.20e-03  5.32e-01  
  8  +4.4571e-01  +9.0794e-01  4.62e-01  1.21e-03  7.80e-02  1.07e-04  3.32e-03  9.90e-01  
  9  +3.8719e-01  +5.8016e-01  1.93e-01  3.77e-04  2.40e-02  8.05e-05  1.12e-03  8.49e-01  
 10  +3.3267e-01  +3.6359e-01  3.09e-02  6.06e-05  3.79e-03  9.18e-06  2.25e-04  9.57e-01  
 11  +3.2177e-01  +3.2293e-01  1.16e-03  2.26e-06  1.41e-04  2.98e-07  9.24e-06  9.69e-01  
 12  +3.2130e-01  +3.2132e-01  1.18e-05  2.29e-08  1.43e-06  3.04e-09  9.45e-08  9.90e-01  
 13  +3.2130e-01  +3.2130e-01  1.18e-07  2.29e-10  1.43e-08  3.04e-11  9.45e-10  9.90e-01  
 14  +3.2130e-01  +3.2130e-01  1.18e-09  2.29e-12  1.43e-10  3.04e-13  9.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0594ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:41 PM: Optimal value: 3.213e-01
(CVXPY) Sep 20 03:07:41 PM: Compilation took 2.882e-03 seconds
(CVXPY) Sep 20 03:07:41 PM: Solver (including time spent in interface) took 4.697e-03 seconds
Iteration: 3, Objective: 0.3213
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:41 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:41 PM: Finished problem compilation (took 4.088e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 5237
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0107e+02  5.01e+02  9.53e-01  3.09e+01  1.00e+00  1.01e+00   ------   
  1  +5.9646e-01  +1.0094e+02  1.00e+02  3.55e-01  1.78e+01  3.98e-03  5.07e-01  6.43e-01  
  2  +5.4137e-01  +1.3705e+01  1.32e+01  1.20e-01  7.47e+00  1.04e-02  2.20e-01  8.27e-01  
  3  +5.0073e-01  +1.9404e+00  1.44e+00  2.95e-02  1.78e+00  4.40e-04  1.85e-01  6.20e-01  
  4  +4.9768e-01  +1.1629e+00  6.65e-01  1.17e-02  7.32e-01  4.30e-04  4.72e-02  8.45e-01  
  5  +4.8626e-01  +1.1300e+00  6.44e-01  4.75e-03  3.07e-01  1.28e-03  1.32e-02  7.40e-01  
  6  +4.7807e-01  +1.0848e+00  6.07e-01  3.14e-03  2.03e-01  1.62e-03  8.48e-03  4.05e-01  
  7  +4.7808e-01  +1.1144e+00  6.36e-01  2.47e-03  1.61e-01  6.25e-04  6.43e-03  9.13e-01  
  8  +4.7747e-01  +1.0458e+00  5.68e-01  2.41e-03  1.56e-01  4.42e-04  6.31e-03  1.60e-01  
  9  +4.6330e-01  +9.7972e-01  5.16e-01  1.55e-03  1.00e-01  5.06e-04  4.08e-03  4.34e-01  
 10  +4.3039e-01  +8.1233e-01  3.82e-01  8.41e-04  5.42e-02  3.74e-04  2.30e-03  6.31e-01  
 11  +3.6516e-01  +4.9843e-01  1.33e-01  2.57e-04  1.62e-02  4.61e-05  8.14e-04  8.23e-01  
 12  +3.2971e-01  +3.5360e-01  2.39e-02  4.67e-05  2.92e-03  6.88e-06  1.76e-04  8.22e-01  
 13  +3.2252e-01  +3.2615e-01  3.63e-03  7.08e-06  4.42e-04  1.97e-06  2.84e-05  9.90e-01  
 14  +3.2122e-01  +3.2127e-01  5.08e-05  9.91e-08  6.18e-06  2.71e-08  4.03e-07  9.89e-01  
 15  +3.2120e-01  +3.2120e-01  5.08e-07  9.91e-10  6.18e-08  2.71e-10  4.03e-09  9.90e-01  
 16  +3.2120e-01  +3.2120e-01  5.08e-09  9.91e-12  6.18e-10  2.71e-12  4.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.3208ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:41 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:41 PM: Optimal value: 3.212e-01
(CVXPY) Sep 20 03:07:41 PM: Compilation took 4.088e-03 seconds
(CVXPY) Sep 20 03:07:41 PM: Solver (including time spent in interface) took 5.122e-03 seconds
Iteration: 4, Objective: 0.3212
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:42 PM: Your problem has 528 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:42 PM: Finished problem compilation (took 4.859e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 528
  constraints   = 1028
  nnz(P)        = 0
  nnz(A)        = 5366
  cones (total) = 1
    : Nonnegative = 1,  numel = 1028

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0120e+02  5.01e+02  9.53e-01  3.09e+01  1.00e+00  1.01e+00   ------   
  1  +5.9574e-01  +1.0107e+02  1.00e+02  3.56e-01  1.78e+01  3.98e-03  5.08e-01  6.43e-01  
  2  +5.4094e-01  +1.3619e+01  1.31e+01  1.19e-01  7.42e+00  1.05e-02  2.19e-01  8.31e-01  
  3  +5.0073e-01  +1.9609e+00  1.46e+00  2.99e-02  1.81e+00  4.68e-04  1.83e-01  6.28e-01  
  4  +4.9826e-01  +1.3246e+00  8.26e-01  1.52e-02  9.50e-01  4.55e-04  6.60e-02  6.82e-01  
  5  +4.5566e-01  +1.2380e+00  7.82e-01  2.13e-03  1.39e-01  3.78e-03  5.53e-03  9.75e-01  
  6  +4.4105e-01  +1.1180e+00  6.77e-01  1.41e-03  9.18e-02  3.22e-03  3.67e-03  4.81e-01  
  7  +4.1103e-01  +7.7023e-01  3.59e-01  7.92e-04  5.09e-02  2.79e-05  2.25e-03  7.35e-01  
  8  +3.5884e-01  +4.9032e-01  1.31e-01  2.57e-04  1.62e-02  2.27e-05  8.29e-04  7.04e-01  
  9  +3.2681e-01  +3.4317e-01  1.64e-02  3.23e-05  2.02e-03  2.97e-06  1.23e-04  8.74e-01  
 10  +3.2446e-01  +3.3375e-01  9.29e-03  1.83e-05  1.14e-03  3.67e-06  7.23e-05  7.57e-01  
 11  +3.2324e-01  +3.2897e-01  5.73e-03  1.12e-05  6.98e-04  2.51e-06  4.47e-05  5.59e-01  
 12  +3.2137e-01  +3.2184e-01  4.65e-04  9.08e-07  5.67e-05  2.40e-07  3.70e-06  9.90e-01  
 13  +3.2120e-01  +3.2121e-01  4.70e-06  9.18e-09  5.73e-07  2.43e-09  3.74e-08  9.90e-01  
 14  +3.2120e-01  +3.2120e-01  4.70e-08  9.18e-11  5.73e-09  2.43e-11  3.74e-10  9.90e-01  
 15  +3.2120e-01  +3.2120e-01  4.70e-10  9.18e-13  5.73e-11  2.43e-13  3.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:42 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:42 PM: Optimal value: 3.212e-01
(CVXPY) Sep 20 03:07:42 PM: Compilation took 4.859e-03 seconds
(CVXPY) Sep 20 03:07:42 PM: Solver (including time spent in interface) took 4.916e-03 seconds
FULL MODEL:
  Accruacy: 0.679
  Our objective: 0.358

IF 
    (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.354)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.6397027969360352
Best over terms:
  Our final objective: 0.3539999999999999
    Its accruacy: 0.677
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.3539999999999999
  Highest accruacy: 0.677
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

