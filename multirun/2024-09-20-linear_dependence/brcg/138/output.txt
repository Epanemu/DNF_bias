Command:
python test_script.py -s linear_dependence -d 4 -n 500 --seed 34 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.28
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.27999999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:07 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:07 PM: Finished problem compilation (took 4.019e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +2.5085e+02  2.50e+02  9.32e-01  1.86e+01  1.00e+00  1.01e+00   ------   
  1  +6.0711e-01  +4.8861e+01  4.83e+01  3.19e-01  1.02e+01  4.09e-03  4.76e-01  6.68e-01  
  2  +5.4723e-01  +7.6103e+00  7.06e+00  1.12e-01  4.26e+00  8.50e-03  2.15e-01  7.60e-01  
  3  +5.0079e-01  +1.3459e+00  8.45e-01  2.50e-02  9.21e-01  1.75e-03  1.89e-01  4.83e-01  
  4  +4.9890e-01  +7.0853e-01  2.10e-01  6.02e-03  2.28e-01  7.94e-04  3.84e-02  8.37e-01  
  5  +4.7139e-01  +7.2322e-01  2.52e-01  1.29e-03  5.01e-02  7.85e-03  4.00e-03  9.32e-01  
  6  +4.5260e-01  +5.7742e-01  1.25e-01  6.17e-04  2.38e-02  2.04e-03  2.14e-03  5.75e-01  
  7  +4.3613e-01  +4.8860e-01  5.25e-02  2.32e-04  8.92e-03  2.09e-05  8.93e-04  9.55e-01  
  8  +4.2728e-01  +4.4987e-01  2.26e-02  9.42e-05  3.61e-03  2.14e-05  3.89e-04  9.90e-01  
  9  +4.2028e-01  +4.2083e-01  5.52e-04  2.23e-06  8.55e-05  4.43e-07  9.78e-06  9.77e-01  
 10  +4.2010e-01  +4.2011e-01  5.53e-06  2.23e-08  8.55e-07  4.44e-09  9.79e-08  9.90e-01  
 11  +4.2010e-01  +4.2010e-01  5.53e-08  2.23e-10  8.55e-09  4.44e-11  9.80e-10  9.90e-01  
 12  +4.2010e-01  +4.2010e-01  5.53e-10  2.23e-12  8.55e-11  4.44e-13  9.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4051ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:07 PM: Optimal value: 4.201e-01
(CVXPY) Sep 20 03:06:07 PM: Compilation took 4.019e-03 seconds
(CVXPY) Sep 20 03:06:07 PM: Solver (including time spent in interface) took 4.123e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:06:07 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:06:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:06:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:06:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:06:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:06:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:06:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:06:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:06:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:06:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:06:07 PM: Finished problem compilation (took 4.040e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 2360
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9806e-01  +2.5157e+02  2.51e+02  9.33e-01  2.02e+01  1.00e+00  1.02e+00   ------   
  1  +5.9935e-01  +4.9589e+01  4.90e+01  3.30e-01  1.11e+01  4.06e-03  4.92e-01  6.60e-01  
  2  +5.4130e-01  +7.0019e+00  6.46e+00  1.03e-01  4.25e+00  9.48e-03  2.02e-01  8.23e-01  
  3  +5.0213e-01  +1.8400e+00  1.34e+00  3.89e-02  1.55e+00  3.47e-03  1.67e-01  5.24e-01  
  4  +4.9000e-01  +1.0974e+00  6.07e-01  9.39e-03  3.95e-01  5.28e-03  2.87e-02  9.36e-01  
  5  +4.7404e-01  +8.9317e-01  4.19e-01  4.07e-03  1.72e-01  5.41e-03  1.25e-02  5.90e-01  
  6  +4.6204e-01  +7.7761e-01  3.16e-01  1.95e-03  8.24e-02  5.85e-03  5.68e-03  5.93e-01  
  7  +4.5727e-01  +7.8495e-01  3.28e-01  1.63e-03  6.89e-02  4.61e-03  4.64e-03  5.06e-01  
  8  +4.2692e-01  +6.5403e-01  2.27e-01  8.29e-04  3.49e-02  2.35e-03  2.47e-03  6.96e-01  
  9  +3.9317e-01  +4.9802e-01  1.05e-01  3.75e-04  1.56e-02  6.53e-04  1.24e-03  5.86e-01  
 10  +3.6461e-01  +3.7649e-01  1.19e-02  4.22e-05  1.75e-03  2.42e-05  1.56e-04  9.08e-01  
 11  +3.6050e-01  +3.6146e-01  9.56e-04  3.38e-06  1.40e-04  1.29e-06  1.29e-05  9.90e-01  
 12  +3.6010e-01  +3.6011e-01  9.86e-06  3.49e-08  1.44e-06  1.33e-08  1.34e-07  9.90e-01  
 13  +3.6010e-01  +3.6010e-01  9.86e-08  3.49e-10  1.44e-08  1.33e-10  1.34e-09  9.90e-01  
 14  +3.6010e-01  +3.6010e-01  9.86e-10  3.49e-12  1.44e-10  1.33e-12  1.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7294ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:06:07 PM: Problem status: optimal
(CVXPY) Sep 20 03:06:07 PM: Optimal value: 3.601e-01
(CVXPY) Sep 20 03:06:07 PM: Compilation took 4.040e-03 seconds
(CVXPY) Sep 20 03:06:07 PM: Solver (including time spent in interface) took 2.005e-03 seconds
FULL MODEL:
  Accruacy: 0.64
  Our objective: 0.28

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.28)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.207853078842163
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

