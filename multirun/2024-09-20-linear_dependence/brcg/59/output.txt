Command:
python test_script.py -s linear_dependence -d 2 -n 500 --seed 21 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.624
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 2.

Computed total variation: 0.6239999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:46 PM: Your problem has 255 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:46 PM: Finished problem compilation (took 7.343e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 255
  constraints   = 505
  nnz(P)        = 0
  nnz(A)        = 1255
  cones (total) = 1
    : Nonnegative = 1,  numel = 505

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9686e-01  +2.5214e+02  2.52e+02  9.27e-01  1.57e+01  1.00e+00  1.02e+00   ------   
  1  +6.3136e-01  +4.4020e+01  4.34e+01  2.51e-01  7.29e+00  4.49e-03  3.92e-01  7.28e-01  
  2  +5.4056e-01  +6.4649e+00  5.92e+00  7.85e-02  2.67e+00  6.09e-03  1.53e-01  7.68e-01  
  3  +5.2919e-01  +5.9607e+00  5.43e+00  4.31e-02  1.52e+00  1.18e-02  8.44e-02  4.67e-01  
  4  +5.0665e-01  +5.4089e+00  4.90e+00  3.25e-02  1.15e+00  9.97e-03  6.49e-02  4.43e-01  
  5  +4.5127e-01  +4.1591e+00  3.71e+00  1.20e-02  4.33e-01  1.44e-02  2.43e-02  6.34e-01  
  6  +3.4336e-01  +1.5916e+00  1.25e+00  6.33e-03  2.16e-01  7.57e-05  1.56e-02  6.61e-01  
  7  +2.7574e-01  +9.1270e-01  6.37e-01  3.31e-03  1.09e-01  2.37e-04  9.79e-03  5.38e-01  
  8  +2.1159e-01  +3.7208e-01  1.60e-01  9.09e-04  2.87e-02  1.23e-04  4.03e-03  8.40e-01  
  9  +1.8981e-01  +1.9946e-01  9.65e-03  5.58e-05  1.74e-03  4.55e-06  3.40e-04  9.44e-01  
 10  +1.8812e-01  +1.8822e-01  9.88e-05  5.72e-07  1.78e-05  5.38e-08  3.69e-06  9.89e-01  
 11  +1.8810e-01  +1.8810e-01  9.88e-07  5.72e-09  1.78e-07  5.37e-10  3.69e-08  9.90e-01  
 12  +1.8810e-01  +1.8810e-01  9.88e-09  5.72e-11  1.78e-09  5.37e-12  3.69e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.115ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:46 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:46 PM: Optimal value: 1.881e-01
(CVXPY) Sep 20 03:03:46 PM: Compilation took 7.343e-03 seconds
(CVXPY) Sep 20 03:03:46 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1881
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:46 PM: Your problem has 256 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:46 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 256
  constraints   = 506
  nnz(P)        = 0
  nnz(A)        = 1361
  cones (total) = 1
    : Nonnegative = 1,  numel = 506

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9773e-01  +2.5270e+02  2.52e+02  9.27e-01  1.63e+01  1.00e+00  1.02e+00   ------   
  1  +6.3268e-01  +4.4411e+01  4.38e+01  2.55e-01  7.65e+00  4.46e-03  3.98e-01  7.25e-01  
  2  +5.4132e-01  +6.5843e+00  6.04e+00  8.10e-02  2.84e+00  6.22e-03  1.59e-01  7.64e-01  
  3  +5.2836e-01  +5.9041e+00  5.38e+00  4.36e-02  1.59e+00  1.20e-02  8.59e-02  4.81e-01  
  4  +5.0510e-01  +5.3486e+00  4.84e+00  3.22e-02  1.18e+00  1.01e-02  6.47e-02  4.70e-01  
  5  +4.4741e-01  +4.0702e+00  3.62e+00  1.15e-02  4.33e-01  1.46e-02  2.37e-02  6.44e-01  
  6  +3.3927e-01  +1.5608e+00  1.22e+00  5.95e-03  2.12e-01  8.00e-05  1.47e-02  6.33e-01  
  7  +2.6081e-01  +7.6075e-01  5.00e-01  2.73e-03  9.24e-02  2.07e-04  8.73e-03  5.80e-01  
  8  +2.0377e-01  +2.9941e-01  9.56e-02  5.46e-04  1.78e-02  3.69e-05  2.64e-03  7.87e-01  
  9  +1.8885e-01  +1.9320e-01  4.35e-03  2.52e-05  8.17e-04  1.95e-06  1.59e-04  9.58e-01  
 10  +1.8811e-01  +1.8815e-01  4.32e-05  2.50e-07  8.11e-06  1.98e-08  1.62e-06  9.90e-01  
 11  +1.8810e-01  +1.8810e-01  4.32e-07  2.50e-09  8.11e-08  1.98e-10  1.62e-08  9.90e-01  
 12  +1.8810e-01  +1.8810e-01  4.32e-09  2.50e-11  8.11e-10  1.98e-12  1.62e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0863ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:46 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:46 PM: Optimal value: 1.881e-01
(CVXPY) Sep 20 03:03:46 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:46 PM: Solver (including time spent in interface) took 5.439e-03 seconds
Iteration: 2, Objective: 0.1881
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:46 PM: Your problem has 257 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:46 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:46 PM: Finished problem compilation (took 4.637e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 257
  constraints   = 507
  nnz(P)        = 0
  nnz(A)        = 1455
  cones (total) = 1
    : Nonnegative = 1,  numel = 507

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9602e-01  +2.5278e+02  2.52e+02  9.28e-01  1.68e+01  1.00e+00  1.02e+00   ------   
  1  +6.1920e-01  +4.5398e+01  4.48e+01  2.70e-01  8.21e+00  4.33e-03  4.20e-01  7.13e-01  
  2  +5.3915e-01  +6.4029e+00  5.86e+00  7.69e-02  2.80e+00  6.83e-03  1.50e-01  8.08e-01  
  3  +5.3781e-01  +7.0019e+00  6.46e+00  5.54e-02  2.07e+00  1.13e-02  1.07e-01  3.11e-01  
  4  +5.1056e-01  +6.3462e+00  5.84e+00  4.40e-02  1.65e+00  9.88e-03  8.71e-02  3.76e-01  
  5  +4.5805e-01  +4.6966e+00  4.24e+00  1.82e-02  6.97e-01  1.17e-02  3.72e-02  5.90e-01  
  6  +3.6453e-01  +1.7396e+00  1.38e+00  7.67e-03  2.82e-01  1.87e-03  1.83e-02  7.17e-01  
  7  +3.3814e-01  +1.6162e+00  1.28e+00  5.85e-03  2.15e-01  1.92e-03  1.42e-02  3.07e-01  
  8  +2.4175e-01  +6.0023e-01  3.58e-01  2.06e-03  7.05e-02  1.65e-04  7.50e-03  9.90e-01  
  9  +1.9522e-01  +2.3219e-01  3.70e-02  2.14e-04  7.14e-03  2.26e-06  1.15e-03  8.97e-01  
 10  +1.8821e-01  +1.8888e-01  6.62e-04  3.84e-06  1.28e-04  2.31e-07  2.48e-05  9.89e-01  
 11  +1.8810e-01  +1.8811e-01  6.69e-06  3.88e-08  1.29e-06  2.33e-09  2.52e-07  9.90e-01  
 12  +1.8810e-01  +1.8810e-01  6.69e-08  3.88e-10  1.29e-08  2.33e-11  2.52e-09  9.90e-01  
 13  +1.8810e-01  +1.8810e-01  6.69e-10  3.88e-12  1.29e-10  2.33e-13  2.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9364ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:46 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:46 PM: Optimal value: 1.881e-01
(CVXPY) Sep 20 03:03:46 PM: Compilation took 4.637e-03 seconds
(CVXPY) Sep 20 03:03:46 PM: Solver (including time spent in interface) took 5.194e-03 seconds
FULL MODEL:
  Accruacy: 0.812
  Our objective: 0.624

IF 
    (x0 = 0) <-- (term's our objective: 0.624)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8595919609069824
Best over terms:
  Our final objective: 0.624
    Its accruacy: 0.812
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.624
  Highest accruacy: 0.812
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

