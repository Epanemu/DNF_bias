Command:
python test_script.py -s linear_dependence -d 5 -n 5000 --seed 21 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.30479999999999996
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.3048
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:00 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:00 PM: Finished problem compilation (took 8.405e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.78e-01  6.56e+01  1.00e+00  1.00e+00   ------   
  1  +5.9951e-01  +5.0122e+02  5.01e+02  3.62e-01  3.83e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4597e-01  +7.1463e+01  7.09e+01  1.41e-01  1.86e+01  9.87e-03  2.34e-01  7.81e-01  
  3  +5.0974e-01  +1.6094e+01  1.56e+01  9.88e-02  1.26e+01  2.21e-05  2.30e-01  1.08e-01  
  4  +5.0000e-01  +1.0277e+00  5.28e-01  5.04e-03  6.60e-01  8.49e-06  1.13e-01  9.90e-01  
  5  +4.9520e-01  +1.4585e+00  9.63e-01  3.59e-03  4.81e-01  1.11e-04  1.13e-02  9.86e-01  
  6  +4.6570e-01  +1.0129e+00  5.47e-01  3.64e-04  4.90e-02  5.60e-04  1.03e-03  9.09e-01  
  7  +4.3409e-01  +6.3888e-01  2.05e-01  1.04e-04  1.38e-02  1.70e-04  3.30e-04  7.24e-01  
  8  +4.0121e-01  +4.3015e-01  2.89e-02  1.33e-05  1.76e-03  1.42e-06  5.58e-05  9.01e-01  
  9  +3.9331e-01  +3.9408e-01  7.67e-04  3.41e-07  4.51e-05  3.45e-08  1.56e-06  9.74e-01  
 10  +3.9310e-01  +3.9311e-01  7.67e-06  3.41e-09  4.51e-07  3.45e-10  1.57e-08  9.90e-01  
 11  +3.9310e-01  +3.9310e-01  7.67e-08  3.41e-11  4.51e-09  3.46e-12  1.57e-10  9.90e-01  
 12  +3.9310e-01  +3.9310e-01  7.67e-10  3.41e-13  4.51e-11  3.47e-14  1.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.546ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:00 PM: Optimal value: 3.931e-01
(CVXPY) Sep 20 03:08:00 PM: Compilation took 8.405e-03 seconds
(CVXPY) Sep 20 03:08:00 PM: Solver (including time spent in interface) took 2.162e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3931
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:00 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:00 PM: Finished problem compilation (took 8.898e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 24900
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5011e+03  2.50e+03  9.78e-01  6.96e+01  1.00e+00  1.00e+00   ------   
  1  +5.9920e-01  +5.0142e+02  5.01e+02  3.62e-01  4.06e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4557e-01  +7.1020e+01  7.05e+01  1.40e-01  1.95e+01  9.91e-03  2.33e-01  7.85e-01  
  3  +5.0950e-01  +1.5837e+01  1.53e+01  9.77e-02  1.32e+01  2.20e-05  2.28e-01  1.15e-01  
  4  +5.0036e-01  +1.6348e+00  1.13e+00  1.08e-02  1.49e+00  9.54e-06  1.49e-01  6.50e-01  
  5  +4.9982e-01  +8.1491e-01  3.15e-01  2.93e-03  4.09e-01  7.54e-06  2.73e-02  8.67e-01  
  6  +4.8304e-01  +9.6160e-01  4.79e-01  3.94e-04  5.67e-02  2.94e-04  1.02e-03  9.82e-01  
  7  +4.6357e-01  +8.5502e-01  3.91e-01  1.95e-04  2.80e-02  3.63e-04  5.09e-04  5.53e-01  
  8  +4.3408e-01  +7.0979e-01  2.76e-01  1.10e-04  1.57e-02  2.29e-04  3.05e-04  5.02e-01  
  9  +3.7834e-01  +4.5848e-01  8.01e-02  2.95e-05  4.15e-03  7.99e-06  9.51e-05  7.94e-01  
 10  +3.4972e-01  +3.5451e-01  4.79e-03  1.74e-06  2.44e-04  3.44e-07  6.41e-06  9.90e-01  
 11  +3.4772e-01  +3.4777e-01  4.88e-05  1.77e-08  2.49e-06  3.44e-09  6.62e-08  9.90e-01  
 12  +3.4770e-01  +3.4770e-01  4.88e-07  1.77e-10  2.49e-08  3.44e-11  6.62e-10  9.90e-01  
 13  +3.4770e-01  +3.4770e-01  4.88e-09  1.77e-12  2.49e-10  3.44e-13  6.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.5371ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:00 PM: Optimal value: 3.477e-01
(CVXPY) Sep 20 03:08:00 PM: Compilation took 8.898e-03 seconds
(CVXPY) Sep 20 03:08:00 PM: Solver (including time spent in interface) took 2.712e-02 seconds
Iteration: 2, Objective: 0.3477
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:00 PM: Your problem has 2524 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:00 PM: Finished problem compilation (took 8.517e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2524
  constraints   = 5024
  nnz(P)        = 0
  nnz(A)        = 25683
  cones (total) = 1
    : Nonnegative = 1,  numel = 5024

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5012e+03  2.50e+03  9.78e-01  6.98e+01  1.00e+00  1.00e+00   ------   
  1  +5.9916e-01  +5.0144e+02  5.01e+02  3.62e-01  4.07e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4551e-01  +7.0951e+01  7.04e+01  1.40e-01  1.96e+01  9.92e-03  2.33e-01  7.85e-01  
  3  +5.0949e-01  +1.5824e+01  1.53e+01  9.76e-02  1.33e+01  2.20e-05  2.28e-01  1.16e-01  
  4  +5.0041e-01  +1.7146e+00  1.21e+00  1.16e-02  1.60e+00  9.62e-06  1.52e-01  6.20e-01  
  5  +4.9994e-01  +9.3626e-01  4.36e-01  4.09e-03  5.73e-01  7.01e-06  4.27e-02  7.35e-01  
  6  +4.8793e-01  +1.7208e+00  1.23e+00  1.28e-03  1.85e-01  2.19e-04  3.30e-03  9.90e-01  
  7  +4.6190e-01  +1.1822e+00  7.20e-01  3.15e-04  4.55e-02  3.50e-04  8.15e-04  7.75e-01  
  8  +4.4516e-01  +9.7487e-01  5.30e-01  2.04e-04  2.93e-02  2.22e-04  5.42e-04  4.45e-01  
  9  +4.0471e-01  +5.9001e-01  1.85e-01  6.88e-05  9.79e-03  2.07e-06  2.04e-04  8.71e-01  
 10  +3.6079e-01  +3.9600e-01  3.52e-02  1.29e-05  1.81e-03  1.87e-06  4.46e-05  8.59e-01  
 11  +3.4862e-01  +3.5092e-01  2.30e-03  8.36e-07  1.18e-04  2.60e-07  3.10e-06  9.90e-01  
 12  +3.4771e-01  +3.4773e-01  2.32e-05  8.45e-09  1.19e-06  2.62e-09  3.15e-08  9.90e-01  
 13  +3.4770e-01  +3.4770e-01  2.32e-07  8.45e-11  1.19e-08  2.62e-11  3.15e-10  9.90e-01  
 14  +3.4770e-01  +3.4770e-01  2.32e-09  8.45e-13  1.19e-10  2.62e-13  3.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.5371ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:00 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:00 PM: Optimal value: 3.477e-01
(CVXPY) Sep 20 03:08:00 PM: Compilation took 8.517e-03 seconds
(CVXPY) Sep 20 03:08:00 PM: Solver (including time spent in interface) took 2.666e-02 seconds
FULL MODEL:
  Accruacy: 0.6524
  Our objective: 0.30479999999999996

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3048)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5880563259124756
Best over terms:
  Our final objective: 0.30479999999999996
    Its accruacy: 0.6524
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.30479999999999996
  Highest accruacy: 0.6524
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

