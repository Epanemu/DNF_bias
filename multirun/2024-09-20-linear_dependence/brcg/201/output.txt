Command:
python test_script.py -s linear_dependence -d 6 -n 10 --seed 56 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 6.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:30 PM: Your problem has 18 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:30 PM: Finished problem compilation (took 4.133e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 18
  constraints   = 23
  nnz(P)        = 0
  nnz(A)        = 58
  cones (total) = 1
    : Nonnegative = 1,  numel = 23

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6299e-01  +6.1629e+00  5.70e+00  7.38e-01  2.48e+00  1.00e+00  1.30e+00   ------   
  1  +4.7960e-01  +1.2881e+00  8.09e-01  2.62e-01  1.10e+00  3.72e-03  5.99e-01  7.13e-01  
  2  +3.1127e-01  +5.4511e-01  2.34e-01  7.32e-02  3.38e-01  8.48e-03  2.35e-01  6.96e-01  
  3  +2.2158e-01  +2.8579e-01  6.42e-02  1.53e-02  7.88e-02  3.83e-03  6.51e-02  8.74e-01  
  4  +2.0082e-01  +2.0269e-01  1.87e-03  4.58e-04  2.34e-03  9.87e-05  2.13e-03  9.68e-01  
  5  +2.0021e-01  +2.0022e-01  1.86e-05  4.58e-06  2.34e-05  9.86e-07  2.13e-05  9.90e-01  
  6  +2.0020e-01  +2.0020e-01  1.86e-07  4.58e-08  2.34e-07  9.86e-09  2.13e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  1.86e-09  4.58e-10  2.34e-09  9.86e-11  2.13e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 114.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:30 PM: Optimal value: 2.002e-01
(CVXPY) Sep 20 03:08:30 PM: Compilation took 4.133e-03 seconds
(CVXPY) Sep 20 03:08:30 PM: Solver (including time spent in interface) took 5.028e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:30 PM: Your problem has 28 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:30 PM: Finished problem compilation (took 1.628e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 28
  constraints   = 33
  nnz(P)        = 0
  nnz(A)        = 82
  cones (total) = 1
    : Nonnegative = 1,  numel = 33

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.9032e-01  +6.3720e+00  5.98e+00  7.78e-01  2.48e+00  1.00e+00  1.33e+00   ------   
  1  +2.4616e-01  +1.1596e+00  9.13e-01  2.86e-01  1.03e+00  4.18e-03  5.82e-01  6.92e-01  
  2  +1.0757e-01  +2.0614e-01  9.86e-02  3.35e-02  1.38e-01  9.20e-03  1.00e-01  9.41e-01  
  3  +1.0124e-01  +1.0523e-01  3.98e-03  1.38e-03  5.67e-03  4.01e-04  4.41e-03  9.58e-01  
  4  +1.0035e-01  +1.0080e-01  4.53e-04  1.65e-04  6.65e-04  3.91e-05  5.28e-04  8.83e-01  
  5  +1.0022e-01  +1.0029e-01  6.85e-05  2.84e-05  1.08e-04  1.93e-06  1.03e-04  9.90e-01  
  6  +1.0020e-01  +1.0020e-01  1.39e-06  6.04e-07  2.26e-06  2.37e-08  2.33e-06  9.79e-01  
  7  +1.0020e-01  +1.0020e-01  1.39e-08  6.03e-09  2.26e-08  2.37e-10  2.34e-08  9.90e-01  
  8  +1.0020e-01  +1.0020e-01  1.39e-10  6.04e-11  2.26e-10  2.37e-12  2.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 113.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:30 PM: Optimal value: 1.002e-01
(CVXPY) Sep 20 03:08:30 PM: Compilation took 1.628e-03 seconds
(CVXPY) Sep 20 03:08:30 PM: Solver (including time spent in interface) took 2.391e-03 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:08:30 PM: Your problem has 31 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 03:08:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:08:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:08:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:08:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:08:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:08:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:08:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:08:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:08:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:08:30 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 31
  constraints   = 36
  nnz(P)        = 0
  nnz(A)        = 90
  cones (total) = 1
    : Nonnegative = 1,  numel = 36

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.6627e-01  +6.3740e+00  6.01e+00  7.85e-01  2.49e+00  1.00e+00  1.31e+00   ------   
  1  +1.7822e-01  +1.1054e+00  9.27e-01  2.92e-01  1.04e+00  4.19e-03  5.78e-01  6.88e-01  
  2  +3.5596e-02  +1.7759e-01  1.42e-01  4.80e-02  1.95e-01  8.80e-03  1.37e-01  8.61e-01  
  3  +1.7626e-03  +8.2192e-03  6.46e-03  2.04e-03  8.51e-03  5.26e-04  6.61e-03  9.90e-01  
  4  +3.2754e-04  +4.6015e-04  1.33e-04  4.46e-05  1.84e-04  5.24e-06  1.46e-04  9.78e-01  
  5  +2.9901e-04  +3.1325e-04  1.42e-05  5.34e-06  2.07e-05  6.34e-07  1.89e-05  8.77e-01  
  6  +2.9999e-04  +3.0016e-04  1.75e-07  6.61e-08  2.55e-07  7.98e-09  2.34e-07  9.88e-01  
  7  +3.0000e-04  +3.0000e-04  1.75e-09  6.61e-10  2.55e-09  7.97e-11  2.34e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:08:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:08:30 PM: Optimal value: 3.000e-04
(CVXPY) Sep 20 03:08:30 PM: Compilation took 3.000e-03 seconds
(CVXPY) Sep 20 03:08:30 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x1 = 0 AND x5 = 1)            <-- (term's our objective: 0.4)
 OR (x1 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.4)
 OR (x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8728983402252197
Best over terms:
  Our final objective: 0.4
    Its accruacy: 0.7
    Its hamming distance: 5
  Shortest hamming distance: 3
    Its our objective: 0.4
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

