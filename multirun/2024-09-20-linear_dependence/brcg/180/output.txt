Command:
python test_script.py -s linear_dependence -d 5 -n 1000 --seed 43 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29600000000000004
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.304
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:39 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:39 PM: Finished problem compilation (took 4.943e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +5.0094e+02  5.00e+02  9.52e-01  2.87e+01  1.00e+00  1.00e+00   ------   
  1  +5.9901e-01  +1.0058e+02  1.00e+02  3.51e-01  1.66e+01  3.99e-03  5.04e-01  6.46e-01  
  2  +5.4417e-01  +1.4307e+01  1.38e+01  1.25e-01  7.30e+00  1.00e-02  2.28e-01  7.99e-01  
  3  +5.0245e-01  +2.1174e+00  1.61e+00  3.30e-02  1.85e+00  2.55e-05  2.07e-01  4.11e-01  
  4  +4.9994e-01  +8.2550e-01  3.26e-01  6.70e-03  3.89e-01  1.25e-05  4.85e-02  8.51e-01  
  5  +4.7709e-01  +1.0407e+00  5.64e-01  1.60e-03  9.57e-02  2.19e-04  4.47e-03  9.48e-01  
  6  +4.4487e-01  +6.9435e-01  2.49e-01  6.16e-04  3.65e-02  7.25e-05  1.96e-03  6.67e-01  
  7  +4.1482e-01  +5.0713e-01  9.23e-02  2.18e-04  1.28e-02  3.73e-05  8.47e-04  9.90e-01  
  8  +3.9187e-01  +4.0116e-01  9.29e-03  2.02e-05  1.18e-03  2.26e-06  9.14e-05  9.16e-01  
  9  +3.8914e-01  +3.8926e-01  1.22e-04  2.64e-07  1.54e-05  2.85e-08  1.22e-06  9.87e-01  
 10  +3.8910e-01  +3.8910e-01  1.22e-06  2.64e-09  1.54e-07  2.85e-10  1.22e-08  9.90e-01  
 11  +3.8910e-01  +3.8910e-01  1.22e-08  2.64e-11  1.54e-09  2.85e-12  1.22e-10  9.90e-01  
 12  +3.8910e-01  +3.8910e-01  1.22e-10  2.64e-13  1.54e-11  2.85e-14  1.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.0941ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:39 PM: Optimal value: 3.891e-01
(CVXPY) Sep 20 03:07:39 PM: Compilation took 4.943e-03 seconds
(CVXPY) Sep 20 03:07:39 PM: Solver (including time spent in interface) took 4.267e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:39 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:39 PM: Finished problem compilation (took 4.375e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 4950
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0101e+02  5.01e+02  9.53e-01  3.02e+01  1.00e+00  1.00e+00   ------   
  1  +5.9730e-01  +1.0076e+02  1.00e+02  3.53e-01  1.74e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4221e-01  +1.3877e+01  1.33e+01  1.21e-01  7.39e+00  1.03e-02  2.22e-01  8.18e-01  
  3  +5.0145e-01  +1.9441e+00  1.44e+00  2.96e-02  1.75e+00  7.67e-05  1.93e-01  5.39e-01  
  4  +4.9956e-01  +1.0151e+00  5.16e-01  1.02e-02  6.24e-01  4.78e-05  5.77e-02  7.77e-01  
  5  +4.7174e-01  +1.2210e+00  7.49e-01  2.21e-03  1.40e-01  5.51e-04  5.97e-03  9.54e-01  
  6  +4.5271e-01  +9.7015e-01  5.17e-01  1.23e-03  7.75e-02  4.20e-04  3.37e-03  4.83e-01  
  7  +4.3700e-01  +8.7746e-01  4.40e-01  8.04e-04  5.06e-02  4.20e-04  2.21e-03  4.12e-01  
  8  +4.2637e-01  +7.1395e-01  2.88e-01  5.99e-04  3.74e-02  1.50e-04  1.74e-03  5.36e-01  
  9  +3.8806e-01  +5.1081e-01  1.23e-01  2.16e-04  1.34e-02  7.06e-05  6.77e-04  6.90e-01  
 10  +3.5703e-01  +3.6990e-01  1.29e-02  2.28e-05  1.40e-03  4.52e-06  8.08e-05  9.11e-01  
 11  +3.5300e-01  +3.5520e-01  2.20e-03  3.88e-06  2.38e-04  1.31e-06  1.44e-05  9.69e-01  
 12  +3.5211e-01  +3.5214e-01  2.56e-05  4.52e-08  2.78e-06  1.51e-08  1.69e-07  9.88e-01  
 13  +3.5210e-01  +3.5210e-01  2.56e-07  4.52e-10  2.78e-08  1.51e-10  1.69e-09  9.90e-01  
 14  +3.5210e-01  +3.5210e-01  2.56e-09  4.52e-12  2.78e-10  1.51e-12  1.69e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9015ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:39 PM: Optimal value: 3.521e-01
(CVXPY) Sep 20 03:07:39 PM: Compilation took 4.375e-03 seconds
(CVXPY) Sep 20 03:07:39 PM: Solver (including time spent in interface) took 4.115e-03 seconds
Iteration: 2, Objective: 0.3521
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:39 PM: Your problem has 524 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:39 PM: Finished problem compilation (took 4.693e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 524
  constraints   = 1024
  nnz(P)        = 0
  nnz(A)        = 5044
  cones (total) = 1
    : Nonnegative = 1,  numel = 1024

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0103e+02  5.01e+02  9.53e-01  3.02e+01  1.00e+00  1.01e+00   ------   
  1  +5.9693e-01  +1.0078e+02  1.00e+02  3.54e-01  1.74e+01  3.99e-03  5.06e-01  6.44e-01  
  2  +5.4193e-01  +1.3817e+01  1.33e+01  1.21e-01  7.32e+00  1.03e-02  2.21e-01  8.21e-01  
  3  +5.0114e-01  +1.8762e+00  1.38e+00  2.83e-02  1.67e+00  5.54e-05  1.89e-01  5.81e-01  
  4  +4.9948e-01  +1.1588e+00  6.59e-01  1.30e-02  7.88e-01  4.29e-05  7.06e-02  6.91e-01  
  5  +4.7026e-01  +1.4501e+00  9.80e-01  2.90e-03  1.83e-01  4.48e-04  7.75e-03  9.90e-01  
  6  +4.4838e-01  +1.1436e+00  6.95e-01  1.57e-03  9.93e-02  3.77e-04  4.31e-03  4.62e-01  
  7  +4.1904e-01  +7.1324e-01  2.94e-01  5.80e-04  3.62e-02  1.48e-04  1.68e-03  8.15e-01  
  8  +4.0640e-01  +6.1182e-01  2.05e-01  4.38e-04  2.72e-02  9.25e-05  1.37e-03  4.87e-01  
  9  +3.7238e-01  +4.5653e-01  8.42e-02  1.58e-04  9.72e-03  4.06e-05  5.31e-04  6.67e-01  
 10  +3.6420e-01  +4.1850e-01  5.43e-02  1.01e-04  6.24e-03  2.68e-05  3.57e-04  3.83e-01  
 11  +3.6398e-01  +4.1576e-01  5.18e-02  9.71e-05  5.97e-03  2.70e-05  3.43e-04  1.99e-01  
 12  +3.5850e-01  +3.9088e-01  3.24e-02  6.06e-05  3.72e-03  1.78e-05  2.22e-04  4.94e-01  
 13  +3.5545e-01  +3.7508e-01  1.96e-02  3.67e-05  2.25e-03  1.24e-05  1.37e-04  9.90e-01  
 14  +3.4870e-01  +3.4999e-01  1.29e-03  2.43e-06  1.49e-04  7.72e-07  9.58e-06  9.72e-01  
 15  +3.4821e-01  +3.4822e-01  1.39e-05  2.61e-08  1.60e-06  8.22e-09  1.04e-07  9.90e-01  
 16  +3.4820e-01  +3.4820e-01  1.39e-07  2.61e-10  1.60e-08  8.22e-11  1.04e-09  9.90e-01  
 17  +3.4820e-01  +3.4820e-01  1.39e-09  2.61e-12  1.60e-10  8.22e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4878ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:39 PM: Optimal value: 3.482e-01
(CVXPY) Sep 20 03:07:39 PM: Compilation took 4.693e-03 seconds
(CVXPY) Sep 20 03:07:39 PM: Solver (including time spent in interface) took 5.030e-03 seconds
Iteration: 3, Objective: 0.3482
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:39 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:39 PM: Finished problem compilation (took 4.531e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 5062
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0105e+02  5.01e+02  9.53e-01  3.02e+01  1.00e+00  1.01e+00   ------   
  1  +5.9669e-01  +1.0084e+02  1.00e+02  3.54e-01  1.74e+01  3.99e-03  5.06e-01  6.44e-01  
  2  +5.4183e-01  +1.3801e+01  1.33e+01  1.21e-01  7.32e+00  1.03e-02  2.21e-01  8.22e-01  
  3  +5.0110e-01  +1.8688e+00  1.37e+00  2.81e-02  1.66e+00  4.38e-05  1.89e-01  5.87e-01  
  4  +4.9958e-01  +1.2229e+00  7.23e-01  1.43e-02  8.67e-01  3.54e-05  7.90e-02  6.33e-01  
  5  +4.7851e-01  +1.4435e+00  9.65e-01  3.78e-03  2.39e-01  2.80e-04  1.02e-02  9.90e-01  
  6  +4.5296e-01  +1.0883e+00  6.35e-01  1.56e-03  9.82e-02  2.84e-04  4.26e-03  6.04e-01  
  7  +4.2699e-01  +7.8212e-01  3.55e-01  7.30e-04  4.57e-02  1.66e-04  2.09e-03  6.85e-01  
  8  +3.9964e-01  +5.7496e-01  1.75e-01  3.52e-04  2.18e-02  9.45e-05  1.10e-03  9.90e-01  
  9  +3.6458e-01  +4.1377e-01  4.92e-02  9.50e-05  5.84e-03  1.95e-05  3.36e-04  7.20e-01  
 10  +3.6203e-01  +4.0358e-01  4.16e-02  7.84e-05  4.82e-03  1.77e-05  2.80e-04  2.53e-01  
 11  +3.5592e-01  +3.7690e-01  2.10e-02  3.95e-05  2.42e-03  1.30e-05  1.47e-04  9.90e-01  
 12  +3.4891e-01  +3.5082e-01  1.91e-03  3.59e-06  2.20e-04  1.08e-06  1.42e-05  9.63e-01  
 13  +3.4821e-01  +3.4823e-01  2.15e-05  4.04e-08  2.48e-06  1.20e-08  1.61e-07  9.90e-01  
 14  +3.4820e-01  +3.4820e-01  2.15e-07  4.04e-10  2.47e-08  1.20e-10  1.61e-09  9.90e-01  
 15  +3.4820e-01  +3.4820e-01  2.15e-09  4.04e-12  2.47e-10  1.20e-12  1.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0166ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:39 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:39 PM: Optimal value: 3.482e-01
(CVXPY) Sep 20 03:07:39 PM: Compilation took 4.531e-03 seconds
(CVXPY) Sep 20 03:07:39 PM: Solver (including time spent in interface) took 4.452e-03 seconds
FULL MODEL:
  Accruacy: 0.652
  Our objective: 0.30399999999999994

IF 
    (x0 = 0 AND x1 = 0)                       <-- (term's our objective: 0.296)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.6986720561981201
Best over terms:
  Our final objective: 0.29600000000000004
    Its accruacy: 0.648
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29600000000000004
  Highest accruacy: 0.648
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

