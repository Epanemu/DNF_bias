Command:
python test_script.py -s linear_dependence -d 2 -n 50 --seed 73 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5599999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 2.

Computed total variation: 0.56
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:30 PM: Your problem has 30 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:30 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 55
  nnz(P)        = 0
  nnz(A)        = 130
  cones (total) = 1
    : Nonnegative = 1,  numel = 55

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6953e-01  +2.6851e+01  2.64e+01  8.05e-01  4.73e+00  1.00e+00  1.15e+00   ------   
  1  +5.8986e-01  +4.7777e+00  4.19e+00  2.15e-01  2.02e+00  4.37e-03  4.34e-01  7.45e-01  
  2  +4.0824e-01  +1.3515e+00  9.43e-01  4.88e-02  5.04e-01  7.49e-03  1.33e-01  7.65e-01  
  3  +2.8046e-01  +5.8063e-01  3.00e-01  1.55e-02  1.52e-01  1.06e-03  6.01e-02  6.09e-01  
  4  +2.2470e-01  +2.5280e-01  2.81e-02  1.57e-03  1.48e-02  2.49e-04  9.96e-03  9.35e-01  
  5  +2.2016e-01  +2.2052e-01  3.57e-04  2.00e-05  1.88e-04  2.35e-06  1.34e-04  9.87e-01  
  6  +2.2010e-01  +2.2010e-01  3.57e-06  2.00e-07  1.88e-06  2.35e-08  1.34e-06  9.90e-01  
  7  +2.2010e-01  +2.2010e-01  3.57e-08  2.00e-09  1.88e-08  2.35e-10  1.34e-08  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  3.57e-10  2.00e-11  1.88e-10  2.35e-12  1.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 171.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:30 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 03:03:30 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:30 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:30 PM: Your problem has 31 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:30 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 31
  constraints   = 56
  nnz(P)        = 0
  nnz(A)        = 142
  cones (total) = 1
    : Nonnegative = 1,  numel = 56

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6928e-01  +2.6838e+01  2.64e+01  8.07e-01  4.89e+00  1.00e+00  1.15e+00   ------   
  1  +5.8544e-01  +4.8117e+00  4.23e+00  2.21e-01  2.11e+00  4.33e-03  4.42e-01  7.41e-01  
  2  +4.1726e-01  +1.5513e+00  1.13e+00  5.83e-02  6.18e-01  7.26e-03  1.54e-01  7.13e-01  
  3  +2.8530e-01  +6.7126e-01  3.86e-01  1.94e-02  1.98e-01  1.82e-03  7.02e-02  6.10e-01  
  4  +2.2501e-01  +2.5907e-01  3.41e-02  1.91e-03  1.86e-02  3.58e-04  1.19e-02  9.27e-01  
  5  +2.2019e-01  +2.2072e-01  5.29e-04  2.98e-05  2.90e-04  4.05e-06  2.02e-04  9.84e-01  
  6  +2.2010e-01  +2.2011e-01  5.28e-06  2.98e-07  2.90e-06  4.04e-08  2.02e-06  9.90e-01  
  7  +2.2010e-01  +2.2010e-01  5.28e-08  2.98e-09  2.90e-08  4.04e-10  2.02e-08  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  5.28e-10  2.98e-11  2.90e-10  4.04e-12  2.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:30 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 03:03:30 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:30 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:30 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:30 PM: Finished problem compilation (took 3.903e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 153
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6374e-01  +2.6991e+01  2.65e+01  8.12e-01  5.03e+00  1.00e+00  1.17e+00   ------   
  1  +5.6646e-01  +4.8836e+00  4.32e+00  2.33e-01  2.24e+00  4.20e-03  4.72e-01  7.32e-01  
  2  +3.9186e-01  +1.4945e+00  1.10e+00  5.61e-02  6.03e-01  8.85e-03  1.53e-01  7.59e-01  
  3  +2.8557e-01  +7.0833e-01  4.23e-01  2.18e-02  2.26e-01  2.71e-03  7.82e-02  5.46e-01  
  4  +2.2557e-01  +2.6223e-01  3.67e-02  2.15e-03  2.11e-02  3.59e-04  1.27e-02  9.14e-01  
  5  +2.2024e-01  +2.2100e-01  7.65e-04  4.51e-05  4.43e-04  6.98e-06  2.95e-04  9.78e-01  
  6  +2.2011e-01  +2.2014e-01  2.97e-05  1.72e-06  1.69e-05  1.92e-07  1.19e-05  9.69e-01  
  7  +2.2010e-01  +2.2010e-01  2.97e-07  1.71e-08  1.69e-07  1.92e-09  1.19e-07  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  2.97e-09  1.71e-10  1.69e-09  1.92e-11  1.19e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 116.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:30 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:30 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 03:03:30 PM: Compilation took 3.903e-03 seconds
(CVXPY) Sep 20 03:03:30 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.78
  Our objective: 0.5599999999999999

IF 
    (x0 = 0) <-- (term's our objective: 0.56)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8052377700805664
Best over terms:
  Our final objective: 0.5599999999999999
    Its accruacy: 0.78
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5599999999999999
  Highest accruacy: 0.78
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

