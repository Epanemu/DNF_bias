Command:
python test_script.py -s linear_dependence -d 2 -n 50000 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.59948
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 2.

Computed total variation: 0.59948
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:10 PM: Your problem has 25005 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:10 PM: Finished problem compilation (took 4.319e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25005
  constraints   = 50005
  nnz(P)        = 0
  nnz(A)        = 125005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5002e+04  2.50e+04  9.92e-01  1.64e+02  1.00e+00  1.00e+00   ------   
  1  +6.3754e-01  +4.3679e+03  4.37e+03  2.69e-01  7.76e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5916e-01  +8.1473e+02  8.14e+02  1.36e-01  4.53e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0594e-01  +8.4886e+01  8.44e+01  1.10e-01  3.62e+01  5.52e-06  2.14e-01  5.79e-02  
  4  +5.0015e-01  +5.7575e+00  5.26e+00  1.55e-02  4.98e+00  2.47e-06  1.91e-01  3.19e-01  
  5  +4.9967e-01  +2.2302e+00  1.73e+00  4.57e-03  1.53e+00  4.38e-06  2.27e-02  9.90e-01  
  6  +4.8398e-01  +2.4046e+00  1.92e+00  3.55e-04  1.29e-01  1.48e-04  7.29e-04  9.77e-01  
  7  +4.0513e-01  +1.7186e+00  1.31e+00  5.30e-05  1.91e-02  5.89e-04  1.09e-04  8.52e-01  
  8  +2.8837e-01  +8.1755e-01  5.29e-01  3.17e-05  1.07e-02  2.77e-06  9.36e-05  3.01e-01  
  9  +2.1563e-01  +2.9939e-01  8.38e-02  5.20e-06  1.71e-03  1.63e-08  2.52e-05  8.13e-01  
 10  +2.0093e-01  +2.0415e-01  3.22e-03  2.01e-07  6.59e-05  5.10e-09  1.25e-06  9.63e-01  
 11  +2.0037e-01  +2.0040e-01  3.22e-05  2.01e-09  6.59e-07  5.11e-11  1.27e-08  9.90e-01  
 12  +2.0036e-01  +2.0036e-01  3.22e-07  2.01e-11  6.59e-09  5.11e-13  1.27e-10  9.90e-01  
 13  +2.0036e-01  +2.0036e-01  3.22e-09  2.01e-13  6.59e-11  5.13e-15  1.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.0104ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:10 PM: Optimal value: 2.004e-01
(CVXPY) Sep 20 03:04:10 PM: Compilation took 4.319e-02 seconds
(CVXPY) Sep 20 03:04:10 PM: Solver (including time spent in interface) took 1.702e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.2004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:10 PM: Your problem has 25006 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:10 PM: Finished problem compilation (took 4.333e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25006
  constraints   = 50006
  nnz(P)        = 0
  nnz(A)        = 134922
  cones (total) = 1
    : Nonnegative = 1,  numel = 50006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5002e+04  2.50e+04  9.92e-01  1.70e+02  1.00e+00  1.00e+00   ------   
  1  +6.3752e-01  +4.3684e+03  4.37e+03  2.69e-01  8.04e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5915e-01  +8.1467e+02  8.14e+02  1.36e-01  4.69e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0595e-01  +8.4939e+01  8.44e+01  1.10e-01  3.75e+01  5.52e-06  2.14e-01  5.79e-02  
  4  +5.0015e-01  +5.7385e+00  5.24e+00  1.54e-02  5.13e+00  2.47e-06  1.91e-01  3.20e-01  
  5  +4.9966e-01  +2.2212e+00  1.72e+00  4.54e-03  1.57e+00  4.42e-06  2.24e-02  9.90e-01  
  6  +4.8416e-01  +2.3726e+00  1.89e+00  3.54e-04  1.33e-01  1.46e-04  7.28e-04  9.76e-01  
  7  +4.4302e-01  +2.0232e+00  1.58e+00  1.02e-04  3.83e-02  3.79e-04  2.11e-04  7.12e-01  
  8  +3.4740e-01  +1.3070e+00  9.60e-01  4.53e-05  1.65e-02  1.72e-04  1.03e-04  6.75e-01  
  9  +2.4092e-01  +4.9727e-01  2.56e-01  1.60e-05  5.50e-03  7.45e-07  6.37e-05  6.05e-01  
 10  +2.0364e-01  +2.2056e-01  1.69e-02  1.05e-06  3.58e-04  5.16e-09  6.07e-06  9.35e-01  
 11  +2.0039e-01  +2.0058e-01  1.86e-04  1.16e-08  3.94e-06  1.51e-10  7.34e-08  9.89e-01  
 12  +2.0036e-01  +2.0036e-01  1.86e-06  1.16e-10  3.94e-08  1.51e-12  7.34e-10  9.90e-01  
 13  +2.0036e-01  +2.0036e-01  1.86e-08  1.16e-12  3.94e-10  1.51e-14  7.34e-12  9.90e-01  
 14  +2.0036e-01  +2.0036e-01  1.86e-10  1.15e-14  3.94e-12  1.51e-16  7.35e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 186.7287ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:10 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:10 PM: Optimal value: 2.004e-01
(CVXPY) Sep 20 03:04:10 PM: Compilation took 4.333e-02 seconds
(CVXPY) Sep 20 03:04:10 PM: Solver (including time spent in interface) took 2.038e-01 seconds
Iteration: 2, Objective: 0.2004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:04:10 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:04:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:04:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:04:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:04:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:04:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:04:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:04:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:04:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:04:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:04:10 PM: Finished problem compilation (took 5.412e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 144942
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5002e+04  2.50e+04  9.92e-01  1.76e+02  1.00e+00  1.00e+00   ------   
  1  +6.2736e-01  +4.5079e+03  4.51e+03  2.91e-01  8.78e+01  4.35e-03  4.15e-01  7.09e-01  
  2  +5.5859e-01  +8.1762e+02  8.17e+02  1.38e-01  4.89e+01  5.99e-03  2.18e-01  6.27e-01  
  3  +5.0802e-01  +1.1468e+02  1.14e+02  1.19e-01  4.19e+01  8.43e-06  2.16e-01  5.22e-02  
  4  +5.0001e-01  +3.6950e+00  3.19e+00  9.48e-03  3.29e+00  2.78e-06  1.78e-01  5.71e-01  
  5  +4.9369e-01  +6.4309e+00  5.94e+00  3.96e-03  1.51e+00  7.60e-05  8.90e-03  9.90e-01  
  6  +4.3339e-01  +4.3278e+00  3.89e+00  2.82e-04  1.08e-01  6.75e-04  5.91e-04  9.34e-01  
  7  +3.4428e-01  +1.6042e+00  1.26e+00  5.71e-05  2.17e-02  3.02e-04  1.27e-04  8.31e-01  
  8  +2.2663e-01  +4.2176e-01  1.95e-01  1.18e-05  4.19e-03  2.41e-05  4.84e-05  9.03e-01  
  9  +2.0213e-01  +2.1370e-01  1.16e-02  7.22e-07  2.53e-04  8.18e-07  4.32e-06  9.50e-01  
 10  +2.0038e-01  +2.0050e-01  1.19e-04  7.44e-09  2.61e-06  9.28e-09  4.71e-08  9.89e-01  
 11  +2.0036e-01  +2.0036e-01  1.19e-06  7.44e-11  2.61e-08  9.28e-11  4.71e-10  9.90e-01  
 12  +2.0036e-01  +2.0036e-01  1.19e-08  7.44e-13  2.61e-10  9.28e-13  4.71e-12  9.90e-01  
 13  +2.0036e-01  +2.0036e-01  1.19e-10  7.54e-15  2.61e-12  9.28e-15  4.71e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 167.3449ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:04:11 PM: Problem status: optimal
(CVXPY) Sep 20 03:04:11 PM: Optimal value: 2.004e-01
(CVXPY) Sep 20 03:04:11 PM: Compilation took 5.412e-02 seconds
(CVXPY) Sep 20 03:04:11 PM: Solver (including time spent in interface) took 1.872e-01 seconds
FULL MODEL:
  Accruacy: 0.79974
  Our objective: 0.59948

IF 
    (x0 = 0) <-- (term's our objective: 0.59948)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5597929954528809
Best over terms:
  Our final objective: 0.59948
    Its accruacy: 0.79974
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.59948
  Highest accruacy: 0.79974
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

