Command:
python test_script.py -s linear_dependence -d 3 -n 50000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29972
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 3.

Computed total variation: 0.29972
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:14 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:15 PM: Finished problem compilation (took 5.811e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 150007
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.77e+02  1.00e+00  1.00e+00   ------   
  1  +6.2016e-01  +4.6339e+03  4.63e+03  3.09e-01  9.24e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5597e-01  +7.9392e+02  7.93e+02  1.40e-01  5.00e+01  6.67e-03  2.21e-01  6.61e-01  
  3  +5.1044e-01  +1.4833e+02  1.48e+02  1.26e-01  4.47e+01  1.25e-05  2.20e-01  4.47e-02  
  4  +5.0006e-01  +1.8015e+00  1.30e+00  3.88e-03  1.37e+00  1.21e-06  1.62e-01  9.90e-01  
  5  +4.9999e-01  +7.9026e-01  2.90e-01  8.64e-04  3.07e-01  7.68e-07  3.37e-02  8.30e-01  
  6  +4.9750e-01  +1.2663e+00  7.69e-01  3.64e-04  1.32e-01  6.48e-05  1.02e-03  9.85e-01  
  7  +4.7647e-01  +1.0204e+00  5.44e-01  3.21e-05  1.16e-02  5.03e-04  8.60e-05  9.16e-01  
  8  +4.5133e-01  +7.3238e-01  2.81e-01  1.54e-05  5.53e-03  1.21e-04  4.57e-05  5.87e-01  
  9  +4.1613e-01  +4.8183e-01  6.57e-02  3.39e-06  1.21e-03  1.07e-06  1.20e-05  8.19e-01  
 10  +3.9992e-01  +4.0713e-01  7.21e-03  3.36e-07  1.19e-04  8.69e-08  1.42e-06  9.03e-01  
 11  +3.9751e-01  +3.9761e-01  9.92e-05  4.41e-09  1.57e-06  1.13e-09  1.98e-08  9.87e-01  
 12  +3.9748e-01  +3.9748e-01  9.92e-07  4.41e-11  1.57e-08  1.13e-11  1.98e-10  9.90e-01  
 13  +3.9748e-01  +3.9748e-01  9.94e-09  4.42e-13  1.57e-10  1.28e-13  2.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 203.6772ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:15 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:15 PM: Optimal value: 3.975e-01
(CVXPY) Sep 20 03:05:15 PM: Compilation took 5.811e-02 seconds
(CVXPY) Sep 20 03:05:15 PM: Solver (including time spent in interface) took 2.245e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3975
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:05:15 PM: Your problem has 25012 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 03:05:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:05:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:05:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:05:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:05:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:05:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:05:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:05:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:05:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:05:15 PM: Finished problem compilation (took 7.046e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25012
  constraints   = 50012
  nnz(P)        = 0
  nnz(A)        = 185000
  cones (total) = 1
    : Nonnegative = 1,  numel = 50012

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5003e+04  2.50e+04  9.93e-01  1.91e+02  1.00e+00  1.00e+00   ------   
  1  +6.2008e-01  +4.6358e+03  4.64e+03  3.09e-01  9.98e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5588e-01  +7.9304e+02  7.92e+02  1.40e-01  5.39e+01  6.68e-03  2.21e-01  6.62e-01  
  3  +5.1040e-01  +1.4791e+02  1.47e+02  1.26e-01  4.82e+01  1.25e-05  2.20e-01  4.53e-02  
  4  +5.0019e-01  +3.8451e+00  3.34e+00  9.95e-03  3.75e+00  1.46e-06  1.92e-01  4.65e-01  
  5  +5.0003e-01  +1.4959e+00  9.96e-01  2.97e-03  1.13e+00  9.20e-07  1.18e-01  5.59e-01  
  6  +5.0002e-01  +1.3896e+00  8.90e-01  2.65e-03  1.01e+00  1.00e-06  7.91e-02  3.92e-01  
  7  +4.9993e-01  +1.0987e+00  5.99e-01  1.69e-03  6.47e-01  2.39e-06  1.44e-02  8.77e-01  
  8  +4.9532e-01  +1.0798e+00  5.85e-01  1.30e-04  5.13e-02  9.32e-05  3.31e-04  9.78e-01  
  9  +4.9059e-01  +1.0412e+00  5.51e-01  6.54e-05  2.57e-02  1.60e-04  1.65e-04  5.43e-01  
 10  +4.9032e-01  +1.0234e+00  5.33e-01  5.69e-05  2.24e-02  1.44e-04  1.42e-04  2.80e-01  
 11  +4.8896e-01  +9.9341e-01  5.04e-01  4.42e-05  1.74e-02  1.23e-04  1.10e-04  4.48e-01  
 12  +4.6574e-01  +8.5310e-01  3.87e-01  1.52e-05  5.98e-03  1.93e-04  3.86e-05  7.50e-01  
 13  +4.0593e-01  +5.5417e-01  1.48e-01  5.45e-06  2.11e-03  1.79e-06  1.59e-05  7.39e-01  
 14  +3.5921e-01  +3.8015e-01  2.09e-02  7.67e-07  2.95e-04  7.53e-08  2.67e-06  8.90e-01  
 15  +3.5037e-01  +3.5065e-01  2.81e-04  1.02e-08  3.92e-06  9.76e-10  3.73e-08  9.88e-01  
 16  +3.5024e-01  +3.5024e-01  2.81e-06  1.02e-10  3.92e-08  9.76e-12  3.73e-10  9.90e-01  
 17  +3.5024e-01  +3.5024e-01  2.81e-08  1.02e-12  3.92e-10  9.89e-14  3.78e-12  9.90e-01  
 18  +3.5024e-01  +3.5024e-01  2.81e-10  1.02e-14  3.92e-12  1.00e-15  3.83e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 313.0816ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:05:15 PM: Problem status: optimal
(CVXPY) Sep 20 03:05:15 PM: Optimal value: 3.502e-01
(CVXPY) Sep 20 03:05:15 PM: Compilation took 7.046e-02 seconds
(CVXPY) Sep 20 03:05:15 PM: Solver (including time spent in interface) took 3.379e-01 seconds
FULL MODEL:
  Accruacy: 0.64986
  Our objective: 0.29972

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.29972)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8034508228302002
Best over terms:
  Our final objective: 0.29972
    Its accruacy: 0.64986
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29972
  Highest accruacy: 0.64986
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

