Command:
python test_script.py -s linear_dependence -d 5 -n 50 --seed 73 -m brcg -k 5 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24000000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.56
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:08 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:08 PM: Finished problem compilation (took 3.876e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9140e-01  +2.6094e+01  2.56e+01  8.21e-01  5.86e+00  1.00e+00  1.09e+00   ------   
  1  +5.8542e-01  +5.4313e+00  4.85e+00  3.05e-01  3.12e+00  3.93e-03  5.43e-01  6.51e-01  
  2  +5.0296e-01  +1.0927e+00  5.90e-01  6.10e-02  7.36e-01  1.28e-02  1.70e-01  9.37e-01  
  3  +4.4774e-01  +8.5432e-01  4.07e-01  2.23e-02  2.79e-01  1.23e-02  7.28e-02  6.67e-01  
  4  +3.9792e-01  +4.7731e-01  7.94e-02  4.20e-03  5.17e-02  1.11e-03  1.74e-02  7.98e-01  
  5  +3.8053e-01  +3.8223e-01  1.70e-03  9.22e-05  1.12e-03  1.68e-05  4.33e-04  9.90e-01  
  6  +3.8010e-01  +3.8012e-01  1.70e-05  9.22e-07  1.12e-05  1.67e-07  4.34e-06  9.90e-01  
  7  +3.8010e-01  +3.8010e-01  1.70e-07  9.21e-09  1.12e-07  1.67e-09  4.34e-08  9.90e-01  
  8  +3.8010e-01  +3.8010e-01  1.70e-09  9.21e-11  1.12e-09  1.67e-11  4.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 202.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:08 PM: Optimal value: 3.801e-01
(CVXPY) Sep 20 03:07:08 PM: Compilation took 3.876e-03 seconds
(CVXPY) Sep 20 03:07:08 PM: Solver (including time spent in interface) took 1.089e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:08 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:08 PM: Finished problem compilation (took 2.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 284
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8157e-01  +2.6306e+01  2.58e+01  8.35e-01  6.06e+00  1.00e+00  1.10e+00   ------   
  1  +5.4618e-01  +5.5219e+00  4.98e+00  3.28e-01  3.18e+00  3.91e-03  5.64e-01  6.40e-01  
  2  +4.6462e-01  +1.1810e+00  7.16e-01  6.55e-02  8.19e-01  1.51e-02  1.78e-01  9.24e-01  
  3  +4.1550e-01  +9.2327e-01  5.08e-01  3.30e-02  4.26e-01  1.21e-02  9.69e-02  5.69e-01  
  4  +3.4913e-01  +5.6782e-01  2.19e-01  9.79e-03  1.29e-01  6.61e-03  3.25e-02  6.95e-01  
  5  +2.9816e-01  +3.7655e-01  7.84e-02  2.88e-03  4.23e-02  2.14e-03  1.02e-02  8.12e-01  
  6  +2.6544e-01  +2.7517e-01  9.73e-03  3.45e-04  5.09e-03  8.52e-05  1.31e-03  9.57e-01  
  7  +2.6049e-01  +2.6066e-01  1.69e-04  6.02e-06  8.85e-05  1.14e-06  2.33e-05  9.82e-01  
  8  +2.6040e-01  +2.6040e-01  2.78e-06  1.02e-07  1.47e-06  1.40e-08  3.98e-07  9.83e-01  
  9  +2.6040e-01  +2.6040e-01  2.78e-08  1.02e-09  1.47e-08  1.40e-10  3.98e-09  9.90e-01  
 10  +2.6040e-01  +2.6040e-01  2.78e-10  1.02e-11  1.47e-10  1.40e-12  3.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 249.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:08 PM: Optimal value: 2.604e-01
(CVXPY) Sep 20 03:07:08 PM: Compilation took 2.006e-03 seconds
(CVXPY) Sep 20 03:07:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:08 PM: Your problem has 55 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:08 PM: Finished problem compilation (took 2.034e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 55
  constraints   = 80
  nnz(P)        = 0
  nnz(A)        = 324
  cones (total) = 1
    : Nonnegative = 1,  numel = 80

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7663e-01  +2.6536e+01  2.61e+01  8.44e-01  5.93e+00  1.00e+00  1.11e+00   ------   
  1  +5.1336e-01  +5.5681e+00  5.05e+00  3.38e-01  3.06e+00  3.94e-03  5.70e-01  6.37e-01  
  2  +4.1089e-01  +1.2876e+00  8.77e-01  6.70e-02  8.04e-01  1.59e-02  1.86e-01  8.85e-01  
  3  +3.0558e-01  +6.9090e-01  3.85e-01  1.97e-02  2.43e-01  8.61e-03  6.39e-02  7.75e-01  
  4  +2.5331e-01  +3.6211e-01  1.09e-01  5.31e-03  6.69e-02  2.05e-03  1.94e-02  8.06e-01  
  5  +2.3304e-01  +2.6795e-01  3.49e-02  1.69e-03  2.12e-02  4.25e-04  6.64e-03  8.21e-01  
  6  +2.2097e-01  +2.2253e-01  1.56e-03  7.39e-05  9.38e-04  1.23e-05  3.03e-04  9.64e-01  
  7  +2.2045e-01  +2.2055e-01  1.07e-04  5.15e-06  6.39e-05  5.11e-07  2.25e-05  9.28e-01  
  8  +2.2040e-01  +2.2040e-01  1.90e-06  9.32e-08  1.13e-06  9.03e-09  4.32e-07  9.83e-01  
  9  +2.2040e-01  +2.2040e-01  1.90e-08  9.31e-10  1.13e-08  9.02e-11  4.32e-09  9.90e-01  
 10  +2.2040e-01  +2.2040e-01  1.90e-10  9.31e-12  1.13e-10  9.04e-13  4.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 261.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:08 PM: Optimal value: 2.204e-01
(CVXPY) Sep 20 03:07:08 PM: Compilation took 2.034e-03 seconds
(CVXPY) Sep 20 03:07:08 PM: Solver (including time spent in interface) took 1.049e-03 seconds
Iteration: 3, Objective: 0.2204
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:07:08 PM: Your problem has 62 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:07:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:07:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:07:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:07:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:07:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:07:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:07:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:07:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:07:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:07:08 PM: Finished problem compilation (took 2.985e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 87
  nnz(P)        = 0
  nnz(A)        = 355
  cones (total) = 1
    : Nonnegative = 1,  numel = 87

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7593e-01  +2.6559e+01  2.61e+01  8.51e-01  5.84e+00  1.00e+00  1.11e+00   ------   
  1  +5.0432e-01  +5.5808e+00  5.08e+00  3.46e-01  2.98e+00  3.95e-03  5.70e-01  6.35e-01  
  2  +3.9081e-01  +1.2693e+00  8.79e-01  6.26e-02  7.42e-01  1.66e-02  1.77e-01  8.98e-01  
  3  +3.4520e-01  +9.7024e-01  6.25e-01  3.83e-02  4.59e-01  1.22e-02  1.16e-01  4.09e-01  
  4  +2.7583e-01  +4.8675e-01  2.11e-01  1.20e-02  1.45e-01  1.81e-03  4.00e-02  9.90e-01  
  5  +2.5375e-01  +3.8698e-01  1.33e-01  6.89e-03  8.76e-02  1.26e-03  2.40e-02  4.80e-01  
  6  +2.2833e-01  +2.5574e-01  2.74e-02  1.37e-03  1.73e-02  2.51e-04  5.15e-03  8.22e-01  
  7  +2.2075e-01  +2.2168e-01  9.30e-04  4.64e-05  5.81e-04  6.64e-06  1.81e-04  9.66e-01  
  8  +2.2046e-01  +2.2061e-01  1.50e-04  7.58e-06  9.18e-05  1.08e-06  3.47e-05  9.50e-01  
  9  +2.2040e-01  +2.2041e-01  6.59e-06  3.36e-07  4.01e-06  3.98e-08  1.62e-06  9.55e-01  
 10  +2.2040e-01  +2.2040e-01  6.60e-08  3.36e-09  4.01e-08  3.98e-10  1.63e-08  9.90e-01  
 11  +2.2040e-01  +2.2040e-01  6.60e-10  3.37e-11  4.02e-10  3.98e-12  1.63e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 283.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:07:08 PM: Problem status: optimal
(CVXPY) Sep 20 03:07:08 PM: Optimal value: 2.204e-01
(CVXPY) Sep 20 03:07:08 PM: Compilation took 2.985e-03 seconds
(CVXPY) Sep 20 03:07:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.78
  Our objective: 0.5599999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0)            <-- (term's our objective: 0.24)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x4 = 1)                       <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8689746856689453
Best over terms:
  Our final objective: 0.24000000000000002
    Its accruacy: 0.62
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.24000000000000002
  Highest accruacy: 0.62
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

