Command:
python test_script.py -s linear_dependence -d 2 -n 50 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.5599999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 2.

Computed total variation: 0.5599999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:28 PM: Your problem has 30 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:28 PM: Finished problem compilation (took 4.046e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 55
  nnz(P)        = 0
  nnz(A)        = 130
  cones (total) = 1
    : Nonnegative = 1,  numel = 55

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7727e-01  +2.6623e+01  2.61e+01  8.03e-01  4.65e+00  1.00e+00  1.12e+00   ------   
  1  +5.9596e-01  +4.7471e+00  4.15e+00  2.13e-01  1.97e+00  4.41e-03  4.21e-01  7.46e-01  
  2  +4.4238e-01  +1.1865e+00  7.44e-01  4.12e-02  4.29e-01  7.25e-03  1.08e-01  8.19e-01  
  3  +3.0387e-01  +5.8514e-01  2.81e-01  1.18e-02  1.19e-01  2.07e-03  4.00e-02  6.82e-01  
  4  +2.3006e-01  +2.6820e-01  3.81e-02  1.73e-03  1.66e-02  2.84e-04  8.73e-03  8.60e-01  
  5  +2.2034e-01  +2.2117e-01  8.31e-04  3.81e-05  3.63e-04  4.48e-06  2.15e-04  9.78e-01  
  6  +2.2010e-01  +2.2011e-01  8.28e-06  3.80e-07  3.62e-06  4.47e-08  2.16e-06  9.90e-01  
  7  +2.2010e-01  +2.2010e-01  8.28e-08  3.80e-09  3.62e-08  4.47e-10  2.16e-08  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  8.28e-10  3.80e-11  3.62e-10  4.47e-12  2.16e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 165.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:28 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:28 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 03:03:28 PM: Compilation took 4.046e-03 seconds
(CVXPY) Sep 20 03:03:28 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:28 PM: Your problem has 31 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:28 PM: Finished problem compilation (took 3.408e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 31
  constraints   = 56
  nnz(P)        = 0
  nnz(A)        = 143
  cones (total) = 1
    : Nonnegative = 1,  numel = 56

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7971e-01  +2.6727e+01  2.62e+01  8.03e-01  4.85e+00  1.00e+00  1.12e+00   ------   
  1  +5.9732e-01  +4.7956e+00  4.20e+00  2.18e-01  2.09e+00  4.35e-03  4.28e-01  7.42e-01  
  2  +4.5826e-01  +1.3799e+00  9.22e-01  5.17e-02  5.60e-01  7.09e-03  1.32e-01  7.63e-01  
  3  +3.2102e-01  +7.0450e-01  3.83e-01  1.55e-02  1.67e-01  3.04e-03  4.84e-02  6.65e-01  
  4  +2.4140e-01  +3.2837e-01  8.70e-02  3.87e-03  3.94e-02  7.11e-04  1.74e-02  7.19e-01  
  5  +2.2133e-01  +2.2562e-01  4.29e-03  1.96e-04  1.97e-03  2.59e-05  1.09e-03  9.47e-01  
  6  +2.2011e-01  +2.2016e-01  4.42e-05  2.02e-06  2.03e-05  2.74e-07  1.16e-05  9.89e-01  
  7  +2.2010e-01  +2.2010e-01  4.42e-07  2.02e-08  2.03e-07  2.74e-09  1.16e-07  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  4.42e-09  2.02e-10  2.03e-09  2.74e-11  1.16e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:28 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:28 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 03:03:28 PM: Compilation took 3.408e-03 seconds
(CVXPY) Sep 20 03:03:28 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:28 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:28 PM: Finished problem compilation (took 3.845e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 150
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7281e-01  +2.6884e+01  2.64e+01  8.07e-01  4.90e+00  1.00e+00  1.14e+00   ------   
  1  +5.7379e-01  +4.8456e+00  4.27e+00  2.27e-01  2.16e+00  4.25e-03  4.52e-01  7.36e-01  
  2  +4.0388e-01  +1.0996e+00  6.96e-01  3.62e-02  3.93e-01  7.77e-03  9.87e-02  8.59e-01  
  3  +3.3618e-01  +7.5524e-01  4.19e-01  1.80e-02  1.92e-01  4.86e-03  5.85e-02  4.61e-01  
  4  +2.3860e-01  +3.0607e-01  6.75e-02  3.20e-03  3.23e-02  1.07e-04  1.50e-02  9.30e-01  
  5  +2.2092e-01  +2.2355e-01  2.63e-03  1.25e-04  1.25e-03  5.38e-06  6.92e-04  9.63e-01  
  6  +2.2015e-01  +2.2031e-01  1.59e-04  7.48e-06  7.48e-05  3.35e-07  4.33e-05  9.40e-01  
  7  +2.2010e-01  +2.2010e-01  1.68e-06  7.83e-08  7.84e-07  3.82e-09  4.60e-07  9.90e-01  
  8  +2.2010e-01  +2.2010e-01  1.68e-08  7.83e-10  7.84e-09  3.82e-11  4.60e-09  9.90e-01  
  9  +2.2010e-01  +2.2010e-01  1.68e-10  7.83e-12  7.84e-11  3.83e-13  4.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 122.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:28 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:28 PM: Optimal value: 2.201e-01
(CVXPY) Sep 20 03:03:28 PM: Compilation took 3.845e-03 seconds
(CVXPY) Sep 20 03:03:28 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.78
  Our objective: 0.5599999999999999

IF 
    (x0 = 0) <-- (term's our objective: 0.56)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8178286552429199
Best over terms:
  Our final objective: 0.5599999999999999
    Its accruacy: 0.78
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.5599999999999999
  Highest accruacy: 0.78
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

