Command:
python test_script.py -s linear_dependence -d 2 -n 500 --seed 73 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.588
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 2.

Computed total variation: 0.5880000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:44 PM: Your problem has 255 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:44 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 255
  constraints   = 505
  nnz(P)        = 0
  nnz(A)        = 1255
  cones (total) = 1
    : Nonnegative = 1,  numel = 505

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9636e-01  +2.5233e+02  2.52e+02  9.27e-01  1.59e+01  1.00e+00  1.02e+00   ------   
  1  +6.3113e-01  +4.4061e+01  4.34e+01  2.51e-01  7.37e+00  4.48e-03  3.93e-01  7.28e-01  
  2  +5.3971e-01  +6.3666e+00  5.83e+00  7.74e-02  2.66e+00  6.13e-03  1.51e-01  7.75e-01  
  3  +5.3423e-01  +6.5468e+00  6.01e+00  4.82e-02  1.71e+00  1.15e-02  9.37e-02  4.01e-01  
  4  +5.0952e-01  +5.8411e+00  5.33e+00  3.73e-02  1.33e+00  9.64e-03  7.43e-02  4.00e-01  
  5  +4.5519e-01  +4.5095e+00  4.05e+00  1.42e-02  5.16e-01  1.35e-02  2.89e-02  6.24e-01  
  6  +3.5019e-01  +1.7011e+00  1.35e+00  7.26e-03  2.50e-01  7.23e-05  1.80e-02  6.27e-01  
  7  +2.4886e-01  +5.2345e-01  2.75e-01  1.68e-03  5.40e-02  2.73e-04  6.56e-03  9.51e-01  
  8  +2.0980e-01  +2.3728e-01  2.75e-02  1.76e-04  5.52e-03  4.11e-05  1.18e-03  9.17e-01  
  9  +2.0615e-01  +2.0653e-01  3.77e-04  2.41e-06  7.56e-05  4.14e-07  1.72e-05  9.86e-01  
 10  +2.0610e-01  +2.0610e-01  3.77e-06  2.40e-08  7.55e-07  4.14e-09  1.72e-07  9.90e-01  
 11  +2.0610e-01  +2.0610e-01  3.77e-08  2.40e-10  7.55e-09  4.14e-11  1.72e-09  9.90e-01  
 12  +2.0610e-01  +2.0610e-01  3.77e-10  2.40e-12  7.55e-11  4.14e-13  1.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0922ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:44 PM: Optimal value: 2.061e-01
(CVXPY) Sep 20 03:03:44 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2061
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:44 PM: Your problem has 256 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:44 PM: Finished problem compilation (took 3.740e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 256
  constraints   = 506
  nnz(P)        = 0
  nnz(A)        = 1368
  cones (total) = 1
    : Nonnegative = 1,  numel = 506

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9460e-01  +2.5320e+02  2.53e+02  9.28e-01  1.66e+01  1.00e+00  1.03e+00   ------   
  1  +6.2532e-01  +4.4482e+01  4.39e+01  2.55e-01  7.75e+00  4.45e-03  4.03e-01  7.25e-01  
  2  +5.3611e-01  +5.9743e+00  5.44e+00  7.06e-02  2.54e+00  6.49e-03  1.40e-01  8.16e-01  
  3  +5.3861e-01  +7.1422e+00  6.60e+00  5.32e-02  1.96e+00  1.12e-02  1.03e-01  3.15e-01  
  4  +5.1455e-01  +6.6979e+00  6.18e+00  4.49e-02  1.66e+00  1.01e-02  8.89e-02  3.10e-01  
  5  +4.6657e-01  +4.9836e+00  4.52e+00  2.16e-02  8.10e-01  1.03e-02  4.43e-02  5.15e-01  
  6  +3.5903e-01  +1.4650e+00  1.11e+00  6.86e-03  2.45e-01  1.96e-03  1.73e-02  8.89e-01  
  7  +3.1178e-01  +1.0061e+00  6.94e-01  4.58e-03  1.58e-01  5.70e-04  1.35e-02  4.12e-01  
  8  +2.3598e-01  +4.3217e-01  1.96e-01  1.21e-03  4.01e-02  7.61e-06  5.16e-03  7.13e-01  
  9  +2.0818e-01  +2.2665e-01  1.85e-02  1.19e-04  3.87e-03  1.22e-05  8.20e-04  9.90e-01  
 10  +2.0613e-01  +2.0635e-01  2.27e-04  1.46e-06  4.75e-05  1.30e-07  1.05e-05  9.87e-01  
 11  +2.0610e-01  +2.0610e-01  2.27e-06  1.46e-08  4.75e-07  1.30e-09  1.05e-07  9.90e-01  
 12  +2.0610e-01  +2.0610e-01  2.27e-08  1.46e-10  4.75e-09  1.30e-11  1.05e-09  9.90e-01  
 13  +2.0610e-01  +2.0610e-01  2.27e-10  1.46e-12  4.75e-11  1.30e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 972.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:44 PM: Optimal value: 2.061e-01
(CVXPY) Sep 20 03:03:44 PM: Compilation took 3.740e-03 seconds
(CVXPY) Sep 20 03:03:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2061
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 03:03:44 PM: Your problem has 257 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 03:03:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 03:03:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 03:03:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 03:03:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 03:03:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 03:03:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 03:03:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 03:03:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 03:03:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 03:03:44 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 257
  constraints   = 507
  nnz(P)        = 0
  nnz(A)        = 1465
  cones (total) = 1
    : Nonnegative = 1,  numel = 507

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9529e-01  +2.5313e+02  2.53e+02  9.28e-01  1.71e+01  1.00e+00  1.02e+00   ------   
  1  +6.1871e-01  +4.5465e+01  4.48e+01  2.71e-01  8.35e+00  4.33e-03  4.22e-01  7.13e-01  
  2  +5.3799e-01  +6.2703e+00  5.73e+00  7.51e-02  2.78e+00  6.90e-03  1.48e-01  8.18e-01  
  3  +5.3872e-01  +7.1213e+00  6.58e+00  5.70e-02  2.16e+00  1.12e-02  1.10e-01  2.81e-01  
  4  +5.1209e-01  +6.5821e+00  6.07e+00  4.74e-02  1.80e+00  9.77e-03  9.40e-02  3.36e-01  
  5  +4.6132e-01  +4.8601e+00  4.40e+00  2.10e-02  8.14e-01  1.07e-02  4.32e-02  5.60e-01  
  6  +3.5801e-01  +1.4722e+00  1.11e+00  6.42e-03  2.38e-01  1.91e-03  1.58e-02  8.61e-01  
  7  +3.1606e-01  +1.0338e+00  7.18e-01  4.78e-03  1.71e-01  5.37e-04  1.39e-02  3.01e-01  
  8  +2.4195e-01  +4.7468e-01  2.33e-01  1.45e-03  5.00e-02  3.06e-05  6.09e-03  6.56e-01  
  9  +2.0888e-01  +2.2982e-01  2.09e-02  1.35e-04  4.55e-03  8.94e-06  9.14e-04  9.27e-01  
 10  +2.0623e-01  +2.0714e-01  9.10e-04  5.83e-06  1.97e-04  3.58e-07  4.18e-05  9.56e-01  
 11  +2.0610e-01  +2.0611e-01  9.25e-06  5.92e-08  2.00e-06  3.62e-09  4.27e-07  9.90e-01  
 12  +2.0610e-01  +2.0610e-01  9.25e-08  5.92e-10  2.00e-08  3.62e-11  4.27e-09  9.90e-01  
 13  +2.0610e-01  +2.0610e-01  9.25e-10  5.92e-12  2.00e-10  3.62e-13  4.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1296ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 03:03:44 PM: Problem status: optimal
(CVXPY) Sep 20 03:03:44 PM: Optimal value: 2.061e-01
(CVXPY) Sep 20 03:03:44 PM: Compilation took 0.000e+00 seconds
(CVXPY) Sep 20 03:03:44 PM: Solver (including time spent in interface) took 4.109e-03 seconds
FULL MODEL:
  Accruacy: 0.794
  Our objective: 0.588

IF 
    (x0 = 0) <-- (term's our objective: 0.588)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7920761108398438
Best over terms:
  Our final objective: 0.588
    Its accruacy: 0.794
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.588
  Highest accruacy: 0.794
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

