Command:
python test_script.py -s smallest_subclass -d 8 -n 10 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 8.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:01 PM: Your problem has 22 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:01 PM: Finished problem compilation (took 6.110e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 22
  constraints   = 27
  nnz(P)        = 0
  nnz(A)        = 72
  cones (total) = 1
    : Nonnegative = 1,  numel = 27

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.1216e-01  +6.4391e+00  6.03e+00  7.63e-01  2.70e+00  1.00e+00  1.35e+00   ------   
  1  +3.6768e-01  +1.1082e+00  7.40e-01  2.51e-01  1.07e+00  3.47e-03  5.70e-01  7.84e-01  
  2  +1.6780e-01  +3.1038e-01  1.43e-01  4.81e-02  2.15e-01  6.33e-03  1.55e-01  8.21e-01  
  3  +1.5165e-01  +1.6063e-01  8.98e-03  3.26e-03  1.44e-02  5.40e-04  1.25e-02  9.32e-01  
  4  +1.5017e-01  +1.5027e-01  1.02e-04  3.75e-05  1.65e-04  6.15e-06  1.47e-04  9.88e-01  
  5  +1.5015e-01  +1.5015e-01  1.02e-06  3.75e-07  1.65e-06  6.14e-08  1.47e-06  9.90e-01  
  6  +1.5015e-01  +1.5015e-01  1.02e-08  3.75e-09  1.65e-08  6.14e-10  1.47e-08  9.90e-01  
  7  +1.5015e-01  +1.5015e-01  1.02e-10  3.75e-11  1.65e-10  6.14e-12  1.47e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 134.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:01 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:01 PM: Optimal value: 1.502e-01
(CVXPY) Aug 31 04:58:01 PM: Compilation took 6.110e-03 seconds
(CVXPY) Aug 31 04:58:01 PM: Solver (including time spent in interface) took 9.925e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.1502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:01 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:01 PM: Finished problem compilation (took 1.990e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 106
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.0592e-01  +6.1911e+00  5.89e+00  7.98e-01  2.85e+00  1.00e+00  1.29e+00   ------   
  1  +1.1640e-01  +8.9831e-01  7.82e-01  2.81e-01  1.05e+00  4.01e-03  5.12e-01  7.54e-01  
  2  +5.5128e-02  +1.7047e-01  1.15e-01  4.95e-02  2.06e-01  7.10e-03  1.23e-01  8.60e-01  
  3  +9.2051e-03  +3.7073e-02  2.79e-02  9.82e-03  4.54e-02  1.88e-03  2.82e-02  8.33e-01  
  4  +3.2659e-04  +7.2002e-04  3.93e-04  1.40e-04  6.47e-04  2.30e-05  4.11e-04  9.85e-01  
  5  +2.1093e-04  +2.3279e-04  2.19e-05  9.37e-06  3.90e-05  2.05e-07  2.78e-05  9.33e-01  
  6  +2.0012e-04  +2.0038e-04  2.59e-07  1.16e-07  4.63e-07  5.50e-09  3.64e-07  9.88e-01  
  7  +2.0000e-04  +2.0000e-04  2.58e-09  1.16e-09  4.62e-09  5.50e-11  3.64e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 118.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:01 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:01 PM: Optimal value: 2.000e-04
(CVXPY) Aug 31 04:58:01 PM: Compilation took 1.990e-03 seconds
(CVXPY) Aug 31 04:58:01 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:01 PM: Your problem has 33 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:01 PM: Finished problem compilation (took 1.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 33
  constraints   = 38
  nnz(P)        = 0
  nnz(A)        = 110
  cones (total) = 1
    : Nonnegative = 1,  numel = 38

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.9088e-01  +6.1719e+00  5.88e+00  8.01e-01  2.88e+00  1.00e+00  1.28e+00   ------   
  1  +8.4768e-02  +8.8023e-01  7.95e-01  2.87e-01  1.06e+00  4.08e-03  5.10e-01  7.47e-01  
  2  +3.1294e-02  +1.2929e-01  9.80e-02  4.35e-02  1.76e-01  7.44e-03  1.06e-01  9.02e-01  
  3  +1.9507e-03  +8.0380e-03  6.09e-03  2.60e-03  1.08e-02  4.58e-04  6.99e-03  9.44e-01  
  4  +2.2412e-04  +3.1586e-04  9.17e-05  4.08e-05  1.67e-04  4.58e-06  1.10e-04  9.84e-01  
  5  +1.9992e-04  +2.0279e-04  2.87e-06  1.49e-06  5.57e-06  8.40e-08  4.11e-06  9.64e-01  
  6  +2.0000e-04  +2.0003e-04  2.91e-08  1.52e-08  5.66e-08  8.58e-10  4.19e-08  9.90e-01  
  7  +2.0000e-04  +2.0000e-04  2.91e-10  1.52e-10  5.66e-10  8.58e-12  4.20e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:01 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:01 PM: Optimal value: 2.000e-04
(CVXPY) Aug 31 04:58:01 PM: Compilation took 1.993e-03 seconds
(CVXPY) Aug 31 04:58:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 1 AND x4 = 0) <-- (term's our objective: 0.4)
 OR (x1 = 0 AND x2 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9180498123168945
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 6
  Shortest hamming distance: 6
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

