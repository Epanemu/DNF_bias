Command:
python test_script.py -s smallest_subclass -d 8 -n 5000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0056
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 8.

Computed total variation: 0.1736
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:52 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Finished problem compilation (took 1.100e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 27517
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3495e+02  5.34e+02  4.16e-01  4.97e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3470e-01  +6.3375e+01  6.28e+01  1.59e-01  2.42e+01  1.47e-02  2.65e-01  9.01e-01  
  3  +5.0901e-01  +1.6335e+01  1.58e+01  1.06e-01  1.58e+01  3.91e-05  2.51e-01  2.27e-01  
  4  +5.0051e-01  +1.1546e+00  6.54e-01  6.35e-03  9.87e-01  6.15e-06  1.14e-01  9.37e-01  
  5  +5.0004e-01  +5.6522e-01  6.52e-02  6.16e-04  9.66e-02  5.66e-06  2.10e-02  9.90e-01  
  6  +5.0004e-01  +5.6428e-01  6.42e-02  6.00e-04  9.41e-02  9.61e-06  8.97e-03  6.64e-01  
  7  +4.9988e-01  +5.6013e-01  6.03e-02  1.87e-04  2.95e-02  1.02e-04  6.45e-04  9.40e-01  
  8  +4.9899e-01  +5.5755e-01  5.86e-02  3.54e-05  5.59e-03  5.62e-04  1.10e-04  8.32e-01  
  9  +4.9643e-01  +5.4002e-01  4.36e-02  2.97e-05  4.70e-03  2.19e-04  9.66e-05  3.13e-01  
 10  +4.9284e-01  +5.2242e-01  2.96e-02  1.63e-05  2.58e-03  1.32e-04  5.58e-05  5.10e-01  
 11  +4.8911e-01  +5.0551e-01  1.64e-02  7.82e-06  1.23e-03  1.42e-06  2.90e-05  8.89e-01  
 12  +4.8622e-01  +4.9367e-01  7.45e-03  3.18e-06  5.02e-04  6.07e-07  1.24e-05  9.90e-01  
 13  +4.8407e-01  +4.8514e-01  1.07e-03  4.33e-07  6.83e-05  8.99e-08  1.77e-06  9.26e-01  
 14  +4.8375e-01  +4.8387e-01  1.26e-04  5.06e-08  7.99e-06  1.21e-08  2.09e-07  9.90e-01  
 15  +4.8370e-01  +4.8370e-01  1.27e-06  5.11e-10  8.06e-08  1.22e-10  2.11e-09  9.90e-01  
 16  +4.8370e-01  +4.8370e-01  1.27e-08  5.11e-12  8.06e-10  1.23e-12  2.14e-11  9.90e-01  
 17  +4.8370e-01  +4.8370e-01  1.27e-10  5.11e-14  8.07e-12  1.25e-14  2.17e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.2212ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:52 PM: Optimal value: 4.837e-01
(CVXPY) Aug 31 04:59:52 PM: Compilation took 1.100e-02 seconds
(CVXPY) Aug 31 04:59:52 PM: Solver (including time spent in interface) took 3.969e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4837
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:52 PM: Your problem has 2527 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Finished problem compilation (took 1.032e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2527
  constraints   = 5027
  nnz(P)        = 0
  nnz(A)        = 31001
  cones (total) = 1
    : Nonnegative = 1,  numel = 5027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.80e-01  7.98e+01  1.00e+00  1.00e+00   ------   
  1  +5.8402e-01  +5.3520e+02  5.35e+02  4.16e-01  5.08e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3452e-01  +6.3209e+01  6.27e+01  1.59e-01  2.47e+01  1.48e-02  2.65e-01  9.03e-01  
  3  +5.0897e-01  +1.6288e+01  1.58e+01  1.06e-01  1.62e+01  3.93e-05  2.51e-01  2.31e-01  
  4  +5.0052e-01  +1.1579e+00  6.57e-01  6.39e-03  1.02e+00  6.17e-06  1.13e-01  9.37e-01  
  5  +5.0016e-01  +7.1500e-01  2.15e-01  2.05e-03  3.28e-01  5.87e-06  5.44e-02  6.23e-01  
  6  +5.0007e-01  +5.9032e-01  9.03e-02  8.54e-04  1.37e-01  3.75e-06  1.73e-02  8.27e-01  
  7  +5.0005e-01  +5.8828e-01  8.82e-02  7.10e-04  1.14e-01  1.14e-05  4.24e-03  8.05e-01  
  8  +4.9981e-01  +5.8682e-01  8.70e-02  8.82e-05  1.43e-02  1.55e-04  2.80e-04  9.36e-01  
  9  +4.9946e-01  +5.8100e-01  8.15e-02  7.18e-05  1.16e-02  1.43e-04  2.28e-04  3.25e-01  
 10  +4.9843e-01  +5.7203e-01  7.36e-02  5.35e-05  8.66e-03  1.40e-04  1.70e-04  3.37e-01  
 11  +4.9694e-01  +5.6027e-01  6.33e-02  4.56e-05  7.37e-03  9.59e-05  1.46e-04  2.62e-01  
 12  +4.9586e-01  +5.5107e-01  5.52e-02  4.05e-05  6.55e-03  4.84e-05  1.31e-04  3.78e-01  
 13  +4.9401e-01  +5.3829e-01  4.43e-02  3.06e-05  4.94e-03  2.08e-05  9.96e-05  5.33e-01  
 14  +4.8948e-01  +5.1101e-01  2.15e-02  1.22e-05  1.97e-03  2.51e-07  4.01e-05  9.87e-01  
 15  +4.8842e-01  +5.0596e-01  1.75e-02  9.00e-06  1.45e-03  4.98e-07  2.94e-05  4.28e-01  
 16  +4.8806e-01  +5.0425e-01  1.62e-02  8.62e-06  1.39e-03  5.79e-07  2.88e-05  1.61e-01  
 17  +4.8775e-01  +5.0267e-01  1.49e-02  7.67e-06  1.24e-03  7.83e-07  2.53e-05  3.86e-01  
 18  +4.8539e-01  +4.9102e-01  5.63e-03  2.57e-06  4.15e-04  3.64e-07  8.53e-06  7.18e-01  
 19  +4.8438e-01  +4.8666e-01  2.28e-03  9.42e-07  1.52e-04  1.64e-07  3.17e-06  6.60e-01  
 20  +4.8401e-01  +4.8506e-01  1.05e-03  4.29e-07  6.93e-05  1.21e-07  1.40e-06  9.90e-01  
 21  +4.8378e-01  +4.8413e-01  3.56e-04  1.39e-07  2.26e-05  4.40e-08  4.46e-07  6.86e-01  
 22  +4.8367e-01  +4.8372e-01  5.36e-05  2.09e-08  3.38e-06  6.72e-09  6.69e-08  9.90e-01  
 23  +4.8365e-01  +4.8365e-01  5.57e-07  2.17e-10  3.51e-08  6.92e-11  6.94e-10  9.90e-01  
 24  +4.8365e-01  +4.8365e-01  5.57e-09  2.17e-12  3.51e-10  6.92e-13  6.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.7388ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:52 PM: Optimal value: 4.837e-01
(CVXPY) Aug 31 04:59:52 PM: Compilation took 1.032e-02 seconds
(CVXPY) Aug 31 04:59:52 PM: Solver (including time spent in interface) took 5.220e-02 seconds
Iteration: 2, Objective: 0.4837
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:52 PM: Your problem has 2537 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2537
  constraints   = 5037
  nnz(P)        = 0
  nnz(A)        = 34081
  cones (total) = 1
    : Nonnegative = 1,  numel = 5037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.80e-01  8.14e+01  1.00e+00  1.00e+00   ------   
  1  +5.8386e-01  +5.3537e+02  5.35e+02  4.17e-01  5.18e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3433e-01  +6.3014e+01  6.25e+01  1.59e-01  2.51e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0891e-01  +1.6225e+01  1.57e+01  1.05e-01  1.64e+01  3.94e-05  2.51e-01  2.35e-01  
  4  +5.0051e-01  +1.1494e+00  6.49e-01  6.32e-03  1.02e+00  6.22e-06  1.10e-01  9.47e-01  
  5  +5.0024e-01  +8.1181e-01  3.12e-01  2.99e-03  4.87e-01  6.27e-06  6.44e-02  4.82e-01  
  6  +5.0011e-01  +6.5495e-01  1.55e-01  1.47e-03  2.39e-01  5.99e-06  2.15e-02  7.46e-01  
  7  +5.0006e-01  +6.6035e-01  1.60e-01  6.75e-04  1.11e-01  4.20e-05  2.42e-03  9.30e-01  
  8  +4.9980e-01  +6.5730e-01  1.58e-01  1.87e-04  3.08e-02  1.63e-04  5.87e-04  7.66e-01  
  9  +4.9894e-01  +6.2869e-01  1.30e-01  1.25e-04  2.06e-02  1.02e-04  3.93e-04  6.56e-01  
 10  +4.9823e-01  +6.2213e-01  1.24e-01  1.07e-04  1.77e-02  1.01e-04  3.38e-04  1.92e-01  
 11  +4.9696e-01  +6.0821e-01  1.11e-01  9.31e-05  1.53e-02  6.07e-05  2.95e-04  4.00e-01  
 12  +4.9567e-01  +5.9902e-01  1.03e-01  7.78e-05  1.28e-02  5.26e-05  2.47e-04  2.76e-01  
 13  +4.9366e-01  +5.8404e-01  9.04e-02  6.84e-05  1.13e-02  1.71e-05  2.19e-04  5.88e-01  
 14  +4.8941e-01  +5.6002e-01  7.06e-02  4.34e-05  7.14e-03  1.37e-05  1.40e-04  4.48e-01  
 15  +4.8810e-01  +5.5381e-01  6.57e-02  3.85e-05  6.35e-03  1.15e-05  1.25e-04  2.35e-01  
 16  +4.8532e-01  +5.3944e-01  5.41e-02  3.02e-05  4.97e-03  5.63e-06  9.93e-05  6.19e-01  
 17  +4.8281e-01  +5.2708e-01  4.43e-02  2.23e-05  3.67e-03  3.80e-06  7.37e-05  7.42e-01  
 18  +4.7669e-01  +4.9893e-01  2.22e-02  9.73e-06  1.60e-03  1.98e-06  3.32e-05  6.48e-01  
 19  +4.7230e-01  +4.8136e-01  9.06e-03  3.53e-06  5.82e-04  8.76e-07  1.26e-05  8.85e-01  
 20  +4.7219e-01  +4.8082e-01  8.63e-03  3.39e-06  5.59e-04  8.51e-07  1.22e-05  1.99e-01  
 21  +4.6945e-01  +4.7010e-01  6.53e-04  2.46e-07  4.06e-05  6.01e-08  9.27e-07  9.50e-01  
 22  +4.6920e-01  +4.6921e-01  9.83e-06  3.68e-09  6.07e-07  9.20e-10  1.40e-08  9.87e-01  
 23  +4.6920e-01  +4.6920e-01  9.83e-08  3.68e-11  6.07e-09  9.20e-12  1.40e-10  9.90e-01  
 24  +4.6920e-01  +4.6920e-01  9.83e-10  3.68e-13  6.08e-11  9.36e-14  1.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.0597ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:52 PM: Optimal value: 4.692e-01
(CVXPY) Aug 31 04:59:52 PM: Compilation took 1.501e-02 seconds
(CVXPY) Aug 31 04:59:52 PM: Solver (including time spent in interface) took 6.145e-02 seconds
Iteration: 3, Objective: 0.4692
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:52 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Finished problem compilation (took 1.443e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 35769
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.80e-01  8.17e+01  1.00e+00  1.00e+00   ------   
  1  +5.8371e-01  +5.3549e+02  5.35e+02  4.17e-01  5.20e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3420e-01  +6.2887e+01  6.24e+01  1.58e-01  2.51e+01  1.48e-02  2.65e-01  9.07e-01  
  3  +5.0888e-01  +1.6191e+01  1.57e+01  1.05e-01  1.64e+01  3.95e-05  2.50e-01  2.38e-01  
  4  +5.0051e-01  +1.1480e+00  6.47e-01  6.31e-03  1.03e+00  6.25e-06  1.09e-01  9.50e-01  
  5  +5.0025e-01  +8.3005e-01  3.30e-01  3.17e-03  5.19e-01  6.98e-06  6.24e-02  5.36e-01  
  6  +5.0009e-01  +6.3123e-01  1.31e-01  1.23e-03  2.01e-01  8.02e-06  1.33e-02  8.40e-01  
  7  +4.9989e-01  +6.6384e-01  1.64e-01  2.67e-04  4.42e-02  1.43e-04  8.34e-04  9.53e-01  
  8  +4.9951e-01  +6.5390e-01  1.54e-01  1.78e-04  2.96e-02  1.62e-04  5.51e-04  4.97e-01  
  9  +4.9800e-01  +6.3911e-01  1.41e-01  9.93e-05  1.65e-02  2.27e-04  3.04e-04  5.25e-01  
 10  +4.9708e-01  +6.3225e-01  1.35e-01  9.01e-05  1.49e-02  2.01e-04  2.77e-04  1.80e-01  
 11  +4.9364e-01  +6.0437e-01  1.11e-01  7.96e-05  1.32e-02  5.93e-05  2.51e-04  4.90e-01  
 12  +4.9202e-01  +5.9581e-01  1.04e-01  6.78e-05  1.12e-02  5.22e-05  2.14e-04  2.45e-01  
 13  +4.8952e-01  +5.8193e-01  9.24e-02  5.54e-05  9.17e-03  2.83e-05  1.76e-04  5.02e-01  
 14  +4.8671e-01  +5.6734e-01  8.06e-02  4.49e-05  7.43e-03  1.52e-05  1.44e-04  5.23e-01  
 15  +4.8335e-01  +5.5142e-01  6.81e-02  3.57e-05  5.91e-03  8.29e-06  1.16e-04  5.63e-01  
 16  +4.7290e-01  +5.0355e-01  3.07e-02  1.34e-05  2.21e-03  3.65e-06  4.55e-05  6.44e-01  
 17  +4.6651e-01  +4.7729e-01  1.08e-02  4.26e-06  7.04e-04  1.17e-06  1.53e-05  8.13e-01  
 18  +4.6464e-01  +4.6983e-01  5.19e-03  1.99e-06  3.30e-04  5.86e-07  7.42e-06  9.90e-01  
 19  +4.6278e-01  +4.6299e-01  2.09e-04  7.88e-08  1.30e-05  2.11e-08  3.04e-07  9.63e-01  
 20  +4.6270e-01  +4.6270e-01  2.10e-06  7.91e-10  1.31e-07  2.12e-10  3.06e-09  9.90e-01  
 21  +4.6270e-01  +4.6270e-01  2.10e-08  7.90e-12  1.31e-09  2.12e-12  3.06e-11  9.90e-01  
 22  +4.6270e-01  +4.6270e-01  2.10e-10  7.90e-14  1.31e-11  2.15e-14  3.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 55.4037ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:52 PM: Optimal value: 4.627e-01
(CVXPY) Aug 31 04:59:52 PM: Compilation took 1.443e-02 seconds
(CVXPY) Aug 31 04:59:52 PM: Solver (including time spent in interface) took 5.933e-02 seconds
Iteration: 4, Objective: 0.4627
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:52 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Finished problem compilation (took 1.200e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 37390
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.21e+01  1.00e+00  1.00e+00   ------   
  1  +5.8363e-01  +5.3556e+02  5.35e+02  4.18e-01  5.22e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3414e-01  +6.2833e+01  6.23e+01  1.58e-01  2.51e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0886e-01  +1.6173e+01  1.57e+01  1.05e-01  1.64e+01  3.96e-05  2.50e-01  2.39e-01  
  4  +5.0051e-01  +1.1465e+00  6.46e-01  6.30e-03  1.03e+00  6.27e-06  1.08e-01  9.52e-01  
  5  +5.0027e-01  +8.5622e-01  3.56e-01  3.43e-03  5.63e-01  6.77e-06  6.54e-02  4.68e-01  
  6  +5.0017e-01  +7.2405e-01  2.24e-01  2.13e-03  3.50e-01  7.61e-06  2.66e-02  6.40e-01  
  7  +5.0009e-01  +6.9035e-01  1.90e-01  8.76e-04  1.45e-01  3.93e-05  3.15e-03  9.27e-01  
  8  +4.9985e-01  +6.8744e-01  1.88e-01  2.49e-04  4.15e-02  1.50e-04  7.75e-04  7.63e-01  
  9  +4.9907e-01  +6.5627e-01  1.57e-01  1.54e-04  2.57e-02  1.09e-04  4.75e-04  7.23e-01  
 10  +4.9812e-01  +6.4695e-01  1.49e-01  1.27e-04  2.12e-02  1.09e-04  3.90e-04  2.48e-01  
 11  +4.9570e-01  +6.2535e-01  1.30e-01  9.76e-05  1.62e-02  7.95e-05  3.00e-04  4.20e-01  
 12  +4.9301e-01  +6.0915e-01  1.16e-01  7.43e-05  1.24e-02  6.50e-05  2.30e-04  3.82e-01  
 13  +4.9107e-01  +5.9781e-01  1.07e-01  6.34e-05  1.06e-02  3.23e-05  1.98e-04  5.32e-01  
 14  +4.9006e-01  +5.9220e-01  1.02e-01  6.20e-05  1.03e-02  2.65e-05  1.94e-04  1.33e-01  
 15  +4.8400e-01  +5.6270e-01  7.87e-02  4.11e-05  6.83e-03  1.89e-05  1.32e-04  4.17e-01  
 16  +4.7802e-01  +5.3461e-01  5.66e-02  2.72e-05  4.51e-03  1.11e-05  8.93e-05  4.64e-01  
 17  +4.7097e-01  +5.0242e-01  3.15e-02  1.35e-05  2.23e-03  2.39e-06  4.58e-05  9.90e-01  
 18  +4.6782e-01  +4.8941e-01  2.16e-02  8.74e-06  1.45e-03  1.87e-06  3.04e-05  5.36e-01  
 19  +4.6762e-01  +4.8851e-01  2.09e-02  8.46e-06  1.40e-03  1.88e-06  2.94e-05  1.59e-01  
 20  +4.6160e-01  +4.6471e-01  3.11e-03  1.19e-06  1.98e-04  3.05e-07  4.42e-06  9.90e-01  
 21  +4.6044e-01  +4.6053e-01  9.01e-05  3.39e-08  5.62e-06  8.59e-09  1.31e-07  9.79e-01  
 22  +4.6040e-01  +4.6040e-01  9.03e-07  3.39e-10  5.63e-08  8.61e-11  1.31e-09  9.90e-01  
 23  +4.6040e-01  +4.6040e-01  9.03e-09  3.39e-12  5.63e-10  8.61e-13  1.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.4205ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:52 PM: Optimal value: 4.604e-01
(CVXPY) Aug 31 04:59:52 PM: Compilation took 1.200e-02 seconds
(CVXPY) Aug 31 04:59:52 PM: Solver (including time spent in interface) took 7.392e-02 seconds
Iteration: 5, Objective: 0.4604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:52 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:52 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:52 PM: Finished problem compilation (took 1.304e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 39114
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.24e+01  1.00e+00  1.00e+00   ------   
  1  +5.8347e-01  +5.3575e+02  5.35e+02  4.18e-01  5.23e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3396e-01  +6.2657e+01  6.21e+01  1.58e-01  2.51e+01  1.49e-02  2.64e-01  9.09e-01  
  3  +5.0882e-01  +1.6123e+01  1.56e+01  1.05e-01  1.65e+01  3.97e-05  2.49e-01  2.43e-01  
  4  +5.0051e-01  +1.1490e+00  6.48e-01  6.34e-03  1.04e+00  6.30e-06  1.07e-01  9.53e-01  
  5  +5.0028e-01  +8.6238e-01  3.62e-01  3.50e-03  5.76e-01  7.19e-06  6.14e-02  5.01e-01  
  6  +5.0018e-01  +7.4424e-01  2.44e-01  2.27e-03  3.75e-01  1.04e-05  2.01e-02  7.44e-01  
  7  +4.9997e-01  +7.2547e-01  2.26e-01  3.94e-04  6.60e-02  1.21e-04  1.23e-03  9.79e-01  
  8  +4.9962e-01  +7.0493e-01  2.05e-01  2.80e-04  4.69e-02  1.16e-04  8.65e-04  4.83e-01  
  9  +4.9841e-01  +6.8936e-01  1.91e-01  1.53e-04  2.57e-02  1.77e-04  4.67e-04  5.12e-01  
 10  +4.9625e-01  +6.6605e-01  1.70e-01  1.29e-04  2.15e-02  1.35e-04  3.97e-04  2.77e-01  
 11  +4.9533e-01  +6.5414e-01  1.59e-01  1.24e-04  2.08e-02  9.28e-05  3.84e-04  2.27e-01  
 12  +4.9220e-01  +6.3266e-01  1.40e-01  9.35e-05  1.56e-02  8.55e-05  2.91e-04  2.98e-01  
 13  +4.9040e-01  +6.1984e-01  1.29e-01  8.19e-05  1.37e-02  5.54e-05  2.56e-04  3.68e-01  
 14  +4.8887e-01  +6.0955e-01  1.21e-01  7.75e-05  1.29e-02  3.40e-05  2.45e-04  3.14e-01  
 15  +4.7984e-01  +5.5972e-01  7.99e-02  4.10e-05  6.84e-03  1.58e-05  1.33e-04  6.94e-01  
 16  +4.7533e-01  +5.3860e-01  6.33e-02  3.01e-05  5.02e-03  1.09e-05  9.92e-05  4.06e-01  
 17  +4.6880e-01  +5.0733e-01  3.85e-02  1.68e-05  2.80e-03  4.21e-06  5.66e-05  8.17e-01  
 18  +4.6771e-01  +5.0148e-01  3.38e-02  1.46e-05  2.44e-03  3.54e-06  4.95e-05  6.78e-01  
 19  +4.6453e-01  +4.8802e-01  2.35e-02  9.97e-06  1.66e-03  2.45e-06  3.41e-05  3.49e-01  
 20  +4.6089e-01  +4.7239e-01  1.15e-02  4.75e-06  7.91e-04  1.22e-06  1.65e-05  7.34e-01  
 21  +4.5778e-01  +4.5968e-01  1.90e-03  7.71e-07  1.28e-04  2.05e-07  2.72e-06  8.75e-01  
 22  +4.5727e-01  +4.5767e-01  4.02e-04  1.62e-07  2.69e-05  4.37e-08  5.73e-07  8.56e-01  
 23  +4.5714e-01  +4.5714e-01  5.00e-06  2.01e-09  3.35e-07  5.42e-10  7.14e-09  9.88e-01  
 24  +4.5713e-01  +4.5713e-01  5.02e-08  2.02e-11  3.36e-09  5.44e-12  7.16e-11  9.90e-01  
 25  +4.5713e-01  +4.5713e-01  5.12e-10  2.06e-13  3.43e-11  5.57e-14  7.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.2956ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:52 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:52 PM: Optimal value: 4.571e-01
(CVXPY) Aug 31 04:59:52 PM: Compilation took 1.304e-02 seconds
(CVXPY) Aug 31 04:59:52 PM: Solver (including time spent in interface) took 6.407e-02 seconds
Iteration: 6, Objective: 0.4571
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:53 PM: Your problem has 2577 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Finished problem compilation (took 1.391e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2577
  constraints   = 5077
  nnz(P)        = 0
  nnz(A)        = 40606
  cones (total) = 1
    : Nonnegative = 1,  numel = 5077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.8333e-01  +5.3574e+02  5.35e+02  4.18e-01  5.24e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3382e-01  +6.2500e+01  6.20e+01  1.58e-01  2.51e+01  1.49e-02  2.64e-01  9.11e-01  
  3  +5.0878e-01  +1.6077e+01  1.56e+01  1.05e-01  1.64e+01  3.98e-05  2.48e-01  2.46e-01  
  4  +5.0054e-01  +1.2037e+00  7.03e-01  6.88e-03  1.13e+00  6.46e-06  1.11e-01  9.20e-01  
  5  +5.0027e-01  +8.7356e-01  3.73e-01  3.60e-03  5.95e-01  7.59e-06  5.95e-02  5.46e-01  
  6  +5.0016e-01  +7.6239e-01  2.62e-01  2.37e-03  3.92e-01  1.30e-05  1.71e-02  7.62e-01  
  7  +4.9956e-01  +7.5184e-01  2.52e-01  4.05e-04  6.81e-02  1.43e-04  1.25e-03  9.40e-01  
  8  +4.9784e-01  +7.1644e-01  2.19e-01  2.02e-04  3.40e-02  1.97e-04  6.15e-04  6.19e-01  
  9  +4.9531e-01  +6.8460e-01  1.89e-01  1.59e-04  2.66e-02  1.49e-04  4.87e-04  3.39e-01  
 10  +4.9450e-01  +6.7499e-01  1.80e-01  1.33e-04  2.23e-02  1.06e-04  4.07e-04  4.39e-01  
 11  +4.9214e-01  +6.5050e-01  1.58e-01  1.07e-04  1.79e-02  3.54e-05  3.30e-04  6.93e-01  
 12  +4.8005e-01  +5.7992e-01  9.99e-02  5.23e-05  8.76e-03  1.41e-05  1.70e-04  7.81e-01  
 13  +4.7520e-01  +5.5704e-01  8.18e-02  4.09e-05  6.84e-03  1.03e-05  1.36e-04  3.51e-01  
 14  +4.6774e-01  +5.2240e-01  5.47e-02  2.55e-05  4.25e-03  6.08e-06  8.78e-05  4.97e-01  
 15  +4.5981e-01  +4.8556e-01  2.58e-02  1.11e-05  1.86e-03  2.33e-06  4.04e-05  9.90e-01  
 16  +4.5367e-01  +4.6006e-01  6.39e-03  2.61e-06  4.35e-04  5.92e-07  1.02e-05  8.63e-01  
 17  +4.5161e-01  +4.5192e-01  3.06e-04  1.22e-07  2.04e-05  2.94e-08  4.94e-07  9.90e-01  
 18  +4.5150e-01  +4.5150e-01  3.07e-06  1.23e-09  2.05e-07  2.95e-10  4.98e-09  9.90e-01  
 19  +4.5150e-01  +4.5150e-01  3.07e-08  1.23e-11  2.05e-09  2.95e-12  4.98e-11  9.90e-01  
 20  +4.5150e-01  +4.5150e-01  3.07e-10  1.23e-13  2.05e-11  2.98e-14  5.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.0184ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:53 PM: Optimal value: 4.515e-01
(CVXPY) Aug 31 04:59:53 PM: Compilation took 1.391e-02 seconds
(CVXPY) Aug 31 04:59:53 PM: Solver (including time spent in interface) took 6.000e-02 seconds
Iteration: 7, Objective: 0.4515
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:53 PM: Your problem has 2587 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Finished problem compilation (took 1.500e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2587
  constraints   = 5087
  nnz(P)        = 0
  nnz(A)        = 41815
  cones (total) = 1
    : Nonnegative = 1,  numel = 5087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.8326e-01  +5.3576e+02  5.35e+02  4.19e-01  5.25e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3374e-01  +6.2419e+01  6.19e+01  1.58e-01  2.50e+01  1.49e-02  2.63e-01  9.12e-01  
  3  +5.0876e-01  +1.6047e+01  1.55e+01  1.05e-01  1.64e+01  3.98e-05  2.48e-01  2.48e-01  
  4  +5.0056e-01  +1.2531e+00  7.53e-01  7.37e-03  1.21e+00  6.61e-06  1.15e-01  8.93e-01  
  5  +5.0026e-01  +8.8623e-01  3.86e-01  3.72e-03  6.15e-01  7.98e-06  5.89e-02  5.74e-01  
  6  +5.0013e-01  +8.1655e-01  3.16e-01  2.55e-03  4.23e-01  1.94e-05  1.33e-02  8.77e-01  
  7  +4.9899e-01  +7.9900e-01  3.00e-01  3.94e-04  6.63e-02  1.77e-04  1.21e-03  9.12e-01  
  8  +4.9605e-01  +7.4628e-01  2.50e-01  2.04e-04  3.44e-02  2.17e-04  6.25e-04  5.71e-01  
  9  +4.9465e-01  +7.2551e-01  2.31e-01  1.74e-04  2.93e-02  1.63e-04  5.36e-04  3.22e-01  
 10  +4.9074e-01  +6.6599e-01  1.75e-01  1.28e-04  2.15e-02  1.31e-05  4.02e-04  8.10e-01  
 11  +4.9004e-01  +6.6142e-01  1.71e-01  1.27e-04  2.14e-02  1.24e-05  4.01e-04  4.29e-02  
 12  +4.8293e-01  +6.1897e-01  1.36e-01  8.20e-05  1.37e-02  1.02e-05  2.64e-04  5.54e-01  
 13  +4.7498e-01  +5.7604e-01  1.01e-01  5.49e-05  9.19e-03  7.35e-06  1.83e-04  4.43e-01  
 14  +4.6646e-01  +5.3341e-01  6.69e-02  3.31e-05  5.54e-03  4.80e-06  1.15e-04  4.94e-01  
 15  +4.5682e-01  +4.8769e-01  3.09e-02  1.40e-05  2.34e-03  2.23e-06  5.10e-05  6.74e-01  
 16  +4.5102e-01  +4.6131e-01  1.03e-02  4.39e-06  7.33e-04  9.74e-07  1.70e-05  9.90e-01  
 17  +4.4900e-01  +4.5312e-01  4.12e-03  1.72e-06  2.88e-04  3.98e-07  6.97e-06  8.88e-01  
 18  +4.4765e-01  +4.4778e-01  1.34e-04  5.51e-08  9.21e-06  1.18e-08  2.31e-07  9.81e-01  
 19  +4.4760e-01  +4.4760e-01  1.35e-06  5.53e-10  9.26e-08  1.18e-10  2.33e-09  9.90e-01  
 20  +4.4760e-01  +4.4760e-01  1.35e-08  5.53e-12  9.26e-10  1.18e-12  2.33e-11  9.90e-01  
 21  +4.4760e-01  +4.4760e-01  1.35e-10  5.54e-14  9.26e-12  1.21e-14  2.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.0198ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:53 PM: Optimal value: 4.476e-01
(CVXPY) Aug 31 04:59:53 PM: Compilation took 1.500e-02 seconds
(CVXPY) Aug 31 04:59:53 PM: Solver (including time spent in interface) took 6.317e-02 seconds
Iteration: 8, Objective: 0.4476
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:53 PM: Your problem has 2597 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Finished problem compilation (took 1.855e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2597
  constraints   = 5097
  nnz(P)        = 0
  nnz(A)        = 42791
  cones (total) = 1
    : Nonnegative = 1,  numel = 5097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.80e-01  8.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.8309e-01  +5.3599e+02  5.35e+02  4.19e-01  5.25e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3364e-01  +6.2341e+01  6.18e+01  1.58e-01  2.50e+01  1.50e-02  2.63e-01  9.13e-01  
  3  +5.0874e-01  +1.6035e+01  1.55e+01  1.05e-01  1.64e+01  4.00e-05  2.48e-01  2.50e-01  
  4  +5.0060e-01  +1.3076e+00  8.07e-01  7.91e-03  1.30e+00  6.73e-06  1.19e-01  8.64e-01  
  5  +5.0027e-01  +9.1874e-01  4.18e-01  4.04e-03  6.67e-01  7.72e-06  6.47e-02  5.30e-01  
  6  +5.0018e-01  +8.6990e-01  3.70e-01  3.25e-03  5.39e-01  1.45e-05  2.08e-02  8.15e-01  
  7  +4.9889e-01  +8.1125e-01  3.12e-01  4.28e-04  7.21e-02  1.56e-04  1.31e-03  9.45e-01  
  8  +4.9476e-01  +7.4230e-01  2.48e-01  1.76e-04  2.97e-02  2.28e-04  5.37e-04  6.72e-01  
  9  +4.9245e-01  +7.1425e-01  2.22e-01  1.51e-04  2.54e-02  1.66e-04  4.63e-04  2.89e-01  
 10  +4.9003e-01  +6.9719e-01  2.07e-01  1.28e-04  2.15e-02  1.51e-04  3.95e-04  2.14e-01  
 11  +4.8832e-01  +6.7855e-01  1.90e-01  1.22e-04  2.06e-02  1.02e-04  3.83e-04  2.00e-01  
 12  +4.8074e-01  +6.2953e-01  1.49e-01  8.40e-05  1.41e-02  7.04e-05  2.72e-04  3.88e-01  
 13  +4.8029e-01  +6.2420e-01  1.44e-01  8.22e-05  1.38e-02  5.41e-05  2.67e-04  1.93e-01  
 14  +4.7154e-01  +5.7378e-01  1.02e-01  5.34e-05  8.95e-03  2.95e-05  1.81e-04  4.58e-01  
 15  +4.6114e-01  +5.1920e-01  5.81e-02  2.76e-05  4.62e-03  1.29e-05  9.81e-05  5.79e-01  
 16  +4.5923e-01  +5.0705e-01  4.78e-02  2.20e-05  3.68e-03  5.90e-06  7.89e-05  7.87e-01  
 17  +4.5179e-01  +4.7322e-01  2.14e-02  9.33e-06  1.56e-03  2.34e-06  3.48e-05  8.00e-01  
 18  +4.4759e-01  +4.5561e-01  8.02e-03  3.28e-06  5.48e-04  8.95e-07  1.27e-05  7.28e-01  
 19  +4.4624e-01  +4.5022e-01  3.97e-03  1.59e-06  2.65e-04  4.01e-07  6.25e-06  9.90e-01  
 20  +4.4487e-01  +4.4505e-01  1.86e-04  7.29e-08  1.22e-05  1.84e-08  2.93e-07  9.55e-01  
 21  +4.4480e-01  +4.4480e-01  1.87e-06  7.32e-10  1.22e-07  1.84e-10  2.94e-09  9.90e-01  
 22  +4.4480e-01  +4.4480e-01  1.87e-08  7.32e-12  1.22e-09  1.86e-12  2.96e-11  9.90e-01  
 23  +4.4480e-01  +4.4480e-01  1.87e-10  7.32e-14  1.22e-11  1.87e-14  2.99e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 65.0624ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:53 PM: Optimal value: 4.448e-01
(CVXPY) Aug 31 04:59:53 PM: Compilation took 1.855e-02 seconds
(CVXPY) Aug 31 04:59:53 PM: Solver (including time spent in interface) took 6.900e-02 seconds
Iteration: 9, Objective: 0.4448
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:53 PM: Your problem has 2607 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Finished problem compilation (took 1.495e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2607
  constraints   = 5107
  nnz(P)        = 0
  nnz(A)        = 43413
  cones (total) = 1
    : Nonnegative = 1,  numel = 5107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.80e-01  8.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.8297e-01  +5.3599e+02  5.35e+02  4.20e-01  5.24e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3358e-01  +6.2290e+01  6.18e+01  1.58e-01  2.49e+01  1.50e-02  2.63e-01  9.14e-01  
  3  +5.0873e-01  +1.6026e+01  1.55e+01  1.05e-01  1.63e+01  4.01e-05  2.47e-01  2.52e-01  
  4  +5.0060e-01  +1.3225e+00  8.22e-01  8.06e-03  1.32e+00  6.79e-06  1.19e-01  8.58e-01  
  5  +5.0027e-01  +9.1740e-01  4.17e-01  4.03e-03  6.65e-01  7.80e-06  6.35e-02  5.46e-01  
  6  +5.0016e-01  +8.7723e-01  3.77e-01  3.16e-03  5.24e-01  1.67e-05  1.76e-02  8.77e-01  
  7  +4.9868e-01  +8.2663e-01  3.28e-01  4.15e-04  6.99e-02  1.67e-04  1.26e-03  9.37e-01  
  8  +4.9393e-01  +7.4509e-01  2.51e-01  1.72e-04  2.89e-02  2.24e-04  5.23e-04  6.72e-01  
  9  +4.9229e-01  +7.2051e-01  2.28e-01  1.57e-04  2.63e-02  1.59e-04  4.78e-04  2.37e-01  
 10  +4.9022e-01  +7.0538e-01  2.15e-01  1.34e-04  2.25e-02  1.40e-04  4.11e-04  2.45e-01  
 11  +4.8790e-01  +6.7989e-01  1.92e-01  1.26e-04  2.12e-02  8.17e-05  3.94e-04  2.60e-01  
 12  +4.8316e-01  +6.4951e-01  1.66e-01  1.00e-04  1.68e-02  6.46e-05  3.19e-04  2.77e-01  
 13  +4.8251e-01  +6.4162e-01  1.59e-01  9.71e-05  1.63e-02  4.50e-05  3.12e-04  2.52e-01  
 14  +4.7099e-01  +5.7554e-01  1.05e-01  5.51e-05  9.23e-03  2.63e-05  1.86e-04  4.72e-01  
 15  +4.6117e-01  +5.2315e-01  6.20e-02  3.01e-05  5.04e-03  1.28e-05  1.06e-04  5.33e-01  
 16  +4.5946e-01  +5.1455e-01  5.51e-02  2.60e-05  4.35e-03  1.08e-05  9.15e-05  2.30e-01  
 17  +4.5822e-01  +5.0611e-01  4.79e-02  2.20e-05  3.68e-03  5.72e-06  7.85e-05  7.56e-01  
 18  +4.5341e-01  +4.8414e-01  3.07e-02  1.36e-05  2.28e-03  3.65e-06  4.98e-05  4.04e-01  
 19  +4.4884e-01  +4.6441e-01  1.56e-02  6.52e-06  1.09e-03  1.78e-06  2.48e-05  6.55e-01  
 20  +4.4537e-01  +4.4986e-01  4.49e-03  1.81e-06  3.02e-04  4.56e-07  7.19e-06  9.90e-01  
 21  +4.4389e-01  +4.4414e-01  2.53e-04  1.01e-07  1.68e-05  2.50e-08  4.09e-07  9.53e-01  
 22  +4.4380e-01  +4.4380e-01  2.59e-06  1.03e-09  1.72e-07  2.56e-10  4.19e-09  9.90e-01  
 23  +4.4380e-01  +4.4380e-01  2.59e-08  1.03e-11  1.72e-09  2.56e-12  4.19e-11  9.90e-01  
 24  +4.4380e-01  +4.4380e-01  2.59e-10  1.03e-13  1.72e-11  2.58e-14  4.23e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.2454ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:53 PM: Optimal value: 4.438e-01
(CVXPY) Aug 31 04:59:53 PM: Compilation took 1.495e-02 seconds
(CVXPY) Aug 31 04:59:53 PM: Solver (including time spent in interface) took 6.597e-02 seconds
Iteration: 10, Objective: 0.4438
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:53 PM: Your problem has 2617 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Finished problem compilation (took 1.516e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2617
  constraints   = 5117
  nnz(P)        = 0
  nnz(A)        = 44230
  cones (total) = 1
    : Nonnegative = 1,  numel = 5117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.80e-01  8.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.8288e-01  +5.3601e+02  5.35e+02  4.20e-01  5.24e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3352e-01  +6.2229e+01  6.17e+01  1.58e-01  2.48e+01  1.50e-02  2.63e-01  9.15e-01  
  3  +5.0871e-01  +1.6008e+01  1.55e+01  1.04e-01  1.63e+01  4.01e-05  2.47e-01  2.53e-01  
  4  +5.0061e-01  +1.3307e+00  8.30e-01  8.15e-03  1.34e+00  6.83e-06  1.19e-01  8.54e-01  
  5  +5.0028e-01  +9.4224e-01  4.42e-01  4.27e-03  7.05e-01  8.25e-06  6.41e-02  5.53e-01  
  6  +5.0017e-01  +8.9427e-01  3.94e-01  3.44e-03  5.70e-01  1.61e-05  2.13e-02  7.58e-01  
  7  +4.9867e-01  +8.3401e-01  3.35e-01  4.57e-04  7.70e-02  1.64e-04  1.40e-03  9.62e-01  
  8  +4.9361e-01  +7.4785e-01  2.54e-01  1.83e-04  3.08e-02  2.23e-04  5.61e-04  6.87e-01  
  9  +4.9118e-01  +7.2886e-01  2.38e-01  1.46e-04  2.46e-02  1.88e-04  4.50e-04  3.59e-01  
 10  +4.8872e-01  +7.0966e-01  2.21e-01  1.29e-04  2.17e-02  1.54e-04  4.01e-04  2.12e-01  
 11  +4.8143e-01  +6.4507e-01  1.64e-01  1.03e-04  1.72e-02  2.19e-05  3.34e-04  6.20e-01  
 12  +4.6828e-01  +5.6888e-01  1.01e-01  5.34e-05  8.94e-03  9.91e-06  1.84e-04  6.66e-01  
 13  +4.5621e-01  +5.0630e-01  5.01e-02  2.43e-05  4.05e-03  4.35e-06  8.81e-05  6.20e-01  
 14  +4.5560e-01  +5.0355e-01  4.80e-02  2.27e-05  3.79e-03  4.25e-06  8.22e-05  1.35e-01  
 15  +4.5431e-01  +4.9686e-01  4.26e-02  1.96e-05  3.27e-03  3.85e-06  7.18e-05  6.40e-01  
 16  +4.5031e-01  +4.7903e-01  2.87e-02  1.27e-05  2.13e-03  2.62e-06  4.80e-05  3.77e-01  
 17  +4.4539e-01  +4.5728e-01  1.19e-02  5.10e-06  8.51e-04  1.08e-06  2.01e-05  7.10e-01  
 18  +4.4236e-01  +4.4427e-01  1.91e-03  7.96e-07  1.33e-04  1.77e-07  3.31e-06  9.90e-01  
 19  +4.4171e-01  +4.4175e-01  3.82e-05  1.58e-08  2.64e-06  3.43e-09  6.70e-08  9.81e-01  
 20  +4.4170e-01  +4.4170e-01  3.83e-07  1.58e-10  2.64e-08  3.43e-11  6.70e-10  9.90e-01  
 21  +4.4170e-01  +4.4170e-01  3.83e-09  1.58e-12  2.64e-10  3.49e-13  6.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.4447ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:53 PM: Optimal value: 4.417e-01
(CVXPY) Aug 31 04:59:53 PM: Compilation took 1.516e-02 seconds
(CVXPY) Aug 31 04:59:53 PM: Solver (including time spent in interface) took 6.100e-02 seconds
Iteration: 11, Objective: 0.4417
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:53 PM: Your problem has 2622 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:53 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:53 PM: Finished problem compilation (took 1.500e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2622
  constraints   = 5122
  nnz(P)        = 0
  nnz(A)        = 44650
  cones (total) = 1
    : Nonnegative = 1,  numel = 5122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.80e-01  8.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.8283e-01  +5.3594e+02  5.35e+02  4.20e-01  5.23e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3350e-01  +6.2211e+01  6.17e+01  1.58e-01  2.48e+01  1.50e-02  2.63e-01  9.15e-01  
  3  +5.0871e-01  +1.5997e+01  1.55e+01  1.04e-01  1.63e+01  4.01e-05  2.47e-01  2.54e-01  
  4  +5.0063e-01  +1.3666e+00  8.66e-01  8.51e-03  1.39e+00  6.93e-06  1.22e-01  8.36e-01  
  5  +5.0029e-01  +9.6273e-01  4.62e-01  4.47e-03  7.38e-01  8.23e-06  6.71e-02  5.41e-01  
  6  +5.0016e-01  +9.1238e-01  4.12e-01  3.57e-03  5.91e-01  1.63e-05  2.15e-02  7.87e-01  
  7  +4.9835e-01  +8.5454e-01  3.56e-01  4.66e-04  7.84e-02  1.72e-04  1.43e-03  9.43e-01  
  8  +4.9477e-01  +7.9204e-01  2.97e-01  2.58e-04  4.34e-02  2.00e-04  7.91e-04  5.09e-01  
  9  +4.9212e-01  +7.6091e-01  2.69e-01  1.90e-04  3.20e-02  1.74e-04  5.87e-04  3.96e-01  
 10  +4.9120e-01  +7.4450e-01  2.53e-01  1.82e-04  3.07e-02  1.40e-04  5.66e-04  1.41e-01  
 11  +4.8878e-01  +6.9960e-01  2.11e-01  1.56e-04  2.62e-02  2.78e-05  4.93e-04  6.65e-01  
 12  +4.7593e-01  +6.1890e-01  1.43e-01  7.91e-05  1.33e-02  1.96e-05  2.63e-04  5.73e-01  
 13  +4.6741e-01  +5.7046e-01  1.03e-01  5.50e-05  9.20e-03  8.95e-06  1.92e-04  6.55e-01  
 14  +4.5412e-01  +5.0239e-01  4.83e-02  2.34e-05  3.91e-03  3.75e-06  8.72e-05  6.05e-01  
 15  +4.5327e-01  +4.9870e-01  4.54e-02  2.13e-05  3.55e-03  3.65e-06  7.91e-05  1.60e-01  
 16  +4.5234e-01  +4.9426e-01  4.19e-02  1.99e-05  3.32e-03  3.35e-06  7.59e-05  3.46e-01  
 17  +4.4634e-01  +4.6670e-01  2.04e-02  8.90e-06  1.49e-03  1.81e-06  3.51e-05  7.18e-01  
 18  +4.4205e-01  +4.4830e-01  6.25e-03  2.67e-06  4.46e-04  5.63e-07  1.11e-05  9.43e-01  
 19  +4.4017e-01  +4.4066e-01  4.92e-04  2.07e-07  3.46e-05  4.26e-08  8.92e-07  9.73e-01  
 20  +4.4000e-01  +4.4001e-01  5.08e-06  2.14e-09  3.57e-07  4.39e-10  9.25e-09  9.90e-01  
 21  +4.4000e-01  +4.4000e-01  5.08e-08  2.14e-11  3.57e-09  4.39e-12  9.25e-11  9.90e-01  
 22  +4.4000e-01  +4.4000e-01  5.08e-10  2.14e-13  3.57e-11  4.41e-14  9.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.0349ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:53 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:53 PM: Optimal value: 4.400e-01
(CVXPY) Aug 31 04:59:53 PM: Compilation took 1.500e-02 seconds
(CVXPY) Aug 31 04:59:53 PM: Solver (including time spent in interface) took 6.566e-02 seconds
Iteration: 12, Objective: 0.4400
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:54 PM: Your problem has 2632 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Finished problem compilation (took 1.510e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2632
  constraints   = 5132
  nnz(P)        = 0
  nnz(A)        = 45221
  cones (total) = 1
    : Nonnegative = 1,  numel = 5132

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.80e-01  8.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.8281e-01  +5.3583e+02  5.35e+02  4.20e-01  5.23e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3346e-01  +6.2144e+01  6.16e+01  1.57e-01  2.47e+01  1.50e-02  2.62e-01  9.15e-01  
  3  +5.0869e-01  +1.5974e+01  1.55e+01  1.04e-01  1.62e+01  4.01e-05  2.46e-01  2.55e-01  
  4  +5.0062e-01  +1.3497e+00  8.49e-01  8.35e-03  1.37e+00  6.90e-06  1.20e-01  8.46e-01  
  5  +5.0030e-01  +9.7629e-01  4.76e-01  4.61e-03  7.60e-01  8.42e-06  6.65e-02  5.35e-01  
  6  +5.0015e-01  +9.1669e-01  4.17e-01  3.42e-03  5.68e-01  1.91e-05  1.81e-02  8.33e-01  
  7  +4.9831e-01  +8.7846e-01  3.80e-01  4.75e-04  8.00e-02  1.83e-04  1.45e-03  9.25e-01  
  8  +4.9393e-01  +7.9501e-01  3.01e-01  2.40e-04  4.04e-02  2.07e-04  7.37e-04  5.68e-01  
  9  +4.9376e-01  +7.7709e-01  2.83e-01  2.01e-04  3.39e-02  1.36e-04  6.13e-04  4.69e-01  
 10  +4.9101e-01  +7.3391e-01  2.43e-01  1.81e-04  3.04e-02  6.58e-05  5.61e-04  3.85e-01  
 11  +4.7938e-01  +6.4836e-01  1.69e-01  9.70e-05  1.63e-02  4.16e-05  3.15e-04  5.85e-01  
 12  +4.7236e-01  +6.0693e-01  1.35e-01  7.36e-05  1.23e-02  2.95e-05  2.47e-04  2.81e-01  
 13  +4.6148e-01  +5.4308e-01  8.16e-02  4.16e-05  6.96e-03  7.05e-06  1.47e-04  8.24e-01  
 14  +4.5246e-01  +4.9687e-01  4.44e-02  2.11e-05  3.52e-03  3.76e-06  7.73e-05  5.76e-01  
 15  +4.5181e-01  +4.9434e-01  4.25e-02  1.96e-05  3.28e-03  3.68e-06  7.19e-05  2.00e-01  
 16  +4.4905e-01  +4.8085e-01  3.18e-02  1.43e-05  2.39e-03  2.84e-06  5.31e-05  4.67e-01  
 17  +4.4420e-01  +4.5836e-01  1.42e-02  6.12e-06  1.02e-03  1.34e-06  2.33e-05  7.79e-01  
 18  +4.4366e-01  +4.5551e-01  1.18e-02  5.09e-06  8.50e-04  1.15e-06  1.94e-05  7.46e-01  
 19  +4.4264e-01  +4.5139e-01  8.75e-03  3.67e-06  6.13e-04  8.66e-07  1.41e-05  4.32e-01  
 20  +4.4117e-01  +4.4547e-01  4.30e-03  1.77e-06  2.95e-04  4.27e-07  6.91e-06  5.83e-01  
 21  +4.3996e-01  +4.4066e-01  7.05e-04  2.83e-07  4.72e-05  7.12e-08  1.14e-06  9.90e-01  
 22  +4.3970e-01  +4.3972e-01  1.29e-05  5.14e-09  8.58e-07  1.31e-09  2.08e-08  9.86e-01  
 23  +4.3970e-01  +4.3970e-01  1.29e-07  5.15e-11  8.59e-09  1.31e-11  2.08e-10  9.90e-01  
 24  +4.3970e-01  +4.3970e-01  1.29e-09  5.15e-13  8.59e-11  1.34e-13  2.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.6972ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:54 PM: Optimal value: 4.397e-01
(CVXPY) Aug 31 04:59:54 PM: Compilation took 1.510e-02 seconds
(CVXPY) Aug 31 04:59:54 PM: Solver (including time spent in interface) took 7.290e-02 seconds
Iteration: 13, Objective: 0.4397
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:54 PM: Your problem has 2642 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Finished problem compilation (took 1.698e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2642
  constraints   = 5142
  nnz(P)        = 0
  nnz(A)        = 45828
  cones (total) = 1
    : Nonnegative = 1,  numel = 5142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.8267e-01  +5.3589e+02  5.35e+02  4.20e-01  5.22e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3339e-01  +6.2096e+01  6.16e+01  1.57e-01  2.46e+01  1.50e-02  2.62e-01  9.16e-01  
  3  +5.0868e-01  +1.5963e+01  1.55e+01  1.04e-01  1.62e+01  4.02e-05  2.46e-01  2.56e-01  
  4  +5.0063e-01  +1.3822e+00  8.82e-01  8.68e-03  1.42e+00  7.00e-06  1.22e-01  8.31e-01  
  5  +5.0030e-01  +9.9151e-01  4.91e-01  4.76e-03  7.84e-01  8.54e-06  6.74e-02  5.37e-01  
  6  +5.0012e-01  +9.4946e-01  4.49e-01  3.39e-03  5.63e-01  2.27e-05  1.57e-02  9.03e-01  
  7  +4.9789e-01  +8.9688e-01  3.99e-01  4.54e-04  7.64e-02  1.94e-04  1.38e-03  9.20e-01  
  8  +4.9364e-01  +8.1650e-01  3.23e-01  2.64e-04  4.44e-02  1.95e-04  8.07e-04  4.90e-01  
  9  +4.9148e-01  +7.8082e-01  2.89e-01  2.00e-04  3.36e-02  1.44e-04  6.14e-04  4.54e-01  
 10  +4.8974e-01  +7.5170e-01  2.62e-01  1.91e-04  3.21e-02  9.62e-05  5.94e-04  1.99e-01  
 11  +4.7690e-01  +6.4325e-01  1.66e-01  9.44e-05  1.58e-02  3.34e-05  3.09e-04  7.68e-01  
 12  +4.6968e-01  +5.9979e-01  1.30e-01  7.15e-05  1.20e-02  1.40e-05  2.44e-04  6.23e-01  
 13  +4.5553e-01  +5.2355e-01  6.80e-02  3.39e-05  5.66e-03  6.21e-06  1.23e-04  5.80e-01  
 14  +4.4848e-01  +4.8862e-01  4.01e-02  1.84e-05  3.08e-03  3.73e-06  6.87e-05  5.58e-01  
 15  +4.4806e-01  +4.8672e-01  3.87e-02  1.81e-05  3.02e-03  3.46e-06  6.81e-05  6.03e-02  
 16  +4.4520e-01  +4.7429e-01  2.91e-02  1.28e-05  2.14e-03  2.72e-06  4.84e-05  4.17e-01  
 17  +4.4231e-01  +4.6057e-01  1.83e-02  7.76e-06  1.29e-03  1.77e-06  2.97e-05  7.82e-01  
 18  +4.4125e-01  +4.5558e-01  1.43e-02  6.08e-06  1.01e-03  1.41e-06  2.35e-05  8.93e-01  
 19  +4.3868e-01  +4.4524e-01  6.56e-03  2.72e-06  4.54e-04  6.62e-07  1.07e-05  6.73e-01  
 20  +4.3661e-01  +4.3705e-01  4.44e-04  1.83e-07  3.04e-05  4.30e-08  7.35e-07  9.79e-01  
 21  +4.3645e-01  +4.3646e-01  4.76e-06  1.96e-09  3.26e-07  4.59e-10  7.90e-09  9.89e-01  
 22  +4.3645e-01  +4.3645e-01  4.76e-08  1.96e-11  3.26e-09  4.59e-12  7.91e-11  9.90e-01  
 23  +4.3645e-01  +4.3645e-01  4.76e-10  1.96e-13  3.26e-11  4.60e-14  7.92e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.1824ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:54 PM: Optimal value: 4.365e-01
(CVXPY) Aug 31 04:59:54 PM: Compilation took 1.698e-02 seconds
(CVXPY) Aug 31 04:59:54 PM: Solver (including time spent in interface) took 6.694e-02 seconds
Iteration: 14, Objective: 0.4365
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:54 PM: Your problem has 2652 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Finished problem compilation (took 1.700e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2652
  constraints   = 5152
  nnz(P)        = 0
  nnz(A)        = 46594
  cones (total) = 1
    : Nonnegative = 1,  numel = 5152

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.8256e-01  +5.3598e+02  5.35e+02  4.21e-01  5.22e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3334e-01  +6.2060e+01  6.15e+01  1.57e-01  2.45e+01  1.50e-02  2.62e-01  9.17e-01  
  3  +5.0867e-01  +1.5955e+01  1.54e+01  1.04e-01  1.62e+01  4.03e-05  2.45e-01  2.58e-01  
  4  +5.0064e-01  +1.3889e+00  8.88e-01  8.75e-03  1.43e+00  7.03e-06  1.22e-01  8.28e-01  
  5  +5.0028e-01  +9.7198e-01  4.72e-01  4.57e-03  7.53e-01  8.70e-06  6.38e-02  5.70e-01  
  6  +5.0006e-01  +9.5956e-01  4.59e-01  3.12e-03  5.20e-01  2.80e-05  1.31e-02  9.16e-01  
  7  +4.9747e-01  +9.1099e-01  4.14e-01  4.33e-04  7.30e-02  2.19e-04  1.32e-03  9.01e-01  
  8  +4.9409e-01  +8.4658e-01  3.52e-01  2.99e-04  5.03e-02  2.05e-04  9.14e-04  3.69e-01  
  9  +4.9159e-01  +8.0023e-01  3.09e-01  2.25e-04  3.79e-02  1.53e-04  6.92e-04  4.25e-01  
 10  +4.9035e-01  +7.5566e-01  2.65e-01  1.97e-04  3.32e-02  6.42e-05  6.13e-04  4.84e-01  
 11  +4.8213e-01  +6.7534e-01  1.93e-01  1.26e-04  2.12e-02  2.04e-05  4.07e-04  7.40e-01  
 12  +4.7354e-01  +6.2350e-01  1.50e-01  8.77e-05  1.47e-02  1.51e-05  2.93e-04  3.45e-01  
 13  +4.6703e-01  +5.8530e-01  1.18e-01  6.47e-05  1.08e-02  9.28e-06  2.23e-04  6.51e-01  
 14  +4.6118e-01  +5.5306e-01  9.19e-02  4.70e-05  7.86e-03  6.94e-06  1.65e-04  8.03e-01  
 15  +4.5055e-01  +5.0024e-01  4.97e-02  2.34e-05  3.91e-03  3.70e-06  8.58e-05  5.17e-01  
 16  +4.4989e-01  +4.9746e-01  4.76e-02  2.19e-05  3.66e-03  3.64e-06  8.04e-05  1.30e-01  
 17  +4.4677e-01  +4.8254e-01  3.58e-02  1.57e-05  2.62e-03  3.22e-06  5.81e-05  7.87e-01  
 18  +4.4165e-01  +4.5979e-01  1.81e-02  7.76e-06  1.29e-03  1.76e-06  2.96e-05  9.88e-01  
 19  +4.3952e-01  +4.5100e-01  1.15e-02  4.86e-06  8.10e-04  1.08e-06  1.89e-05  9.90e-01  
 20  +4.3656e-01  +4.3873e-01  2.17e-03  9.06e-07  1.51e-04  2.03e-07  3.63e-06  8.28e-01  
 21  +4.3583e-01  +4.3594e-01  1.02e-04  4.20e-08  7.00e-06  9.37e-09  1.69e-07  9.72e-01  
 22  +4.3580e-01  +4.3580e-01  1.02e-06  4.22e-10  7.04e-08  9.42e-11  1.71e-09  9.90e-01  
 23  +4.3580e-01  +4.3580e-01  1.02e-08  4.22e-12  7.04e-10  9.46e-13  1.71e-11  9.90e-01  
 24  +4.3580e-01  +4.3580e-01  1.02e-10  4.22e-14  7.04e-12  9.51e-15  1.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.4068ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:54 PM: Optimal value: 4.358e-01
(CVXPY) Aug 31 04:59:54 PM: Compilation took 1.700e-02 seconds
(CVXPY) Aug 31 04:59:54 PM: Solver (including time spent in interface) took 7.300e-02 seconds
Iteration: 15, Objective: 0.4358
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:54 PM: Your problem has 2662 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Finished problem compilation (took 1.701e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2662
  constraints   = 5162
  nnz(P)        = 0
  nnz(A)        = 46956
  cones (total) = 1
    : Nonnegative = 1,  numel = 5162

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.8250e-01  +5.3606e+02  5.35e+02  4.21e-01  5.21e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3330e-01  +6.2028e+01  6.15e+01  1.57e-01  2.45e+01  1.50e-02  2.62e-01  9.18e-01  
  3  +5.0866e-01  +1.5945e+01  1.54e+01  1.04e-01  1.61e+01  4.03e-05  2.45e-01  2.59e-01  
  4  +5.0064e-01  +1.3823e+00  8.82e-01  8.70e-03  1.42e+00  7.01e-06  1.21e-01  8.32e-01  
  5  +5.0029e-01  +9.7384e-01  4.74e-01  4.59e-03  7.56e-01  8.70e-06  6.36e-02  5.65e-01  
  6  +5.0007e-01  +9.5620e-01  4.56e-01  3.13e-03  5.21e-01  2.75e-05  1.32e-02  9.11e-01  
  7  +4.9761e-01  +9.0902e-01  4.11e-01  4.39e-04  7.40e-02  2.14e-04  1.33e-03  9.02e-01  
  8  +4.9446e-01  +8.4888e-01  3.54e-01  3.07e-04  5.16e-02  2.03e-04  9.36e-04  3.60e-01  
  9  +4.9198e-01  +8.0384e-01  3.12e-01  2.31e-04  3.88e-02  1.56e-04  7.08e-04  4.16e-01  
 10  +4.9095e-01  +7.7878e-01  2.88e-01  2.15e-04  3.61e-02  1.14e-04  6.63e-04  2.23e-01  
 11  +4.8843e-01  +7.3734e-01  2.49e-01  1.86e-04  3.13e-02  6.18e-05  5.83e-04  3.90e-01  
 12  +4.8047e-01  +6.8057e-01  2.00e-01  1.26e-04  2.10e-02  5.03e-05  4.05e-04  3.61e-01  
 13  +4.7660e-01  +6.4785e-01  1.71e-01  1.03e-04  1.73e-02  2.34e-05  3.40e-04  5.56e-01  
 14  +4.6395e-01  +5.7280e-01  1.09e-01  5.73e-05  9.57e-03  1.09e-05  1.98e-04  6.46e-01  
 15  +4.6200e-01  +5.6201e-01  1.00e-01  5.07e-05  8.46e-03  9.49e-06  1.76e-04  3.58e-01  
 16  +4.5469e-01  +5.2397e-01  6.93e-02  3.25e-05  5.43e-03  5.72e-06  1.16e-04  9.58e-01  
 17  +4.5132e-01  +5.0859e-01  5.73e-02  2.62e-05  4.37e-03  4.82e-06  9.54e-05  3.25e-01  
 18  +4.4201e-01  +4.6619e-01  2.42e-02  1.05e-05  1.74e-03  2.14e-06  4.02e-05  8.38e-01  
 19  +4.3927e-01  +4.5438e-01  1.51e-02  6.37e-06  1.06e-03  1.37e-06  2.49e-05  4.53e-01  
 20  +4.3888e-01  +4.5174e-01  1.29e-02  5.47e-06  9.12e-04  1.21e-06  2.17e-05  7.40e-01  
 21  +4.3864e-01  +4.5074e-01  1.21e-02  5.14e-06  8.56e-04  1.15e-06  2.04e-05  2.04e-01  
 22  +4.3726e-01  +4.4520e-01  7.94e-03  3.34e-06  5.57e-04  7.73e-07  1.33e-05  5.12e-01  
 23  +4.3525e-01  +4.3747e-01  2.22e-03  9.20e-07  1.53e-04  2.11e-07  3.73e-06  8.65e-01  
 24  +4.3451e-01  +4.3455e-01  3.54e-05  1.46e-08  2.44e-06  3.34e-09  5.97e-08  9.84e-01  
 25  +4.3450e-01  +4.3450e-01  3.54e-07  1.46e-10  2.44e-08  3.34e-11  5.97e-10  9.90e-01  
 26  +4.3450e-01  +4.3450e-01  3.54e-09  1.46e-12  2.44e-10  3.35e-13  5.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.3888ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:54 PM: Optimal value: 4.345e-01
(CVXPY) Aug 31 04:59:54 PM: Compilation took 1.701e-02 seconds
(CVXPY) Aug 31 04:59:54 PM: Solver (including time spent in interface) took 7.777e-02 seconds
Iteration: 16, Objective: 0.4345
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:54 PM: Your problem has 2672 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:54 PM: Finished problem compilation (took 1.700e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2672
  constraints   = 5172
  nnz(P)        = 0
  nnz(A)        = 47712
  cones (total) = 1
    : Nonnegative = 1,  numel = 5172

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.8233e-01  +5.3622e+02  5.36e+02  4.22e-01  5.21e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3322e-01  +6.1978e+01  6.14e+01  1.57e-01  2.44e+01  1.51e-02  2.62e-01  9.19e-01  
  3  +5.0865e-01  +1.5933e+01  1.54e+01  1.04e-01  1.61e+01  4.04e-05  2.45e-01  2.61e-01  
  4  +5.0065e-01  +1.4095e+00  9.09e-01  8.97e-03  1.47e+00  7.09e-06  1.22e-01  8.21e-01  
  5  +5.0028e-01  +9.7245e-01  4.72e-01  4.58e-03  7.54e-01  8.75e-06  6.30e-02  5.79e-01  
  6  +5.0009e-01  +9.8328e-01  4.83e-01  3.43e-03  5.70e-01  2.61e-05  1.48e-02  8.90e-01  
  7  +4.9758e-01  +9.2666e-01  4.29e-01  4.74e-04  7.98e-02  2.05e-04  1.44e-03  9.05e-01  
  8  +4.9432e-01  +8.5662e-01  3.62e-01  3.28e-04  5.51e-02  1.85e-04  9.99e-04  3.74e-01  
  9  +4.9318e-01  +8.0842e-01  3.15e-01  2.53e-04  4.26e-02  1.12e-04  7.72e-04  5.07e-01  
 10  +4.9061e-01  +7.7223e-01  2.82e-01  1.99e-04  3.35e-02  8.71e-05  6.12e-04  3.85e-01  
 11  +4.8759e-01  +7.1850e-01  2.31e-01  1.74e-04  2.93e-02  2.51e-05  5.47e-04  5.74e-01  
 12  +4.8199e-01  +6.8318e-01  2.01e-01  1.33e-04  2.22e-02  2.30e-05  4.25e-04  2.48e-01  
 13  +4.6985e-01  +6.0671e-01  1.37e-01  7.65e-05  1.28e-02  1.15e-05  2.57e-04  6.89e-01  
 14  +4.6165e-01  +5.6383e-01  1.02e-01  5.28e-05  8.81e-03  8.07e-06  1.84e-04  4.92e-01  
 15  +4.5431e-01  +5.2739e-01  7.31e-02  3.56e-05  5.94e-03  5.68e-06  1.29e-04  3.80e-01  
 16  +4.5016e-01  +5.0687e-01  5.67e-02  2.65e-05  4.43e-03  4.55e-06  9.75e-05  4.08e-01  
 17  +4.4555e-01  +4.8323e-01  3.77e-02  1.67e-05  2.79e-03  3.52e-06  6.28e-05  9.90e-01  
 18  +4.3939e-01  +4.5643e-01  1.70e-02  7.34e-06  1.22e-03  1.60e-06  2.87e-05  6.32e-01  
 19  +4.3914e-01  +4.5537e-01  1.62e-02  6.93e-06  1.16e-03  1.54e-06  2.71e-05  1.03e-01  
 20  +4.3751e-01  +4.4763e-01  1.01e-02  4.29e-06  7.15e-04  9.98e-07  1.69e-05  9.90e-01  
 21  +4.3500e-01  +4.3776e-01  2.76e-03  1.15e-06  1.92e-04  2.65e-07  4.68e-06  9.90e-01  
 22  +4.3410e-01  +4.3426e-01  1.58e-04  6.56e-08  1.09e-05  1.50e-08  2.69e-07  9.47e-01  
 23  +4.3405e-01  +4.3405e-01  1.73e-06  7.17e-10  1.19e-07  1.64e-10  2.95e-09  9.89e-01  
 24  +4.3405e-01  +4.3405e-01  1.73e-08  7.17e-12  1.19e-09  1.64e-12  2.95e-11  9.90e-01  
 25  +4.3405e-01  +4.3405e-01  1.73e-10  7.16e-14  1.19e-11  1.65e-14  2.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.3011ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:54 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:54 PM: Optimal value: 4.341e-01
(CVXPY) Aug 31 04:59:54 PM: Compilation took 1.700e-02 seconds
(CVXPY) Aug 31 04:59:54 PM: Solver (including time spent in interface) took 8.308e-02 seconds
Iteration: 17, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:55 PM: Your problem has 2682 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Finished problem compilation (took 1.715e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2682
  constraints   = 5182
  nnz(P)        = 0
  nnz(A)        = 48155
  cones (total) = 1
    : Nonnegative = 1,  numel = 5182

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.8215e-01  +5.3640e+02  5.36e+02  4.22e-01  5.20e+01  3.81e-03  5.64e-01  5.96e-01  
  2  +5.3317e-01  +6.1955e+01  6.14e+01  1.57e-01  2.43e+01  1.51e-02  2.62e-01  9.20e-01  
  3  +5.0864e-01  +1.5932e+01  1.54e+01  1.04e-01  1.61e+01  4.06e-05  2.45e-01  2.62e-01  
  4  +5.0067e-01  +1.4347e+00  9.34e-01  9.23e-03  1.51e+00  7.15e-06  1.24e-01  8.10e-01  
  5  +5.0029e-01  +9.8967e-01  4.89e-01  4.75e-03  7.82e-01  8.87e-06  6.48e-02  5.75e-01  
  6  +5.0006e-01  +9.5281e-01  4.53e-01  3.32e-03  5.52e-01  2.47e-05  1.49e-02  8.71e-01  
  7  +4.9737e-01  +9.0249e-01  4.05e-01  4.51e-04  7.59e-02  2.08e-04  1.37e-03  9.10e-01  
  8  +4.9413e-01  +8.4202e-01  3.48e-01  3.18e-04  5.34e-02  1.91e-04  9.72e-04  3.59e-01  
  9  +4.9211e-01  +7.9607e-01  3.04e-01  2.29e-04  3.85e-02  1.29e-04  7.01e-04  5.44e-01  
 10  +4.9057e-01  +7.5309e-01  2.63e-01  2.00e-04  3.36e-02  5.40e-05  6.19e-04  5.10e-01  
 11  +4.8274e-01  +6.8245e-01  2.00e-01  1.30e-04  2.18e-02  2.04e-05  4.14e-04  7.57e-01  
 12  +4.7514e-01  +6.3632e-01  1.61e-01  9.70e-05  1.62e-02  1.32e-05  3.19e-04  5.16e-01  
 13  +4.6505e-01  +5.8189e-01  1.17e-01  6.32e-05  1.05e-02  9.16e-06  2.17e-04  4.09e-01  
 14  +4.5592e-01  +5.3615e-01  8.02e-02  4.01e-05  6.68e-03  6.12e-06  1.43e-04  4.25e-01  
 15  +4.4867e-01  +5.0054e-01  5.19e-02  2.43e-05  4.04e-03  4.13e-06  8.95e-05  6.24e-01  
 16  +4.4616e-01  +4.8819e-01  4.20e-02  1.91e-05  3.17e-03  3.66e-06  7.10e-05  6.08e-01  
 17  +4.4056e-01  +4.6342e-01  2.29e-02  1.00e-05  1.67e-03  1.99e-06  3.88e-05  5.05e-01  
 18  +4.3960e-01  +4.5928e-01  1.97e-02  8.55e-06  1.42e-03  1.73e-06  3.32e-05  1.78e-01  
 19  +4.3736e-01  +4.4882e-01  1.15e-02  4.87e-06  8.11e-04  1.11e-06  1.92e-05  9.90e-01  
 20  +4.3432e-01  +4.3662e-01  2.30e-03  9.63e-07  1.60e-04  2.20e-07  3.91e-06  8.62e-01  
 21  +4.3357e-01  +4.3362e-01  5.09e-05  2.12e-08  3.54e-06  4.82e-09  8.71e-08  9.84e-01  
 22  +4.3355e-01  +4.3355e-01  5.09e-07  2.12e-10  3.54e-08  4.82e-11  8.71e-10  9.90e-01  
 23  +4.3355e-01  +4.3355e-01  5.09e-09  2.12e-12  3.54e-10  4.84e-13  8.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.9901ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:55 PM: Optimal value: 4.336e-01
(CVXPY) Aug 31 04:59:55 PM: Compilation took 1.715e-02 seconds
(CVXPY) Aug 31 04:59:55 PM: Solver (including time spent in interface) took 7.895e-02 seconds
Iteration: 18, Objective: 0.4336
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:55 PM: Your problem has 2692 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Finished problem compilation (took 1.809e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2692
  constraints   = 5192
  nnz(P)        = 0
  nnz(A)        = 48448
  cones (total) = 1
    : Nonnegative = 1,  numel = 5192

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.26e+01  1.00e+00  1.00e+00   ------   
  1  +5.8195e-01  +5.3676e+02  5.36e+02  4.23e-01  5.20e+01  3.81e-03  5.64e-01  5.95e-01  
  2  +5.3300e-01  +6.1831e+01  6.13e+01  1.57e-01  2.42e+01  1.52e-02  2.62e-01  9.22e-01  
  3  +5.0862e-01  +1.5913e+01  1.54e+01  1.04e-01  1.60e+01  4.08e-05  2.45e-01  2.66e-01  
  4  +5.0068e-01  +1.4482e+00  9.48e-01  9.38e-03  1.53e+00  7.19e-06  1.23e-01  8.06e-01  
  5  +5.0031e-01  +1.0302e+00  5.30e-01  5.15e-03  8.47e-01  9.20e-06  6.68e-02  5.56e-01  
  6  +5.0001e-01  +9.3432e-01  4.34e-01  2.98e-03  4.94e-01  2.78e-05  1.25e-02  8.99e-01  
  7  +4.9719e-01  +8.8798e-01  3.91e-01  4.33e-04  7.28e-02  2.11e-04  1.31e-03  8.97e-01  
  8  +4.9322e-01  +8.1607e-01  3.23e-01  2.88e-04  4.83e-02  1.71e-04  8.79e-04  4.58e-01  
  9  +4.9418e-01  +7.9827e-01  3.04e-01  2.46e-04  4.13e-02  8.51e-05  7.43e-04  6.10e-01  
 10  +4.8745e-01  +7.3624e-01  2.49e-01  1.51e-04  2.53e-02  6.37e-05  4.64e-04  6.22e-01  
 11  +4.7932e-01  +6.8030e-01  2.01e-01  1.18e-04  1.98e-02  3.90e-05  3.79e-04  3.38e-01  
 12  +4.6331e-01  +5.8494e-01  1.22e-01  6.41e-05  1.07e-02  1.72e-05  2.21e-04  5.47e-01  
 13  +4.5944e-01  +5.6544e-01  1.06e-01  5.42e-05  9.04e-03  1.33e-05  1.90e-04  3.16e-01  
 14  +4.4862e-01  +5.1168e-01  6.31e-02  3.01e-05  5.02e-03  7.14e-06  1.11e-04  5.01e-01  
 15  +4.4485e-01  +4.9334e-01  4.85e-02  2.26e-05  3.75e-03  5.27e-06  8.50e-05  3.77e-01  
 16  +4.4060e-01  +4.7336e-01  3.28e-02  1.49e-05  2.47e-03  3.48e-06  5.74e-05  4.06e-01  
 17  +4.3612e-01  +4.5248e-01  1.64e-02  7.23e-06  1.20e-03  1.69e-06  2.87e-05  6.31e-01  
 18  +4.3452e-01  +4.4444e-01  9.92e-03  4.32e-06  7.19e-04  9.44e-07  1.73e-05  9.90e-01  
 19  +4.3174e-01  +4.3313e-01  1.40e-03  6.03e-07  1.00e-04  1.30e-07  2.48e-06  9.04e-01  
 20  +4.3129e-01  +4.3133e-01  4.09e-05  1.76e-08  2.93e-06  3.77e-09  7.29e-08  9.79e-01  
 21  +4.3128e-01  +4.3128e-01  4.10e-07  1.77e-10  2.94e-08  3.78e-11  7.30e-10  9.90e-01  
 22  +4.3128e-01  +4.3128e-01  4.10e-09  1.77e-12  2.94e-10  3.79e-13  7.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.6503ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:55 PM: Optimal value: 4.313e-01
(CVXPY) Aug 31 04:59:55 PM: Compilation took 1.809e-02 seconds
(CVXPY) Aug 31 04:59:55 PM: Solver (including time spent in interface) took 7.699e-02 seconds
Iteration: 19, Objective: 0.4313
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:55 PM: Your problem has 2702 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Finished problem compilation (took 1.818e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2702
  constraints   = 5202
  nnz(P)        = 0
  nnz(A)        = 48808
  cones (total) = 1
    : Nonnegative = 1,  numel = 5202

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.26e+01  1.00e+00  1.00e+00   ------   
  1  +5.8181e-01  +5.3690e+02  5.36e+02  4.23e-01  5.19e+01  3.81e-03  5.64e-01  5.95e-01  
  2  +5.3289e-01  +6.1726e+01  6.12e+01  1.57e-01  2.42e+01  1.52e-02  2.61e-01  9.23e-01  
  3  +5.0860e-01  +1.5894e+01  1.54e+01  1.04e-01  1.60e+01  4.10e-05  2.44e-01  2.68e-01  
  4  +5.0066e-01  +1.4224e+00  9.22e-01  9.13e-03  1.49e+00  7.14e-06  1.21e-01  8.20e-01  
  5  +5.0032e-01  +1.0384e+00  5.38e-01  5.23e-03  8.59e-01  9.83e-06  6.33e-02  5.80e-01  
  6  +5.0002e-01  +9.6459e-01  4.65e-01  3.03e-03  5.03e-01  3.11e-05  1.21e-02  8.83e-01  
  7  +4.9737e-01  +9.1325e-01  4.16e-01  4.62e-04  7.77e-02  2.14e-04  1.39e-03  8.90e-01  
  8  +4.9244e-01  +8.1987e-01  3.27e-01  2.81e-04  4.71e-02  1.69e-04  8.57e-04  5.16e-01  
  9  +4.9022e-01  +8.0074e-01  3.11e-01  2.15e-04  3.60e-02  1.63e-04  6.57e-04  3.69e-01  
 10  +4.8683e-01  +7.5426e-01  2.67e-01  1.89e-04  3.16e-02  9.60e-05  5.88e-04  3.11e-01  
 11  +4.7551e-01  +6.6960e-01  1.94e-01  1.15e-04  1.92e-02  5.41e-05  3.76e-04  5.29e-01  
 12  +4.6321e-01  +5.9511e-01  1.32e-01  7.15e-05  1.19e-02  2.57e-05  2.48e-04  5.12e-01  
 13  +4.5474e-01  +5.4908e-01  9.43e-02  4.81e-05  8.01e-03  1.47e-05  1.74e-04  4.74e-01  
 14  +4.4729e-01  +5.1026e-01  6.30e-02  3.05e-05  5.07e-03  8.24e-06  1.14e-04  5.34e-01  
 15  +4.4332e-01  +4.9020e-01  4.69e-02  2.21e-05  3.67e-03  5.67e-06  8.44e-05  4.26e-01  
 16  +4.3683e-01  +4.5887e-01  2.20e-02  1.00e-05  1.67e-03  2.46e-06  3.99e-05  6.59e-01  
 17  +4.3576e-01  +4.5399e-01  1.82e-02  8.20e-06  1.36e-03  2.02e-06  3.28e-05  2.24e-01  
 18  +4.3373e-01  +4.4386e-01  1.01e-02  4.48e-06  7.45e-04  9.44e-07  1.81e-05  9.90e-01  
 19  +4.3095e-01  +4.3227e-01  1.31e-03  5.77e-07  9.59e-05  1.19e-07  2.40e-06  9.15e-01  
 20  +4.3071e-01  +4.3127e-01  5.59e-04  2.44e-07  4.06e-05  5.06e-08  1.02e-06  6.72e-01  
 21  +4.3058e-01  +4.3074e-01  1.53e-04  6.66e-08  1.11e-05  1.36e-08  2.77e-07  9.74e-01  
 22  +4.3053e-01  +4.3054e-01  2.49e-06  1.09e-09  1.80e-07  2.22e-10  4.52e-09  9.84e-01  
 23  +4.3053e-01  +4.3053e-01  2.53e-08  1.10e-11  1.83e-09  2.25e-12  4.59e-11  9.90e-01  
 24  +4.3053e-01  +4.3053e-01  2.85e-10  1.24e-13  2.06e-11  2.55e-14  5.20e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.9413ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:55 PM: Optimal value: 4.305e-01
(CVXPY) Aug 31 04:59:55 PM: Compilation took 1.818e-02 seconds
(CVXPY) Aug 31 04:59:55 PM: Solver (including time spent in interface) took 7.830e-02 seconds
Iteration: 20, Objective: 0.4305
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:55 PM: Your problem has 2712 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Finished problem compilation (took 1.802e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2712
  constraints   = 5212
  nnz(P)        = 0
  nnz(A)        = 49206
  cones (total) = 1
    : Nonnegative = 1,  numel = 5212

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.25e+01  1.00e+00  1.00e+00   ------   
  1  +5.8163e-01  +5.3713e+02  5.37e+02  4.24e-01  5.19e+01  3.81e-03  5.65e-01  5.95e-01  
  2  +5.3274e-01  +6.1586e+01  6.11e+01  1.57e-01  2.41e+01  1.53e-02  2.61e-01  9.25e-01  
  3  +5.0857e-01  +1.5869e+01  1.54e+01  1.04e-01  1.59e+01  4.12e-05  2.43e-01  2.72e-01  
  4  +5.0067e-01  +1.4326e+00  9.32e-01  9.24e-03  1.50e+00  7.19e-06  1.20e-01  8.18e-01  
  5  +5.0033e-01  +1.0692e+00  5.69e-01  5.52e-03  9.05e-01  1.12e-05  5.99e-02  6.36e-01  
  6  +4.9991e-01  +1.0226e+00  5.23e-01  2.70e-03  4.50e-01  4.37e-05  9.63e-03  9.28e-01  
  7  +4.9691e-01  +9.5325e-01  4.56e-01  4.89e-04  8.23e-02  2.21e-04  1.48e-03  8.50e-01  
  8  +4.9459e-01  +9.0079e-01  4.06e-01  4.03e-04  6.76e-02  1.82e-04  1.22e-03  2.56e-01  
  9  +4.9213e-01  +8.5589e-01  3.64e-01  2.89e-04  4.86e-02  1.48e-04  8.78e-04  4.67e-01  
 10  +4.9051e-01  +8.2712e-01  3.37e-01  2.35e-04  3.94e-02  1.19e-04  7.18e-04  3.67e-01  
 11  +4.8840e-01  +7.9084e-01  3.02e-01  2.21e-04  3.71e-02  8.01e-05  6.83e-04  2.15e-01  
 12  +4.7827e-01  +7.0455e-01  2.26e-01  1.39e-04  2.32e-02  5.04e-05  4.47e-04  4.98e-01  
 13  +4.6585e-01  +6.2281e-01  1.57e-01  8.74e-05  1.46e-02  2.80e-05  2.98e-04  4.42e-01  
 14  +4.5921e-01  +5.8390e-01  1.25e-01  6.64e-05  1.10e-02  1.95e-05  2.34e-04  3.32e-01  
 15  +4.5042e-01  +5.3544e-01  8.50e-02  4.28e-05  7.11e-03  1.20e-05  1.58e-04  4.03e-01  
 16  +4.4472e-01  +5.0498e-01  6.03e-02  2.92e-05  4.85e-03  7.90e-06  1.11e-04  4.06e-01  
 17  +4.4001e-01  +4.8003e-01  4.00e-02  1.86e-05  3.09e-03  4.68e-06  7.23e-05  5.76e-01  
 18  +4.3379e-01  +4.4997e-01  1.62e-02  7.31e-06  1.21e-03  1.74e-06  2.96e-05  7.15e-01  
 19  +4.2999e-01  +4.3267e-01  2.67e-03  1.18e-06  1.97e-04  2.80e-07  4.95e-06  8.53e-01  
 20  +4.2922e-01  +4.2929e-01  7.07e-05  3.12e-08  5.18e-06  6.97e-09  1.32e-07  9.80e-01  
 21  +4.2920e-01  +4.2920e-01  7.08e-07  3.12e-10  5.18e-08  6.97e-11  1.32e-09  9.90e-01  
 22  +4.2920e-01  +4.2920e-01  7.09e-09  3.12e-12  5.18e-10  6.98e-13  1.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.6584ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:55 PM: Optimal value: 4.292e-01
(CVXPY) Aug 31 04:59:55 PM: Compilation took 1.802e-02 seconds
(CVXPY) Aug 31 04:59:55 PM: Solver (including time spent in interface) took 7.402e-02 seconds
Iteration: 21, Objective: 0.4292
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:55 PM: Your problem has 2722 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Finished problem compilation (took 1.800e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2722
  constraints   = 5222
  nnz(P)        = 0
  nnz(A)        = 49587
  cones (total) = 1
    : Nonnegative = 1,  numel = 5222

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.24e+01  1.00e+00  1.00e+00   ------   
  1  +5.8163e-01  +5.3689e+02  5.36e+02  4.24e-01  5.18e+01  3.82e-03  5.64e-01  5.95e-01  
  2  +5.3268e-01  +6.1486e+01  6.10e+01  1.56e-01  2.40e+01  1.52e-02  2.60e-01  9.25e-01  
  3  +5.0855e-01  +1.5833e+01  1.53e+01  1.03e-01  1.59e+01  4.11e-05  2.43e-01  2.73e-01  
  4  +5.0066e-01  +1.4215e+00  9.21e-01  9.14e-03  1.49e+00  7.18e-06  1.19e-01  8.24e-01  
  5  +5.0035e-01  +1.0941e+00  5.94e-01  5.77e-03  9.45e-01  1.13e-05  6.03e-02  6.18e-01  
  6  +4.9991e-01  +1.0220e+00  5.22e-01  2.66e-03  4.43e-01  4.44e-05  9.39e-03  9.16e-01  
  7  +4.9692e-01  +9.5719e-01  4.60e-01  4.95e-04  8.31e-02  2.21e-04  1.49e-03  8.43e-01  
  8  +4.9492e-01  +9.1260e-01  4.18e-01  4.22e-04  7.09e-02  1.87e-04  1.28e-03  2.13e-01  
  9  +4.9438e-01  +8.7722e-01  3.83e-01  3.57e-04  5.99e-02  1.23e-04  1.07e-03  4.22e-01  
 10  +4.9088e-01  +8.4114e-01  3.50e-01  2.50e-04  4.19e-02  1.27e-04  7.58e-04  3.75e-01  
 11  +4.8931e-01  +7.9360e-01  3.04e-01  2.30e-04  3.86e-02  5.96e-05  7.07e-04  4.07e-01  
 12  +4.8394e-01  +7.4995e-01  2.66e-01  1.79e-04  3.00e-02  4.88e-05  5.62e-04  3.11e-01  
 13  +4.7125e-01  +6.4674e-01  1.75e-01  1.06e-04  1.77e-02  5.80e-06  3.53e-04  9.36e-01  
 14  +4.5974e-01  +5.8394e-01  1.24e-01  6.76e-05  1.12e-02  5.29e-06  2.37e-04  5.03e-01  
 15  +4.4852e-01  +5.2563e-01  7.71e-02  3.87e-05  6.43e-03  3.72e-06  1.43e-04  5.16e-01  
 16  +4.4539e-01  +5.1020e-01  6.48e-02  3.18e-05  5.28e-03  3.32e-06  1.19e-04  2.35e-01  
 17  +4.4141e-01  +4.9038e-01  4.90e-02  2.33e-05  3.86e-03  2.94e-06  8.87e-05  4.38e-01  
 18  +4.3696e-01  +4.6930e-01  3.23e-02  1.49e-05  2.48e-03  2.08e-06  5.83e-05  4.38e-01  
 19  +4.3257e-01  +4.4897e-01  1.64e-02  7.39e-06  1.23e-03  1.11e-06  2.97e-05  5.61e-01  
 20  +4.3059e-01  +4.4001e-01  9.42e-03  4.19e-06  6.95e-04  6.51e-07  1.71e-05  4.62e-01  
 21  +4.2907e-01  +4.3318e-01  4.11e-03  1.81e-06  3.01e-04  3.00e-07  7.47e-06  6.45e-01  
 22  +4.2798e-01  +4.2842e-01  4.39e-04  1.93e-07  3.20e-05  3.40e-08  8.03e-07  9.26e-01  
 23  +4.2788e-01  +4.2797e-01  9.72e-05  4.26e-08  7.07e-06  7.67e-09  1.78e-07  8.08e-01  
 24  +4.2785e-01  +4.2785e-01  1.42e-06  6.23e-10  1.03e-07  1.16e-10  2.60e-09  9.90e-01  
 25  +4.2785e-01  +4.2785e-01  1.43e-08  6.29e-12  1.04e-09  1.17e-12  2.63e-11  9.90e-01  
 26  +4.2785e-01  +4.2785e-01  1.52e-10  6.68e-14  1.11e-11  1.25e-14  2.79e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.8495ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:55 PM: Optimal value: 4.278e-01
(CVXPY) Aug 31 04:59:55 PM: Compilation took 1.800e-02 seconds
(CVXPY) Aug 31 04:59:55 PM: Solver (including time spent in interface) took 8.500e-02 seconds
Iteration: 22, Objective: 0.4278
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:55 PM: Your problem has 2732 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:55 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:56 PM: Finished problem compilation (took 1.892e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2732
  constraints   = 5232
  nnz(P)        = 0
  nnz(A)        = 50119
  cones (total) = 1
    : Nonnegative = 1,  numel = 5232

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.24e+01  1.00e+00  1.00e+00   ------   
  1  +5.8168e-01  +5.3677e+02  5.36e+02  4.24e-01  5.17e+01  3.82e-03  5.64e-01  5.95e-01  
  2  +5.3266e-01  +6.1451e+01  6.09e+01  1.56e-01  2.39e+01  1.52e-02  2.60e-01  9.25e-01  
  3  +5.0854e-01  +1.5820e+01  1.53e+01  1.03e-01  1.58e+01  4.11e-05  2.43e-01  2.73e-01  
  4  +5.0066e-01  +1.4135e+00  9.13e-01  9.07e-03  1.47e+00  7.17e-06  1.18e-01  8.28e-01  
  5  +5.0037e-01  +1.1119e+00  6.12e-01  5.95e-03  9.74e-01  1.12e-05  6.16e-02  5.98e-01  
  6  +5.0002e-01  +1.1762e+00  6.76e-01  3.07e-03  5.12e-01  4.71e-05  1.04e-02  9.90e-01  
  7  +4.9744e-01  +1.0898e+00  5.92e-01  6.56e-04  1.10e-01  1.89e-04  1.98e-03  8.12e-01  
  8  +4.9256e-01  +8.8408e-01  3.92e-01  4.21e-04  7.04e-02  7.13e-05  1.30e-03  5.27e-01  
  9  +4.9175e-01  +8.5186e-01  3.60e-01  2.93e-04  4.91e-02  5.61e-05  8.95e-04  6.28e-01  
 10  +4.9131e-01  +8.2896e-01  3.38e-01  2.79e-04  4.67e-02  4.42e-05  8.52e-04  2.15e-01  
 11  +4.8811e-01  +7.9217e-01  3.04e-01  2.17e-04  3.64e-02  3.72e-05  6.71e-04  4.03e-01  
 12  +4.7572e-01  +6.7726e-01  2.02e-01  1.24e-04  2.07e-02  1.44e-05  4.03e-04  7.83e-01  
 13  +4.6781e-01  +6.3020e-01  1.62e-01  9.38e-05  1.56e-02  1.09e-05  3.17e-04  4.99e-01  
 14  +4.5968e-01  +5.8517e-01  1.25e-01  6.78e-05  1.13e-02  8.36e-06  2.38e-04  4.91e-01  
 15  +4.4877e-01  +5.2847e-01  7.97e-02  3.99e-05  6.62e-03  5.21e-06  1.47e-04  4.53e-01  
 16  +4.4478e-01  +5.0858e-01  6.38e-02  3.10e-05  5.15e-03  4.30e-06  1.16e-04  3.02e-01  
 17  +4.3946e-01  +4.8246e-01  4.30e-02  2.01e-05  3.34e-03  3.06e-06  7.76e-05  4.71e-01  
 18  +4.3564e-01  +4.6439e-01  2.87e-02  1.31e-05  2.18e-03  2.12e-06  5.18e-05  4.23e-01  
 19  +4.3018e-01  +4.3931e-01  9.13e-03  4.05e-06  6.71e-04  6.98e-07  1.66e-05  7.51e-01  
 20  +4.2882e-01  +4.3316e-01  4.34e-03  1.91e-06  3.16e-04  3.53e-07  7.92e-06  6.96e-01  
 21  +4.2766e-01  +4.2824e-01  5.76e-04  2.52e-07  4.18e-05  4.71e-08  1.06e-06  8.84e-01  
 22  +4.2749e-01  +4.2750e-01  1.83e-05  8.00e-09  1.33e-06  1.51e-09  3.38e-08  9.72e-01  
 23  +4.2748e-01  +4.2748e-01  1.83e-07  8.01e-11  1.33e-08  1.51e-11  3.38e-10  9.90e-01  
 24  +4.2748e-01  +4.2748e-01  1.89e-09  8.28e-13  1.37e-10  1.57e-13  3.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.8436ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:56 PM: Optimal value: 4.275e-01
(CVXPY) Aug 31 04:59:56 PM: Compilation took 1.892e-02 seconds
(CVXPY) Aug 31 04:59:56 PM: Solver (including time spent in interface) took 8.361e-02 seconds
Iteration: 23, Objective: 0.4275
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:56 PM: Your problem has 2735 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:56 PM: Finished problem compilation (took 1.906e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2735
  constraints   = 5235
  nnz(P)        = 0
  nnz(A)        = 50333
  cones (total) = 1
    : Nonnegative = 1,  numel = 5235

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.24e+01  1.00e+00  1.00e+00   ------   
  1  +5.8168e-01  +5.3673e+02  5.36e+02  4.24e-01  5.17e+01  3.82e-03  5.64e-01  5.96e-01  
  2  +5.3268e-01  +6.1469e+01  6.09e+01  1.56e-01  2.39e+01  1.52e-02  2.60e-01  9.25e-01  
  3  +5.0854e-01  +1.5818e+01  1.53e+01  1.03e-01  1.58e+01  4.10e-05  2.43e-01  2.73e-01  
  4  +5.0066e-01  +1.4160e+00  9.15e-01  9.10e-03  1.48e+00  7.18e-06  1.18e-01  8.26e-01  
  5  +5.0035e-01  +1.0966e+00  5.96e-01  5.80e-03  9.49e-01  1.14e-05  5.97e-02  6.17e-01  
  6  +4.9989e-01  +1.1538e+00  6.54e-01  2.63e-03  4.38e-01  5.56e-05  8.71e-03  9.90e-01  
  7  +4.9689e-01  +1.0563e+00  5.59e-01  5.81e-04  9.77e-02  2.05e-04  1.76e-03  8.02e-01  
  8  +4.9200e-01  +8.7735e-01  3.85e-01  3.87e-04  6.48e-02  7.77e-05  1.20e-03  5.34e-01  
  9  +4.9005e-01  +8.5205e-01  3.62e-01  2.77e-04  4.64e-02  7.54e-05  8.51e-04  4.64e-01  
 10  +4.8960e-01  +8.3052e-01  3.41e-01  2.71e-04  4.54e-02  6.11e-05  8.34e-04  1.24e-01  
 11  +4.8729e-01  +8.0015e-01  3.13e-01  2.25e-04  3.76e-02  5.04e-05  6.97e-04  3.31e-01  
 12  +4.7758e-01  +6.8788e-01  2.10e-01  1.36e-04  2.26e-02  9.66e-06  4.39e-04  9.03e-01  
 13  +4.6757e-01  +6.2864e-01  1.61e-01  9.38e-05  1.56e-02  8.24e-06  3.18e-04  4.87e-01  
 14  +4.5912e-01  +5.8252e-01  1.23e-01  6.69e-05  1.11e-02  6.68e-06  2.35e-04  3.99e-01  
 15  +4.4835e-01  +5.2671e-01  7.84e-02  3.93e-05  6.52e-03  4.34e-06  1.45e-04  4.60e-01  
 16  +4.4519e-01  +5.1083e-01  6.56e-02  3.21e-05  5.33e-03  3.85e-06  1.20e-04  2.65e-01  
 17  +4.4060e-01  +4.8801e-01  4.74e-02  2.24e-05  3.71e-03  3.11e-06  8.56e-05  4.60e-01  
 18  +4.3595e-01  +4.6600e-01  3.01e-02  1.38e-05  2.28e-03  2.06e-06  5.41e-05  4.47e-01  
 19  +4.3308e-01  +4.5260e-01  1.95e-02  8.78e-06  1.46e-03  1.42e-06  3.51e-05  4.74e-01  
 20  +4.3028e-01  +4.3947e-01  9.19e-03  4.05e-06  6.72e-04  7.86e-07  1.66e-05  8.48e-01  
 21  +4.2842e-01  +4.3164e-01  3.22e-03  1.41e-06  2.33e-04  2.77e-07  5.87e-06  6.90e-01  
 22  +4.2753e-01  +4.2791e-01  3.84e-04  1.67e-07  2.77e-05  3.39e-08  7.02e-07  9.76e-01  
 23  +4.2740e-01  +4.2741e-01  4.16e-06  1.81e-09  3.00e-07  3.67e-10  7.63e-09  9.89e-01  
 24  +4.2740e-01  +4.2740e-01  4.18e-08  1.82e-11  3.01e-09  3.69e-12  7.66e-11  9.90e-01  
 25  +4.2740e-01  +4.2740e-01  4.32e-10  1.88e-13  3.12e-11  3.82e-14  7.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.9826ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:56 PM: Optimal value: 4.274e-01
(CVXPY) Aug 31 04:59:56 PM: Compilation took 1.906e-02 seconds
(CVXPY) Aug 31 04:59:56 PM: Solver (including time spent in interface) took 8.892e-02 seconds
Iteration: 24, Objective: 0.4274
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:56 PM: Your problem has 2736 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:56 PM: Finished problem compilation (took 1.891e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2736
  constraints   = 5236
  nnz(P)        = 0
  nnz(A)        = 50383
  cones (total) = 1
    : Nonnegative = 1,  numel = 5236

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.24e+01  1.00e+00  1.00e+00   ------   
  1  +5.8168e-01  +5.3669e+02  5.36e+02  4.24e-01  5.17e+01  3.82e-03  5.64e-01  5.96e-01  
  2  +5.3269e-01  +6.1468e+01  6.09e+01  1.56e-01  2.39e+01  1.52e-02  2.60e-01  9.25e-01  
  3  +5.0854e-01  +1.5815e+01  1.53e+01  1.03e-01  1.58e+01  4.10e-05  2.43e-01  2.73e-01  
  4  +5.0066e-01  +1.4154e+00  9.15e-01  9.09e-03  1.48e+00  7.18e-06  1.18e-01  8.26e-01  
  5  +5.0035e-01  +1.0969e+00  5.97e-01  5.80e-03  9.49e-01  1.13e-05  5.97e-02  6.17e-01  
  6  +4.9991e-01  +1.1610e+00  6.61e-01  2.70e-03  4.50e-01  5.44e-05  8.96e-03  9.90e-01  
  7  +4.9696e-01  +1.0642e+00  5.67e-01  5.94e-04  9.98e-02  2.03e-04  1.79e-03  8.03e-01  
  8  +4.9195e-01  +8.7411e-01  3.82e-01  3.89e-04  6.51e-02  7.19e-05  1.20e-03  5.45e-01  
  9  +4.9037e-01  +8.4960e-01  3.59e-01  2.78e-04  4.66e-02  6.75e-05  8.54e-04  5.01e-01  
 10  +4.8989e-01  +8.2787e-01  3.38e-01  2.71e-04  4.54e-02  5.44e-05  8.35e-04  1.37e-01  
 11  +4.8686e-01  +7.8839e-01  3.02e-01  2.13e-04  3.56e-02  4.20e-05  6.61e-04  4.28e-01  
 12  +4.7998e-01  +7.1856e-01  2.39e-01  1.58e-04  2.63e-02  2.21e-05  5.05e-04  5.61e-01  
 13  +4.6678e-01  +6.3047e-01  1.64e-01  9.34e-05  1.55e-02  1.34e-05  3.16e-04  5.32e-01  
 14  +4.5909e-01  +5.8654e-01  1.27e-01  6.85e-05  1.14e-02  9.94e-06  2.41e-04  3.70e-01  
 15  +4.4800e-01  +5.2707e-01  7.91e-02  3.94e-05  6.54e-03  5.92e-06  1.46e-04  4.77e-01  
 16  +4.4392e-01  +5.0622e-01  6.23e-02  3.02e-05  5.01e-03  4.72e-06  1.14e-04  3.01e-01  
 17  +4.3944e-01  +4.8347e-01  4.40e-02  2.06e-05  3.42e-03  3.46e-06  7.94e-05  4.62e-01  
 18  +4.3499e-01  +4.6208e-01  2.71e-02  1.24e-05  2.05e-03  2.16e-06  4.89e-05  4.72e-01  
 19  +4.3125e-01  +4.4462e-01  1.34e-02  5.97e-06  9.89e-04  1.09e-06  2.42e-05  5.85e-01  
 20  +4.2990e-01  +4.3856e-01  8.65e-03  3.83e-06  6.34e-04  7.12e-07  1.57e-05  4.02e-01  
 21  +4.2813e-01  +4.3044e-01  2.31e-03  1.01e-06  1.68e-04  2.07e-07  4.22e-06  9.90e-01  
 22  +4.2740e-01  +4.2750e-01  1.02e-04  4.45e-08  7.37e-06  9.08e-09  1.87e-07  9.61e-01  
 23  +4.2737e-01  +4.2737e-01  1.02e-06  4.45e-10  7.38e-08  9.09e-11  1.88e-09  9.90e-01  
 24  +4.2737e-01  +4.2737e-01  1.03e-08  4.49e-12  7.45e-10  9.19e-13  1.90e-11  9.90e-01  
 25  +4.2737e-01  +4.2737e-01  1.07e-10  4.66e-14  7.73e-12  9.56e-15  1.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.6413ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:56 PM: Optimal value: 4.274e-01
(CVXPY) Aug 31 04:59:56 PM: Compilation took 1.891e-02 seconds
(CVXPY) Aug 31 04:59:56 PM: Solver (including time spent in interface) took 8.633e-02 seconds
Iteration: 25, Objective: 0.4274
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:56 PM: Your problem has 2738 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:56 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:56 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:56 PM: Finished problem compilation (took 1.800e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2738
  constraints   = 5238
  nnz(P)        = 0
  nnz(A)        = 50428
  cones (total) = 1
    : Nonnegative = 1,  numel = 5238

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.24e+01  1.00e+00  1.00e+00   ------   
  1  +5.8171e-01  +5.3666e+02  5.36e+02  4.24e-01  5.16e+01  3.82e-03  5.64e-01  5.96e-01  
  2  +5.3269e-01  +6.1464e+01  6.09e+01  1.57e-01  2.38e+01  1.52e-02  2.60e-01  9.25e-01  
  3  +5.0854e-01  +1.5814e+01  1.53e+01  1.03e-01  1.58e+01  4.10e-05  2.43e-01  2.73e-01  
  4  +5.0065e-01  +1.4119e+00  9.11e-01  9.06e-03  1.47e+00  7.17e-06  1.18e-01  8.28e-01  
  5  +5.0036e-01  +1.0982e+00  5.98e-01  5.81e-03  9.51e-01  1.14e-05  5.96e-02  6.17e-01  
  6  +4.9989e-01  +1.1493e+00  6.49e-01  2.60e-03  4.33e-01  5.58e-05  8.61e-03  9.90e-01  
  7  +4.9689e-01  +1.0527e+00  5.56e-01  5.76e-04  9.68e-02  2.06e-04  1.74e-03  8.01e-01  
  8  +4.9207e-01  +8.7903e-01  3.87e-01  3.88e-04  6.49e-02  8.02e-05  1.20e-03  5.25e-01  
  9  +4.9001e-01  +8.5321e-01  3.63e-01  2.78e-04  4.65e-02  7.84e-05  8.53e-04  4.54e-01  
 10  +4.8956e-01  +8.3250e-01  3.43e-01  2.72e-04  4.55e-02  6.45e-05  8.36e-04  1.14e-01  
 11  +4.8746e-01  +8.0572e-01  3.18e-01  2.30e-04  3.84e-02  5.50e-05  7.12e-04  2.87e-01  
 12  +4.8023e-01  +7.0150e-01  2.21e-01  1.51e-04  2.52e-02  5.09e-06  4.86e-04  9.65e-01  
 13  +4.6712e-01  +6.2429e-01  1.57e-01  9.06e-05  1.51e-02  5.97e-06  3.07e-04  5.70e-01  
 14  +4.6053e-01  +5.8910e-01  1.29e-01  7.01e-05  1.17e-02  5.96e-06  2.45e-04  3.89e-01  
 15  +4.4901e-01  +5.2959e-01  8.06e-02  4.05e-05  6.72e-03  4.02e-06  1.49e-04  4.93e-01  
 16  +4.4548e-01  +5.1211e-01  6.66e-02  3.26e-05  5.41e-03  3.56e-06  1.22e-04  2.65e-01  
 17  +4.4112e-01  +4.9050e-01  4.94e-02  2.33e-05  3.87e-03  3.11e-06  8.91e-05  4.75e-01  
 18  +4.3583e-01  +4.6563e-01  2.98e-02  1.37e-05  2.27e-03  1.95e-06  5.40e-05  4.69e-01  
 19  +4.3138e-01  +4.4495e-01  1.36e-02  6.09e-06  1.01e-03  9.72e-07  2.48e-05  6.59e-01  
 20  +4.2919e-01  +4.3496e-01  5.78e-03  2.54e-06  4.21e-04  4.79e-07  1.05e-05  8.21e-01  
 21  +4.2894e-01  +4.3377e-01  4.83e-03  2.13e-06  3.53e-04  4.16e-07  8.85e-06  6.23e-01  
 22  +4.2818e-01  +4.3067e-01  2.49e-03  1.09e-06  1.81e-04  2.16e-07  4.56e-06  5.74e-01  
 23  +4.2741e-01  +4.2756e-01  1.46e-04  6.40e-08  1.06e-05  1.27e-08  2.70e-07  9.46e-01  
 24  +4.2737e-01  +4.2737e-01  1.48e-06  6.49e-10  1.07e-07  1.28e-10  2.74e-09  9.90e-01  
 25  +4.2737e-01  +4.2737e-01  1.49e-08  6.50e-12  1.08e-09  1.29e-12  2.74e-11  9.90e-01  
 26  +4.2737e-01  +4.2737e-01  1.58e-10  6.89e-14  1.14e-11  1.37e-14  2.91e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 86.3936ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:56 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:56 PM: Optimal value: 4.274e-01
(CVXPY) Aug 31 04:59:56 PM: Compilation took 1.800e-02 seconds
(CVXPY) Aug 31 04:59:56 PM: Solver (including time spent in interface) took 9.100e-02 seconds
FULL MODEL:
  Accruacy: 0.5348
  Our objective: 0.06960000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x3 = 0 AND x6 = 0)                                             <-- (term's our objective: 0.02399999999999996)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x2 = 0 AND x6 = 0)            <-- (term's our objective: 0.006000000000000032)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x0 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.004800000000000032)
 OR (x1 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0)            <-- (term's our objective: 0.002800000000000028)
 OR (x4 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0027999999999999596)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.0036000000000000303)
 OR (x3 = 1 AND x5 = 1 AND x6 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x7 = 0) <-- (term's our objective: 0.0019999999999999597)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x1 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0019999999999999597)
 OR (x0 = 1 AND x4 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0020000000000000495)
 OR (x0 = 1 AND x1 = 1 AND x6 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0027999999999999826)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x7 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0019999999999999597)
 OR (x0 = 1 AND x1 = 1 AND x5 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0032000000000000266)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0015999999999999825)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0) <-- (term's our objective: 0.0028000000000000494)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x1 = 0 AND x2 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.003199999999999961)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.0028000000000000264)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x0 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0012000000000000266)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.439887046813965
Best over terms:
  Our final objective: 0.02399999999999996
    Its accruacy: 0.512
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.02399999999999996
  Highest accruacy: 0.512
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

