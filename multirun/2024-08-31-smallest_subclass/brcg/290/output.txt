Command:
python test_script.py -s smallest_subclass -d 8 -n 100 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.02
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.8200000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:17 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Finished problem compilation (took 3.955e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9774e-01  +5.1014e+01  5.05e+01  8.71e-01  9.92e+00  1.00e+00  1.04e+00   ------   
  1  +5.7857e-01  +1.1094e+01  1.05e+01  3.68e-01  5.91e+00  3.80e-03  5.79e-01  6.00e-01  
  2  +5.1581e-01  +1.7059e+00  1.19e+00  8.94e-02  1.77e+00  1.70e-02  2.28e-01  9.90e-01  
  3  +4.9410e-01  +7.8421e-01  2.90e-01  1.82e-02  3.78e-01  7.21e-03  5.63e-02  8.07e-01  
  4  +4.6679e-01  +6.6169e-01  1.95e-01  6.51e-03  1.38e-01  7.70e-03  2.12e-02  6.68e-01  
  5  +4.5043e-01  +5.4833e-01  9.79e-02  3.17e-03  6.59e-02  2.50e-03  1.13e-02  5.95e-01  
  6  +4.3905e-01  +4.7088e-01  3.18e-02  9.91e-04  2.05e-02  6.46e-04  3.75e-03  7.28e-01  
  7  +4.3570e-01  +4.5807e-01  2.24e-02  5.34e-04  1.11e-02  3.25e-04  2.17e-03  7.39e-01  
  8  +4.3054e-01  +4.3230e-01  1.76e-03  4.02e-05  8.38e-04  2.43e-05  1.68e-04  9.24e-01  
  9  +4.3010e-01  +4.3012e-01  1.77e-05  4.04e-07  8.41e-06  2.43e-07  1.69e-06  9.90e-01  
 10  +4.3010e-01  +4.3010e-01  1.77e-07  4.04e-09  8.41e-08  2.43e-09  1.69e-08  9.90e-01  
 11  +4.3010e-01  +4.3010e-01  1.77e-09  4.04e-11  8.41e-10  2.43e-11  1.69e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 427.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:17 PM: Optimal value: 4.301e-01
(CVXPY) Aug 31 04:58:17 PM: Compilation took 3.955e-03 seconds
(CVXPY) Aug 31 04:58:17 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:17 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Finished problem compilation (took 2.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 681
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9206e-01  +5.2055e+01  5.16e+01  8.77e-01  1.01e+01  1.00e+00  1.07e+00   ------   
  1  +5.4884e-01  +1.1295e+01  1.07e+01  3.78e-01  5.91e+00  3.79e-03  5.97e-01  5.99e-01  
  2  +4.8748e-01  +2.2383e+00  1.75e+00  1.07e-01  2.15e+00  1.95e-02  2.58e-01  8.97e-01  
  3  +4.2782e-01  +9.7413e-01  5.46e-01  2.26e-02  4.83e-01  1.05e-02  6.36e-02  8.14e-01  
  4  +3.9793e-01  +6.5855e-01  2.61e-01  9.28e-03  1.96e-01  4.97e-03  2.92e-02  6.18e-01  
  5  +3.6856e-01  +4.8914e-01  1.21e-01  3.33e-03  7.17e-02  2.13e-03  1.18e-02  6.81e-01  
  6  +3.5224e-01  +4.0066e-01  4.84e-02  1.27e-03  2.78e-02  7.13e-04  4.98e-03  6.25e-01  
  7  +3.4245e-01  +3.4941e-01  6.96e-03  1.76e-04  3.89e-03  7.41e-05  7.94e-04  8.58e-01  
  8  +3.4044e-01  +3.4057e-01  1.28e-04  3.17e-06  7.06e-05  1.00e-06  1.54e-05  9.83e-01  
  9  +3.4040e-01  +3.4040e-01  1.28e-06  3.16e-08  7.05e-07  9.99e-09  1.54e-07  9.90e-01  
 10  +3.4040e-01  +3.4040e-01  1.28e-08  3.16e-10  7.05e-09  9.99e-11  1.54e-09  9.90e-01  
 11  +3.4040e-01  +3.4040e-01  1.28e-10  3.16e-12  7.05e-11  9.99e-13  1.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 643.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:17 PM: Optimal value: 3.404e-01
(CVXPY) Aug 31 04:58:17 PM: Compilation took 2.004e-03 seconds
(CVXPY) Aug 31 04:58:17 PM: Solver (including time spent in interface) took 9.971e-04 seconds
Iteration: 2, Objective: 0.3404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:17 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Finished problem compilation (took 1.886e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 783
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8689e-01  +5.2560e+01  5.21e+01  8.82e-01  1.01e+01  1.00e+00  1.08e+00   ------   
  1  +5.1828e-01  +1.1539e+01  1.10e+01  3.89e-01  5.91e+00  3.82e-03  6.07e-01  5.91e-01  
  2  +4.4715e-01  +2.1300e+00  1.68e+00  9.26e-02  1.88e+00  2.29e-02  2.27e-01  9.74e-01  
  3  +3.7550e-01  +1.0800e+00  7.05e-01  2.78e-02  5.77e-01  1.21e-02  7.72e-02  7.06e-01  
  4  +3.2334e-01  +7.2896e-01  4.06e-01  1.17e-02  2.43e-01  6.50e-03  3.65e-02  6.64e-01  
  5  +2.8192e-01  +4.0711e-01  1.25e-01  3.47e-03  7.16e-02  1.46e-03  1.23e-02  7.35e-01  
  6  +2.6170e-01  +3.0263e-01  4.09e-02  1.03e-03  2.16e-02  4.16e-04  4.08e-03  7.55e-01  
  7  +2.5162e-01  +2.5510e-01  3.48e-03  8.44e-05  1.77e-03  1.88e-05  3.63e-04  9.69e-01  
  8  +2.5061e-01  +2.5090e-01  2.96e-04  7.18e-06  1.50e-04  1.37e-06  3.19e-05  9.16e-01  
  9  +2.5050e-01  +2.5052e-01  1.24e-05  2.99e-07  6.21e-06  4.72e-08  1.40e-06  9.78e-01  
 10  +2.5050e-01  +2.5050e-01  1.25e-07  3.00e-09  6.25e-08  4.74e-10  1.42e-08  9.90e-01  
 11  +2.5050e-01  +2.5050e-01  1.25e-09  3.00e-11  6.25e-10  4.74e-12  1.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 892.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:17 PM: Optimal value: 2.505e-01
(CVXPY) Aug 31 04:58:17 PM: Compilation took 1.886e-03 seconds
(CVXPY) Aug 31 04:58:17 PM: Solver (including time spent in interface) took 2.050e-03 seconds
Iteration: 3, Objective: 0.2505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:17 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Finished problem compilation (took 3.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 835
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8142e-01  +5.2756e+01  5.23e+01  8.85e-01  9.89e+00  1.00e+00  1.08e+00   ------   
  1  +4.8273e-01  +1.1794e+01  1.13e+01  3.97e-01  5.75e+00  3.90e-03  6.11e-01  5.81e-01  
  2  +4.0236e-01  +2.1805e+00  1.78e+00  9.28e-02  1.81e+00  2.48e-02  2.24e-01  9.81e-01  
  3  +3.3102e-01  +1.0531e+00  7.22e-01  2.87e-02  5.67e-01  1.18e-02  8.05e-02  7.08e-01  
  4  +2.6669e-01  +6.4215e-01  3.75e-01  1.13e-02  2.23e-01  5.52e-03  3.64e-02  6.41e-01  
  5  +2.2085e-01  +3.5376e-01  1.33e-01  3.70e-03  7.28e-02  1.38e-03  1.43e-02  7.07e-01  
  6  +1.9864e-01  +2.3301e-01  3.44e-02  9.21e-04  1.80e-02  3.18e-04  4.04e-03  7.38e-01  
  7  +1.9107e-01  +1.9249e-01  1.42e-03  3.81e-05  7.41e-04  8.22e-06  1.77e-04  9.68e-01  
  8  +1.9072e-01  +1.9080e-01  7.73e-05  2.13e-06  4.08e-05  2.39e-07  1.06e-05  9.42e-01  
  9  +1.9070e-01  +1.9070e-01  8.88e-07  2.46e-08  4.69e-07  2.77e-09  1.25e-07  9.88e-01  
 10  +1.9070e-01  +1.9070e-01  8.88e-09  2.46e-10  4.69e-09  2.77e-11  1.25e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 610.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:17 PM: Optimal value: 1.907e-01
(CVXPY) Aug 31 04:58:17 PM: Compilation took 3.007e-03 seconds
(CVXPY) Aug 31 04:58:17 PM: Solver (including time spent in interface) took 9.291e-04 seconds
Iteration: 4, Objective: 0.1907
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:17 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Finished problem compilation (took 3.989e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 886
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7845e-01  +5.2612e+01  5.21e+01  8.89e-01  9.67e+00  1.00e+00  1.08e+00   ------   
  1  +4.5552e-01  +1.1849e+01  1.14e+01  4.00e-01  5.56e+00  3.95e-03  6.09e-01  5.78e-01  
  2  +3.6276e-01  +2.8552e+00  2.49e+00  1.13e-01  2.07e+00  2.57e-02  2.59e-01  8.69e-01  
  3  +2.7230e-01  +1.1024e+00  8.30e-01  3.04e-02  5.77e-01  1.09e-02  8.30e-02  7.57e-01  
  4  +2.1759e-01  +4.9798e-01  2.80e-01  9.90e-03  1.84e-01  2.92e-03  3.24e-02  6.72e-01  
  5  +1.8468e-01  +3.0220e-01  1.18e-01  3.61e-03  6.92e-02  9.68e-04  1.43e-02  7.39e-01  
  6  +1.6650e-01  +1.9086e-01  2.44e-02  7.13e-04  1.38e-02  1.36e-04  3.27e-03  8.86e-01  
  7  +1.6162e-01  +1.6459e-01  2.97e-03  8.52e-05  1.66e-03  1.40e-05  4.11e-04  9.09e-01  
  8  +1.6097e-01  +1.6120e-01  2.38e-04  6.98e-06  1.34e-04  7.01e-07  3.59e-05  9.15e-01  
  9  +1.6090e-01  +1.6091e-01  4.83e-06  1.43e-07  2.70e-06  1.21e-08  7.90e-07  9.82e-01  
 10  +1.6090e-01  +1.6090e-01  4.82e-08  1.43e-09  2.70e-08  1.21e-10  7.91e-09  9.90e-01  
 11  +1.6090e-01  +1.6090e-01  4.82e-10  1.43e-11  2.70e-10  1.21e-12  7.92e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 681.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:17 PM: Optimal value: 1.609e-01
(CVXPY) Aug 31 04:58:17 PM: Compilation took 3.989e-03 seconds
(CVXPY) Aug 31 04:58:17 PM: Solver (including time spent in interface) took 9.935e-04 seconds
Iteration: 5, Objective: 0.1609
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:17 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Finished problem compilation (took 4.868e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 937
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7537e-01  +5.2733e+01  5.23e+01  8.92e-01  9.48e+00  1.00e+00  1.08e+00   ------   
  1  +4.2008e-01  +1.2008e+01  1.16e+01  4.01e-01  5.35e+00  4.05e-03  6.04e-01  5.74e-01  
  2  +3.0381e-01  +2.6753e+00  2.37e+00  9.89e-02  1.77e+00  2.66e-02  2.34e-01  9.04e-01  
  3  +2.4593e-01  +9.0994e-01  6.64e-01  2.66e-02  4.83e-01  8.61e-03  7.41e-02  7.31e-01  
  4  +2.0175e-01  +4.2321e-01  2.21e-01  8.49e-03  1.53e-01  2.57e-03  2.73e-02  6.93e-01  
  5  +1.8075e-01  +2.9896e-01  1.18e-01  3.97e-03  7.56e-02  1.40e-03  1.36e-02  5.72e-01  
  6  +1.7046e-01  +2.5164e-01  8.12e-02  2.44e-03  4.85e-02  9.69e-04  8.56e-03  4.19e-01  
  7  +1.5451e-01  +1.6697e-01  1.25e-02  3.58e-04  7.18e-03  3.08e-05  1.35e-03  9.90e-01  
  8  +1.5145e-01  +1.5281e-01  1.36e-03  3.91e-05  7.81e-04  3.01e-06  1.51e-04  8.90e-01  
  9  +1.5113e-01  +1.5147e-01  3.35e-04  9.66e-06  1.88e-04  9.39e-07  4.07e-05  8.52e-01  
 10  +1.5102e-01  +1.5107e-01  4.98e-05  1.36e-06  2.64e-05  1.47e-07  6.37e-06  8.99e-01  
 11  +1.5100e-01  +1.5100e-01  5.89e-07  1.60e-08  3.10e-07  1.71e-09  7.60e-08  9.89e-01  
 12  +1.5100e-01  +1.5100e-01  5.89e-09  1.60e-10  3.10e-09  1.70e-11  7.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 838.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:17 PM: Optimal value: 1.510e-01
(CVXPY) Aug 31 04:58:17 PM: Compilation took 4.868e-03 seconds
(CVXPY) Aug 31 04:58:17 PM: Solver (including time spent in interface) took 9.923e-04 seconds
Iteration: 6, Objective: 0.1510
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:17 PM: Your problem has 127 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Finished problem compilation (took 2.982e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 127
  constraints   = 177
  nnz(P)        = 0
  nnz(A)        = 980
  cones (total) = 1
    : Nonnegative = 1,  numel = 177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7142e-01  +5.3196e+01  5.27e+01  8.95e-01  9.30e+00  1.00e+00  1.09e+00   ------   
  1  +3.7411e-01  +1.2440e+01  1.21e+01  4.04e-01  5.25e+00  4.18e-03  6.09e-01  5.62e-01  
  2  +2.6283e-01  +2.5290e+00  2.27e+00  9.56e-02  1.66e+00  2.80e-02  2.27e-01  9.32e-01  
  3  +2.1589e-01  +7.6837e-01  5.52e-01  2.28e-02  4.01e-01  8.39e-03  6.38e-02  7.78e-01  
  4  +1.7394e-01  +3.6113e-01  1.87e-01  7.37e-03  1.30e-01  2.38e-03  2.32e-02  7.40e-01  
  5  +1.5491e-01  +2.6737e-01  1.12e-01  3.61e-03  6.86e-02  1.40e-03  1.21e-02  6.12e-01  
  6  +1.3513e-01  +1.5243e-01  1.73e-02  5.37e-04  1.02e-02  6.62e-05  1.94e-03  9.45e-01  
  7  +1.3145e-01  +1.3269e-01  1.24e-03  3.84e-05  7.24e-04  3.68e-06  1.44e-04  9.27e-01  
  8  +1.3114e-01  +1.3126e-01  1.20e-04  3.77e-06  6.88e-05  2.74e-07  1.61e-05  9.18e-01  
  9  +1.3110e-01  +1.3110e-01  2.28e-06  7.18e-08  1.30e-06  5.25e-09  3.18e-07  9.82e-01  
 10  +1.3110e-01  +1.3110e-01  2.28e-08  7.18e-10  1.30e-08  5.25e-11  3.19e-09  9.90e-01  
 11  +1.3110e-01  +1.3110e-01  2.28e-10  7.18e-12  1.30e-10  5.26e-13  3.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 818.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:17 PM: Optimal value: 1.311e-01
(CVXPY) Aug 31 04:58:17 PM: Compilation took 2.982e-03 seconds
(CVXPY) Aug 31 04:58:17 PM: Solver (including time spent in interface) took 9.465e-04 seconds
Iteration: 7, Objective: 0.1311
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:17 PM: Your problem has 137 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Finished problem compilation (took 2.990e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 137
  constraints   = 187
  nnz(P)        = 0
  nnz(A)        = 1041
  cones (total) = 1
    : Nonnegative = 1,  numel = 187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6969e-01  +5.2789e+01  5.23e+01  8.98e-01  9.17e+00  1.00e+00  1.08e+00   ------   
  1  +3.4985e-01  +1.2453e+01  1.21e+01  4.05e-01  5.06e+00  4.26e-03  6.00e-01  5.60e-01  
  2  +2.3664e-01  +2.7105e+00  2.47e+00  1.03e-01  1.70e+00  2.70e-02  2.43e-01  8.82e-01  
  3  +1.9450e-01  +8.2395e-01  6.29e-01  2.64e-02  4.48e-01  8.70e-03  7.36e-02  7.95e-01  
  4  +1.5250e-01  +3.4727e-01  1.95e-01  7.68e-03  1.31e-01  2.63e-03  2.46e-02  7.25e-01  
  5  +1.3374e-01  +2.5504e-01  1.21e-01  4.19e-03  7.52e-02  1.55e-03  1.43e-02  5.18e-01  
  6  +1.2018e-01  +1.9467e-01  7.45e-02  2.34e-03  4.35e-02  6.83e-04  8.45e-03  6.08e-01  
  7  +1.0424e-01  +1.1594e-01  1.17e-02  3.42e-04  6.46e-03  8.61e-05  1.32e-03  8.73e-01  
  8  +1.0157e-01  +1.0250e-01  9.30e-04  2.75e-05  5.15e-04  5.15e-06  1.11e-04  9.18e-01  
  9  +1.0133e-01  +1.0141e-01  8.54e-05  2.62e-06  4.82e-05  3.28e-07  1.16e-05  9.29e-01  
 10  +1.0130e-01  +1.0130e-01  1.05e-06  3.23e-08  5.91e-07  3.87e-09  1.44e-07  9.88e-01  
 11  +1.0130e-01  +1.0130e-01  1.05e-08  3.23e-10  5.91e-09  3.87e-11  1.44e-09  9.90e-01  
 12  +1.0130e-01  +1.0130e-01  1.05e-10  3.23e-12  5.92e-11  3.88e-13  1.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.017ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:17 PM: Optimal value: 1.013e-01
(CVXPY) Aug 31 04:58:17 PM: Compilation took 2.990e-03 seconds
(CVXPY) Aug 31 04:58:17 PM: Solver (including time spent in interface) took 1.089e-03 seconds
Iteration: 8, Objective: 0.1013
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:17 PM: Your problem has 147 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:17 PM: Finished problem compilation (took 3.012e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 147
  constraints   = 197
  nnz(P)        = 0
  nnz(A)        = 1082
  cones (total) = 1
    : Nonnegative = 1,  numel = 197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6654e-01  +5.3057e+01  5.26e+01  9.01e-01  9.00e+00  1.00e+00  1.09e+00   ------   
  1  +3.1252e-01  +1.2796e+01  1.25e+01  4.09e-01  4.96e+00  4.37e-03  6.03e-01  5.50e-01  
  2  +2.0841e-01  +2.7644e+00  2.56e+00  1.05e-01  1.69e+00  2.77e-02  2.53e-01  8.71e-01  
  3  +1.8110e-01  +7.0009e-01  5.19e-01  2.30e-02  3.78e-01  7.36e-03  6.50e-02  8.14e-01  
  4  +1.4490e-01  +3.9944e-01  2.55e-01  1.02e-02  1.70e-01  3.50e-03  3.20e-02  5.87e-01  
  5  +1.2330e-01  +2.5984e-01  1.37e-01  4.91e-03  8.47e-02  1.81e-03  1.67e-02  5.38e-01  
  6  +1.1388e-01  +2.1690e-01  1.03e-01  3.36e-03  6.07e-02  1.11e-03  1.19e-02  4.89e-01  
  7  +9.6920e-02  +1.2168e-01  2.48e-02  7.53e-04  1.38e-02  2.19e-04  2.86e-03  8.05e-01  
  8  +9.1955e-02  +9.4389e-02  2.43e-03  7.41e-05  1.35e-03  1.81e-05  2.92e-04  9.03e-01  
  9  +9.1435e-02  +9.1802e-02  3.68e-04  1.14e-05  2.04e-04  7.64e-07  5.09e-05  9.82e-01  
 10  +9.1307e-02  +9.1325e-02  1.83e-05  5.62e-07  9.92e-06  3.27e-08  2.75e-06  9.55e-01  
 11  +9.1300e-02  +9.1300e-02  1.90e-07  5.81e-09  1.02e-07  3.43e-10  2.88e-08  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  1.90e-09  5.82e-11  1.03e-09  3.43e-12  2.88e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 938.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:17 PM: Optimal value: 9.130e-02
(CVXPY) Aug 31 04:58:17 PM: Compilation took 3.012e-03 seconds
(CVXPY) Aug 31 04:58:17 PM: Solver (including time spent in interface) took 9.761e-04 seconds
Iteration: 9, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:18 PM: Your problem has 157 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:18 PM: Finished problem compilation (took 3.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 157
  constraints   = 207
  nnz(P)        = 0
  nnz(A)        = 1118
  cones (total) = 1
    : Nonnegative = 1,  numel = 207

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6416e-01  +5.2939e+01  5.25e+01  9.03e-01  8.83e+00  1.00e+00  1.09e+00   ------   
  1  +2.8461e-01  +1.3378e+01  1.31e+01  4.22e-01  4.94e+00  4.51e-03  6.12e-01  5.26e-01  
  2  +2.1407e-01  +2.8465e+00  2.63e+00  1.18e-01  1.82e+00  2.99e-02  2.76e-01  8.62e-01  
  3  +1.8024e-01  +7.2246e-01  5.42e-01  2.49e-02  4.00e-01  8.13e-03  7.00e-02  8.45e-01  
  4  +1.3600e-01  +3.1955e-01  1.84e-01  7.40e-03  1.21e-01  2.68e-03  2.37e-02  7.49e-01  
  5  +1.1964e-01  +2.3048e-01  1.11e-01  4.04e-03  6.88e-02  1.51e-03  1.37e-02  5.11e-01  
  6  +1.0740e-01  +1.7352e-01  6.61e-02  2.19e-03  3.87e-02  5.64e-04  7.77e-03  7.01e-01  
  7  +9.3560e-02  +1.0275e-01  9.19e-03  2.84e-04  5.13e-03  6.54e-05  1.07e-03  8.82e-01  
  8  +9.1816e-02  +9.3561e-02  1.75e-03  5.50e-05  9.80e-04  1.02e-05  2.18e-04  8.10e-01  
  9  +9.1405e-02  +9.1718e-02  3.12e-04  9.95e-06  1.73e-04  1.05e-06  4.56e-05  9.17e-01  
 10  +9.1304e-02  +9.1317e-02  1.22e-05  3.85e-07  6.65e-06  3.17e-08  1.91e-06  9.68e-01  
 11  +9.1300e-02  +9.1300e-02  1.24e-07  3.89e-09  6.71e-08  3.20e-10  1.94e-08  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  1.24e-09  3.89e-11  6.71e-10  3.20e-12  1.94e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 968.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:18 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:18 PM: Optimal value: 9.130e-02
(CVXPY) Aug 31 04:58:18 PM: Compilation took 3.010e-03 seconds
(CVXPY) Aug 31 04:58:18 PM: Solver (including time spent in interface) took 9.916e-04 seconds
Iteration: 10, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:18 PM: Your problem has 166 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:18 PM: Finished problem compilation (took 1.996e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 166
  constraints   = 216
  nnz(P)        = 0
  nnz(A)        = 1149
  cones (total) = 1
    : Nonnegative = 1,  numel = 216

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6316e-01  +5.3044e+01  5.26e+01  9.05e-01  8.69e+00  1.00e+00  1.09e+00   ------   
  1  +2.7628e-01  +1.3618e+01  1.33e+01  4.29e-01  4.89e+00  4.56e-03  6.16e-01  5.18e-01  
  2  +2.0855e-01  +3.3000e+00  3.09e+00  1.36e-01  2.05e+00  3.00e-02  3.09e-01  7.92e-01  
  3  +1.8289e-01  +7.1985e-01  5.37e-01  2.54e-02  4.03e-01  8.80e-03  7.13e-02  8.22e-01  
  4  +1.4403e-01  +3.9621e-01  2.52e-01  1.06e-02  1.71e-01  4.12e-03  3.27e-02  6.27e-01  
  5  +1.2141e-01  +2.6230e-01  1.41e-01  5.20e-03  8.79e-02  2.23e-03  1.73e-02  5.37e-01  
  6  +1.0993e-01  +2.0286e-01  9.29e-02  3.15e-03  5.51e-02  1.21e-03  1.09e-02  5.40e-01  
  7  +9.3706e-02  +1.0343e-01  9.73e-03  3.19e-04  5.59e-03  6.84e-05  1.18e-03  9.34e-01  
  8  +9.1815e-02  +9.3539e-02  1.72e-03  5.78e-05  9.97e-04  9.84e-06  2.25e-04  8.19e-01  
  9  +9.1468e-02  +9.1996e-02  5.28e-04  1.80e-05  3.04e-04  2.16e-06  7.85e-05  8.31e-01  
 10  +9.1335e-02  +9.1436e-02  1.01e-04  3.32e-06  5.61e-05  3.71e-07  1.60e-05  8.16e-01  
 11  +9.1302e-02  +9.1308e-02  5.77e-06  1.85e-07  3.14e-06  1.68e-08  9.39e-07  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  5.80e-08  1.86e-09  3.16e-08  1.68e-10  9.45e-09  9.90e-01  
 13  +9.1300e-02  +9.1300e-02  5.81e-10  1.86e-11  3.16e-10  1.69e-12  9.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0261ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:18 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:18 PM: Optimal value: 9.130e-02
(CVXPY) Aug 31 04:58:18 PM: Compilation took 1.996e-03 seconds
(CVXPY) Aug 31 04:58:18 PM: Solver (including time spent in interface) took 2.005e-03 seconds
Iteration: 11, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:18 PM: Your problem has 167 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:18 PM: Finished problem compilation (took 4.975e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 167
  constraints   = 217
  nnz(P)        = 0
  nnz(A)        = 1155
  cones (total) = 1
    : Nonnegative = 1,  numel = 217

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6317e-01  +5.3041e+01  5.26e+01  9.05e-01  8.68e+00  1.00e+00  1.09e+00   ------   
  1  +2.7585e-01  +1.3603e+01  1.33e+01  4.29e-01  4.87e+00  4.56e-03  6.16e-01  5.19e-01  
  2  +2.0814e-01  +3.2772e+00  3.07e+00  1.35e-01  2.03e+00  3.00e-02  3.07e-01  7.95e-01  
  3  +1.8268e-01  +7.2707e-01  5.44e-01  2.57e-02  4.08e-01  8.78e-03  7.20e-02  8.21e-01  
  4  +1.4324e-01  +3.9007e-01  2.47e-01  1.04e-02  1.68e-01  3.93e-03  3.21e-02  6.45e-01  
  5  +1.2054e-01  +2.5602e-01  1.35e-01  5.00e-03  8.45e-02  2.13e-03  1.66e-02  5.35e-01  
  6  +1.0938e-01  +1.9883e-01  8.94e-02  3.05e-03  5.32e-02  1.11e-03  1.05e-02  5.53e-01  
  7  +9.3576e-02  +1.0319e-01  9.62e-03  3.15e-04  5.52e-03  8.59e-05  1.16e-03  9.09e-01  
  8  +9.1808e-02  +9.3565e-02  1.76e-03  5.91e-05  1.02e-03  1.26e-05  2.29e-04  8.15e-01  
  9  +9.1463e-02  +9.1983e-02  5.19e-04  1.77e-05  2.98e-04  2.42e-06  7.73e-05  8.39e-01  
 10  +9.1334e-02  +9.1431e-02  9.76e-05  3.21e-06  5.42e-05  4.00e-07  1.56e-05  8.21e-01  
 11  +9.1302e-02  +9.1308e-02  6.21e-06  1.99e-07  3.39e-06  1.83e-08  1.01e-06  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  6.26e-08  2.01e-09  3.41e-08  1.84e-10  1.02e-08  9.90e-01  
 13  +9.1300e-02  +9.1300e-02  6.26e-10  2.01e-11  3.41e-10  1.84e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.061ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:18 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:18 PM: Optimal value: 9.130e-02
(CVXPY) Aug 31 04:58:18 PM: Compilation took 4.975e-03 seconds
(CVXPY) Aug 31 04:58:18 PM: Solver (including time spent in interface) took 1.033e-03 seconds
FULL MODEL:
  Accruacy: 0.89
  Our objective: 0.78

IF 
    (x0 = 0 AND x6 = 0 AND x7 = 0)                                             <-- (term's our objective: 0.14000000000000004)
 OR (x1 = 1 AND x6 = 1 AND x2 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.07999999999999996)
 OR (x3 = 1 AND x7 = 1 AND x2 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.09999999999999998)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.14)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.09999999999999998)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 0)                       <-- (term's our objective: 0.07999999999999996)
 OR (x2 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.06000000000000005)
 OR (x0 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x5 = 0)                       <-- (term's our objective: 0.07999999999999996)
 OR (x4 = 1 AND x6 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0)                       <-- (term's our objective: 0.05999999999999998)
 OR (x2 = 1 AND x6 = 1 AND x1 = 0 AND x3 = 0 AND x7 = 0)                       <-- (term's our objective: 0.040000000000000036)
 OR (x1 = 1 AND x6 = 1 AND x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x4 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x6 = 0)            <-- (term's our objective: 0.06000000000000005)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 1 AND x5 = 1 AND x6 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x7 = 0) <-- (term's our objective: 0.020000000000000018)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.55475115776062
Best over terms:
  Our final objective: 0.14000000000000004
    Its accruacy: 0.57
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.14000000000000004
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

