Command:
python test_script.py -s smallest_subclass -d 5 -n 10 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.037500000000000006
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 5.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:37 PM: Your problem has 16 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:37 PM: Finished problem compilation (took 3.112e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 16
  constraints   = 21
  nnz(P)        = 0
  nnz(A)        = 51
  cones (total) = 1
    : Nonnegative = 1,  numel = 21

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4925e-01  +5.9944e+00  5.55e+00  7.33e-01  2.44e+00  1.00e+00  1.32e+00   ------   
  1  +4.7039e-01  +1.2326e+00  7.62e-01  2.46e-01  1.01e+00  3.81e-03  5.76e-01  7.28e-01  
  2  +3.0816e-01  +4.1219e-01  1.04e-01  3.71e-02  1.62e-01  7.10e-03  1.23e-01  8.83e-01  
  3  +2.9975e-01  +3.0432e-01  4.57e-03  1.70e-03  7.42e-03  4.55e-04  6.17e-03  9.53e-01  
  4  +3.0014e-01  +3.0032e-01  1.75e-04  6.57e-05  2.86e-04  1.71e-05  2.39e-04  9.61e-01  
  5  +3.0011e-01  +3.0016e-01  4.12e-05  1.39e-05  6.26e-05  2.25e-06  6.31e-05  9.13e-01  
  6  +3.0010e-01  +3.0010e-01  1.13e-06  3.48e-07  1.61e-06  5.22e-08  1.79e-06  9.76e-01  
  7  +3.0010e-01  +3.0010e-01  1.14e-08  3.46e-09  1.60e-08  5.23e-10  1.79e-08  9.90e-01  
  8  +3.0010e-01  +3.0010e-01  1.14e-10  3.46e-11  1.60e-10  5.23e-12  1.79e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:37 PM: Optimal value: 3.001e-01
(CVXPY) Aug 31 04:47:37 PM: Compilation took 3.112e-03 seconds
(CVXPY) Aug 31 04:47:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:37 PM: Your problem has 26 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:37 PM: Finished problem compilation (took 2.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 26
  constraints   = 31
  nnz(P)        = 0
  nnz(A)        = 88
  cones (total) = 1
    : Nonnegative = 1,  numel = 31

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.6217e-01  +6.1823e+00  5.82e+00  7.79e-01  2.81e+00  1.00e+00  1.34e+00   ------   
  1  +2.6952e-01  +1.1123e+00  8.43e-01  2.88e-01  1.13e+00  4.02e-03  5.81e-01  7.12e-01  
  2  +1.3704e-01  +3.9925e-01  2.62e-01  9.27e-02  4.12e-01  1.06e-02  2.76e-01  6.52e-01  
  3  +1.1222e-01  +1.4363e-01  3.14e-02  1.10e-02  5.17e-02  2.28e-03  4.08e-02  8.66e-01  
  4  +1.0046e-01  +1.0117e-01  7.08e-04  2.44e-04  1.17e-03  3.51e-05  9.54e-04  9.80e-01  
  5  +1.0022e-01  +1.0025e-01  2.92e-05  1.08e-05  5.05e-05  3.59e-07  4.42e-05  9.54e-01  
  6  +1.0020e-01  +1.0020e-01  5.19e-07  1.97e-07  8.91e-07  1.44e-08  9.04e-07  9.83e-01  
  7  +1.0020e-01  +1.0020e-01  5.18e-09  1.97e-09  8.90e-09  1.44e-10  9.04e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:37 PM: Optimal value: 1.002e-01
(CVXPY) Aug 31 04:47:37 PM: Compilation took 2.000e-03 seconds
(CVXPY) Aug 31 04:47:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:37 PM: Your problem has 36 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:37 PM: Finished problem compilation (took 2.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 41
  nnz(P)        = 0
  nnz(A)        = 108
  cones (total) = 1
    : Nonnegative = 1,  numel = 41

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3783e-01  +5.9423e+00  5.60e+00  8.06e-01  2.65e+00  1.00e+00  1.29e+00   ------   
  1  +1.8236e-01  +1.1364e+00  9.54e-01  3.44e-01  1.16e+00  4.40e-03  6.03e-01  6.38e-01  
  2  +1.0660e-01  +2.6788e-01  1.61e-01  7.19e-02  2.82e-01  1.27e-02  1.91e-01  8.39e-01  
  3  +1.0076e-01  +1.0612e-01  5.37e-03  2.44e-03  9.57e-03  7.70e-04  7.21e-03  9.68e-01  
  4  +1.0028e-01  +1.0051e-01  2.29e-04  1.11e-04  4.28e-04  2.54e-05  3.29e-04  9.54e-01  
  5  +1.0021e-01  +1.0028e-01  7.17e-05  3.26e-05  1.26e-04  6.05e-06  1.20e-04  7.58e-01  
  6  +1.0020e-01  +1.0020e-01  2.36e-06  1.11e-06  4.28e-06  1.47e-07  4.35e-06  9.64e-01  
  7  +1.0020e-01  +1.0020e-01  2.36e-08  1.11e-08  4.28e-08  1.47e-09  4.38e-08  9.90e-01  
  8  +1.0020e-01  +1.0020e-01  2.36e-10  1.11e-10  4.28e-10  1.47e-11  4.38e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:37 PM: Optimal value: 1.002e-01
(CVXPY) Aug 31 04:47:37 PM: Compilation took 2.007e-03 seconds
(CVXPY) Aug 31 04:47:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:47:37 PM: Your problem has 37 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:47:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:47:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:47:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:47:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:47:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:47:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:47:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:47:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:47:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:47:37 PM: Finished problem compilation (took 2.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 37
  constraints   = 42
  nnz(P)        = 0
  nnz(A)        = 110
  cones (total) = 1
    : Nonnegative = 1,  numel = 42

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.2122e-01  +6.1046e+00  5.78e+00  8.07e-01  2.65e+00  1.00e+00  1.31e+00   ------   
  1  +1.3762e-01  +1.1331e+00  9.96e-01  3.44e-01  1.17e+00  4.39e-03  6.18e-01  6.35e-01  
  2  +3.1595e-02  +2.1015e-01  1.79e-01  6.58e-02  2.69e-01  1.32e-02  1.93e-01  8.33e-01  
  3  +5.6043e-03  +3.8729e-02  3.31e-02  1.11e-02  4.83e-02  3.06e-03  3.80e-02  8.17e-01  
  4  +3.9450e-04  +8.5559e-04  4.61e-04  1.59e-04  6.91e-04  3.49e-05  5.59e-04  9.86e-01  
  5  +3.0888e-04  +3.3725e-04  2.84e-05  1.21e-05  4.81e-05  2.93e-07  4.57e-05  9.21e-01  
  6  +3.0027e-04  +3.0077e-04  5.02e-07  2.20e-07  8.61e-07  7.56e-09  8.94e-07  9.82e-01  
  7  +3.0000e-04  +3.0001e-04  5.01e-09  2.20e-09  8.59e-09  7.54e-11  8.94e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:47:37 PM: Problem status: optimal
(CVXPY) Aug 31 04:47:37 PM: Optimal value: 3.000e-04
(CVXPY) Aug 31 04:47:37 PM: Compilation took 2.002e-03 seconds
(CVXPY) Aug 31 04:47:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x4 = 1 AND x2 = 0)                       <-- (term's our objective: 0.19999999999999996)
 OR (x1 = 1 AND x4 = 1)                       <-- (term's our objective: 0.19999999999999996)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8156781196594238
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

