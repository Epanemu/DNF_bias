Command:
python test_script.py -s smallest_subclass -d 2 -n 10000 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29960000000000003
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 2.

Computed total variation: 0.29960000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:54 PM: Your problem has 5005 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:54 PM: Finished problem compilation (took 1.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5005
  constraints   = 10005
  nnz(P)        = 0
  nnz(A)        = 25005
  cones (total) = 1
    : Nonnegative = 1,  numel = 10005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +5.0009e+03  5.00e+03  9.83e-01  7.06e+01  1.00e+00  1.00e+00   ------   
  1  +6.3751e-01  +8.7398e+02  8.73e+02  2.67e-01  3.33e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5907e-01  +1.6318e+02  1.63e+02  1.33e-01  1.91e+01  5.29e-03  2.15e-01  5.88e-01  
  3  +5.0514e-01  +1.5448e+01  1.49e+01  7.61e-02  1.04e+01  4.90e-06  2.13e-01  6.96e-02  
  4  +5.0005e-01  +1.4481e+00  9.48e-01  6.31e-03  8.88e-01  2.75e-06  1.72e-01  4.81e-01  
  5  +4.9984e-01  +8.1086e-01  3.11e-01  2.05e-03  2.91e-01  2.36e-06  3.25e-02  8.67e-01  
  6  +4.8364e-01  +1.1480e+00  6.64e-01  3.93e-04  5.68e-02  1.38e-04  1.12e-03  9.87e-01  
  7  +4.4624e-01  +7.0762e-01  2.61e-01  6.26e-05  9.00e-03  1.89e-04  1.86e-04  8.40e-01  
  8  +4.0746e-01  +4.4507e-01  3.76e-02  9.09e-06  1.29e-03  4.97e-06  3.55e-05  9.44e-01  
  9  +3.9740e-01  +3.9891e-01  1.52e-03  3.39e-07  4.82e-05  1.40e-07  1.54e-06  9.70e-01  
 10  +3.9700e-01  +3.9702e-01  1.51e-05  3.38e-09  4.81e-07  1.40e-09  1.54e-08  9.90e-01  
 11  +3.9700e-01  +3.9700e-01  1.51e-07  3.38e-11  4.81e-09  1.40e-11  1.54e-10  9.90e-01  
 12  +3.9700e-01  +3.9700e-01  1.51e-09  3.38e-13  4.81e-11  1.40e-13  1.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.569ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:54 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:54 PM: Optimal value: 3.970e-01
(CVXPY) Aug 31 04:44:54 PM: Compilation took 1.126e-02 seconds
(CVXPY) Aug 31 04:44:54 PM: Solver (including time spent in interface) took 2.452e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3970
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:44:54 PM: Your problem has 5006 variables, 5000 constraints, and 0 parameters.
(CVXPY) Aug 31 04:44:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:44:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:44:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:44:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:44:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:44:54 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:44:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:44:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:44:54 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:44:54 PM: Finished problem compilation (took 9.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5006
  constraints   = 10006
  nnz(P)        = 0
  nnz(A)        = 27026
  cones (total) = 1
    : Nonnegative = 1,  numel = 10006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0000e-01  +5.0018e+03  5.00e+03  9.83e-01  7.34e+01  1.00e+00  1.00e+00   ------   
  1  +6.3734e-01  +8.7433e+02  8.74e+02  2.67e-01  3.47e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5894e-01  +1.6291e+02  1.62e+02  1.32e-01  1.98e+01  5.30e-03  2.15e-01  5.90e-01  
  3  +5.0485e-01  +1.4771e+01  1.43e+01  7.39e-02  1.05e+01  4.71e-06  2.13e-01  7.52e-02  
  4  +5.0061e-01  +3.0699e+00  2.57e+00  1.70e-02  2.44e+00  3.10e-06  1.94e-01  2.08e-01  
  5  +5.0000e-01  +8.0137e-01  3.01e-01  2.00e-03  2.95e-01  9.17e-07  4.30e-02  8.56e-01  
  6  +4.9969e-01  +8.7727e-01  3.78e-01  2.23e-03  3.30e-01  3.61e-06  1.32e-02  7.67e-01  
  7  +4.8297e-01  +8.1571e-01  3.33e-01  1.17e-04  1.78e-02  1.31e-04  3.06e-04  9.78e-01  
  8  +4.7582e-01  +8.0677e-01  3.31e-01  8.71e-05  1.32e-02  1.64e-04  2.20e-04  3.25e-01  
  9  +4.7202e-01  +7.8317e-01  3.11e-01  8.51e-05  1.29e-02  1.42e-04  2.20e-04  1.69e-02  
 10  +4.4249e-01  +6.8623e-01  2.44e-01  4.64e-05  6.99e-03  1.37e-04  1.24e-04  4.88e-01  
 11  +3.8588e-01  +4.7417e-01  8.83e-02  1.67e-05  2.48e-03  1.15e-06  5.35e-05  7.36e-01  
 12  +3.5205e-01  +3.5553e-01  3.48e-03  6.33e-07  9.36e-05  5.89e-08  2.31e-06  9.76e-01  
 13  +3.5032e-01  +3.5035e-01  3.51e-05  6.38e-09  9.43e-07  5.90e-10  2.36e-08  9.90e-01  
 14  +3.5030e-01  +3.5030e-01  3.51e-07  6.38e-11  9.43e-09  5.90e-12  2.36e-10  9.90e-01  
 15  +3.5030e-01  +3.5030e-01  3.51e-09  6.38e-13  9.43e-11  5.92e-14  2.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.3819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:44:54 PM: Problem status: optimal
(CVXPY) Aug 31 04:44:54 PM: Optimal value: 3.503e-01
(CVXPY) Aug 31 04:44:54 PM: Compilation took 9.511e-03 seconds
(CVXPY) Aug 31 04:44:54 PM: Solver (including time spent in interface) took 3.169e-02 seconds
FULL MODEL:
  Accruacy: 0.6498
  Our objective: 0.29960000000000003

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.29960000000000003)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8215529918670654
Best over terms:
  Our final objective: 0.29960000000000003
    Its accruacy: 0.6498
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29960000000000003
  Highest accruacy: 0.6498
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

