Command:
python test_script.py -s smallest_subclass -d 4 -n 100 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.08
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.30000000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:32 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:32 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9667e-01  +5.0816e+01  5.03e+01  8.58e-01  7.85e+00  1.00e+00  1.03e+00   ------   
  1  +6.0312e-01  +1.0118e+01  9.51e+00  2.95e-01  4.13e+00  4.08e-03  4.89e-01  6.68e-01  
  2  +5.3380e-01  +1.6296e+00  1.10e+00  6.89e-02  1.13e+00  9.48e-03  1.70e-01  8.84e-01  
  3  +4.9783e-01  +7.1948e-01  2.22e-01  1.46e-02  2.40e-01  6.15e-03  5.22e-02  9.90e-01  
  4  +4.7778e-01  +6.6932e-01  1.92e-01  4.90e-03  8.34e-02  1.20e-02  1.66e-02  7.13e-01  
  5  +4.5666e-01  +5.3589e-01  7.92e-02  1.74e-03  2.94e-02  2.46e-03  6.70e-03  7.39e-01  
  6  +4.3598e-01  +4.5168e-01  1.57e-02  3.06e-04  5.17e-03  2.54e-05  1.32e-03  9.53e-01  
  7  +4.3021e-01  +4.3050e-01  2.87e-04  5.46e-06  9.21e-05  6.02e-07  2.44e-05  9.86e-01  
  8  +4.3010e-01  +4.3010e-01  2.87e-06  5.46e-08  9.21e-07  6.02e-09  2.44e-07  9.90e-01  
  9  +4.3010e-01  +4.3010e-01  2.87e-08  5.46e-10  9.21e-09  6.02e-11  2.44e-09  9.90e-01  
 10  +4.3010e-01  +4.3010e-01  2.87e-10  5.46e-12  9.21e-11  6.02e-13  2.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 282.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:32 PM: Optimal value: 4.301e-01
(CVXPY) Aug 31 04:46:32 PM: Compilation took 4.000e-03 seconds
(CVXPY) Aug 31 04:46:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:32 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:32 PM: Finished problem compilation (took 1.966e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 451
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9356e-01  +5.1156e+01  5.07e+01  8.66e-01  7.99e+00  1.00e+00  1.06e+00   ------   
  1  +5.8225e-01  +1.0393e+01  9.81e+00  3.15e-01  4.20e+00  4.04e-03  5.16e-01  6.54e-01  
  2  +5.1952e-01  +1.6081e+00  1.09e+00  6.50e-02  1.08e+00  1.14e-02  1.66e-01  9.31e-01  
  3  +4.9650e-01  +1.3729e+00  8.76e-01  3.43e-02  5.80e-01  1.24e-02  9.52e-02  5.13e-01  
  4  +4.5988e-01  +8.8731e-01  4.27e-01  1.39e-02  2.34e-01  5.75e-03  4.50e-02  5.93e-01  
  5  +4.2990e-01  +5.4876e-01  1.19e-01  3.76e-03  6.24e-02  1.09e-03  1.46e-02  8.23e-01  
  6  +4.1960e-01  +4.8590e-01  6.63e-02  1.73e-03  2.89e-02  6.74e-04  6.72e-03  6.16e-01  
  7  +4.1384e-01  +4.5935e-01  4.55e-02  8.93e-04  1.50e-02  5.67e-04  3.44e-03  5.63e-01  
  8  +4.0994e-01  +4.3719e-01  2.73e-02  6.18e-04  1.03e-02  1.32e-04  2.45e-03  7.43e-01  
  9  +4.0199e-01  +4.0765e-01  5.66e-03  1.09e-04  1.83e-03  2.90e-05  4.49e-04  8.35e-01  
 10  +4.0045e-01  +4.0105e-01  5.99e-04  1.16e-05  1.95e-04  3.14e-06  4.85e-05  9.90e-01  
 11  +4.0022e-01  +4.0028e-01  5.55e-05  1.07e-06  1.80e-05  2.78e-07  4.61e-06  9.11e-01  
 12  +4.0020e-01  +4.0020e-01  6.08e-07  1.17e-08  1.97e-07  3.02e-09  5.07e-08  9.89e-01  
 13  +4.0020e-01  +4.0020e-01  6.08e-09  1.17e-10  1.97e-09  3.02e-11  5.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 353.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:32 PM: Optimal value: 4.002e-01
(CVXPY) Aug 31 04:46:32 PM: Compilation took 1.966e-03 seconds
(CVXPY) Aug 31 04:46:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:32 PM: Your problem has 78 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:32 PM: Finished problem compilation (took 2.996e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 78
  constraints   = 128
  nnz(P)        = 0
  nnz(A)        = 548
  cones (total) = 1
    : Nonnegative = 1,  numel = 128

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9338e-01  +5.1108e+01  5.06e+01  8.70e-01  8.21e+00  1.00e+00  1.05e+00   ------   
  1  +5.7045e-01  +1.0698e+01  1.01e+01  3.45e-01  4.48e+00  3.92e-03  5.48e-01  6.30e-01  
  2  +5.1462e-01  +1.7146e+00  1.20e+00  7.66e-02  1.28e+00  1.31e-02  1.95e-01  9.30e-01  
  3  +4.8453e-01  +1.1580e+00  6.73e-01  2.94e-02  5.06e-01  1.06e-02  8.49e-02  6.54e-01  
  4  +4.5248e-01  +8.4827e-01  3.96e-01  1.29e-02  2.23e-01  7.10e-03  4.13e-02  5.65e-01  
  5  +4.2164e-01  +6.8685e-01  2.65e-01  6.19e-03  1.07e-01  5.03e-03  2.11e-02  5.83e-01  
  6  +3.8015e-01  +4.4500e-01  6.48e-02  1.49e-03  2.54e-02  4.47e-05  5.93e-03  8.91e-01  
  7  +3.6159e-01  +3.6533e-01  3.75e-03  8.37e-05  1.42e-03  3.20e-06  3.70e-04  9.45e-01  
  8  +3.6114e-01  +3.6355e-01  2.41e-03  5.34e-05  9.05e-04  4.03e-06  2.39e-04  4.94e-01  
  9  +3.6035e-01  +3.6049e-01  1.39e-04  3.08e-06  5.21e-05  2.19e-07  1.41e-05  9.42e-01  
 10  +3.6030e-01  +3.6030e-01  1.69e-06  3.73e-08  6.32e-07  2.59e-09  1.73e-07  9.88e-01  
 11  +3.6030e-01  +3.6030e-01  1.69e-08  3.73e-10  6.32e-09  2.59e-11  1.73e-09  9.90e-01  
 12  +3.6030e-01  +3.6030e-01  1.69e-10  3.73e-12  6.32e-11  2.59e-13  1.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 401.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:32 PM: Optimal value: 3.603e-01
(CVXPY) Aug 31 04:46:32 PM: Compilation took 2.996e-03 seconds
(CVXPY) Aug 31 04:46:32 PM: Solver (including time spent in interface) took 1.005e-03 seconds
Iteration: 3, Objective: 0.3603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:32 PM: Your problem has 82 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:32 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:32 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:32 PM: Finished problem compilation (took 5.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 82
  constraints   = 132
  nnz(P)        = 0
  nnz(A)        = 566
  cones (total) = 1
    : Nonnegative = 1,  numel = 132

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9269e-01  +5.1114e+01  5.06e+01  8.72e-01  8.14e+00  1.00e+00  1.06e+00   ------   
  1  +5.6441e-01  +1.0680e+01  1.01e+01  3.47e-01  4.42e+00  3.91e-03  5.50e-01  6.31e-01  
  2  +5.1135e-01  +1.7283e+00  1.22e+00  7.50e-02  1.24e+00  1.32e-02  1.90e-01  9.33e-01  
  3  +4.7584e-01  +1.1942e+00  7.18e-01  2.86e-02  4.86e-01  1.14e-02  8.20e-02  6.60e-01  
  4  +4.2892e-01  +8.4260e-01  4.14e-01  1.08e-02  1.85e-01  8.07e-03  3.48e-02  6.44e-01  
  5  +3.9630e-01  +6.2740e-01  2.31e-01  5.59e-03  9.49e-02  3.84e-03  1.97e-02  4.96e-01  
  6  +3.5946e-01  +3.9351e-01  3.40e-02  8.34e-04  1.39e-02  1.70e-04  3.45e-03  8.76e-01  
  7  +3.5104e-01  +3.5315e-01  2.11e-03  5.19e-05  8.62e-04  9.07e-06  2.30e-04  9.38e-01  
  8  +3.5078e-01  +3.5199e-01  1.21e-03  2.90e-05  4.82e-04  5.22e-06  1.32e-04  6.16e-01  
  9  +3.5042e-01  +3.5047e-01  5.45e-05  1.29e-06  2.15e-05  2.06e-07  6.08e-06  9.63e-01  
 10  +3.5040e-01  +3.5040e-01  5.61e-07  1.33e-08  2.21e-07  2.09e-09  6.29e-08  9.90e-01  
 11  +3.5040e-01  +3.5040e-01  5.62e-09  1.33e-10  2.21e-09  2.09e-11  6.30e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 380.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:32 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:32 PM: Optimal value: 3.504e-01
(CVXPY) Aug 31 04:46:32 PM: Compilation took 5.003e-03 seconds
(CVXPY) Aug 31 04:46:32 PM: Solver (including time spent in interface) took 1.021e-03 seconds
FULL MODEL:
  Accruacy: 0.64
  Our objective: 0.28

IF 
    (x1 = 1 AND x2 = 1 AND x3 = 0)            <-- (term's our objective: 0.14000000000000004)
 OR (x1 = 1 AND x3 = 1 AND x0 = 0)            <-- (term's our objective: 0.04000000000000001)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.07999999999999997)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0) <-- (term's our objective: 0.020000000000000018)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.0872883796691895
Best over terms:
  Our final objective: 0.14000000000000004
    Its accruacy: 0.57
    Its hamming distance: 5
  Shortest hamming distance: 0
    Its our objective: 0.07999999999999997
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

