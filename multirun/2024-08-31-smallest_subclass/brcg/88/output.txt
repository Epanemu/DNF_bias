Command:
python test_script.py -s smallest_subclass -d 3 -n 50 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 3.

Computed total variation: 0.28
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:17 PM: Your problem has 32 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:17 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 57
  nnz(P)        = 0
  nnz(A)        = 157
  cones (total) = 1
    : Nonnegative = 1,  numel = 57

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8796e-01  +2.6090e+01  2.56e+01  8.08e-01  5.05e+00  1.00e+00  1.09e+00   ------   
  1  +6.0331e-01  +5.0876e+00  4.48e+00  2.54e-01  2.42e+00  4.19e-03  4.73e-01  6.99e-01  
  2  +5.1079e-01  +1.1207e+00  6.10e-01  5.47e-02  5.86e-01  8.86e-03  1.49e-01  8.53e-01  
  3  +4.5191e-01  +9.3221e-01  4.80e-01  2.28e-02  2.52e-01  9.85e-03  7.27e-02  5.93e-01  
  4  +3.8381e-01  +4.6292e-01  7.91e-02  3.84e-03  4.14e-02  6.69e-05  1.80e-02  8.49e-01  
  5  +3.6139e-01  +3.6608e-01  4.69e-03  2.22e-04  2.38e-03  9.98e-06  1.26e-03  9.43e-01  
  6  +3.6011e-01  +3.6016e-01  4.69e-05  2.22e-06  2.38e-05  1.00e-07  1.27e-05  9.90e-01  
  7  +3.6010e-01  +3.6010e-01  4.69e-07  2.22e-08  2.38e-07  1.00e-09  1.27e-07  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  4.69e-09  2.22e-10  2.38e-09  1.00e-11  1.27e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:17 PM: Optimal value: 3.601e-01
(CVXPY) Aug 31 04:45:17 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:45:17 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:17 PM: Your problem has 35 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:17 PM: Finished problem compilation (took 2.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 35
  constraints   = 60
  nnz(P)        = 0
  nnz(A)        = 185
  cones (total) = 1
    : Nonnegative = 1,  numel = 60

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8661e-01  +2.6007e+01  2.55e+01  8.14e-01  5.28e+00  1.00e+00  1.09e+00   ------   
  1  +5.9365e-01  +5.1487e+00  4.56e+00  2.67e-01  2.54e+00  4.15e-03  4.89e-01  6.89e-01  
  2  +5.0806e-01  +1.0151e+00  5.07e-01  4.59e-02  5.13e-01  9.75e-03  1.26e-01  9.26e-01  
  3  +4.4306e-01  +8.8089e-01  4.38e-01  1.98e-02  2.27e-01  1.11e-02  6.33e-02  6.48e-01  
  4  +3.8191e-01  +4.7757e-01  9.57e-02  4.51e-03  5.07e-02  8.45e-04  1.80e-02  7.73e-01  
  5  +3.6191e-01  +3.6781e-01  5.90e-03  2.87e-04  3.20e-03  2.44e-05  1.38e-03  9.37e-01  
  6  +3.6014e-01  +3.6026e-01  1.21e-04  5.90e-06  6.56e-05  5.00e-07  3.12e-05  9.81e-01  
  7  +3.6010e-01  +3.6010e-01  2.27e-06  1.11e-07  1.23e-06  5.05e-09  6.51e-07  9.80e-01  
  8  +3.6010e-01  +3.6010e-01  2.26e-08  1.11e-09  1.23e-08  5.03e-11  6.52e-09  9.90e-01  
  9  +3.6010e-01  +3.6010e-01  2.26e-10  1.11e-11  1.23e-10  5.03e-13  6.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 148.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:17 PM: Optimal value: 3.601e-01
(CVXPY) Aug 31 04:45:17 PM: Compilation took 2.003e-03 seconds
(CVXPY) Aug 31 04:45:17 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:17 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:17 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:17 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:17 PM: Finished problem compilation (took 3.098e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 210
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8461e-01  +2.6064e+01  2.56e+01  8.19e-01  5.43e+00  1.00e+00  1.10e+00   ------   
  1  +5.7835e-01  +5.2843e+00  4.71e+00  2.88e-01  2.73e+00  4.02e-03  5.21e-01  6.69e-01  
  2  +5.0068e-01  +1.0551e+00  5.54e-01  5.13e-02  5.84e-01  1.13e-02  1.42e-01  9.34e-01  
  3  +4.2356e-01  +7.5914e-01  3.36e-01  1.56e-02  1.83e-01  9.29e-03  5.25e-02  7.39e-01  
  4  +3.7064e-01  +4.1491e-01  4.43e-02  2.21e-03  2.54e-02  7.24e-05  9.13e-03  8.99e-01  
  5  +3.6065e-01  +3.6270e-01  2.05e-03  1.03e-04  1.18e-03  4.58e-06  4.56e-04  9.56e-01  
  6  +3.6017e-01  +3.6040e-01  2.33e-04  1.17e-05  1.33e-04  1.74e-06  5.82e-05  9.90e-01  
  7  +3.6011e-01  +3.6012e-01  1.75e-05  8.75e-07  9.93e-06  8.21e-08  5.13e-06  9.29e-01  
  8  +3.6010e-01  +3.6010e-01  1.85e-07  9.28e-09  1.05e-07  8.71e-10  5.61e-08  9.89e-01  
  9  +3.6010e-01  +3.6010e-01  1.85e-09  9.27e-11  1.05e-09  8.70e-12  5.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 171.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:17 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:17 PM: Optimal value: 3.601e-01
(CVXPY) Aug 31 04:45:17 PM: Compilation took 3.098e-03 seconds
(CVXPY) Aug 31 04:45:17 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.64
  Our objective: 0.27999999999999997

IF 
    (x2 = 0) <-- (term's our objective: 0.27999999999999997)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.9938127994537354
Best over terms:
  Our final objective: 0.27999999999999997
    Its accruacy: 0.64
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.27999999999999997
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

