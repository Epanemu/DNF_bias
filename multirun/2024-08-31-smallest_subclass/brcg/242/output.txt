Command:
python test_script.py -s smallest_subclass -d 7 -n 10 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 7.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:05 PM: Your problem has 20 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:05 PM: Finished problem compilation (took 3.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 20
  constraints   = 25
  nnz(P)        = 0
  nnz(A)        = 65
  cones (total) = 1
    : Nonnegative = 1,  numel = 25

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5041e-01  +6.0268e+00  5.58e+00  7.53e-01  2.57e+00  1.00e+00  1.29e+00   ------   
  1  +4.4652e-01  +1.2211e+00  7.75e-01  2.74e-01  1.11e+00  3.66e-03  5.93e-01  7.20e-01  
  2  +2.8109e-01  +3.9193e-01  1.11e-01  3.94e-02  1.82e-01  7.97e-03  1.23e-01  8.94e-01  
  3  +2.1572e-01  +2.5490e-01  3.92e-02  1.02e-02  5.11e-02  2.59e-03  4.36e-02  8.64e-01  
  4  +2.0054e-01  +2.0142e-01  8.81e-04  2.34e-04  1.17e-03  4.95e-05  1.05e-03  9.76e-01  
  5  +2.0020e-01  +2.0021e-01  8.80e-06  2.34e-06  1.17e-05  4.94e-07  1.05e-05  9.90e-01  
  6  +2.0020e-01  +2.0020e-01  8.80e-08  2.34e-08  1.17e-07  4.94e-09  1.05e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  8.80e-10  2.34e-10  1.17e-09  4.94e-11  1.05e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:05 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:05 PM: Optimal value: 2.002e-01
(CVXPY) Aug 31 04:53:05 PM: Compilation took 3.993e-03 seconds
(CVXPY) Aug 31 04:53:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:05 PM: Your problem has 30 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:05 PM: Finished problem compilation (took 3.207e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 35
  nnz(P)        = 0
  nnz(A)        = 97
  cones (total) = 1
    : Nonnegative = 1,  numel = 35

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.6776e-01  +6.1243e+00  5.76e+00  7.89e-01  2.72e+00  1.00e+00  1.29e+00   ------   
  1  +2.4078e-01  +1.0534e+00  8.13e-01  2.96e-01  1.10e+00  3.91e-03  5.60e-01  7.22e-01  
  2  +1.2132e-01  +2.8406e-01  1.63e-01  6.42e-02  2.72e-01  7.31e-03  1.73e-01  7.81e-01  
  3  +1.0192e-01  +1.0902e-01  7.10e-03  2.88e-03  1.23e-02  5.47e-04  8.68e-03  9.54e-01  
  4  +1.0025e-01  +1.0050e-01  2.44e-04  1.01e-04  4.28e-04  1.62e-05  3.07e-04  9.65e-01  
  5  +1.0020e-01  +1.0022e-01  2.40e-05  1.06e-05  4.36e-05  1.15e-06  3.39e-05  9.27e-01  
  6  +1.0020e-01  +1.0020e-01  2.73e-07  1.21e-07  4.95e-07  1.37e-08  3.87e-07  9.89e-01  
  7  +1.0020e-01  +1.0020e-01  2.73e-09  1.21e-09  4.95e-09  1.37e-10  3.87e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:05 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:05 PM: Optimal value: 1.002e-01
(CVXPY) Aug 31 04:53:05 PM: Compilation took 3.207e-03 seconds
(CVXPY) Aug 31 04:53:05 PM: Solver (including time spent in interface) took 1.005e-03 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:05 PM: Your problem has 33 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:05 PM: Finished problem compilation (took 1.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 33
  constraints   = 38
  nnz(P)        = 0
  nnz(A)        = 106
  cones (total) = 1
    : Nonnegative = 1,  numel = 38

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5140e-01  +6.0801e+00  5.73e+00  7.96e-01  2.74e+00  1.00e+00  1.27e+00   ------   
  1  +1.7127e-01  +1.0003e+00  8.29e-01  3.03e-01  1.10e+00  4.04e-03  5.50e-01  7.13e-01  
  2  +4.2870e-02  +1.8249e-01  1.40e-01  4.79e-02  2.24e-01  1.21e-02  1.27e-01  9.24e-01  
  3  +2.7516e-03  +1.6345e-02  1.36e-02  4.47e-03  2.12e-02  1.22e-03  1.29e-02  9.07e-01  
  4  +3.1684e-04  +5.1446e-04  1.98e-04  6.80e-05  3.19e-04  1.25e-05  1.98e-04  9.85e-01  
  5  +2.9733e-04  +3.2166e-04  2.43e-05  9.83e-06  4.16e-05  1.41e-06  2.85e-05  8.58e-01  
  6  +2.9997e-04  +3.0024e-04  2.67e-07  1.09e-07  4.59e-07  1.55e-08  3.16e-07  9.89e-01  
  7  +3.0000e-04  +3.0000e-04  2.67e-09  1.09e-09  4.59e-09  1.55e-10  3.16e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:05 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:05 PM: Optimal value: 3.000e-04
(CVXPY) Aug 31 04:53:05 PM: Compilation took 1.997e-03 seconds
(CVXPY) Aug 31 04:53:05 PM: Solver (including time spent in interface) took 9.925e-04 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x4 = 1)            <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8722896575927734
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 6
  Shortest hamming distance: 6
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

