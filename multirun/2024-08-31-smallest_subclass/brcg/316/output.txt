Command:
python test_script.py -s smallest_subclass -d 8 -n 50000 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.00476
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.0568
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:00 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:00 PM: Finished problem compilation (took 1.098e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3498e-01  +6.3201e+02  6.31e+02  1.70e-01  8.22e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0962e-01  +1.6465e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5934e+01  1.54e+01  4.30e-02  2.06e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +4.9999e-01  +1.0076e+00  5.08e-01  1.52e-03  7.55e-01  2.33e-05  1.91e-01  2.68e-01  
  6  +5.0000e-01  +5.3480e-01  3.48e-02  1.04e-04  5.18e-02  1.34e-06  1.36e-02  9.29e-01  
  7  +5.0000e-01  +5.2722e-01  2.72e-02  8.12e-05  4.05e-02  1.18e-06  8.65e-03  4.07e-01  
  8  +5.0000e-01  +5.1611e-01  1.61e-02  4.80e-05  2.39e-02  1.37e-06  2.50e-03  7.65e-01  
  9  +4.9992e-01  +5.2575e-01  2.58e-02  2.84e-05  1.42e-02  4.30e-05  1.06e-04  9.90e-01  
 10  +4.9829e-01  +5.1923e-01  2.09e-02  1.32e-06  6.62e-04  8.13e-04  4.24e-06  9.60e-01  
 11  +4.9746e-01  +5.0762e-01  1.02e-02  5.56e-07  2.78e-04  2.64e-04  1.85e-06  6.62e-01  
 12  +4.9643e-01  +5.0004e-01  3.61e-03  1.65e-07  8.27e-05  2.92e-06  6.07e-07  9.25e-01  
 13  +4.9547e-01  +4.9629e-01  8.22e-04  3.37e-08  1.68e-05  5.92e-07  1.33e-07  7.94e-01  
 14  +4.9536e-01  +4.9583e-01  4.79e-04  1.93e-08  9.65e-06  1.11e-08  7.67e-08  9.90e-01  
 15  +4.9519e-01  +4.9520e-01  1.64e-05  6.54e-10  3.27e-07  3.55e-10  2.64e-09  9.69e-01  
 16  +4.9518e-01  +4.9518e-01  1.64e-07  6.56e-12  3.28e-09  3.56e-12  2.64e-11  9.90e-01  
 17  +4.9518e-01  +4.9518e-01  1.65e-09  6.60e-14  3.30e-11  5.00e-14  3.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 347.637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:00 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:00 PM: Optimal value: 4.952e-01
(CVXPY) Aug 31 05:05:00 PM: Compilation took 1.098e-01 seconds
(CVXPY) Aug 31 05:05:00 PM: Solver (including time spent in interface) took 3.773e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4952
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:00 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:00 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:00 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:00 PM: Finished problem compilation (took 1.144e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 302873
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.53e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3464e+03  5.35e+03  4.23e-01  1.62e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3192e+02  6.31e+02  1.70e-01  8.34e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6462e+02  1.64e+02  1.47e-01  7.25e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5930e+01  1.54e+01  4.30e-02  2.10e+01  4.76e-06  1.96e-01  4.42e-01  
  5  +4.9999e-01  +1.0220e+00  5.22e-01  1.56e-03  7.88e-01  2.34e-05  1.91e-01  2.64e-01  
  6  +5.0000e-01  +6.6766e-01  1.68e-01  5.00e-04  2.53e-01  7.25e-06  6.32e-02  6.77e-01  
  7  +5.0000e-01  +6.3050e-01  1.30e-01  3.89e-04  1.97e-01  3.49e-06  4.28e-02  7.03e-01  
  8  +5.0001e-01  +5.9517e-01  9.52e-02  2.84e-04  1.44e-01  7.28e-07  2.63e-02  9.89e-01  
  9  +5.0000e-01  +5.4152e-01  4.15e-02  1.24e-04  6.27e-02  4.29e-07  9.28e-03  6.75e-01  
 10  +5.0000e-01  +5.3177e-01  3.18e-02  9.28e-05  4.70e-02  1.04e-06  1.58e-03  9.90e-01  
 11  +4.9987e-01  +5.3216e-01  3.23e-02  7.00e-06  3.55e-03  6.77e-05  2.30e-05  9.87e-01  
 12  +4.9941e-01  +5.2931e-01  2.99e-02  2.00e-06  1.01e-03  2.09e-04  6.45e-06  7.36e-01  
 13  +4.9904e-01  +5.2588e-01  2.68e-02  1.91e-06  9.71e-04  1.54e-04  6.19e-06  1.20e-01  
 14  +4.9897e-01  +5.2471e-01  2.57e-02  1.88e-06  9.56e-04  1.23e-04  6.08e-06  1.28e-01  
 15  +4.9842e-01  +5.1897e-01  2.05e-02  1.60e-06  8.11e-04  2.90e-05  5.22e-06  5.42e-01  
 16  +4.9821e-01  +5.1766e-01  1.94e-02  1.40e-06  7.12e-04  2.35e-05  4.60e-06  2.53e-01  
 17  +4.9821e-01  +5.1758e-01  1.94e-02  1.40e-06  7.10e-04  2.19e-05  4.58e-06  5.50e-02  
 18  +4.9742e-01  +5.1349e-01  1.61e-02  9.47e-07  4.81e-04  1.83e-05  3.16e-06  3.84e-01  
 19  +4.9717e-01  +5.1231e-01  1.51e-02  9.44e-07  4.79e-04  1.56e-05  3.15e-06  2.64e-02  
 20  +4.9664e-01  +5.0963e-01  1.30e-02  7.35e-07  3.73e-04  1.13e-05  2.47e-06  3.46e-01  
 21  +4.9663e-01  +5.0951e-01  1.29e-02  7.29e-07  3.70e-04  9.63e-06  2.44e-06  1.28e-01  
 22  +4.9485e-01  +5.0098e-01  6.13e-03  2.85e-07  1.44e-04  2.84e-06  9.66e-07  7.66e-01  
 23  +4.9485e-01  +5.0072e-01  5.87e-03  2.59e-07  1.32e-04  1.32e-06  8.57e-07  5.89e-01  
 24  +4.9349e-01  +4.9475e-01  1.26e-03  4.96e-08  2.52e-05  2.92e-07  1.61e-07  8.51e-01  
 25  +4.9314e-01  +4.9385e-01  7.07e-04  2.45e-08  1.25e-05  1.24e-07  7.79e-08  6.29e-01  
 26  +4.9296e-01  +4.9326e-01  3.00e-04  1.00e-08  5.08e-06  4.24e-09  3.20e-08  9.74e-01  
 27  +4.9282e-01  +4.9283e-01  4.84e-06  1.58e-10  8.04e-08  6.09e-11  5.09e-10  9.88e-01  
 28  +4.9282e-01  +4.9282e-01  4.84e-08  1.58e-12  8.04e-10  6.10e-13  5.09e-12  9.90e-01  
 29  +4.9282e-01  +4.9282e-01  5.01e-10  1.64e-14  8.33e-12  1.75e-14  1.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 731.572ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:01 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:01 PM: Optimal value: 4.928e-01
(CVXPY) Aug 31 05:05:01 PM: Compilation took 1.144e-01 seconds
(CVXPY) Aug 31 05:05:01 PM: Solver (including time spent in interface) took 7.632e-01 seconds
Iteration: 2, Objective: 0.4928
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:01 PM: Your problem has 25037 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:01 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:01 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:01 PM: Finished problem compilation (took 1.267e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25037
  constraints   = 50037
  nnz(P)        = 0
  nnz(A)        = 336560
  cones (total) = 1
    : Nonnegative = 1,  numel = 50037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.58e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3496e-01  +6.3181e+02  6.31e+02  1.70e-01  8.52e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6459e+02  1.64e+02  1.47e-01  7.41e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0123e-01  +1.5930e+01  1.54e+01  4.30e-02  2.14e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0338e+00  5.34e-01  1.59e-03  8.23e-01  2.35e-05  1.91e-01  2.61e-01  
  6  +5.0000e-01  +6.6819e-01  1.68e-01  5.02e-04  2.60e-01  6.94e-06  6.18e-02  7.01e-01  
  7  +5.0000e-01  +6.0254e-01  1.03e-01  3.06e-04  1.58e-01  4.27e-06  3.48e-02  4.95e-01  
  8  +5.0000e-01  +5.9852e-01  9.85e-02  2.94e-04  1.52e-01  2.46e-06  2.26e-02  8.17e-01  
  9  +5.0000e-01  +5.7743e-01  7.74e-02  2.31e-04  1.19e-01  2.53e-06  1.27e-02  4.53e-01  
 10  +5.0000e-01  +5.5841e-01  5.84e-02  1.71e-04  8.84e-02  3.61e-06  3.02e-03  9.90e-01  
 11  +4.9965e-01  +5.4716e-01  4.75e-02  1.34e-05  6.95e-03  1.76e-04  4.51e-05  9.90e-01  
 12  +4.9815e-01  +5.3974e-01  4.16e-02  2.72e-06  1.41e-03  7.17e-04  8.94e-06  8.09e-01  
 13  +4.9800e-01  +5.3777e-01  3.98e-02  2.61e-06  1.35e-03  5.89e-04  8.54e-06  1.49e-01  
 14  +4.9772e-01  +5.3563e-01  3.79e-02  2.40e-06  1.25e-03  5.30e-04  7.87e-06  1.32e-01  
 15  +4.9757e-01  +5.3259e-01  3.50e-02  2.34e-06  1.21e-03  3.16e-04  7.69e-06  2.57e-01  
 16  +4.9686e-01  +5.2803e-01  3.12e-02  1.91e-06  9.90e-04  2.57e-04  6.29e-06  2.70e-01  
 17  +4.9670e-01  +5.2652e-01  2.98e-02  1.77e-06  9.20e-04  1.85e-04  5.82e-06  2.69e-01  
 18  +4.9606e-01  +5.2301e-01  2.70e-02  1.50e-06  7.78e-04  1.46e-04  4.94e-06  2.55e-01  
 19  +4.9597e-01  +5.2187e-01  2.59e-02  1.39e-06  7.23e-04  8.00e-05  4.59e-06  4.09e-01  
 20  +4.9488e-01  +5.1686e-01  2.20e-02  1.04e-06  5.41e-04  6.62e-05  3.48e-06  2.95e-01  
 21  +4.9434e-01  +5.1482e-01  2.05e-02  1.03e-06  5.36e-04  5.58e-05  3.48e-06  1.88e-02  
 22  +4.9247e-01  +5.0625e-01  1.38e-02  6.03e-07  3.12e-04  2.31e-05  2.08e-06  6.24e-01  
 23  +4.9198e-01  +5.0340e-01  1.14e-02  4.81e-07  2.49e-04  5.86e-06  1.66e-06  7.06e-01  
 24  +4.8969e-01  +4.9426e-01  4.57e-03  1.81e-07  9.40e-05  9.62e-07  6.48e-07  7.95e-01  
 25  +4.8822e-01  +4.8854e-01  3.19e-04  1.22e-08  6.32e-06  3.07e-08  4.56e-08  9.50e-01  
 26  +4.8810e-01  +4.8811e-01  3.79e-06  1.44e-10  7.47e-08  3.01e-10  5.53e-10  9.89e-01  
 27  +4.8810e-01  +4.8810e-01  3.79e-08  1.44e-12  7.47e-10  3.01e-12  5.53e-12  9.90e-01  
 28  +4.8810e-01  +4.8810e-01  3.84e-10  1.46e-14  7.57e-12  5.05e-14  9.01e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 672.2167ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:02 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:02 PM: Optimal value: 4.881e-01
(CVXPY) Aug 31 05:05:02 PM: Compilation took 1.267e-01 seconds
(CVXPY) Aug 31 05:05:02 PM: Solver (including time spent in interface) took 7.075e-01 seconds
Iteration: 3, Objective: 0.4881
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:02 PM: Your problem has 25047 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:02 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:02 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:02 PM: Finished problem compilation (took 1.338e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25047
  constraints   = 50047
  nnz(P)        = 0
  nnz(A)        = 353408
  cones (total) = 1
    : Nonnegative = 1,  numel = 50047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3467e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3495e-01  +6.3170e+02  6.31e+02  1.70e-01  8.56e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6455e+02  1.64e+02  1.47e-01  7.44e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.30e-02  2.15e+01  4.76e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0364e+00  5.36e-01  1.60e-03  8.32e-01  2.35e-05  1.91e-01  2.60e-01  
  6  +5.0000e-01  +6.4060e-01  1.41e-01  4.19e-04  2.18e-01  3.59e-06  4.74e-02  9.54e-01  
  7  +5.0000e-01  +6.0258e-01  1.03e-01  3.06e-04  1.59e-01  2.69e-06  3.13e-02  4.07e-01  
  8  +5.0000e-01  +5.8313e-01  8.31e-02  2.48e-04  1.29e-01  2.36e-06  1.97e-02  4.70e-01  
  9  +5.0000e-01  +5.7287e-01  7.29e-02  2.17e-04  1.13e-01  2.53e-06  8.13e-03  8.24e-01  
 10  +4.9998e-01  +5.5769e-01  5.77e-02  1.48e-04  7.67e-02  9.94e-06  1.06e-03  9.90e-01  
 11  +4.9942e-01  +5.5483e-01  5.54e-02  1.03e-05  5.38e-03  2.85e-04  3.43e-05  9.68e-01  
 12  +4.9878e-01  +5.4513e-01  4.63e-02  4.66e-06  2.43e-03  3.76e-04  1.53e-05  7.17e-01  
 13  +4.9879e-01  +5.4245e-01  4.37e-02  4.18e-06  2.18e-03  2.29e-04  1.36e-05  4.19e-01  
 14  +4.9864e-01  +5.4118e-01  4.25e-02  3.63e-06  1.89e-03  2.11e-04  1.18e-05  2.56e-01  
 15  +4.9858e-01  +5.4014e-01  4.16e-02  3.48e-06  1.81e-03  1.61e-04  1.13e-05  2.36e-01  
 16  +4.9846e-01  +5.3908e-01  4.06e-02  3.13e-06  1.63e-03  1.33e-04  1.02e-05  2.78e-01  
 17  +4.9837e-01  +5.3819e-01  3.98e-02  2.97e-06  1.55e-03  1.10e-04  9.64e-06  2.04e-01  
 18  +4.9778e-01  +5.3480e-01  3.70e-02  2.38e-06  1.24e-03  6.31e-05  7.73e-06  5.48e-01  
 19  +4.9774e-01  +5.3461e-01  3.69e-02  2.37e-06  1.24e-03  6.04e-05  7.71e-06  3.24e-02  
 20  +4.9649e-01  +5.2856e-01  3.21e-02  1.83e-06  9.56e-04  3.33e-05  6.01e-06  5.05e-01  
 21  +4.9435e-01  +5.1888e-01  2.45e-02  1.27e-06  6.65e-04  1.48e-05  4.25e-06  5.34e-01  
 22  +4.9386e-01  +5.1654e-01  2.27e-02  1.15e-06  5.98e-04  8.52e-06  3.84e-06  3.80e-01  
 23  +4.9096e-01  +5.0448e-01  1.35e-02  6.08e-07  3.17e-04  4.32e-06  2.08e-06  5.23e-01  
 24  +4.9040e-01  +5.0217e-01  1.18e-02  4.82e-07  2.51e-04  7.28e-07  1.67e-06  8.36e-01  
 25  +4.8927e-01  +4.9786e-01  8.59e-03  3.41e-07  1.78e-04  4.35e-07  1.20e-06  4.24e-01  
 26  +4.8928e-01  +4.9785e-01  8.57e-03  3.39e-07  1.77e-04  4.05e-07  1.19e-06  9.51e-02  
 27  +4.8719e-01  +4.8993e-01  2.74e-03  1.04e-07  5.43e-05  7.72e-08  3.77e-07  8.27e-01  
 28  +4.8644e-01  +4.8713e-01  6.94e-04  2.58e-08  1.35e-05  8.47e-09  9.55e-08  9.90e-01  
 29  +4.8617e-01  +4.8618e-01  1.43e-05  5.30e-10  2.76e-07  1.70e-10  1.98e-09  9.81e-01  
 30  +4.8616e-01  +4.8616e-01  1.43e-07  5.31e-12  2.77e-09  1.71e-12  1.98e-11  9.90e-01  
 31  +4.8616e-01  +4.8616e-01  1.44e-09  5.33e-14  2.78e-11  2.05e-14  2.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 793.2142ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:03 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:03 PM: Optimal value: 4.862e-01
(CVXPY) Aug 31 05:05:03 PM: Compilation took 1.338e-01 seconds
(CVXPY) Aug 31 05:05:03 PM: Solver (including time spent in interface) took 8.283e-01 seconds
Iteration: 4, Objective: 0.4862
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:03 PM: Your problem has 25057 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:03 PM: Finished problem compilation (took 1.379e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25057
  constraints   = 50057
  nnz(P)        = 0
  nnz(A)        = 364826
  cones (total) = 1
    : Nonnegative = 1,  numel = 50057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3468e+03  5.35e+03  4.23e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3161e+02  6.31e+02  1.70e-01  8.57e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0961e-01  +1.6452e+02  1.64e+02  1.47e-01  7.45e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.30e-02  2.15e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0585e+00  5.59e-01  1.67e-03  8.68e-01  2.35e-05  1.91e-01  2.51e-01  
  6  +5.0000e-01  +6.6216e-01  1.62e-01  4.84e-04  2.52e-01  6.26e-06  5.80e-02  7.28e-01  
  7  +5.0000e-01  +6.2015e-01  1.20e-01  3.59e-04  1.87e-01  4.43e-06  3.77e-02  4.76e-01  
  8  +5.0000e-01  +5.8213e-01  8.21e-02  2.45e-04  1.28e-01  3.43e-06  1.84e-02  6.33e-01  
  9  +5.0000e-01  +6.0090e-01  1.01e-01  3.00e-04  1.56e-01  2.53e-06  9.93e-03  9.90e-01  
 10  +4.9998e-01  +5.6987e-01  6.99e-02  1.77e-04  9.24e-02  1.04e-05  1.24e-03  8.84e-01  
 11  +4.9948e-01  +5.6626e-01  6.68e-02  1.39e-05  7.28e-03  2.57e-04  4.59e-05  9.64e-01  
 12  +4.9943e-01  +5.5373e-01  5.43e-02  8.13e-06  4.25e-03  1.88e-04  2.65e-05  7.38e-01  
 13  +4.9949e-01  +5.5080e-01  5.13e-02  7.25e-06  3.79e-03  1.19e-04  2.35e-05  4.40e-01  
 14  +4.9925e-01  +5.4891e-01  4.97e-02  5.50e-06  2.87e-03  1.31e-04  1.78e-05  3.38e-01  
 15  +4.9910e-01  +5.4703e-01  4.79e-02  4.70e-06  2.46e-03  1.09e-04  1.52e-05  3.53e-01  
 16  +4.9909e-01  +5.4678e-01  4.77e-02  4.69e-06  2.45e-03  1.01e-04  1.51e-05  6.94e-02  
 17  +4.9884e-01  +5.4516e-01  4.63e-02  4.02e-06  2.10e-03  9.74e-05  1.30e-05  2.38e-01  
 18  +4.9875e-01  +5.4449e-01  4.57e-02  3.96e-06  2.07e-03  8.15e-05  1.28e-05  1.44e-01  
 19  +4.9834e-01  +5.4225e-01  4.39e-02  3.41e-06  1.78e-03  7.71e-05  1.11e-05  2.20e-01  
 20  +4.9812e-01  +5.4076e-01  4.26e-02  3.20e-06  1.67e-03  5.86e-05  1.04e-05  2.55e-01  
 21  +4.9785e-01  +5.3932e-01  4.15e-02  3.11e-06  1.63e-03  3.88e-05  1.01e-05  2.85e-01  
 22  +4.9648e-01  +5.3288e-01  3.64e-02  2.31e-06  1.21e-03  3.63e-05  7.55e-06  2.95e-01  
 23  +4.9607e-01  +5.3062e-01  3.45e-02  2.19e-06  1.14e-03  1.56e-05  7.21e-06  4.53e-01  
 24  +4.9448e-01  +5.2348e-01  2.90e-02  1.67e-06  8.72e-04  1.22e-05  5.55e-06  2.95e-01  
 25  +4.9165e-01  +5.1068e-01  1.90e-02  9.59e-07  5.01e-04  2.95e-06  3.23e-06  7.31e-01  
 26  +4.9168e-01  +5.1080e-01  1.91e-02  9.56e-07  4.99e-04  2.87e-06  3.22e-06  4.01e-02  
 27  +4.9169e-01  +5.1084e-01  1.92e-02  9.46e-07  4.94e-04  2.52e-06  3.18e-06  1.34e-01  
 28  +4.9130e-01  +5.0917e-01  1.79e-02  8.37e-07  4.37e-04  1.64e-06  2.80e-06  3.92e-01  
 29  +4.9120e-01  +5.0887e-01  1.77e-02  8.32e-07  4.35e-04  1.58e-06  2.80e-06  1.57e-02  
 30  +4.8915e-01  +5.0041e-01  1.13e-02  4.89e-07  2.55e-04  7.07e-07  1.67e-06  5.84e-01  
 31  +4.8907e-01  +5.0006e-01  1.10e-02  4.74e-07  2.48e-04  6.56e-07  1.62e-06  8.79e-02  
 32  +4.8859e-01  +4.9774e-01  9.15e-03  3.79e-07  1.98e-04  9.26e-08  1.30e-06  9.90e-01  
 33  +4.8773e-01  +4.9436e-01  6.63e-03  2.71e-07  1.41e-04  6.84e-08  9.36e-07  4.23e-01  
 34  +4.8616e-01  +4.8819e-01  2.03e-03  8.13e-08  4.25e-05  2.13e-08  2.88e-07  8.15e-01  
 35  +4.8558e-01  +4.8597e-01  3.89e-04  1.54e-08  8.03e-06  4.31e-09  5.54e-08  9.51e-01  
 36  +4.8544e-01  +4.8545e-01  5.21e-06  2.06e-10  1.07e-07  5.74e-11  7.44e-10  9.87e-01  
 37  +4.8544e-01  +4.8544e-01  5.21e-08  2.06e-12  1.07e-09  5.74e-13  7.44e-12  9.90e-01  
 38  +4.8544e-01  +4.8544e-01  5.22e-10  2.06e-14  1.08e-11  6.37e-15  8.22e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 940.4628ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:04 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:04 PM: Optimal value: 4.854e-01
(CVXPY) Aug 31 05:05:04 PM: Compilation took 1.379e-01 seconds
(CVXPY) Aug 31 05:05:04 PM: Solver (including time spent in interface) took 9.753e-01 seconds
Iteration: 5, Objective: 0.4854
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:05 PM: Your problem has 25067 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:05 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:05 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:05 PM: Finished problem compilation (took 1.450e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25067
  constraints   = 50067
  nnz(P)        = 0
  nnz(A)        = 373045
  cones (total) = 1
    : Nonnegative = 1,  numel = 50067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.60e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3469e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3153e+02  6.31e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6449e+02  1.64e+02  1.47e-01  7.46e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.30e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0903e+00  5.90e-01  1.76e-03  9.18e-01  2.35e-05  1.91e-01  2.39e-01  
  6  +5.0000e-01  +6.6160e-01  1.62e-01  4.82e-04  2.51e-01  5.81e-06  5.66e-02  7.30e-01  
  7  +5.0000e-01  +6.1690e-01  1.17e-01  3.49e-04  1.82e-01  3.93e-06  3.38e-02  5.78e-01  
  8  +5.0000e-01  +5.8134e-01  8.13e-02  2.43e-04  1.27e-01  3.72e-06  1.45e-02  6.67e-01  
  9  +4.9999e-01  +5.7827e-01  7.83e-02  2.31e-04  1.20e-01  7.83e-06  5.02e-03  7.21e-01  
 10  +4.9985e-01  +5.6762e-01  6.78e-02  9.06e-05  4.73e-02  7.50e-05  3.71e-04  9.90e-01  
 11  +4.9874e-01  +5.6185e-01  6.31e-02  1.25e-05  6.53e-03  5.92e-04  4.22e-05  8.87e-01  
 12  +4.9846e-01  +5.5672e-01  5.83e-02  8.48e-06  4.43e-03  5.85e-04  2.82e-05  5.15e-01  
 13  +4.9893e-01  +5.5417e-01  5.52e-02  7.22e-06  3.78e-03  2.77e-04  2.36e-05  6.34e-01  
 14  +4.9894e-01  +5.5405e-01  5.51e-02  7.18e-06  3.76e-03  2.65e-04  2.35e-05  4.39e-02  
 15  +4.9849e-01  +5.5107e-01  5.26e-02  5.17e-06  2.71e-03  2.78e-04  1.69e-05  4.21e-01  
 16  +4.9818e-01  +5.4872e-01  5.05e-02  4.31e-06  2.26e-03  2.39e-04  1.41e-05  3.45e-01  
 17  +4.9818e-01  +5.4771e-01  4.95e-02  4.11e-06  2.15e-03  1.61e-04  1.34e-05  3.29e-01  
 18  +4.9765e-01  +5.4485e-01  4.72e-02  3.47e-06  1.82e-03  1.37e-04  1.13e-05  3.08e-01  
 19  +4.9760e-01  +5.4458e-01  4.70e-02  3.46e-06  1.81e-03  1.30e-04  1.13e-05  3.94e-02  
 20  +4.9629e-01  +5.3829e-01  4.20e-02  2.66e-06  1.39e-03  1.10e-04  8.74e-06  3.35e-01  
 21  +4.9491e-01  +5.3046e-01  3.56e-02  2.17e-06  1.14e-03  1.13e-06  7.21e-06  8.19e-01  
 22  +4.9451e-01  +5.2880e-01  3.43e-02  2.04e-06  1.06e-03  1.03e-06  6.78e-06  1.28e-01  
 23  +4.9422e-01  +5.2752e-01  3.33e-02  1.94e-06  1.01e-03  7.04e-07  6.48e-06  3.38e-01  
 24  +4.9268e-01  +5.2092e-01  2.82e-02  1.52e-06  7.95e-04  5.34e-07  5.14e-06  3.22e-01  
 25  +4.9270e-01  +5.2098e-01  2.83e-02  1.50e-06  7.86e-04  4.77e-07  5.07e-06  1.67e-01  
 26  +4.9189e-01  +5.1750e-01  2.56e-02  1.31e-06  6.86e-04  3.74e-07  4.46e-06  2.95e-01  
 27  +4.8895e-01  +5.0502e-01  1.61e-02  7.46e-07  3.90e-04  2.04e-07  2.60e-06  5.39e-01  
 28  +4.8677e-01  +4.9560e-01  8.83e-03  3.72e-07  1.94e-04  8.09e-08  1.32e-06  9.90e-01  
 29  +4.8674e-01  +4.9549e-01  8.75e-03  3.67e-07  1.92e-04  8.07e-08  1.31e-06  4.20e-02  
 30  +4.8657e-01  +4.9481e-01  8.24e-03  3.43e-07  1.79e-04  8.18e-08  1.23e-06  5.22e-01  
 31  +4.8597e-01  +4.9248e-01  6.51e-03  2.67e-07  1.40e-04  6.56e-08  9.69e-07  3.38e-01  
 32  +4.8595e-01  +4.9241e-01  6.46e-03  2.63e-07  1.38e-04  6.62e-08  9.54e-07  1.76e-01  
 33  +4.8424e-01  +4.8574e-01  1.50e-03  5.94e-08  3.11e-05  1.52e-08  2.25e-07  8.20e-01  
 34  +4.8404e-01  +4.8498e-01  9.41e-04  3.69e-08  1.93e-05  1.01e-08  1.41e-07  9.90e-01  
 35  +4.8369e-01  +4.8372e-01  2.71e-05  1.05e-09  5.50e-07  2.85e-10  4.11e-09  9.79e-01  
 36  +4.8368e-01  +4.8368e-01  2.71e-07  1.05e-11  5.50e-09  2.85e-12  4.12e-11  9.90e-01  
 37  +4.8368e-01  +4.8368e-01  2.71e-09  1.05e-13  5.50e-11  2.85e-14  4.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 978.3139ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:06 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:06 PM: Optimal value: 4.837e-01
(CVXPY) Aug 31 05:05:06 PM: Compilation took 1.450e-01 seconds
(CVXPY) Aug 31 05:05:06 PM: Solver (including time spent in interface) took 1.015e+00 seconds
Iteration: 6, Objective: 0.4837
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:06 PM: Your problem has 25077 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:06 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:06 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:06 PM: Finished problem compilation (took 1.512e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25077
  constraints   = 50077
  nnz(P)        = 0
  nnz(A)        = 379732
  cones (total) = 1
    : Nonnegative = 1,  numel = 50077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3468e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3152e+02  6.31e+02  1.70e-01  8.58e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6449e+02  1.64e+02  1.47e-01  7.46e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5932e+01  1.54e+01  4.30e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.1101e+00  6.10e-01  1.82e-03  9.50e-01  2.35e-05  1.91e-01  2.31e-01  
  6  +5.0000e-01  +6.7619e-01  1.76e-01  5.26e-04  2.74e-01  6.10e-06  6.07e-02  7.07e-01  
  7  +5.0000e-01  +6.2950e-01  1.30e-01  3.87e-04  2.02e-01  4.34e-06  3.89e-02  4.87e-01  
  8  +5.0000e-01  +5.8822e-01  8.82e-02  2.63e-04  1.37e-01  3.64e-06  1.79e-02  6.53e-01  
  9  +4.9999e-01  +5.8133e-01  8.13e-02  2.40e-04  1.25e-01  7.30e-06  5.57e-03  7.91e-01  
 10  +4.9989e-01  +5.7024e-01  7.03e-02  1.14e-04  5.96e-02  5.51e-05  5.03e-04  9.90e-01  
 11  +4.9927e-01  +5.6684e-01  6.76e-02  2.15e-05  1.12e-02  3.51e-04  7.36e-05  8.55e-01  
 12  +4.9866e-01  +5.5405e-01  5.54e-02  8.12e-06  4.25e-03  4.77e-04  2.69e-05  8.96e-01  
 13  +4.9852e-01  +5.5325e-01  5.47e-02  7.09e-06  3.71e-03  4.89e-04  2.34e-05  2.03e-01  
 14  +4.9871e-01  +5.5247e-01  5.38e-02  6.07e-06  3.17e-03  2.85e-04  1.98e-05  5.78e-01  
 15  +4.9879e-01  +5.5150e-01  5.27e-02  5.58e-06  2.92e-03  1.58e-04  1.81e-05  4.97e-01  
 16  +4.9851e-01  +5.4979e-01  5.13e-02  4.74e-06  2.48e-03  1.46e-04  1.54e-05  2.86e-01  
 17  +4.9812e-01  +5.4752e-01  4.94e-02  3.90e-06  2.04e-03  1.19e-04  1.26e-05  3.98e-01  
 18  +4.9800e-01  +5.4688e-01  4.89e-02  3.79e-06  1.98e-03  9.65e-05  1.23e-05  1.94e-01  
 19  +4.9755e-01  +5.4468e-01  4.71e-02  3.37e-06  1.77e-03  8.13e-05  1.09e-05  2.52e-01  
 20  +4.9615e-01  +5.3784e-01  4.17e-02  2.62e-06  1.37e-03  4.79e-05  8.58e-06  4.94e-01  
 21  +4.9393e-01  +5.2771e-01  3.38e-02  1.88e-06  9.84e-04  3.07e-05  6.22e-06  4.27e-01  
 22  +4.9375e-01  +5.2684e-01  3.31e-02  1.83e-06  9.55e-04  2.69e-05  6.05e-06  1.13e-01  
 23  +4.8971e-01  +5.0917e-01  1.95e-02  9.30e-07  4.86e-04  7.59e-06  3.18e-06  6.95e-01  
 24  +4.8951e-01  +5.0837e-01  1.89e-02  8.86e-07  4.63e-04  5.42e-06  3.04e-06  2.72e-01  
 25  +4.8796e-01  +5.0184e-01  1.39e-02  6.10e-07  3.19e-04  1.44e-06  2.14e-06  7.25e-01  
 26  +4.8660e-01  +4.9637e-01  9.77e-03  4.14e-07  2.17e-04  8.02e-07  1.48e-06  4.58e-01  
 27  +4.8661e-01  +4.9638e-01  9.78e-03  4.12e-07  2.15e-04  7.76e-07  1.47e-06  4.82e-02  
 28  +4.8657e-01  +4.9625e-01  9.67e-03  4.09e-07  2.14e-04  7.13e-07  1.46e-06  7.92e-02  
 29  +4.8608e-01  +4.9424e-01  8.16e-03  3.38e-07  1.77e-04  4.31e-07  1.22e-06  4.43e-01  
 30  +4.8603e-01  +4.9404e-01  8.01e-03  3.32e-07  1.74e-04  4.03e-07  1.20e-06  7.61e-02  
 31  +4.8604e-01  +4.9405e-01  8.00e-03  3.29e-07  1.72e-04  3.51e-07  1.18e-06  1.83e-01  
 32  +4.8391e-01  +4.8572e-01  1.81e-03  7.18e-08  3.75e-05  1.97e-08  2.72e-07  9.90e-01  
 33  +4.8329e-01  +4.8341e-01  1.23e-04  4.79e-09  2.51e-06  1.30e-09  1.87e-08  9.39e-01  
 34  +4.8324e-01  +4.8324e-01  1.47e-06  5.69e-11  2.98e-08  1.55e-11  2.23e-10  9.90e-01  
 35  +4.8324e-01  +4.8324e-01  1.47e-08  5.69e-13  2.98e-10  1.55e-13  2.23e-12  9.90e-01  
 36  +4.8324e-01  +4.8324e-01  1.47e-10  5.69e-15  3.00e-12  2.07e-15  2.95e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1412156s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:07 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:07 PM: Optimal value: 4.832e-01
(CVXPY) Aug 31 05:05:07 PM: Compilation took 1.512e-01 seconds
(CVXPY) Aug 31 05:05:07 PM: Solver (including time spent in interface) took 1.180e+00 seconds
Iteration: 7, Objective: 0.4832
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:07 PM: Your problem has 25087 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:07 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:07 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:08 PM: Finished problem compilation (took 2.119e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25087
  constraints   = 50087
  nnz(P)        = 0
  nnz(A)        = 387820
  cones (total) = 1
    : Nonnegative = 1,  numel = 50087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3468e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3147e+02  6.31e+02  1.70e-01  8.59e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6447e+02  1.64e+02  1.47e-01  7.47e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5930e+01  1.54e+01  4.30e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0870e+00  5.87e-01  1.76e-03  9.15e-01  2.36e-05  1.91e-01  2.42e-01  
  6  +5.0000e-01  +7.0283e-01  2.03e-01  6.06e-04  3.16e-01  6.99e-06  6.84e-02  7.28e-01  
  7  +5.0000e-01  +6.7368e-01  1.74e-01  5.18e-04  2.71e-01  5.15e-06  5.13e-02  4.70e-01  
  8  +5.0000e-01  +6.3775e-01  1.38e-01  4.11e-04  2.15e-01  4.02e-06  3.43e-02  4.58e-01  
  9  +5.0001e-01  +6.2666e-01  1.27e-01  3.77e-04  1.97e-01  2.17e-06  1.76e-02  9.54e-01  
 10  +4.9999e-01  +5.7583e-01  7.58e-02  2.17e-04  1.13e-01  5.51e-06  2.74e-03  8.65e-01  
 11  +4.9963e-01  +5.7232e-01  7.27e-02  2.18e-05  1.14e-02  1.84e-04  7.35e-05  9.80e-01  
 12  +4.9889e-01  +5.6688e-01  6.80e-02  7.87e-06  4.12e-03  4.48e-04  2.60e-05  6.80e-01  
 13  +4.9904e-01  +5.6492e-01  6.59e-02  7.50e-06  3.93e-03  3.44e-04  2.46e-05  2.52e-01  
 14  +4.9901e-01  +5.6290e-01  6.39e-02  6.82e-06  3.57e-03  2.95e-04  2.23e-05  2.46e-01  
 15  +4.9898e-01  +5.6174e-01  6.28e-02  6.69e-06  3.51e-03  2.57e-04  2.19e-05  1.21e-01  
 16  +4.9864e-01  +5.5880e-01  6.02e-02  5.54e-06  2.90e-03  2.46e-04  1.81e-05  2.83e-01  
 17  +4.9783e-01  +5.5227e-01  5.44e-02  4.09e-06  2.14e-03  1.81e-04  1.34e-05  5.16e-01  
 18  +4.9779e-01  +5.5199e-01  5.42e-02  4.07e-06  2.13e-03  1.72e-04  1.34e-05  4.08e-02  
 19  +4.9733e-01  +5.4916e-01  5.18e-02  3.67e-06  1.92e-03  1.40e-04  1.21e-05  2.42e-01  
 20  +4.9731e-01  +5.4907e-01  5.18e-02  3.67e-06  1.92e-03  1.39e-04  1.21e-05  4.31e-03  
 21  +4.9667e-01  +5.4550e-01  4.88e-02  3.39e-06  1.77e-03  1.00e-04  1.12e-05  2.56e-01  
 22  +4.9526e-01  +5.3825e-01  4.30e-02  2.71e-06  1.42e-03  7.55e-05  9.04e-06  3.18e-01  
 23  +4.9375e-01  +5.3053e-01  3.68e-02  2.17e-06  1.14e-03  3.73e-05  7.31e-06  4.72e-01  
 24  +4.9377e-01  +5.3056e-01  3.68e-02  2.16e-06  1.13e-03  3.48e-05  7.27e-06  6.50e-02  
 25  +4.9371e-01  +5.3020e-01  3.65e-02  2.14e-06  1.12e-03  3.10e-05  7.23e-06  8.40e-02  
 26  +4.9205e-01  +5.2247e-01  3.04e-02  1.67e-06  8.75e-04  2.32e-05  5.70e-06  2.81e-01  
 27  +4.9212e-01  +5.2270e-01  3.06e-02  1.66e-06  8.70e-04  2.05e-05  5.65e-06  1.19e-01  
 28  +4.9052e-01  +5.1535e-01  2.48e-02  1.27e-06  6.65e-04  1.30e-05  4.36e-06  3.71e-01  
 29  +4.9042e-01  +5.1488e-01  2.45e-02  1.25e-06  6.53e-04  1.05e-05  4.32e-06  1.58e-01  
 30  +4.8714e-01  +4.9999e-01  1.28e-02  6.00e-07  3.14e-04  4.03e-06  2.12e-06  6.16e-01  
 31  +4.8712e-01  +4.9992e-01  1.28e-02  5.89e-07  3.08e-04  3.62e-06  2.08e-06  1.29e-01  
 32  +4.8711e-01  +4.9989e-01  1.28e-02  5.86e-07  3.07e-04  3.31e-06  2.06e-06  9.17e-02  
 33  +4.8533e-01  +4.9234e-01  7.00e-03  3.00e-07  1.57e-04  1.52e-06  1.07e-06  5.84e-01  
 34  +4.8530e-01  +4.9222e-01  6.92e-03  2.87e-07  1.50e-04  1.38e-06  1.01e-06  1.50e-01  
 35  +4.8527e-01  +4.9213e-01  6.86e-03  2.87e-07  1.50e-04  1.35e-06  1.01e-06  1.93e-03  
 36  +4.8478e-01  +4.9032e-01  5.55e-03  2.32e-07  1.22e-04  7.11e-07  8.37e-07  4.23e-01  
 37  +4.8377e-01  +4.8622e-01  2.45e-03  9.65e-08  5.06e-05  2.37e-07  3.53e-07  7.15e-01  
 38  +4.8354e-01  +4.8529e-01  1.76e-03  6.82e-08  3.57e-05  1.13e-07  2.50e-07  5.65e-01  
 39  +4.8337e-01  +4.8462e-01  1.26e-03  4.76e-08  2.49e-05  2.60e-08  1.74e-07  8.90e-01  
 40  +4.8337e-01  +4.8462e-01  1.25e-03  4.76e-08  2.49e-05  2.57e-08  1.74e-07  9.68e-03  
 41  +4.8314e-01  +4.8383e-01  6.88e-04  2.60e-08  1.36e-05  1.03e-08  9.61e-08  7.47e-01  
 42  +4.8292e-01  +4.8301e-01  9.63e-05  3.58e-09  1.88e-06  1.44e-09  1.34e-08  8.70e-01  
 43  +4.8288e-01  +4.8288e-01  9.94e-07  3.69e-11  1.93e-08  1.49e-11  1.38e-10  9.90e-01  
 44  +4.8288e-01  +4.8288e-01  9.94e-09  3.69e-13  1.93e-10  1.49e-13  1.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4212117s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:09 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:09 PM: Optimal value: 4.829e-01
(CVXPY) Aug 31 05:05:09 PM: Compilation took 2.119e-01 seconds
(CVXPY) Aug 31 05:05:09 PM: Solver (including time spent in interface) took 1.478e+00 seconds
Iteration: 8, Objective: 0.4829
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:09 PM: Your problem has 25097 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:09 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:09 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:09 PM: Finished problem compilation (took 2.042e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25097
  constraints   = 50097
  nnz(P)        = 0
  nnz(A)        = 397224
  cones (total) = 1
    : Nonnegative = 1,  numel = 50097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3149e+02  6.31e+02  1.70e-01  8.60e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6447e+02  1.64e+02  1.47e-01  7.48e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5928e+01  1.54e+01  4.30e-02  2.16e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0834e+00  5.83e-01  1.74e-03  9.11e-01  2.36e-05  1.91e-01  2.44e-01  
  6  +5.0000e-01  +6.7309e-01  1.73e-01  5.17e-04  2.70e-01  6.40e-06  6.01e-02  7.18e-01  
  7  +5.0000e-01  +6.5065e-01  1.51e-01  4.50e-04  2.35e-01  5.09e-06  4.53e-02  4.19e-01  
  8  +5.0000e-01  +6.4135e-01  1.41e-01  4.22e-04  2.21e-01  3.87e-06  3.22e-02  5.85e-01  
  9  +5.0000e-01  +6.1209e-01  1.12e-01  3.34e-04  1.75e-01  3.13e-06  1.57e-02  7.35e-01  
 10  +4.9999e-01  +5.8120e-01  8.12e-02  2.31e-04  1.21e-01  8.66e-06  2.79e-03  8.70e-01  
 11  +4.9955e-01  +5.7732e-01  7.78e-02  2.81e-05  1.48e-02  2.25e-04  9.58e-05  9.68e-01  
 12  +4.9888e-01  +5.7048e-01  7.16e-02  1.11e-05  5.83e-03  4.77e-04  3.69e-05  6.72e-01  
 13  +4.9904e-01  +5.6675e-01  6.77e-02  9.76e-06  5.12e-03  3.58e-04  3.21e-05  3.63e-01  
 14  +4.9898e-01  +5.6398e-01  6.50e-02  8.23e-06  4.32e-03  3.20e-04  2.70e-05  3.24e-01  
 15  +4.9915e-01  +5.5994e-01  6.08e-02  7.47e-06  3.92e-03  1.56e-04  2.44e-05  5.27e-01  
 16  +4.9847e-01  +5.5573e-01  5.73e-02  4.96e-06  2.61e-03  1.85e-04  1.62e-05  4.24e-01  
 17  +4.9811e-01  +5.5338e-01  5.53e-02  4.41e-06  2.32e-03  1.65e-04  1.44e-05  2.26e-01  
 18  +4.9801e-01  +5.5215e-01  5.41e-02  4.28e-06  2.24e-03  1.24e-04  1.39e-05  2.34e-01  
 19  +4.9752e-01  +5.4957e-01  5.21e-02  3.78e-06  1.98e-03  1.17e-04  1.24e-05  1.77e-01  
 20  +4.9747e-01  +5.4927e-01  5.18e-02  3.77e-06  1.98e-03  1.12e-04  1.23e-05  3.15e-02  
 21  +4.9632e-01  +5.4343e-01  4.71e-02  3.10e-06  1.63e-03  8.44e-05  1.02e-05  3.40e-01  
 22  +4.9475e-01  +5.3550e-01  4.07e-02  2.47e-06  1.29e-03  4.41e-05  8.20e-06  4.73e-01  
 23  +4.9435e-01  +5.3341e-01  3.91e-02  2.31e-06  1.21e-03  3.30e-05  7.67e-06  2.35e-01  
 24  +4.9427e-01  +5.3302e-01  3.87e-02  2.29e-06  1.20e-03  2.83e-05  7.60e-06  1.17e-01  
 25  +4.9185e-01  +5.2193e-01  3.01e-02  1.58e-06  8.28e-04  1.67e-05  5.31e-06  4.59e-01  
 26  +4.9154e-01  +5.2059e-01  2.90e-02  1.49e-06  7.79e-04  1.43e-05  4.99e-06  1.57e-01  
 27  +4.9126e-01  +5.1958e-01  2.83e-02  1.42e-06  7.47e-04  8.64e-06  4.84e-06  3.43e-01  
 28  +4.9044e-01  +5.1607e-01  2.56e-02  1.24e-06  6.48e-04  5.29e-06  4.21e-06  3.85e-01  
 29  +4.8877e-01  +5.0899e-01  2.02e-02  9.24e-07  4.84e-04  3.61e-06  3.18e-06  3.36e-01  
 30  +4.8851e-01  +5.0771e-01  1.92e-02  8.53e-07  4.47e-04  2.07e-06  2.94e-06  4.36e-01  
 31  +4.8753e-01  +5.0371e-01  1.62e-02  7.00e-07  3.67e-04  1.48e-06  2.43e-06  2.97e-01  
 32  +4.8701e-01  +5.0121e-01  1.42e-02  5.87e-07  3.08e-04  1.10e-07  2.04e-06  9.90e-01  
 33  +4.8512e-01  +4.9381e-01  8.69e-03  3.49e-07  1.83e-04  7.08e-08  1.25e-06  4.91e-01  
 34  +4.8304e-01  +4.8570e-01  2.66e-03  1.03e-07  5.41e-05  2.62e-08  3.80e-07  8.87e-01  
 35  +4.8264e-01  +4.8416e-01  1.53e-03  5.84e-08  3.06e-05  1.62e-08  2.18e-07  7.26e-01  
 36  +4.8222e-01  +4.8265e-01  4.29e-04  1.63e-08  8.53e-06  4.64e-09  6.15e-08  8.14e-01  
 37  +4.8207e-01  +4.8210e-01  2.71e-05  1.02e-09  5.36e-07  2.92e-10  3.89e-09  9.38e-01  
 38  +4.8206e-01  +4.8206e-01  2.94e-07  1.11e-11  5.82e-09  3.17e-12  4.23e-11  9.89e-01  
 39  +4.8206e-01  +4.8206e-01  2.95e-09  1.11e-13  5.85e-11  3.86e-14  5.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1778394s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:11 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:11 PM: Optimal value: 4.821e-01
(CVXPY) Aug 31 05:05:11 PM: Compilation took 2.042e-01 seconds
(CVXPY) Aug 31 05:05:11 PM: Solver (including time spent in interface) took 1.217e+00 seconds
Iteration: 9, Objective: 0.4821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:11 PM: Your problem has 25107 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:11 PM: Finished problem compilation (took 1.803e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25107
  constraints   = 50107
  nnz(P)        = 0
  nnz(A)        = 404144
  cones (total) = 1
    : Nonnegative = 1,  numel = 50107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.61e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3467e+03  5.35e+03  4.24e-01  1.67e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3146e+02  6.31e+02  1.70e-01  8.60e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6447e+02  1.64e+02  1.47e-01  7.48e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5928e+01  1.54e+01  4.30e-02  2.17e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0000e-01  +1.0884e+00  5.88e-01  1.76e-03  9.19e-01  2.36e-05  1.91e-01  2.42e-01  
  6  +5.0000e-01  +7.0761e-01  2.08e-01  6.20e-04  3.25e-01  7.51e-06  7.07e-02  6.83e-01  
  7  +5.0000e-01  +6.6718e-01  1.67e-01  4.99e-04  2.61e-01  5.05e-06  4.87e-02  5.58e-01  
  8  +5.0000e-01  +6.3417e-01  1.34e-01  4.00e-04  2.10e-01  3.43e-06  2.96e-02  6.57e-01  
  9  +5.0000e-01  +5.8822e-01  8.82e-02  2.63e-04  1.37e-01  3.64e-06  9.84e-03  7.87e-01  
 10  +4.9996e-01  +5.8035e-01  8.04e-02  1.89e-04  9.91e-02  2.24e-05  1.15e-03  9.14e-01  
 11  +4.9958e-01  +5.7845e-01  7.89e-02  3.44e-05  1.80e-02  2.08e-04  1.19e-04  8.98e-01  
 12  +4.9934e-01  +5.6756e-01  6.82e-02  1.59e-05  8.34e-03  2.81e-04  5.32e-05  7.59e-01  
 13  +4.9922e-01  +5.6524e-01  6.60e-02  1.22e-05  6.42e-03  2.97e-04  4.06e-05  3.62e-01  
 14  +4.9938e-01  +5.6066e-01  6.13e-02  9.68e-06  5.08e-03  1.52e-04  3.18e-05  6.93e-01  
 15  +4.9937e-01  +5.5716e-01  5.78e-02  6.89e-06  3.62e-03  4.33e-05  2.24e-05  9.90e-01  
 16  +4.9884e-01  +5.5417e-01  5.53e-02  4.90e-06  2.57e-03  5.29e-05  1.59e-05  3.32e-01  
 17  +4.9842e-01  +5.5190e-01  5.35e-02  4.41e-06  2.32e-03  2.84e-05  1.43e-05  5.04e-01  
 18  +4.9837e-01  +5.5173e-01  5.34e-02  4.39e-06  2.31e-03  2.68e-05  1.43e-05  5.24e-02  
 19  +4.9753e-01  +5.4755e-01  5.00e-02  3.52e-06  1.85e-03  2.51e-05  1.15e-05  2.96e-01  
 20  +4.9749e-01  +5.4741e-01  4.99e-02  3.52e-06  1.85e-03  2.49e-05  1.15e-05  3.73e-03  
 21  +4.9681e-01  +5.4440e-01  4.76e-02  3.26e-06  1.71e-03  1.69e-05  1.07e-05  3.01e-01  
 22  +4.9573e-01  +5.3935e-01  4.36e-02  2.75e-06  1.44e-03  1.48e-05  9.06e-06  2.15e-01  
 23  +4.9529e-01  +5.3736e-01  4.21e-02  2.60e-06  1.37e-03  1.04e-05  8.58e-06  2.69e-01  
 24  +4.9475e-01  +5.3488e-01  4.01e-02  2.44e-06  1.28e-03  4.93e-06  8.05e-06  4.50e-01  
 25  +4.9379e-01  +5.3055e-01  3.68e-02  2.12e-06  1.11e-03  3.90e-06  7.02e-06  2.42e-01  
 26  +4.9182e-01  +5.2175e-01  2.99e-02  1.55e-06  8.15e-04  2.15e-06  5.18e-06  4.91e-01  
 27  +4.9151e-01  +5.2047e-01  2.90e-02  1.47e-06  7.69e-04  1.84e-06  4.89e-06  1.69e-01  
 28  +4.9120e-01  +5.1910e-01  2.79e-02  1.38e-06  7.25e-04  1.43e-06  4.62e-06  2.37e-01  
 29  +4.9021e-01  +5.1501e-01  2.48e-02  1.18e-06  6.18e-04  6.75e-07  3.98e-06  5.42e-01  
 30  +4.8839e-01  +5.0743e-01  1.90e-02  8.45e-07  4.44e-04  3.18e-07  2.89e-06  6.40e-01  
 31  +4.8775e-01  +5.0470e-01  1.69e-02  7.32e-07  3.84e-04  2.45e-07  2.51e-06  3.92e-01  
 32  +4.8614e-01  +4.9813e-01  1.20e-02  5.00e-07  2.62e-04  1.68e-07  1.74e-06  3.54e-01  
 33  +4.8538e-01  +4.9502e-01  9.63e-03  3.93e-07  2.06e-04  1.28e-07  1.38e-06  3.80e-01  
 34  +4.8455e-01  +4.9139e-01  6.85e-03  2.70e-07  1.42e-04  7.58e-08  9.59e-07  9.90e-01  
 35  +4.8381e-01  +4.8859e-01  4.78e-03  1.86e-07  9.78e-05  5.31e-08  6.71e-07  4.21e-01  
 36  +4.8319e-01  +4.8619e-01  3.01e-03  1.16e-07  6.09e-05  3.42e-08  4.24e-07  7.96e-01  
 37  +4.8226e-01  +4.8280e-01  5.34e-04  2.03e-08  1.06e-05  5.95e-09  7.64e-08  8.62e-01  
 38  +4.8207e-01  +4.8208e-01  1.50e-05  5.66e-10  2.97e-07  1.65e-10  2.16e-09  9.90e-01  
 39  +4.8206e-01  +4.8206e-01  1.50e-07  5.66e-12  2.97e-09  1.65e-12  2.16e-11  9.90e-01  
 40  +4.8206e-01  +4.8206e-01  1.51e-09  5.69e-14  2.99e-11  2.02e-14  2.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2209347s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:12 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:12 PM: Optimal value: 4.821e-01
(CVXPY) Aug 31 05:05:12 PM: Compilation took 1.803e-01 seconds
(CVXPY) Aug 31 05:05:12 PM: Solver (including time spent in interface) took 1.261e+00 seconds
Iteration: 10, Objective: 0.4821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:12 PM: Your problem has 25117 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:13 PM: Finished problem compilation (took 2.004e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25117
  constraints   = 50117
  nnz(P)        = 0
  nnz(A)        = 415093
  cones (total) = 1
    : Nonnegative = 1,  numel = 50117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.62e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3470e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3491e-01  +6.3139e+02  6.31e+02  1.70e-01  8.62e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6444e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0123e-01  +1.5934e+01  1.54e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1880e+00  6.88e-01  2.06e-03  1.08e+00  2.35e-05  1.91e-01  2.07e-01  
  6  +5.0000e-01  +6.9675e-01  1.97e-01  5.88e-04  3.08e-01  5.47e-06  6.36e-02  7.39e-01  
  7  +5.0000e-01  +6.6317e-01  1.63e-01  4.87e-04  2.56e-01  4.02e-06  4.59e-02  4.91e-01  
  8  +5.0001e-01  +6.3816e-01  1.38e-01  4.12e-04  2.16e-01  2.93e-06  2.95e-02  6.20e-01  
  9  +5.0000e-01  +6.1550e-01  1.16e-01  3.44e-04  1.81e-01  2.97e-06  1.66e-02  5.29e-01  
 10  +5.0000e-01  +5.9660e-01  9.66e-02  2.83e-04  1.49e-01  5.76e-06  5.16e-03  7.31e-01  
 11  +4.9978e-01  +5.7200e-01  7.22e-02  4.87e-05  2.56e-02  1.09e-04  1.73e-04  9.90e-01  
 12  +4.9902e-01  +5.6801e-01  6.90e-02  1.17e-05  6.16e-03  4.48e-04  3.88e-05  7.87e-01  
 13  +4.9900e-01  +5.6536e-01  6.64e-02  9.79e-06  5.16e-03  3.93e-04  3.22e-05  3.56e-01  
 14  +4.9905e-01  +5.6308e-01  6.40e-02  8.82e-06  4.64e-03  3.05e-04  2.89e-05  3.31e-01  
 15  +4.9835e-01  +5.5653e-01  5.82e-02  5.22e-06  2.75e-03  3.02e-04  1.70e-05  6.63e-01  
 16  +4.9809e-01  +5.5453e-01  5.64e-02  4.74e-06  2.49e-03  2.58e-04  1.54e-05  2.34e-01  
 17  +4.9782e-01  +5.5270e-01  5.49e-02  4.34e-06  2.29e-03  2.18e-04  1.41e-05  2.30e-01  
 18  +4.9754e-01  +5.5075e-01  5.32e-02  3.97e-06  2.09e-03  1.63e-04  1.29e-05  2.99e-01  
 19  +4.9717e-01  +5.4824e-01  5.11e-02  3.68e-06  1.94e-03  9.05e-05  1.20e-05  4.20e-01  
 20  +4.9687e-01  +5.4669e-01  4.98e-02  3.51e-06  1.85e-03  8.00e-05  1.14e-05  1.28e-01  
 21  +4.9586e-01  +5.4181e-01  4.60e-02  2.98e-06  1.57e-03  6.88e-05  9.72e-06  2.35e-01  
 22  +4.9517e-01  +5.3827e-01  4.31e-02  2.70e-06  1.42e-03  4.07e-05  8.85e-06  3.67e-01  
 23  +4.9357e-01  +5.3089e-01  3.73e-02  2.15e-06  1.13e-03  1.83e-05  7.09e-06  5.30e-01  
 24  +4.9214e-01  +5.2445e-01  3.23e-02  1.74e-06  9.15e-04  1.49e-05  5.78e-06  2.38e-01  
 25  +4.9203e-01  +5.2393e-01  3.19e-02  1.69e-06  8.88e-04  1.09e-05  5.61e-06  2.43e-01  
 26  +4.9072e-01  +5.1820e-01  2.75e-02  1.38e-06  7.26e-04  9.00e-06  4.62e-06  2.14e-01  
 27  +4.9062e-01  +5.1767e-01  2.70e-02  1.34e-06  7.04e-04  6.19e-06  4.48e-06  2.89e-01  
 28  +4.8856e-01  +5.0877e-01  2.02e-02  9.32e-07  4.90e-04  3.44e-06  3.15e-06  4.61e-01  
 29  +4.8680e-01  +5.0137e-01  1.46e-02  6.38e-07  3.36e-04  2.15e-06  2.18e-06  3.96e-01  
 30  +4.8592e-01  +4.9746e-01  1.15e-02  4.78e-07  2.52e-04  6.66e-07  1.64e-06  7.28e-01  
 31  +4.8492e-01  +4.9325e-01  8.33e-03  3.33e-07  1.75e-04  9.00e-08  1.15e-06  9.90e-01  
 32  +4.8348e-01  +4.8765e-01  4.17e-03  1.64e-07  8.61e-05  4.57e-08  5.72e-07  6.28e-01  
 33  +4.8334e-01  +4.8708e-01  3.74e-03  1.46e-07  7.70e-05  4.16e-08  5.12e-07  3.14e-01  
 34  +4.8257e-01  +4.8412e-01  1.55e-03  5.99e-08  3.15e-05  1.75e-08  2.12e-07  7.12e-01  
 35  +4.8242e-01  +4.8357e-01  1.15e-03  4.42e-08  2.33e-05  1.30e-08  1.57e-07  3.01e-01  
 36  +4.8227e-01  +4.8296e-01  6.88e-04  2.65e-08  1.39e-05  8.05e-09  9.44e-08  9.90e-01  
 37  +4.8206e-01  +4.8219e-01  1.33e-04  5.10e-09  2.69e-06  1.55e-09  1.83e-08  8.18e-01  
 38  +4.8201e-01  +4.8201e-01  2.12e-06  8.13e-11  4.28e-08  2.47e-11  2.92e-10  9.90e-01  
 39  +4.8201e-01  +4.8201e-01  2.13e-08  8.15e-13  4.29e-10  2.48e-13  2.93e-12  9.90e-01  
 40  +4.8201e-01  +4.8201e-01  2.13e-10  8.16e-15  4.30e-12  2.88e-15  3.38e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3643736s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:14 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:14 PM: Optimal value: 4.820e-01
(CVXPY) Aug 31 05:05:14 PM: Compilation took 2.004e-01 seconds
(CVXPY) Aug 31 05:05:14 PM: Solver (including time spent in interface) took 1.407e+00 seconds
Iteration: 11, Objective: 0.4820
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:14 PM: Your problem has 25127 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:14 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:14 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:15 PM: Finished problem compilation (took 2.065e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25127
  constraints   = 50127
  nnz(P)        = 0
  nnz(A)        = 423308
  cones (total) = 1
    : Nonnegative = 1,  numel = 50127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.62e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3144e+02  6.31e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6443e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5925e+01  1.54e+01  4.30e-02  2.17e+01  4.77e-06  1.96e-01  4.43e-01  
  5  +5.0001e-01  +1.1923e+00  6.92e-01  2.07e-03  1.09e+00  2.35e-05  1.91e-01  2.06e-01  
  6  +5.0000e-01  +6.9682e-01  1.97e-01  5.88e-04  3.09e-01  5.59e-06  6.39e-02  7.17e-01  
  7  +5.0000e-01  +6.5585e-01  1.56e-01  4.65e-04  2.45e-01  4.02e-06  4.41e-02  5.01e-01  
  8  +5.0001e-01  +6.4333e-01  1.43e-01  4.28e-04  2.25e-01  3.01e-06  3.02e-02  6.18e-01  
  9  +5.0000e-01  +6.1572e-01  1.16e-01  3.45e-04  1.81e-01  3.04e-06  1.63e-02  5.41e-01  
 10  +4.9999e-01  +5.8827e-01  8.83e-02  2.55e-04  1.34e-01  7.42e-06  3.51e-03  8.29e-01  
 11  +4.9955e-01  +5.7955e-01  8.00e-02  2.86e-05  1.51e-02  2.23e-04  9.69e-05  9.78e-01  
 12  +4.9914e-01  +5.7551e-01  7.64e-02  1.50e-05  7.91e-03  3.78e-04  4.99e-05  5.26e-01  
 13  +4.9905e-01  +5.7013e-01  7.11e-02  1.13e-05  5.95e-03  3.50e-04  3.72e-05  4.35e-01  
 14  +4.9924e-01  +5.6473e-01  6.55e-02  9.62e-06  5.07e-03  1.98e-04  3.15e-05  5.31e-01  
 15  +4.9889e-01  +5.6031e-01  6.14e-02  6.60e-06  3.48e-03  1.88e-04  2.15e-05  5.46e-01  
 16  +4.9845e-01  +5.5715e-01  5.87e-02  5.29e-06  2.79e-03  1.80e-04  1.72e-05  3.29e-01  
 17  +4.9841e-01  +5.5650e-01  5.81e-02  5.21e-06  2.75e-03  1.55e-04  1.69e-05  1.34e-01  
 18  +4.9754e-01  +5.5171e-01  5.42e-02  4.00e-06  2.11e-03  1.53e-04  1.30e-05  3.14e-01  
 19  +4.9743e-01  +5.5101e-01  5.36e-02  3.97e-06  2.09e-03  1.37e-04  1.29e-05  8.06e-02  
 20  +4.9692e-01  +5.4824e-01  5.13e-02  3.58e-06  1.89e-03  1.18e-04  1.17e-05  2.04e-01  
 21  +4.9673e-01  +5.4700e-01  5.03e-02  3.49e-06  1.84e-03  9.82e-05  1.14e-05  1.46e-01  
 22  +4.9607e-01  +5.4366e-01  4.76e-02  3.16e-06  1.66e-03  8.27e-05  1.03e-05  1.93e-01  
 23  +4.9475e-01  +5.3727e-01  4.25e-02  2.58e-06  1.36e-03  6.21e-05  8.50e-06  3.14e-01  
 24  +4.9354e-01  +5.3170e-01  3.82e-02  2.17e-06  1.14e-03  4.96e-05  7.18e-06  2.46e-01  
 25  +4.9184e-01  +5.2394e-01  3.21e-02  1.69e-06  8.89e-04  3.38e-05  5.63e-06  3.50e-01  
 26  +4.9175e-01  +5.2348e-01  3.17e-02  1.65e-06  8.69e-04  2.61e-05  5.51e-06  2.01e-01  
 27  +4.9039e-01  +5.1742e-01  2.70e-02  1.32e-06  6.94e-04  1.48e-05  4.42e-06  4.34e-01  
 28  +4.9026e-01  +5.1689e-01  2.66e-02  1.29e-06  6.80e-04  1.14e-05  4.36e-06  1.95e-01  
 29  +4.8855e-01  +5.0952e-01  2.10e-02  9.64e-07  5.08e-04  6.54e-06  3.28e-06  4.28e-01  
 30  +4.8529e-01  +4.9586e-01  1.06e-02  4.48e-07  2.36e-04  2.65e-06  1.55e-06  6.06e-01  
 31  +4.8431e-01  +4.9190e-01  7.59e-03  3.06e-07  1.61e-04  1.17e-06  1.07e-06  5.93e-01  
 32  +4.8326e-01  +4.8785e-01  4.58e-03  1.79e-07  9.45e-05  6.17e-07  6.30e-07  4.92e-01  
 33  +4.8287e-01  +4.8630e-01  3.43e-03  1.33e-07  7.01e-05  3.97e-07  4.69e-07  3.69e-01  
 34  +4.8277e-01  +4.8580e-01  3.03e-03  1.17e-07  6.16e-05  1.10e-07  4.13e-07  7.88e-01  
 35  +4.8211e-01  +4.8335e-01  1.24e-03  4.75e-08  2.50e-05  3.97e-08  1.69e-07  6.60e-01  
 36  +4.8199e-01  +4.8289e-01  9.01e-04  3.43e-08  1.81e-05  2.16e-08  1.22e-07  5.70e-01  
 37  +4.8182e-01  +4.8229e-01  4.64e-04  1.76e-08  9.25e-06  1.05e-08  6.31e-08  5.46e-01  
 38  +4.8175e-01  +4.8203e-01  2.76e-04  1.03e-08  5.45e-06  3.31e-09  3.75e-08  9.90e-01  
 39  +4.8166e-01  +4.8172e-01  5.79e-05  2.14e-09  1.13e-06  6.95e-10  7.87e-09  8.03e-01  
 40  +4.8164e-01  +4.8164e-01  7.36e-07  2.70e-11  1.42e-08  8.82e-12  1.00e-10  9.89e-01  
 41  +4.8164e-01  +4.8164e-01  7.36e-09  2.70e-13  1.42e-10  8.87e-14  1.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.47631s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:16 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:16 PM: Optimal value: 4.816e-01
(CVXPY) Aug 31 05:05:16 PM: Compilation took 2.065e-01 seconds
(CVXPY) Aug 31 05:05:16 PM: Solver (including time spent in interface) took 1.525e+00 seconds
Iteration: 12, Objective: 0.4816
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:16 PM: Your problem has 25137 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:16 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:16 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:17 PM: Finished problem compilation (took 2.264e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25137
  constraints   = 50137
  nnz(P)        = 0
  nnz(A)        = 427659
  cones (total) = 1
    : Nonnegative = 1,  numel = 50137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.62e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3142e+02  6.31e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6442e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5925e+01  1.54e+01  4.30e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1909e+00  6.91e-01  2.07e-03  1.08e+00  2.36e-05  1.91e-01  2.07e-01  
  6  +5.0000e-01  +7.3824e-01  2.38e-01  7.12e-04  3.74e-01  7.00e-06  7.59e-02  6.66e-01  
  7  +5.0000e-01  +6.7091e-01  1.71e-01  5.11e-04  2.68e-01  4.71e-06  5.00e-02  4.83e-01  
  8  +5.0001e-01  +6.5523e-01  1.55e-01  4.64e-04  2.44e-01  3.13e-06  3.36e-02  7.03e-01  
  9  +5.0001e-01  +6.3785e-01  1.38e-01  4.11e-04  2.16e-01  1.87e-06  1.97e-02  7.94e-01  
 10  +5.0000e-01  +5.8810e-01  8.81e-02  2.57e-04  1.35e-01  2.93e-06  4.21e-03  9.13e-01  
 11  +4.9983e-01  +5.7626e-01  7.64e-02  3.32e-05  1.75e-02  8.47e-05  1.13e-04  9.89e-01  
 12  +4.9916e-01  +5.7276e-01  7.36e-02  7.53e-06  3.97e-03  3.63e-04  2.45e-05  7.90e-01  
 13  +4.9896e-01  +5.6981e-01  7.08e-02  6.47e-06  3.41e-03  3.48e-04  2.10e-05  2.40e-01  
 14  +4.9878e-01  +5.6744e-01  6.87e-02  5.86e-06  3.09e-03  3.22e-04  1.90e-05  1.86e-01  
 15  +4.9873e-01  +5.6505e-01  6.63e-02  5.58e-06  2.94e-03  2.55e-04  1.81e-05  2.13e-01  
 16  +4.9818e-01  +5.5855e-01  6.04e-02  4.57e-06  2.41e-03  1.51e-04  1.49e-05  5.09e-01  
 17  +4.9789e-01  +5.5627e-01  5.84e-02  4.30e-06  2.27e-03  1.20e-04  1.40e-05  2.22e-01  
 18  +4.9614e-01  +5.4492e-01  4.88e-02  3.25e-06  1.71e-03  2.23e-05  1.07e-05  7.79e-01  
 19  +4.9519e-01  +5.4040e-01  4.52e-02  2.85e-06  1.50e-03  1.91e-05  9.40e-06  1.95e-01  
 20  +4.9491e-01  +5.3911e-01  4.42e-02  2.74e-06  1.44e-03  1.67e-05  9.05e-06  1.25e-01  
 21  +4.9401e-01  +5.3486e-01  4.08e-02  2.43e-06  1.28e-03  8.65e-06  8.07e-06  4.34e-01  
 22  +4.9254e-01  +5.2828e-01  3.57e-02  1.98e-06  1.05e-03  6.98e-06  6.62e-06  2.46e-01  
 23  +4.9165e-01  +5.2439e-01  3.27e-02  1.73e-06  9.11e-04  4.92e-06  5.78e-06  3.11e-01  
 24  +4.9031e-01  +5.1861e-01  2.83e-02  1.41e-06  7.41e-04  3.39e-06  4.73e-06  3.37e-01  
 25  +4.8983e-01  +5.1658e-01  2.68e-02  1.30e-06  6.85e-04  2.96e-06  4.38e-06  1.45e-01  
 26  +4.8950e-01  +5.1510e-01  2.56e-02  1.20e-06  6.33e-04  1.47e-06  4.06e-06  4.99e-01  
 27  +4.8738e-01  +5.0632e-01  1.89e-02  8.38e-07  4.42e-04  1.00e-06  2.86e-06  3.50e-01  
 28  +4.8714e-01  +5.0519e-01  1.80e-02  7.80e-07  4.11e-04  6.26e-07  2.67e-06  4.37e-01  
 29  +4.8580e-01  +4.9977e-01  1.40e-02  5.86e-07  3.09e-04  4.44e-07  2.02e-06  3.20e-01  
 30  +4.8481e-01  +4.9556e-01  1.08e-02  4.33e-07  2.28e-04  1.45e-07  1.51e-06  8.80e-01  
 31  +4.8323e-01  +4.8942e-01  6.19e-03  2.44e-07  1.29e-04  8.09e-08  8.62e-07  4.94e-01  
 32  +4.8225e-01  +4.8561e-01  3.36e-03  1.29e-07  6.82e-05  4.20e-08  4.64e-07  6.63e-01  
 33  +4.8209e-01  +4.8492e-01  2.83e-03  1.09e-07  5.76e-05  3.34e-08  3.95e-07  7.38e-01  
 34  +4.8140e-01  +4.8238e-01  9.85e-04  3.74e-08  1.97e-05  1.15e-08  1.37e-07  8.08e-01  
 35  +4.8104e-01  +4.8109e-01  4.97e-05  1.87e-09  9.83e-07  5.50e-10  7.02e-09  9.57e-01  
 36  +4.8102e-01  +4.8102e-01  5.27e-07  1.98e-11  1.04e-08  5.83e-12  7.47e-11  9.90e-01  
 37  +4.8102e-01  +4.8102e-01  5.27e-09  1.98e-13  1.04e-10  5.83e-14  7.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3223385s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:18 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:18 PM: Optimal value: 4.810e-01
(CVXPY) Aug 31 05:05:18 PM: Compilation took 2.264e-01 seconds
(CVXPY) Aug 31 05:05:18 PM: Solver (including time spent in interface) took 1.376e+00 seconds
Iteration: 13, Objective: 0.4810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:18 PM: Your problem has 25147 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:18 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:18 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:18 PM: Finished problem compilation (took 2.273e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25147
  constraints   = 50147
  nnz(P)        = 0
  nnz(A)        = 432256
  cones (total) = 1
    : Nonnegative = 1,  numel = 50147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3466e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3492e-01  +6.3140e+02  6.31e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6441e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5925e+01  1.54e+01  4.30e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1396e+00  6.40e-01  1.91e-03  1.00e+00  2.36e-05  1.91e-01  2.24e-01  
  6  +5.0000e-01  +7.3416e-01  2.34e-01  7.00e-04  3.68e-01  7.48e-06  7.60e-02  6.80e-01  
  7  +5.0000e-01  +6.6671e-01  1.67e-01  4.98e-04  2.62e-01  5.05e-06  4.91e-02  4.86e-01  
  8  +5.0001e-01  +6.5821e-01  1.58e-01  4.72e-04  2.48e-01  3.65e-06  3.46e-02  6.46e-01  
  9  +5.0000e-01  +6.3221e-01  1.32e-01  3.95e-04  2.07e-01  3.60e-06  2.21e-02  4.04e-01  
 10  +5.0000e-01  +6.1015e-01  1.10e-01  3.26e-04  1.71e-01  3.35e-06  7.93e-03  9.35e-01  
 11  +4.9994e-01  +5.9007e-01  9.01e-02  1.34e-04  7.05e-02  3.21e-05  5.57e-04  9.39e-01  
 12  +4.9931e-01  +5.8617e-01  8.69e-02  1.54e-05  8.13e-03  3.30e-04  5.10e-05  9.11e-01  
 13  +4.9921e-01  +5.7816e-01  7.89e-02  1.11e-05  5.85e-03  3.07e-04  3.64e-05  4.64e-01  
 14  +4.9908e-01  +5.7272e-01  7.36e-02  8.72e-06  4.60e-03  2.72e-04  2.85e-05  3.97e-01  
 15  +4.9903e-01  +5.6726e-01  6.82e-02  7.29e-06  3.85e-03  1.84e-04  2.37e-05  4.65e-01  
 16  +4.9885e-01  +5.6415e-01  6.53e-02  6.39e-06  3.37e-03  1.41e-04  2.08e-05  3.51e-01  
 17  +4.9821e-01  +5.5959e-01  6.14e-02  4.93e-06  2.60e-03  1.31e-04  1.61e-05  3.82e-01  
 18  +4.9818e-01  +5.5920e-01  6.10e-02  4.91e-06  2.59e-03  1.23e-04  1.60e-05  5.31e-02  
 19  +4.9739e-01  +5.5488e-01  5.75e-02  4.06e-06  2.14e-03  1.16e-04  1.33e-05  2.48e-01  
 20  +4.9731e-01  +5.5445e-01  5.71e-02  4.06e-06  2.14e-03  1.12e-04  1.33e-05  2.09e-02  
 21  +4.9537e-01  +5.4460e-01  4.92e-02  2.98e-06  1.57e-03  9.58e-05  9.81e-06  3.36e-01  
 22  +4.9508e-01  +5.4293e-01  4.79e-02  2.87e-06  1.52e-03  8.16e-05  9.46e-06  1.31e-01  
 23  +4.9448e-01  +5.3931e-01  4.48e-02  2.70e-06  1.42e-03  4.01e-05  8.92e-06  4.02e-01  
 24  +4.9249e-01  +5.2968e-01  3.72e-02  2.05e-06  1.08e-03  1.34e-05  6.83e-06  6.17e-01  
 25  +4.9186e-01  +5.2688e-01  3.50e-02  1.87e-06  9.87e-04  1.14e-05  6.25e-06  1.66e-01  
 26  +4.9088e-01  +5.2238e-01  3.15e-02  1.58e-06  8.30e-04  3.35e-06  5.27e-06  6.54e-01  
 27  +4.9074e-01  +5.2180e-01  3.11e-02  1.54e-06  8.13e-04  2.98e-06  5.16e-06  1.09e-01  
 28  +4.8988e-01  +5.1818e-01  2.83e-02  1.36e-06  7.18e-04  2.51e-06  4.58e-06  1.76e-01  
 29  +4.8897e-01  +5.1409e-01  2.51e-02  1.15e-06  6.04e-04  2.89e-07  3.87e-06  8.66e-01  
 30  +4.8717e-01  +5.0670e-01  1.95e-02  8.54e-07  4.50e-04  2.15e-07  2.91e-06  3.76e-01  
 31  +4.8356e-01  +4.9175e-01  8.19e-03  3.33e-07  1.75e-04  8.12e-08  1.16e-06  8.86e-01  
 32  +4.8341e-01  +4.9112e-01  7.71e-03  3.12e-07  1.64e-04  7.80e-08  1.09e-06  2.07e-01  
 33  +4.8247e-01  +4.8742e-01  4.96e-03  1.97e-07  1.04e-04  5.08e-08  6.97e-07  4.41e-01  
 34  +4.8236e-01  +4.8696e-01  4.61e-03  1.82e-07  9.60e-05  4.84e-08  6.47e-07  2.86e-01  
 35  +4.8125e-01  +4.8268e-01  1.43e-03  5.58e-08  2.94e-05  1.58e-08  2.03e-07  9.31e-01  
 36  +4.8116e-01  +4.8234e-01  1.18e-03  4.59e-08  2.42e-05  1.32e-08  1.68e-07  5.01e-01  
 37  +4.8077e-01  +4.8090e-01  1.32e-04  5.10e-09  2.69e-06  1.41e-09  1.92e-08  9.02e-01  
 38  +4.8072e-01  +4.8072e-01  3.14e-06  1.20e-10  6.33e-08  3.17e-11  4.61e-10  9.88e-01  
 39  +4.8072e-01  +4.8072e-01  3.14e-08  1.20e-12  6.33e-10  3.18e-13  4.62e-12  9.90e-01  
 40  +4.8072e-01  +4.8072e-01  3.14e-10  1.20e-14  6.33e-12  3.18e-15  4.62e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3403653s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:20 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:20 PM: Optimal value: 4.807e-01
(CVXPY) Aug 31 05:05:20 PM: Compilation took 2.273e-01 seconds
(CVXPY) Aug 31 05:05:20 PM: Solver (including time spent in interface) took 1.381e+00 seconds
Iteration: 14, Objective: 0.4807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:20 PM: Your problem has 25157 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:20 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:20 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:20 PM: Finished problem compilation (took 2.036e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25157
  constraints   = 50157
  nnz(P)        = 0
  nnz(A)        = 436405
  cones (total) = 1
    : Nonnegative = 1,  numel = 50157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +5.3468e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3491e-01  +6.3131e+02  6.31e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0960e-01  +1.6439e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0122e-01  +1.5927e+01  1.54e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1397e+00  6.40e-01  1.92e-03  1.00e+00  2.36e-05  1.91e-01  2.24e-01  
  6  +5.0000e-01  +7.0069e-01  2.01e-01  6.00e-04  3.15e-01  6.47e-06  6.62e-02  7.06e-01  
  7  +5.0000e-01  +6.5190e-01  1.52e-01  4.54e-04  2.39e-01  4.86e-06  4.39e-02  4.52e-01  
  8  +5.0000e-01  +6.4980e-01  1.50e-01  4.47e-04  2.35e-01  4.14e-06  3.14e-02  5.63e-01  
  9  +5.0001e-01  +6.6012e-01  1.60e-01  4.78e-04  2.51e-01  2.93e-06  2.81e-02  4.63e-01  
 10  +5.0000e-01  +6.0006e-01  1.00e-01  2.97e-04  1.56e-01  3.94e-06  7.87e-03  7.71e-01  
 11  +4.9991e-01  +5.8691e-01  8.70e-02  1.10e-04  5.79e-02  4.94e-05  4.41e-04  9.90e-01  
 12  +4.9905e-01  +5.8274e-01  8.37e-02  1.36e-05  7.17e-03  4.48e-04  4.57e-05  8.97e-01  
 13  +4.9896e-01  +5.7526e-01  7.63e-02  1.01e-05  5.35e-03  3.60e-04  3.38e-05  5.07e-01  
 14  +4.9869e-01  +5.7277e-01  7.41e-02  8.48e-06  4.47e-03  3.77e-04  2.81e-05  2.27e-01  
 15  +4.9899e-01  +5.6565e-01  6.67e-02  7.17e-06  3.78e-03  7.15e-05  2.35e-05  8.20e-01  
 16  +4.9895e-01  +5.6526e-01  6.63e-02  6.88e-06  3.63e-03  6.49e-05  2.25e-05  1.48e-01  
 17  +4.9863e-01  +5.6314e-01  6.45e-02  5.70e-06  3.01e-03  4.95e-05  1.87e-05  4.59e-01  
 18  +4.9836e-01  +5.6150e-01  6.31e-02  5.34e-06  2.82e-03  4.07e-05  1.75e-05  2.27e-01  
 19  +4.9694e-01  +5.5419e-01  5.72e-02  3.90e-06  2.05e-03  3.27e-05  1.28e-05  4.76e-01  
 20  +4.9600e-01  +5.4957e-01  5.36e-02  3.45e-06  1.82e-03  2.95e-05  1.14e-05  1.56e-01  
 21  +4.9373e-01  +5.3848e-01  4.47e-02  2.65e-06  1.40e-03  1.55e-05  8.93e-06  4.64e-01  
 22  +4.9368e-01  +5.3828e-01  4.46e-02  2.65e-06  1.39e-03  1.51e-05  8.90e-06  2.24e-02  
 23  +4.9369e-01  +5.3826e-01  4.46e-02  2.64e-06  1.39e-03  1.37e-05  8.87e-06  7.72e-02  
 24  +4.9233e-01  +5.3202e-01  3.97e-02  2.24e-06  1.18e-03  1.10e-05  7.57e-06  2.22e-01  
 25  +4.9086e-01  +5.2534e-01  3.45e-02  1.84e-06  9.71e-04  7.70e-06  6.27e-06  3.11e-01  
 26  +4.8888e-01  +5.1654e-01  2.77e-02  1.38e-06  7.25e-04  5.27e-06  4.72e-06  3.50e-01  
 27  +4.8825e-01  +5.1379e-01  2.55e-02  1.24e-06  6.52e-04  4.58e-06  4.25e-06  1.54e-01  
 28  +4.8816e-01  +5.1337e-01  2.52e-02  1.20e-06  6.33e-04  3.08e-06  4.15e-06  3.13e-01  
 29  +4.8747e-01  +5.1028e-01  2.28e-02  1.04e-06  5.50e-04  1.76e-06  3.60e-06  4.54e-01  
 30  +4.8666e-01  +5.0680e-01  2.01e-02  8.86e-07  4.67e-04  9.58e-07  3.06e-06  5.01e-01  
 31  +4.8594e-01  +5.0368e-01  1.77e-02  7.56e-07  3.99e-04  3.17e-07  2.62e-06  7.82e-01  
 32  +4.8419e-01  +4.9648e-01  1.23e-02  5.10e-07  2.69e-04  2.07e-07  1.78e-06  4.01e-01  
 33  +4.8281e-01  +4.9077e-01  7.96e-03  3.22e-07  1.70e-04  1.17e-07  1.14e-06  5.87e-01  
 34  +4.8249e-01  +4.8945e-01  6.97e-03  2.80e-07  1.48e-04  1.00e-07  9.92e-07  2.21e-01  
 35  +4.8222e-01  +4.8820e-01  5.99e-03  2.40e-07  1.26e-04  7.25e-08  8.53e-07  7.48e-01  
 36  +4.8178e-01  +4.8651e-01  4.73e-03  1.88e-07  9.92e-05  5.67e-08  6.75e-07  3.05e-01  
 37  +4.8096e-01  +4.8334e-01  2.38e-03  9.39e-08  4.95e-05  2.73e-08  3.42e-07  7.65e-01  
 38  +4.8022e-01  +4.8051e-01  2.98e-04  1.16e-08  6.10e-06  3.19e-09  4.35e-08  9.47e-01  
 39  +4.8010e-01  +4.8011e-01  1.07e-05  4.10e-10  2.16e-07  1.10e-10  1.58e-09  9.68e-01  
 40  +4.8010e-01  +4.8010e-01  1.07e-07  4.10e-12  2.16e-09  1.10e-12  1.60e-11  9.90e-01  
 41  +4.8010e-01  +4.8010e-01  1.07e-09  4.10e-14  2.16e-11  1.10e-14  1.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3651933s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:22 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:22 PM: Optimal value: 4.801e-01
(CVXPY) Aug 31 05:05:22 PM: Compilation took 2.036e-01 seconds
(CVXPY) Aug 31 05:05:22 PM: Solver (including time spent in interface) took 1.409e+00 seconds
Iteration: 15, Objective: 0.4801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:22 PM: Your problem has 25167 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:22 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:22 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:22 PM: Finished problem compilation (took 2.274e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25167
  constraints   = 50167
  nnz(P)        = 0
  nnz(A)        = 440086
  cones (total) = 1
    : Nonnegative = 1,  numel = 50167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8415e-01  +5.3468e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3490e-01  +6.3124e+02  6.31e+02  1.70e-01  8.63e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6438e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5929e+01  1.54e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1254e+00  6.25e-01  1.87e-03  9.82e-01  2.37e-05  1.91e-01  2.29e-01  
  6  +5.0000e-01  +6.9992e-01  2.00e-01  5.98e-04  3.14e-01  6.68e-06  6.63e-02  7.06e-01  
  7  +5.0000e-01  +6.5714e-01  1.57e-01  4.70e-04  2.47e-01  5.27e-06  4.59e-02  4.07e-01  
  8  +5.0000e-01  +6.4532e-01  1.45e-01  4.34e-04  2.28e-01  4.63e-06  3.12e-02  5.32e-01  
  9  +5.0001e-01  +6.5932e-01  1.59e-01  4.76e-04  2.50e-01  3.35e-06  2.79e-02  4.79e-01  
 10  +5.0000e-01  +6.2084e-01  1.21e-01  3.59e-04  1.89e-01  4.44e-06  1.11e-02  6.30e-01  
 11  +4.9995e-01  +5.9873e-01  9.88e-02  2.02e-04  1.06e-01  3.04e-05  1.04e-03  9.25e-01  
 12  +4.9901e-01  +5.9323e-01  9.42e-02  1.81e-05  9.54e-03  4.80e-04  6.12e-05  9.42e-01  
 13  +4.9920e-01  +5.8110e-01  8.19e-02  1.37e-05  7.22e-03  2.92e-04  4.57e-05  5.85e-01  
 14  +4.9912e-01  +5.7542e-01  7.63e-02  1.04e-05  5.49e-03  2.36e-04  3.45e-05  5.10e-01  
 15  +4.9922e-01  +5.7253e-01  7.33e-02  9.60e-06  5.06e-03  1.51e-04  3.16e-05  4.08e-01  
 16  +4.9901e-01  +5.7055e-01  7.15e-02  7.86e-06  4.15e-03  1.51e-04  2.58e-05  3.07e-01  
 17  +4.9885e-01  +5.6827e-01  6.94e-02  6.97e-06  3.68e-03  1.12e-04  2.29e-05  3.84e-01  
 18  +4.9870e-01  +5.6730e-01  6.86e-02  6.57e-06  3.46e-03  1.05e-04  2.16e-05  1.32e-01  
 19  +4.9852e-01  +5.6504e-01  6.65e-02  6.04e-06  3.19e-03  5.63e-05  1.99e-05  4.92e-01  
 20  +4.9800e-01  +5.6228e-01  6.43e-02  5.19e-06  2.74e-03  5.26e-05  1.71e-05  2.46e-01  
 21  +4.9739e-01  +5.5879e-01  6.14e-02  4.71e-06  2.49e-03  3.58e-05  1.56e-05  3.42e-01  
 22  +4.9554e-01  +5.4928e-01  5.37e-02  3.59e-06  1.90e-03  1.94e-05  1.20e-05  5.43e-01  
 23  +4.9361e-01  +5.3999e-01  4.64e-02  2.82e-06  1.49e-03  1.41e-05  9.55e-06  3.34e-01  
 24  +4.9353e-01  +5.3965e-01  4.61e-02  2.80e-06  1.48e-03  1.28e-05  9.49e-06  7.29e-02  
 25  +4.9223e-01  +5.3359e-01  4.14e-02  2.38e-06  1.26e-03  8.66e-06  8.11e-06  3.28e-01  
 26  +4.9216e-01  +5.3323e-01  4.11e-02  2.34e-06  1.23e-03  7.06e-06  7.95e-06  1.75e-01  
 27  +4.9031e-01  +5.2473e-01  3.44e-02  1.82e-06  9.60e-04  3.34e-06  6.23e-06  5.16e-01  
 28  +4.8923e-01  +5.1993e-01  3.07e-02  1.55e-06  8.19e-04  2.68e-06  5.34e-06  2.30e-01  
 29  +4.8872e-01  +5.1769e-01  2.90e-02  1.41e-06  7.45e-04  1.91e-06  4.85e-06  3.16e-01  
 30  +4.8866e-01  +5.1743e-01  2.88e-02  1.39e-06  7.35e-04  1.67e-06  4.78e-06  1.34e-01  
 31  +4.8734e-01  +5.1173e-01  2.44e-02  1.13e-06  5.97e-04  1.28e-06  3.90e-06  2.67e-01  
 32  +4.8728e-01  +5.1151e-01  2.42e-02  1.12e-06  5.93e-04  1.19e-06  3.88e-06  7.17e-02  
 33  +4.8608e-01  +5.0646e-01  2.04e-02  9.18e-07  4.84e-04  9.60e-07  3.19e-06  2.14e-01  
 34  +4.8459e-01  +4.9988e-01  1.53e-02  6.54e-07  3.45e-04  3.69e-07  2.29e-06  6.95e-01  
 35  +4.8314e-01  +4.9386e-01  1.07e-02  4.45e-07  2.35e-04  2.15e-07  1.57e-06  5.03e-01  
 36  +4.8281e-01  +4.9232e-01  9.51e-03  3.89e-07  2.05e-04  1.40e-07  1.38e-06  6.20e-01  
 37  +4.8152e-01  +4.8718e-01  5.67e-03  2.28e-07  1.20e-04  8.09e-08  8.15e-07  4.71e-01  
 38  +4.8138e-01  +4.8652e-01  5.14e-03  2.05e-07  1.08e-04  6.24e-08  7.36e-07  7.01e-01  
 39  +4.8080e-01  +4.8425e-01  3.46e-03  1.37e-07  7.22e-05  3.95e-08  4.97e-07  7.98e-01  
 40  +4.8046e-01  +4.8295e-01  2.49e-03  9.79e-08  5.16e-05  2.81e-08  3.57e-07  7.54e-01  
 41  +4.7982e-01  +4.8055e-01  7.37e-04  2.85e-08  1.50e-05  8.24e-09  1.06e-07  7.23e-01  
 42  +4.7969e-01  +4.8008e-01  3.89e-04  1.50e-08  7.91e-06  4.33e-09  5.66e-08  9.90e-01  
 43  +4.7955e-01  +4.7956e-01  1.35e-05  5.17e-10  2.72e-07  1.42e-10  1.98e-09  9.76e-01  
 44  +4.7954e-01  +4.7954e-01  1.36e-07  5.17e-12  2.73e-09  1.42e-12  1.99e-11  9.90e-01  
 45  +4.7954e-01  +4.7954e-01  1.36e-09  5.17e-14  2.73e-11  1.42e-14  1.99e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5300776s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:24 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:24 PM: Optimal value: 4.795e-01
(CVXPY) Aug 31 05:05:24 PM: Compilation took 2.274e-01 seconds
(CVXPY) Aug 31 05:05:24 PM: Solver (including time spent in interface) took 1.579e+00 seconds
Iteration: 16, Objective: 0.4795
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:24 PM: Your problem has 25177 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:24 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:24 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:24 PM: Finished problem compilation (took 2.709e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25177
  constraints   = 50177
  nnz(P)        = 0
  nnz(A)        = 443726
  cones (total) = 1
    : Nonnegative = 1,  numel = 50177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3469e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3490e-01  +6.3121e+02  6.31e+02  1.70e-01  8.62e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6438e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5933e+01  1.54e+01  4.31e-02  2.17e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0000e-01  +1.1242e+00  6.24e-01  1.87e-03  9.80e-01  2.37e-05  1.91e-01  2.30e-01  
  6  +5.0000e-01  +6.8643e-01  1.86e-01  5.57e-04  2.93e-01  6.27e-06  6.22e-02  7.20e-01  
  7  +5.0000e-01  +6.5439e-01  1.54e-01  4.61e-04  2.43e-01  5.32e-06  4.48e-02  3.64e-01  
  8  +5.0000e-01  +6.3830e-01  1.38e-01  4.13e-04  2.17e-01  5.03e-06  2.92e-02  4.93e-01  
  9  +5.0000e-01  +6.2538e-01  1.25e-01  3.74e-04  1.97e-01  6.20e-06  1.45e-02  6.27e-01  
 10  +4.9999e-01  +6.1190e-01  1.12e-01  3.18e-04  1.67e-01  1.11e-05  3.72e-03  9.90e-01  
 11  +4.9914e-01  +6.0255e-01  1.03e-01  2.45e-05  1.29e-02  4.24e-04  8.36e-05  9.79e-01  
 12  +4.9821e-01  +5.9337e-01  9.52e-02  1.18e-05  6.20e-03  7.25e-04  3.95e-05  5.76e-01  
 13  +4.9854e-01  +5.8321e-01  8.47e-02  9.90e-06  5.23e-03  4.19e-04  3.30e-05  4.77e-01  
 14  +4.9819e-01  +5.7998e-01  8.18e-02  8.20e-06  4.33e-03  4.34e-04  2.74e-05  2.35e-01  
 15  +4.9830e-01  +5.7277e-01  7.45e-02  7.15e-06  3.77e-03  1.98e-04  2.38e-05  5.53e-01  
 16  +4.9708e-01  +5.6355e-01  6.65e-02  4.99e-06  2.63e-03  1.43e-04  1.67e-05  5.77e-01  
 17  +4.9566e-01  +5.5573e-01  6.01e-02  4.07e-06  2.15e-03  1.24e-04  1.37e-05  2.48e-01  
 18  +4.9331e-01  +5.4239e-01  4.91e-02  3.08e-06  1.62e-03  4.46e-05  1.05e-05  5.82e-01  
 19  +4.9311e-01  +5.4133e-01  4.82e-02  2.99e-06  1.58e-03  4.08e-05  1.02e-05  8.58e-02  
 20  +4.9250e-01  +5.3803e-01  4.55e-02  2.75e-06  1.45e-03  1.98e-05  9.44e-06  4.44e-01  
 21  +4.9075e-01  +5.2952e-01  3.88e-02  2.16e-06  1.14e-03  6.11e-06  7.48e-06  6.38e-01  
 22  +4.9024e-01  +5.2713e-01  3.69e-02  1.97e-06  1.04e-03  4.04e-06  6.82e-06  3.46e-01  
 23  +4.8978e-01  +5.2507e-01  3.53e-02  1.83e-06  9.63e-04  2.26e-06  6.31e-06  4.33e-01  
 24  +4.8798e-01  +5.1690e-01  2.89e-02  1.41e-06  7.45e-04  1.70e-06  4.92e-06  2.86e-01  
 25  +4.8785e-01  +5.1641e-01  2.86e-02  1.39e-06  7.34e-04  1.52e-06  4.85e-06  1.10e-01  
 26  +4.8781e-01  +5.1621e-01  2.84e-02  1.37e-06  7.25e-04  1.39e-06  4.79e-06  9.98e-02  
 27  +4.8693e-01  +5.1230e-01  2.54e-02  1.19e-06  6.29e-04  1.17e-06  4.17e-06  1.87e-01  
 28  +4.8677e-01  +5.1153e-01  2.48e-02  1.15e-06  6.07e-04  9.00e-07  4.03e-06  2.63e-01  
 29  +4.8550e-01  +5.0605e-01  2.06e-02  9.27e-07  4.89e-04  7.22e-07  3.26e-06  2.23e-01  
 30  +4.8418e-01  +5.0003e-01  1.58e-02  6.78e-07  3.57e-04  1.59e-07  2.40e-06  9.45e-01  
 31  +4.8269e-01  +4.9382e-01  1.11e-02  4.66e-07  2.46e-04  1.12e-07  1.66e-06  4.31e-01  
 32  +4.8198e-01  +4.9075e-01  8.78e-03  3.62e-07  1.91e-04  9.00e-08  1.30e-06  4.92e-01  
 33  +4.8143e-01  +4.8837e-01  6.95e-03  2.83e-07  1.49e-04  7.32e-08  1.02e-06  6.64e-01  
 34  +4.8116e-01  +4.8725e-01  6.09e-03  2.47e-07  1.30e-04  6.47e-08  9.01e-07  6.27e-01  
 35  +4.8017e-01  +4.8333e-01  3.17e-03  1.27e-07  6.71e-05  3.36e-08  4.69e-07  5.23e-01  
 36  +4.8009e-01  +4.8299e-01  2.91e-03  1.17e-07  6.14e-05  3.11e-08  4.29e-07  2.78e-01  
 37  +4.7975e-01  +4.8169e-01  1.94e-03  7.72e-08  4.07e-05  2.09e-08  2.85e-07  4.16e-01  
 38  +4.7968e-01  +4.8143e-01  1.75e-03  6.91e-08  3.64e-05  1.90e-08  2.55e-07  4.34e-01  
 39  +4.7934e-01  +4.8014e-01  7.95e-04  3.10e-08  1.63e-05  8.75e-09  1.15e-07  6.65e-01  
 40  +4.7911e-01  +4.7929e-01  1.76e-04  6.62e-09  3.49e-06  2.04e-09  2.48e-08  8.73e-01  
 41  +4.7905e-01  +4.7909e-01  3.56e-05  1.33e-09  7.04e-07  3.98e-10  5.01e-09  9.89e-01  
 42  +4.7904e-01  +4.7904e-01  4.03e-07  1.51e-11  7.95e-09  4.49e-12  5.67e-11  9.89e-01  
 43  +4.7904e-01  +4.7904e-01  4.03e-09  1.51e-13  7.95e-11  4.49e-14  5.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5129763s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:26 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:26 PM: Optimal value: 4.790e-01
(CVXPY) Aug 31 05:05:26 PM: Compilation took 2.709e-01 seconds
(CVXPY) Aug 31 05:05:26 PM: Solver (including time spent in interface) took 1.558e+00 seconds
Iteration: 17, Objective: 0.4790
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:26 PM: Your problem has 25187 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:26 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:26 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:26 PM: Finished problem compilation (took 2.126e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25187
  constraints   = 50187
  nnz(P)        = 0
  nnz(A)        = 449050
  cones (total) = 1
    : Nonnegative = 1,  numel = 50187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3470e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3489e-01  +6.3116e+02  6.31e+02  1.70e-01  8.62e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6436e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5933e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2077e+00  7.08e-01  2.12e-03  1.11e+00  2.36e-05  1.91e-01  2.03e-01  
  6  +5.0001e-01  +7.1381e-01  2.14e-01  6.39e-04  3.36e-01  5.84e-06  6.74e-02  7.32e-01  
  7  +5.0000e-01  +6.5941e-01  1.59e-01  4.76e-04  2.51e-01  4.45e-06  4.41e-02  4.46e-01  
  8  +5.0000e-01  +6.2896e-01  1.29e-01  3.85e-04  2.03e-01  4.30e-06  2.49e-02  5.34e-01  
  9  +5.0000e-01  +6.3090e-01  1.31e-01  3.90e-04  2.05e-01  4.85e-06  1.54e-02  5.66e-01  
 10  +4.9998e-01  +6.0921e-01  1.09e-01  3.01e-04  1.59e-01  1.22e-05  2.90e-03  9.90e-01  
 11  +4.9929e-01  +6.0317e-01  1.04e-01  2.67e-05  1.41e-02  3.48e-04  9.12e-05  9.70e-01  
 12  +4.9879e-01  +5.9338e-01  9.46e-02  1.44e-05  7.63e-03  4.91e-04  4.86e-05  5.64e-01  
 13  +4.9895e-01  +5.8496e-01  8.60e-02  1.20e-05  6.34e-03  3.27e-04  4.01e-05  4.61e-01  
 14  +4.9856e-01  +5.7351e-01  7.49e-02  7.37e-06  3.89e-03  2.29e-04  2.45e-05  7.58e-01  
 15  +4.9851e-01  +5.7262e-01  7.41e-02  7.12e-06  3.76e-03  2.01e-04  2.36e-05  1.53e-01  
 16  +4.9803e-01  +5.6929e-01  7.13e-02  6.00e-06  3.17e-03  1.78e-04  1.99e-05  3.11e-01  
 17  +4.9668e-01  +5.6099e-01  6.43e-02  4.63e-06  2.44e-03  1.34e-04  1.55e-05  4.25e-01  
 18  +4.9482e-01  +5.5096e-01  5.61e-02  3.65e-06  1.92e-03  1.04e-04  1.24e-05  3.10e-01  
 19  +4.9380e-01  +5.4546e-01  5.17e-02  3.24e-06  1.71e-03  7.46e-05  1.10e-05  2.70e-01  
 20  +4.9364e-01  +5.4454e-01  5.09e-02  3.19e-06  1.68e-03  6.20e-05  1.09e-05  1.37e-01  
 21  +4.9247e-01  +5.3876e-01  4.63e-02  2.76e-06  1.46e-03  4.89e-05  9.46e-06  2.31e-01  
 22  +4.9221e-01  +5.3731e-01  4.51e-02  2.64e-06  1.39e-03  3.66e-05  9.05e-06  2.30e-01  
 23  +4.9126e-01  +5.3267e-01  4.14e-02  2.32e-06  1.23e-03  1.65e-05  7.99e-06  4.92e-01  
 24  +4.8892e-01  +5.2184e-01  3.29e-02  1.70e-06  8.97e-04  1.03e-05  5.91e-06  4.04e-01  
 25  +4.8887e-01  +5.2156e-01  3.27e-02  1.67e-06  8.83e-04  9.06e-06  5.81e-06  1.18e-01  
 26  +4.8689e-01  +5.1272e-01  2.58e-02  1.24e-06  6.53e-04  6.19e-06  4.34e-06  3.50e-01  
 27  +4.8679e-01  +5.1235e-01  2.56e-02  1.23e-06  6.50e-04  5.81e-06  4.33e-06  4.10e-02  
 28  +4.8592e-01  +5.0824e-01  2.23e-02  1.00e-06  5.30e-04  1.28e-06  3.53e-06  7.80e-01  
 29  +4.8518e-01  +5.0505e-01  1.99e-02  8.82e-07  4.65e-04  9.90e-07  3.12e-06  2.43e-01  
 30  +4.8379e-01  +4.9911e-01  1.53e-02  6.65e-07  3.51e-04  6.43e-07  2.37e-06  3.74e-01  
 31  +4.8304e-01  +4.9579e-01  1.27e-02  5.42e-07  2.86e-04  3.57e-07  1.94e-06  5.33e-01  
 32  +4.8207e-01  +4.9145e-01  9.38e-03  3.89e-07  2.05e-04  1.00e-07  1.40e-06  9.90e-01  
 33  +4.8131e-01  +4.8837e-01  7.06e-03  2.91e-07  1.53e-04  7.53e-08  1.06e-06  3.96e-01  
 34  +4.8101e-01  +4.8713e-01  6.12e-03  2.50e-07  1.32e-04  6.57e-08  9.10e-07  5.91e-01  
 35  +4.8030e-01  +4.8431e-01  4.01e-03  1.62e-07  8.54e-05  4.33e-08  5.94e-07  6.38e-01  
 36  +4.7987e-01  +4.8261e-01  2.74e-03  1.10e-07  5.80e-05  2.98e-08  4.05e-07  3.93e-01  
 37  +4.7975e-01  +4.8213e-01  2.38e-03  9.48e-08  5.00e-05  2.59e-08  3.50e-07  6.51e-01  
 38  +4.7916e-01  +4.7987e-01  7.17e-04  2.79e-08  1.47e-05  7.98e-09  1.04e-07  7.54e-01  
 39  +4.7893e-01  +4.7905e-01  1.21e-04  4.59e-09  2.42e-06  1.34e-09  1.73e-08  9.07e-01  
 40  +4.7888e-01  +4.7888e-01  2.47e-06  9.32e-11  4.92e-08  2.75e-11  3.53e-10  9.90e-01  
 41  +4.7888e-01  +4.7888e-01  2.48e-08  9.33e-13  4.92e-10  2.75e-13  3.54e-12  9.90e-01  
 42  +4.7888e-01  +4.7888e-01  2.52e-10  9.47e-15  5.00e-12  4.86e-15  6.05e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6765063s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:28 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:28 PM: Optimal value: 4.789e-01
(CVXPY) Aug 31 05:05:28 PM: Compilation took 2.126e-01 seconds
(CVXPY) Aug 31 05:05:28 PM: Solver (including time spent in interface) took 1.744e+00 seconds
Iteration: 18, Objective: 0.4789
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:28 PM: Your problem has 25193 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:28 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:28 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:28 PM: Finished problem compilation (took 2.419e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25193
  constraints   = 50193
  nnz(P)        = 0
  nnz(A)        = 451419
  cones (total) = 1
    : Nonnegative = 1,  numel = 50193

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3472e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3488e-01  +6.3112e+02  6.31e+02  1.70e-01  8.62e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6436e+02  1.64e+02  1.47e-01  7.50e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5938e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2004e+00  7.00e-01  2.10e-03  1.10e+00  2.36e-05  1.91e-01  2.05e-01  
  6  +5.0001e-01  +7.2097e-01  2.21e-01  6.61e-04  3.47e-01  6.24e-06  6.97e-02  7.11e-01  
  7  +5.0000e-01  +6.5313e-01  1.53e-01  4.58e-04  2.41e-01  4.44e-06  4.20e-02  5.09e-01  
  8  +5.0000e-01  +6.2791e-01  1.28e-01  3.82e-04  2.01e-01  4.43e-06  2.22e-02  6.18e-01  
  9  +5.0000e-01  +6.2844e-01  1.28e-01  3.83e-04  2.01e-01  4.96e-06  1.52e-02  4.48e-01  
 10  +5.0000e-01  +6.1783e-01  1.18e-01  3.41e-04  1.79e-01  6.43e-06  4.84e-03  9.90e-01  
 11  +4.9975e-01  +6.0981e-01  1.10e-01  5.84e-05  3.08e-02  1.29e-04  2.05e-04  9.61e-01  
 12  +4.9898e-01  +6.0267e-01  1.04e-01  1.58e-05  8.34e-03  4.47e-04  5.30e-05  7.56e-01  
 13  +4.9927e-01  +5.9139e-01  9.21e-02  1.41e-05  7.44e-03  2.51e-04  4.69e-05  4.17e-01  
 14  +4.9889e-01  +5.8778e-01  8.89e-02  1.02e-05  5.40e-03  3.06e-04  3.40e-05  3.19e-01  
 15  +4.9901e-01  +5.7823e-01  7.92e-02  8.82e-06  4.66e-03  1.26e-04  2.92e-05  5.94e-01  
 16  +4.9877e-01  +5.7406e-01  7.53e-02  7.25e-06  3.83e-03  8.77e-05  2.40e-05  4.97e-01  
 17  +4.9844e-01  +5.7192e-01  7.35e-02  6.44e-06  3.40e-03  8.66e-05  2.13e-05  1.71e-01  
 18  +4.9786e-01  +5.6642e-01  6.86e-02  5.80e-06  3.06e-03  3.31e-05  1.93e-05  5.85e-01  
 19  +4.9609e-01  +5.5705e-01  6.10e-02  4.18e-06  2.21e-03  2.98e-05  1.41e-05  3.84e-01  
 20  +4.9459e-01  +5.4928e-01  5.47e-02  3.52e-06  1.86e-03  2.28e-05  1.19e-05  2.68e-01  
 21  +4.9426e-01  +5.4764e-01  5.34e-02  3.42e-06  1.80e-03  1.88e-05  1.16e-05  1.46e-01  
 22  +4.9283e-01  +5.4047e-01  4.76e-02  2.90e-06  1.53e-03  9.74e-06  9.95e-06  4.40e-01  
 23  +4.9283e-01  +5.4041e-01  4.76e-02  2.88e-06  1.52e-03  8.27e-06  9.84e-06  1.40e-01  
 24  +4.9138e-01  +5.3359e-01  4.22e-02  2.40e-06  1.26e-03  6.02e-06  8.25e-06  3.00e-01  
 25  +4.9098e-01  +5.3169e-01  4.07e-02  2.25e-06  1.19e-03  3.82e-06  7.74e-06  3.48e-01  
 26  +4.8997e-01  +5.2712e-01  3.72e-02  1.97e-06  1.04e-03  2.74e-06  6.81e-06  2.94e-01  
 27  +4.8851e-01  +5.2057e-01  3.21e-02  1.62e-06  8.57e-04  1.96e-06  5.67e-06  3.00e-01  
 28  +4.8774e-01  +5.1697e-01  2.92e-02  1.43e-06  7.52e-04  1.23e-06  4.99e-06  4.04e-01  
 29  +4.8763e-01  +5.1649e-01  2.89e-02  1.40e-06  7.40e-04  1.04e-06  4.92e-06  1.67e-01  
 30  +4.8515e-01  +5.0551e-01  2.04e-02  9.19e-07  4.85e-04  2.14e-07  3.27e-06  8.86e-01  
 31  +4.8406e-01  +5.0080e-01  1.67e-02  7.37e-07  3.89e-04  1.69e-07  2.64e-06  5.03e-01  
 32  +4.8309e-01  +4.9665e-01  1.36e-02  5.88e-07  3.10e-04  1.36e-07  2.12e-06  2.59e-01  
 33  +4.8252e-01  +4.9397e-01  1.15e-02  4.85e-07  2.56e-04  1.16e-07  1.76e-06  7.04e-01  
 34  +4.8147e-01  +4.8959e-01  8.12e-03  3.40e-07  1.79e-04  8.32e-08  1.24e-06  5.07e-01  
 35  +4.8078e-01  +4.8672e-01  5.94e-03  2.45e-07  1.29e-04  6.18e-08  9.02e-07  5.95e-01  
 36  +4.8055e-01  +4.8579e-01  5.24e-03  2.16e-07  1.14e-04  5.47e-08  7.94e-07  2.37e-01  
 37  +4.7998e-01  +4.8344e-01  3.46e-03  1.41e-07  7.42e-05  3.69e-08  5.23e-07  9.90e-01  
 38  +4.7930e-01  +4.8079e-01  1.49e-03  6.00e-08  3.17e-05  1.57e-08  2.27e-07  8.42e-01  
 39  +4.7894e-01  +4.7942e-01  4.79e-04  1.91e-08  1.01e-05  5.03e-09  7.35e-08  9.90e-01  
 40  +4.7888e-01  +4.7921e-01  3.27e-04  1.30e-08  6.83e-06  3.43e-09  5.03e-08  4.05e-01  
 41  +4.7884e-01  +4.7904e-01  2.01e-04  7.92e-09  4.18e-06  2.10e-09  3.09e-08  9.90e-01  
 42  +4.7876e-01  +4.7878e-01  1.22e-05  4.79e-10  2.53e-07  1.27e-10  1.89e-09  9.57e-01  
 43  +4.7876e-01  +4.7876e-01  1.23e-07  4.83e-12  2.55e-09  1.28e-12  1.91e-11  9.90e-01  
 44  +4.7876e-01  +4.7876e-01  1.23e-09  4.83e-14  2.55e-11  1.28e-14  1.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9572317s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:30 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:30 PM: Optimal value: 4.788e-01
(CVXPY) Aug 31 05:05:30 PM: Compilation took 2.419e-01 seconds
(CVXPY) Aug 31 05:05:30 PM: Solver (including time spent in interface) took 2.015e+00 seconds
Iteration: 19, Objective: 0.4788
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:30 PM: Your problem has 25203 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:30 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:31 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:31 PM: Finished problem compilation (took 2.780e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25203
  constraints   = 50203
  nnz(P)        = 0
  nnz(A)        = 454682
  cones (total) = 1
    : Nonnegative = 1,  numel = 50203

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8413e-01  +5.3473e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3488e-01  +6.3104e+02  6.31e+02  1.70e-01  8.62e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.50e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5940e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1727e+00  6.73e-01  2.01e-03  1.06e+00  2.36e-05  1.91e-01  2.14e-01  
  6  +5.0000e-01  +7.3988e-01  2.40e-01  7.17e-04  3.77e-01  7.14e-06  7.55e-02  6.99e-01  
  7  +5.0000e-01  +6.6598e-01  1.66e-01  4.96e-04  2.61e-01  4.98e-06  4.62e-02  5.01e-01  
  8  +5.0000e-01  +6.3914e-01  1.39e-01  4.16e-04  2.19e-01  4.77e-06  2.75e-02  5.20e-01  
  9  +5.0000e-01  +6.2639e-01  1.26e-01  3.76e-04  1.98e-01  6.89e-06  1.25e-02  6.22e-01  
 10  +4.9995e-01  +6.1385e-01  1.14e-01  2.89e-04  1.52e-01  2.70e-05  2.11e-03  9.16e-01  
 11  +4.9950e-01  +6.1063e-01  1.11e-01  5.94e-05  3.14e-02  2.48e-04  2.15e-04  8.99e-01  
 12  +4.9905e-01  +5.7784e-01  7.88e-02  1.70e-05  8.99e-03  3.84e-04  5.83e-05  9.90e-01  
 13  +4.9900e-01  +5.7703e-01  7.80e-02  1.43e-05  7.53e-03  3.58e-04  4.84e-05  3.64e-01  
 14  +4.9866e-01  +5.7532e-01  7.67e-02  1.05e-05  5.57e-03  4.21e-04  3.56e-05  3.48e-01  
 15  +4.9867e-01  +5.7512e-01  7.64e-02  1.02e-05  5.41e-03  3.89e-04  3.45e-05  1.23e-01  
 16  +4.9811e-01  +5.7191e-01  7.38e-02  7.20e-06  3.80e-03  3.97e-04  2.42e-05  4.96e-01  
 17  +4.9808e-01  +5.7167e-01  7.36e-02  7.16e-06  3.78e-03  3.80e-04  2.40e-05  4.62e-02  
 18  +4.9812e-01  +5.7108e-01  7.30e-02  7.02e-06  3.71e-03  2.82e-04  2.36e-05  2.50e-01  
 19  +4.9641e-01  +5.6245e-01  6.60e-02  4.62e-06  2.44e-03  3.07e-04  1.56e-05  4.20e-01  
 20  +4.9482e-01  +5.5386e-01  5.90e-02  3.85e-06  2.03e-03  2.19e-04  1.32e-05  3.16e-01  
 21  +4.9348e-01  +5.4644e-01  5.30e-02  3.37e-06  1.78e-03  8.39e-05  1.16e-05  5.13e-01  
 22  +4.9288e-01  +5.4350e-01  5.06e-02  3.16e-06  1.67e-03  6.38e-05  1.10e-05  2.11e-01  
 23  +4.9030e-01  +5.3113e-01  4.08e-02  2.33e-06  1.23e-03  4.56e-05  8.20e-06  3.31e-01  
 24  +4.8877e-01  +5.2389e-01  3.51e-02  1.89e-06  9.95e-04  3.22e-05  6.69e-06  3.17e-01  
 25  +4.8870e-01  +5.2366e-01  3.50e-02  1.88e-06  9.92e-04  3.08e-05  6.68e-06  3.13e-02  
 26  +4.8685e-01  +5.1514e-01  2.83e-02  1.42e-06  7.47e-04  1.74e-05  5.06e-06  4.52e-01  
 27  +4.8683e-01  +5.1508e-01  2.82e-02  1.41e-06  7.42e-04  1.61e-05  5.03e-06  7.47e-02  
 28  +4.8602e-01  +5.1144e-01  2.54e-02  1.23e-06  6.50e-04  1.35e-05  4.43e-06  1.75e-01  
 29  +4.8583e-01  +5.1069e-01  2.49e-02  1.21e-06  6.37e-04  1.08e-05  4.39e-06  1.63e-01  
 30  +4.8484e-01  +5.0611e-01  2.13e-02  9.94e-07  5.24e-04  5.41e-06  3.62e-06  5.07e-01  
 31  +4.8459e-01  +5.0489e-01  2.03e-02  9.30e-07  4.91e-04  3.12e-06  3.37e-06  4.43e-01  
 32  +4.8324e-01  +4.9902e-01  1.58e-02  7.06e-07  3.72e-04  2.14e-06  2.58e-06  3.29e-01  
 33  +4.8257e-01  +4.9613e-01  1.36e-02  5.96e-07  3.15e-04  1.59e-06  2.19e-06  2.78e-01  
 34  +4.8216e-01  +4.9434e-01  1.22e-02  5.30e-07  2.80e-04  1.19e-06  1.95e-06  2.69e-01  
 35  +4.8105e-01  +4.8958e-01  8.53e-03  3.65e-07  1.92e-04  6.54e-07  1.36e-06  4.69e-01  
 36  +4.8035e-01  +4.8660e-01  6.25e-03  2.64e-07  1.39e-04  4.09e-07  9.90e-07  3.96e-01  
 37  +4.8032e-01  +4.8646e-01  6.14e-03  2.59e-07  1.37e-04  3.56e-07  9.71e-07  1.48e-01  
 38  +4.7963e-01  +4.8362e-01  3.99e-03  1.66e-07  8.77e-05  2.03e-07  6.31e-07  4.47e-01  
 39  +4.7948e-01  +4.8297e-01  3.49e-03  1.45e-07  7.66e-05  1.37e-07  5.53e-07  3.77e-01  
 40  +4.7875e-01  +4.8001e-01  1.26e-03  5.18e-08  2.73e-05  4.09e-08  2.02e-07  7.12e-01  
 41  +4.7874e-01  +4.7998e-01  1.24e-03  5.09e-08  2.68e-05  3.55e-08  1.98e-07  2.00e-01  
 42  +4.7845e-01  +4.7881e-01  3.61e-04  1.47e-08  7.78e-06  3.78e-09  5.86e-08  9.90e-01  
 43  +4.7833e-01  +4.7835e-01  2.46e-05  9.98e-10  5.27e-07  2.53e-10  4.03e-09  9.37e-01  
 44  +4.7832e-01  +4.7832e-01  2.75e-07  1.11e-11  5.87e-09  2.81e-12  4.49e-11  9.89e-01  
 45  +4.7832e-01  +4.7832e-01  2.75e-09  1.11e-13  5.87e-11  2.81e-14  4.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7415911s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:33 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:33 PM: Optimal value: 4.783e-01
(CVXPY) Aug 31 05:05:33 PM: Compilation took 2.780e-01 seconds
(CVXPY) Aug 31 05:05:33 PM: Solver (including time spent in interface) took 1.789e+00 seconds
Iteration: 20, Objective: 0.4783
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:33 PM: Your problem has 25213 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:33 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:33 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:33 PM: Finished problem compilation (took 2.503e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25213
  constraints   = 50213
  nnz(P)        = 0
  nnz(A)        = 457680
  cones (total) = 1
    : Nonnegative = 1,  numel = 50213

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3474e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3487e-01  +6.3103e+02  6.30e+02  1.70e-01  8.62e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.49e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5943e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1743e+00  6.74e-01  2.02e-03  1.06e+00  2.36e-05  1.91e-01  2.13e-01  
  6  +5.0000e-01  +7.4376e-01  2.44e-01  7.29e-04  3.83e-01  7.29e-06  7.66e-02  6.90e-01  
  7  +5.0000e-01  +6.6185e-01  1.62e-01  4.84e-04  2.55e-01  4.76e-06  4.42e-02  5.68e-01  
  8  +5.0000e-01  +6.4114e-01  1.41e-01  4.22e-04  2.22e-01  4.66e-06  2.61e-02  5.57e-01  
  9  +4.9999e-01  +6.2514e-01  1.25e-01  3.72e-04  1.96e-01  7.58e-06  1.02e-02  6.74e-01  
 10  +4.9985e-01  +6.0601e-01  1.06e-01  1.53e-04  8.05e-02  7.99e-05  6.59e-04  9.71e-01  
 11  +4.9923e-01  +6.0100e-01  1.02e-01  3.75e-05  1.98e-02  3.65e-04  1.33e-04  8.07e-01  
 12  +4.9902e-01  +5.9574e-01  9.67e-02  2.62e-05  1.38e-02  4.29e-04  9.14e-05  4.12e-01  
 13  +4.9881e-01  +5.8821e-01  8.94e-02  1.73e-05  9.11e-03  4.45e-04  5.92e-05  5.43e-01  
 14  +4.9871e-01  +5.8463e-01  8.59e-02  1.36e-05  7.16e-03  4.24e-04  4.61e-05  3.94e-01  
 15  +4.9896e-01  +5.8004e-01  8.11e-02  1.11e-05  5.85e-03  2.46e-04  3.72e-05  6.11e-01  
 16  +4.9898e-01  +5.7635e-01  7.74e-02  8.98e-06  4.74e-03  1.25e-04  3.00e-05  6.87e-01  
 17  +4.9811e-01  +5.7155e-01  7.34e-02  5.74e-06  3.03e-03  1.16e-04  1.92e-05  6.54e-01  
 18  +4.9648e-01  +5.6296e-01  6.65e-02  4.36e-06  2.30e-03  1.11e-04  1.47e-05  3.00e-01  
 19  +4.9448e-01  +5.5237e-01  5.79e-02  3.62e-06  1.91e-03  7.03e-05  1.24e-05  3.39e-01  
 20  +4.9426e-01  +5.5125e-01  5.70e-02  3.56e-06  1.88e-03  6.51e-05  1.22e-05  6.18e-02  
 21  +4.9373e-01  +5.4846e-01  5.47e-02  3.42e-06  1.80e-03  4.35e-05  1.18e-05  2.61e-01  
 22  +4.9243e-01  +5.4196e-01  4.95e-02  2.99e-06  1.58e-03  2.53e-05  1.04e-05  3.68e-01  
 23  +4.9096e-01  +5.3487e-01  4.39e-02  2.52e-06  1.33e-03  1.48e-05  8.84e-06  3.89e-01  
 24  +4.8944e-01  +5.2771e-01  3.83e-02  2.06e-06  1.09e-03  8.11e-06  7.28e-06  4.45e-01  
 25  +4.8937e-01  +5.2746e-01  3.81e-02  2.06e-06  1.09e-03  7.68e-06  7.26e-06  4.34e-02  
 26  +4.8786e-01  +5.2053e-01  3.27e-02  1.68e-06  8.87e-04  5.39e-06  5.98e-06  3.12e-01  
 27  +4.8651e-01  +5.1437e-01  2.79e-02  1.36e-06  7.16e-04  2.55e-06  4.86e-06  5.27e-01  
 28  +4.8626e-01  +5.1325e-01  2.70e-02  1.30e-06  6.86e-04  2.30e-06  4.66e-06  1.10e-01  
 29  +4.8565e-01  +5.1014e-01  2.45e-02  1.13e-06  5.95e-04  1.21e-07  4.05e-06  9.76e-01  
 30  +4.8498e-01  +5.0736e-01  2.24e-02  1.01e-06  5.34e-04  1.56e-07  3.65e-06  5.01e-01  
 31  +4.8395e-01  +5.0292e-01  1.90e-02  8.46e-07  4.46e-04  1.55e-07  3.07e-06  5.60e-01  
 32  +4.8170e-01  +4.9315e-01  1.14e-02  4.96e-07  2.62e-04  1.02e-07  1.83e-06  6.87e-01  
 33  +4.8166e-01  +4.9293e-01  1.13e-02  4.88e-07  2.58e-04  1.01e-07  1.81e-06  7.82e-02  
 34  +4.8051e-01  +4.8802e-01  7.51e-03  3.21e-07  1.69e-04  6.89e-08  1.20e-06  4.55e-01  
 35  +4.7997e-01  +4.8554e-01  5.57e-03  2.35e-07  1.24e-04  5.61e-08  8.81e-07  9.63e-01  
 36  +4.7948e-01  +4.8352e-01  4.04e-03  1.70e-07  8.97e-05  4.08e-08  6.43e-07  3.47e-01  
 37  +4.7918e-01  +4.8223e-01  3.05e-03  1.28e-07  6.78e-05  3.11e-08  4.88e-07  9.87e-01  
 38  +4.7862e-01  +4.8000e-01  1.38e-03  5.79e-08  3.06e-05  1.40e-08  2.22e-07  6.63e-01  
 39  +4.7820e-01  +4.7833e-01  1.28e-04  5.38e-09  2.84e-06  1.25e-09  2.09e-08  9.90e-01  
 40  +4.7817e-01  +4.7823e-01  5.53e-05  2.33e-09  1.23e-06  5.39e-10  9.06e-09  5.72e-01  
 41  +4.7816e-01  +4.7819e-01  2.35e-05  9.91e-10  5.23e-07  2.31e-10  3.88e-09  9.90e-01  
 42  +4.7816e-01  +4.7816e-01  6.79e-07  2.86e-11  1.51e-08  6.63e-12  1.12e-10  9.89e-01  
 43  +4.7816e-01  +4.7816e-01  6.79e-09  2.86e-13  1.51e-10  6.65e-14  1.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4858796s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:35 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:35 PM: Optimal value: 4.782e-01
(CVXPY) Aug 31 05:05:35 PM: Compilation took 2.503e-01 seconds
(CVXPY) Aug 31 05:05:35 PM: Solver (including time spent in interface) took 1.533e+00 seconds
Iteration: 21, Objective: 0.4782
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:35 PM: Your problem has 25223 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:35 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:35 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:35 PM: Finished problem compilation (took 2.148e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25223
  constraints   = 50223
  nnz(P)        = 0
  nnz(A)        = 461005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50223

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8412e-01  +5.3474e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3487e-01  +6.3102e+02  6.30e+02  1.70e-01  8.62e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.49e+01  4.01e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5943e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.2008e+00  7.01e-01  2.10e-03  1.10e+00  2.36e-05  1.91e-01  2.05e-01  
  6  +5.0001e-01  +7.2559e-01  2.26e-01  6.75e-04  3.55e-01  6.36e-06  7.08e-02  7.13e-01  
  7  +5.0000e-01  +6.6271e-01  1.63e-01  4.86e-04  2.56e-01  4.61e-06  4.40e-02  5.11e-01  
  8  +5.0000e-01  +6.4264e-01  1.43e-01  4.26e-04  2.24e-01  4.53e-06  2.68e-02  5.25e-01  
  9  +5.0000e-01  +6.2716e-01  1.27e-01  3.78e-04  1.99e-01  7.09e-06  1.04e-02  7.09e-01  
 10  +4.9989e-01  +6.1359e-01  1.14e-01  1.97e-04  1.04e-01  5.81e-05  9.27e-04  9.34e-01  
 11  +4.9927e-01  +6.0872e-01  1.09e-01  4.03e-05  2.13e-02  3.51e-04  1.43e-04  8.49e-01  
 12  +4.9897e-01  +6.0186e-01  1.03e-01  2.61e-05  1.38e-02  4.47e-04  9.08e-05  4.46e-01  
 13  +4.9934e-01  +5.7988e-01  8.05e-02  1.52e-05  8.05e-03  1.59e-04  5.16e-05  9.62e-01  
 14  +4.9916e-01  +5.7689e-01  7.77e-02  9.85e-06  5.21e-03  1.25e-04  3.30e-05  7.80e-01  
 15  +4.9889e-01  +5.7499e-01  7.61e-02  7.26e-06  3.84e-03  8.32e-05  2.42e-05  7.12e-01  
 16  +4.9878e-01  +5.7435e-01  7.56e-02  7.10e-06  3.75e-03  7.29e-05  2.37e-05  1.40e-01  
 17  +4.9705e-01  +5.6485e-01  6.78e-02  4.47e-06  2.36e-03  6.66e-05  1.50e-05  5.87e-01  
 18  +4.9631e-01  +5.6096e-01  6.46e-02  4.25e-06  2.24e-03  5.36e-05  1.43e-05  1.58e-01  
 19  +4.9433e-01  +5.5098e-01  5.67e-02  3.48e-06  1.84e-03  4.10e-05  1.19e-05  2.68e-01  
 20  +4.9420e-01  +5.5040e-01  5.62e-02  3.45e-06  1.82e-03  3.89e-05  1.18e-05  4.02e-02  
 21  +4.9387e-01  +5.4879e-01  5.49e-02  3.37e-06  1.78e-03  3.15e-05  1.16e-05  1.49e-01  
 22  +4.9213e-01  +5.4042e-01  4.83e-02  2.83e-06  1.50e-03  1.93e-05  9.83e-06  3.56e-01  
 23  +4.9080e-01  +5.3412e-01  4.33e-02  2.44e-06  1.29e-03  1.11e-05  8.50e-06  3.94e-01  
 24  +4.8941e-01  +5.2769e-01  3.83e-02  2.05e-06  1.08e-03  8.57e-06  7.20e-06  2.48e-01  
 25  +4.8936e-01  +5.2751e-01  3.82e-02  2.04e-06  1.08e-03  8.16e-06  7.18e-06  3.95e-02  
 26  +4.8688e-01  +5.1641e-01  2.95e-02  1.46e-06  7.71e-04  4.31e-06  5.20e-06  4.82e-01  
 27  +4.8577e-01  +5.1146e-01  2.57e-02  1.23e-06  6.48e-04  3.34e-06  4.40e-06  2.46e-01  
 28  +4.8561e-01  +5.1077e-01  2.52e-02  1.19e-06  6.28e-04  3.00e-06  4.26e-06  1.11e-01  
 29  +4.8480e-01  +5.0690e-01  2.21e-02  1.00e-06  5.30e-04  1.20e-06  3.61e-06  6.21e-01  
 30  +4.8450e-01  +5.0566e-01  2.12e-02  9.61e-07  5.07e-04  9.28e-07  3.47e-06  2.37e-01  
 31  +4.8273e-01  +4.9811e-01  1.54e-02  6.78e-07  3.58e-04  5.91e-07  2.48e-06  3.88e-01  
 32  +4.8173e-01  +4.9384e-01  1.21e-02  5.24e-07  2.76e-04  4.06e-07  1.93e-06  3.51e-01  
 33  +4.8068e-01  +4.8910e-01  8.42e-03  3.53e-07  1.86e-04  8.92e-08  1.31e-06  9.90e-01  
 34  +4.8024e-01  +4.8732e-01  7.08e-03  2.95e-07  1.56e-04  7.48e-08  1.10e-06  3.36e-01  
 35  +4.7979e-01  +4.8543e-01  5.65e-03  2.34e-07  1.24e-04  5.89e-08  8.77e-07  8.26e-01  
 36  +4.7887e-01  +4.8177e-01  2.91e-03  1.20e-07  6.31e-05  3.02e-08  4.54e-07  5.22e-01  
 37  +4.7847e-01  +4.8019e-01  1.72e-03  7.04e-08  3.71e-05  1.79e-08  2.69e-07  4.61e-01  
 38  +4.7825e-01  +4.7933e-01  1.07e-03  4.37e-08  2.30e-05  1.12e-08  1.68e-07  7.53e-01  
 39  +4.7825e-01  +4.7932e-01  1.07e-03  4.36e-08  2.30e-05  1.11e-08  1.67e-07  4.90e-02  
 40  +4.7805e-01  +4.7852e-01  4.76e-04  1.93e-08  1.02e-05  4.93e-09  7.46e-08  5.92e-01  
 41  +4.7790e-01  +4.7794e-01  4.66e-05  1.89e-09  9.98e-07  4.77e-10  7.33e-09  9.59e-01  
 42  +4.7788e-01  +4.7788e-01  1.68e-06  6.83e-11  3.61e-08  1.72e-11  2.65e-10  9.90e-01  
 43  +4.7788e-01  +4.7788e-01  1.71e-08  6.93e-13  3.66e-10  1.74e-13  2.69e-12  9.90e-01  
 44  +4.7788e-01  +4.7788e-01  1.85e-10  7.48e-15  3.95e-12  1.87e-15  2.88e-14  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4456131s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:36 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:36 PM: Optimal value: 4.779e-01
(CVXPY) Aug 31 05:05:36 PM: Compilation took 2.148e-01 seconds
(CVXPY) Aug 31 05:05:36 PM: Solver (including time spent in interface) took 1.484e+00 seconds
Iteration: 22, Objective: 0.4779
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 05:05:37 PM: Your problem has 25228 variables, 25000 constraints, and 0 parameters.
(CVXPY) Aug 31 05:05:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 05:05:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 05:05:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 05:05:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 05:05:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 05:05:37 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 05:05:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 05:05:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 05:05:37 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 05:05:37 PM: Finished problem compilation (took 2.426e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:37 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25228
  constraints   = 50228
  nnz(P)        = 0
  nnz(A)        = 463558
  cones (total) = 1
    : Nonnegative = 1,  numel = 50228

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.63e+02  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3471e+03  5.35e+03  4.24e-01  1.68e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3488e-01  +6.3104e+02  6.31e+02  1.70e-01  8.62e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6433e+02  1.64e+02  1.47e-01  7.49e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0123e-01  +1.5938e+01  1.54e+01  4.31e-02  2.18e+01  4.77e-06  1.96e-01  4.44e-01  
  5  +5.0001e-01  +1.1952e+00  6.95e-01  2.08e-03  1.09e+00  2.36e-05  1.91e-01  2.07e-01  
  6  +5.0000e-01  +7.2177e-01  2.22e-01  6.63e-04  3.49e-01  6.30e-06  6.98e-02  7.17e-01  
  7  +5.0000e-01  +6.6204e-01  1.62e-01  4.84e-04  2.55e-01  4.64e-06  4.39e-02  5.00e-01  
  8  +5.0000e-01  +6.4267e-01  1.43e-01  4.26e-04  2.24e-01  4.57e-06  2.66e-02  5.35e-01  
  9  +5.0000e-01  +6.2610e-01  1.26e-01  3.74e-04  1.97e-01  7.33e-06  1.01e-02  7.03e-01  
 10  +4.9983e-01  +6.0762e-01  1.08e-01  1.42e-04  7.49e-02  8.72e-05  5.95e-04  9.64e-01  
 11  +4.9912e-01  +6.0146e-01  1.02e-01  3.22e-05  1.70e-02  4.16e-04  1.14e-04  8.20e-01  
 12  +4.9891e-01  +5.9713e-01  9.82e-02  2.40e-05  1.27e-02  4.75e-04  8.36e-05  3.41e-01  
 13  +4.9878e-01  +5.8620e-01  8.74e-02  1.51e-05  7.98e-03  4.19e-04  5.15e-05  6.57e-01  
 14  +4.9864e-01  +5.8268e-01  8.40e-02  1.17e-05  6.17e-03  3.97e-04  3.95e-05  4.20e-01  
 15  +4.9852e-01  +5.8044e-01  8.19e-02  9.84e-06  5.20e-03  3.68e-04  3.32e-05  3.18e-01  
 16  +4.9832e-01  +5.7637e-01  7.80e-02  7.97e-06  4.21e-03  2.81e-04  2.68e-05  4.69e-01  
 17  +4.9780e-01  +5.7110e-01  7.33e-02  6.48e-06  3.42e-03  1.83e-04  2.18e-05  5.16e-01  
 18  +4.9628e-01  +5.6293e-01  6.67e-02  4.76e-06  2.51e-03  1.73e-04  1.61e-05  3.62e-01  
 19  +4.9422e-01  +5.5222e-01  5.80e-02  3.67e-06  1.94e-03  1.47e-04  1.26e-05  2.80e-01  
 20  +4.9402e-01  +5.5113e-01  5.71e-02  3.60e-06  1.90e-03  1.36e-04  1.24e-05  6.76e-02  
 21  +4.9374e-01  +5.4947e-01  5.57e-02  3.50e-06  1.85e-03  1.04e-04  1.21e-05  1.89e-01  
 22  +4.9239e-01  +5.4263e-01  5.02e-02  3.02e-06  1.59e-03  7.20e-05  1.05e-05  2.98e-01  
 23  +4.9124e-01  +5.3681e-01  4.56e-02  2.62e-06  1.38e-03  4.05e-05  9.15e-06  3.99e-01  
 24  +4.8994e-01  +5.3070e-01  4.08e-02  2.24e-06  1.18e-03  3.23e-05  7.86e-06  2.24e-01  
 25  +4.8970e-01  +5.2960e-01  3.99e-02  2.17e-06  1.14e-03  2.79e-05  7.61e-06  1.30e-01  
 26  +4.8891e-01  +5.2591e-01  3.70e-02  1.94e-06  1.03e-03  1.77e-05  6.85e-06  3.47e-01  
 27  +4.8697e-01  +5.1707e-01  3.01e-02  1.49e-06  7.88e-04  1.19e-05  5.32e-06  3.41e-01  
 28  +4.8594e-01  +5.1242e-01  2.65e-02  1.26e-06  6.66e-04  7.97e-06  4.52e-06  3.41e-01  
 29  +4.8582e-01  +5.1197e-01  2.62e-02  1.25e-06  6.62e-04  7.34e-06  4.51e-06  5.48e-02  
 30  +4.8400e-01  +5.0390e-01  1.99e-02  9.15e-07  4.83e-04  4.72e-06  3.33e-06  3.68e-01  
 31  +4.8314e-01  +4.9994e-01  1.68e-02  7.42e-07  3.92e-04  1.89e-06  2.71e-06  6.19e-01  
 32  +4.8207e-01  +4.9534e-01  1.33e-02  5.75e-07  3.03e-04  1.17e-06  2.11e-06  3.98e-01  
 33  +4.8175e-01  +4.9391e-01  1.22e-02  5.23e-07  2.76e-04  8.96e-07  1.93e-06  2.56e-01  
 34  +4.8115e-01  +4.9136e-01  1.02e-02  4.35e-07  2.29e-04  6.25e-07  1.61e-06  3.30e-01  
 35  +4.8051e-01  +4.8859e-01  8.09e-03  3.39e-07  1.79e-04  3.13e-07  1.26e-06  5.68e-01  
 36  +4.8018e-01  +4.8724e-01  7.06e-03  2.94e-07  1.55e-04  2.47e-07  1.10e-06  2.44e-01  
 37  +4.7968e-01  +4.8514e-01  5.46e-03  2.26e-07  1.19e-04  1.25e-07  8.50e-07  6.08e-01  
 38  +4.7866e-01  +4.8104e-01  2.38e-03  9.79e-08  5.17e-05  3.37e-08  3.74e-07  8.63e-01  
 39  +4.7843e-01  +4.8008e-01  1.66e-03  6.81e-08  3.59e-05  2.08e-08  2.61e-07  6.02e-01  
 40  +4.7806e-01  +4.7865e-01  5.90e-04  2.42e-08  1.28e-05  6.53e-09  9.35e-08  8.74e-01  
 41  +4.7804e-01  +4.7856e-01  5.19e-04  2.12e-08  1.12e-05  5.71e-09  8.22e-08  1.90e-01  
 42  +4.7804e-01  +4.7855e-01  5.14e-04  2.11e-08  1.11e-05  5.59e-09  8.15e-08  1.07e-01  
 43  +4.7794e-01  +4.7820e-01  2.51e-04  1.02e-08  5.41e-06  2.71e-09  3.98e-08  5.86e-01  
 44  +4.7788e-01  +4.7796e-01  7.66e-05  3.13e-09  1.65e-06  7.77e-10  1.22e-08  9.90e-01  
 45  +4.7786e-01  +4.7786e-01  1.53e-06  6.25e-11  3.30e-08  1.54e-11  2.43e-10  9.85e-01  
 46  +4.7786e-01  +4.7786e-01  1.68e-08  6.86e-13  3.62e-10  1.69e-13  2.67e-12  9.89e-01  
 47  +4.7786e-01  +4.7786e-01  1.05e-09  4.28e-14  2.26e-11  9.93e-15  1.60e-13  9.37e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.612447s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 05:05:39 PM: Problem status: optimal
(CVXPY) Aug 31 05:05:39 PM: Optimal value: 4.779e-01
(CVXPY) Aug 31 05:05:39 PM: Compilation took 2.426e-01 seconds
(CVXPY) Aug 31 05:05:39 PM: Solver (including time spent in interface) took 1.660e+00 seconds
FULL MODEL:
  Accruacy: 0.50908
  Our objective: 0.018159999999999954

IF 
    (x0 = 0 AND x2 = 0 AND x4 = 0)                                                        <-- (term's our objective: 0.01087999999999996)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0006399999999999683)
 OR (x4 = 1 AND x5 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0) <-- (term's our objective: 0.0009599999999999995)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0005999999999999994)
 OR (x0 = 1 AND x4 = 1 AND x7 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0005999999999999686)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x0 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0007199999999999594)
 OR (x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.0006799999999999636)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x1 = 0 AND x7 = 0) <-- (term's our objective: 0.0006799999999999814)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x4 = 0) <-- (term's our objective: 0.0007200000000000084)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x6 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.0007600000000000393)
 OR (x2 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0006399999999999726)
 OR (x3 = 1 AND x4 = 1 AND x5 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0002800000000000302)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 56.89940094947815
Best over terms:
  Our final objective: 0.01087999999999996
    Its accruacy: 0.50544
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.01087999999999996
  Highest accruacy: 0.50544
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

