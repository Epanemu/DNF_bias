Command:
python test_script.py -s smallest_subclass -d 4 -n 5000 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0592
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.06639999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:57 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:57 PM: Finished problem compilation (took 7.031e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5007e+03  2.50e+03  9.78e-01  6.03e+01  1.00e+00  1.00e+00   ------   
  1  +6.0815e-01  +4.8463e+02  4.84e+02  3.36e-01  3.35e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5089e-01  +7.5539e+01  7.50e+01  1.37e-01  1.67e+01  8.23e-03  2.27e-01  7.26e-01  
  3  +5.1015e-01  +1.5850e+01  1.53e+01  9.66e-02  1.14e+01  1.70e-05  2.24e-01  7.33e-02  
  4  +5.0001e-01  +9.4693e-01  4.47e-01  4.25e-03  5.13e-01  5.87e-06  1.44e-01  8.60e-01  
  5  +4.9999e-01  +5.7957e-01  7.96e-02  7.54e-04  9.16e-02  1.22e-06  2.63e-02  8.28e-01  
  6  +4.9978e-01  +6.0164e-01  1.02e-01  8.70e-04  1.06e-01  5.12e-06  6.37e-03  8.27e-01  
  7  +4.9244e-01  +5.5723e-01  6.48e-02  4.60e-05  5.63e-03  1.24e-04  1.48e-04  9.78e-01  
  8  +4.8185e-01  +4.9850e-01  1.66e-02  7.80e-06  9.54e-04  3.48e-05  2.67e-05  8.83e-01  
  9  +4.7676e-01  +4.7855e-01  1.78e-03  7.43e-07  9.09e-05  1.92e-06  3.01e-06  9.24e-01  
 10  +4.7611e-01  +4.7613e-01  2.12e-05  8.61e-09  1.05e-06  2.00e-08  3.61e-08  9.89e-01  
 11  +4.7610e-01  +4.7610e-01  2.12e-07  8.61e-11  1.05e-08  2.00e-10  3.61e-10  9.90e-01  
 12  +4.7610e-01  +4.7610e-01  2.12e-09  8.62e-13  1.05e-10  2.06e-12  3.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.6605ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:57 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:57 PM: Optimal value: 4.761e-01
(CVXPY) Aug 31 04:46:57 PM: Compilation took 7.031e-03 seconds
(CVXPY) Aug 31 04:46:57 PM: Solver (including time spent in interface) took 1.596e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4761
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:57 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:57 PM: Finished problem compilation (took 7.989e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22603
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5010e+03  2.50e+03  9.78e-01  6.47e+01  1.00e+00  1.01e+00   ------   
  1  +6.0774e-01  +4.8618e+02  4.86e+02  3.38e-01  3.60e+01  4.09e-03  4.78e-01  6.65e-01  
  2  +5.5040e-01  +7.5148e+01  7.46e+01  1.38e-01  1.79e+01  8.40e-03  2.29e-01  7.31e-01  
  3  +5.1001e-01  +1.5725e+01  1.52e+01  9.66e-02  1.22e+01  1.73e-05  2.26e-01  7.78e-02  
  4  +5.0030e-01  +1.3864e+00  8.86e-01  8.47e-03  1.09e+00  6.45e-06  1.74e-01  5.40e-01  
  5  +5.0009e-01  +7.5346e-01  2.53e-01  2.42e-03  3.13e-01  1.87e-06  6.85e-02  6.24e-01  
  6  +5.0008e-01  +7.5142e-01  2.51e-01  2.40e-03  3.10e-01  1.90e-06  6.25e-02  1.35e-01  
  7  +5.0010e-01  +7.7058e-01  2.70e-01  2.58e-03  3.33e-01  1.88e-06  6.15e-02  1.71e-01  
  8  +5.0005e-01  +7.0384e-01  2.04e-01  1.92e-03  2.48e-01  1.91e-06  2.79e-02  7.03e-01  
  9  +4.9920e-01  +6.1735e-01  1.18e-01  4.02e-04  5.24e-02  1.45e-05  1.50e-03  9.75e-01  
 10  +4.9557e-01  +5.9212e-01  9.66e-02  8.81e-05  1.15e-02  5.33e-05  3.02e-04  8.00e-01  
 11  +4.9343e-01  +5.7897e-01  8.55e-02  6.84e-05  8.95e-03  4.38e-05  2.35e-04  3.34e-01  
 12  +4.9152e-01  +5.6737e-01  7.58e-02  5.50e-05  7.20e-03  3.20e-05  1.88e-04  3.69e-01  
 13  +4.9146e-01  +5.6734e-01  7.59e-02  5.34e-05  6.98e-03  3.07e-05  1.81e-04  1.01e-01  
 14  +4.8696e-01  +5.3912e-01  5.22e-02  3.07e-05  4.01e-03  1.04e-05  9.99e-05  7.87e-01  
 15  +4.8339e-01  +5.2027e-01  3.69e-02  1.46e-05  1.91e-03  8.39e-06  4.40e-05  7.80e-01  
 16  +4.8314e-01  +5.2068e-01  3.75e-02  1.34e-05  1.75e-03  8.33e-06  4.03e-05  2.48e-01  
 17  +4.7906e-01  +5.0461e-01  2.55e-02  1.14e-05  1.49e-03  1.28e-06  3.68e-05  8.27e-01  
 18  +4.7788e-01  +5.0110e-01  2.32e-02  9.17e-06  1.20e-03  1.36e-06  2.90e-05  2.62e-01  
 19  +4.7722e-01  +4.9723e-01  2.00e-02  8.69e-06  1.14e-03  1.07e-06  2.90e-05  7.53e-02  
 20  +4.7499e-01  +4.9062e-01  1.56e-02  5.67e-06  7.42e-04  1.43e-06  1.81e-05  7.48e-01  
 21  +4.7162e-01  +4.7877e-01  7.15e-03  2.34e-06  3.06e-04  8.51e-07  7.26e-06  7.84e-01  
 22  +4.6923e-01  +4.7074e-01  1.51e-03  4.81e-07  6.28e-05  1.64e-07  1.51e-06  9.52e-01  
 23  +4.6839e-01  +4.6857e-01  1.80e-04  5.53e-08  7.22e-06  2.21e-08  1.73e-07  9.09e-01  
 24  +4.6830e-01  +4.6831e-01  4.53e-06  1.39e-09  1.81e-07  6.81e-10  4.33e-09  9.90e-01  
 25  +4.6830e-01  +4.6830e-01  4.53e-08  1.39e-11  1.81e-09  6.81e-12  4.33e-11  9.90e-01  
 26  +4.6830e-01  +4.6830e-01  4.54e-10  1.39e-13  1.81e-11  6.92e-14  4.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.3737ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:57 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:57 PM: Optimal value: 4.683e-01
(CVXPY) Aug 31 04:46:57 PM: Compilation took 7.989e-03 seconds
(CVXPY) Aug 31 04:46:57 PM: Solver (including time spent in interface) took 3.685e-02 seconds
Iteration: 2, Objective: 0.4683
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:57 PM: Your problem has 2522 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:57 PM: Finished problem compilation (took 6.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2522
  constraints   = 5022
  nnz(P)        = 0
  nnz(A)        = 23397
  cones (total) = 1
    : Nonnegative = 1,  numel = 5022

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5010e+03  2.50e+03  9.78e-01  6.51e+01  1.00e+00  1.02e+00   ------   
  1  +6.0743e-01  +4.8818e+02  4.88e+02  3.43e-01  3.63e+01  4.06e-03  4.89e-01  6.62e-01  
  2  +5.5064e-01  +7.5796e+01  7.52e+01  1.40e-01  1.80e+01  8.67e-03  2.35e-01  7.33e-01  
  3  +5.0993e-01  +1.5653e+01  1.51e+01  9.77e-02  1.22e+01  1.77e-05  2.32e-01  8.19e-02  
  4  +5.0033e-01  +1.4292e+00  9.29e-01  9.00e-03  1.14e+00  6.54e-06  1.79e-01  5.24e-01  
  5  +5.0010e-01  +7.8594e-01  2.86e-01  2.76e-03  3.54e-01  2.06e-06  7.72e-02  5.91e-01  
  6  +5.0009e-01  +7.6437e-01  2.64e-01  2.55e-03  3.28e-01  2.01e-06  6.44e-02  2.09e-01  
  7  +5.0010e-01  +7.7533e-01  2.75e-01  2.66e-03  3.41e-01  1.98e-06  6.38e-02  1.04e-01  
  8  +5.0007e-01  +7.3700e-01  2.37e-01  2.27e-03  2.91e-01  1.99e-06  3.72e-02  5.81e-01  
  9  +4.9977e-01  +6.2791e-01  1.28e-01  9.10e-04  1.17e-01  5.42e-06  4.70e-03  9.07e-01  
 10  +4.9632e-01  +6.0621e-01  1.10e-01  1.09e-04  1.42e-02  5.50e-05  3.75e-04  9.22e-01  
 11  +4.9602e-01  +6.0367e-01  1.08e-01  1.04e-04  1.35e-02  4.58e-05  3.57e-04  1.92e-01  
 12  +4.9357e-01  +5.8595e-01  9.24e-02  7.59e-05  9.85e-03  3.28e-05  2.61e-04  4.59e-01  
 13  +4.8973e-01  +5.5991e-01  7.02e-02  4.88e-05  6.33e-03  1.98e-05  1.66e-04  5.56e-01  
 14  +4.8893e-01  +5.5560e-01  6.67e-02  4.18e-05  5.42e-03  1.82e-05  1.37e-04  2.84e-01  
 15  +4.8829e-01  +5.5240e-01  6.41e-02  3.66e-05  4.74e-03  1.78e-05  1.17e-04  2.11e-01  
 16  +4.8853e-01  +5.5435e-01  6.58e-02  3.60e-05  4.67e-03  1.51e-05  1.14e-04  2.58e-01  
 17  +4.8761e-01  +5.5029e-01  6.27e-02  3.05e-05  3.96e-03  1.45e-05  9.59e-05  2.40e-01  
 18  +4.8739e-01  +5.4943e-01  6.20e-02  3.00e-05  3.88e-03  1.32e-05  9.41e-05  1.34e-01  
 19  +4.8442e-01  +5.3955e-01  5.51e-02  2.60e-05  3.37e-03  6.14e-06  8.43e-05  6.40e-01  
 20  +4.8214e-01  +5.2869e-01  4.65e-02  2.01e-05  2.61e-03  5.36e-06  6.45e-05  3.46e-01  
 21  +4.7857e-01  +5.1284e-01  3.43e-02  1.35e-05  1.75e-03  4.08e-06  4.33e-05  4.00e-01  
 22  +4.7560e-01  +4.9962e-01  2.40e-02  8.62e-06  1.12e-03  2.99e-06  2.77e-05  6.01e-01  
 23  +4.7465e-01  +4.9534e-01  2.07e-02  7.97e-06  1.03e-03  2.21e-06  2.75e-05  1.43e-01  
 24  +4.7343e-01  +4.8891e-01  1.55e-02  5.87e-06  7.61e-04  1.79e-06  2.00e-05  6.34e-01  
 25  +4.7018e-01  +4.7720e-01  7.02e-03  2.44e-06  3.16e-04  9.71e-07  8.09e-06  8.51e-01  
 26  +4.6774e-01  +4.6917e-01  1.42e-03  4.91e-07  6.36e-05  1.46e-07  1.67e-06  9.48e-01  
 27  +4.6702e-01  +4.6707e-01  5.03e-05  1.69e-08  2.18e-06  5.17e-09  5.77e-08  9.72e-01  
 28  +4.6700e-01  +4.6700e-01  5.08e-07  1.70e-10  2.20e-08  5.22e-11  5.83e-10  9.90e-01  
 29  +4.6700e-01  +4.6700e-01  5.08e-09  1.70e-12  2.20e-10  5.22e-13  5.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.9431ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:57 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:57 PM: Optimal value: 4.670e-01
(CVXPY) Aug 31 04:46:57 PM: Compilation took 6.999e-03 seconds
(CVXPY) Aug 31 04:46:57 PM: Solver (including time spent in interface) took 4.531e-02 seconds
FULL MODEL:
  Accruacy: 0.5332
  Our objective: 0.06640000000000001

IF 
    (x0 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.06359999999999996)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1) <-- (term's our objective: 0.0027999999999999553)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3797094821929932
Best over terms:
  Our final objective: 0.06359999999999996
    Its accruacy: 0.5318
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.06359999999999996
  Highest accruacy: 0.5318
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

