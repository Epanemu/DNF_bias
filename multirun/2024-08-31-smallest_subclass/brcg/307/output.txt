Command:
python test_script.py -s smallest_subclass -d 8 -n 5000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.005200000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 8.

Computed total variation: 0.17959999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:41 PM: Your problem has 2517 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:41 PM: Finished problem compilation (took 1.699e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2517
  constraints   = 5017
  nnz(P)        = 0
  nnz(A)        = 27517
  cones (total) = 1
    : Nonnegative = 1,  numel = 5017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  7.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.8414e-01  +5.3495e+02  5.34e+02  4.16e-01  4.97e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3470e-01  +6.3372e+01  6.28e+01  1.58e-01  2.42e+01  1.47e-02  2.65e-01  9.01e-01  
  3  +5.0900e-01  +1.6328e+01  1.58e+01  1.06e-01  1.58e+01  3.91e-05  2.51e-01  2.27e-01  
  4  +5.0051e-01  +1.1442e+00  6.44e-01  6.25e-03  9.71e-01  6.17e-06  1.12e-01  9.45e-01  
  5  +5.0005e-01  +5.7283e-01  7.28e-02  6.89e-04  1.08e-01  5.72e-06  2.17e-02  9.64e-01  
  6  +5.0004e-01  +5.8992e-01  8.99e-02  7.78e-04  1.22e-01  2.07e-05  5.84e-03  8.07e-01  
  7  +4.9935e-01  +5.8814e-01  8.88e-02  7.88e-05  1.25e-02  4.32e-04  2.47e-04  9.60e-01  
  8  +4.9851e-01  +5.8071e-01  8.22e-02  5.35e-05  8.45e-03  4.86e-04  1.67e-04  4.27e-01  
  9  +4.9507e-01  +5.5679e-01  6.17e-02  3.73e-05  5.89e-03  2.61e-04  1.21e-04  4.55e-01  
 10  +4.9132e-01  +5.3563e-01  4.43e-02  2.61e-05  4.12e-03  2.05e-05  8.97e-05  7.16e-01  
 11  +4.8861e-01  +5.2314e-01  3.45e-02  1.83e-05  2.89e-03  2.19e-07  6.54e-05  9.51e-01  
 12  +4.8205e-01  +4.9566e-01  1.36e-02  6.02e-06  9.50e-04  2.10e-07  2.33e-05  6.88e-01  
 13  +4.8085e-01  +4.9052e-01  9.67e-03  4.07e-06  6.42e-04  8.93e-07  1.59e-05  9.90e-01  
 14  +4.7772e-01  +4.7836e-01  6.35e-04  2.56e-07  4.03e-05  5.35e-08  1.05e-06  9.44e-01  
 15  +4.7750e-01  +4.7751e-01  8.90e-06  3.58e-09  5.64e-07  7.80e-10  1.48e-08  9.90e-01  
 16  +4.7750e-01  +4.7750e-01  8.90e-08  3.58e-11  5.64e-09  7.80e-12  1.48e-10  9.90e-01  
 17  +4.7750e-01  +4.7750e-01  8.91e-10  3.58e-13  5.64e-11  7.86e-14  1.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.7171ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:41 PM: Optimal value: 4.775e-01
(CVXPY) Aug 31 04:59:41 PM: Compilation took 1.699e-02 seconds
(CVXPY) Aug 31 04:59:41 PM: Solver (including time spent in interface) took 5.463e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4775
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:41 PM: Your problem has 2527 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:41 PM: Finished problem compilation (took 1.046e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2527
  constraints   = 5027
  nnz(P)        = 0
  nnz(A)        = 31202
  cones (total) = 1
    : Nonnegative = 1,  numel = 5027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5009e+03  2.50e+03  9.80e-01  8.00e+01  1.00e+00  1.00e+00   ------   
  1  +5.8399e-01  +5.3519e+02  5.35e+02  4.16e-01  5.10e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3449e-01  +6.3172e+01  6.26e+01  1.59e-01  2.48e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0895e-01  +1.6264e+01  1.58e+01  1.06e-01  1.62e+01  3.93e-05  2.51e-01  2.32e-01  
  4  +5.0050e-01  +1.1405e+00  6.40e-01  6.22e-03  9.92e-01  6.21e-06  1.11e-01  9.51e-01  
  5  +5.0010e-01  +6.3403e-01  1.34e-01  1.27e-03  2.05e-01  6.05e-06  3.27e-02  8.18e-01  
  6  +5.0010e-01  +6.5266e-01  1.53e-01  1.35e-03  2.17e-01  1.66e-05  1.05e-02  7.60e-01  
  7  +4.9970e-01  +6.4834e-01  1.49e-01  1.84e-04  2.99e-02  2.49e-04  5.88e-04  9.48e-01  
  8  +4.9912e-01  +6.3405e-01  1.35e-01  1.15e-04  1.87e-02  2.83e-04  3.64e-04  5.26e-01  
  9  +4.9779e-01  +6.2116e-01  1.23e-01  8.41e-05  1.36e-02  2.89e-04  2.67e-04  3.54e-01  
 10  +4.9495e-01  +5.9646e-01  1.02e-01  6.80e-05  1.10e-02  1.48e-04  2.23e-04  4.02e-01  
 11  +4.9168e-01  +5.7433e-01  8.27e-02  5.11e-05  8.29e-03  6.40e-05  1.72e-04  5.30e-01  
 12  +4.8865e-01  +5.5835e-01  6.97e-02  3.94e-05  6.39e-03  4.81e-05  1.36e-04  2.97e-01  
 13  +4.8719e-01  +5.4888e-01  6.17e-02  3.59e-05  5.81e-03  1.77e-05  1.26e-04  5.12e-01  
 14  +4.7790e-01  +5.0330e-01  2.54e-02  1.23e-05  1.98e-03  3.30e-06  4.62e-05  8.20e-01  
 15  +4.7329e-01  +4.8225e-01  8.96e-03  4.11e-06  6.65e-04  1.02e-06  1.66e-05  6.70e-01  
 16  +4.7146e-01  +4.7420e-01  2.74e-03  1.21e-06  1.95e-04  2.41e-07  5.21e-06  9.90e-01  
 17  +4.7062e-01  +4.7067e-01  5.19e-05  2.26e-08  3.66e-06  4.13e-09  1.01e-07  9.83e-01  
 18  +4.7060e-01  +4.7060e-01  5.20e-07  2.26e-10  3.66e-08  4.13e-11  1.01e-09  9.90e-01  
 19  +4.7060e-01  +4.7060e-01  5.20e-09  2.26e-12  3.66e-10  4.13e-13  1.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.0021ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:41 PM: Optimal value: 4.706e-01
(CVXPY) Aug 31 04:59:41 PM: Compilation took 1.046e-02 seconds
(CVXPY) Aug 31 04:59:41 PM: Solver (including time spent in interface) took 5.383e-02 seconds
Iteration: 2, Objective: 0.4706
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:41 PM: Your problem has 2537 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:41 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:41 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:41 PM: Finished problem compilation (took 1.332e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2537
  constraints   = 5037
  nnz(P)        = 0
  nnz(A)        = 33362
  cones (total) = 1
    : Nonnegative = 1,  numel = 5037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5009e+03  2.50e+03  9.80e-01  8.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.8388e-01  +5.3527e+02  5.35e+02  4.17e-01  5.13e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3438e-01  +6.3057e+01  6.25e+01  1.58e-01  2.48e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0891e-01  +1.6228e+01  1.57e+01  1.05e-01  1.62e+01  3.94e-05  2.50e-01  2.34e-01  
  4  +5.0050e-01  +1.1365e+00  6.36e-01  6.19e-03  9.94e-01  6.24e-06  1.09e-01  9.56e-01  
  5  +5.0019e-01  +7.4626e-01  2.46e-01  2.36e-03  3.80e-01  6.23e-06  5.16e-02  6.01e-01  
  6  +5.0010e-01  +6.4565e-01  1.46e-01  1.36e-03  2.20e-01  8.24e-06  1.49e-02  7.56e-01  
  7  +4.9996e-01  +6.5900e-01  1.59e-01  3.40e-04  5.56e-02  1.02e-04  1.09e-03  9.51e-01  
  8  +4.9937e-01  +6.4493e-01  1.46e-01  1.12e-04  1.83e-02  2.58e-04  3.44e-04  7.70e-01  
  9  +4.9611e-01  +6.0980e-01  1.14e-01  8.31e-05  1.36e-02  1.27e-04  2.62e-04  5.00e-01  
 10  +4.9313e-01  +5.8964e-01  9.65e-02  6.21e-05  1.01e-02  8.83e-05  1.99e-04  4.02e-01  
 11  +4.9188e-01  +5.8290e-01  9.10e-02  5.37e-05  8.77e-03  6.68e-05  1.72e-04  3.28e-01  
 12  +4.9083e-01  +5.7607e-01  8.52e-02  5.11e-05  8.35e-03  4.51e-05  1.64e-04  2.53e-01  
 13  +4.8501e-01  +5.4576e-01  6.08e-02  3.11e-05  5.08e-03  2.73e-05  1.02e-04  4.98e-01  
 14  +4.8312e-01  +5.3580e-01  5.27e-02  2.64e-05  4.30e-03  1.96e-05  8.64e-05  2.95e-01  
 15  +4.7418e-01  +4.9099e-01  1.68e-02  7.36e-06  1.20e-03  1.46e-06  2.45e-05  9.60e-01  
 16  +4.7082e-01  +4.7868e-01  7.86e-03  2.85e-06  4.65e-04  8.75e-07  9.52e-06  7.51e-01  
 17  +4.6858e-01  +4.7104e-01  2.46e-03  8.43e-07  1.38e-04  2.71e-07  2.87e-06  7.65e-01  
 18  +4.6762e-01  +4.6766e-01  4.49e-05  1.52e-08  2.48e-06  4.72e-09  5.25e-08  9.88e-01  
 19  +4.6760e-01  +4.6760e-01  4.49e-07  1.52e-10  2.48e-08  4.72e-11  5.25e-10  9.90e-01  
 20  +4.6760e-01  +4.6760e-01  4.50e-09  1.52e-12  2.48e-10  4.84e-13  5.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.7136ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:41 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:41 PM: Optimal value: 4.676e-01
(CVXPY) Aug 31 04:59:41 PM: Compilation took 1.332e-02 seconds
(CVXPY) Aug 31 04:59:41 PM: Solver (including time spent in interface) took 5.615e-02 seconds
Iteration: 3, Objective: 0.4676
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:42 PM: Your problem has 2547 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Finished problem compilation (took 1.453e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2547
  constraints   = 5047
  nnz(P)        = 0
  nnz(A)        = 35106
  cones (total) = 1
    : Nonnegative = 1,  numel = 5047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5009e+03  2.50e+03  9.80e-01  8.09e+01  1.00e+00  1.00e+00   ------   
  1  +5.8374e-01  +5.3551e+02  5.35e+02  4.17e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3424e-01  +6.2943e+01  6.24e+01  1.59e-01  2.49e+01  1.48e-02  2.65e-01  9.06e-01  
  3  +5.0888e-01  +1.6194e+01  1.57e+01  1.05e-01  1.63e+01  3.95e-05  2.50e-01  2.37e-01  
  4  +5.0054e-01  +1.2105e+00  7.10e-01  6.92e-03  1.11e+00  6.42e-06  1.15e-01  9.10e-01  
  5  +5.0017e-01  +7.4320e-01  2.43e-01  2.32e-03  3.77e-01  6.32e-06  5.08e-02  6.43e-01  
  6  +5.0009e-01  +6.7001e-01  1.70e-01  1.57e-03  2.55e-01  9.28e-06  1.57e-02  7.67e-01  
  7  +4.9933e-01  +6.4820e-01  1.49e-01  2.02e-04  3.31e-02  1.67e-04  6.22e-04  9.72e-01  
  8  +4.9712e-01  +6.3126e-01  1.34e-01  8.67e-05  1.43e-02  3.07e-04  2.63e-04  6.35e-01  
  9  +4.9411e-01  +6.1062e-01  1.17e-01  6.96e-05  1.14e-02  2.06e-04  2.13e-04  3.77e-01  
 10  +4.9208e-01  +5.9866e-01  1.07e-01  6.16e-05  1.01e-02  1.40e-04  1.90e-04  3.00e-01  
 11  +4.8756e-01  +5.7152e-01  8.40e-02  4.91e-05  8.04e-03  2.01e-06  1.55e-04  7.96e-01  
 12  +4.7987e-01  +5.3710e-01  5.72e-02  2.72e-05  4.46e-03  2.06e-06  8.81e-05  5.27e-01  
 13  +4.7471e-01  +5.1539e-01  4.07e-02  1.76e-05  2.88e-03  1.69e-06  5.82e-05  3.93e-01  
 14  +4.7464e-01  +5.1503e-01  4.04e-02  1.75e-05  2.86e-03  1.78e-06  5.77e-05  4.85e-02  
 15  +4.7376e-01  +5.1062e-01  3.69e-02  1.55e-05  2.54e-03  3.00e-06  5.13e-05  6.29e-01  
 16  +4.6537e-01  +4.7718e-01  1.18e-02  4.49e-06  7.35e-04  9.77e-07  1.55e-05  7.36e-01  
 17  +4.6275e-01  +4.6762e-01  4.87e-03  1.78e-06  2.91e-04  4.43e-07  6.30e-06  6.80e-01  
 18  +4.6096e-01  +4.6112e-01  1.57e-04  5.59e-08  9.17e-06  1.38e-08  2.03e-07  9.72e-01  
 19  +4.6090e-01  +4.6090e-01  1.57e-06  5.60e-10  9.18e-08  1.38e-10  2.04e-09  9.90e-01  
 20  +4.6090e-01  +4.6090e-01  1.57e-08  5.60e-12  9.18e-10  1.38e-12  2.04e-11  9.90e-01  
 21  +4.6090e-01  +4.6090e-01  1.57e-10  5.60e-14  9.18e-12  1.40e-14  2.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.1924ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:42 PM: Optimal value: 4.609e-01
(CVXPY) Aug 31 04:59:42 PM: Compilation took 1.453e-02 seconds
(CVXPY) Aug 31 04:59:42 PM: Solver (including time spent in interface) took 6.284e-02 seconds
Iteration: 4, Objective: 0.4609
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:42 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Finished problem compilation (took 1.200e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 37017
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.14e+01  1.00e+00  1.00e+00   ------   
  1  +5.8363e-01  +5.3556e+02  5.35e+02  4.18e-01  5.17e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3412e-01  +6.2818e+01  6.23e+01  1.58e-01  2.49e+01  1.49e-02  2.65e-01  9.08e-01  
  3  +5.0885e-01  +1.6158e+01  1.56e+01  1.05e-01  1.63e+01  3.96e-05  2.50e-01  2.40e-01  
  4  +5.0056e-01  +1.2374e+00  7.37e-01  7.19e-03  1.16e+00  6.51e-06  1.17e-01  8.96e-01  
  5  +5.0017e-01  +7.6230e-01  2.62e-01  2.51e-03  4.09e-01  6.51e-06  5.17e-02  6.35e-01  
  6  +5.0010e-01  +7.0472e-01  2.05e-01  1.86e-03  3.03e-01  1.16e-05  1.53e-02  7.78e-01  
  7  +4.9908e-01  +6.9826e-01  1.99e-01  2.63e-04  4.34e-02  1.77e-04  8.17e-04  9.62e-01  
  8  +4.9632e-01  +6.6245e-01  1.66e-01  1.23e-04  2.03e-02  2.50e-04  3.78e-04  6.11e-01  
  9  +4.9349e-01  +6.3868e-01  1.45e-01  8.93e-05  1.47e-02  1.99e-04  2.72e-04  4.36e-01  
 10  +4.9063e-01  +6.1822e-01  1.28e-01  6.89e-05  1.14e-02  1.28e-04  2.11e-04  4.55e-01  
 11  +4.8957e-01  +6.1192e-01  1.22e-01  6.85e-05  1.13e-02  1.15e-04  2.11e-04  2.47e-02  
 12  +4.8007e-01  +5.6315e-01  8.31e-02  3.78e-05  6.23e-03  5.41e-05  1.20e-04  6.30e-01  
 13  +4.7980e-01  +5.6142e-01  8.16e-02  3.74e-05  6.16e-03  4.85e-05  1.19e-04  8.07e-02  
 14  +4.7276e-01  +5.2814e-01  5.54e-02  2.41e-05  3.96e-03  2.89e-05  7.89e-05  3.89e-01  
 15  +4.6331e-01  +4.8437e-01  2.11e-02  8.39e-06  1.38e-03  3.94e-06  2.87e-05  8.79e-01  
 16  +4.5752e-01  +4.6239e-01  4.87e-03  1.80e-06  2.97e-04  5.69e-07  6.57e-06  9.90e-01  
 17  +4.5574e-01  +4.5583e-01  9.46e-05  3.46e-08  5.70e-06  1.05e-08  1.29e-07  9.82e-01  
 18  +4.5570e-01  +4.5570e-01  9.47e-07  3.46e-10  5.71e-08  1.05e-10  1.29e-09  9.90e-01  
 19  +4.5570e-01  +4.5570e-01  9.47e-09  3.46e-12  5.71e-10  1.06e-12  1.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.8768ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:42 PM: Optimal value: 4.557e-01
(CVXPY) Aug 31 04:59:42 PM: Compilation took 1.200e-02 seconds
(CVXPY) Aug 31 04:59:42 PM: Solver (including time spent in interface) took 5.440e-02 seconds
Iteration: 5, Objective: 0.4557
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:42 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 38005
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.14e+01  1.00e+00  1.00e+00   ------   
  1  +5.8360e-01  +5.3551e+02  5.35e+02  4.18e-01  5.17e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3406e-01  +6.2751e+01  6.22e+01  1.58e-01  2.48e+01  1.49e-02  2.64e-01  9.08e-01  
  3  +5.0882e-01  +1.6125e+01  1.56e+01  1.05e-01  1.62e+01  3.96e-05  2.49e-01  2.42e-01  
  4  +5.0057e-01  +1.2638e+00  7.63e-01  7.46e-03  1.21e+00  6.62e-06  1.18e-01  8.83e-01  
  5  +5.0021e-01  +8.1974e-01  3.20e-01  3.07e-03  4.99e-01  6.90e-06  5.78e-02  5.91e-01  
  6  +5.0008e-01  +7.2705e-01  2.27e-01  1.94e-03  3.16e-01  1.49e-05  1.21e-02  8.92e-01  
  7  +4.9867e-01  +7.1901e-01  2.20e-01  2.59e-04  4.28e-02  1.95e-04  7.95e-04  9.40e-01  
  8  +4.9644e-01  +6.9470e-01  1.98e-01  1.61e-04  2.66e-02  2.37e-04  4.92e-04  4.35e-01  
  9  +4.9516e-01  +6.6502e-01  1.70e-01  1.29e-04  2.12e-02  5.57e-05  3.94e-04  7.49e-01  
 10  +4.9418e-01  +6.5594e-01  1.62e-01  1.21e-04  1.99e-02  4.27e-05  3.70e-04  2.54e-01  
 11  +4.8827e-01  +6.2093e-01  1.33e-01  7.65e-05  1.26e-02  3.82e-05  2.38e-04  4.52e-01  
 12  +4.8621e-01  +6.1005e-01  1.24e-01  6.82e-05  1.12e-02  2.91e-05  2.13e-04  2.94e-01  
 13  +4.8346e-01  +5.9601e-01  1.13e-01  6.42e-05  1.06e-02  1.79e-05  2.06e-04  3.18e-01  
 14  +4.7553e-01  +5.5661e-01  8.11e-02  4.08e-05  6.72e-03  1.19e-05  1.34e-04  4.49e-01  
 15  +4.7429e-01  +5.5094e-01  7.66e-02  3.74e-05  6.16e-03  9.72e-06  1.23e-04  3.46e-01  
 16  +4.6154e-01  +4.9280e-01  3.13e-02  1.36e-05  2.24e-03  3.11e-06  4.68e-05  7.60e-01  
 17  +4.5550e-01  +4.6541e-01  9.91e-03  4.10e-06  6.74e-04  1.04e-06  1.45e-05  9.90e-01  
 18  +4.5412e-01  +4.5963e-01  5.51e-03  2.24e-06  3.68e-04  6.22e-07  8.02e-06  9.90e-01  
 19  +4.5257e-01  +4.5346e-01  8.90e-04  3.59e-07  5.90e-05  1.02e-07  1.30e-06  8.49e-01  
 20  +4.5226e-01  +4.5228e-01  2.54e-05  1.02e-08  1.67e-06  2.87e-09  3.70e-08  9.76e-01  
 21  +4.5225e-01  +4.5225e-01  2.54e-07  1.02e-10  1.67e-08  2.87e-11  3.71e-10  9.90e-01  
 22  +4.5225e-01  +4.5225e-01  2.54e-09  1.02e-12  1.67e-10  2.90e-13  3.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 64.6144ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:42 PM: Optimal value: 4.523e-01
(CVXPY) Aug 31 04:59:42 PM: Compilation took 1.501e-02 seconds
(CVXPY) Aug 31 04:59:42 PM: Solver (including time spent in interface) took 6.900e-02 seconds
Iteration: 6, Objective: 0.4523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:42 PM: Your problem has 2577 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Finished problem compilation (took 1.400e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2577
  constraints   = 5077
  nnz(P)        = 0
  nnz(A)        = 39069
  cones (total) = 1
    : Nonnegative = 1,  numel = 5077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8349e-01  +5.3555e+02  5.35e+02  4.18e-01  5.17e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3398e-01  +6.2660e+01  6.21e+01  1.58e-01  2.48e+01  1.49e-02  2.64e-01  9.09e-01  
  3  +5.0881e-01  +1.6103e+01  1.56e+01  1.05e-01  1.62e+01  3.96e-05  2.49e-01  2.43e-01  
  4  +5.0058e-01  +1.2847e+00  7.84e-01  7.67e-03  1.24e+00  6.68e-06  1.19e-01  8.72e-01  
  5  +5.0018e-01  +7.9925e-01  2.99e-01  2.87e-03  4.67e-01  7.11e-06  5.31e-02  6.46e-01  
  6  +5.0008e-01  +7.7627e-01  2.76e-01  2.27e-03  3.70e-01  1.86e-05  1.27e-02  8.64e-01  
  7  +4.9831e-01  +7.4732e-01  2.49e-01  2.77e-04  4.58e-02  2.17e-04  8.48e-04  9.36e-01  
  8  +4.9625e-01  +7.1920e-01  2.23e-01  1.93e-04  3.19e-02  2.27e-04  5.89e-04  3.72e-01  
  9  +4.9489e-01  +6.9359e-01  1.99e-01  1.47e-04  2.44e-02  1.50e-04  4.51e-04  5.06e-01  
 10  +4.9256e-01  +6.5424e-01  1.62e-01  1.12e-04  1.86e-02  2.73e-05  3.45e-04  7.95e-01  
 11  +4.9013e-01  +6.4078e-01  1.51e-01  9.60e-05  1.59e-02  2.39e-05  2.97e-04  2.69e-01  
 12  +4.8634e-01  +6.1916e-01  1.33e-01  8.18e-05  1.35e-02  1.41e-05  2.58e-04  5.02e-01  
 13  +4.7376e-01  +5.5553e-01  8.18e-02  4.04e-05  6.66e-03  9.06e-06  1.33e-04  5.31e-01  
 14  +4.6531e-01  +5.1686e-01  5.15e-02  2.35e-05  3.87e-03  5.37e-06  7.97e-05  4.86e-01  
 15  +4.6448e-01  +5.1312e-01  4.86e-02  2.18e-05  3.59e-03  5.05e-06  7.42e-05  1.70e-01  
 16  +4.5747e-01  +4.8169e-01  2.42e-02  1.01e-05  1.66e-03  2.43e-06  3.52e-05  9.33e-01  
 17  +4.5410e-01  +4.6717e-01  1.31e-02  5.40e-06  8.88e-04  1.33e-06  1.91e-05  5.81e-01  
 18  +4.5405e-01  +4.6699e-01  1.29e-02  5.30e-06  8.71e-04  1.34e-06  1.87e-05  1.32e-01  
 19  +4.5254e-01  +4.6022e-01  7.68e-03  3.12e-06  5.13e-04  8.62e-07  1.11e-05  9.90e-01  
 20  +4.5089e-01  +4.5360e-01  2.71e-03  1.10e-06  1.80e-04  3.04e-07  3.95e-06  6.88e-01  
 21  +4.5075e-01  +4.5309e-01  2.33e-03  9.42e-07  1.55e-04  2.60e-07  3.40e-06  6.21e-01  
 22  +4.5022e-01  +4.5096e-01  7.37e-04  2.97e-07  4.88e-05  8.22e-08  1.08e-06  7.45e-01  
 23  +4.5012e-01  +4.5060e-01  4.76e-04  1.84e-07  3.03e-05  5.37e-08  6.74e-07  8.20e-01  
 24  +4.4996e-01  +4.4997e-01  1.73e-05  6.63e-09  1.09e-06  2.02e-09  2.44e-08  9.65e-01  
 25  +4.4995e-01  +4.4995e-01  1.76e-07  6.72e-11  1.11e-08  2.05e-11  2.48e-10  9.90e-01  
 26  +4.4995e-01  +4.4995e-01  1.76e-09  6.72e-13  1.11e-10  2.05e-13  2.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.2177ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:42 PM: Optimal value: 4.500e-01
(CVXPY) Aug 31 04:59:42 PM: Compilation took 1.400e-02 seconds
(CVXPY) Aug 31 04:59:42 PM: Solver (including time spent in interface) took 7.100e-02 seconds
Iteration: 7, Objective: 0.4500
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:42 PM: Your problem has 2587 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Finished problem compilation (took 1.202e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2587
  constraints   = 5087
  nnz(P)        = 0
  nnz(A)        = 39855
  cones (total) = 1
    : Nonnegative = 1,  numel = 5087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8345e-01  +5.3548e+02  5.35e+02  4.18e-01  5.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3396e-01  +6.2638e+01  6.21e+01  1.58e-01  2.47e+01  1.49e-02  2.64e-01  9.10e-01  
  3  +5.0880e-01  +1.6090e+01  1.56e+01  1.05e-01  1.62e+01  3.96e-05  2.49e-01  2.44e-01  
  4  +5.0057e-01  +1.2653e+00  7.65e-01  7.49e-03  1.21e+00  6.66e-06  1.17e-01  8.84e-01  
  5  +5.0022e-01  +8.3919e-01  3.39e-01  3.26e-03  5.31e-01  7.30e-06  5.71e-02  6.01e-01  
  6  +5.0009e-01  +7.7484e-01  2.75e-01  2.26e-03  3.69e-01  1.77e-05  1.26e-02  8.81e-01  
  7  +4.9854e-01  +7.5576e-01  2.57e-01  2.89e-04  4.79e-02  2.07e-04  8.82e-04  9.35e-01  
  8  +4.9612e-01  +7.2158e-01  2.25e-01  1.80e-04  2.98e-02  2.29e-04  5.48e-04  4.66e-01  
  9  +4.9358e-01  +6.9818e-01  2.05e-01  1.34e-04  2.23e-02  2.09e-04  4.10e-04  3.66e-01  
 10  +4.8951e-01  +6.5513e-01  1.66e-01  1.03e-04  1.70e-02  8.23e-05  3.18e-04  5.70e-01  
 11  +4.8454e-01  +6.1820e-01  1.34e-01  8.07e-05  1.33e-02  1.15e-05  2.56e-04  7.70e-01  
 12  +4.7825e-01  +5.8705e-01  1.09e-01  5.88e-05  9.70e-03  9.42e-06  1.91e-04  3.24e-01  
 13  +4.6612e-01  +5.2835e-01  6.22e-02  2.90e-05  4.77e-03  4.84e-06  9.80e-05  7.91e-01  
 14  +4.6265e-01  +5.1298e-01  5.03e-02  2.20e-05  3.62e-03  4.41e-06  7.51e-05  5.98e-01  
 15  +4.5637e-01  +4.8581e-01  2.94e-02  1.21e-05  2.00e-03  2.90e-06  4.28e-05  8.33e-01  
 16  +4.5120e-01  +4.6488e-01  1.37e-02  5.45e-06  8.97e-04  1.35e-06  1.99e-05  6.11e-01  
 17  +4.4727e-01  +4.4966e-01  2.40e-03  9.17e-07  1.51e-04  2.35e-07  3.51e-06  8.42e-01  
 18  +4.4642e-01  +4.4648e-01  6.10e-05  2.31e-08  3.81e-06  6.31e-09  8.98e-08  9.89e-01  
 19  +4.4640e-01  +4.4640e-01  6.11e-07  2.32e-10  3.82e-08  6.32e-11  8.99e-10  9.90e-01  
 20  +4.4640e-01  +4.4640e-01  6.11e-09  2.32e-12  3.82e-10  6.37e-13  9.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.9577ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:42 PM: Optimal value: 4.464e-01
(CVXPY) Aug 31 04:59:42 PM: Compilation took 1.202e-02 seconds
(CVXPY) Aug 31 04:59:42 PM: Solver (including time spent in interface) took 6.102e-02 seconds
Iteration: 8, Objective: 0.4464
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:42 PM: Your problem has 2597 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:42 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:42 PM: Finished problem compilation (took 1.401e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2597
  constraints   = 5097
  nnz(P)        = 0
  nnz(A)        = 40708
  cones (total) = 1
    : Nonnegative = 1,  numel = 5097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.16e+01  1.00e+00  1.00e+00   ------   
  1  +5.8343e-01  +5.3537e+02  5.35e+02  4.18e-01  5.16e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3393e-01  +6.2590e+01  6.21e+01  1.58e-01  2.46e+01  1.49e-02  2.63e-01  9.10e-01  
  3  +5.0878e-01  +1.6071e+01  1.56e+01  1.05e-01  1.61e+01  3.96e-05  2.48e-01  2.45e-01  
  4  +5.0057e-01  +1.2736e+00  7.73e-01  7.57e-03  1.22e+00  6.70e-06  1.17e-01  8.80e-01  
  5  +5.0021e-01  +8.2644e-01  3.26e-01  3.14e-03  5.11e-01  7.21e-06  5.49e-02  6.17e-01  
  6  +5.0012e-01  +7.9468e-01  2.95e-01  2.59e-03  4.24e-01  1.49e-05  1.73e-02  7.58e-01  
  7  +4.9854e-01  +7.5765e-01  2.59e-01  3.05e-04  5.06e-02  1.99e-04  9.27e-04  9.68e-01  
  8  +4.9467e-01  +7.1504e-01  2.20e-01  1.43e-04  2.37e-02  2.98e-04  4.31e-04  5.87e-01  
  9  +4.9185e-01  +6.8826e-01  1.96e-01  1.13e-04  1.88e-02  2.04e-04  3.44e-04  4.24e-01  
 10  +4.8472e-01  +6.3621e-01  1.51e-01  8.39e-05  1.39e-02  8.75e-05  2.62e-04  4.92e-01  
 11  +4.7667e-01  +5.8910e-01  1.12e-01  5.88e-05  9.70e-03  2.68e-05  1.90e-04  6.26e-01  
 12  +4.6616e-01  +5.3611e-01  6.99e-02  3.28e-05  5.40e-03  2.84e-06  1.10e-04  9.90e-01  
 13  +4.5757e-01  +4.9873e-01  4.12e-02  1.80e-05  2.96e-03  2.12e-06  6.24e-05  5.53e-01  
 14  +4.5337e-01  +4.8088e-01  2.75e-02  1.16e-05  1.92e-03  1.62e-06  4.10e-05  4.38e-01  
 15  +4.4936e-01  +4.6342e-01  1.41e-02  5.73e-06  9.44e-04  1.51e-06  2.05e-05  9.90e-01  
 16  +4.4642e-01  +4.5177e-01  5.35e-03  2.17e-06  3.57e-04  5.73e-07  7.90e-06  6.58e-01  
 17  +4.4498e-01  +4.4606e-01  1.07e-03  4.35e-07  7.16e-05  1.18e-07  1.60e-06  9.90e-01  
 18  +4.4461e-01  +4.4465e-01  3.68e-05  1.49e-08  2.45e-06  4.02e-09  5.50e-08  9.67e-01  
 19  +4.4460e-01  +4.4460e-01  3.71e-07  1.50e-10  2.47e-08  4.04e-11  5.54e-10  9.90e-01  
 20  +4.4460e-01  +4.4460e-01  3.72e-09  1.51e-12  2.48e-10  4.05e-13  5.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.9333ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:42 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:42 PM: Optimal value: 4.446e-01
(CVXPY) Aug 31 04:59:42 PM: Compilation took 1.401e-02 seconds
(CVXPY) Aug 31 04:59:42 PM: Solver (including time spent in interface) took 6.500e-02 seconds
Iteration: 9, Objective: 0.4446
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:43 PM: Your problem has 2607 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Finished problem compilation (took 1.601e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2607
  constraints   = 5107
  nnz(P)        = 0
  nnz(A)        = 41158
  cones (total) = 1
    : Nonnegative = 1,  numel = 5107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8329e-01  +5.3541e+02  5.35e+02  4.19e-01  5.15e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3386e-01  +6.2535e+01  6.20e+01  1.58e-01  2.45e+01  1.49e-02  2.63e-01  9.11e-01  
  3  +5.0877e-01  +1.6058e+01  1.55e+01  1.05e-01  1.61e+01  3.97e-05  2.48e-01  2.47e-01  
  4  +5.0059e-01  +1.3040e+00  8.03e-01  7.88e-03  1.27e+00  6.79e-06  1.19e-01  8.64e-01  
  5  +5.0020e-01  +8.3477e-01  3.35e-01  3.22e-03  5.24e-01  7.27e-06  5.52e-02  6.17e-01  
  6  +5.0004e-01  +7.9102e-01  2.91e-01  2.22e-03  3.62e-01  2.24e-05  1.07e-02  8.81e-01  
  7  +4.9758e-01  +7.7160e-01  2.74e-01  2.54e-04  4.20e-02  2.67e-04  7.62e-04  9.31e-01  
  8  +4.9156e-01  +7.1326e-01  2.22e-01  1.21e-04  2.01e-02  3.42e-04  3.67e-04  5.82e-01  
  9  +4.8645e-01  +6.7043e-01  1.84e-01  1.01e-04  1.68e-02  1.90e-04  3.14e-04  3.28e-01  
 10  +4.8032e-01  +6.3099e-01  1.51e-01  8.08e-05  1.33e-02  1.04e-04  2.57e-04  3.77e-01  
 11  +4.6224e-01  +5.3476e-01  7.25e-02  3.31e-05  5.45e-03  3.81e-05  1.13e-04  6.24e-01  
 12  +4.5809e-01  +5.1501e-01  5.69e-02  2.53e-05  4.17e-03  2.72e-05  8.74e-05  2.99e-01  
 13  +4.5232e-01  +4.8835e-01  3.60e-02  1.55e-05  2.55e-03  1.57e-05  5.47e-05  4.37e-01  
 14  +4.4871e-01  +4.7014e-01  2.14e-02  8.85e-06  1.46e-03  2.61e-06  3.17e-05  9.90e-01  
 15  +4.4514e-01  +4.5571e-01  1.06e-02  4.32e-06  7.11e-04  1.27e-06  1.58e-05  5.76e-01  
 16  +4.4236e-01  +4.4452e-01  2.15e-03  8.72e-07  1.43e-04  2.38e-07  3.25e-06  9.73e-01  
 17  +4.4163e-01  +4.4172e-01  8.70e-05  3.52e-08  5.79e-06  9.45e-09  1.32e-07  9.70e-01  
 18  +4.4160e-01  +4.4160e-01  8.83e-07  3.57e-10  5.87e-08  9.59e-11  1.34e-09  9.90e-01  
 19  +4.4160e-01  +4.4160e-01  8.83e-09  3.57e-12  5.87e-10  9.59e-13  1.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.8645ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:43 PM: Optimal value: 4.416e-01
(CVXPY) Aug 31 04:59:43 PM: Compilation took 1.601e-02 seconds
(CVXPY) Aug 31 04:59:43 PM: Solver (including time spent in interface) took 5.797e-02 seconds
Iteration: 10, Objective: 0.4416
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:43 PM: Your problem has 2617 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Finished problem compilation (took 1.400e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2617
  constraints   = 5117
  nnz(P)        = 0
  nnz(A)        = 41911
  cones (total) = 1
    : Nonnegative = 1,  numel = 5117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8323e-01  +5.3531e+02  5.35e+02  4.19e-01  5.15e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3380e-01  +6.2444e+01  6.19e+01  1.58e-01  2.44e+01  1.49e-02  2.63e-01  9.11e-01  
  3  +5.0875e-01  +1.6030e+01  1.55e+01  1.05e-01  1.61e+01  3.97e-05  2.47e-01  2.48e-01  
  4  +5.0062e-01  +1.3608e+00  8.60e-01  8.44e-03  1.36e+00  6.95e-06  1.23e-01  8.36e-01  
  5  +5.0022e-01  +8.7819e-01  3.78e-01  3.64e-03  5.92e-01  7.32e-06  6.13e-02  5.81e-01  
  6  +5.0004e-01  +8.3478e-01  3.35e-01  2.56e-03  4.19e-01  2.08e-05  1.25e-02  9.22e-01  
  7  +4.9727e-01  +8.0194e-01  3.05e-01  2.82e-04  4.67e-02  2.44e-04  8.49e-04  9.34e-01  
  8  +4.9106e-01  +7.2785e-01  2.37e-01  1.41e-04  2.33e-02  2.66e-04  4.27e-04  5.74e-01  
  9  +4.8826e-01  +7.0597e-01  2.18e-01  1.20e-04  1.98e-02  2.19e-04  3.66e-04  2.53e-01  
 10  +4.8137e-01  +6.5290e-01  1.72e-01  9.25e-05  1.53e-02  1.05e-04  2.91e-04  4.23e-01  
 11  +4.6089e-01  +5.3333e-01  7.24e-02  3.41e-05  5.61e-03  1.62e-05  1.16e-04  7.57e-01  
 12  +4.5756e-01  +5.1780e-01  6.02e-02  2.75e-05  4.53e-03  1.25e-05  9.53e-05  2.76e-01  
 13  +4.5177e-01  +4.9096e-01  3.92e-02  1.73e-05  2.84e-03  7.48e-06  6.12e-05  4.45e-01  
 14  +4.5062e-01  +4.8557e-01  3.49e-02  1.52e-05  2.49e-03  6.28e-06  5.40e-05  2.37e-01  
 15  +4.4489e-01  +4.5981e-01  1.49e-02  6.27e-06  1.03e-03  2.18e-06  2.30e-05  7.58e-01  
 16  +4.4147e-01  +4.4527e-01  3.79e-03  1.57e-06  2.57e-04  5.34e-07  5.88e-06  7.86e-01  
 17  +4.4117e-01  +4.4403e-01  2.85e-03  1.17e-06  1.92e-04  3.93e-07  4.40e-06  3.24e-01  
 18  +4.4060e-01  +4.4165e-01  1.05e-03  4.23e-07  6.95e-05  1.11e-07  1.62e-06  9.90e-01  
 19  +4.4023e-01  +4.4030e-01  6.86e-05  2.66e-08  4.38e-06  7.35e-09  1.05e-07  9.66e-01  
 20  +4.4020e-01  +4.4020e-01  7.22e-07  2.79e-10  4.59e-08  7.73e-11  1.11e-09  9.90e-01  
 21  +4.4020e-01  +4.4020e-01  7.22e-09  2.79e-12  4.59e-10  7.74e-13  1.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.9729ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:43 PM: Optimal value: 4.402e-01
(CVXPY) Aug 31 04:59:43 PM: Compilation took 1.400e-02 seconds
(CVXPY) Aug 31 04:59:43 PM: Solver (including time spent in interface) took 6.462e-02 seconds
Iteration: 11, Objective: 0.4402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:43 PM: Your problem has 2624 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Finished problem compilation (took 1.399e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2624
  constraints   = 5124
  nnz(P)        = 0
  nnz(A)        = 42449
  cones (total) = 1
    : Nonnegative = 1,  numel = 5124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8315e-01  +5.3531e+02  5.35e+02  4.19e-01  5.14e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3375e-01  +6.2385e+01  6.19e+01  1.58e-01  2.44e+01  1.49e-02  2.62e-01  9.12e-01  
  3  +5.0874e-01  +1.6018e+01  1.55e+01  1.04e-01  1.60e+01  3.97e-05  2.47e-01  2.49e-01  
  4  +5.0063e-01  +1.3820e+00  8.81e-01  8.65e-03  1.40e+00  7.00e-06  1.24e-01  8.26e-01  
  5  +5.0021e-01  +8.7009e-01  3.70e-01  3.56e-03  5.80e-01  7.25e-06  6.05e-02  5.92e-01  
  6  +5.0002e-01  +8.5986e-01  3.60e-01  2.61e-03  4.27e-01  2.31e-05  1.18e-02  9.50e-01  
  7  +4.9689e-01  +8.1711e-01  3.20e-01  2.75e-04  4.56e-02  2.58e-04  8.24e-04  9.32e-01  
  8  +4.8942e-01  +7.2377e-01  2.34e-01  1.28e-04  2.12e-02  2.59e-04  3.87e-04  6.28e-01  
  9  +4.8597e-01  +6.8847e-01  2.03e-01  1.16e-04  1.92e-02  1.58e-04  3.60e-04  2.29e-01  
 10  +4.7438e-01  +6.1606e-01  1.42e-01  7.18e-05  1.18e-02  8.08e-05  2.32e-04  5.00e-01  
 11  +4.5592e-01  +5.1551e-01  5.96e-02  2.74e-05  4.50e-03  2.05e-05  9.56e-05  6.70e-01  
 12  +4.5429e-01  +5.0759e-01  5.33e-02  2.41e-05  3.97e-03  1.70e-05  8.47e-05  1.98e-01  
 13  +4.4973e-01  +4.8630e-01  3.66e-02  1.60e-05  2.63e-03  1.05e-05  5.75e-05  4.16e-01  
 14  +4.4441e-01  +4.6174e-01  1.73e-02  7.35e-06  1.21e-03  4.19e-06  2.73e-05  6.34e-01  
 15  +4.4086e-01  +4.4662e-01  5.75e-03  2.32e-06  3.82e-04  1.09e-06  9.00e-06  8.04e-01  
 16  +4.4011e-01  +4.4343e-01  3.32e-03  1.33e-06  2.18e-04  3.88e-07  5.22e-06  9.13e-01  
 17  +4.3898e-01  +4.3920e-01  2.21e-04  8.71e-08  1.43e-05  2.28e-08  3.51e-07  9.90e-01  
 18  +4.3890e-01  +4.3890e-01  2.23e-06  8.76e-10  1.44e-07  2.29e-10  3.54e-09  9.90e-01  
 19  +4.3890e-01  +4.3890e-01  2.23e-08  8.76e-12  1.44e-09  2.29e-12  3.54e-11  9.90e-01  
 20  +4.3890e-01  +4.3890e-01  2.23e-10  8.76e-14  1.44e-11  2.33e-14  3.59e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 58.3651ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:43 PM: Optimal value: 4.389e-01
(CVXPY) Aug 31 04:59:43 PM: Compilation took 1.399e-02 seconds
(CVXPY) Aug 31 04:59:43 PM: Solver (including time spent in interface) took 6.433e-02 seconds
Iteration: 12, Objective: 0.4389
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:43 PM: Your problem has 2634 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Finished problem compilation (took 1.492e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2634
  constraints   = 5134
  nnz(P)        = 0
  nnz(A)        = 43176
  cones (total) = 1
    : Nonnegative = 1,  numel = 5134

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5012e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8307e-01  +5.3532e+02  5.35e+02  4.19e-01  5.14e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3369e-01  +6.2327e+01  6.18e+01  1.57e-01  2.43e+01  1.49e-02  2.62e-01  9.13e-01  
  3  +5.0873e-01  +1.6000e+01  1.55e+01  1.04e-01  1.60e+01  3.97e-05  2.46e-01  2.50e-01  
  4  +5.0061e-01  +1.3487e+00  8.48e-01  8.34e-03  1.34e+00  6.94e-06  1.21e-01  8.43e-01  
  5  +5.0025e-01  +9.0512e-01  4.05e-01  3.91e-03  6.36e-01  7.54e-06  6.27e-02  5.65e-01  
  6  +5.0007e-01  +8.5251e-01  3.52e-01  2.69e-03  4.40e-01  2.03e-05  1.29e-02  9.41e-01  
  7  +4.9761e-01  +8.1872e-01  3.21e-01  3.08e-04  5.11e-02  2.26e-04  9.21e-04  9.32e-01  
  8  +4.9108e-01  +7.3976e-01  2.49e-01  1.39e-04  2.31e-02  2.80e-04  4.18e-04  6.19e-01  
  9  +4.8782e-01  +7.1335e-01  2.26e-01  1.20e-04  1.99e-02  2.15e-04  3.66e-04  2.47e-01  
 10  +4.7796e-01  +6.3671e-01  1.59e-01  8.59e-05  1.42e-02  6.03e-05  2.74e-04  5.36e-01  
 11  +4.6829e-01  +5.8335e-01  1.15e-01  5.76e-05  9.49e-03  3.66e-05  1.91e-04  3.89e-01  
 12  +4.5436e-01  +5.1286e-01  5.85e-02  2.65e-05  4.35e-03  1.38e-05  9.34e-05  6.20e-01  
 13  +4.4823e-01  +4.8411e-01  3.59e-02  1.54e-05  2.53e-03  5.81e-06  5.62e-05  7.01e-01  
 14  +4.3974e-01  +4.4752e-01  7.78e-03  3.19e-06  5.24e-04  8.26e-07  1.24e-05  9.59e-01  
 15  +4.3892e-01  +4.4438e-01  5.46e-03  2.21e-06  3.64e-04  5.78e-07  8.70e-06  3.55e-01  
 16  +4.3774e-01  +4.3975e-01  2.01e-03  8.01e-07  1.32e-04  2.05e-07  3.22e-06  9.90e-01  
 17  +4.3702e-01  +4.3708e-01  5.90e-05  2.34e-08  3.84e-06  5.96e-09  9.53e-08  9.72e-01  
 18  +4.3700e-01  +4.3700e-01  5.90e-07  2.34e-10  3.84e-08  5.97e-11  9.53e-10  9.90e-01  
 19  +4.3700e-01  +4.3700e-01  5.90e-09  2.34e-12  3.85e-10  6.02e-13  9.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.6266ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:43 PM: Optimal value: 4.370e-01
(CVXPY) Aug 31 04:59:43 PM: Compilation took 1.492e-02 seconds
(CVXPY) Aug 31 04:59:43 PM: Solver (including time spent in interface) took 6.100e-02 seconds
Iteration: 13, Objective: 0.4370
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:43 PM: Your problem has 2644 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Finished problem compilation (took 1.807e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2644
  constraints   = 5144
  nnz(P)        = 0
  nnz(A)        = 43662
  cones (total) = 1
    : Nonnegative = 1,  numel = 5144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8285e-01  +5.3550e+02  5.35e+02  4.20e-01  5.13e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3358e-01  +6.2247e+01  6.17e+01  1.57e-01  2.42e+01  1.49e-02  2.62e-01  9.14e-01  
  3  +5.0871e-01  +1.5985e+01  1.55e+01  1.04e-01  1.60e+01  3.99e-05  2.46e-01  2.53e-01  
  4  +5.0053e-01  +1.1945e+00  6.94e-01  6.83e-03  1.10e+00  6.60e-06  1.07e-01  9.32e-01  
  5  +5.0030e-01  +9.2883e-01  4.29e-01  4.16e-03  6.76e-01  8.71e-06  5.56e-02  5.70e-01  
  6  +5.0015e-01  +8.6403e-01  3.64e-01  2.29e-03  3.75e-01  3.08e-05  8.85e-03  9.43e-01  
  7  +4.9915e-01  +8.5279e-01  3.54e-01  4.11e-04  6.82e-02  1.99e-04  1.22e-03  8.65e-01  
  8  +4.9534e-01  +7.8807e-01  2.93e-01  1.58e-04  2.61e-02  3.46e-04  4.63e-04  7.09e-01  
  9  +4.9096e-01  +7.4846e-01  2.57e-01  1.39e-04  2.30e-02  2.53e-04  4.15e-04  2.00e-01  
 10  +4.8004e-01  +6.5790e-01  1.78e-01  1.01e-04  1.67e-02  6.53e-05  3.20e-04  4.99e-01  
 11  +4.7000e-01  +6.0000e-01  1.30e-01  6.79e-05  1.12e-02  4.16e-05  2.23e-04  3.68e-01  
 12  +4.5844e-01  +5.3837e-01  7.99e-02  3.84e-05  6.31e-03  2.08e-05  1.32e-04  5.05e-01  
 13  +4.5446e-01  +5.1932e-01  6.49e-02  2.99e-05  4.92e-03  1.57e-05  1.04e-04  2.95e-01  
 14  +4.4774e-01  +4.8667e-01  3.89e-02  1.71e-05  2.81e-03  6.84e-06  6.13e-05  6.55e-01  
 15  +4.4143e-01  +4.5813e-01  1.67e-02  7.10e-06  1.17e-03  2.63e-06  2.65e-05  6.53e-01  
 16  +4.3997e-01  +4.5148e-01  1.15e-02  4.81e-06  7.90e-04  1.58e-06  1.82e-05  5.80e-01  
 17  +4.3873e-01  +4.4624e-01  7.50e-03  3.09e-06  5.08e-04  9.48e-07  1.19e-05  5.64e-01  
 18  +4.3722e-01  +4.4005e-01  2.83e-03  1.14e-06  1.88e-04  2.93e-07  4.52e-06  9.90e-01  
 19  +4.3625e-01  +4.3638e-01  1.31e-04  5.21e-08  8.55e-06  1.32e-08  2.12e-07  9.61e-01  
 20  +4.3620e-01  +4.3620e-01  1.33e-06  5.27e-10  8.66e-08  1.34e-10  2.15e-09  9.90e-01  
 21  +4.3620e-01  +4.3620e-01  1.33e-08  5.27e-12  8.66e-10  1.34e-12  2.15e-11  9.90e-01  
 22  +4.3620e-01  +4.3620e-01  1.33e-10  5.27e-14  8.67e-12  1.37e-14  2.21e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.2306ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:43 PM: Optimal value: 4.362e-01
(CVXPY) Aug 31 04:59:43 PM: Compilation took 1.807e-02 seconds
(CVXPY) Aug 31 04:59:43 PM: Solver (including time spent in interface) took 6.807e-02 seconds
Iteration: 14, Objective: 0.4362
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:43 PM: Your problem has 2654 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:43 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:43 PM: Finished problem compilation (took 1.566e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2654
  constraints   = 5154
  nnz(P)        = 0
  nnz(A)        = 44393
  cones (total) = 1
    : Nonnegative = 1,  numel = 5154

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.15e+01  1.00e+00  1.00e+00   ------   
  1  +5.8260e-01  +5.3582e+02  5.35e+02  4.21e-01  5.13e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3339e-01  +6.2081e+01  6.15e+01  1.57e-01  2.41e+01  1.50e-02  2.61e-01  9.17e-01  
  3  +5.0867e-01  +1.5949e+01  1.54e+01  1.04e-01  1.59e+01  4.01e-05  2.45e-01  2.57e-01  
  4  +5.0057e-01  +1.2726e+00  7.72e-01  7.61e-03  1.23e+00  6.80e-06  1.12e-01  8.90e-01  
  5  +5.0034e-01  +1.0084e+00  5.08e-01  4.94e-03  8.01e-01  9.06e-06  6.30e-02  5.24e-01  
  6  +5.0015e-01  +9.5072e-01  4.51e-01  2.93e-03  4.80e-01  2.93e-05  1.16e-02  9.42e-01  
  7  +4.9857e-01  +9.2289e-01  4.24e-01  4.78e-04  7.93e-02  1.99e-04  1.43e-03  8.80e-01  
  8  +4.9288e-01  +7.9490e-01  3.02e-01  2.00e-04  3.32e-02  2.20e-04  6.00e-04  6.91e-01  
  9  +4.8960e-01  +7.7556e-01  2.86e-01  1.55e-04  2.58e-02  2.11e-04  4.68e-04  3.24e-01  
 10  +4.8513e-01  +7.2577e-01  2.41e-01  1.44e-04  2.39e-02  1.16e-04  4.48e-04  2.06e-01  
 11  +4.7405e-01  +6.4501e-01  1.71e-01  9.47e-05  1.56e-02  5.75e-05  3.07e-04  4.70e-01  
 12  +4.5804e-01  +5.5010e-01  9.21e-02  4.56e-05  7.50e-03  1.81e-05  1.58e-04  6.61e-01  
 13  +4.5369e-01  +5.2829e-01  7.46e-02  3.56e-05  5.85e-03  1.41e-05  1.25e-04  2.64e-01  
 14  +4.5010e-01  +5.1068e-01  6.06e-02  2.80e-05  4.60e-03  1.06e-05  1.00e-04  3.03e-01  
 15  +4.4160e-01  +4.6996e-01  2.84e-02  1.24e-05  2.04e-03  4.24e-06  4.66e-05  6.56e-01  
 16  +4.3755e-01  +4.5163e-01  1.41e-02  5.93e-06  9.74e-04  1.88e-06  2.31e-05  6.66e-01  
 17  +4.3579e-01  +4.4350e-01  7.71e-03  3.18e-06  5.23e-04  7.82e-07  1.27e-05  9.90e-01  
 18  +4.3346e-01  +4.3450e-01  1.03e-03  4.20e-07  6.89e-05  1.03e-07  1.74e-06  8.81e-01  
 19  +4.3311e-01  +4.3313e-01  1.93e-05  7.80e-09  1.28e-06  1.88e-09  3.25e-08  9.88e-01  
 20  +4.3310e-01  +4.3310e-01  1.93e-07  7.80e-11  1.28e-08  1.88e-11  3.25e-10  9.90e-01  
 21  +4.3310e-01  +4.3310e-01  1.93e-09  7.81e-13  1.28e-10  1.90e-13  3.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 66.1424ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:44 PM: Optimal value: 4.331e-01
(CVXPY) Aug 31 04:59:44 PM: Compilation took 1.566e-02 seconds
(CVXPY) Aug 31 04:59:44 PM: Solver (including time spent in interface) took 7.026e-02 seconds
Iteration: 15, Objective: 0.4331
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:44 PM: Your problem has 2664 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Finished problem compilation (took 1.597e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2664
  constraints   = 5164
  nnz(P)        = 0
  nnz(A)        = 44731
  cones (total) = 1
    : Nonnegative = 1,  numel = 5164

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.14e+01  1.00e+00  1.00e+00   ------   
  1  +5.8251e-01  +5.3583e+02  5.35e+02  4.21e-01  5.12e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3329e-01  +6.1980e+01  6.14e+01  1.57e-01  2.40e+01  1.50e-02  2.61e-01  9.18e-01  
  3  +5.0864e-01  +1.5921e+01  1.54e+01  1.04e-01  1.59e+01  4.02e-05  2.45e-01  2.60e-01  
  4  +5.0053e-01  +1.1964e+00  6.96e-01  6.87e-03  1.11e+00  6.65e-06  1.05e-01  9.35e-01  
  5  +5.0037e-01  +1.0233e+00  5.23e-01  5.09e-03  8.25e-01  1.03e-05  5.58e-02  5.56e-01  
  6  +5.0020e-01  +1.0296e+00  5.29e-01  2.36e-03  3.88e-01  4.88e-05  7.87e-03  9.84e-01  
  7  +4.9912e-01  +1.0014e+00  5.02e-01  5.67e-04  9.41e-02  1.98e-04  1.67e-03  7.93e-01  
  8  +4.9480e-01  +8.4272e-01  3.48e-01  2.31e-04  3.84e-02  2.08e-04  6.86e-04  7.35e-01  
  9  +4.8991e-01  +7.9282e-01  3.03e-01  1.78e-04  2.95e-02  1.63e-04  5.36e-04  3.37e-01  
 10  +4.8630e-01  +7.4549e-01  2.59e-01  1.67e-04  2.77e-02  9.32e-05  5.17e-04  2.06e-01  
 11  +4.7856e-01  +6.8288e-01  2.04e-01  1.22e-04  2.02e-02  4.67e-05  3.91e-04  4.93e-01  
 12  +4.6593e-01  +6.0512e-01  1.39e-01  7.44e-05  1.22e-02  2.70e-05  2.49e-04  4.47e-01  
 13  +4.5601e-01  +5.4940e-01  9.34e-02  4.65e-05  7.63e-03  1.47e-05  1.62e-04  5.06e-01  
 14  +4.5066e-01  +5.2229e-01  7.16e-02  3.40e-05  5.58e-03  1.08e-05  1.20e-04  3.28e-01  
 15  +4.4336e-01  +4.8603e-01  4.27e-02  1.89e-05  3.10e-03  5.24e-06  6.88e-05  6.99e-01  
 16  +4.3777e-01  +4.6032e-01  2.25e-02  9.51e-06  1.56e-03  2.55e-06  3.59e-05  7.13e-01  
 17  +4.3455e-01  +4.4612e-01  1.16e-02  4.76e-06  7.80e-04  1.23e-06  1.85e-05  8.39e-01  
 18  +4.3398e-01  +4.4382e-01  9.84e-03  4.00e-06  6.57e-04  1.05e-06  1.56e-05  2.32e-01  
 19  +4.3251e-01  +4.3775e-01  5.23e-03  2.11e-06  3.46e-04  5.36e-07  8.37e-06  9.90e-01  
 20  +4.3075e-01  +4.3114e-01  3.99e-04  1.59e-07  2.60e-05  3.92e-08  6.45e-07  9.69e-01  
 21  +4.3060e-01  +4.3061e-01  4.45e-06  1.77e-09  2.90e-07  4.37e-10  7.19e-09  9.89e-01  
 22  +4.3060e-01  +4.3060e-01  4.45e-08  1.77e-11  2.90e-09  4.37e-12  7.19e-11  9.90e-01  
 23  +4.3060e-01  +4.3060e-01  4.45e-10  1.77e-13  2.90e-11  4.41e-14  7.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.4031ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:44 PM: Optimal value: 4.306e-01
(CVXPY) Aug 31 04:59:44 PM: Compilation took 1.597e-02 seconds
(CVXPY) Aug 31 04:59:44 PM: Solver (including time spent in interface) took 7.315e-02 seconds
Iteration: 16, Objective: 0.4306
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:44 PM: Your problem has 2674 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Finished problem compilation (took 2.000e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2674
  constraints   = 5174
  nnz(P)        = 0
  nnz(A)        = 45199
  cones (total) = 1
    : Nonnegative = 1,  numel = 5174

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.14e+01  1.00e+00  1.00e+00   ------   
  1  +5.8241e-01  +5.3588e+02  5.35e+02  4.21e-01  5.12e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3322e-01  +6.1914e+01  6.14e+01  1.57e-01  2.39e+01  1.50e-02  2.61e-01  9.19e-01  
  3  +5.0863e-01  +1.5908e+01  1.54e+01  1.04e-01  1.58e+01  4.03e-05  2.44e-01  2.61e-01  
  4  +5.0051e-01  +1.1679e+00  6.67e-01  6.59e-03  1.06e+00  6.60e-06  1.02e-01  9.54e-01  
  5  +5.0040e-01  +1.0432e+00  5.43e-01  5.29e-03  8.56e-01  1.08e-05  5.45e-02  5.61e-01  
  6  +5.0026e-01  +1.0169e+00  5.17e-01  2.39e-03  3.95e-01  4.70e-05  8.01e-03  9.63e-01  
  7  +4.9960e-01  +9.9605e-01  4.96e-01  6.58e-04  1.09e-01  1.70e-04  1.94e-03  7.65e-01  
  8  +4.9656e-01  +8.3744e-01  3.41e-01  2.29e-04  3.81e-02  2.14e-04  6.72e-04  8.28e-01  
  9  +4.9221e-01  +7.8995e-01  2.98e-01  1.91e-04  3.16e-02  1.56e-04  5.66e-04  2.82e-01  
 10  +4.8866e-01  +7.5059e-01  2.62e-01  1.69e-04  2.80e-02  9.73e-05  5.12e-04  2.98e-01  
 11  +4.8435e-01  +7.1652e-01  2.32e-01  1.45e-04  2.40e-02  6.74e-05  4.47e-04  2.99e-01  
 12  +4.7378e-01  +6.4921e-01  1.75e-01  9.87e-05  1.63e-02  4.04e-05  3.18e-04  4.29e-01  
 13  +4.5978e-01  +5.7104e-01  1.11e-01  5.63e-05  9.25e-03  1.95e-05  1.91e-04  5.32e-01  
 14  +4.5113e-01  +5.2887e-01  7.77e-02  3.65e-05  5.99e-03  1.25e-05  1.28e-04  4.32e-01  
 15  +4.4757e-01  +5.1248e-01  6.49e-02  2.95e-05  4.84e-03  9.96e-06  1.04e-04  2.66e-01  
 16  +4.4238e-01  +4.8912e-01  4.67e-02  2.04e-05  3.35e-03  6.86e-06  7.39e-05  3.64e-01  
 17  +4.3555e-01  +4.5799e-01  2.24e-02  9.27e-06  1.52e-03  2.50e-06  3.47e-05  8.80e-01  
 18  +4.3063e-01  +4.3797e-01  7.34e-03  2.95e-06  4.83e-04  7.93e-07  1.15e-05  7.75e-01  
 19  +4.2829e-01  +4.2882e-01  5.32e-04  2.10e-07  3.44e-05  5.61e-08  8.43e-07  9.48e-01  
 20  +4.2810e-01  +4.2811e-01  5.58e-06  2.20e-09  3.61e-07  5.88e-10  8.86e-09  9.90e-01  
 21  +4.2810e-01  +4.2810e-01  5.59e-08  2.20e-11  3.61e-09  5.89e-12  8.87e-11  9.90e-01  
 22  +4.2810e-01  +4.2810e-01  5.59e-10  2.20e-13  3.61e-11  5.93e-14  8.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.0867ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:44 PM: Optimal value: 4.281e-01
(CVXPY) Aug 31 04:59:44 PM: Compilation took 2.000e-02 seconds
(CVXPY) Aug 31 04:59:44 PM: Solver (including time spent in interface) took 7.136e-02 seconds
Iteration: 17, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:44 PM: Your problem has 2684 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Finished problem compilation (took 1.701e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2684
  constraints   = 5184
  nnz(P)        = 0
  nnz(A)        = 45637
  cones (total) = 1
    : Nonnegative = 1,  numel = 5184

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8232e-01  +5.3583e+02  5.35e+02  4.21e-01  5.11e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3316e-01  +6.1834e+01  6.13e+01  1.57e-01  2.38e+01  1.50e-02  2.60e-01  9.19e-01  
  3  +5.0862e-01  +1.5887e+01  1.54e+01  1.04e-01  1.58e+01  4.03e-05  2.44e-01  2.62e-01  
  4  +5.0052e-01  +1.1790e+00  6.79e-01  6.71e-03  1.08e+00  6.64e-06  1.02e-01  9.47e-01  
  5  +5.0038e-01  +1.0246e+00  5.24e-01  5.10e-03  8.26e-01  1.08e-05  5.19e-02  5.77e-01  
  6  +5.0018e-01  +1.0514e+00  5.51e-01  1.88e-03  3.10e-01  6.71e-05  5.91e-03  9.88e-01  
  7  +4.9882e-01  +9.8073e-01  4.82e-01  4.53e-04  7.53e-02  2.30e-04  1.33e-03  8.06e-01  
  8  +4.9666e-01  +9.1812e-01  4.21e-01  3.42e-04  5.67e-02  2.07e-04  1.01e-03  3.28e-01  
  9  +4.8869e-01  +7.8840e-01  3.00e-01  1.85e-04  3.06e-02  1.43e-04  5.59e-04  5.92e-01  
 10  +4.8590e-01  +7.4825e-01  2.62e-01  1.67e-04  2.75e-02  8.31e-05  5.11e-04  3.22e-01  
 11  +4.8118e-01  +7.0764e-01  2.26e-01  1.43e-04  2.35e-02  4.59e-05  4.48e-04  3.95e-01  
 12  +4.6683e-01  +6.2210e-01  1.55e-01  8.24e-05  1.35e-02  2.92e-05  2.72e-04  4.61e-01  
 13  +4.5539e-01  +5.6087e-01  1.05e-01  5.21e-05  8.55e-03  1.71e-05  1.81e-04  4.27e-01  
 14  +4.4725e-01  +5.2106e-01  7.38e-02  3.43e-05  5.62e-03  1.12e-05  1.23e-04  4.04e-01  
 15  +4.4390e-01  +5.0526e-01  6.14e-02  2.77e-05  4.54e-03  8.75e-06  1.01e-04  2.95e-01  
 16  +4.3725e-01  +4.7473e-01  3.75e-02  1.62e-05  2.66e-03  5.02e-06  6.11e-05  4.90e-01  
 17  +4.3241e-01  +4.5313e-01  2.07e-02  8.67e-06  1.42e-03  2.56e-06  3.37e-05  6.04e-01  
 18  +4.3084e-01  +4.4562e-01  1.48e-02  6.07e-06  9.95e-04  1.64e-06  2.39e-05  7.05e-01  
 19  +4.2638e-01  +4.2775e-01  1.37e-03  5.54e-07  9.07e-05  1.39e-07  2.27e-06  9.56e-01  
 20  +4.2591e-01  +4.2592e-01  1.59e-05  6.40e-09  1.05e-06  1.59e-09  2.64e-08  9.89e-01  
 21  +4.2590e-01  +4.2590e-01  1.59e-07  6.40e-11  1.05e-08  1.59e-11  2.64e-10  9.90e-01  
 22  +4.2590e-01  +4.2590e-01  1.59e-09  6.40e-13  1.05e-10  1.60e-13  2.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 70.0711ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:44 PM: Optimal value: 4.259e-01
(CVXPY) Aug 31 04:59:44 PM: Compilation took 1.701e-02 seconds
(CVXPY) Aug 31 04:59:44 PM: Solver (including time spent in interface) took 7.599e-02 seconds
Iteration: 18, Objective: 0.4259
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:44 PM: Your problem has 2694 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Finished problem compilation (took 1.500e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2694
  constraints   = 5194
  nnz(P)        = 0
  nnz(A)        = 46087
  cones (total) = 1
    : Nonnegative = 1,  numel = 5194

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.13e+01  1.00e+00  1.00e+00   ------   
  1  +5.8220e-01  +5.3587e+02  5.35e+02  4.22e-01  5.10e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3307e-01  +6.1752e+01  6.12e+01  1.57e-01  2.38e+01  1.51e-02  2.60e-01  9.20e-01  
  3  +5.0860e-01  +1.5870e+01  1.54e+01  1.04e-01  1.57e+01  4.04e-05  2.43e-01  2.64e-01  
  4  +5.0053e-01  +1.1970e+00  6.96e-01  6.90e-03  1.11e+00  6.68e-06  1.03e-01  9.37e-01  
  5  +5.0040e-01  +1.0643e+00  5.64e-01  5.48e-03  8.86e-01  1.17e-05  5.27e-02  6.11e-01  
  6  +5.0012e-01  +9.6961e-01  4.69e-01  1.87e-03  3.09e-01  5.80e-05  6.07e-03  9.55e-01  
  7  +4.9872e-01  +9.3836e-01  4.40e-01  4.33e-04  7.19e-02  2.39e-04  1.27e-03  8.05e-01  
  8  +4.9604e-01  +8.8248e-01  3.86e-01  2.94e-04  4.87e-02  2.45e-04  8.61e-04  4.06e-01  
  9  +4.8859e-01  +7.9042e-01  3.02e-01  1.78e-04  2.94e-02  1.94e-04  5.34e-04  5.02e-01  
 10  +4.8623e-01  +7.6193e-01  2.76e-01  1.73e-04  2.86e-02  1.45e-04  5.29e-04  9.48e-02  
 11  +4.8042e-01  +7.1209e-01  2.32e-01  1.42e-04  2.34e-02  6.45e-05  4.46e-04  4.82e-01  
 12  +4.6603e-01  +6.2316e-01  1.57e-01  8.36e-05  1.37e-02  3.88e-05  2.77e-04  4.43e-01  
 13  +4.5215e-01  +5.4777e-01  9.56e-02  4.68e-05  7.67e-03  1.94e-05  1.64e-04  4.92e-01  
 14  +4.4726e-01  +5.2392e-01  7.67e-02  3.55e-05  5.81e-03  1.40e-05  1.27e-04  3.79e-01  
 15  +4.4291e-01  +5.0332e-01  6.04e-02  2.70e-05  4.43e-03  9.97e-06  9.82e-05  3.71e-01  
 16  +4.3839e-01  +4.8251e-01  4.41e-02  1.92e-05  3.14e-03  7.01e-06  7.11e-05  3.39e-01  
 17  +4.3476e-01  +4.6529e-01  3.05e-02  1.28e-05  2.10e-03  4.27e-06  4.84e-05  5.58e-01  
 18  +4.3139e-01  +4.5028e-01  1.89e-02  7.75e-06  1.27e-03  2.42e-06  2.97e-05  6.07e-01  
 19  +4.3058e-01  +4.4644e-01  1.59e-02  6.49e-06  1.06e-03  1.89e-06  2.50e-05  4.75e-01  
 20  +4.2668e-01  +4.3090e-01  4.23e-03  1.70e-06  2.79e-04  4.49e-07  6.78e-06  8.83e-01  
 21  +4.2527e-01  +4.2548e-01  2.08e-04  8.32e-08  1.36e-05  2.16e-08  3.36e-07  9.60e-01  
 22  +4.2520e-01  +4.2520e-01  2.10e-06  8.37e-10  1.37e-07  2.18e-10  3.39e-09  9.90e-01  
 23  +4.2520e-01  +4.2520e-01  2.10e-08  8.37e-12  1.37e-09  2.18e-12  3.39e-11  9.90e-01  
 24  +4.2520e-01  +4.2520e-01  2.10e-10  8.37e-14  1.37e-11  2.19e-14  3.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.6792ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:44 PM: Optimal value: 4.252e-01
(CVXPY) Aug 31 04:59:44 PM: Compilation took 1.500e-02 seconds
(CVXPY) Aug 31 04:59:44 PM: Solver (including time spent in interface) took 7.918e-02 seconds
Iteration: 19, Objective: 0.4252
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:44 PM: Your problem has 2704 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:44 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:44 PM: Finished problem compilation (took 1.699e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2704
  constraints   = 5204
  nnz(P)        = 0
  nnz(A)        = 46467
  cones (total) = 1
    : Nonnegative = 1,  numel = 5204

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8206e-01  +5.3604e+02  5.35e+02  4.22e-01  5.10e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3302e-01  +6.1721e+01  6.12e+01  1.57e-01  2.37e+01  1.51e-02  2.60e-01  9.21e-01  
  3  +5.0860e-01  +1.5868e+01  1.54e+01  1.04e-01  1.57e+01  4.05e-05  2.43e-01  2.65e-01  
  4  +5.0053e-01  +1.2012e+00  7.01e-01  6.95e-03  1.12e+00  6.69e-06  1.03e-01  9.35e-01  
  5  +5.0039e-01  +1.0408e+00  5.40e-01  5.26e-03  8.50e-01  1.12e-05  5.19e-02  5.94e-01  
  6  +5.0006e-01  +9.9466e-01  4.95e-01  1.53e-03  2.53e-01  7.56e-05  4.76e-03  9.87e-01  
  7  +4.9770e-01  +9.1289e-01  4.15e-01  2.84e-04  4.71e-02  3.23e-04  8.22e-04  8.65e-01  
  8  +4.9301e-01  +8.2220e-01  3.29e-01  2.36e-04  3.91e-02  1.45e-04  7.03e-04  3.96e-01  
  9  +4.9006e-01  +7.9542e-01  3.05e-01  1.98e-04  3.27e-02  1.29e-04  5.94e-04  2.51e-01  
 10  +4.8237e-01  +7.0860e-01  2.26e-01  1.55e-04  2.55e-02  1.20e-05  4.88e-04  7.23e-01  
 11  +4.6526e-01  +6.1066e-01  1.45e-01  7.73e-05  1.27e-02  8.77e-06  2.57e-04  5.39e-01  
 12  +4.5163e-01  +5.4336e-01  9.17e-02  4.45e-05  7.29e-03  5.72e-06  1.56e-04  5.22e-01  
 13  +4.4694e-01  +5.2216e-01  7.52e-02  3.50e-05  5.73e-03  5.09e-06  1.25e-04  3.44e-01  
 14  +4.4287e-01  +5.0377e-01  6.09e-02  2.74e-05  4.48e-03  4.51e-06  9.92e-05  3.90e-01  
 15  +4.3782e-01  +4.8130e-01  4.35e-02  1.89e-05  3.09e-03  3.32e-06  7.00e-05  3.63e-01  
 16  +4.3490e-01  +4.6773e-01  3.28e-02  1.38e-05  2.26e-03  2.92e-06  5.18e-05  6.20e-01  
 17  +4.3015e-01  +4.4761e-01  1.75e-02  7.16e-06  1.17e-03  1.67e-06  2.75e-05  6.99e-01  
 18  +4.2915e-01  +4.4314e-01  1.40e-02  5.71e-06  9.35e-04  1.39e-06  2.21e-05  5.72e-01  
 19  +4.2527e-01  +4.2799e-01  2.72e-03  1.09e-06  1.79e-04  2.66e-07  4.37e-06  9.46e-01  
 20  +4.2439e-01  +4.2464e-01  2.48e-04  9.91e-08  1.62e-05  2.42e-08  4.00e-07  9.17e-01  
 21  +4.2430e-01  +4.2430e-01  2.55e-06  1.02e-09  1.67e-07  2.50e-10  4.12e-09  9.90e-01  
 22  +4.2430e-01  +4.2430e-01  2.55e-08  1.02e-11  1.67e-09  2.50e-12  4.13e-11  9.90e-01  
 23  +4.2430e-01  +4.2430e-01  2.55e-10  1.02e-13  1.67e-11  2.51e-14  4.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 74.427ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:44 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:44 PM: Optimal value: 4.243e-01
(CVXPY) Aug 31 04:59:44 PM: Compilation took 1.699e-02 seconds
(CVXPY) Aug 31 04:59:44 PM: Solver (including time spent in interface) took 7.903e-02 seconds
Iteration: 20, Objective: 0.4243
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:45 PM: Your problem has 2714 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Finished problem compilation (took 1.819e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2714
  constraints   = 5214
  nnz(P)        = 0
  nnz(A)        = 46989
  cones (total) = 1
    : Nonnegative = 1,  numel = 5214

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8197e-01  +5.3606e+02  5.35e+02  4.23e-01  5.09e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3296e-01  +6.1665e+01  6.11e+01  1.56e-01  2.36e+01  1.51e-02  2.60e-01  9.22e-01  
  3  +5.0858e-01  +1.5851e+01  1.53e+01  1.04e-01  1.57e+01  4.06e-05  2.43e-01  2.67e-01  
  4  +5.0050e-01  +1.1398e+00  6.39e-01  6.35e-03  1.02e+00  6.56e-06  9.72e-02  9.74e-01  
  5  +5.0046e-01  +1.1055e+00  6.05e-01  5.88e-03  9.49e-01  1.28e-05  5.00e-02  6.14e-01  
  6  +5.0026e-01  +9.7958e-01  4.79e-01  1.66e-03  2.73e-01  6.75e-05  5.16e-03  9.65e-01  
  7  +4.9980e-01  +9.2954e-01  4.30e-01  5.75e-04  9.54e-02  1.60e-04  1.68e-03  7.47e-01  
  8  +4.9849e-01  +8.6836e-01  3.70e-01  3.12e-04  5.18e-02  1.84e-04  9.02e-04  6.47e-01  
  9  +4.9350e-01  +7.9754e-01  3.04e-01  1.85e-04  3.06e-02  1.57e-04  5.40e-04  6.23e-01  
 10  +4.8998e-01  +7.6618e-01  2.76e-01  1.74e-04  2.87e-02  1.04e-04  5.18e-04  2.27e-01  
 11  +4.7656e-01  +6.7480e-01  1.98e-01  1.15e-04  1.90e-02  2.93e-05  3.64e-04  6.71e-01  
 12  +4.6429e-01  +6.0947e-01  1.45e-01  7.66e-05  1.26e-02  1.88e-05  2.54e-04  4.02e-01  
 13  +4.5078e-01  +5.4333e-01  9.26e-02  4.46e-05  7.30e-03  1.04e-05  1.56e-04  5.08e-01  
 14  +4.4654e-01  +5.2440e-01  7.79e-02  3.61e-05  5.91e-03  8.50e-06  1.29e-04  2.90e-01  
 15  +4.4251e-01  +5.0637e-01  6.39e-02  2.88e-05  4.70e-03  6.80e-06  1.04e-04  3.13e-01  
 16  +4.3654e-01  +4.7970e-01  4.32e-02  1.86e-05  3.05e-03  4.49e-06  6.92e-05  5.15e-01  
 17  +4.3295e-01  +4.6258e-01  2.96e-02  1.24e-05  2.02e-03  3.04e-06  4.65e-05  9.90e-01  
 18  +4.2968e-01  +4.4945e-01  1.98e-02  8.12e-06  1.33e-03  2.04e-06  3.11e-05  3.69e-01  
 19  +4.2723e-01  +4.3908e-01  1.19e-02  4.84e-06  7.90e-04  1.24e-06  1.88e-05  9.90e-01  
 20  +4.2370e-01  +4.2565e-01  1.96e-03  7.89e-07  1.29e-04  1.98e-07  3.17e-06  8.81e-01  
 21  +4.2304e-01  +4.2317e-01  1.26e-04  5.06e-08  8.27e-06  1.27e-08  2.05e-07  9.36e-01  
 22  +4.2300e-01  +4.2300e-01  1.26e-06  5.08e-10  8.30e-08  1.27e-10  2.06e-09  9.90e-01  
 23  +4.2300e-01  +4.2300e-01  1.26e-08  5.08e-12  8.30e-10  1.27e-12  2.06e-11  9.90e-01  
 24  +4.2300e-01  +4.2300e-01  1.26e-10  5.08e-14  8.30e-12  1.28e-14  2.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.1847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:45 PM: Optimal value: 4.230e-01
(CVXPY) Aug 31 04:59:45 PM: Compilation took 1.819e-02 seconds
(CVXPY) Aug 31 04:59:45 PM: Solver (including time spent in interface) took 8.204e-02 seconds
Iteration: 21, Objective: 0.4230
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:45 PM: Your problem has 2715 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Finished problem compilation (took 1.800e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2715
  constraints   = 5215
  nnz(P)        = 0
  nnz(A)        = 47028
  cones (total) = 1
    : Nonnegative = 1,  numel = 5215

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.12e+01  1.00e+00  1.00e+00   ------   
  1  +5.8194e-01  +5.3610e+02  5.36e+02  4.23e-01  5.09e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3295e-01  +6.1667e+01  6.11e+01  1.56e-01  2.36e+01  1.51e-02  2.60e-01  9.22e-01  
  3  +5.0858e-01  +1.5853e+01  1.53e+01  1.04e-01  1.56e+01  4.06e-05  2.43e-01  2.67e-01  
  4  +5.0050e-01  +1.1365e+00  6.36e-01  6.31e-03  1.02e+00  6.55e-06  9.68e-02  9.76e-01  
  5  +5.0047e-01  +1.1080e+00  6.08e-01  5.90e-03  9.53e-01  1.29e-05  4.98e-02  6.14e-01  
  6  +5.0026e-01  +9.7499e-01  4.75e-01  1.57e-03  2.59e-01  7.06e-05  4.87e-03  9.71e-01  
  7  +4.9983e-01  +9.1574e-01  4.16e-01  5.56e-04  9.22e-02  1.54e-04  1.62e-03  7.62e-01  
  8  +4.9823e-01  +8.4261e-01  3.44e-01  2.64e-04  4.38e-02  1.79e-04  7.62e-04  7.66e-01  
  9  +4.9420e-01  +8.0030e-01  3.06e-01  1.92e-04  3.18e-02  1.61e-04  5.61e-04  4.07e-01  
 10  +4.9066e-01  +7.6914e-01  2.78e-01  1.78e-04  2.95e-02  1.06e-04  5.30e-04  2.63e-01  
 11  +4.7809e-01  +6.8286e-01  2.05e-01  1.20e-04  1.98e-02  3.44e-05  3.78e-04  6.43e-01  
 12  +4.6467e-01  +6.1141e-01  1.47e-01  7.73e-05  1.27e-02  2.13e-05  2.56e-04  4.20e-01  
 13  +4.5343e-01  +5.5736e-01  1.04e-01  5.09e-05  8.34e-03  1.32e-05  1.77e-04  4.23e-01  
 14  +4.4583e-01  +5.2293e-01  7.71e-02  3.58e-05  5.85e-03  9.35e-06  1.29e-04  3.48e-01  
 15  +4.4269e-01  +5.0904e-01  6.64e-02  2.99e-05  4.89e-03  7.76e-06  1.09e-04  2.93e-01  
 16  +4.3807e-01  +4.8869e-01  5.06e-02  2.21e-05  3.61e-03  5.55e-06  8.21e-05  4.86e-01  
 17  +4.3130e-01  +4.5964e-01  2.83e-02  1.18e-05  1.93e-03  2.91e-06  4.54e-05  7.93e-01  
 18  +4.2754e-01  +4.4407e-01  1.65e-02  6.74e-06  1.10e-03  1.71e-06  2.66e-05  4.63e-01  
 19  +4.2679e-01  +4.4041e-01  1.36e-02  5.55e-06  9.07e-04  1.40e-06  2.20e-05  5.20e-01  
 20  +4.2321e-01  +4.2633e-01  3.12e-03  1.26e-06  2.06e-04  3.08e-07  5.13e-06  9.32e-01  
 21  +4.2215e-01  +4.2227e-01  1.29e-04  5.17e-08  8.45e-06  1.27e-08  2.13e-07  9.60e-01  
 22  +4.2210e-01  +4.2210e-01  1.29e-06  5.18e-10  8.46e-08  1.27e-10  2.13e-09  9.90e-01  
 23  +4.2210e-01  +4.2210e-01  1.29e-08  5.18e-12  8.46e-10  1.28e-12  2.14e-11  9.90e-01  
 24  +4.2210e-01  +4.2210e-01  1.29e-10  5.17e-14  8.46e-12  1.28e-14  2.14e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.0822ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:45 PM: Optimal value: 4.221e-01
(CVXPY) Aug 31 04:59:45 PM: Compilation took 1.800e-02 seconds
(CVXPY) Aug 31 04:59:45 PM: Solver (including time spent in interface) took 8.203e-02 seconds
Iteration: 22, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:45 PM: Your problem has 2725 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Finished problem compilation (took 1.795e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2725
  constraints   = 5225
  nnz(P)        = 0
  nnz(A)        = 47303
  cones (total) = 1
    : Nonnegative = 1,  numel = 5225

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8188e-01  +5.3609e+02  5.36e+02  4.23e-01  5.08e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3290e-01  +6.1602e+01  6.11e+01  1.56e-01  2.35e+01  1.51e-02  2.60e-01  9.23e-01  
  3  +5.0857e-01  +1.5840e+01  1.53e+01  1.04e-01  1.56e+01  4.06e-05  2.43e-01  2.68e-01  
  4  +5.0051e-01  +1.1569e+00  6.56e-01  6.52e-03  1.05e+00  6.61e-06  9.83e-02  9.64e-01  
  5  +5.0046e-01  +1.1113e+00  6.11e-01  5.95e-03  9.59e-01  1.25e-05  5.15e-02  5.91e-01  
  6  +5.0024e-01  +1.0115e+00  5.11e-01  1.76e-03  2.90e-01  6.78e-05  5.49e-03  9.63e-01  
  7  +4.9942e-01  +9.4699e-01  4.48e-01  5.01e-04  8.29e-02  1.93e-04  1.46e-03  7.95e-01  
  8  +4.9738e-01  +8.8833e-01  3.91e-01  3.00e-04  4.97e-02  2.16e-04  8.69e-04  5.31e-01  
  9  +4.9372e-01  +8.2300e-01  3.29e-01  2.26e-04  3.74e-02  1.35e-04  6.66e-04  4.93e-01  
 10  +4.9003e-01  +7.8647e-01  2.96e-01  1.91e-04  3.16e-02  9.65e-05  5.71e-04  3.40e-01  
 11  +4.7766e-01  +6.9045e-01  2.13e-01  1.27e-04  2.09e-02  3.36e-05  4.02e-04  6.15e-01  
 12  +4.6546e-01  +6.2317e-01  1.58e-01  8.47e-05  1.39e-02  2.23e-05  2.80e-04  3.90e-01  
 13  +4.5104e-01  +5.5092e-01  9.99e-02  4.88e-05  7.99e-03  1.23e-05  1.71e-04  4.70e-01  
 14  +4.4392e-01  +5.1793e-01  7.40e-02  3.43e-05  5.61e-03  8.66e-06  1.24e-04  3.87e-01  
 15  +4.4177e-01  +5.0811e-01  6.63e-02  3.01e-05  4.92e-03  7.58e-06  1.10e-04  2.41e-01  
 16  +4.3620e-01  +4.8233e-01  4.61e-02  1.99e-05  3.25e-03  4.82e-06  7.43e-05  7.28e-01  
 17  +4.3286e-01  +4.6688e-01  3.40e-02  1.44e-05  2.35e-03  3.47e-06  5.45e-05  9.36e-01  
 18  +4.2735e-01  +4.4451e-01  1.72e-02  7.05e-06  1.15e-03  1.77e-06  2.77e-05  5.48e-01  
 19  +4.2696e-01  +4.4268e-01  1.57e-02  6.46e-06  1.05e-03  1.62e-06  2.54e-05  2.90e-01  
 20  +4.2339e-01  +4.2841e-01  5.02e-03  2.05e-06  3.35e-04  4.85e-07  8.34e-06  9.90e-01  
 21  +4.2178e-01  +4.2228e-01  5.01e-04  2.02e-07  3.30e-05  4.97e-08  8.35e-07  9.21e-01  
 22  +4.2160e-01  +4.2161e-01  5.32e-06  2.15e-09  3.50e-07  5.27e-10  8.88e-09  9.89e-01  
 23  +4.2160e-01  +4.2160e-01  5.32e-08  2.15e-11  3.51e-09  5.27e-12  8.88e-11  9.90e-01  
 24  +4.2160e-01  +4.2160e-01  5.32e-10  2.15e-13  3.51e-11  5.29e-14  8.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.523ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:45 PM: Optimal value: 4.216e-01
(CVXPY) Aug 31 04:59:45 PM: Compilation took 1.795e-02 seconds
(CVXPY) Aug 31 04:59:45 PM: Solver (including time spent in interface) took 8.283e-02 seconds
Iteration: 23, Objective: 0.4216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:45 PM: Your problem has 2728 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Finished problem compilation (took 1.709e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2728
  constraints   = 5228
  nnz(P)        = 0
  nnz(A)        = 47387
  cones (total) = 1
    : Nonnegative = 1,  numel = 5228

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.80e-01  8.11e+01  1.00e+00  1.00e+00   ------   
  1  +5.8186e-01  +5.3609e+02  5.36e+02  4.23e-01  5.08e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3287e-01  +6.1573e+01  6.10e+01  1.56e-01  2.35e+01  1.51e-02  2.60e-01  9.23e-01  
  3  +5.0857e-01  +1.5834e+01  1.53e+01  1.03e-01  1.56e+01  4.06e-05  2.42e-01  2.69e-01  
  4  +5.0051e-01  +1.1532e+00  6.53e-01  6.49e-03  1.04e+00  6.60e-06  9.78e-02  9.67e-01  
  5  +5.0047e-01  +1.1203e+00  6.20e-01  6.03e-03  9.72e-01  1.29e-05  5.08e-02  6.01e-01  
  6  +5.0025e-01  +1.0100e+00  5.10e-01  1.76e-03  2.90e-01  6.79e-05  5.49e-03  9.56e-01  
  7  +4.9953e-01  +9.4687e-01  4.47e-01  5.25e-04  8.69e-02  1.84e-04  1.53e-03  7.87e-01  
  8  +4.9752e-01  +8.8394e-01  3.86e-01  2.95e-04  4.89e-02  2.13e-04  8.55e-04  5.83e-01  
  9  +4.9376e-01  +8.2025e-01  3.26e-01  2.24e-04  3.70e-02  1.32e-04  6.57e-04  4.97e-01  
 10  +4.8944e-01  +7.7865e-01  2.89e-01  1.86e-04  3.07e-02  8.59e-05  5.57e-04  3.96e-01  
 11  +4.7556e-01  +6.7825e-01  2.03e-01  1.17e-04  1.93e-02  3.51e-05  3.72e-04  5.88e-01  
 12  +4.6301e-01  +6.1087e-01  1.48e-01  7.77e-05  1.27e-02  2.18e-05  2.59e-04  4.15e-01  
 13  +4.5035e-01  +5.4836e-01  9.80e-02  4.77e-05  7.80e-03  1.24e-05  1.68e-04  4.70e-01  
 14  +4.4401e-01  +5.1897e-01  7.50e-02  3.48e-05  5.69e-03  9.08e-06  1.26e-04  3.42e-01  
 15  +4.4170e-01  +5.0836e-01  6.67e-02  3.03e-05  4.95e-03  7.86e-06  1.10e-04  2.40e-01  
 16  +4.3606e-01  +4.8208e-01  4.60e-02  1.99e-05  3.26e-03  4.91e-06  7.42e-05  7.13e-01  
 17  +4.3289e-01  +4.6699e-01  3.41e-02  1.44e-05  2.36e-03  3.49e-06  5.42e-05  9.90e-01  
 18  +4.2898e-01  +4.5115e-01  2.22e-02  9.15e-06  1.49e-03  2.31e-06  3.51e-05  6.45e-01  
 19  +4.2659e-01  +4.4124e-01  1.46e-02  6.04e-06  9.86e-04  1.50e-06  2.36e-05  7.55e-01  
 20  +4.2291e-01  +4.2685e-01  3.94e-03  1.59e-06  2.60e-04  4.06e-07  6.40e-06  8.34e-01  
 21  +4.2156e-01  +4.2173e-01  1.70e-04  6.82e-08  1.11e-05  1.73e-08  2.79e-07  9.64e-01  
 22  +4.2150e-01  +4.2150e-01  1.73e-06  6.91e-10  1.13e-07  1.75e-10  2.83e-09  9.90e-01  
 23  +4.2150e-01  +4.2150e-01  1.73e-08  6.91e-12  1.13e-09  1.75e-12  2.83e-11  9.90e-01  
 24  +4.2150e-01  +4.2150e-01  1.73e-10  6.91e-14  1.13e-11  1.77e-14  2.86e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.702ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:45 PM: Optimal value: 4.215e-01
(CVXPY) Aug 31 04:59:45 PM: Compilation took 1.709e-02 seconds
(CVXPY) Aug 31 04:59:45 PM: Solver (including time spent in interface) took 8.063e-02 seconds
Iteration: 24, Objective: 0.4215
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:45 PM: Your problem has 2736 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:45 PM: Finished problem compilation (took 1.835e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2736
  constraints   = 5236
  nnz(P)        = 0
  nnz(A)        = 47645
  cones (total) = 1
    : Nonnegative = 1,  numel = 5236

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8184e-01  +5.3611e+02  5.36e+02  4.23e-01  5.07e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3283e-01  +6.1521e+01  6.10e+01  1.56e-01  2.34e+01  1.51e-02  2.60e-01  9.23e-01  
  3  +5.0856e-01  +1.5821e+01  1.53e+01  1.03e-01  1.56e+01  4.07e-05  2.42e-01  2.69e-01  
  4  +5.0051e-01  +1.1511e+00  6.51e-01  6.47e-03  1.04e+00  6.59e-06  9.75e-02  9.68e-01  
  5  +5.0047e-01  +1.1280e+00  6.27e-01  6.10e-03  9.83e-01  1.30e-05  5.05e-02  6.02e-01  
  6  +5.0028e-01  +1.0325e+00  5.32e-01  1.97e-03  3.24e-01  6.36e-05  6.19e-03  9.36e-01  
  7  +4.9973e-01  +9.8118e-01  4.81e-01  6.47e-04  1.07e-01  1.65e-04  1.89e-03  7.45e-01  
  8  +4.9734e-01  +8.6100e-01  3.64e-01  2.54e-04  4.21e-02  2.07e-04  7.35e-04  8.18e-01  
  9  +4.9370e-01  +8.1913e-01  3.25e-01  2.13e-04  3.51e-02  1.58e-04  6.23e-04  3.07e-01  
 10  +4.9052e-01  +7.9166e-01  3.01e-01  1.89e-04  3.12e-02  1.24e-04  5.62e-04  2.36e-01  
 11  +4.7841e-01  +6.9505e-01  2.17e-01  1.35e-04  2.22e-02  2.58e-05  4.28e-04  6.54e-01  
 12  +4.6819e-01  +6.3836e-01  1.70e-01  9.54e-05  1.56e-02  1.92e-05  3.14e-04  3.39e-01  
 13  +4.5491e-01  +5.7056e-01  1.16e-01  5.86e-05  9.59e-03  1.18e-05  2.03e-04  4.43e-01  
 14  +4.4453e-01  +5.2145e-01  7.69e-02  3.62e-05  5.92e-03  7.43e-06  1.31e-04  4.74e-01  
 15  +4.4229e-01  +5.1122e-01  6.89e-02  3.18e-05  5.19e-03  6.63e-06  1.15e-04  2.43e-01  
 16  +4.3872e-01  +4.9512e-01  5.64e-02  2.53e-05  4.13e-03  5.37e-06  9.33e-05  4.16e-01  
 17  +4.3443e-01  +4.7631e-01  4.19e-02  1.82e-05  2.98e-03  4.00e-06  6.87e-05  3.52e-01  
 18  +4.3026e-01  +4.5826e-01  2.80e-02  1.19e-05  1.94e-03  2.69e-06  4.58e-05  4.16e-01  
 19  +4.2793e-01  +4.4780e-01  1.99e-02  8.26e-06  1.35e-03  1.96e-06  3.22e-05  5.43e-01  
 20  +4.2567e-01  +4.3764e-01  1.20e-02  4.93e-06  8.04e-04  1.21e-06  1.95e-05  9.90e-01  
 21  +4.2241e-01  +4.2526e-01  2.85e-03  1.16e-06  1.89e-04  2.84e-07  4.72e-06  7.91e-01  
 22  +4.2145e-01  +4.2157e-01  1.27e-04  5.13e-08  8.37e-06  1.25e-08  2.12e-07  9.58e-01  
 23  +4.2140e-01  +4.2140e-01  1.27e-06  5.14e-10  8.38e-08  1.25e-10  2.12e-09  9.90e-01  
 24  +4.2140e-01  +4.2140e-01  1.27e-08  5.14e-12  8.38e-10  1.25e-12  2.12e-11  9.90e-01  
 25  +4.2140e-01  +4.2140e-01  1.27e-10  5.14e-14  8.38e-12  1.26e-14  2.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 79.5498ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:45 PM: Optimal value: 4.214e-01
(CVXPY) Aug 31 04:59:45 PM: Compilation took 1.835e-02 seconds
(CVXPY) Aug 31 04:59:45 PM: Solver (including time spent in interface) took 8.438e-02 seconds
Iteration: 25, Objective: 0.4214
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:59:46 PM: Your problem has 2737 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:59:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:59:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:59:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:59:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:59:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:59:46 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:59:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:59:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:59:46 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:59:46 PM: Finished problem compilation (took 1.801e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2737
  constraints   = 5237
  nnz(P)        = 0
  nnz(A)        = 47669
  cones (total) = 1
    : Nonnegative = 1,  numel = 5237

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.10e+01  1.00e+00  1.00e+00   ------   
  1  +5.8185e-01  +5.3613e+02  5.36e+02  4.23e-01  5.07e+01  3.82e-03  5.63e-01  5.96e-01  
  2  +5.3282e-01  +6.1510e+01  6.10e+01  1.56e-01  2.34e+01  1.51e-02  2.60e-01  9.23e-01  
  3  +5.0856e-01  +1.5820e+01  1.53e+01  1.03e-01  1.56e+01  4.07e-05  2.42e-01  2.69e-01  
  4  +5.0051e-01  +1.1542e+00  6.54e-01  6.50e-03  1.04e+00  6.60e-06  9.78e-02  9.66e-01  
  5  +5.0047e-01  +1.1244e+00  6.24e-01  6.07e-03  9.78e-01  1.29e-05  5.08e-02  5.98e-01  
  6  +5.0028e-01  +1.0359e+00  5.36e-01  1.99e-03  3.28e-01  6.30e-05  6.27e-03  9.37e-01  
  7  +4.9970e-01  +9.8529e-01  4.86e-01  6.43e-04  1.06e-01  1.67e-04  1.88e-03  7.47e-01  
  8  +4.9727e-01  +8.6823e-01  3.71e-01  2.59e-04  4.28e-02  2.12e-04  7.49e-04  7.95e-01  
  9  +4.9350e-01  +8.2225e-01  3.29e-01  2.15e-04  3.55e-02  1.57e-04  6.30e-04  3.25e-01  
 10  +4.9016e-01  +7.9306e-01  3.03e-01  1.89e-04  3.13e-02  1.25e-04  5.64e-04  2.33e-01  
 11  +4.7750e-01  +6.9059e-01  2.13e-01  1.32e-04  2.17e-02  2.27e-05  4.20e-04  6.75e-01  
 12  +4.6724e-01  +6.3391e-01  1.67e-01  9.30e-05  1.52e-02  1.68e-05  3.07e-04  3.47e-01  
 13  +4.5422e-01  +5.6756e-01  1.13e-01  5.73e-05  9.37e-03  1.05e-05  1.99e-04  4.49e-01  
 14  +4.4446e-01  +5.2146e-01  7.70e-02  3.62e-05  5.91e-03  6.90e-06  1.31e-04  4.74e-01  
 15  +4.4202e-01  +5.1042e-01  6.84e-02  3.14e-05  5.12e-03  6.18e-06  1.14e-04  2.62e-01  
 16  +4.3885e-01  +4.9600e-01  5.72e-02  2.56e-05  4.18e-03  5.22e-06  9.44e-05  4.15e-01  
 17  +4.2999e-01  +4.5744e-01  2.74e-02  1.17e-05  1.91e-03  2.48e-06  4.53e-05  5.75e-01  
 18  +4.2723e-01  +4.4504e-01  1.78e-02  7.41e-06  1.21e-03  1.70e-06  2.91e-05  6.60e-01  
 19  +4.2639e-01  +4.4124e-01  1.48e-02  6.15e-06  1.00e-03  1.44e-06  2.43e-05  5.02e-01  
 20  +4.2292e-01  +4.2764e-01  4.71e-03  1.92e-06  3.13e-04  4.54e-07  7.81e-06  7.82e-01  
 21  +4.2136e-01  +4.2153e-01  1.73e-04  7.00e-08  1.14e-05  1.62e-08  2.90e-07  9.69e-01  
 22  +4.2130e-01  +4.2130e-01  1.74e-06  7.03e-10  1.15e-07  1.62e-10  2.92e-09  9.90e-01  
 23  +4.2130e-01  +4.2130e-01  1.74e-08  7.03e-12  1.15e-09  1.62e-12  2.92e-11  9.90e-01  
 24  +4.2130e-01  +4.2130e-01  1.74e-10  7.03e-14  1.15e-11  1.63e-14  2.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.8715ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:59:46 PM: Problem status: optimal
(CVXPY) Aug 31 04:59:46 PM: Optimal value: 4.213e-01
(CVXPY) Aug 31 04:59:46 PM: Compilation took 1.801e-02 seconds
(CVXPY) Aug 31 04:59:46 PM: Solver (including time spent in interface) took 7.710e-02 seconds
FULL MODEL:
  Accruacy: 0.5358
  Our objective: 0.07160000000000005

IF 
    (x0 = 0 AND x4 = 0)                                                                   <-- (term's our objective: 0.037599999999999995)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.005599999999999988)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 1 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.006399999999999988)
 OR (x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x1 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.004000000000000007)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x3 = 0 AND x7 = 0)            <-- (term's our objective: 0.002799999999999984)
 OR (x0 = 1 AND x4 = 1 AND x6 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0)            <-- (term's our objective: 0.0040000000000000304)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.008000000000000031)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x2 = 0 AND x4 = 0) <-- (term's our objective: 0.0032000000000000054)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x0 = 0 AND x3 = 0) <-- (term's our objective: 0.0028000000000000264)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.002400000000000048)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.003199999999999961)
 OR (x3 = 1 AND x4 = 1 AND x7 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0015999999999999825)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 1 AND x0 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0011999999999999593)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 10.254726886749268
Best over terms:
  Our final objective: 0.037599999999999995
    Its accruacy: 0.5188
    Its hamming distance: 6
  Shortest hamming distance: 1
    Its our objective: 0.008000000000000031
  Highest accruacy: 0.5188
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

