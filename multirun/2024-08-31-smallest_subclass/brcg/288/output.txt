Command:
python test_script.py -s smallest_subclass -d 8 -n 50 --seed 34 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 8.

Computed total variation: 0.8800000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:11 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:11 PM: Finished problem compilation (took 5.075e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 292
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9509e-01  +2.5899e+01  2.54e+01  8.33e-01  6.69e+00  1.00e+00  1.06e+00   ------   
  1  +5.7556e-01  +5.7419e+00  5.17e+00  3.58e-01  3.86e+00  3.78e-03  5.95e-01  6.01e-01  
  2  +5.0626e-01  +1.1349e+00  6.29e-01  8.09e-02  1.07e+00  1.80e-02  2.28e-01  9.90e-01  
  3  +4.8291e-01  +6.9729e-01  2.14e-01  1.96e-02  2.73e-01  9.31e-03  6.71e-02  7.83e-01  
  4  +4.5840e-01  +5.4523e-01  8.68e-02  5.79e-03  8.15e-02  3.71e-03  2.24e-02  7.12e-01  
  5  +4.5063e-01  +4.8764e-01  3.70e-02  2.28e-03  3.20e-02  1.49e-03  9.09e-03  6.62e-01  
  6  +4.4524e-01  +4.6570e-01  2.05e-02  1.03e-03  1.46e-02  7.80e-04  4.26e-03  6.40e-01  
  7  +4.4034e-01  +4.4119e-01  8.51e-04  4.22e-05  6.00e-04  1.57e-05  1.79e-04  9.79e-01  
  8  +4.4010e-01  +4.4011e-01  8.55e-06  4.23e-07  6.02e-06  1.58e-07  1.80e-06  9.90e-01  
  9  +4.4010e-01  +4.4010e-01  8.55e-08  4.23e-09  6.02e-08  1.58e-09  1.80e-08  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  8.55e-10  4.23e-11  6.02e-10  1.58e-11  1.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 266.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:11 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:11 PM: Optimal value: 4.401e-01
(CVXPY) Aug 31 04:58:11 PM: Compilation took 5.075e-03 seconds
(CVXPY) Aug 31 04:58:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:11 PM: Your problem has 52 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:11 PM: Finished problem compilation (took 2.982e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 52
  constraints   = 77
  nnz(P)        = 0
  nnz(A)        = 372
  cones (total) = 1
    : Nonnegative = 1,  numel = 77

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7907e-01  +2.7238e+01  2.68e+01  8.45e-01  6.89e+00  1.00e+00  1.13e+00   ------   
  1  +5.0426e-01  +5.9908e+00  5.49e+00  3.70e-01  3.91e+00  3.83e-03  6.26e-01  5.98e-01  
  2  +4.1066e-01  +1.2220e+00  8.11e-01  7.81e-02  1.06e+00  2.24e-02  2.12e-01  9.90e-01  
  3  +3.4704e-01  +6.7794e-01  3.31e-01  2.24e-02  3.15e-01  1.11e-02  7.24e-02  7.49e-01  
  4  +3.1713e-01  +5.8192e-01  2.65e-01  1.31e-02  1.88e-01  9.05e-03  4.68e-02  4.72e-01  
  5  +2.6573e-01  +3.4421e-01  7.85e-02  3.28e-03  4.75e-02  2.36e-03  1.34e-02  7.40e-01  
  6  +2.4240e-01  +2.4774e-01  5.34e-03  2.20e-04  3.17e-03  8.42e-05  1.01e-03  9.38e-01  
  7  +2.4033e-01  +2.4041e-01  8.03e-05  3.34e-06  4.78e-05  1.03e-06  1.57e-05  9.85e-01  
  8  +2.4030e-01  +2.4030e-01  8.91e-07  3.75e-08  5.33e-07  1.02e-08  1.78e-07  9.89e-01  
  9  +2.4030e-01  +2.4030e-01  8.91e-09  3.75e-10  5.33e-09  1.02e-10  1.78e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 264.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:11 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:11 PM: Optimal value: 2.403e-01
(CVXPY) Aug 31 04:58:11 PM: Compilation took 2.982e-03 seconds
(CVXPY) Aug 31 04:58:11 PM: Solver (including time spent in interface) took 1.006e-03 seconds
Iteration: 2, Objective: 0.2403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:11 PM: Your problem has 62 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:11 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:11 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:11 PM: Finished problem compilation (took 7.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 62
  constraints   = 87
  nnz(P)        = 0
  nnz(A)        = 416
  cones (total) = 1
    : Nonnegative = 1,  numel = 87

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6880e-01  +2.7349e+01  2.69e+01  8.53e-01  6.68e+00  1.00e+00  1.12e+00   ------   
  1  +4.4731e-01  +6.0968e+00  5.65e+00  3.79e-01  3.72e+00  3.95e-03  6.21e-01  5.90e-01  
  2  +3.2324e-01  +1.2411e+00  9.18e-01  7.63e-02  9.74e-01  2.47e-02  2.00e-01  9.81e-01  
  3  +2.5387e-01  +5.7242e-01  3.19e-01  2.17e-02  2.82e-01  8.30e-03  6.71e-02  8.29e-01  
  4  +2.0733e-01  +3.6510e-01  1.58e-01  7.79e-03  1.09e-01  4.59e-03  2.80e-02  6.53e-01  
  5  +1.7159e-01  +2.0510e-01  3.35e-02  1.53e-03  2.16e-02  7.02e-04  6.28e-03  8.27e-01  
  6  +1.6092e-01  +1.6200e-01  1.08e-03  4.94e-05  6.91e-04  1.46e-05  2.18e-04  9.70e-01  
  7  +1.6051e-01  +1.6053e-01  2.27e-05  1.06e-06  1.47e-05  1.51e-07  4.75e-06  9.78e-01  
  8  +1.6050e-01  +1.6050e-01  2.33e-07  1.10e-08  1.51e-07  1.56e-09  4.96e-08  9.90e-01  
  9  +1.6050e-01  +1.6050e-01  2.33e-09  1.10e-10  1.51e-09  1.56e-11  4.96e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 290.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:11 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:11 PM: Optimal value: 1.605e-01
(CVXPY) Aug 31 04:58:11 PM: Compilation took 7.002e-03 seconds
(CVXPY) Aug 31 04:58:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1605
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:12 PM: Your problem has 72 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Finished problem compilation (took 3.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 97
  nnz(P)        = 0
  nnz(A)        = 449
  cones (total) = 1
    : Nonnegative = 1,  numel = 97

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6050e-01  +2.7956e+01  2.75e+01  8.61e-01  6.46e+00  1.00e+00  1.15e+00   ------   
  1  +3.9387e-01  +6.3367e+00  5.94e+00  3.92e-01  3.61e+00  4.02e-03  6.42e-01  5.76e-01  
  2  +2.4180e-01  +1.3597e+00  1.12e+00  8.43e-02  9.95e-01  2.65e-02  2.22e-01  9.39e-01  
  3  +1.9047e-01  +5.3067e-01  3.40e-01  2.32e-02  2.88e-01  9.25e-03  7.19e-02  8.03e-01  
  4  +1.5578e-01  +3.1237e-01  1.57e-01  9.34e-03  1.25e-01  4.34e-03  3.16e-02  6.25e-01  
  5  +1.3011e-01  +1.7208e-01  4.20e-02  2.34e-03  3.20e-02  1.01e-03  8.81e-03  7.52e-01  
  6  +1.2107e-01  +1.2260e-01  1.53e-03  8.68e-05  1.17e-03  1.86e-05  3.44e-04  9.76e-01  
  7  +1.2065e-01  +1.2084e-01  1.84e-04  1.06e-05  1.41e-04  1.78e-06  4.44e-05  8.83e-01  
  8  +1.2060e-01  +1.2061e-01  5.64e-06  3.30e-07  4.34e-06  5.12e-08  1.41e-06  9.71e-01  
  9  +1.2060e-01  +1.2060e-01  5.64e-08  3.30e-09  4.34e-08  5.12e-10  1.41e-08  9.90e-01  
 10  +1.2060e-01  +1.2060e-01  5.65e-10  3.31e-11  4.35e-10  5.12e-12  1.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 296.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:12 PM: Optimal value: 1.206e-01
(CVXPY) Aug 31 04:58:12 PM: Compilation took 3.001e-03 seconds
(CVXPY) Aug 31 04:58:12 PM: Solver (including time spent in interface) took 9.973e-04 seconds
Iteration: 4, Objective: 0.1206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:12 PM: Your problem has 82 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Finished problem compilation (took 3.871e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 82
  constraints   = 107
  nnz(P)        = 0
  nnz(A)        = 475
  cones (total) = 1
    : Nonnegative = 1,  numel = 107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5195e-01  +2.7835e+01  2.74e+01  8.67e-01  6.24e+00  1.00e+00  1.14e+00   ------   
  1  +3.1841e-01  +6.4634e+00  6.14e+00  3.90e-01  3.41e+00  4.24e-03  6.29e-01  5.65e-01  
  2  +1.8074e-01  +1.1536e+00  9.73e-01  7.89e-02  8.76e-01  2.57e-02  1.95e-01  9.72e-01  
  3  +1.4347e-01  +3.5496e-01  2.11e-01  1.71e-02  1.95e-01  6.47e-03  4.95e-02  8.40e-01  
  4  +1.0826e-01  +2.2958e-01  1.21e-01  7.56e-03  9.68e-02  3.15e-03  2.55e-02  6.74e-01  
  5  +8.3405e-02  +9.3842e-02  1.04e-02  6.28e-04  7.96e-03  2.01e-04  2.34e-03  9.15e-01  
  6  +8.0963e-02  +8.1572e-02  6.09e-04  3.75e-05  4.70e-04  9.06e-06  1.44e-04  9.40e-01  
  7  +8.0811e-02  +8.0853e-02  4.23e-05  2.69e-06  3.31e-05  4.60e-07  1.10e-05  9.37e-01  
  8  +8.0800e-02  +8.0801e-02  4.43e-07  2.84e-08  3.49e-07  4.72e-09  1.16e-07  9.89e-01  
  9  +8.0800e-02  +8.0800e-02  4.43e-09  2.84e-10  3.49e-09  4.72e-11  1.16e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 318.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:12 PM: Optimal value: 8.080e-02
(CVXPY) Aug 31 04:58:12 PM: Compilation took 3.871e-03 seconds
(CVXPY) Aug 31 04:58:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:12 PM: Your problem has 92 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Finished problem compilation (took 3.839e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 92
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 521
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4813e-01  +2.7674e+01  2.72e+01  8.73e-01  6.12e+00  1.00e+00  1.13e+00   ------   
  1  +2.8238e-01  +6.5163e+00  6.23e+00  3.96e-01  3.29e+00  4.36e-03  6.19e-01  5.59e-01  
  2  +1.7128e-01  +1.0841e+00  9.13e-01  7.57e-02  8.27e-01  2.60e-02  1.87e-01  9.90e-01  
  3  +1.2674e-01  +3.3260e-01  2.06e-01  1.70e-02  1.88e-01  6.33e-03  4.83e-02  8.26e-01  
  4  +9.8589e-02  +1.8808e-01  8.95e-02  6.23e-03  7.50e-02  2.64e-03  1.95e-02  6.99e-01  
  5  +8.4255e-02  +1.0210e-01  1.78e-02  1.19e-03  1.45e-02  4.30e-04  3.90e-03  8.51e-01  
  6  +8.1046e-02  +8.2121e-02  1.08e-03  7.29e-05  8.77e-04  2.01e-05  2.45e-04  9.38e-01  
  7  +8.0848e-02  +8.1078e-02  2.31e-04  1.64e-05  1.90e-04  3.14e-06  6.14e-05  8.14e-01  
  8  +8.0802e-02  +8.0811e-02  9.30e-06  6.73e-07  7.75e-06  1.11e-07  2.59e-06  9.61e-01  
  9  +8.0800e-02  +8.0800e-02  9.41e-08  6.82e-09  7.84e-08  1.12e-09  2.63e-08  9.90e-01  
 10  +8.0800e-02  +8.0800e-02  9.41e-10  6.82e-11  7.85e-10  1.12e-11  2.63e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 599.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:12 PM: Optimal value: 8.080e-02
(CVXPY) Aug 31 04:58:12 PM: Compilation took 3.839e-03 seconds
(CVXPY) Aug 31 04:58:12 PM: Solver (including time spent in interface) took 1.012e-03 seconds
Iteration: 6, Objective: 0.0808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:12 PM: Your problem has 94 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Finished problem compilation (took 3.065e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 94
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 533
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4772e-01  +2.7684e+01  2.72e+01  8.74e-01  6.12e+00  1.00e+00  1.13e+00   ------   
  1  +2.7682e-01  +6.5714e+00  6.29e+00  4.00e-01  3.30e+00  4.38e-03  6.21e-01  5.55e-01  
  2  +1.6731e-01  +1.1447e+00  9.77e-01  8.07e-02  8.80e-01  2.63e-02  1.99e-01  9.69e-01  
  3  +1.2743e-01  +3.5746e-01  2.30e-01  1.90e-02  2.12e-01  7.16e-03  5.36e-02  7.89e-01  
  4  +1.0131e-01  +2.2204e-01  1.21e-01  8.47e-03  1.02e-01  3.87e-03  2.56e-02  5.87e-01  
  5  +7.9936e-02  +1.4444e-01  6.45e-02  3.56e-03  4.82e-02  1.30e-03  1.18e-02  8.33e-01  
  6  +6.2136e-02  +6.5817e-02  3.68e-03  1.95e-04  2.64e-03  4.23e-05  6.80e-04  9.67e-01  
  7  +6.1111e-02  +6.1657e-02  5.46e-04  3.01e-05  3.98e-04  4.74e-06  1.11e-04  8.47e-01  
  8  +6.0924e-02  +6.0982e-02  5.84e-05  3.29e-06  4.24e-05  4.52e-07  1.34e-05  9.09e-01  
  9  +6.0900e-02  +6.0901e-02  7.06e-07  4.00e-08  5.14e-07  5.13e-09  1.65e-07  9.88e-01  
 10  +6.0900e-02  +6.0900e-02  7.06e-09  4.00e-10  5.13e-09  5.13e-11  1.65e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 371.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:12 PM: Optimal value: 6.090e-02
(CVXPY) Aug 31 04:58:12 PM: Compilation took 3.065e-03 seconds
(CVXPY) Aug 31 04:58:12 PM: Solver (including time spent in interface) took 9.267e-04 seconds
Iteration: 7, Objective: 0.0609
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:12 PM: Your problem has 101 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Finished problem compilation (took 4.113e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 101
  constraints   = 126
  nnz(P)        = 0
  nnz(A)        = 560
  cones (total) = 1
    : Nonnegative = 1,  numel = 126

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3999e-01  +2.7386e+01  2.69e+01  8.76e-01  6.03e+00  1.00e+00  1.12e+00   ------   
  1  +2.4542e-01  +7.0532e+00  6.81e+00  4.29e-01  3.39e+00  4.59e-03  6.37e-01  5.11e-01  
  2  +1.5528e-01  +1.3731e+00  1.22e+00  1.05e-01  1.11e+00  3.15e-02  2.41e-01  9.32e-01  
  3  +1.2508e-01  +3.8856e-01  2.63e-01  2.38e-02  2.57e-01  8.61e-03  6.38e-02  7.50e-01  
  4  +8.9081e-02  +2.1607e-01  1.27e-01  9.64e-03  1.10e-01  3.54e-03  2.87e-02  7.01e-01  
  5  +6.6049e-02  +9.0356e-02  2.43e-02  1.68e-03  1.96e-02  5.52e-04  5.44e-03  8.51e-01  
  6  +6.1169e-02  +6.2264e-02  1.10e-03  7.61e-05  8.83e-04  1.90e-05  2.53e-04  9.54e-01  
  7  +6.0932e-02  +6.1083e-02  1.51e-04  1.10e-05  1.24e-04  1.70e-06  4.07e-05  8.86e-01  
  8  +6.0901e-02  +6.0904e-02  3.41e-06  2.52e-07  2.81e-06  3.52e-08  9.44e-07  9.80e-01  
  9  +6.0900e-02  +6.0900e-02  3.41e-08  2.52e-09  2.81e-08  3.52e-10  9.45e-09  9.90e-01  
 10  +6.0900e-02  +6.0900e-02  3.41e-10  2.52e-11  2.81e-10  3.52e-12  9.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 415.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:12 PM: Optimal value: 6.090e-02
(CVXPY) Aug 31 04:58:12 PM: Compilation took 4.113e-03 seconds
(CVXPY) Aug 31 04:58:12 PM: Solver (including time spent in interface) took 9.704e-04 seconds
Iteration: 8, Objective: 0.0609
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:12 PM: Your problem has 102 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:12 PM: Finished problem compilation (took 4.065e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 102
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 566
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3776e-01  +2.7356e+01  2.69e+01  8.77e-01  6.03e+00  1.00e+00  1.11e+00   ------   
  1  +2.3852e-01  +7.0831e+00  6.84e+00  4.31e-01  3.39e+00  4.62e-03  6.37e-01  5.08e-01  
  2  +1.4798e-01  +1.4601e+00  1.31e+00  1.13e-01  1.18e+00  3.12e-02  2.55e-01  9.00e-01  
  3  +1.1978e-01  +4.0808e-01  2.88e-01  2.65e-02  2.84e-01  8.82e-03  7.05e-02  7.41e-01  
  4  +7.9881e-02  +2.0150e-01  1.22e-01  9.44e-03  1.04e-01  2.94e-03  2.95e-02  7.37e-01  
  5  +6.2605e-02  +7.2621e-02  1.00e-02  7.51e-04  8.29e-03  1.52e-04  2.55e-03  9.47e-01  
  6  +6.0976e-02  +6.1775e-02  7.99e-04  6.12e-05  6.65e-04  8.54e-06  2.16e-04  9.16e-01  
  7  +6.0827e-02  +6.0954e-02  1.27e-04  9.95e-06  1.05e-04  1.09e-06  4.07e-05  8.46e-01  
  8  +6.0800e-02  +6.0802e-02  1.87e-06  1.47e-07  1.54e-06  1.31e-08  6.26e-07  9.86e-01  
  9  +6.0800e-02  +6.0800e-02  1.87e-08  1.46e-09  1.54e-08  1.31e-10  6.26e-09  9.90e-01  
 10  +6.0800e-02  +6.0800e-02  1.87e-10  1.46e-11  1.54e-10  1.31e-12  6.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.9729ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:12 PM: Optimal value: 6.080e-02
(CVXPY) Aug 31 04:58:12 PM: Compilation took 4.065e-03 seconds
(CVXPY) Aug 31 04:58:12 PM: Solver (including time spent in interface) took 2.903e-03 seconds
FULL MODEL:
  Accruacy: 0.94
  Our objective: 0.88

IF 
    (x1 = 1 AND x0 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.19999999999999996)
 OR (x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.12)
 OR (x3 = 1 AND x6 = 1 AND x7 = 1 AND x2 = 0)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.19999999999999996)
 OR (x4 = 1 AND x0 = 0 AND x2 = 0 AND x3 = 0)                       <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 1 AND x5 = 1 AND x7 = 1 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x1 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x2 = 0 AND x7 = 0) <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.2804222106933594
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 7
  Shortest hamming distance: 4
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

