Command:
python test_script.py -s smallest_subclass -d 6 -n 50 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.04
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 6.

Computed total variation: 0.72
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:57 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 238
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9463e-01  +2.5993e+01  2.55e+01  8.24e-01  6.12e+00  1.00e+00  1.07e+00   ------   
  1  +5.7957e-01  +5.5329e+00  4.95e+00  3.22e-01  3.36e+00  3.88e-03  5.58e-01  6.34e-01  
  2  +5.0057e-01  +1.0527e+00  5.52e-01  6.06e-02  7.59e-01  1.46e-02  1.69e-01  9.90e-01  
  3  +4.5374e-01  +8.0978e-01  3.56e-01  2.21e-02  2.90e-01  1.33e-02  7.06e-02  6.65e-01  
  4  +4.1654e-01  +5.3322e-01  1.17e-01  5.96e-03  7.72e-02  3.68e-03  2.34e-02  7.40e-01  
  5  +3.9160e-01  +4.2953e-01  3.79e-02  1.65e-03  2.13e-02  9.26e-04  7.75e-03  7.29e-01  
  6  +3.8070e-01  +3.8242e-01  1.72e-03  7.35e-05  9.48e-04  1.77e-05  3.75e-04  9.90e-01  
  7  +3.8011e-01  +3.8012e-01  1.72e-05  7.35e-07  9.48e-06  1.77e-07  3.77e-06  9.90e-01  
  8  +3.8010e-01  +3.8010e-01  1.72e-07  7.35e-09  9.48e-08  1.77e-09  3.77e-08  9.90e-01  
  9  +3.8010e-01  +3.8010e-01  1.72e-09  7.35e-11  9.48e-10  1.77e-11  3.77e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 190.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:57 PM: Optimal value: 3.801e-01
(CVXPY) Aug 31 04:49:57 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 31 04:49:57 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:57 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 300
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8442e-01  +2.6381e+01  2.59e+01  8.38e-01  6.15e+00  1.00e+00  1.10e+00   ------   
  1  +5.2772e-01  +5.6369e+00  5.11e+00  3.38e-01  3.30e+00  3.92e-03  5.74e-01  6.26e-01  
  2  +4.4238e-01  +1.2394e+00  7.97e-01  7.33e-02  9.11e-01  1.68e-02  1.93e-01  9.16e-01  
  3  +3.6960e-01  +7.0113e-01  3.32e-01  2.16e-02  2.78e-01  8.56e-03  6.66e-02  7.07e-01  
  4  +3.1231e-01  +4.4004e-01  1.28e-01  6.51e-03  8.53e-02  3.19e-03  2.29e-02  7.04e-01  
  5  +2.8661e-01  +3.1153e-01  2.49e-02  1.25e-03  1.64e-02  5.45e-04  4.69e-03  8.12e-01  
  6  +2.8042e-01  +2.8086e-01  4.33e-04  2.19e-05  2.86e-04  6.53e-06  8.45e-05  9.83e-01  
  7  +2.8031e-01  +2.8034e-01  3.12e-05  1.67e-06  2.12e-05  3.07e-07  6.92e-06  9.27e-01  
  8  +2.8030e-01  +2.8030e-01  3.51e-07  1.89e-08  2.39e-07  3.44e-09  7.92e-08  9.89e-01  
  9  +2.8030e-01  +2.8030e-01  3.51e-09  1.89e-10  2.39e-09  3.44e-11  7.93e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 251.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:57 PM: Optimal value: 2.803e-01
(CVXPY) Aug 31 04:49:57 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 31 04:49:57 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:57 PM: Your problem has 58 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 58
  constraints   = 83
  nnz(P)        = 0
  nnz(A)        = 358
  cones (total) = 1
    : Nonnegative = 1,  numel = 83

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7208e-01  +2.6733e+01  2.63e+01  8.48e-01  6.14e+00  1.00e+00  1.11e+00   ------   
  1  +4.6826e-01  +5.7709e+00  5.30e+00  3.53e-01  3.28e+00  3.97e-03  5.89e-01  6.15e-01  
  2  +3.4830e-01  +1.1699e+00  8.22e-01  6.33e-02  7.70e-01  1.96e-02  1.67e-01  9.58e-01  
  3  +2.5138e-01  +5.6099e-01  3.10e-01  1.90e-02  2.34e-01  6.54e-03  5.95e-02  7.90e-01  
  4  +1.9423e-01  +3.1210e-01  1.18e-01  5.94e-03  7.86e-02  2.24e-03  2.15e-02  7.36e-01  
  5  +1.6537e-01  +1.8117e-01  1.58e-02  7.73e-04  1.02e-02  2.45e-04  3.11e-03  8.66e-01  
  6  +1.6071e-01  +1.6102e-01  3.10e-04  1.53e-05  2.00e-04  3.03e-06  6.33e-05  9.81e-01  
  7  +1.6060e-01  +1.6061e-01  8.40e-06  4.46e-07  5.59e-06  2.89e-08  1.99e-06  9.71e-01  
  8  +1.6060e-01  +1.6060e-01  8.38e-08  4.46e-09  5.58e-08  2.90e-10  2.00e-08  9.90e-01  
  9  +1.6060e-01  +1.6060e-01  8.40e-10  4.48e-11  5.60e-10  2.91e-12  2.01e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 245.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:57 PM: Optimal value: 1.606e-01
(CVXPY) Aug 31 04:49:57 PM: Compilation took 0.000e+00 seconds
(CVXPY) Aug 31 04:49:57 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:57 PM: Your problem has 67 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 92
  nnz(P)        = 0
  nnz(A)        = 386
  cones (total) = 1
    : Nonnegative = 1,  numel = 92

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6849e-01  +2.6933e+01  2.65e+01  8.55e-01  5.94e+00  1.00e+00  1.12e+00   ------   
  1  +4.3375e-01  +5.8744e+00  5.44e+00  3.60e-01  3.12e+00  4.06e-03  5.89e-01  6.09e-01  
  2  +2.9537e-01  +1.2151e+00  9.20e-01  6.66e-02  7.73e-01  1.97e-02  1.74e-01  9.28e-01  
  3  +2.2621e-01  +7.2268e-01  4.96e-01  3.18e-02  3.69e-01  9.64e-03  9.49e-02  6.98e-01  
  4  +1.7685e-01  +2.8913e-01  1.12e-01  6.80e-03  8.09e-02  2.14e-03  2.35e-02  7.91e-01  
  5  +1.6040e-01  +2.2947e-01  6.91e-02  3.72e-03  4.76e-02  1.20e-03  1.33e-02  5.83e-01  
  6  +1.4196e-01  +1.4602e-01  4.06e-03  2.15e-04  2.73e-03  4.84e-05  8.35e-04  9.57e-01  
  7  +1.4075e-01  +1.4092e-01  1.70e-04  9.31e-06  1.16e-04  8.54e-07  3.75e-05  9.55e-01  
  8  +1.4070e-01  +1.4071e-01  5.84e-06  3.36e-07  4.06e-06  3.14e-08  1.44e-06  9.64e-01  
  9  +1.4070e-01  +1.4070e-01  5.84e-08  3.37e-09  4.06e-08  3.14e-10  1.45e-08  9.90e-01  
 10  +1.4070e-01  +1.4070e-01  5.84e-10  3.37e-11  4.07e-10  3.15e-12  1.45e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 288.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:57 PM: Optimal value: 1.407e-01
(CVXPY) Aug 31 04:49:57 PM: Compilation took 1.564e-02 seconds
(CVXPY) Aug 31 04:49:57 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:49:57 PM: Your problem has 72 variables, 25 constraints, and 0 parameters.
(CVXPY) Aug 31 04:49:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:49:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:49:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:49:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:49:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:49:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:49:57 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:49:57 PM: Finished problem compilation (took 2.916e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 97
  nnz(P)        = 0
  nnz(A)        = 406
  cones (total) = 1
    : Nonnegative = 1,  numel = 97

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6506e-01  +2.7032e+01  2.66e+01  8.59e-01  5.87e+00  1.00e+00  1.13e+00   ------   
  1  +4.1152e-01  +5.9644e+00  5.55e+00  3.66e-01  3.09e+00  4.11e-03  5.94e-01  6.01e-01  
  2  +2.8527e-01  +1.3534e+00  1.07e+00  7.93e-02  8.86e-01  1.92e-02  2.06e-01  8.70e-01  
  3  +2.2005e-01  +6.9540e-01  4.75e-01  3.14e-02  3.57e-01  9.21e-03  9.41e-02  7.81e-01  
  4  +1.7424e-01  +2.8527e-01  1.11e-01  6.82e-03  8.09e-02  2.20e-03  2.37e-02  8.01e-01  
  5  +1.5893e-01  +2.2627e-01  6.73e-02  3.68e-03  4.70e-02  1.19e-03  1.33e-02  6.06e-01  
  6  +1.4219e-01  +1.4770e-01  5.51e-03  2.95e-04  3.76e-03  8.05e-05  1.14e-03  9.30e-01  
  7  +1.4081e-01  +1.4123e-01  4.21e-04  2.33e-05  2.92e-04  4.01e-06  9.35e-05  9.19e-01  
  8  +1.4071e-01  +1.4075e-01  3.49e-05  2.05e-06  2.46e-05  2.98e-07  8.80e-06  9.29e-01  
  9  +1.4070e-01  +1.4070e-01  3.87e-07  2.30e-08  2.73e-07  3.19e-09  9.99e-08  9.89e-01  
 10  +1.4070e-01  +1.4070e-01  3.87e-09  2.30e-10  2.73e-09  3.18e-11  1.00e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 304.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:49:57 PM: Problem status: optimal
(CVXPY) Aug 31 04:49:57 PM: Optimal value: 1.407e-01
(CVXPY) Aug 31 04:49:57 PM: Compilation took 2.916e-03 seconds
(CVXPY) Aug 31 04:49:57 PM: Solver (including time spent in interface) took 1.099e-03 seconds
FULL MODEL:
  Accruacy: 0.82
  Our objective: 0.64

IF 
    (x4 = 1 AND x0 = 0 AND x2 = 0)                       <-- (term's our objective: 0.2)
 OR (x1 = 0 AND x3 = 0 AND x5 = 0)                       <-- (term's our objective: 0.19999999999999996)
 OR (x0 = 0 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.16000000000000003)
 OR (x4 = 1 AND x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.16000000000000003)
 OR (x0 = 1 AND x3 = 1 AND x5 = 1 AND x1 = 0 AND x4 = 0) <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.07999999999999996)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.8327610492706299
Best over terms:
  Our final objective: 0.2
    Its accruacy: 0.6
    Its hamming distance: 5
  Shortest hamming distance: 3
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

