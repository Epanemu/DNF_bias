Command:
python test_script.py -s smallest_subclass -d 4 -n 1000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.106
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.184
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:50 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:50 PM: Finished problem compilation (took 4.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9977e-01  +5.0080e+02  5.00e+02  9.51e-01  2.66e+01  1.00e+00  1.00e+00   ------   
  1  +6.0773e-01  +9.7282e+01  9.67e+01  3.26e-01  1.46e+01  4.10e-03  4.74e-01  6.68e-01  
  2  +5.4939e-01  +1.5189e+01  1.46e+01  1.23e-01  6.68e+00  8.34e-03  2.22e-01  7.40e-01  
  3  +5.0258e-01  +1.9285e+00  1.43e+00  2.95e-02  1.53e+00  8.65e-06  2.09e-01  3.09e-01  
  4  +5.0036e-01  +7.1797e-01  2.18e-01  4.61e-03  2.47e-01  2.43e-06  5.36e-02  7.85e-01  
  5  +4.9864e-01  +7.4042e-01  2.42e-01  2.86e-03  1.56e-01  1.19e-05  1.02e-02  8.69e-01  
  6  +4.8633e-01  +6.5079e-01  1.64e-01  4.24e-04  2.33e-02  5.32e-05  1.28e-03  8.75e-01  
  7  +4.6519e-01  +5.2463e-01  5.94e-02  1.52e-04  8.28e-03  1.65e-05  5.38e-04  7.94e-01  
  8  +4.5305e-01  +4.6500e-01  1.20e-02  2.72e-05  1.48e-03  2.71e-06  1.08e-04  8.11e-01  
  9  +4.4954e-01  +4.5093e-01  1.39e-03  2.89e-06  1.57e-04  5.91e-07  1.26e-05  9.90e-01  
 10  +4.4910e-01  +4.4912e-01  1.41e-05  2.93e-08  1.60e-06  6.00e-09  1.29e-07  9.90e-01  
 11  +4.4910e-01  +4.4910e-01  1.41e-07  2.93e-10  1.60e-08  6.00e-11  1.29e-09  9.90e-01  
 12  +4.4910e-01  +4.4910e-01  1.41e-09  2.93e-12  1.60e-10  6.01e-13  1.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.6052ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:50 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:50 PM: Optimal value: 4.491e-01
(CVXPY) Aug 31 04:46:50 PM: Compilation took 4.006e-03 seconds
(CVXPY) Aug 31 04:46:50 PM: Solver (including time spent in interface) took 3.992e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4491
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:50 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:50 PM: Finished problem compilation (took 3.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4650
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0148e+02  5.01e+02  9.52e-01  2.88e+01  1.00e+00  1.02e+00   ------   
  1  +6.0566e-01  +9.8195e+01  9.76e+01  3.34e-01  1.59e+01  4.07e-03  4.89e-01  6.62e-01  
  2  +5.4756e-01  +1.4872e+01  1.43e+01  1.23e-01  7.07e+00  8.86e-03  2.25e-01  7.59e-01  
  3  +5.0207e-01  +1.8635e+00  1.36e+00  2.86e-02  1.59e+00  3.47e-05  2.07e-01  3.83e-01  
  4  +5.0051e-01  +9.2945e-01  4.29e-01  9.15e-03  5.24e-01  1.44e-05  8.19e-02  6.66e-01  
  5  +4.9598e-01  +1.2188e+00  7.23e-01  5.40e-03  3.17e-01  9.10e-05  1.69e-02  9.90e-01  
  6  +4.8424e-01  +9.1403e-01  4.30e-01  1.55e-03  9.14e-02  1.22e-04  4.80e-03  7.32e-01  
  7  +4.8227e-01  +8.5799e-01  3.76e-01  1.14e-03  6.76e-02  1.25e-04  3.49e-03  4.72e-01  
  8  +4.7821e-01  +6.9953e-01  2.21e-01  6.11e-04  3.61e-02  8.10e-05  1.86e-03  9.90e-01  
  9  +4.7128e-01  +6.6331e-01  1.92e-01  4.33e-04  2.55e-02  8.14e-05  1.33e-03  3.65e-01  
 10  +4.5654e-01  +5.8142e-01  1.25e-01  2.81e-04  1.65e-02  4.85e-05  9.19e-04  6.64e-01  
 11  +4.3379e-01  +4.7567e-01  4.19e-02  7.84e-05  4.59e-03  1.89e-05  2.68e-04  7.77e-01  
 12  +4.2885e-01  +4.5954e-01  3.07e-02  5.42e-05  3.17e-03  1.52e-05  1.87e-04  4.42e-01  
 13  +4.1878e-01  +4.2240e-01  3.63e-03  6.29e-06  3.68e-04  2.19e-06  2.28e-05  9.90e-01  
 14  +4.1723e-01  +4.1730e-01  6.82e-05  1.18e-07  6.89e-06  4.04e-08  4.31e-07  9.81e-01  
 15  +4.1720e-01  +4.1720e-01  6.82e-07  1.18e-09  6.89e-08  4.04e-10  4.31e-09  9.90e-01  
 16  +4.1720e-01  +4.1720e-01  6.82e-09  1.18e-11  6.89e-10  4.04e-12  4.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7298ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:50 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:50 PM: Optimal value: 4.172e-01
(CVXPY) Aug 31 04:46:50 PM: Compilation took 3.003e-03 seconds
(CVXPY) Aug 31 04:46:50 PM: Solver (including time spent in interface) took 4.974e-03 seconds
Iteration: 2, Objective: 0.4172
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:50 PM: Your problem has 520 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:50 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:50 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:50 PM: Finished problem compilation (took 3.105e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 520
  constraints   = 1020
  nnz(P)        = 0
  nnz(A)        = 4721
  cones (total) = 1
    : Nonnegative = 1,  numel = 1020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0128e+02  5.01e+02  9.52e-01  2.89e+01  1.00e+00  1.02e+00   ------   
  1  +6.0556e-01  +9.8187e+01  9.76e+01  3.34e-01  1.59e+01  4.07e-03  4.89e-01  6.62e-01  
  2  +5.4743e-01  +1.4841e+01  1.43e+01  1.22e-01  7.06e+00  8.88e-03  2.24e-01  7.61e-01  
  3  +5.0187e-01  +1.8098e+00  1.31e+00  2.75e-02  1.54e+00  8.89e-06  2.05e-01  4.03e-01  
  4  +5.0041e-01  +9.0480e-01  4.04e-01  8.60e-03  4.94e-01  4.41e-06  7.71e-02  6.66e-01  
  5  +4.9420e-01  +1.2952e+00  8.01e-01  4.80e-03  2.83e-01  4.74e-05  1.46e-02  9.90e-01  
  6  +4.8251e-01  +1.0222e+00  5.40e-01  1.70e-03  1.01e-01  6.73e-05  5.11e-03  6.72e-01  
  7  +4.6508e-01  +7.2088e-01  2.56e-01  5.79e-04  3.42e-02  7.43e-05  1.78e-03  8.10e-01  
  8  +4.5827e-01  +6.5155e-01  1.93e-01  4.52e-04  2.66e-02  6.56e-05  1.45e-03  4.67e-01  
  9  +4.3219e-01  +5.1442e-01  8.22e-02  1.68e-04  9.86e-03  2.60e-05  5.91e-04  6.60e-01  
 10  +4.2916e-01  +4.9909e-01  6.99e-02  1.39e-04  8.14e-03  2.60e-05  4.96e-04  3.16e-01  
 11  +4.1481e-01  +4.3326e-01  1.84e-02  3.60e-05  2.11e-03  1.01e-05  1.40e-04  9.90e-01  
 12  +4.0869e-01  +4.0979e-01  1.10e-03  2.13e-06  1.24e-04  5.46e-07  8.73e-06  9.40e-01  
 13  +4.0830e-01  +4.0831e-01  1.10e-05  2.13e-08  1.25e-06  5.45e-09  8.78e-08  9.90e-01  
 14  +4.0830e-01  +4.0830e-01  1.10e-07  2.13e-10  1.25e-08  5.45e-11  8.78e-10  9.90e-01  
 15  +4.0830e-01  +4.0830e-01  1.10e-09  2.13e-12  1.25e-10  5.45e-13  8.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.3151ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:50 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:50 PM: Optimal value: 4.083e-01
(CVXPY) Aug 31 04:46:50 PM: Compilation took 3.105e-03 seconds
(CVXPY) Aug 31 04:46:50 PM: Solver (including time spent in interface) took 3.985e-03 seconds
Iteration: 3, Objective: 0.4083
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:51 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:51 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:51 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:51 PM: Finished problem compilation (took 3.522e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 4796
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0128e+02  5.01e+02  9.52e-01  2.90e+01  1.00e+00  1.02e+00   ------   
  1  +6.0526e-01  +9.8310e+01  9.77e+01  3.35e-01  1.60e+01  4.06e-03  4.90e-01  6.61e-01  
  2  +5.4723e-01  +1.4804e+01  1.43e+01  1.23e-01  7.08e+00  8.93e-03  2.25e-01  7.63e-01  
  3  +5.0198e-01  +1.8403e+00  1.34e+00  2.82e-02  1.58e+00  9.16e-06  2.06e-01  3.97e-01  
  4  +5.0046e-01  +9.1657e-01  4.16e-01  8.86e-03  5.10e-01  4.18e-06  7.94e-02  6.44e-01  
  5  +4.9493e-01  +1.2432e+00  7.48e-01  4.91e-03  2.90e-01  4.16e-05  1.50e-02  9.90e-01  
  6  +4.8390e-01  +1.0402e+00  5.56e-01  1.86e-03  1.10e-01  6.19e-05  5.59e-03  6.32e-01  
  7  +4.6229e-01  +7.2499e-01  2.63e-01  5.74e-04  3.40e-02  6.16e-05  1.78e-03  7.62e-01  
  8  +4.5601e-01  +6.4757e-01  1.92e-01  4.37e-04  2.58e-02  6.37e-05  1.42e-03  5.07e-01  
  9  +4.2983e-01  +5.0322e-01  7.34e-02  1.51e-04  8.85e-03  2.27e-05  5.36e-04  7.11e-01  
 10  +4.2916e-01  +4.9929e-01  7.01e-02  1.39e-04  8.18e-03  2.52e-05  4.94e-04  2.15e-01  
 11  +4.1592e-01  +4.3759e-01  2.17e-02  4.25e-05  2.49e-03  1.21e-05  1.64e-04  9.90e-01  
 12  +4.0893e-01  +4.1071e-01  1.78e-03  3.45e-06  2.02e-04  8.95e-07  1.41e-05  9.18e-01  
 13  +4.0831e-01  +4.0832e-01  1.83e-05  3.55e-08  2.08e-06  9.05e-09  1.46e-07  9.90e-01  
 14  +4.0830e-01  +4.0830e-01  1.83e-07  3.55e-10  2.08e-08  9.05e-11  1.46e-09  9.90e-01  
 15  +4.0830e-01  +4.0830e-01  1.83e-09  3.55e-12  2.08e-10  9.05e-13  1.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.2762ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:51 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:51 PM: Optimal value: 4.083e-01
(CVXPY) Aug 31 04:46:51 PM: Compilation took 3.522e-03 seconds
(CVXPY) Aug 31 04:46:51 PM: Solver (including time spent in interface) took 4.514e-03 seconds
Iteration: 4, Objective: 0.4083
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:46:51 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:46:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:46:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:46:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:46:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:46:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:46:51 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:46:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:46:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:46:51 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:46:51 PM: Finished problem compilation (took 3.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 4870
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0116e+02  5.01e+02  9.52e-01  2.90e+01  1.00e+00  1.02e+00   ------   
  1  +6.0542e-01  +9.8342e+01  9.77e+01  3.35e-01  1.60e+01  4.07e-03  4.91e-01  6.61e-01  
  2  +5.4707e-01  +1.4770e+01  1.42e+01  1.23e-01  7.07e+00  8.96e-03  2.25e-01  7.63e-01  
  3  +5.0193e-01  +1.8302e+00  1.33e+00  2.80e-02  1.57e+00  9.16e-06  2.06e-01  4.03e-01  
  4  +5.0047e-01  +9.4097e-01  4.41e-01  9.39e-03  5.40e-01  4.34e-06  8.31e-02  6.24e-01  
  5  +4.9580e-01  +1.2008e+00  7.05e-01  5.37e-03  3.16e-01  3.69e-05  1.68e-02  9.90e-01  
  6  +4.8553e-01  +9.8838e-01  5.03e-01  1.77e-03  1.05e-01  6.71e-05  5.35e-03  7.21e-01  
  7  +4.7296e-01  +8.1627e-01  3.43e-01  8.79e-04  5.21e-02  7.59e-05  2.70e-03  6.09e-01  
  8  +4.5955e-01  +6.4822e-01  1.89e-01  4.50e-04  2.66e-02  7.13e-05  1.46e-03  8.67e-01  
  9  +4.2647e-01  +4.7835e-01  5.19e-02  1.07e-04  6.28e-03  1.40e-05  3.89e-04  7.98e-01  
 10  +4.2572e-01  +4.7731e-01  5.16e-02  1.02e-04  5.99e-03  1.53e-05  3.68e-04  1.13e-01  
 11  +4.1614e-01  +4.3793e-01  2.18e-02  4.32e-05  2.53e-03  1.23e-05  1.67e-04  9.90e-01  
 12  +4.0919e-01  +4.1173e-01  2.54e-03  4.94e-06  2.89e-04  1.30e-06  2.02e-05  9.32e-01  
 13  +4.0831e-01  +4.0834e-01  2.98e-05  5.80e-08  3.39e-06  1.50e-08  2.39e-07  9.90e-01  
 14  +4.0830e-01  +4.0830e-01  2.98e-07  5.80e-10  3.39e-08  1.50e-10  2.39e-09  9.90e-01  
 15  +4.0830e-01  +4.0830e-01  2.98e-09  5.80e-12  3.39e-10  1.50e-12  2.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.2278ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:46:51 PM: Problem status: optimal
(CVXPY) Aug 31 04:46:51 PM: Optimal value: 4.083e-01
(CVXPY) Aug 31 04:46:51 PM: Compilation took 3.007e-03 seconds
(CVXPY) Aug 31 04:46:51 PM: Solver (including time spent in interface) took 4.003e-03 seconds
FULL MODEL:
  Accruacy: 0.592
  Our objective: 0.184

IF 
    (x3 = 1 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.05200000000000002)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0)            <-- (term's our objective: 0.018000000000000016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.106)
 OR (x2 = 1 AND x0 = 0 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.007999999999999952)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.5438048839569092
Best over terms:
  Our final objective: 0.106
    Its accruacy: 0.553
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.106
  Highest accruacy: 0.553
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

