Command:
python test_script.py -s smallest_subclass -d 7 -n 10 --seed 56 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 7.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:03 PM: Your problem has 20 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:03 PM: Finished problem compilation (took 3.598e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 20
  constraints   = 25
  nnz(P)        = 0
  nnz(A)        = 65
  cones (total) = 1
    : Nonnegative = 1,  numel = 25

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5634e-01  +6.4152e+00  5.96e+00  7.51e-01  2.60e+00  1.00e+00  1.35e+00   ------   
  1  +4.0060e-01  +1.1866e+00  7.86e-01  2.46e-01  1.04e+00  3.73e-03  5.70e-01  7.53e-01  
  2  +1.7560e-01  +3.2701e-01  1.51e-01  4.39e-02  1.99e-01  6.67e-03  1.43e-01  8.24e-01  
  3  +1.4069e-01  +2.4424e-01  1.04e-01  1.94e-02  1.05e-01  6.70e-03  7.67e-02  6.83e-01  
  4  +1.0183e-01  +1.0609e-01  4.27e-03  7.71e-04  4.23e-03  2.92e-04  3.29e-03  9.59e-01  
  5  +1.0023e-01  +1.0030e-01  7.42e-05  1.41e-05  7.66e-05  2.91e-06  6.03e-05  9.82e-01  
  6  +1.0020e-01  +1.0020e-01  2.66e-06  5.73e-07  2.94e-06  9.87e-08  2.52e-06  9.60e-01  
  7  +1.0020e-01  +1.0020e-01  2.67e-08  5.76e-09  2.95e-08  9.91e-10  2.54e-08  9.90e-01  
  8  +1.0020e-01  +1.0020e-01  2.67e-10  5.76e-11  2.95e-10  9.91e-12  2.54e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:03 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:03 PM: Optimal value: 1.002e-01
(CVXPY) Aug 31 04:53:03 PM: Compilation took 3.598e-03 seconds
(CVXPY) Aug 31 04:53:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:03 PM: Your problem has 30 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:03 PM: Finished problem compilation (took 2.470e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 35
  nnz(P)        = 0
  nnz(A)        = 93
  cones (total) = 1
    : Nonnegative = 1,  numel = 35

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.8934e-01  +6.4709e+00  6.08e+00  7.88e-01  2.66e+00  1.00e+00  1.35e+00   ------   
  1  +1.9955e-01  +1.1004e+00  9.01e-01  2.84e-01  1.04e+00  4.25e-03  5.59e-01  7.10e-01  
  2  +4.7032e-02  +2.3563e-01  1.89e-01  6.12e-02  2.57e-01  8.22e-03  1.72e-01  7.74e-01  
  3  +1.1656e-02  +9.9768e-02  8.81e-02  2.22e-02  1.09e-01  5.30e-03  7.32e-02  7.05e-01  
  4  +5.4804e-04  +2.4577e-03  1.91e-03  4.91e-04  2.43e-03  1.24e-04  1.71e-03  9.77e-01  
  5  +2.7195e-04  +4.4158e-04  1.70e-04  4.82e-05  2.27e-04  6.95e-06  1.69e-04  9.02e-01  
  6  +2.0828e-04  +2.3738e-04  2.91e-05  9.51e-06  3.97e-05  1.50e-06  4.00e-05  9.60e-01  
  7  +2.0015e-04  +2.0064e-04  4.91e-07  1.63e-07  6.77e-07  2.24e-08  6.98e-07  9.83e-01  
  8  +2.0000e-04  +2.0001e-04  4.91e-09  1.63e-09  6.77e-09  2.24e-10  6.99e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:03 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:03 PM: Optimal value: 2.000e-04
(CVXPY) Aug 31 04:53:03 PM: Compilation took 2.470e-03 seconds
(CVXPY) Aug 31 04:53:03 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:53:03 PM: Your problem has 31 variables, 5 constraints, and 0 parameters.
(CVXPY) Aug 31 04:53:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:53:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:53:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:53:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:53:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:53:03 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:53:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:53:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:53:03 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:53:03 PM: Finished problem compilation (took 2.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 31
  constraints   = 36
  nnz(P)        = 0
  nnz(A)        = 96
  cones (total) = 1
    : Nonnegative = 1,  numel = 36

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.7406e-01  +6.4594e+00  6.09e+00  7.91e-01  2.67e+00  1.00e+00  1.35e+00   ------   
  1  +1.5651e-01  +1.0816e+00  9.25e-01  2.90e-01  1.05e+00  4.35e-03  5.62e-01  7.00e-01  
  2  +1.0753e-02  +1.8455e-01  1.74e-01  5.99e-02  2.40e-01  8.59e-03  1.64e-01  7.99e-01  
  3  +8.0982e-04  +1.1075e-02  1.03e-02  3.56e-03  1.48e-02  7.35e-04  1.11e-02  9.41e-01  
  4  +2.4790e-04  +4.2357e-04  1.76e-04  6.37e-05  2.62e-04  8.11e-06  2.00e-04  9.82e-01  
  5  +2.2698e-04  +2.7994e-04  5.30e-05  2.11e-05  8.17e-05  2.41e-06  7.08e-05  7.08e-01  
  6  +2.0306e-04  +2.1374e-04  1.07e-05  3.63e-06  1.49e-05  5.06e-07  1.56e-05  9.90e-01  
  7  +2.0004e-04  +2.0016e-04  1.19e-07  4.00e-08  1.66e-07  5.47e-09  1.77e-07  9.89e-01  
  8  +2.0000e-04  +2.0000e-04  1.19e-09  4.00e-10  1.66e-09  5.47e-11  1.77e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 120.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:53:03 PM: Problem status: optimal
(CVXPY) Aug 31 04:53:03 PM: Optimal value: 2.000e-04
(CVXPY) Aug 31 04:53:03 PM: Compilation took 2.002e-03 seconds
(CVXPY) Aug 31 04:53:03 PM: Solver (including time spent in interface) took 9.992e-04 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x4 = 1)                       <-- (term's our objective: 0.6)
 OR (x3 = 1 AND x0 = 0 AND x6 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.822413444519043
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 8
  Shortest hamming distance: 6
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

