Command:
python test_script.py -s smallest_subclass -d 3 -n 5000 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1452
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.1452
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:47 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:47 PM: Finished problem compilation (took 7.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5007e+03  2.50e+03  9.77e-01  5.51e+01  1.00e+00  1.00e+00   ------   
  1  +6.2007e-01  +4.6378e+02  4.63e+02  3.04e-01  2.87e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5566e-01  +7.9502e+01  7.89e+01  1.33e-01  1.49e+01  6.69e-03  2.20e-01  6.64e-01  
  3  +5.0839e-01  +1.2934e+01  1.24e+01  8.53e-02  9.18e+00  1.06e-05  2.18e-01  6.49e-02  
  4  +5.0001e-01  +1.0613e+00  5.61e-01  5.31e-03  5.86e-01  5.18e-06  1.60e-01  6.44e-01  
  5  +4.9994e-01  +6.3702e-01  1.37e-01  1.29e-03  1.44e-01  2.03e-06  3.35e-02  8.13e-01  
  6  +4.9264e-01  +1.3019e+00  8.09e-01  1.20e-03  1.34e-01  9.46e-05  3.97e-03  9.90e-01  
  7  +4.7482e-01  +7.7879e-01  3.04e-01  1.56e-04  1.75e-02  1.67e-04  5.13e-04  8.76e-01  
  8  +4.5713e-01  +4.9858e-01  4.15e-02  1.89e-05  2.12e-03  3.13e-06  6.98e-05  9.11e-01  
  9  +4.4593e-01  +4.5184e-01  5.92e-03  2.49e-06  2.79e-04  3.99e-07  1.05e-05  8.63e-01  
 10  +4.4433e-01  +4.4503e-01  6.95e-04  2.92e-07  3.26e-05  6.18e-08  1.26e-06  9.90e-01  
 11  +4.4410e-01  +4.4411e-01  7.00e-06  2.94e-09  3.28e-07  6.21e-10  1.27e-08  9.90e-01  
 12  +4.4410e-01  +4.4410e-01  7.00e-08  2.94e-11  3.28e-09  6.21e-12  1.27e-10  9.90e-01  
 13  +4.4410e-01  +4.4410e-01  7.00e-10  2.94e-13  3.28e-11  6.21e-14  1.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.5993ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:47 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:47 PM: Optimal value: 4.441e-01
(CVXPY) Aug 31 04:45:47 PM: Compilation took 7.000e-03 seconds
(CVXPY) Aug 31 04:45:47 PM: Solver (including time spent in interface) took 1.472e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:47 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:47 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:47 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:47 PM: Finished problem compilation (took 5.738e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 17834
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0001e-01  +2.5016e+03  2.50e+03  9.77e-01  5.86e+01  1.00e+00  1.01e+00   ------   
  1  +6.1974e-01  +4.6515e+02  4.65e+02  3.06e-01  3.05e+01  4.24e-03  4.40e-01  6.92e-01  
  2  +5.5526e-01  +7.9172e+01  7.86e+01  1.33e-01  1.58e+01  6.80e-03  2.22e-01  6.68e-01  
  3  +5.0813e-01  +1.2662e+01  1.22e+01  8.46e-02  9.62e+00  1.06e-05  2.19e-01  7.04e-02  
  4  +5.0118e-01  +2.7721e+00  2.27e+00  2.13e-02  2.44e+00  6.30e-06  2.01e-01  1.93e-01  
  5  +5.0007e-01  +7.9452e-01  2.94e-01  2.80e-03  3.28e-01  1.83e-06  6.79e-02  7.91e-01  
  6  +4.9998e-01  +1.0325e+00  5.33e-01  4.70e-03  5.51e-01  5.08e-06  3.45e-02  7.82e-01  
  7  +4.9783e-01  +7.6617e-01  2.68e-01  7.23e-04  8.60e-02  2.64e-05  2.35e-03  9.37e-01  
  8  +4.9204e-01  +7.1450e-01  2.22e-01  2.19e-04  2.61e-02  6.74e-05  6.67e-04  7.27e-01  
  9  +4.8827e-01  +6.8372e-01  1.95e-01  1.57e-04  1.87e-02  6.63e-05  4.70e-04  3.45e-01  
 10  +4.8979e-01  +6.8468e-01  1.95e-01  1.31e-04  1.56e-02  2.27e-05  3.78e-04  8.49e-01  
 11  +4.8950e-01  +6.8368e-01  1.94e-01  1.31e-04  1.55e-02  2.23e-05  3.77e-04  2.67e-02  
 12  +4.8095e-01  +6.3577e-01  1.55e-01  7.47e-05  8.89e-03  2.22e-05  2.16e-04  5.08e-01  
 13  +4.7849e-01  +6.2366e-01  1.45e-01  7.33e-05  8.72e-03  1.89e-05  2.15e-04  7.14e-02  
 14  +4.7721e-01  +6.1732e-01  1.40e-01  6.14e-05  7.30e-03  1.48e-05  1.77e-04  8.21e-01  
 15  +4.6810e-01  +5.7756e-01  1.09e-01  4.69e-05  5.57e-03  1.05e-05  1.39e-04  4.96e-01  
 16  +4.5180e-01  +5.1643e-01  6.46e-02  2.20e-05  2.60e-03  7.26e-06  6.61e-05  5.50e-01  
 17  +4.3924e-01  +4.6683e-01  2.76e-02  9.21e-06  1.09e-03  3.47e-06  2.90e-05  9.90e-01  
 18  +4.2945e-01  +4.3317e-01  3.72e-03  1.18e-06  1.40e-04  5.39e-07  3.77e-06  8.86e-01  
 19  +4.2752e-01  +4.2757e-01  4.26e-05  1.34e-08  1.58e-06  5.58e-09  4.30e-08  9.89e-01  
 20  +4.2750e-01  +4.2750e-01  4.26e-07  1.34e-10  1.58e-08  5.58e-11  4.30e-10  9.90e-01  
 21  +4.2750e-01  +4.2750e-01  4.26e-09  1.34e-12  1.58e-10  5.64e-13  4.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.3741ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:47 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:47 PM: Optimal value: 4.275e-01
(CVXPY) Aug 31 04:45:47 PM: Compilation took 5.738e-03 seconds
(CVXPY) Aug 31 04:45:47 PM: Solver (including time spent in interface) took 2.245e-02 seconds
FULL MODEL:
  Accruacy: 0.5726
  Our objective: 0.1452

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1452)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.86942458152771
Best over terms:
  Our final objective: 0.1452
    Its accruacy: 0.5726
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1452
  Highest accruacy: 0.5726
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

