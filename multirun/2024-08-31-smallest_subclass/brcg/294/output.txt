Command:
python test_script.py -s smallest_subclass -d 8 -n 100 --seed 21 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.004687500000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.78
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:29 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Finished problem compilation (took 8.733e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9725e-01  +5.1196e+01  5.07e+01  8.71e-01  1.00e+01  1.00e+00  1.04e+00   ------   
  1  +5.7880e-01  +1.1128e+01  1.05e+01  3.69e-01  5.96e+00  3.79e-03  5.84e-01  6.00e-01  
  2  +5.1556e-01  +1.7093e+00  1.19e+00  8.99e-02  1.79e+00  1.71e-02  2.32e-01  9.90e-01  
  3  +4.8998e-01  +8.9806e-01  4.08e-01  2.24e-02  4.67e-01  1.01e-02  6.99e-02  7.89e-01  
  4  +4.5685e-01  +6.9290e-01  2.36e-01  7.39e-03  1.57e-01  8.37e-03  2.56e-02  6.66e-01  
  5  +4.3040e-01  +5.7084e-01  1.40e-01  3.08e-03  6.48e-02  4.69e-03  1.30e-02  6.07e-01  
  6  +4.0948e-01  +4.4157e-01  3.21e-02  7.42e-04  1.55e-02  4.02e-05  3.59e-03  9.23e-01  
  7  +4.0045e-01  +4.0165e-01  1.20e-03  2.65e-05  5.51e-04  1.35e-06  1.36e-04  9.65e-01  
  8  +4.0010e-01  +4.0012e-01  1.20e-05  2.65e-07  5.51e-06  1.35e-08  1.36e-06  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  1.20e-07  2.65e-09  5.51e-08  1.35e-10  1.36e-08  9.90e-01  
 10  +4.0010e-01  +4.0010e-01  1.20e-09  2.65e-11  5.51e-10  1.35e-12  1.36e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 386.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:29 PM: Optimal value: 4.001e-01
(CVXPY) Aug 31 04:58:29 PM: Compilation took 8.733e-03 seconds
(CVXPY) Aug 31 04:58:29 PM: Solver (including time spent in interface) took 1.094e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:29 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Finished problem compilation (took 3.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 662
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9421e-01  +5.1475e+01  5.10e+01  8.77e-01  9.97e+00  1.00e+00  1.05e+00   ------   
  1  +5.5786e-01  +1.1191e+01  1.06e+01  3.77e-01  5.82e+00  3.81e-03  5.88e-01  5.99e-01  
  2  +4.9552e-01  +1.8310e+00  1.34e+00  8.84e-02  1.77e+00  1.90e-02  2.24e-01  9.90e-01  
  3  +4.4220e-01  +1.1543e+00  7.12e-01  2.78e-02  5.79e-01  1.54e-02  8.10e-02  7.13e-01  
  4  +3.9179e-01  +6.9361e-01  3.02e-01  8.79e-03  1.80e-01  6.17e-03  3.17e-02  6.80e-01  
  5  +3.6395e-01  +4.5546e-01  9.15e-02  2.67e-03  5.40e-02  1.20e-03  1.11e-02  7.22e-01  
  6  +3.5319e-01  +3.7798e-01  2.48e-02  6.93e-04  1.42e-02  3.64e-04  2.90e-03  7.69e-01  
  7  +3.5108e-01  +3.7231e-01  2.12e-02  5.24e-04  1.11e-02  3.19e-04  2.03e-03  3.95e-01  
  8  +3.4727e-01  +3.5318e-01  5.91e-03  1.49e-04  3.14e-03  2.23e-05  5.95e-04  9.57e-01  
  9  +3.4534e-01  +3.4549e-01  1.41e-04  3.52e-06  7.43e-05  3.99e-07  1.41e-05  9.78e-01  
 10  +3.4530e-01  +3.4530e-01  1.53e-06  3.84e-08  8.07e-07  3.98e-09  1.55e-07  9.89e-01  
 11  +3.4530e-01  +3.4530e-01  1.53e-08  3.84e-10  8.07e-09  3.98e-11  1.55e-09  9.90e-01  
 12  +3.4530e-01  +3.4530e-01  1.53e-10  3.84e-12  8.07e-11  3.98e-13  1.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2979ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:29 PM: Optimal value: 3.453e-01
(CVXPY) Aug 31 04:58:29 PM: Compilation took 3.006e-03 seconds
(CVXPY) Aug 31 04:58:29 PM: Solver (including time spent in interface) took 1.997e-03 seconds
Iteration: 2, Objective: 0.3453
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:29 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Finished problem compilation (took 5.039e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 748
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9272e-01  +5.1497e+01  5.10e+01  8.81e-01  9.89e+00  1.00e+00  1.05e+00   ------   
  1  +5.4522e-01  +1.1217e+01  1.07e+01  3.86e-01  5.68e+00  3.82e-03  5.88e-01  5.98e-01  
  2  +4.8197e-01  +1.9044e+00  1.42e+00  8.70e-02  1.73e+00  2.03e-02  2.18e-01  9.90e-01  
  3  +4.1455e-01  +1.1176e+00  7.03e-01  2.46e-02  5.08e-01  1.59e-02  7.11e-02  7.38e-01  
  4  +3.5843e-01  +7.2546e-01  3.67e-01  9.12e-03  1.88e-01  8.66e-03  2.91e-02  7.13e-01  
  5  +3.2417e-01  +5.2747e-01  2.03e-01  4.54e-03  9.42e-02  4.50e-03  1.55e-02  5.10e-01  
  6  +2.8765e-01  +3.0992e-01  2.23e-02  5.16e-04  1.05e-02  3.84e-05  2.03e-03  9.49e-01  
  7  +2.8072e-01  +2.8162e-01  9.00e-04  2.07e-05  4.21e-04  1.57e-06  8.66e-05  9.62e-01  
  8  +2.8043e-01  +2.8050e-01  6.88e-05  1.61e-06  3.22e-05  1.11e-07  7.43e-06  9.32e-01  
  9  +2.8040e-01  +2.8040e-01  9.88e-07  2.31e-08  4.62e-07  1.92e-09  1.11e-07  9.87e-01  
 10  +2.8040e-01  +2.8040e-01  9.88e-09  2.31e-10  4.62e-09  1.92e-11  1.12e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5549ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:29 PM: Optimal value: 2.804e-01
(CVXPY) Aug 31 04:58:29 PM: Compilation took 5.039e-03 seconds
(CVXPY) Aug 31 04:58:29 PM: Solver (including time spent in interface) took 9.656e-04 seconds
Iteration: 3, Objective: 0.2804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:29 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Finished problem compilation (took 2.904e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 793
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9111e-01  +5.1513e+01  5.10e+01  8.85e-01  9.65e+00  1.00e+00  1.05e+00   ------   
  1  +5.2746e-01  +1.1268e+01  1.07e+01  3.90e-01  5.48e+00  3.85e-03  5.87e-01  5.96e-01  
  2  +4.6191e-01  +1.9841e+00  1.52e+00  8.49e-02  1.66e+00  2.17e-02  2.11e-01  9.90e-01  
  3  +3.7020e-01  +1.0374e+00  6.67e-01  2.05e-02  4.14e-01  1.61e-02  5.85e-02  7.96e-01  
  4  +2.9907e-01  +5.6468e-01  2.66e-01  6.42e-03  1.29e-01  5.25e-03  2.01e-02  7.50e-01  
  5  +2.5884e-01  +3.5529e-01  9.65e-02  2.26e-03  4.48e-02  1.34e-03  7.90e-03  7.32e-01  
  6  +2.4250e-01  +2.8227e-01  3.98e-02  8.82e-04  1.75e-02  5.10e-04  3.30e-03  6.43e-01  
  7  +2.3217e-01  +2.3600e-01  3.83e-03  8.50e-05  1.68e-03  1.88e-05  3.34e-04  9.90e-01  
  8  +2.3082e-01  +2.3110e-01  2.82e-04  6.36e-06  1.24e-04  9.75e-07  2.61e-05  9.23e-01  
  9  +2.3070e-01  +2.3071e-01  8.14e-06  1.87e-07  3.62e-06  2.18e-08  8.19e-07  9.72e-01  
 10  +2.3070e-01  +2.3070e-01  8.13e-08  1.87e-09  3.62e-08  2.17e-10  8.22e-09  9.90e-01  
 11  +2.3070e-01  +2.3070e-01  8.13e-10  1.87e-11  3.62e-10  2.17e-12  8.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 676.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:29 PM: Optimal value: 2.307e-01
(CVXPY) Aug 31 04:58:29 PM: Compilation took 2.904e-03 seconds
(CVXPY) Aug 31 04:58:29 PM: Solver (including time spent in interface) took 1.022e-03 seconds
Iteration: 4, Objective: 0.2307
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:29 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Finished problem compilation (took 7.973e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 837
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8977e-01  +5.1797e+01  5.13e+01  8.89e-01  9.43e+00  1.00e+00  1.06e+00   ------   
  1  +5.0859e-01  +1.1338e+01  1.08e+01  3.92e-01  5.27e+00  3.89e-03  5.86e-01  5.97e-01  
  2  +4.3273e-01  +2.2521e+00  1.82e+00  8.91e-02  1.68e+00  2.25e-02  2.20e-01  9.41e-01  
  3  +3.5536e-01  +1.1704e+00  8.15e-01  2.70e-02  5.28e-01  1.46e-02  7.50e-02  6.96e-01  
  4  +2.8782e-01  +6.6366e-01  3.76e-01  1.00e-02  1.97e-01  6.50e-03  3.01e-02  6.44e-01  
  5  +2.4771e-01  +4.5039e-01  2.03e-01  4.93e-03  9.66e-02  2.91e-03  1.59e-02  6.10e-01  
  6  +2.1269e-01  +2.7784e-01  6.52e-02  1.44e-03  2.87e-02  8.98e-04  5.01e-03  7.23e-01  
  7  +1.9686e-01  +2.1407e-01  1.72e-02  3.65e-04  7.28e-03  2.11e-04  1.33e-03  7.76e-01  
  8  +1.9123e-01  +1.9178e-01  5.53e-04  1.18e-05  2.34e-04  3.61e-06  4.42e-05  9.70e-01  
  9  +1.9102e-01  +1.9105e-01  3.63e-05  8.16e-07  1.57e-05  1.69e-07  3.34e-06  9.55e-01  
 10  +1.9100e-01  +1.9100e-01  3.76e-07  8.48e-09  1.63e-07  1.71e-09  3.51e-08  9.90e-01  
 11  +1.9100e-01  +1.9100e-01  3.76e-09  8.48e-11  1.63e-09  1.72e-11  3.52e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5502ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:29 PM: Optimal value: 1.910e-01
(CVXPY) Aug 31 04:58:29 PM: Compilation took 7.973e-03 seconds
(CVXPY) Aug 31 04:58:29 PM: Solver (including time spent in interface) took 2.003e-03 seconds
Iteration: 5, Objective: 0.1910
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:29 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Finished problem compilation (took 4.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 879
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8765e-01  +5.1780e+01  5.13e+01  8.92e-01  9.22e+00  1.00e+00  1.06e+00   ------   
  1  +4.8651e-01  +1.1396e+01  1.09e+01  3.94e-01  5.09e+00  3.95e-03  5.80e-01  5.95e-01  
  2  +4.0193e-01  +2.2730e+00  1.87e+00  8.38e-02  1.55e+00  2.36e-02  2.04e-01  9.52e-01  
  3  +2.9870e-01  +9.6671e-01  6.68e-01  1.97e-02  3.76e-01  1.31e-02  5.51e-02  7.62e-01  
  4  +2.3794e-01  +4.9657e-01  2.59e-01  7.00e-03  1.32e-01  4.00e-03  2.19e-02  7.03e-01  
  5  +1.9537e-01  +2.7307e-01  7.77e-02  1.94e-03  3.68e-02  8.61e-04  6.62e-03  8.22e-01  
  6  +1.8135e-01  +2.1333e-01  3.20e-02  7.51e-04  1.45e-02  2.54e-04  2.64e-03  7.55e-01  
  7  +1.7195e-01  +1.7435e-01  2.39e-03  5.47e-05  1.07e-03  1.54e-05  1.99e-04  9.37e-01  
  8  +1.7132e-01  +1.7176e-01  4.47e-04  1.06e-05  2.02e-04  2.36e-06  4.10e-05  8.10e-01  
  9  +1.7117e-01  +1.7121e-01  4.55e-05  1.11e-06  2.08e-05  2.10e-07  4.51e-06  9.43e-01  
 10  +1.7115e-01  +1.7115e-01  4.83e-07  1.18e-08  2.21e-07  2.16e-09  4.84e-08  9.89e-01  
 11  +1.7115e-01  +1.7115e-01  4.83e-09  1.18e-10  2.21e-09  2.16e-11  4.84e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1606ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:29 PM: Optimal value: 1.712e-01
(CVXPY) Aug 31 04:58:29 PM: Compilation took 4.008e-03 seconds
(CVXPY) Aug 31 04:58:29 PM: Solver (including time spent in interface) took 3.061e-03 seconds
Iteration: 6, Objective: 0.1712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:29 PM: Your problem has 123 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Finished problem compilation (took 4.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 123
  constraints   = 173
  nnz(P)        = 0
  nnz(A)        = 919
  cones (total) = 1
    : Nonnegative = 1,  numel = 173

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8358e-01  +5.2224e+01  5.17e+01  8.93e-01  9.16e+00  1.00e+00  1.07e+00   ------   
  1  +4.4939e-01  +1.1968e+01  1.15e+01  4.04e-01  5.18e+00  4.04e-03  5.98e-01  5.72e-01  
  2  +3.6159e-01  +2.3222e+00  1.96e+00  8.94e-02  1.59e+00  2.68e-02  2.16e-01  9.68e-01  
  3  +2.7369e-01  +1.1784e+00  9.05e-01  2.99e-02  5.47e-01  1.60e-02  8.23e-02  6.71e-01  
  4  +2.1190e-01  +4.3854e-01  2.27e-01  7.17e-03  1.29e-01  2.85e-03  2.26e-02  7.81e-01  
  5  +1.8587e-01  +3.2209e-01  1.36e-01  3.91e-03  7.26e-02  1.48e-03  1.29e-02  6.02e-01  
  6  +1.5929e-01  +1.9033e-01  3.10e-02  8.28e-04  1.56e-02  3.12e-04  2.97e-03  7.83e-01  
  7  +1.5188e-01  +1.5410e-01  2.23e-03  5.97e-05  1.11e-03  1.79e-05  2.22e-04  9.30e-01  
  8  +1.5136e-01  +1.5180e-01  4.34e-04  1.21e-05  2.19e-04  1.84e-06  4.86e-05  9.31e-01  
  9  +1.5122e-01  +1.5128e-01  5.57e-05  1.54e-06  2.78e-05  2.21e-07  6.54e-06  8.93e-01  
 10  +1.5120e-01  +1.5120e-01  6.72e-07  1.85e-08  3.34e-07  2.59e-09  7.96e-08  9.90e-01  
 11  +1.5120e-01  +1.5120e-01  6.73e-09  1.85e-10  3.34e-09  2.59e-11  7.97e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 775.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:29 PM: Optimal value: 1.512e-01
(CVXPY) Aug 31 04:58:29 PM: Compilation took 4.004e-03 seconds
(CVXPY) Aug 31 04:58:29 PM: Solver (including time spent in interface) took 1.082e-03 seconds
Iteration: 7, Objective: 0.1512
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:29 PM: Your problem has 133 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:29 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:29 PM: Finished problem compilation (took 2.923e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 133
  constraints   = 183
  nnz(P)        = 0
  nnz(A)        = 954
  cones (total) = 1
    : Nonnegative = 1,  numel = 183

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8339e-01  +5.2219e+01  5.17e+01  8.96e-01  8.96e+00  1.00e+00  1.07e+00   ------   
  1  +4.4324e-01  +1.2033e+01  1.16e+01  4.09e-01  5.04e+00  4.06e-03  5.99e-01  5.69e-01  
  2  +3.5671e-01  +2.4392e+00  2.08e+00  9.48e-02  1.63e+00  2.65e-02  2.31e-01  9.39e-01  
  3  +2.6013e-01  +1.2306e+00  9.70e-01  3.15e-02  5.58e-01  1.63e-02  8.82e-02  6.86e-01  
  4  +2.0760e-01  +4.3931e-01  2.32e-01  7.56e-03  1.32e-01  2.71e-03  2.41e-02  7.95e-01  
  5  +1.8316e-01  +3.2436e-01  1.41e-01  4.18e-03  7.55e-02  1.51e-03  1.39e-02  5.71e-01  
  6  +1.5948e-01  +1.9785e-01  3.84e-02  1.07e-03  1.95e-02  3.81e-04  3.78e-03  7.49e-01  
  7  +1.5183e-01  +1.5425e-01  2.42e-03  6.78e-05  1.23e-03  1.96e-05  2.47e-04  9.38e-01  
  8  +1.5138e-01  +1.5199e-01  6.03e-04  1.79e-05  3.13e-04  2.59e-06  7.03e-05  9.07e-01  
  9  +1.5125e-01  +1.5139e-01  1.43e-04  4.25e-06  7.39e-05  5.84e-07  1.74e-05  7.76e-01  
 10  +1.5121e-01  +1.5124e-01  2.99e-05  8.91e-07  1.54e-05  1.09e-07  3.74e-06  9.90e-01  
 11  +1.5120e-01  +1.5120e-01  3.50e-07  1.04e-08  1.80e-07  1.26e-09  4.39e-08  9.88e-01  
 12  +1.5120e-01  +1.5120e-01  3.51e-09  1.04e-10  1.80e-09  1.26e-11  4.40e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 797µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:29 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:29 PM: Optimal value: 1.512e-01
(CVXPY) Aug 31 04:58:29 PM: Compilation took 2.923e-03 seconds
(CVXPY) Aug 31 04:58:29 PM: Solver (including time spent in interface) took 1.030e-03 seconds
Iteration: 8, Objective: 0.1512
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:58:30 PM: Your problem has 134 variables, 50 constraints, and 0 parameters.
(CVXPY) Aug 31 04:58:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:58:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:58:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:58:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:58:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:58:30 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:58:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:58:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:58:30 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:58:30 PM: Finished problem compilation (took 3.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 134
  constraints   = 184
  nnz(P)        = 0
  nnz(A)        = 961
  cones (total) = 1
    : Nonnegative = 1,  numel = 184

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8299e-01  +5.2296e+01  5.18e+01  8.96e-01  8.95e+00  1.00e+00  1.07e+00   ------   
  1  +4.4016e-01  +1.2070e+01  1.16e+01  4.09e-01  5.03e+00  4.07e-03  5.99e-01  5.68e-01  
  2  +3.5294e-01  +2.4310e+00  2.08e+00  9.41e-02  1.62e+00  2.67e-02  2.29e-01  9.42e-01  
  3  +2.5952e-01  +1.2615e+00  1.00e+00  3.30e-02  5.84e-01  1.66e-02  9.21e-02  6.55e-01  
  4  +2.0689e-01  +4.1715e-01  2.10e-01  6.94e-03  1.21e-01  2.41e-03  2.22e-02  8.17e-01  
  5  +1.9029e-01  +3.5536e-01  1.65e-01  4.96e-03  8.94e-02  1.71e-03  1.62e-02  4.53e-01  
  6  +1.6233e-01  +2.1192e-01  4.96e-02  1.37e-03  2.52e-02  4.85e-04  4.82e-03  7.27e-01  
  7  +1.5192e-01  +1.5461e-01  2.68e-03  7.44e-05  1.36e-03  1.99e-05  2.71e-04  9.49e-01  
  8  +1.5137e-01  +1.5190e-01  5.36e-04  1.59e-05  2.80e-04  1.91e-06  6.22e-05  9.39e-01  
  9  +1.5125e-01  +1.5137e-01  1.29e-04  3.84e-06  6.69e-05  4.41e-07  1.57e-05  7.73e-01  
 10  +1.5121e-01  +1.5124e-01  2.66e-05  7.92e-07  1.37e-05  9.56e-08  3.34e-06  9.90e-01  
 11  +1.5120e-01  +1.5120e-01  3.04e-07  9.03e-09  1.56e-07  1.08e-09  3.82e-08  9.89e-01  
 12  +1.5120e-01  +1.5120e-01  3.05e-09  9.05e-11  1.57e-09  1.08e-11  3.83e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 754.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:58:30 PM: Problem status: optimal
(CVXPY) Aug 31 04:58:30 PM: Optimal value: 1.512e-01
(CVXPY) Aug 31 04:58:30 PM: Compilation took 3.000e-03 seconds
(CVXPY) Aug 31 04:58:30 PM: Solver (including time spent in interface) took 1.008e-03 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.68

IF 
    (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.09999999999999998)
 OR (x5 = 1 AND x1 = 0 AND x2 = 0 AND x6 = 0)                       <-- (term's our objective: 0.07999999999999996)
 OR (x7 = 1 AND x0 = 0 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.059999999999999956)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 0)                       <-- (term's our objective: 0.06000000000000005)
 OR (x0 = 1 AND x1 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.07999999999999996)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x2 = 0)                       <-- (term's our objective: 0.08000000000000002)
 OR (x4 = 1 AND x0 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x7 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 1 AND x1 = 1 AND x6 = 1 AND x7 = 1 AND x4 = 0)            <-- (term's our objective: 0.040000000000000036)
 OR (x1 = 1 AND x4 = 1 AND x7 = 1 AND x3 = 0 AND x5 = 0)            <-- (term's our objective: 0.06000000000000005)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x6 = 0) <-- (term's our objective: 0.040000000000000036)
 OR (x0 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.040000000000000036)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.3953349590301514
Best over terms:
  Our final objective: 0.12
    Its accruacy: 0.56
    Its hamming distance: 5
  Shortest hamming distance: 5
    Its our objective: 0.12
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

