Command:
python test_script.py -s smallest_subclass -d 3 -n 5000 --seed 73 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.152
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.152
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:45 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:45 PM: Finished problem compilation (took 7.218e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5008e+03  2.50e+03  9.77e-01  5.51e+01  1.00e+00  1.00e+00   ------   
  1  +6.2006e-01  +4.6378e+02  4.63e+02  3.04e-01  2.87e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5565e-01  +7.9489e+01  7.89e+01  1.33e-01  1.49e+01  6.69e-03  2.20e-01  6.64e-01  
  3  +5.0830e-01  +1.2831e+01  1.23e+01  8.49e-02  9.14e+00  1.05e-05  2.18e-01  6.59e-02  
  4  +5.0002e-01  +1.0863e+00  5.86e-01  5.55e-03  6.12e-01  5.30e-06  1.60e-01  6.39e-01  
  5  +4.9992e-01  +6.4394e-01  1.44e-01  1.36e-03  1.51e-01  2.33e-06  3.15e-02  8.29e-01  
  6  +4.9008e-01  +1.1443e+00  6.54e-01  7.89e-04  8.84e-02  1.22e-04  2.49e-03  9.74e-01  
  7  +4.6901e-01  +6.6599e-01  1.97e-01  9.73e-05  1.09e-02  1.51e-04  3.11e-04  8.82e-01  
  8  +4.5463e-01  +4.8421e-01  2.96e-02  1.43e-05  1.60e-03  1.60e-05  5.07e-05  8.87e-01  
  9  +4.4596e-01  +4.4838e-01  2.42e-03  1.00e-06  1.12e-04  6.09e-07  4.23e-06  9.68e-01  
 10  +4.4531e-01  +4.4533e-01  2.57e-05  1.06e-08  1.19e-06  6.44e-09  4.52e-08  9.89e-01  
 11  +4.4530e-01  +4.4530e-01  2.57e-07  1.06e-10  1.19e-08  6.44e-11  4.52e-10  9.90e-01  
 12  +4.4530e-01  +4.4530e-01  2.57e-09  1.06e-12  1.19e-10  6.45e-13  4.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.4463ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:45 PM: Optimal value: 4.453e-01
(CVXPY) Aug 31 04:45:45 PM: Compilation took 7.218e-03 seconds
(CVXPY) Aug 31 04:45:45 PM: Solver (including time spent in interface) took 1.420e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4453
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:45:45 PM: Your problem has 2510 variables, 2500 constraints, and 0 parameters.
(CVXPY) Aug 31 04:45:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:45:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:45:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:45:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:45:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:45:45 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:45:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:45:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:45:45 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:45:45 PM: Finished problem compilation (took 5.610e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2510
  constraints   = 5010
  nnz(P)        = 0
  nnz(A)        = 17081
  cones (total) = 1
    : Nonnegative = 1,  numel = 5010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0001e-01  +2.5013e+03  2.50e+03  9.77e-01  5.77e+01  1.00e+00  1.00e+00   ------   
  1  +6.1982e-01  +4.6431e+02  4.64e+02  3.05e-01  3.00e+01  4.25e-03  4.37e-01  6.93e-01  
  2  +5.5538e-01  +7.9224e+01  7.87e+01  1.33e-01  1.56e+01  6.73e-03  2.20e-01  6.67e-01  
  3  +5.0810e-01  +1.2623e+01  1.21e+01  8.41e-02  9.45e+00  1.05e-05  2.18e-01  6.96e-02  
  4  +5.0096e-01  +2.4584e+00  1.96e+00  1.84e-02  2.08e+00  6.16e-06  1.96e-01  2.29e-01  
  5  +5.0002e-01  +6.5928e-01  1.59e-01  1.51e-03  1.75e-01  1.24e-06  3.89e-02  9.14e-01  
  6  +5.0001e-01  +7.0748e-01  2.07e-01  1.95e-03  2.27e-01  1.81e-06  3.33e-02  3.49e-01  
  7  +5.0013e-01  +9.2263e-01  4.23e-01  3.66e-03  4.25e-01  2.77e-06  2.42e-02  9.90e-01  
  8  +4.9837e-01  +7.1484e-01  2.16e-01  3.76e-04  4.43e-02  2.34e-05  1.08e-03  9.65e-01  
  9  +4.9441e-01  +6.9120e-01  1.97e-01  1.41e-04  1.67e-02  5.42e-05  3.92e-04  6.41e-01  
 10  +4.8987e-01  +6.6907e-01  1.79e-01  9.66e-05  1.14e-02  6.28e-05  2.67e-04  3.39e-01  
 11  +4.8848e-01  +6.6088e-01  1.72e-01  9.15e-05  1.08e-02  4.99e-05  2.54e-04  2.37e-01  
 12  +4.7361e-01  +5.9360e-01  1.20e-01  4.55e-05  5.35e-03  2.47e-05  1.29e-04  8.59e-01  
 13  +4.7185e-01  +5.8734e-01  1.15e-01  4.51e-05  5.29e-03  2.26e-05  1.28e-04  2.93e-02  
 14  +4.5849e-01  +5.4326e-01  8.48e-02  2.90e-05  3.39e-03  1.61e-05  8.46e-05  4.25e-01  
 15  +4.3148e-01  +4.4753e-01  1.61e-02  5.15e-06  6.01e-04  9.16e-07  1.62e-05  9.90e-01  
 16  +4.2421e-01  +4.2443e-01  2.21e-04  6.94e-08  8.11e-06  1.40e-08  2.23e-07  9.90e-01  
 17  +4.2410e-01  +4.2410e-01  2.21e-06  6.94e-10  8.10e-08  1.40e-10  2.23e-09  9.90e-01  
 18  +4.2410e-01  +4.2410e-01  2.21e-08  6.94e-12  8.10e-10  1.41e-12  2.23e-11  9.90e-01  
 19  +4.2410e-01  +4.2410e-01  2.21e-10  6.94e-14  8.11e-12  1.41e-14  2.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.6233ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:45:45 PM: Problem status: optimal
(CVXPY) Aug 31 04:45:45 PM: Optimal value: 4.241e-01
(CVXPY) Aug 31 04:45:45 PM: Compilation took 5.610e-03 seconds
(CVXPY) Aug 31 04:45:45 PM: Solver (including time spent in interface) took 2.059e-02 seconds
FULL MODEL:
  Accruacy: 0.576
  Our objective: 0.15199999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.15199999999999997)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.8754012584686279
Best over terms:
  Our final objective: 0.15199999999999997
    Its accruacy: 0.576
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15199999999999997
  Highest accruacy: 0.576
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

