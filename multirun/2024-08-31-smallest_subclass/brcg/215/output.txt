Command:
python test_script.py -s smallest_subclass -d 6 -n 500 --seed 43 -m brcg --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.036
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 6.

Computed total variation: 0.276
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:12 PM: Your problem has 263 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:12 PM: Finished problem compilation (took 8.161e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 263
  constraints   = 513
  nnz(P)        = 0
  nnz(A)        = 2263
  cones (total) = 1
    : Nonnegative = 1,  numel = 513

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +2.5089e+02  2.50e+02  9.35e-01  2.14e+01  1.00e+00  1.01e+00   ------   
  1  +5.9231e-01  +5.1854e+01  5.13e+01  3.64e-01  1.27e+01  3.91e-03  5.29e-01  6.27e-01  
  2  +5.3854e-01  +6.9396e+00  6.40e+00  1.18e-01  5.09e+00  1.18e-02  2.32e-01  8.60e-01  
  3  +5.0126e-01  +1.3232e+00  8.22e-01  2.46e-02  1.04e+00  3.98e-04  1.91e-01  6.42e-01  
  4  +4.9974e-01  +6.7090e-01  1.71e-01  5.13e-03  2.23e-01  1.23e-04  4.01e-02  8.39e-01  
  5  +4.8417e-01  +7.6236e-01  2.78e-01  1.75e-03  7.79e-02  1.21e-03  5.56e-03  9.33e-01  
  6  +4.6535e-01  +5.5073e-01  8.54e-02  4.59e-04  2.03e-02  1.59e-04  1.63e-03  7.96e-01  
  7  +4.5096e-01  +4.8193e-01  3.10e-02  1.37e-04  6.07e-03  3.63e-05  5.65e-04  8.39e-01  
  8  +4.4620e-01  +4.5916e-01  1.30e-02  5.55e-05  2.45e-03  1.16e-05  2.42e-04  9.90e-01  
  9  +4.4218e-01  +4.4244e-01  2.59e-04  1.08e-06  4.76e-05  2.01e-07  4.91e-06  9.81e-01  
 10  +4.4210e-01  +4.4210e-01  2.59e-06  1.08e-08  4.77e-07  2.01e-09  4.92e-08  9.90e-01  
 11  +4.4210e-01  +4.4210e-01  2.59e-08  1.08e-10  4.77e-09  2.01e-11  4.92e-10  9.90e-01  
 12  +4.4210e-01  +4.4210e-01  2.59e-10  1.08e-12  4.77e-11  2.01e-13  4.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5764ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:12 PM: Optimal value: 4.421e-01
(CVXPY) Aug 31 04:50:12 PM: Compilation took 8.161e-03 seconds
(CVXPY) Aug 31 04:50:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:12 PM: Your problem has 273 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:12 PM: Finished problem compilation (took 3.564e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 273
  constraints   = 523
  nnz(P)        = 0
  nnz(A)        = 2640
  cones (total) = 1
    : Nonnegative = 1,  numel = 523

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +2.5126e+02  2.51e+02  9.36e-01  2.20e+01  1.00e+00  1.01e+00   ------   
  1  +5.8947e-01  +5.2022e+01  5.14e+01  3.68e-01  1.29e+01  3.91e-03  5.33e-01  6.25e-01  
  2  +5.3595e-01  +6.6724e+00  6.14e+00  1.13e-01  4.96e+00  1.23e-02  2.24e-01  8.88e-01  
  3  +5.0117e-01  +1.4182e+00  9.17e-01  2.78e-02  1.20e+00  9.90e-04  1.75e-01  7.02e-01  
  4  +4.9743e-01  +8.1472e-01  3.17e-01  8.50e-03  3.79e-01  7.75e-04  3.85e-02  8.35e-01  
  5  +4.7064e-01  +6.9602e-01  2.25e-01  1.48e-03  6.77e-02  3.62e-03  4.63e-03  8.95e-01  
  6  +4.5925e-01  +6.3046e-01  1.71e-01  1.00e-03  4.58e-02  2.17e-03  3.32e-03  4.37e-01  
  7  +4.4957e-01  +5.5979e-01  1.10e-01  7.18e-04  3.25e-02  3.81e-05  2.58e-03  8.17e-01  
  8  +4.3624e-01  +4.7708e-01  4.08e-02  2.45e-04  1.10e-02  1.40e-05  9.50e-04  6.52e-01  
  9  +4.2950e-01  +4.3513e-01  5.64e-03  3.31e-05  1.49e-03  3.63e-06  1.37e-04  9.90e-01  
 10  +4.2843e-01  +4.2928e-01  8.45e-04  4.99e-06  2.25e-04  5.32e-07  2.15e-05  8.56e-01  
 11  +4.2832e-01  +4.2879e-01  4.68e-04  2.18e-06  9.84e-05  3.22e-07  1.10e-05  7.82e-01  
 12  +4.2820e-01  +4.2821e-01  5.82e-06  2.71e-08  1.22e-06  3.93e-09  1.38e-07  9.87e-01  
 13  +4.2820e-01  +4.2820e-01  5.82e-08  2.70e-10  1.22e-08  3.93e-11  1.38e-09  9.90e-01  
 14  +4.2820e-01  +4.2820e-01  5.82e-10  2.71e-12  1.22e-10  3.98e-13  1.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1077ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:12 PM: Optimal value: 4.282e-01
(CVXPY) Aug 31 04:50:12 PM: Compilation took 3.564e-03 seconds
(CVXPY) Aug 31 04:50:12 PM: Solver (including time spent in interface) took 1.918e-03 seconds
Iteration: 2, Objective: 0.4282
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:12 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:12 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:12 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:12 PM: Finished problem compilation (took 4.450e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 3052
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9890e-01  +2.5170e+02  2.51e+02  9.37e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.8559e-01  +5.2391e+01  5.18e+01  3.74e-01  1.33e+01  3.90e-03  5.41e-01  6.21e-01  
  2  +5.3282e-01  +6.3698e+00  5.84e+00  1.08e-01  4.87e+00  1.29e-02  2.18e-01  9.22e-01  
  3  +5.0162e-01  +1.6307e+00  1.13e+00  3.44e-02  1.53e+00  2.02e-03  1.61e-01  7.15e-01  
  4  +4.9157e-01  +1.3194e+00  8.28e-01  1.39e-02  6.43e-01  3.63e-03  4.30e-02  8.42e-01  
  5  +4.7056e-01  +9.9103e-01  5.20e-01  4.47e-03  2.10e-01  4.41e-03  1.40e-02  6.87e-01  
  6  +4.5783e-01  +8.2842e-01  3.71e-01  2.52e-03  1.18e-01  2.83e-03  7.97e-03  5.88e-01  
  7  +4.4964e-01  +7.7647e-01  3.27e-01  1.82e-03  8.53e-02  2.67e-03  5.85e-03  3.16e-01  
  8  +4.3882e-01  +6.7129e-01  2.32e-01  1.17e-03  5.46e-02  5.05e-04  3.88e-03  8.19e-01  
  9  +4.1261e-01  +5.0800e-01  9.54e-02  4.32e-04  2.00e-02  9.07e-05  1.60e-03  8.25e-01  
 10  +3.9935e-01  +4.4149e-01  4.21e-02  1.82e-04  8.44e-03  3.88e-05  7.35e-04  9.90e-01  
 11  +3.8805e-01  +3.9300e-01  4.95e-03  2.06e-05  9.53e-04  3.85e-06  8.98e-05  8.90e-01  
 12  +3.8653e-01  +3.8660e-01  7.43e-05  3.07e-07  1.42e-05  4.35e-08  1.37e-06  9.85e-01  
 13  +3.8650e-01  +3.8650e-01  7.47e-07  3.09e-09  1.43e-07  4.33e-10  1.39e-08  9.90e-01  
 14  +3.8650e-01  +3.8650e-01  7.47e-09  3.09e-11  1.43e-09  4.33e-12  1.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.961ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:12 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:12 PM: Optimal value: 3.865e-01
(CVXPY) Aug 31 04:50:12 PM: Compilation took 4.450e-03 seconds
(CVXPY) Aug 31 04:50:12 PM: Solver (including time spent in interface) took 4.002e-03 seconds
Iteration: 3, Objective: 0.3865
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:13 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Finished problem compilation (took 3.789e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 3298
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9871e-01  +2.5147e+02  2.51e+02  9.37e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.8346e-01  +5.2630e+01  5.20e+01  3.79e-01  1.33e+01  3.90e-03  5.43e-01  6.18e-01  
  2  +5.3153e-01  +6.2451e+00  5.71e+00  1.07e-01  4.82e+00  1.33e-02  2.17e-01  9.36e-01  
  3  +5.0075e-01  +1.5091e+00  1.01e+00  3.11e-02  1.38e+00  1.73e-03  1.50e-01  8.24e-01  
  4  +4.8975e-01  +1.4027e+00  9.13e-01  1.45e-02  6.73e-01  3.61e-03  4.43e-02  8.19e-01  
  5  +4.6775e-01  +1.0407e+00  5.73e-01  4.72e-03  2.23e-01  4.22e-03  1.45e-02  6.93e-01  
  6  +4.4887e-01  +8.0532e-01  3.56e-01  2.12e-03  9.97e-02  2.63e-03  6.75e-03  6.55e-01  
  7  +4.3430e-01  +6.9421e-01  2.60e-01  1.42e-03  6.63e-02  1.19e-03  4.72e-03  5.09e-01  
  8  +4.0262e-01  +4.8733e-01  8.47e-02  4.10e-04  1.90e-02  2.22e-04  1.55e-03  7.38e-01  
  9  +3.9055e-01  +4.2718e-01  3.66e-02  1.65e-04  7.64e-03  7.52e-05  6.90e-04  7.03e-01  
 10  +3.8179e-01  +3.8553e-01  3.74e-03  1.63e-05  7.55e-04  3.18e-06  7.40e-05  9.90e-01  
 11  +3.8062e-01  +3.8068e-01  5.63e-05  2.45e-07  1.13e-05  3.65e-08  1.14e-06  9.85e-01  
 12  +3.8060e-01  +3.8060e-01  5.64e-07  2.45e-09  1.13e-07  3.63e-10  1.14e-08  9.90e-01  
 13  +3.8060e-01  +3.8060e-01  5.64e-09  2.45e-11  1.13e-09  3.63e-12  1.14e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3654ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:13 PM: Optimal value: 3.806e-01
(CVXPY) Aug 31 04:50:13 PM: Compilation took 3.789e-03 seconds
(CVXPY) Aug 31 04:50:13 PM: Solver (including time spent in interface) took 2.764e-03 seconds
Iteration: 4, Objective: 0.3806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:13 PM: Your problem has 303 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Finished problem compilation (took 3.186e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 303
  constraints   = 553
  nnz(P)        = 0
  nnz(A)        = 3429
  cones (total) = 1
    : Nonnegative = 1,  numel = 553

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9849e-01  +2.5148e+02  2.51e+02  9.38e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.7987e-01  +5.2829e+01  5.22e+01  3.84e-01  1.33e+01  3.89e-03  5.47e-01  6.15e-01  
  2  +5.2911e-01  +6.0083e+00  5.48e+00  1.02e-01  4.56e+00  1.38e-02  2.08e-01  9.65e-01  
  3  +5.0104e-01  +1.6397e+00  1.14e+00  3.44e-02  1.53e+00  2.50e-03  1.34e-01  8.35e-01  
  4  +4.7997e-01  +1.5100e+00  1.03e+00  9.99e-03  4.69e-01  7.19e-03  2.82e-02  8.88e-01  
  5  +4.5538e-01  +1.1614e+00  7.06e-01  4.51e-03  2.12e-01  5.59e-03  1.35e-02  6.15e-01  
  6  +4.3840e-01  +9.3657e-01  4.98e-01  2.85e-03  1.33e-01  2.94e-03  9.22e-03  4.82e-01  
  7  +4.1968e-01  +6.8132e-01  2.62e-01  1.56e-03  7.17e-02  2.53e-05  5.65e-03  9.25e-01  
  8  +4.0094e-01  +5.4915e-01  1.48e-01  8.22e-04  3.77e-02  1.85e-05  3.28e-03  4.50e-01  
  9  +3.8381e-01  +4.3672e-01  5.29e-02  2.81e-04  1.28e-02  1.12e-05  1.25e-03  6.79e-01  
 10  +3.7605e-01  +3.9041e-01  1.44e-02  7.50e-05  3.42e-03  4.17e-06  3.60e-04  7.63e-01  
 11  +3.7400e-01  +3.7912e-01  5.13e-03  2.60e-05  1.19e-03  2.29e-06  1.31e-04  7.82e-01  
 12  +3.7300e-01  +3.7407e-01  1.07e-03  5.39e-06  2.45e-04  6.14e-07  2.80e-05  9.87e-01  
 13  +3.7276e-01  +3.7298e-01  2.24e-04  1.11e-06  5.06e-05  1.35e-07  5.84e-06  8.77e-01  
 14  +3.7270e-01  +3.7270e-01  2.29e-06  1.13e-08  5.16e-07  1.37e-09  5.98e-08  9.90e-01  
 15  +3.7270e-01  +3.7270e-01  2.29e-08  1.13e-10  5.16e-09  1.37e-11  5.98e-10  9.90e-01  
 16  +3.7270e-01  +3.7270e-01  2.29e-10  1.13e-12  5.16e-11  1.37e-13  5.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.053ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:13 PM: Optimal value: 3.727e-01
(CVXPY) Aug 31 04:50:13 PM: Compilation took 3.186e-03 seconds
(CVXPY) Aug 31 04:50:13 PM: Solver (including time spent in interface) took 4.549e-03 seconds
Iteration: 5, Objective: 0.3727
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:13 PM: Your problem has 313 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Finished problem compilation (took 1.174e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 313
  constraints   = 563
  nnz(P)        = 0
  nnz(A)        = 3610
  cones (total) = 1
    : Nonnegative = 1,  numel = 563

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9847e-01  +2.5148e+02  2.51e+02  9.38e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.7944e-01  +5.2862e+01  5.23e+01  3.86e-01  1.32e+01  3.89e-03  5.48e-01  6.15e-01  
  2  +5.2863e-01  +5.9474e+00  5.42e+00  1.02e-01  4.50e+00  1.38e-02  2.08e-01  9.68e-01  
  3  +5.0142e-01  +1.7036e+00  1.20e+00  3.63e-02  1.61e+00  2.70e-03  1.35e-01  8.06e-01  
  4  +4.8186e-01  +1.4964e+00  1.01e+00  1.02e-02  4.77e-01  7.08e-03  2.87e-02  8.92e-01  
  5  +4.5825e-01  +1.2337e+00  7.75e-01  4.96e-03  2.33e-01  6.78e-03  1.47e-02  5.58e-01  
  6  +4.4214e-01  +9.8643e-01  5.44e-01  3.16e-03  1.47e-01  3.59e-03  1.00e-02  4.44e-01  
  7  +4.2303e-01  +7.3042e-01  3.07e-01  1.80e-03  8.31e-02  2.37e-04  6.35e-03  8.35e-01  
  8  +3.8881e-01  +4.7977e-01  9.10e-02  4.86e-04  2.22e-02  4.71e-05  2.04e-03  7.85e-01  
  9  +3.8792e-01  +4.7582e-01  8.79e-02  4.55e-04  2.08e-02  5.02e-05  1.90e-03  1.82e-01  
 10  +3.7627e-01  +4.1374e-01  3.75e-02  1.84e-04  8.38e-03  2.42e-05  8.37e-04  6.76e-01  
 11  +3.6904e-01  +3.7744e-01  8.40e-03  4.04e-05  1.84e-03  5.60e-06  1.96e-04  8.53e-01  
 12  +3.6755e-01  +3.7018e-01  2.63e-03  1.25e-05  5.69e-04  1.80e-06  6.16e-05  7.42e-01  
 13  +3.6687e-01  +3.6710e-01  2.29e-04  1.07e-06  4.88e-05  1.52e-07  5.39e-06  9.55e-01  
 14  +3.6680e-01  +3.6680e-01  2.48e-06  1.16e-08  5.27e-07  1.61e-09  5.83e-08  9.89e-01  
 15  +3.6680e-01  +3.6680e-01  2.48e-08  1.16e-10  5.27e-09  1.61e-11  5.84e-10  9.90e-01  
 16  +3.6680e-01  +3.6680e-01  2.48e-10  1.16e-12  5.27e-11  1.61e-13  5.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.2472ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:13 PM: Optimal value: 3.668e-01
(CVXPY) Aug 31 04:50:13 PM: Compilation took 1.174e-02 seconds
(CVXPY) Aug 31 04:50:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.3668
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:13 PM: Your problem has 322 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Finished problem compilation (took 5.976e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 322
  constraints   = 572
  nnz(P)        = 0
  nnz(A)        = 3734
  cones (total) = 1
    : Nonnegative = 1,  numel = 572

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9840e-01  +2.5148e+02  2.51e+02  9.39e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.7799e-01  +5.3014e+01  5.24e+01  3.90e-01  1.31e+01  3.88e-03  5.51e-01  6.13e-01  
  2  +5.2716e-01  +5.7939e+00  5.27e+00  9.95e-02  4.38e+00  1.40e-02  2.06e-01  9.84e-01  
  3  +5.0060e-01  +1.6127e+00  1.11e+00  3.31e-02  1.47e+00  2.70e-03  1.21e-01  8.95e-01  
  4  +4.8102e-01  +1.4690e+00  9.88e-01  1.01e-02  4.73e-01  6.87e-03  2.89e-02  8.37e-01  
  5  +4.5944e-01  +1.2416e+00  7.82e-01  5.32e-03  2.48e-01  6.52e-03  1.57e-02  5.32e-01  
  6  +4.3885e-01  +8.9577e-01  4.57e-01  2.75e-03  1.27e-01  1.93e-03  8.98e-03  6.37e-01  
  7  +4.2464e-01  +7.5115e-01  3.27e-01  1.94e-03  8.91e-02  6.57e-04  6.81e-03  6.07e-01  
  8  +3.9147e-01  +5.0179e-01  1.10e-01  5.96e-04  2.71e-02  1.08e-04  2.45e-03  7.64e-01  
  9  +3.8678e-01  +4.7656e-01  8.98e-02  4.70e-04  2.13e-02  8.76e-05  1.98e-03  3.41e-01  
 10  +3.7442e-01  +4.0734e-01  3.29e-02  1.68e-04  7.61e-03  2.91e-05  7.82e-04  7.31e-01  
 11  +3.6837e-01  +3.7444e-01  6.07e-03  3.08e-05  1.39e-03  5.20e-06  1.52e-04  8.15e-01  
 12  +3.6802e-01  +3.7246e-01  4.45e-03  2.19e-05  9.91e-04  3.58e-06  1.08e-04  5.78e-01  
 13  +3.6729e-01  +3.6903e-01  1.74e-03  8.27e-06  3.74e-04  1.42e-06  4.15e-05  6.51e-01  
 14  +3.6689e-01  +3.6719e-01  3.00e-04  1.42e-06  6.42e-05  2.09e-07  7.20e-06  9.86e-01  
 15  +3.6680e-01  +3.6680e-01  3.33e-06  1.57e-08  7.12e-07  2.27e-09  8.01e-08  9.89e-01  
 16  +3.6680e-01  +3.6680e-01  3.33e-08  1.57e-10  7.12e-09  2.27e-11  8.02e-10  9.90e-01  
 17  +3.6680e-01  +3.6680e-01  3.33e-10  1.57e-12  7.12e-11  2.28e-13  8.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7411ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:13 PM: Optimal value: 3.668e-01
(CVXPY) Aug 31 04:50:13 PM: Compilation took 5.976e-03 seconds
(CVXPY) Aug 31 04:50:13 PM: Solver (including time spent in interface) took 2.418e-03 seconds
Iteration: 7, Objective: 0.3668
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:13 PM: Your problem has 327 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Finished problem compilation (took 3.491e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 327
  constraints   = 577
  nnz(P)        = 0
  nnz(A)        = 3820
  cones (total) = 1
    : Nonnegative = 1,  numel = 577

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9840e-01  +2.5151e+02  2.51e+02  9.39e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.7812e-01  +5.3037e+01  5.25e+01  3.91e-01  1.31e+01  3.88e-03  5.51e-01  6.12e-01  
  2  +5.2699e-01  +5.7719e+00  5.24e+00  9.95e-02  4.35e+00  1.40e-02  2.06e-01  9.85e-01  
  3  +5.0081e-01  +1.6514e+00  1.15e+00  3.42e-02  1.51e+00  2.83e-03  1.23e-01  8.76e-01  
  4  +4.8198e-01  +1.4799e+00  9.98e-01  1.05e-02  4.87e-01  6.90e-03  2.99e-02  8.33e-01  
  5  +4.6254e-01  +1.2908e+00  8.28e-01  5.83e-03  2.72e-01  6.86e-03  1.72e-02  4.98e-01  
  6  +4.3532e-01  +8.6331e-01  4.28e-01  2.46e-03  1.14e-01  1.90e-03  8.09e-03  7.06e-01  
  7  +4.2342e-01  +7.4346e-01  3.20e-01  1.89e-03  8.65e-02  7.40e-04  6.63e-03  5.36e-01  
  8  +3.9160e-01  +5.0767e-01  1.16e-01  6.23e-04  2.83e-02  1.71e-04  2.55e-03  6.82e-01  
  9  +3.8546e-01  +4.7216e-01  8.67e-02  4.52e-04  2.05e-02  1.20e-04  1.92e-03  4.08e-01  
 10  +3.7385e-01  +4.0502e-01  3.12e-02  1.60e-04  7.21e-03  3.61e-05  7.39e-04  7.38e-01  
 11  +3.6803e-01  +3.7273e-01  4.69e-03  2.39e-05  1.08e-03  5.13e-06  1.17e-04  8.56e-01  
 12  +3.6793e-01  +3.7214e-01  4.21e-03  2.10e-05  9.47e-04  4.22e-06  1.03e-04  3.55e-01  
 13  +3.6718e-01  +3.6855e-01  1.37e-03  6.56e-06  2.96e-04  1.38e-06  3.29e-05  7.04e-01  
 14  +3.6690e-01  +3.6723e-01  3.36e-04  1.60e-06  7.21e-05  2.82e-07  8.14e-06  8.73e-01  
 15  +3.6680e-01  +3.6681e-01  6.57e-06  3.11e-08  1.41e-06  5.39e-09  1.60e-07  9.81e-01  
 16  +3.6680e-01  +3.6680e-01  6.57e-08  3.11e-10  1.41e-08  5.39e-11  1.60e-09  9.90e-01  
 17  +3.6680e-01  +3.6680e-01  6.57e-10  3.11e-12  1.41e-10  5.40e-13  1.60e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2054ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:13 PM: Optimal value: 3.668e-01
(CVXPY) Aug 31 04:50:13 PM: Compilation took 3.491e-03 seconds
(CVXPY) Aug 31 04:50:13 PM: Solver (including time spent in interface) took 3.969e-03 seconds
Iteration: 8, Objective: 0.3668
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Aug 31 04:50:13 PM: Your problem has 328 variables, 250 constraints, and 0 parameters.
(CVXPY) Aug 31 04:50:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Aug 31 04:50:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Aug 31 04:50:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Aug 31 04:50:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Aug 31 04:50:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Applying reduction Dcp2Cone
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Aug 31 04:50:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Aug 31 04:50:13 PM: Applying reduction CLARABEL
(CVXPY) Aug 31 04:50:13 PM: Finished problem compilation (took 4.459e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 328
  constraints   = 578
  nnz(P)        = 0
  nnz(A)        = 3842
  cones (total) = 1
    : Nonnegative = 1,  numel = 578

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9840e-01  +2.5151e+02  2.51e+02  9.39e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.7808e-01  +5.3035e+01  5.25e+01  3.91e-01  1.30e+01  3.88e-03  5.51e-01  6.12e-01  
  2  +5.2690e-01  +5.7612e+00  5.23e+00  9.94e-02  4.33e+00  1.40e-02  2.06e-01  9.86e-01  
  3  +5.0087e-01  +1.6628e+00  1.16e+00  3.44e-02  1.52e+00  2.88e-03  1.23e-01  8.71e-01  
  4  +4.8225e-01  +1.4710e+00  9.89e-01  1.04e-02  4.83e-01  6.90e-03  2.97e-02  8.32e-01  
  5  +4.6151e-01  +1.2730e+00  8.12e-01  5.62e-03  2.62e-01  6.93e-03  1.66e-02  5.09e-01  
  6  +4.3631e-01  +8.7303e-01  4.37e-01  2.55e-03  1.17e-01  1.89e-03  8.38e-03  6.87e-01  
  7  +4.2372e-01  +7.4590e-01  3.22e-01  1.92e-03  8.78e-02  6.87e-04  6.75e-03  5.60e-01  
  8  +3.9147e-01  +5.0665e-01  1.15e-01  6.20e-04  2.81e-02  1.64e-04  2.55e-03  6.72e-01  
  9  +3.8546e-01  +4.7208e-01  8.66e-02  4.52e-04  2.05e-02  1.16e-04  1.93e-03  4.02e-01  
 10  +3.7378e-01  +4.0446e-01  3.07e-02  1.57e-04  7.10e-03  3.40e-05  7.30e-04  7.59e-01  
 11  +3.6803e-01  +3.7264e-01  4.61e-03  2.35e-05  1.06e-03  4.78e-06  1.15e-04  8.63e-01  
 12  +3.6793e-01  +3.7212e-01  4.19e-03  2.09e-05  9.43e-04  4.04e-06  1.02e-04  3.32e-01  
 13  +3.6719e-01  +3.6859e-01  1.40e-03  6.72e-06  3.04e-04  1.36e-06  3.37e-05  6.96e-01  
 14  +3.6690e-01  +3.6726e-01  3.54e-04  1.68e-06  7.60e-05  2.89e-07  8.58e-06  8.74e-01  
 15  +3.6680e-01  +3.6681e-01  7.47e-06  3.54e-08  1.60e-06  5.96e-09  1.82e-07  9.79e-01  
 16  +3.6680e-01  +3.6680e-01  7.47e-08  3.54e-10  1.60e-08  5.96e-11  1.82e-09  9.90e-01  
 17  +3.6680e-01  +3.6680e-01  7.47e-10  3.54e-12  1.60e-10  5.98e-13  1.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0251ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Aug 31 04:50:13 PM: Problem status: optimal
(CVXPY) Aug 31 04:50:13 PM: Optimal value: 3.668e-01
(CVXPY) Aug 31 04:50:13 PM: Compilation took 4.459e-03 seconds
(CVXPY) Aug 31 04:50:13 PM: Solver (including time spent in interface) took 3.937e-03 seconds
FULL MODEL:
  Accruacy: 0.578
  Our objective: 0.15600000000000003

IF 
    (x4 = 1 AND x1 = 0 AND x5 = 0)                                  <-- (term's our objective: 0.06800000000000002)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x2 = 0)            <-- (term's our objective: 0.020000000000000028)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.03600000000000003)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.012000000000000021)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x0 = 0 AND x5 = 0) <-- (term's our objective: 0.020000000000000025)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.4824600219726562
Best over terms:
  Our final objective: 0.06800000000000002
    Its accruacy: 0.534
    Its hamming distance: 5
  Shortest hamming distance: 0
    Its our objective: 0.03600000000000003
  Highest accruacy: 0.534
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

