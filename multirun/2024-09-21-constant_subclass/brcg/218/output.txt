Command:
python test_script.py -s constant_subclass -d 6 -n 500 --seed 34 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.04
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 6.

Computed total variation: 0.264
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:20 PM: Your problem has 263 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Finished problem compilation (took 7.517e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 263
  constraints   = 513
  nnz(P)        = 0
  nnz(A)        = 2263
  cones (total) = 1
    : Nonnegative = 1,  numel = 513

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +2.5072e+02  2.50e+02  9.35e-01  2.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.9245e-01  +5.1838e+01  5.12e+01  3.64e-01  1.27e+01  3.91e-03  5.29e-01  6.27e-01  
  2  +5.3897e-01  +6.9860e+00  6.45e+00  1.19e-01  5.11e+00  1.18e-02  2.34e-01  8.55e-01  
  3  +5.0159e-01  +1.2918e+00  7.90e-01  2.37e-02  9.97e-01  1.72e-05  1.97e-01  6.09e-01  
  4  +5.0033e-01  +6.2877e-01  1.28e-01  3.91e-03  1.70e-01  3.49e-06  4.16e-02  8.09e-01  
  5  +4.9953e-01  +6.1247e-01  1.13e-01  2.86e-03  1.25e-01  7.88e-06  1.36e-02  7.57e-01  
  6  +4.9210e-01  +5.6035e-01  6.82e-02  4.08e-04  1.81e-02  3.76e-05  1.33e-03  9.07e-01  
  7  +4.8522e-01  +5.2382e-01  3.86e-02  2.00e-04  8.87e-03  2.26e-05  7.02e-04  5.93e-01  
  8  +4.7811e-01  +4.9118e-01  1.31e-02  6.01e-05  2.66e-03  9.06e-06  2.39e-04  9.90e-01  
  9  +4.7447e-01  +4.7564e-01  1.17e-03  4.80e-06  2.13e-04  7.70e-07  2.10e-05  9.21e-01  
 10  +4.7410e-01  +4.7412e-01  1.21e-05  4.94e-08  2.19e-06  8.02e-09  2.19e-07  9.90e-01  
 11  +4.7410e-01  +4.7410e-01  1.21e-07  4.94e-10  2.19e-08  8.02e-11  2.19e-09  9.90e-01  
 12  +4.7410e-01  +4.7410e-01  1.21e-09  4.94e-12  2.19e-10  8.04e-13  2.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3636ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:20 PM: Optimal value: 4.741e-01
(CVXPY) Sep 20 07:34:20 PM: Compilation took 7.517e-03 seconds
(CVXPY) Sep 20 07:34:20 PM: Solver (including time spent in interface) took 3.002e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4741
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:20 PM: Your problem has 273 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Finished problem compilation (took 4.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 273
  constraints   = 523
  nnz(P)        = 0
  nnz(A)        = 2716
  cones (total) = 1
    : Nonnegative = 1,  numel = 523

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +2.5100e+02  2.51e+02  9.36e-01  2.21e+01  1.00e+00  1.01e+00   ------   
  1  +5.9019e-01  +5.2001e+01  5.14e+01  3.68e-01  1.30e+01  3.91e-03  5.33e-01  6.25e-01  
  2  +5.3655e-01  +6.7396e+00  6.20e+00  1.15e-01  5.04e+00  1.22e-02  2.27e-01  8.81e-01  
  3  +5.0062e-01  +1.2152e+00  7.15e-01  2.17e-02  9.46e-01  1.10e-04  1.75e-01  7.89e-01  
  4  +4.9923e-01  +7.7367e-01  2.74e-01  8.14e-03  3.63e-01  6.46e-05  5.55e-02  7.15e-01  
  5  +4.8879e-01  +1.1455e+00  6.57e-01  5.89e-03  2.69e-01  3.50e-04  1.92e-02  9.90e-01  
  6  +4.7045e-01  +7.5727e-01  2.87e-01  1.52e-03  6.99e-02  2.70e-04  5.09e-03  7.72e-01  
  7  +4.6060e-01  +6.7384e-01  2.13e-01  9.67e-04  4.43e-02  2.11e-04  3.26e-03  4.93e-01  
  8  +4.4319e-01  +5.2325e-01  8.01e-02  3.50e-04  1.60e-02  6.39e-05  1.26e-03  8.12e-01  
  9  +4.3937e-01  +5.0613e-01  6.68e-02  2.79e-04  1.28e-02  5.58e-05  1.00e-03  2.43e-01  
 10  +4.3020e-01  +4.5883e-01  2.86e-02  1.14e-04  5.27e-03  2.99e-05  4.32e-04  9.90e-01  
 11  +4.2116e-01  +4.2361e-01  2.46e-03  9.56e-06  4.43e-04  2.19e-06  3.82e-05  9.25e-01  
 12  +4.2031e-01  +4.2034e-01  3.04e-05  1.18e-07  5.48e-06  2.68e-08  4.75e-07  9.88e-01  
 13  +4.2030e-01  +4.2030e-01  3.04e-07  1.18e-09  5.48e-08  2.68e-10  4.75e-09  9.90e-01  
 14  +4.2030e-01  +4.2030e-01  3.04e-09  1.18e-11  5.48e-10  2.68e-12  4.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8751ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:20 PM: Optimal value: 4.203e-01
(CVXPY) Sep 20 07:34:20 PM: Compilation took 4.998e-03 seconds
(CVXPY) Sep 20 07:34:20 PM: Solver (including time spent in interface) took 3.506e-03 seconds
Iteration: 2, Objective: 0.4203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:20 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Finished problem compilation (took 4.518e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 2924
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9901e-01  +2.5108e+02  2.51e+02  9.36e-01  2.21e+01  1.00e+00  1.01e+00   ------   
  1  +5.8695e-01  +5.2173e+01  5.16e+01  3.72e-01  1.30e+01  3.91e-03  5.36e-01  6.23e-01  
  2  +5.3411e-01  +6.4924e+00  5.96e+00  1.10e-01  4.80e+00  1.27e-02  2.19e-01  9.09e-01  
  3  +5.0078e-01  +1.3158e+00  8.15e-01  2.51e-02  1.09e+00  5.83e-04  1.60e-01  8.16e-01  
  4  +4.9781e-01  +9.7625e-01  4.78e-01  1.31e-02  5.82e-01  5.80e-04  5.84e-02  7.01e-01  
  5  +4.7779e-01  +9.1072e-01  4.33e-01  3.45e-03  1.58e-01  1.84e-03  1.12e-02  9.22e-01  
  6  +4.6609e-01  +7.9950e-01  3.33e-01  1.98e-03  9.08e-02  1.43e-03  6.45e-03  5.61e-01  
  7  +4.5563e-01  +7.2158e-01  2.66e-01  1.28e-03  5.85e-02  1.17e-03  4.17e-03  4.49e-01  
  8  +4.4963e-01  +6.2825e-01  1.79e-01  9.37e-04  4.28e-02  1.63e-04  3.20e-03  7.26e-01  
  9  +4.2388e-01  +4.9484e-01  7.10e-02  3.05e-04  1.39e-02  6.62e-05  1.11e-03  6.74e-01  
 10  +4.1927e-01  +4.7579e-01  5.65e-02  2.32e-04  1.07e-02  5.46e-05  8.51e-04  2.89e-01  
 11  +4.0722e-01  +4.2049e-01  1.33e-02  5.29e-05  2.44e-03  1.43e-05  2.09e-04  9.90e-01  
 12  +4.0270e-01  +4.0325e-01  5.50e-04  2.18e-06  1.01e-04  5.55e-07  8.90e-06  9.63e-01  
 13  +4.0250e-01  +4.0251e-01  5.50e-06  2.18e-08  1.00e-06  5.55e-09  8.91e-08  9.90e-01  
 14  +4.0250e-01  +4.0250e-01  5.50e-08  2.18e-10  1.00e-08  5.55e-11  8.91e-10  9.90e-01  
 15  +4.0250e-01  +4.0250e-01  5.50e-10  2.18e-12  1.00e-10  5.55e-13  8.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.2103ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:20 PM: Optimal value: 4.025e-01
(CVXPY) Sep 20 07:34:20 PM: Compilation took 4.518e-03 seconds
(CVXPY) Sep 20 07:34:20 PM: Solver (including time spent in interface) took 4.004e-03 seconds
Iteration: 3, Objective: 0.4025
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:20 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Finished problem compilation (took 5.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 3102
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9879e-01  +2.5120e+02  2.51e+02  9.37e-01  2.21e+01  1.00e+00  1.02e+00   ------   
  1  +5.8445e-01  +5.2382e+01  5.18e+01  3.77e-01  1.29e+01  3.90e-03  5.40e-01  6.20e-01  
  2  +5.3266e-01  +6.3591e+00  5.83e+00  1.08e-01  4.67e+00  1.30e-02  2.15e-01  9.26e-01  
  3  +5.0015e-01  +1.2429e+00  7.43e-01  2.31e-02  1.01e+00  4.70e-04  1.45e-01  9.40e-01  
  4  +4.9455e-01  +9.7016e-01  4.76e-01  1.06e-02  4.77e-01  6.86e-04  3.90e-02  8.21e-01  
  5  +4.8189e-01  +8.8655e-01  4.05e-01  4.30e-03  1.96e-01  1.19e-03  1.39e-02  7.19e-01  
  6  +4.7557e-01  +8.4172e-01  3.66e-01  3.11e-03  1.42e-01  1.05e-03  9.96e-03  4.34e-01  
  7  +4.5503e-01  +7.0684e-01  2.52e-01  1.47e-03  6.70e-02  8.73e-04  4.92e-03  5.56e-01  
  8  +4.3173e-01  +5.6286e-01  1.31e-01  6.35e-04  2.88e-02  1.70e-04  2.26e-03  8.40e-01  
  9  +4.2490e-01  +5.2963e-01  1.05e-01  4.86e-04  2.20e-02  1.35e-04  1.76e-03  2.62e-01  
 10  +4.1147e-01  +4.6222e-01  5.08e-02  2.27e-04  1.03e-02  4.67e-05  8.85e-04  9.90e-01  
 11  +3.9815e-01  +4.0359e-01  5.44e-03  2.37e-05  1.07e-03  3.83e-06  1.00e-04  9.13e-01  
 12  +3.9664e-01  +3.9704e-01  3.99e-04  1.73e-06  7.80e-05  2.65e-07  7.52e-06  9.26e-01  
 13  +3.9652e-01  +3.9658e-01  5.57e-05  2.36e-07  1.06e-05  3.76e-08  1.07e-06  8.74e-01  
 14  +3.9650e-01  +3.9650e-01  1.92e-06  8.11e-09  3.64e-07  1.44e-09  3.72e-08  9.81e-01  
 15  +3.9650e-01  +3.9650e-01  1.92e-08  8.12e-11  3.65e-09  1.45e-11  3.73e-10  9.90e-01  
 16  +3.9650e-01  +3.9650e-01  1.92e-10  8.12e-13  3.65e-11  1.47e-13  3.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.74ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:20 PM: Optimal value: 3.965e-01
(CVXPY) Sep 20 07:34:20 PM: Compilation took 5.001e-03 seconds
(CVXPY) Sep 20 07:34:20 PM: Solver (including time spent in interface) took 3.515e-03 seconds
Iteration: 4, Objective: 0.3965
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:20 PM: Your problem has 303 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:20 PM: Finished problem compilation (took 4.996e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 303
  constraints   = 553
  nnz(P)        = 0
  nnz(A)        = 3240
  cones (total) = 1
    : Nonnegative = 1,  numel = 553

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9877e-01  +2.5122e+02  2.51e+02  9.38e-01  2.20e+01  1.00e+00  1.02e+00   ------   
  1  +5.8236e-01  +5.2405e+01  5.18e+01  3.79e-01  1.28e+01  3.90e-03  5.40e-01  6.20e-01  
  2  +5.3111e-01  +6.1846e+00  5.65e+00  1.04e-01  4.48e+00  1.32e-02  2.09e-01  9.42e-01  
  3  +4.9991e-01  +1.2660e+00  7.66e-01  2.39e-02  1.04e+00  7.76e-04  1.31e-01  9.88e-01  
  4  +4.8718e-01  +1.0187e+00  5.31e-01  7.38e-03  3.34e-01  1.84e-03  2.34e-02  9.25e-01  
  5  +4.7606e-01  +9.4927e-01  4.73e-01  4.25e-03  1.93e-01  2.15e-03  1.33e-02  5.15e-01  
  6  +4.5859e-01  +8.1719e-01  3.59e-01  2.25e-03  1.02e-01  1.80e-03  7.23e-03  5.52e-01  
  7  +4.5621e-01  +8.0605e-01  3.50e-01  2.04e-03  9.27e-02  1.66e-03  6.55e-03  1.88e-01  
  8  +4.4017e-01  +6.6294e-01  2.23e-01  1.20e-03  5.43e-02  1.70e-05  4.08e-03  9.29e-01  
  9  +4.1893e-01  +5.4814e-01  1.29e-01  6.22e-04  2.79e-02  1.68e-05  2.27e-03  4.82e-01  
 10  +4.0244e-01  +4.7004e-01  6.76e-02  3.06e-04  1.37e-02  3.40e-05  1.21e-03  7.22e-01  
 11  +3.8931e-01  +4.1177e-01  2.25e-02  9.65e-05  4.31e-03  1.21e-05  4.10e-04  7.05e-01  
 12  +3.8303e-01  +3.8399e-01  9.61e-04  4.08e-06  1.82e-04  6.57e-07  1.82e-05  9.82e-01  
 13  +3.8271e-01  +3.8274e-01  2.99e-05  1.27e-07  5.65e-06  1.84e-08  5.78e-07  9.71e-01  
 14  +3.8270e-01  +3.8270e-01  2.99e-07  1.27e-09  5.66e-08  1.84e-10  5.80e-09  9.90e-01  
 15  +3.8270e-01  +3.8270e-01  2.99e-09  1.27e-11  5.66e-10  1.84e-12  5.80e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7704ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:20 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:20 PM: Optimal value: 3.827e-01
(CVXPY) Sep 20 07:34:20 PM: Compilation took 4.996e-03 seconds
(CVXPY) Sep 20 07:34:20 PM: Solver (including time spent in interface) took 4.514e-03 seconds
Iteration: 5, Objective: 0.3827
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:21 PM: Your problem has 313 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:21 PM: Finished problem compilation (took 4.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 313
  constraints   = 563
  nnz(P)        = 0
  nnz(A)        = 3392
  cones (total) = 1
    : Nonnegative = 1,  numel = 563

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9875e-01  +2.5113e+02  2.51e+02  9.38e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.8171e-01  +5.2468e+01  5.19e+01  3.81e-01  1.26e+01  3.91e-03  5.40e-01  6.20e-01  
  2  +5.3010e-01  +6.0735e+00  5.54e+00  1.02e-01  4.36e+00  1.33e-02  2.07e-01  9.51e-01  
  3  +5.0000e-01  +1.2948e+00  7.95e-01  2.49e-02  1.07e+00  9.31e-04  1.26e-01  9.90e-01  
  4  +4.8969e-01  +1.0795e+00  5.90e-01  9.19e-03  4.14e-01  1.90e-03  2.92e-02  8.56e-01  
  5  +4.7076e-01  +9.0234e-01  4.32e-01  3.45e-03  1.56e-01  2.49e-03  1.08e-02  6.82e-01  
  6  +4.5627e-01  +8.0510e-01  3.49e-01  2.09e-03  9.45e-02  2.04e-03  6.67e-03  4.96e-01  
  7  +4.4542e-01  +7.2135e-01  2.76e-01  1.55e-03  6.99e-02  9.17e-04  5.10e-03  5.20e-01  
  8  +4.1677e-01  +5.4231e-01  1.26e-01  5.93e-04  2.65e-02  2.84e-04  2.15e-03  7.24e-01  
  9  +4.0546e-01  +4.8513e-01  7.97e-02  3.72e-04  1.66e-02  1.12e-04  1.45e-03  6.20e-01  
 10  +3.9053e-01  +4.1674e-01  2.62e-02  1.14e-04  5.07e-03  3.50e-05  4.80e-04  7.31e-01  
 11  +3.8338e-01  +3.8554e-01  2.15e-03  9.24e-06  4.10e-04  2.42e-06  4.13e-05  9.27e-01  
 12  +3.8274e-01  +3.8288e-01  1.33e-04  5.70e-07  2.53e-05  1.32e-07  2.61e-06  9.45e-01  
 13  +3.8270e-01  +3.8270e-01  1.41e-06  6.05e-09  2.68e-07  1.35e-09  2.79e-08  9.90e-01  
 14  +3.8270e-01  +3.8270e-01  1.41e-08  6.05e-11  2.68e-09  1.35e-11  2.79e-10  9.90e-01  
 15  +3.8270e-01  +3.8270e-01  1.41e-10  6.05e-13  2.68e-11  1.35e-13  2.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.0464ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:21 PM: Optimal value: 3.827e-01
(CVXPY) Sep 20 07:34:21 PM: Compilation took 4.998e-03 seconds
(CVXPY) Sep 20 07:34:21 PM: Solver (including time spent in interface) took 5.534e-03 seconds
Iteration: 6, Objective: 0.3827
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:21 PM: Your problem has 323 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:21 PM: Finished problem compilation (took 4.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 323
  constraints   = 573
  nnz(P)        = 0
  nnz(A)        = 3541
  cones (total) = 1
    : Nonnegative = 1,  numel = 573

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9874e-01  +2.5113e+02  2.51e+02  9.39e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +5.8113e-01  +5.2515e+01  5.19e+01  3.83e-01  1.25e+01  3.91e-03  5.40e-01  6.19e-01  
  2  +5.2923e-01  +5.9748e+00  5.45e+00  1.01e-01  4.23e+00  1.34e-02  2.04e-01  9.60e-01  
  3  +5.0004e-01  +1.3288e+00  8.29e-01  2.58e-02  1.11e+00  1.17e-03  1.21e-01  9.90e-01  
  4  +4.8489e-01  +1.0646e+00  5.80e-01  6.87e-03  3.09e-01  2.90e-03  2.13e-02  9.14e-01  
  5  +4.6840e-01  +9.2587e-01  4.57e-01  3.36e-03  1.51e-01  3.06e-03  1.05e-02  5.78e-01  
  6  +4.5945e-01  +8.3021e-01  3.71e-01  2.43e-03  1.09e-01  1.78e-03  7.80e-03  4.60e-01  
  7  +4.5482e-01  +8.0761e-01  3.53e-01  2.09e-03  9.40e-02  1.56e-03  6.74e-03  2.52e-01  
  8  +4.3396e-01  +6.3973e-01  2.06e-01  1.09e-03  4.88e-02  1.63e-05  3.78e-03  9.47e-01  
  9  +4.1563e-01  +5.3838e-01  1.23e-01  5.93e-04  2.64e-02  1.97e-05  2.20e-03  4.79e-01  
 10  +3.9987e-01  +4.6030e-01  6.04e-02  2.73e-04  1.21e-02  3.34e-05  1.09e-03  7.64e-01  
 11  +3.8637e-01  +3.9806e-01  1.17e-02  5.12e-05  2.26e-03  7.79e-06  2.22e-04  8.93e-01  
 12  +3.8396e-01  +3.8765e-01  3.69e-03  1.60e-05  7.09e-04  2.84e-06  7.13e-05  8.40e-01  
 13  +3.8296e-01  +3.8368e-01  7.23e-04  3.13e-06  1.38e-04  5.92e-07  1.43e-05  9.46e-01  
 14  +3.8271e-01  +3.8272e-01  1.42e-05  6.13e-08  2.71e-06  1.03e-08  2.85e-07  9.83e-01  
 15  +3.8270e-01  +3.8270e-01  1.42e-07  6.13e-10  2.71e-08  1.03e-10  2.85e-09  9.90e-01  
 16  +3.8270e-01  +3.8270e-01  1.42e-09  6.13e-12  2.71e-10  1.03e-12  2.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2627ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:21 PM: Optimal value: 3.827e-01
(CVXPY) Sep 20 07:34:21 PM: Compilation took 4.508e-03 seconds
(CVXPY) Sep 20 07:34:21 PM: Solver (including time spent in interface) took 6.019e-03 seconds
Iteration: 7, Objective: 0.3827
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:34:21 PM: Your problem has 324 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:34:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:34:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:34:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:34:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:34:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:34:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:34:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:34:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:34:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:34:21 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 324
  constraints   = 574
  nnz(P)        = 0
  nnz(A)        = 3587
  cones (total) = 1
    : Nonnegative = 1,  numel = 574

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9874e-01  +2.5113e+02  2.51e+02  9.39e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +5.8132e-01  +5.2485e+01  5.19e+01  3.83e-01  1.25e+01  3.91e-03  5.40e-01  6.20e-01  
  2  +5.2922e-01  +5.9698e+00  5.44e+00  1.01e-01  4.23e+00  1.34e-02  2.04e-01  9.59e-01  
  3  +5.0003e-01  +1.3304e+00  8.30e-01  2.59e-02  1.12e+00  1.22e-03  1.21e-01  9.90e-01  
  4  +4.8488e-01  +1.0685e+00  5.84e-01  6.91e-03  3.12e-01  3.00e-03  2.15e-02  9.10e-01  
  5  +4.6771e-01  +9.2002e-01  4.52e-01  3.29e-03  1.49e-01  3.13e-03  1.03e-02  5.88e-01  
  6  +4.5872e-01  +8.2502e-01  3.66e-01  2.39e-03  1.08e-01  1.81e-03  7.69e-03  4.60e-01  
  7  +4.5267e-01  +7.9336e-01  3.41e-01  1.98e-03  8.92e-02  1.51e-03  6.43e-03  3.02e-01  
  8  +4.2501e-01  +5.8445e-01  1.59e-01  8.06e-04  3.60e-02  1.59e-05  2.87e-03  9.45e-01  
  9  +4.1685e-01  +5.4504e-01  1.28e-01  6.14e-04  2.74e-02  2.30e-05  2.25e-03  2.90e-01  
 10  +3.9794e-01  +4.5121e-01  5.33e-02  2.39e-04  1.06e-02  2.60e-05  9.64e-04  7.55e-01  
 11  +3.8512e-01  +3.9247e-01  7.35e-03  3.21e-05  1.42e-03  5.30e-06  1.40e-04  9.54e-01  
 12  +3.8399e-01  +3.8785e-01  3.87e-03  1.68e-05  7.46e-04  3.02e-06  7.54e-05  6.99e-01  
 13  +3.8280e-01  +3.8308e-01  2.82e-04  1.22e-06  5.42e-05  2.07e-07  5.61e-06  9.30e-01  
 14  +3.8270e-01  +3.8270e-01  3.38e-06  1.47e-08  6.50e-07  2.33e-09  6.81e-08  9.89e-01  
 15  +3.8270e-01  +3.8270e-01  3.38e-08  1.47e-10  6.50e-09  2.33e-11  6.81e-10  9.90e-01  
 16  +3.8270e-01  +3.8270e-01  3.38e-10  1.47e-12  6.50e-11  2.33e-13  6.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1956ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:34:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:34:21 PM: Optimal value: 3.827e-01
(CVXPY) Sep 20 07:34:21 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:34:21 PM: Solver (including time spent in interface) took 5.519e-03 seconds
FULL MODEL:
  Accruacy: 0.59
  Our objective: 0.18

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.064)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.028)
 OR (x1 = 1 AND x3 = 1 AND x4 = 0)                                  <-- (term's our objective: 0.032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.673310995101929
Best over terms:
  Our final objective: 0.06399999999999996
    Its accruacy: 0.532
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.06399999999999996
  Highest accruacy: 0.532
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

