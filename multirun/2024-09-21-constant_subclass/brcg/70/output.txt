Command:
python test_script.py -s constant_subclass -d 2 -n 10000 --seed 43 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2828
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 2.

Computed total variation: 0.28280000000000005
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:17 PM: Your problem has 5005 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:17 PM: Finished problem compilation (took 1.152e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5005
  constraints   = 10005
  nnz(P)        = 0
  nnz(A)        = 25005
  cones (total) = 1
    : Nonnegative = 1,  numel = 10005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +5.0009e+03  5.00e+03  9.83e-01  7.04e+01  1.00e+00  1.00e+00   ------   
  1  +6.3751e-01  +8.7398e+02  8.73e+02  2.67e-01  3.33e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5907e-01  +1.6318e+02  1.63e+02  1.33e-01  1.90e+01  5.29e-03  2.15e-01  5.88e-01  
  3  +5.0515e-01  +1.5483e+01  1.50e+01  7.63e-02  1.04e+01  4.91e-06  2.13e-01  6.93e-02  
  4  +5.0005e-01  +1.4346e+00  9.35e-01  6.22e-03  8.73e-01  2.74e-06  1.72e-01  4.84e-01  
  5  +4.9984e-01  +7.7446e-01  2.75e-01  1.81e-03  2.56e-01  2.24e-06  2.93e-02  8.83e-01  
  6  +4.8403e-01  +9.1698e-01  4.33e-01  2.60e-04  3.75e-02  1.34e-04  7.40e-04  9.83e-01  
  7  +4.4560e-01  +6.3166e-01  1.86e-01  4.46e-05  6.40e-03  1.95e-04  1.32e-04  8.28e-01  
  8  +4.0781e-01  +4.3034e-01  2.25e-02  5.65e-06  8.02e-04  1.47e-06  2.12e-05  9.79e-01  
  9  +4.0308e-01  +4.0570e-01  2.63e-03  6.38e-07  9.06e-05  1.66e-07  2.55e-06  8.86e-01  
 10  +4.0222e-01  +4.0231e-01  8.27e-05  1.81e-08  2.57e-06  4.22e-09  8.04e-08  9.86e-01  
 11  +4.0220e-01  +4.0220e-01  8.27e-07  1.80e-10  2.56e-08  4.23e-11  8.05e-10  9.90e-01  
 12  +4.0220e-01  +4.0220e-01  8.29e-09  1.81e-12  2.57e-10  4.56e-13  8.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.4121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:17 PM: Optimal value: 4.022e-01
(CVXPY) Sep 20 07:26:17 PM: Compilation took 1.152e-02 seconds
(CVXPY) Sep 20 07:26:17 PM: Solver (including time spent in interface) took 2.757e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:17 PM: Your problem has 5006 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:17 PM: Finished problem compilation (took 9.529e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5006
  constraints   = 10006
  nnz(P)        = 0
  nnz(A)        = 26921
  cones (total) = 1
    : Nonnegative = 1,  numel = 10006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0001e-01  +5.0016e+03  5.00e+03  9.83e-01  7.29e+01  1.00e+00  1.00e+00   ------   
  1  +6.3736e-01  +8.7431e+02  8.74e+02  2.67e-01  3.45e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5897e-01  +1.6297e+02  1.62e+02  1.32e-01  1.97e+01  5.30e-03  2.15e-01  5.89e-01  
  3  +5.0496e-01  +1.5036e+01  1.45e+01  7.48e-02  1.06e+01  4.79e-06  2.13e-01  7.32e-02  
  4  +5.0056e-01  +2.9094e+00  2.41e+00  1.59e-02  2.28e+00  3.04e-06  1.94e-01  2.12e-01  
  5  +5.0001e-01  +7.7227e-01  2.72e-01  1.81e-03  2.65e-01  8.26e-07  4.15e-02  8.62e-01  
  6  +4.9969e-01  +8.4962e-01  3.50e-01  2.04e-03  3.01e-01  3.60e-06  1.18e-02  7.91e-01  
  7  +4.9570e-01  +8.3444e-01  3.39e-01  4.13e-04  6.21e-02  3.47e-05  1.14e-03  9.04e-01  
  8  +4.7953e-01  +8.2472e-01  3.45e-01  9.85e-05  1.48e-02  1.21e-04  2.52e-04  9.90e-01  
  9  +4.7859e-01  +8.2898e-01  3.50e-01  9.32e-05  1.40e-02  1.17e-04  2.38e-04  1.63e-01  
 10  +4.6245e-01  +7.6717e-01  3.05e-01  7.09e-05  1.06e-02  1.36e-05  1.92e-04  9.05e-01  
 11  +4.1124e-01  +5.4047e-01  1.29e-01  2.44e-05  3.61e-03  5.89e-06  7.32e-05  9.52e-01  
 12  +3.7432e-01  +4.1010e-01  3.58e-02  6.56e-06  9.66e-04  1.55e-06  2.25e-05  8.71e-01  
 13  +3.5909e-01  +3.5994e-01  8.49e-04  1.52e-07  2.23e-05  1.50e-08  5.50e-07  9.78e-01  
 14  +3.5870e-01  +3.5871e-01  8.49e-06  1.51e-09  2.23e-07  1.50e-10  5.51e-09  9.90e-01  
 15  +3.5870e-01  +3.5870e-01  8.49e-08  1.51e-11  2.23e-09  1.50e-12  5.52e-11  9.90e-01  
 16  +3.5870e-01  +3.5870e-01  8.49e-10  1.51e-13  2.23e-11  1.51e-14  5.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.3803ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:17 PM: Optimal value: 3.587e-01
(CVXPY) Sep 20 07:26:17 PM: Compilation took 9.529e-03 seconds
(CVXPY) Sep 20 07:26:17 PM: Solver (including time spent in interface) took 4.009e-02 seconds
FULL MODEL:
  Accruacy: 0.6414
  Our objective: 0.2828

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.2828)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.0302948951721191
Best over terms:
  Our final objective: 0.2828
    Its accruacy: 0.6414
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.2828
  Highest accruacy: 0.6414
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

