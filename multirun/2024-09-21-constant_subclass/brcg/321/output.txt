Command:
python test_script.py -s constant_subclass -d 9 -n 10 --seed 56 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:38 PM: Your problem has 24 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:38 PM: Finished problem compilation (took 5.995e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 24
  constraints   = 29
  nnz(P)        = 0
  nnz(A)        = 79
  cones (total) = 1
    : Nonnegative = 1,  numel = 29

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6983e-01  +6.2059e+00  5.74e+00  7.67e-01  2.67e+00  1.00e+00  1.28e+00   ------   
  1  +4.4136e-01  +1.2787e+00  8.37e-01  3.00e-01  1.21e+00  3.65e-03  6.19e-01  6.97e-01  
  2  +2.7471e-01  +3.9772e-01  1.23e-01  4.77e-02  2.11e-01  1.02e-02  1.47e-01  9.06e-01  
  3  +2.5558e-01  +2.7674e-01  2.12e-02  7.88e-03  3.60e-02  1.99e-03  2.79e-02  8.28e-01  
  4  +2.5033e-01  +2.5089e-01  5.63e-04  2.13e-04  9.79e-04  4.18e-05  7.79e-04  9.76e-01  
  5  +2.5017e-01  +2.5023e-01  6.03e-05  2.27e-05  1.04e-04  3.95e-06  8.68e-05  8.96e-01  
  6  +2.5015e-01  +2.5015e-01  9.29e-07  3.40e-07  1.58e-06  4.78e-08  1.39e-06  9.90e-01  
  7  +2.5015e-01  +2.5015e-01  9.29e-09  3.40e-09  1.58e-08  4.78e-10  1.39e-08  9.90e-01  
  8  +2.5015e-01  +2.5015e-01  9.30e-11  3.40e-11  1.58e-10  4.78e-12  1.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 206.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:38 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:38 PM: Optimal value: 2.502e-01
(CVXPY) Sep 20 07:55:38 PM: Compilation took 5.995e-03 seconds
(CVXPY) Sep 20 07:55:38 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.2502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:38 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:38 PM: Finished problem compilation (took 3.944e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 111
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.0018e-01  +6.2227e+00  5.82e+00  7.99e-01  2.79e+00  1.00e+00  1.27e+00   ------   
  1  +2.4887e-01  +1.1222e+00  8.73e-01  3.22e-01  1.17e+00  4.00e-03  5.74e-01  6.95e-01  
  2  +1.1642e-01  +3.4311e-01  2.27e-01  7.50e-02  3.77e-01  1.54e-02  2.02e-01  8.27e-01  
  3  +1.9389e-02  +5.0765e-02  3.14e-02  7.73e-03  4.54e-02  3.06e-03  2.63e-02  8.90e-01  
  4  +7.3209e-04  +1.4793e-03  7.47e-04  1.81e-04  1.06e-03  7.11e-05  6.29e-04  9.78e-01  
  5  +3.1212e-04  +3.3545e-04  2.33e-05  6.45e-06  3.65e-05  6.78e-07  2.23e-05  9.65e-01  
  6  +3.0015e-04  +3.0046e-04  3.12e-07  9.31e-08  5.00e-07  1.25e-08  3.21e-07  9.86e-01  
  7  +3.0000e-04  +3.0000e-04  3.12e-09  9.31e-10  4.99e-09  1.25e-10  3.21e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 164.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:38 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:38 PM: Optimal value: 3.000e-04
(CVXPY) Sep 20 07:55:38 PM: Compilation took 3.944e-03 seconds
(CVXPY) Sep 20 07:55:38 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:38 PM: Your problem has 40 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:38 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 45
  nnz(P)        = 0
  nnz(A)        = 129
  cones (total) = 1
    : Nonnegative = 1,  numel = 45

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.4004e-01  +6.3145e+00  5.97e+00  8.12e-01  2.82e+00  1.00e+00  1.29e+00   ------   
  1  +1.0050e-01  +1.0565e+00  9.56e-01  3.44e-01  1.18e+00  4.28e-03  5.77e-01  6.73e-01  
  2  +2.8490e-02  +1.6094e-01  1.32e-01  5.57e-02  2.26e-01  1.15e-02  1.38e-01  9.04e-01  
  3  +1.5625e-03  +6.4995e-03  4.94e-03  2.08e-03  8.57e-03  4.15e-04  5.74e-03  9.65e-01  
  4  +2.6187e-04  +3.4930e-04  8.74e-05  3.90e-05  1.59e-04  4.12e-06  1.08e-04  9.81e-01  
  5  +2.3388e-04  +2.4030e-04  6.42e-06  3.24e-06  1.19e-05  2.57e-07  9.82e-06  9.18e-01  
  6  +2.3336e-04  +2.3346e-04  1.06e-07  5.37e-08  1.97e-07  4.31e-09  1.64e-07  9.83e-01  
  7  +2.3333e-04  +2.3333e-04  1.06e-09  5.37e-10  1.97e-09  4.31e-11  1.64e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:38 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:38 PM: Optimal value: 2.333e-04
(CVXPY) Sep 20 07:55:38 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:55:38 PM: Solver (including time spent in interface) took 1.001e-03 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.4)
 OR (x1 = 0 AND x8 = 0)            <-- (term's our objective: 0.4)
 OR (x3 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3912057876586914
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 10
  Shortest hamming distance: 7
    Its our objective: 0.4
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

