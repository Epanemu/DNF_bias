Command:
python test_script.py -s constant_subclass -d 6 -n 5000 --seed 56 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0168
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 6.

Computed total variation: 0.10919999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:04 PM: Your problem has 2513 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Finished problem compilation (took 1.451e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2513
  constraints   = 5013
  nnz(P)        = 0
  nnz(A)        = 22513
  cones (total) = 1
    : Nonnegative = 1,  numel = 5013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5007e+03  2.50e+03  9.79e-01  6.97e+01  1.00e+00  1.00e+00   ------   
  1  +5.9311e-01  +5.1464e+02  5.14e+02  3.83e-01  4.22e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4183e-01  +6.8299e+01  6.78e+01  1.47e-01  2.04e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1007e-01  +1.6878e+01  1.64e+01  1.04e-01  1.40e+01  2.85e-05  2.38e-01  1.30e-01  
  4  +5.0023e-01  +9.9463e-01  4.94e-01  4.75e-03  6.62e-01  6.45e-06  1.20e-01  9.90e-01  
  5  +5.0001e-01  +5.3260e-01  3.26e-02  3.08e-04  4.33e-02  6.23e-07  1.26e-02  9.31e-01  
  6  +5.0000e-01  +5.2248e-01  2.25e-02  2.12e-04  2.98e-02  5.93e-07  5.56e-03  6.31e-01  
  7  +4.9997e-01  +5.1541e-01  1.54e-02  1.30e-04  1.82e-02  1.69e-06  9.26e-04  8.58e-01  
  8  +4.9890e-01  +5.1165e-01  1.28e-02  9.32e-06  1.32e-03  4.00e-05  3.00e-05  9.69e-01  
  9  +4.9683e-01  +5.0203e-01  5.20e-03  2.57e-06  3.63e-04  1.91e-05  8.60e-06  7.75e-01  
 10  +4.9570e-01  +4.9737e-01  1.68e-03  7.43e-07  1.05e-04  3.77e-06  2.71e-06  7.79e-01  
 11  +4.9515e-01  +4.9527e-01  1.26e-04  5.04e-08  7.12e-06  3.79e-08  2.03e-07  9.88e-01  
 12  +4.9510e-01  +4.9510e-01  1.31e-06  5.18e-10  7.32e-08  3.92e-10  2.11e-09  9.90e-01  
 13  +4.9510e-01  +4.9510e-01  1.31e-08  5.18e-12  7.32e-10  3.92e-12  2.11e-11  9.90e-01  
 14  +4.9510e-01  +4.9510e-01  1.31e-10  5.19e-14  7.35e-12  4.58e-14  2.45e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.9909ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:04 PM: Optimal value: 4.951e-01
(CVXPY) Sep 20 07:35:04 PM: Compilation took 1.451e-02 seconds
(CVXPY) Sep 20 07:35:04 PM: Solver (including time spent in interface) took 3.905e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4951
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:04 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Finished problem compilation (took 1.221e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 25502
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.14e+01  1.00e+00  1.00e+00   ------   
  1  +5.9295e-01  +5.1497e+02  5.14e+02  3.84e-01  4.32e+01  3.92e-03  5.27e-01  6.26e-01  
  2  +5.4159e-01  +6.8073e+01  6.75e+01  1.47e-01  2.08e+01  1.16e-02  2.44e-01  8.28e-01  
  3  +5.0999e-01  +1.6799e+01  1.63e+01  1.03e-01  1.43e+01  2.86e-05  2.38e-01  1.33e-01  
  4  +5.0037e-01  +1.2187e+00  7.18e-01  6.91e-03  9.83e-01  6.88e-06  1.40e-01  8.09e-01  
  5  +5.0007e-01  +6.7335e-01  1.73e-01  1.65e-03  2.36e-01  2.19e-06  5.28e-02  6.68e-01  
  6  +5.0001e-01  +5.5953e-01  5.95e-02  5.64e-04  8.10e-02  1.13e-06  1.36e-02  8.44e-01  
  7  +4.9959e-01  +6.5570e-01  1.56e-01  5.12e-04  7.40e-02  1.72e-05  1.81e-03  9.90e-01  
  8  +4.9713e-01  +6.0403e-01  1.07e-01  8.48e-05  1.23e-02  6.49e-05  2.73e-04  8.50e-01  
  9  +4.9616e-01  +5.7710e-01  8.09e-02  6.17e-05  8.93e-03  4.09e-05  2.01e-04  3.66e-01  
 10  +4.9391e-01  +5.4521e-01  5.13e-02  3.27e-05  4.72e-03  2.39e-05  1.09e-04  5.42e-01  
 11  +4.9477e-01  +5.4981e-01  5.50e-02  3.26e-05  4.72e-03  2.40e-05  1.08e-04  1.48e-01  
 12  +4.9474e-01  +5.3672e-01  4.20e-02  2.31e-05  3.35e-03  5.20e-06  7.70e-05  7.68e-01  
 13  +4.9253e-01  +5.2151e-01  2.90e-02  1.47e-05  2.12e-03  1.89e-06  5.11e-05  8.79e-01  
 14  +4.9095e-01  +5.1375e-01  2.28e-02  1.08e-05  1.56e-03  1.53e-06  3.82e-05  3.59e-01  
 15  +4.9038e-01  +5.1012e-01  1.97e-02  9.93e-06  1.44e-03  1.36e-06  3.62e-05  4.40e-01  
 16  +4.8821e-01  +4.9987e-01  1.17e-02  5.52e-06  7.98e-04  7.79e-07  2.11e-05  5.54e-01  
 17  +4.8819e-01  +4.9978e-01  1.16e-02  5.43e-06  7.85e-04  8.20e-07  2.06e-05  1.79e-01  
 18  +4.8534e-01  +4.8708e-01  1.75e-03  7.54e-07  1.09e-04  9.65e-08  3.09e-06  8.68e-01  
 19  +4.8482e-01  +4.8487e-01  5.29e-05  2.28e-08  3.29e-06  2.10e-09  1.00e-07  9.71e-01  
 20  +4.8480e-01  +4.8480e-01  5.28e-07  2.27e-10  3.28e-08  2.09e-11  1.01e-09  9.90e-01  
 21  +4.8480e-01  +4.8480e-01  5.28e-09  2.27e-12  3.28e-10  2.09e-13  1.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.1204ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:04 PM: Optimal value: 4.848e-01
(CVXPY) Sep 20 07:35:04 PM: Compilation took 1.221e-02 seconds
(CVXPY) Sep 20 07:35:04 PM: Solver (including time spent in interface) took 5.775e-02 seconds
Iteration: 2, Objective: 0.4848
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:04 PM: Your problem has 2533 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Finished problem compilation (took 1.452e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2533
  constraints   = 5033
  nnz(P)        = 0
  nnz(A)        = 28433
  cones (total) = 1
    : Nonnegative = 1,  numel = 5033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.28e+01  1.00e+00  1.00e+00   ------   
  1  +5.9283e-01  +5.1505e+02  5.14e+02  3.84e-01  4.40e+01  3.92e-03  5.27e-01  6.26e-01  
  2  +5.4146e-01  +6.7937e+01  6.74e+01  1.46e-01  2.11e+01  1.16e-02  2.44e-01  8.29e-01  
  3  +5.0994e-01  +1.6745e+01  1.62e+01  1.03e-01  1.45e+01  2.86e-05  2.37e-01  1.35e-01  
  4  +5.0048e-01  +1.4060e+00  9.06e-01  8.72e-03  1.26e+00  7.26e-06  1.52e-01  7.03e-01  
  5  +5.0011e-01  +7.6828e-01  2.68e-01  2.56e-03  3.73e-01  2.98e-06  7.01e-02  5.88e-01  
  6  +5.0005e-01  +6.7436e-01  1.74e-01  1.65e-03  2.41e-01  2.70e-06  3.08e-02  6.74e-01  
  7  +4.9956e-01  +6.6783e-01  1.68e-01  8.50e-04  1.25e-01  1.65e-05  3.42e-03  9.56e-01  
  8  +4.9633e-01  +6.3638e-01  1.40e-01  1.45e-04  2.14e-02  8.91e-05  4.80e-04  8.60e-01  
  9  +4.9653e-01  +6.3527e-01  1.39e-01  1.43e-04  2.11e-02  8.04e-05  4.72e-04  9.55e-02  
 10  +4.9203e-01  +5.8865e-01  9.66e-02  7.28e-05  1.07e-02  5.84e-05  2.47e-04  5.89e-01  
 11  +4.9096e-01  +5.8103e-01  9.01e-02  6.21e-05  9.15e-03  5.37e-05  2.10e-04  2.01e-01  
 12  +4.9031e-01  +5.7516e-01  8.49e-02  6.11e-05  9.01e-03  4.35e-05  2.09e-04  7.67e-02  
 13  +4.8609e-01  +5.4271e-01  5.66e-02  3.52e-05  5.19e-03  1.61e-05  1.21e-04  6.92e-01  
 14  +4.8209e-01  +5.1750e-01  3.54e-02  1.98e-05  2.92e-03  9.68e-06  6.67e-05  5.12e-01  
 15  +4.8242e-01  +5.1939e-01  3.70e-02  1.99e-05  2.92e-03  9.94e-06  6.60e-05  8.32e-02  
 16  +4.8113e-01  +5.1346e-01  3.23e-02  1.42e-05  2.09e-03  8.75e-06  4.60e-05  4.54e-01  
 17  +4.7950e-01  +5.0761e-01  2.81e-02  1.04e-05  1.54e-03  5.89e-06  3.37e-05  5.90e-01  
 18  +4.7826e-01  +5.0209e-01  2.38e-02  8.66e-06  1.28e-03  4.25e-06  2.80e-05  3.77e-01  
 19  +4.7505e-01  +4.8783e-01  1.28e-02  4.82e-06  7.09e-04  1.12e-06  1.59e-05  9.39e-01  
 20  +4.7161e-01  +4.7538e-01  3.77e-03  1.28e-06  1.89e-04  3.54e-07  4.27e-06  7.69e-01  
 21  +4.7158e-01  +4.7511e-01  3.53e-03  1.23e-06  1.81e-04  3.10e-07  4.27e-06  2.01e-02  
 22  +4.7158e-01  +4.7513e-01  3.55e-03  1.24e-06  1.82e-04  3.17e-07  4.26e-06  2.16e-02  
 23  +4.7145e-01  +4.7482e-01  3.36e-03  1.13e-06  1.66e-04  3.44e-07  3.76e-06  2.56e-01  
 24  +4.7053e-01  +4.7146e-01  9.36e-04  3.10e-07  4.56e-05  1.32e-07  1.04e-06  9.90e-01  
 25  +4.7011e-01  +4.7012e-01  1.21e-05  4.00e-09  5.88e-07  1.63e-09  1.35e-08  9.90e-01  
 26  +4.7010e-01  +4.7010e-01  1.21e-07  4.00e-11  5.88e-09  1.63e-11  1.35e-10  9.90e-01  
 27  +4.7010e-01  +4.7010e-01  1.21e-09  4.00e-13  5.88e-11  1.67e-13  1.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.1097ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:04 PM: Optimal value: 4.701e-01
(CVXPY) Sep 20 07:35:04 PM: Compilation took 1.452e-02 seconds
(CVXPY) Sep 20 07:35:04 PM: Solver (including time spent in interface) took 8.176e-02 seconds
Iteration: 3, Objective: 0.4701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:04 PM: Your problem has 2543 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Finished problem compilation (took 1.653e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2543
  constraints   = 5043
  nnz(P)        = 0
  nnz(A)        = 31681
  cones (total) = 1
    : Nonnegative = 1,  numel = 5043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.79e-01  7.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.9267e-01  +5.1524e+02  5.15e+02  3.85e-01  4.50e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4127e-01  +6.7743e+01  6.72e+01  1.46e-01  2.15e+01  1.16e-02  2.44e-01  8.31e-01  
  3  +5.0989e-01  +1.6693e+01  1.62e+01  1.03e-01  1.48e+01  2.87e-05  2.37e-01  1.37e-01  
  4  +5.0051e-01  +1.4702e+00  9.70e-01  9.35e-03  1.38e+00  7.41e-06  1.54e-01  6.76e-01  
  5  +5.0013e-01  +8.0392e-01  3.04e-01  2.90e-03  4.32e-01  3.31e-06  7.41e-02  5.72e-01  
  6  +5.0004e-01  +7.3226e-01  2.32e-01  2.18e-03  3.25e-01  4.14e-06  2.84e-02  7.89e-01  
  7  +4.9856e-01  +7.8367e-01  2.85e-01  6.64e-04  1.00e-01  4.57e-05  2.34e-03  9.90e-01  
  8  +4.9340e-01  +7.0263e-01  2.09e-01  1.69e-04  2.55e-02  1.12e-04  5.76e-04  7.59e-01  
  9  +4.9385e-01  +6.7155e-01  1.78e-01  1.40e-04  2.12e-02  4.74e-05  4.76e-04  5.24e-01  
 10  +4.9131e-01  +6.3013e-01  1.39e-01  1.04e-04  1.56e-02  2.07e-05  3.54e-04  5.64e-01  
 11  +4.9057e-01  +6.1638e-01  1.26e-01  9.24e-05  1.39e-02  1.32e-05  3.13e-04  4.24e-01  
 12  +4.8518e-01  +5.7775e-01  9.26e-02  5.54e-05  8.35e-03  1.04e-05  1.87e-04  4.73e-01  
 13  +4.8396e-01  +5.7333e-01  8.94e-02  4.57e-05  6.89e-03  1.08e-05  1.53e-04  2.73e-01  
 14  +4.8192e-01  +5.6239e-01  8.05e-02  4.01e-05  6.04e-03  8.26e-06  1.35e-04  3.83e-01  
 15  +4.7467e-01  +5.2881e-01  5.41e-02  2.43e-05  3.66e-03  4.84e-06  8.46e-05  6.00e-01  
 16  +4.6382e-01  +4.8015e-01  1.63e-02  6.45e-06  9.72e-04  1.37e-06  2.36e-05  8.08e-01  
 17  +4.6305e-01  +4.7693e-01  1.39e-02  5.56e-06  8.36e-04  1.08e-06  2.17e-05  4.42e-01  
 18  +4.6272e-01  +4.7517e-01  1.24e-02  4.97e-06  7.48e-04  1.02e-06  1.93e-05  2.32e-01  
 19  +4.6172e-01  +4.7062e-01  8.90e-03  3.54e-06  5.33e-04  7.79e-07  1.37e-05  4.15e-01  
 20  +4.6037e-01  +4.6651e-01  6.14e-03  2.30e-06  3.46e-04  6.27e-07  8.64e-06  5.65e-01  
 21  +4.5825e-01  +4.5838e-01  1.33e-04  4.96e-08  7.47e-06  1.27e-08  1.90e-07  9.79e-01  
 22  +4.5820e-01  +4.5820e-01  1.33e-06  4.97e-10  7.48e-08  1.27e-10  1.91e-09  9.90e-01  
 23  +4.5820e-01  +4.5820e-01  1.33e-08  4.97e-12  7.48e-10  1.27e-12  1.91e-11  9.90e-01  
 24  +4.5820e-01  +4.5820e-01  1.33e-10  4.97e-14  7.48e-12  1.28e-14  1.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 72.3356ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:04 PM: Optimal value: 4.582e-01
(CVXPY) Sep 20 07:35:04 PM: Compilation took 1.653e-02 seconds
(CVXPY) Sep 20 07:35:04 PM: Solver (including time spent in interface) took 7.833e-02 seconds
Iteration: 4, Objective: 0.4582
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:04 PM: Your problem has 2553 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:04 PM: Finished problem compilation (took 2.003e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2553
  constraints   = 5053
  nnz(P)        = 0
  nnz(A)        = 33074
  cones (total) = 1
    : Nonnegative = 1,  numel = 5053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.79e-01  7.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.9259e-01  +5.1541e+02  5.15e+02  3.85e-01  4.51e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4120e-01  +6.7702e+01  6.72e+01  1.46e-01  2.15e+01  1.16e-02  2.44e-01  8.32e-01  
  3  +5.0985e-01  +1.6653e+01  1.61e+01  1.03e-01  1.48e+01  2.88e-05  2.37e-01  1.39e-01  
  4  +5.0047e-01  +1.4046e+00  9.04e-01  8.74e-03  1.29e+00  7.36e-06  1.50e-01  7.13e-01  
  5  +5.0014e-01  +8.2980e-01  3.30e-01  3.16e-03  4.71e-01  3.64e-06  7.65e-02  5.33e-01  
  6  +5.0007e-01  +7.7143e-01  2.71e-01  2.57e-03  3.84e-01  4.39e-06  3.62e-02  6.61e-01  
  7  +4.9946e-01  +7.4761e-01  2.48e-01  1.22e-03  1.84e-01  2.13e-05  4.80e-03  9.32e-01  
  8  +4.9725e-01  +7.2220e-01  2.25e-01  3.56e-04  5.39e-02  7.13e-05  1.19e-03  7.62e-01  
  9  +4.9648e-01  +6.9145e-01  1.95e-01  2.34e-04  3.54e-02  5.92e-05  7.63e-04  5.92e-01  
 10  +4.9456e-01  +6.7284e-01  1.78e-01  1.62e-04  2.45e-02  6.34e-05  5.24e-04  4.03e-01  
 11  +4.9322e-01  +6.5973e-01  1.67e-01  1.31e-04  1.98e-02  5.64e-05  4.22e-04  3.36e-01  
 12  +4.9278e-01  +6.5169e-01  1.59e-01  1.26e-04  1.90e-02  3.98e-05  4.09e-04  2.59e-01  
 13  +4.8592e-01  +6.1000e-01  1.24e-01  7.17e-05  1.08e-02  3.34e-05  2.37e-04  5.53e-01  
 14  +4.8258e-01  +5.9310e-01  1.11e-01  6.03e-05  9.11e-03  2.66e-05  2.02e-04  2.51e-01  
 15  +4.7263e-01  +5.4415e-01  7.15e-02  3.45e-05  5.20e-03  1.11e-05  1.21e-04  6.21e-01  
 16  +4.6573e-01  +5.1388e-01  4.82e-02  2.14e-05  3.23e-03  6.29e-06  7.81e-05  5.30e-01  
 17  +4.5797e-01  +4.8026e-01  2.23e-02  9.15e-06  1.38e-03  2.01e-06  3.51e-05  9.90e-01  
 18  +4.5391e-01  +4.6414e-01  1.02e-02  4.12e-06  6.21e-04  9.40e-07  1.63e-05  6.38e-01  
 19  +4.5175e-01  +4.5547e-01  3.72e-03  1.48e-06  2.24e-04  3.85e-07  5.99e-06  9.90e-01  
 20  +4.5043e-01  +4.5052e-01  8.86e-05  3.54e-08  5.33e-06  8.85e-09  1.45e-07  9.86e-01  
 21  +4.5040e-01  +4.5040e-01  8.87e-07  3.54e-10  5.34e-08  8.86e-11  1.45e-09  9.90e-01  
 22  +4.5040e-01  +4.5040e-01  8.87e-09  3.54e-12  5.34e-10  8.86e-13  1.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.8508ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:05 PM: Optimal value: 4.504e-01
(CVXPY) Sep 20 07:35:05 PM: Compilation took 2.003e-02 seconds
(CVXPY) Sep 20 07:35:05 PM: Solver (including time spent in interface) took 7.475e-02 seconds
Iteration: 5, Objective: 0.4504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:05 PM: Your problem has 2563 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:05 PM: Finished problem compilation (took 2.003e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2563
  constraints   = 5063
  nnz(P)        = 0
  nnz(A)        = 34269
  cones (total) = 1
    : Nonnegative = 1,  numel = 5063

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.79e-01  7.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.9217e-01  +5.1608e+02  5.15e+02  3.86e-01  4.52e+01  3.91e-03  5.29e-01  6.25e-01  
  2  +5.4101e-01  +6.7570e+01  6.70e+01  1.47e-01  2.14e+01  1.17e-02  2.44e-01  8.34e-01  
  3  +5.0983e-01  +1.6663e+01  1.62e+01  1.03e-01  1.48e+01  2.91e-05  2.37e-01  1.41e-01  
  4  +5.0048e-01  +1.4168e+00  9.16e-01  8.87e-03  1.31e+00  7.40e-06  1.49e-01  7.12e-01  
  5  +5.0014e-01  +8.3729e-01  3.37e-01  3.23e-03  4.83e-01  3.84e-06  7.57e-02  5.52e-01  
  6  +5.0008e-01  +8.2039e-01  3.20e-01  3.03e-03  4.53e-01  5.31e-06  3.96e-02  6.01e-01  
  7  +4.9898e-01  +8.0549e-01  3.07e-01  1.04e-03  1.58e-01  3.64e-05  3.82e-03  9.78e-01  
  8  +4.9704e-01  +7.1472e-01  2.18e-01  2.98e-04  4.52e-02  6.46e-05  1.01e-03  9.20e-01  
  9  +4.9321e-01  +6.7817e-01  1.85e-01  1.55e-04  2.36e-02  7.93e-05  5.20e-04  5.83e-01  
 10  +4.9151e-01  +6.6589e-01  1.74e-01  1.32e-04  2.00e-02  7.19e-05  4.41e-04  2.45e-01  
 11  +4.9074e-01  +6.5688e-01  1.66e-01  1.27e-04  1.93e-02  5.22e-05  4.30e-04  2.16e-01  
 12  +4.8619e-01  +6.2800e-01  1.42e-01  9.31e-05  1.41e-02  4.43e-05  3.18e-04  3.33e-01  
 13  +4.8430e-01  +6.1535e-01  1.31e-01  7.93e-05  1.20e-02  2.75e-05  2.71e-04  4.63e-01  
 14  +4.8357e-01  +6.1133e-01  1.28e-01  7.72e-05  1.17e-02  2.40e-05  2.65e-04  1.30e-01  
 15  +4.7310e-01  +5.5709e-01  8.40e-02  4.25e-05  6.44e-03  1.35e-05  1.53e-04  5.46e-01  
 16  +4.6567e-01  +5.1985e-01  5.42e-02  2.58e-05  3.89e-03  7.89e-06  9.60e-05  4.34e-01  
 17  +4.6317e-01  +5.0790e-01  4.47e-02  2.01e-05  3.04e-03  6.28e-06  7.53e-05  3.39e-01  
 18  +4.6299e-01  +5.0706e-01  4.41e-02  2.00e-05  3.02e-03  6.06e-06  7.52e-05  2.46e-02  
 19  +4.5607e-01  +4.7647e-01  2.04e-02  8.70e-06  1.31e-03  1.90e-06  3.43e-05  8.65e-01  
 20  +4.5339e-01  +4.6423e-01  1.08e-02  4.57e-06  6.90e-04  1.02e-06  1.85e-05  5.87e-01  
 21  +4.5078e-01  +4.5300e-01  2.21e-03  9.24e-07  1.40e-04  2.05e-07  3.85e-06  8.19e-01  
 22  +4.5021e-01  +4.5055e-01  3.38e-04  1.41e-07  2.13e-05  3.14e-08  5.92e-07  9.31e-01  
 23  +4.5010e-01  +4.5011e-01  3.78e-06  1.58e-09  2.38e-07  3.51e-10  6.63e-09  9.89e-01  
 24  +4.5010e-01  +4.5010e-01  3.78e-08  1.58e-11  2.38e-09  3.51e-12  6.64e-11  9.90e-01  
 25  +4.5010e-01  +4.5010e-01  3.88e-10  1.62e-13  2.44e-11  3.60e-14  6.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.7331ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:05 PM: Optimal value: 4.501e-01
(CVXPY) Sep 20 07:35:05 PM: Compilation took 2.003e-02 seconds
(CVXPY) Sep 20 07:35:05 PM: Solver (including time spent in interface) took 8.626e-02 seconds
Iteration: 6, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:05 PM: Your problem has 2570 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:05 PM: Finished problem compilation (took 1.902e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2570
  constraints   = 5070
  nnz(P)        = 0
  nnz(A)        = 35003
  cones (total) = 1
    : Nonnegative = 1,  numel = 5070

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.79e-01  7.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.9212e-01  +5.1615e+02  5.16e+02  3.87e-01  4.52e+01  3.91e-03  5.29e-01  6.25e-01  
  2  +5.4096e-01  +6.7524e+01  6.70e+01  1.47e-01  2.14e+01  1.17e-02  2.44e-01  8.35e-01  
  3  +5.0983e-01  +1.6660e+01  1.62e+01  1.03e-01  1.48e+01  2.91e-05  2.37e-01  1.42e-01  
  4  +5.0049e-01  +1.4339e+00  9.33e-01  9.03e-03  1.34e+00  7.43e-06  1.50e-01  7.04e-01  
  5  +5.0017e-01  +8.8141e-01  3.81e-01  3.66e-03  5.47e-01  4.10e-06  8.30e-02  5.00e-01  
  6  +5.0009e-01  +8.3620e-01  3.36e-01  3.17e-03  4.75e-01  5.23e-06  4.02e-02  6.94e-01  
  7  +4.9969e-01  +8.1126e-01  3.12e-01  1.98e-03  2.99e-01  1.62e-05  9.00e-03  8.17e-01  
  8  +4.9723e-01  +7.7587e-01  2.79e-01  4.47e-04  6.78e-02  7.60e-05  1.53e-03  8.42e-01  
  9  +4.9648e-01  +7.0884e-01  2.12e-01  2.53e-04  3.84e-02  4.19e-05  8.43e-04  8.12e-01  
 10  +4.9269e-01  +6.7573e-01  1.83e-01  1.48e-04  2.26e-02  4.77e-05  4.97e-04  4.87e-01  
 11  +4.9288e-01  +6.7477e-01  1.82e-01  1.42e-04  2.16e-02  3.85e-05  4.71e-04  2.67e-01  
 12  +4.8653e-01  +6.1874e-01  1.32e-01  8.75e-05  1.33e-02  4.79e-06  2.98e-04  9.90e-01  
 13  +4.8430e-01  +6.0780e-01  1.24e-01  7.60e-05  1.15e-02  4.82e-06  2.60e-04  1.75e-01  
 14  +4.8290e-01  +6.0153e-01  1.19e-01  7.12e-05  1.08e-02  5.38e-06  2.45e-04  2.64e-01  
 15  +4.7536e-01  +5.6718e-01  9.18e-02  4.96e-05  7.51e-03  5.41e-06  1.79e-04  7.47e-01  
 16  +4.7068e-01  +5.4456e-01  7.39e-02  3.72e-05  5.63e-03  4.61e-06  1.36e-04  3.80e-01  
 17  +4.6842e-01  +5.3443e-01  6.60e-02  3.19e-05  4.83e-03  4.31e-06  1.18e-04  2.57e-01  
 18  +4.6221e-01  +5.0424e-01  4.20e-02  1.89e-05  2.87e-03  3.44e-06  7.28e-05  9.08e-01  
 19  +4.5412e-01  +4.6750e-01  1.34e-02  5.84e-06  8.84e-04  1.12e-06  2.40e-05  9.90e-01  
 20  +4.5069e-01  +4.5287e-01  2.19e-03  9.39e-07  1.42e-04  1.86e-07  4.03e-06  9.20e-01  
 21  +4.5003e-01  +4.5012e-01  9.04e-05  3.88e-08  5.87e-06  7.50e-09  1.69e-07  9.60e-01  
 22  +4.5000e-01  +4.5000e-01  9.11e-07  3.91e-10  5.91e-08  7.56e-11  1.70e-09  9.90e-01  
 23  +4.5000e-01  +4.5000e-01  9.14e-09  3.92e-12  5.93e-10  7.58e-13  1.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.2885ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:05 PM: Optimal value: 4.500e-01
(CVXPY) Sep 20 07:35:05 PM: Compilation took 1.902e-02 seconds
(CVXPY) Sep 20 07:35:05 PM: Solver (including time spent in interface) took 7.896e-02 seconds
Iteration: 7, Objective: 0.4500
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:05 PM: Your problem has 2573 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:05 PM: Finished problem compilation (took 1.751e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2573
  constraints   = 5073
  nnz(P)        = 0
  nnz(A)        = 35470
  cones (total) = 1
    : Nonnegative = 1,  numel = 5073

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.79e-01  7.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.9214e-01  +5.1613e+02  5.16e+02  3.87e-01  4.52e+01  3.91e-03  5.29e-01  6.25e-01  
  2  +5.4091e-01  +6.7449e+01  6.69e+01  1.46e-01  2.14e+01  1.17e-02  2.44e-01  8.35e-01  
  3  +5.0981e-01  +1.6642e+01  1.61e+01  1.03e-01  1.48e+01  2.91e-05  2.37e-01  1.42e-01  
  4  +5.0047e-01  +1.3943e+00  8.94e-01  8.66e-03  1.29e+00  7.37e-06  1.47e-01  7.25e-01  
  5  +5.0016e-01  +8.7925e-01  3.79e-01  3.64e-03  5.45e-01  4.17e-06  8.18e-02  4.92e-01  
  6  +5.0008e-01  +8.3703e-01  3.37e-01  3.15e-03  4.73e-01  5.85e-06  3.49e-02  7.75e-01  
  7  +4.9897e-01  +7.9901e-01  3.00e-01  9.86e-04  1.50e-01  3.69e-05  3.60e-03  9.41e-01  
  8  +4.9871e-01  +7.1238e-01  2.14e-01  4.25e-04  6.46e-02  2.66e-05  1.45e-03  9.90e-01  
  9  +4.9632e-01  +6.8998e-01  1.94e-01  1.99e-04  3.03e-02  4.61e-05  6.56e-04  6.02e-01  
 10  +4.9466e-01  +6.7843e-01  1.84e-01  1.52e-04  2.32e-02  4.38e-05  4.99e-04  4.13e-01  
 11  +4.9189e-01  +6.5985e-01  1.68e-01  1.21e-04  1.85e-02  3.03e-05  4.00e-04  5.01e-01  
 12  +4.8110e-01  +5.9311e-01  1.12e-01  6.15e-05  9.33e-03  1.89e-05  2.11e-04  6.27e-01  
 13  +4.7986e-01  +5.8797e-01  1.08e-01  5.96e-05  9.04e-03  1.68e-05  2.07e-04  9.52e-02  
 14  +4.7713e-01  +5.7651e-01  9.94e-02  5.20e-05  7.89e-03  1.41e-05  1.82e-04  2.55e-01  
 15  +4.7147e-01  +5.4905e-01  7.76e-02  3.85e-05  5.83e-03  1.01e-05  1.39e-04  3.28e-01  
 16  +4.6952e-01  +5.3976e-01  7.02e-02  3.40e-05  5.15e-03  8.86e-06  1.24e-04  1.80e-01  
 17  +4.6466e-01  +5.1580e-01  5.11e-02  2.34e-05  3.55e-03  4.85e-06  8.80e-05  7.69e-01  
 18  +4.6198e-01  +5.0333e-01  4.14e-02  1.88e-05  2.85e-03  3.80e-06  7.22e-05  4.09e-01  
 19  +4.5468e-01  +4.7055e-01  1.59e-02  6.96e-06  1.05e-03  1.37e-06  2.83e-05  6.96e-01  
 20  +4.5090e-01  +4.5386e-01  2.96e-03  1.28e-06  1.93e-04  2.45e-07  5.45e-06  8.33e-01  
 21  +4.5007e-01  +4.5031e-01  2.40e-04  1.03e-07  1.56e-05  1.96e-08  4.48e-07  9.27e-01  
 22  +4.5000e-01  +4.5000e-01  2.53e-06  1.09e-09  1.64e-07  2.06e-10  4.72e-09  9.90e-01  
 23  +4.5000e-01  +4.5000e-01  2.53e-08  1.09e-11  1.65e-09  2.06e-12  4.73e-11  9.90e-01  
 24  +4.5000e-01  +4.5000e-01  2.55e-10  1.09e-13  1.66e-11  2.09e-14  4.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.3492ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:05 PM: Optimal value: 4.500e-01
(CVXPY) Sep 20 07:35:05 PM: Compilation took 1.751e-02 seconds
(CVXPY) Sep 20 07:35:05 PM: Solver (including time spent in interface) took 8.057e-02 seconds
Iteration: 8, Objective: 0.4500
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:35:05 PM: Your problem has 2576 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:35:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:35:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:35:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:35:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:35:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:35:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:35:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:35:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:35:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:35:05 PM: Finished problem compilation (took 1.793e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2576
  constraints   = 5076
  nnz(P)        = 0
  nnz(A)        = 35716
  cones (total) = 1
    : Nonnegative = 1,  numel = 5076

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5014e+03  2.50e+03  9.79e-01  7.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.9217e-01  +5.1602e+02  5.15e+02  3.87e-01  4.52e+01  3.91e-03  5.29e-01  6.25e-01  
  2  +5.4090e-01  +6.7428e+01  6.69e+01  1.46e-01  2.14e+01  1.17e-02  2.44e-01  8.35e-01  
  3  +5.0981e-01  +1.6634e+01  1.61e+01  1.03e-01  1.48e+01  2.91e-05  2.37e-01  1.42e-01  
  4  +5.0044e-01  +1.3527e+00  8.52e-01  8.26e-03  1.23e+00  7.31e-06  1.44e-01  7.47e-01  
  5  +5.0016e-01  +8.6984e-01  3.70e-01  3.55e-03  5.32e-01  4.24e-06  7.94e-02  5.07e-01  
  6  +5.0005e-01  +8.2731e-01  3.27e-01  3.03e-03  4.55e-01  6.58e-06  3.04e-02  8.00e-01  
  7  +4.9811e-01  +8.0281e-01  3.05e-01  6.49e-04  9.86e-02  6.29e-05  2.27e-03  9.54e-01  
  8  +4.9758e-01  +7.1011e-01  2.13e-01  3.07e-04  4.66e-02  3.35e-05  1.03e-03  9.39e-01  
  9  +4.9563e-01  +6.9283e-01  1.97e-01  2.03e-04  3.09e-02  4.09e-05  6.74e-04  4.05e-01  
 10  +4.9418e-01  +6.8044e-01  1.86e-01  1.58e-04  2.40e-02  3.53e-05  5.18e-04  4.65e-01  
 11  +4.9334e-01  +6.7337e-01  1.80e-01  1.51e-04  2.30e-02  2.78e-05  5.02e-04  2.26e-01  
 12  +4.8607e-01  +6.2777e-01  1.42e-01  8.61e-05  1.31e-02  2.63e-05  2.91e-04  4.88e-01  
 13  +4.8319e-01  +6.1273e-01  1.30e-01  7.47e-05  1.13e-02  2.18e-05  2.56e-04  2.30e-01  
 14  +4.8089e-01  +6.0000e-01  1.19e-01  6.70e-05  1.02e-02  1.69e-05  2.33e-04  2.65e-01  
 15  +4.7532e-01  +5.6802e-01  9.27e-02  5.16e-05  7.82e-03  4.19e-06  1.87e-04  9.41e-01  
 16  +4.7000e-01  +5.4251e-01  7.25e-02  3.75e-05  5.68e-03  3.71e-06  1.39e-04  4.18e-01  
 17  +4.5787e-01  +4.8431e-01  2.64e-02  1.22e-05  1.85e-03  1.50e-06  4.82e-05  7.85e-01  
 18  +4.5794e-01  +4.8493e-01  2.70e-02  1.21e-05  1.84e-03  1.61e-06  4.78e-05  6.45e-02  
 19  +4.5787e-01  +4.8453e-01  2.67e-02  1.20e-05  1.82e-03  1.63e-06  4.75e-05  5.65e-02  
 20  +4.5428e-01  +4.6868e-01  1.44e-02  6.44e-06  9.75e-04  1.06e-06  2.65e-05  7.77e-01  
 21  +4.5122e-01  +4.5515e-01  3.93e-03  1.70e-06  2.57e-04  3.09e-07  7.21e-06  7.83e-01  
 22  +4.5023e-01  +4.5094e-01  7.10e-04  3.05e-07  4.62e-05  6.13e-08  1.32e-06  9.70e-01  
 23  +4.5002e-01  +4.5008e-01  5.82e-05  2.50e-08  3.79e-06  5.04e-09  1.09e-07  9.46e-01  
 24  +4.5000e-01  +4.5000e-01  5.85e-07  2.51e-10  3.81e-08  5.06e-11  1.09e-09  9.90e-01  
 25  +4.5000e-01  +4.5000e-01  5.87e-09  2.52e-12  3.81e-10  5.08e-13  1.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.8927ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:35:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:35:05 PM: Optimal value: 4.500e-01
(CVXPY) Sep 20 07:35:05 PM: Compilation took 1.793e-02 seconds
(CVXPY) Sep 20 07:35:05 PM: Solver (including time spent in interface) took 8.682e-02 seconds
FULL MODEL:
  Accruacy: 0.5282
  Our objective: 0.05639999999999995

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0168)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0068)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x4 = 1 AND x5 = 0)                                  <-- (term's our objective: 0.0224)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.573580741882324
Best over terms:
  Our final objective: 0.02239999999999996
    Its accruacy: 0.5112
    Its hamming distance: 7
  Shortest hamming distance: 0
    Its our objective: 0.0168
  Highest accruacy: 0.5112
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

