Command:
python test_script.py -s constant_subclass -d 9 -n 100 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 9.

Computed total variation: 0.88
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:12 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:12 PM: Finished problem compilation (took 6.529e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 619
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9761e-01  +5.1117e+01  5.06e+01  8.73e-01  1.04e+01  1.00e+00  1.04e+00   ------   
  1  +5.7561e-01  +1.1265e+01  1.07e+01  3.82e-01  6.30e+00  3.76e-03  5.95e-01  5.89e-01  
  2  +5.1323e-01  +1.7736e+00  1.26e+00  9.81e-02  2.01e+00  1.88e-02  2.52e-01  9.90e-01  
  3  +4.9180e-01  +8.9429e-01  4.02e-01  2.48e-02  5.35e-01  9.69e-03  7.73e-02  7.57e-01  
  4  +4.5912e-01  +7.0635e-01  2.47e-01  8.07e-03  1.78e-01  9.28e-03  2.75e-02  6.83e-01  
  5  +4.4426e-01  +5.8553e-01  1.41e-01  4.21e-03  9.17e-02  4.94e-03  1.53e-02  5.02e-01  
  6  +4.2460e-01  +4.7585e-01  5.13e-02  1.24e-03  2.68e-02  1.26e-03  5.22e-03  7.79e-01  
  7  +4.1162e-01  +4.1632e-01  4.70e-03  1.00e-04  2.18e-03  3.01e-05  4.92e-04  9.78e-01  
  8  +4.1012e-01  +4.1017e-01  5.40e-05  1.14e-06  2.48e-05  3.35e-07  5.67e-06  9.89e-01  
  9  +4.1010e-01  +4.1010e-01  5.40e-07  1.14e-08  2.48e-07  3.35e-09  5.67e-08  9.90e-01  
 10  +4.1010e-01  +4.1010e-01  5.40e-09  1.14e-10  2.48e-09  3.35e-11  5.67e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 683.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:12 PM: Optimal value: 4.101e-01
(CVXPY) Sep 20 07:56:12 PM: Compilation took 6.529e-03 seconds
(CVXPY) Sep 20 07:56:12 PM: Solver (including time spent in interface) took 9.906e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:12 PM: Your problem has 79 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:12 PM: Finished problem compilation (took 3.512e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 733
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9569e-01  +5.1372e+01  5.09e+01  8.78e-01  1.05e+01  1.00e+00  1.05e+00   ------   
  1  +5.6256e-01  +1.1313e+01  1.08e+01  3.91e-01  6.22e+00  3.77e-03  5.98e-01  5.89e-01  
  2  +4.9981e-01  +1.8587e+00  1.36e+00  9.81e-02  2.04e+00  2.02e-02  2.48e-01  9.90e-01  
  3  +4.6125e-01  +8.8479e-01  4.24e-01  1.94e-02  4.36e-01  1.21e-02  5.77e-02  8.39e-01  
  4  +4.3051e-01  +7.4513e-01  3.15e-01  1.02e-02  2.32e-01  8.37e-03  3.18e-02  6.14e-01  
  5  +3.9425e-01  +5.1444e-01  1.20e-01  3.00e-03  6.99e-02  3.54e-03  1.00e-02  7.08e-01  
  6  +3.8233e-01  +4.7691e-01  9.46e-02  2.05e-03  5.50e-02  2.60e-03  6.75e-03  4.49e-01  
  7  +3.6037e-01  +3.8850e-01  2.81e-02  5.75e-04  1.54e-02  2.73e-05  1.96e-03  9.74e-01  
  8  +3.5073e-01  +3.5184e-01  1.11e-03  2.17e-05  5.92e-04  1.46e-06  7.54e-05  9.65e-01  
  9  +3.5040e-01  +3.5055e-01  1.45e-04  2.90e-06  7.70e-05  2.04e-07  1.02e-05  8.70e-01  
 10  +3.5035e-01  +3.5036e-01  9.10e-06  1.84e-07  4.81e-06  2.15e-08  6.47e-07  9.50e-01  
 11  +3.5035e-01  +3.5035e-01  9.32e-08  1.89e-09  4.93e-08  2.21e-10  6.65e-09  9.90e-01  
 12  +3.5035e-01  +3.5035e-01  9.38e-10  1.90e-11  4.97e-10  2.21e-12  6.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 866.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:12 PM: Optimal value: 3.504e-01
(CVXPY) Sep 20 07:56:12 PM: Compilation took 3.512e-03 seconds
(CVXPY) Sep 20 07:56:12 PM: Solver (including time spent in interface) took 2.018e-03 seconds
Iteration: 2, Objective: 0.3504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:12 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:12 PM: Finished problem compilation (took 6.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 814
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9093e-01  +5.1931e+01  5.14e+01  8.83e-01  1.04e+01  1.00e+00  1.06e+00   ------   
  1  +5.3089e-01  +1.1473e+01  1.09e+01  3.97e-01  6.08e+00  3.81e-03  6.04e-01  5.86e-01  
  2  +4.6331e-01  +2.0851e+00  1.62e+00  9.78e-02  2.01e+00  2.33e-02  2.41e-01  9.80e-01  
  3  +3.9505e-01  +1.0189e+00  6.24e-01  2.55e-02  5.46e-01  1.19e-02  7.25e-02  7.78e-01  
  4  +3.6032e-01  +7.1311e-01  3.53e-01  1.10e-02  2.40e-01  6.43e-03  3.29e-02  7.10e-01  
  5  +3.2923e-01  +5.9071e-01  2.61e-01  5.75e-03  1.31e-01  5.47e-03  1.79e-02  5.40e-01  
  6  +2.8837e-01  +3.8623e-01  9.79e-02  2.02e-03  4.75e-02  1.04e-03  6.70e-03  8.19e-01  
  7  +2.6487e-01  +3.0145e-01  3.66e-02  6.93e-04  1.66e-02  3.34e-04  2.41e-03  7.29e-01  
  8  +2.5171e-01  +2.5436e-01  2.65e-03  4.90e-05  1.17e-03  2.06e-05  1.78e-04  9.32e-01  
  9  +2.5067e-01  +2.5082e-01  1.52e-04  2.86e-06  6.71e-05  7.99e-07  1.07e-05  9.40e-01  
 10  +2.5060e-01  +2.5061e-01  3.55e-06  6.81e-08  1.57e-06  1.73e-08  2.66e-07  9.78e-01  
 11  +2.5060e-01  +2.5060e-01  3.55e-08  6.82e-10  1.57e-08  1.73e-10  2.66e-09  9.90e-01  
 12  +2.5060e-01  +2.5060e-01  3.55e-10  6.82e-12  1.57e-10  1.74e-12  2.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0331ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:12 PM: Optimal value: 2.506e-01
(CVXPY) Sep 20 07:56:12 PM: Compilation took 6.001e-03 seconds
(CVXPY) Sep 20 07:56:12 PM: Solver (including time spent in interface) took 1.009e-03 seconds
Iteration: 3, Objective: 0.2506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:12 PM: Your problem has 99 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:12 PM: Finished problem compilation (took 5.517e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 149
  nnz(P)        = 0
  nnz(A)        = 875
  cones (total) = 1
    : Nonnegative = 1,  numel = 149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8782e-01  +5.1989e+01  5.15e+01  8.87e-01  1.02e+01  1.00e+00  1.06e+00   ------   
  1  +5.0270e-01  +1.1485e+01  1.10e+01  3.97e-01  5.84e+00  3.86e-03  6.00e-01  5.88e-01  
  2  +4.2328e-01  +2.2148e+00  1.79e+00  8.95e-02  1.80e+00  2.60e-02  2.18e-01  9.90e-01  
  3  +3.0044e-01  +1.0284e+00  7.28e-01  2.14e-02  4.45e-01  1.71e-02  5.95e-02  7.77e-01  
  4  +2.4984e-01  +5.7173e-01  3.22e-01  9.08e-03  1.88e-01  6.40e-03  2.71e-02  5.92e-01  
  5  +2.1382e-01  +3.5329e-01  1.39e-01  3.66e-03  7.85e-02  2.55e-03  1.16e-02  6.44e-01  
  6  +1.9267e-01  +2.6477e-01  7.21e-02  1.74e-03  3.92e-02  1.01e-03  5.81e-03  6.47e-01  
  7  +1.7414e-01  +1.8459e-01  1.05e-02  2.41e-04  5.51e-03  1.23e-04  8.55e-04  8.69e-01  
  8  +1.7106e-01  +1.7153e-01  4.66e-04  1.09e-05  2.46e-04  4.18e-06  3.94e-05  9.55e-01  
  9  +1.7091e-01  +1.7095e-01  3.82e-05  9.06e-07  2.01e-05  2.52e-07  3.51e-06  9.40e-01  
 10  +1.7090e-01  +1.7090e-01  4.26e-07  1.01e-08  2.24e-07  2.80e-09  3.94e-08  9.89e-01  
 11  +1.7090e-01  +1.7090e-01  4.27e-09  1.01e-10  2.24e-09  2.81e-11  3.95e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0436ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:12 PM: Optimal value: 1.709e-01
(CVXPY) Sep 20 07:56:12 PM: Compilation took 5.517e-03 seconds
(CVXPY) Sep 20 07:56:12 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 4, Objective: 0.1709
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:13 PM: Your problem has 109 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 109
  constraints   = 159
  nnz(P)        = 0
  nnz(A)        = 920
  cones (total) = 1
    : Nonnegative = 1,  numel = 159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8634e-01  +5.2389e+01  5.19e+01  8.91e-01  9.94e+00  1.00e+00  1.07e+00   ------   
  1  +4.7887e-01  +1.1684e+01  1.12e+01  4.00e-01  5.65e+00  3.92e-03  6.01e-01  5.84e-01  
  2  +3.8188e-01  +2.2747e+00  1.89e+00  8.63e-02  1.68e+00  2.75e-02  2.13e-01  9.90e-01  
  3  +2.7178e-01  +8.9845e-01  6.27e-01  1.89e-02  3.79e-01  1.34e-02  5.42e-02  8.16e-01  
  4  +2.3480e-01  +5.9535e-01  3.61e-01  1.06e-02  2.13e-01  6.78e-03  3.17e-02  4.88e-01  
  5  +1.9576e-01  +3.3314e-01  1.37e-01  3.80e-03  7.83e-02  2.47e-03  1.20e-02  6.62e-01  
  6  +1.7258e-01  +2.4158e-01  6.90e-02  1.70e-03  3.77e-02  1.11e-03  5.57e-03  6.14e-01  
  7  +1.5447e-01  +1.6369e-01  9.22e-03  2.19e-04  4.92e-03  4.58e-05  7.61e-04  9.85e-01  
  8  +1.5114e-01  +1.5148e-01  3.41e-04  8.19e-06  1.82e-04  1.05e-06  2.93e-05  9.72e-01  
  9  +1.5101e-01  +1.5104e-01  3.11e-05  7.66e-07  1.67e-05  9.96e-08  2.93e-06  9.10e-01  
 10  +1.5100e-01  +1.5100e-01  3.33e-07  8.21e-09  1.78e-07  1.08e-09  3.15e-08  9.90e-01  
 11  +1.5100e-01  +1.5100e-01  3.33e-09  8.22e-11  1.78e-09  1.08e-11  3.15e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0642ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:13 PM: Optimal value: 1.510e-01
(CVXPY) Sep 20 07:56:13 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:56:13 PM: Solver (including time spent in interface) took 9.992e-04 seconds
Iteration: 5, Objective: 0.1510
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:13 PM: Your problem has 119 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Finished problem compilation (took 5.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 119
  constraints   = 169
  nnz(P)        = 0
  nnz(A)        = 965
  cones (total) = 1
    : Nonnegative = 1,  numel = 169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8575e-01  +5.2339e+01  5.19e+01  8.94e-01  9.72e+00  1.00e+00  1.07e+00   ------   
  1  +4.6876e-01  +1.1735e+01  1.13e+01  4.06e-01  5.46e+00  3.96e-03  5.99e-01  5.82e-01  
  2  +3.6844e-01  +2.4032e+00  2.03e+00  9.11e-02  1.70e+00  2.76e-02  2.20e-01  9.65e-01  
  3  +2.5807e-01  +1.0015e+00  7.43e-01  2.25e-02  4.38e-01  1.42e-02  6.38e-02  7.79e-01  
  4  +2.1332e-01  +5.7730e-01  3.64e-01  1.08e-02  2.09e-01  5.89e-03  3.26e-02  5.67e-01  
  5  +1.7019e-01  +2.9831e-01  1.28e-01  3.56e-03  6.99e-02  1.74e-03  1.16e-02  7.37e-01  
  6  +1.4916e-01  +2.1066e-01  6.15e-02  1.55e-03  3.21e-02  8.11e-04  5.24e-03  5.96e-01  
  7  +1.3342e-01  +1.3991e-01  6.49e-03  1.61e-04  3.33e-03  3.13e-05  5.74e-04  9.79e-01  
  8  +1.3145e-01  +1.3255e-01  1.09e-03  2.77e-05  5.64e-04  4.51e-06  1.03e-04  8.29e-01  
  9  +1.3108e-01  +1.3126e-01  1.80e-04  4.61e-06  9.22e-05  7.05e-07  1.92e-05  9.59e-01  
 10  +1.3100e-01  +1.3101e-01  5.02e-06  1.30e-07  2.58e-06  1.74e-08  5.57e-07  9.72e-01  
 11  +1.3100e-01  +1.3100e-01  5.01e-08  1.29e-09  2.57e-08  1.74e-10  5.58e-09  9.90e-01  
 12  +1.3100e-01  +1.3100e-01  5.02e-10  1.30e-11  2.58e-10  1.74e-12  5.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1861ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:13 PM: Optimal value: 1.310e-01
(CVXPY) Sep 20 07:56:13 PM: Compilation took 5.007e-03 seconds
(CVXPY) Sep 20 07:56:13 PM: Solver (including time spent in interface) took 1.993e-03 seconds
Iteration: 6, Objective: 0.1310
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:13 PM: Your problem has 129 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Finished problem compilation (took 7.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 129
  constraints   = 179
  nnz(P)        = 0
  nnz(A)        = 996
  cones (total) = 1
    : Nonnegative = 1,  numel = 179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8289e-01  +5.2779e+01  5.23e+01  8.97e-01  9.50e+00  1.00e+00  1.08e+00   ------   
  1  +4.2876e-01  +1.1817e+01  1.14e+01  4.00e-01  5.21e+00  4.04e-03  5.92e-01  5.85e-01  
  2  +2.8307e-01  +2.4677e+00  2.18e+00  8.09e-02  1.46e+00  2.87e-02  1.97e-01  9.62e-01  
  3  +2.1802e-01  +1.0177e+00  8.00e-01  2.71e-02  5.07e-01  1.15e-02  7.40e-02  6.51e-01  
  4  +1.6480e-01  +4.1556e-01  2.51e-01  7.93e-03  1.49e-01  3.24e-03  2.45e-02  7.61e-01  
  5  +1.4158e-01  +2.9366e-01  1.52e-01  4.48e-03  8.72e-02  1.85e-03  1.42e-02  5.26e-01  
  6  +1.1594e-01  +1.6932e-01  5.34e-02  1.42e-03  2.88e-02  6.42e-04  4.80e-03  6.89e-01  
  7  +1.0309e-01  +1.0820e-01  5.11e-03  1.34e-04  2.72e-03  1.86e-05  4.77e-04  9.72e-01  
  8  +1.0160e-01  +1.0258e-01  9.82e-04  2.63e-05  5.26e-04  3.14e-06  9.86e-05  8.13e-01  
  9  +1.0125e-01  +1.0138e-01  1.26e-04  3.42e-06  6.69e-05  4.15e-07  1.42e-05  9.37e-01  
 10  +1.0120e-01  +1.0120e-01  2.38e-06  6.50e-08  1.27e-06  7.30e-09  2.78e-07  9.82e-01  
 11  +1.0120e-01  +1.0120e-01  2.38e-08  6.50e-10  1.27e-08  7.29e-11  2.78e-09  9.90e-01  
 12  +1.0120e-01  +1.0120e-01  2.38e-10  6.50e-12  1.27e-10  7.30e-13  2.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.229ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:13 PM: Optimal value: 1.012e-01
(CVXPY) Sep 20 07:56:13 PM: Compilation took 7.010e-03 seconds
(CVXPY) Sep 20 07:56:13 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 7, Objective: 0.1012
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:13 PM: Your problem has 139 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Finished problem compilation (took 3.505e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 139
  constraints   = 189
  nnz(P)        = 0
  nnz(A)        = 1021
  cones (total) = 1
    : Nonnegative = 1,  numel = 189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8082e-01  +5.3020e+01  5.25e+01  8.99e-01  9.29e+00  1.00e+00  1.08e+00   ------   
  1  +3.9922e-01  +1.2014e+01  1.16e+01  4.01e-01  5.07e+00  4.11e-03  5.93e-01  5.80e-01  
  2  +2.4665e-01  +2.7969e+00  2.55e+00  9.25e-02  1.60e+00  2.80e-02  2.21e-01  9.01e-01  
  3  +2.0323e-01  +1.2511e+00  1.05e+00  3.78e-02  6.77e-01  1.32e-02  1.00e-01  5.87e-01  
  4  +1.6325e-01  +4.4471e-01  2.81e-01  1.00e-02  1.80e-01  2.79e-03  2.98e-02  8.53e-01  
  5  +1.2413e-01  +2.3955e-01  1.15e-01  3.63e-03  6.78e-02  1.09e-03  1.17e-02  6.73e-01  
  6  +1.1242e-01  +1.8927e-01  7.68e-02  2.21e-03  4.35e-02  7.10e-04  7.25e-03  4.76e-01  
  7  +9.5726e-02  +1.1070e-01  1.50e-02  4.13e-04  8.20e-03  9.47e-05  1.44e-03  8.99e-01  
  8  +9.1754e-02  +9.3166e-02  1.41e-03  3.95e-05  7.76e-04  6.89e-06  1.43e-04  9.02e-01  
  9  +9.1416e-02  +9.1774e-02  3.59e-04  1.03e-05  1.98e-04  1.54e-06  4.10e-05  8.45e-01  
 10  +9.1304e-02  +9.1315e-02  1.13e-05  3.26e-07  6.25e-06  4.13e-08  1.34e-06  9.70e-01  
 11  +9.1300e-02  +9.1300e-02  1.13e-07  3.27e-09  6.27e-08  4.13e-10  1.35e-08  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  1.13e-09  3.27e-11  6.27e-10  4.14e-12  1.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3051ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:13 PM: Optimal value: 9.130e-02
(CVXPY) Sep 20 07:56:13 PM: Compilation took 3.505e-03 seconds
(CVXPY) Sep 20 07:56:13 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Iteration: 8, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:13 PM: Your problem has 149 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 149
  constraints   = 199
  nnz(P)        = 0
  nnz(A)        = 1057
  cones (total) = 1
    : Nonnegative = 1,  numel = 199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8021e-01  +5.3050e+01  5.26e+01  9.02e-01  9.10e+00  1.00e+00  1.08e+00   ------   
  1  +3.9167e-01  +1.2048e+01  1.17e+01  4.05e-01  4.92e+00  4.13e-03  5.92e-01  5.79e-01  
  2  +2.3344e-01  +2.8176e+00  2.58e+00  9.14e-02  1.55e+00  2.80e-02  2.19e-01  8.98e-01  
  3  +1.9961e-01  +1.3571e+00  1.16e+00  4.25e-02  7.44e-01  1.34e-02  1.11e-01  5.23e-01  
  4  +1.6662e-01  +4.9521e-01  3.29e-01  1.20e-02  2.12e-01  2.94e-03  3.50e-02  8.95e-01  
  5  +1.2399e-01  +2.4554e-01  1.22e-01  3.94e-03  7.20e-02  1.04e-03  1.25e-02  7.10e-01  
  6  +1.1425e-01  +2.0190e-01  8.76e-02  2.61e-03  5.04e-02  7.31e-04  8.32e-03  4.70e-01  
  7  +9.7599e-02  +1.1987e-01  2.23e-02  6.26e-04  1.23e-02  1.48e-04  2.11e-03  8.58e-01  
  8  +9.1842e-02  +9.3389e-02  1.55e-03  4.43e-05  8.60e-04  6.01e-06  1.56e-04  9.51e-01  
  9  +9.1453e-02  +9.1908e-02  4.56e-04  1.34e-05  2.54e-04  1.70e-06  5.35e-05  7.76e-01  
 10  +9.1306e-02  +9.1322e-02  1.58e-05  4.69e-07  8.80e-06  4.73e-08  1.97e-06  9.68e-01  
 11  +9.1300e-02  +9.1300e-02  1.59e-07  4.72e-09  8.85e-08  4.74e-10  1.99e-08  9.90e-01  
 12  +9.1300e-02  +9.1300e-02  1.59e-09  4.72e-11  8.85e-10  4.75e-12  1.99e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2667ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:13 PM: Optimal value: 9.130e-02
(CVXPY) Sep 20 07:56:13 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:56:13 PM: Solver (including time spent in interface) took 2.009e-03 seconds
Iteration: 9, Objective: 0.0913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:13 PM: Your problem has 157 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:13 PM: Finished problem compilation (took 5.058e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 157
  constraints   = 207
  nnz(P)        = 0
  nnz(A)        = 1103
  cones (total) = 1
    : Nonnegative = 1,  numel = 207

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7917e-01  +5.3086e+01  5.26e+01  9.04e-01  9.01e+00  1.00e+00  1.08e+00   ------   
  1  +3.7989e-01  +1.2194e+01  1.18e+01  4.11e-01  4.89e+00  4.16e-03  5.97e-01  5.72e-01  
  2  +2.2282e-01  +2.8769e+00  2.65e+00  9.56e-02  1.58e+00  2.89e-02  2.30e-01  8.92e-01  
  3  +1.9412e-01  +1.4113e+00  1.22e+00  4.58e-02  7.87e-01  1.42e-02  1.20e-01  5.19e-01  
  4  +1.6275e-01  +4.6054e-01  2.98e-01  1.12e-02  1.95e-01  2.76e-03  3.31e-02  9.01e-01  
  5  +1.2549e-01  +2.6040e-01  1.35e-01  4.58e-03  8.19e-02  1.14e-03  1.46e-02  6.43e-01  
  6  +1.1372e-01  +2.0787e-01  9.41e-02  2.91e-03  5.42e-02  7.13e-04  9.40e-03  5.59e-01  
  7  +9.5172e-02  +1.0982e-01  1.47e-02  4.37e-04  8.14e-03  7.10e-05  1.50e-03  9.34e-01  
  8  +9.1830e-02  +9.3576e-02  1.75e-03  5.32e-05  9.75e-04  6.50e-06  1.92e-04  8.75e-01  
  9  +9.1462e-02  +9.2027e-02  5.64e-04  1.79e-05  3.21e-04  2.01e-06  7.11e-05  7.54e-01  
 10  +9.1321e-02  +9.1396e-02  7.44e-05  2.35e-06  4.20e-05  2.62e-07  9.82e-06  9.02e-01  
 11  +9.1300e-02  +9.1301e-02  1.07e-06  3.38e-08  6.03e-07  3.72e-09  1.42e-07  9.86e-01  
 12  +9.1300e-02  +9.1300e-02  1.07e-08  3.38e-10  6.03e-09  3.72e-11  1.42e-09  9.90e-01  
 13  +9.1300e-02  +9.1300e-02  1.07e-10  3.38e-12  6.03e-11  3.72e-13  1.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7281ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:13 PM: Optimal value: 9.130e-02
(CVXPY) Sep 20 07:56:13 PM: Compilation took 5.058e-03 seconds
(CVXPY) Sep 20 07:56:13 PM: Solver (including time spent in interface) took 1.021e-03 seconds
FULL MODEL:
  Accruacy: 0.91
  Our objective: 0.82

IF 
    (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.14)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x8 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x3 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x3 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.08)
 OR (x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x8 = 0)                       <-- (term's our objective: 0.04)
 OR (x3 = 1 AND x4 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.12)
 OR (x3 = 1 AND x6 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.519700288772583
Best over terms:
  Our final objective: 0.14
    Its accruacy: 0.57
    Its hamming distance: 7
  Shortest hamming distance: 6
    Its our objective: 0.040000000000000036
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

