Command:
python test_script.py -s constant_subclass -d 6 -n 50 --seed 34 -m brcg -k 6 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.018750000000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.08
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 6.

Computed total variation: 0.6799999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:35 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:35 PM: Finished problem compilation (took 6.314e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 238
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9351e-01  +2.5937e+01  2.54e+01  8.25e-01  6.12e+00  1.00e+00  1.07e+00   ------   
  1  +5.8321e-01  +5.5590e+00  4.98e+00  3.26e-01  3.38e+00  3.87e-03  5.64e-01  6.29e-01  
  2  +5.0936e-01  +1.0502e+00  5.41e-01  6.35e-02  7.88e-01  1.45e-02  1.81e-01  9.90e-01  
  3  +4.7828e-01  +8.1700e-01  3.39e-01  2.33e-02  3.02e-01  1.30e-02  7.78e-02  6.69e-01  
  4  +4.3425e-01  +5.8046e-01  1.46e-01  6.72e-03  8.79e-02  5.83e-03  2.82e-02  6.85e-01  
  5  +4.0626e-01  +4.2941e-01  2.31e-02  1.03e-03  1.33e-02  5.11e-04  5.24e-03  8.53e-01  
  6  +4.0019e-01  +4.0048e-01  2.94e-04  1.31e-05  1.69e-04  4.87e-06  7.02e-05  9.89e-01  
  7  +4.0010e-01  +4.0010e-01  2.94e-06  1.31e-07  1.69e-06  4.87e-08  7.02e-07  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  2.94e-08  1.31e-09  1.69e-08  4.87e-10  7.02e-09  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  2.94e-10  1.31e-11  1.69e-10  4.87e-12  7.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 399.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:35 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:35 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 07:33:35 PM: Compilation took 6.314e-03 seconds
(CVXPY) Sep 20 07:33:35 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:36 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Finished problem compilation (took 4.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8419e-01  +2.6329e+01  2.58e+01  8.37e-01  6.24e+00  1.00e+00  1.09e+00   ------   
  1  +5.3533e-01  +5.6670e+00  5.13e+00  3.41e-01  3.36e+00  3.92e-03  5.74e-01  6.23e-01  
  2  +4.5891e-01  +1.3232e+00  8.64e-01  8.50e-02  1.07e+00  1.64e-02  2.23e-01  8.70e-01  
  3  +4.0918e-01  +8.9231e-01  4.83e-01  3.67e-02  4.78e-01  1.06e-02  1.08e-01  5.65e-01  
  4  +3.6495e-01  +5.0174e-01  1.37e-01  8.88e-03  1.17e-01  3.00e-03  3.01e-02  7.47e-01  
  5  +3.4720e-01  +4.1380e-01  6.66e-02  3.10e-03  4.12e-02  1.68e-03  1.07e-02  8.05e-01  
  6  +3.3645e-01  +3.8022e-01  4.38e-02  1.61e-03  2.17e-02  1.24e-03  5.73e-03  4.95e-01  
  7  +3.2309e-01  +3.2911e-01  6.01e-03  2.24e-04  3.00e-03  6.94e-05  8.12e-04  9.90e-01  
  8  +3.2039e-01  +3.2072e-01  3.30e-04  1.22e-05  1.63e-04  3.06e-06  4.53e-05  9.45e-01  
  9  +3.2022e-01  +3.2024e-01  2.69e-05  9.90e-07  1.30e-05  2.22e-07  4.09e-06  9.34e-01  
 10  +3.2020e-01  +3.2020e-01  3.04e-07  1.12e-08  1.46e-07  2.39e-09  4.72e-08  9.88e-01  
 11  +3.2020e-01  +3.2020e-01  3.03e-09  1.12e-10  1.46e-09  2.39e-11  4.72e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 355.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:36 PM: Optimal value: 3.202e-01
(CVXPY) Sep 20 07:33:36 PM: Compilation took 4.509e-03 seconds
(CVXPY) Sep 20 07:33:36 PM: Solver (including time spent in interface) took 1.005e-03 seconds
Iteration: 2, Objective: 0.3202
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:36 PM: Your problem has 58 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Finished problem compilation (took 3.998e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 58
  constraints   = 83
  nnz(P)        = 0
  nnz(A)        = 354
  cones (total) = 1
    : Nonnegative = 1,  numel = 83

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7387e-01  +2.6542e+01  2.61e+01  8.47e-01  6.10e+00  1.00e+00  1.10e+00   ------   
  1  +4.8043e-01  +5.7242e+00  5.24e+00  3.51e-01  3.25e+00  3.97e-03  5.77e-01  6.18e-01  
  2  +3.8359e-01  +1.2683e+00  8.85e-01  7.13e-02  8.79e-01  1.86e-02  1.85e-01  9.18e-01  
  3  +2.9035e-01  +6.8219e-01  3.92e-01  2.28e-02  2.83e-01  9.33e-03  6.90e-02  7.13e-01  
  4  +2.3632e-01  +3.7661e-01  1.40e-01  7.18e-03  8.93e-02  2.82e-03  2.49e-02  7.61e-01  
  5  +2.0940e-01  +2.4324e-01  3.38e-02  1.68e-03  2.08e-02  6.23e-04  6.36e-03  7.62e-01  
  6  +2.0081e-01  +2.0161e-01  8.06e-04  4.04e-05  4.97e-04  8.46e-06  1.59e-04  9.84e-01  
  7  +2.0053e-01  +2.0061e-01  7.69e-05  3.81e-06  4.58e-05  4.86e-07  1.75e-05  9.10e-01  
  8  +2.0050e-01  +2.0050e-01  1.61e-06  7.96e-08  9.52e-07  1.07e-08  3.85e-07  9.85e-01  
  9  +2.0050e-01  +2.0050e-01  1.61e-08  7.95e-10  9.52e-09  1.07e-10  3.86e-09  9.90e-01  
 10  +2.0050e-01  +2.0050e-01  1.61e-10  7.95e-12  9.52e-11  1.07e-12  3.86e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 485.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:36 PM: Optimal value: 2.005e-01
(CVXPY) Sep 20 07:33:36 PM: Compilation took 3.998e-03 seconds
(CVXPY) Sep 20 07:33:36 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 3, Objective: 0.2005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:36 PM: Your problem has 68 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Finished problem compilation (took 4.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 68
  constraints   = 93
  nnz(P)        = 0
  nnz(A)        = 381
  cones (total) = 1
    : Nonnegative = 1,  numel = 93

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6921e-01  +2.6531e+01  2.61e+01  8.54e-01  5.87e+00  1.00e+00  1.09e+00   ------   
  1  +4.4514e-01  +5.9103e+00  5.47e+00  3.65e-01  3.15e+00  4.06e-03  5.87e-01  5.97e-01  
  2  +3.3748e-01  +1.5056e+00  1.17e+00  8.97e-02  1.01e+00  2.04e-02  2.25e-01  8.45e-01  
  3  +2.4875e-01  +6.2822e-01  3.79e-01  2.36e-02  2.74e-01  7.95e-03  7.05e-02  7.72e-01  
  4  +2.1125e-01  +3.8305e-01  1.72e-01  9.95e-03  1.16e-01  3.13e-03  3.30e-02  7.00e-01  
  5  +1.8357e-01  +1.9650e-01  1.29e-02  7.51e-04  8.68e-03  1.70e-04  2.73e-03  9.22e-01  
  6  +1.8084e-01  +1.8161e-01  7.63e-04  4.49e-05  5.15e-04  7.90e-06  1.68e-04  9.39e-01  
  7  +1.8066e-01  +1.8082e-01  1.66e-04  9.46e-06  1.06e-04  1.25e-06  4.30e-05  9.10e-01  
  8  +1.8060e-01  +1.8061e-01  9.30e-06  5.22e-07  5.86e-06  5.94e-08  2.55e-06  9.48e-01  
  9  +1.8060e-01  +1.8060e-01  9.62e-08  5.39e-09  6.05e-08  6.13e-10  2.65e-08  9.90e-01  
 10  +1.8060e-01  +1.8060e-01  9.64e-10  5.40e-11  6.06e-10  6.14e-12  2.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 466.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:36 PM: Optimal value: 1.806e-01
(CVXPY) Sep 20 07:33:36 PM: Compilation took 4.004e-03 seconds
(CVXPY) Sep 20 07:33:36 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 4, Objective: 0.1806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:36 PM: Your problem has 75 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Finished problem compilation (took 4.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 100
  nnz(P)        = 0
  nnz(A)        = 401
  cones (total) = 1
    : Nonnegative = 1,  numel = 100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6443e-01  +2.6522e+01  2.61e+01  8.59e-01  5.73e+00  1.00e+00  1.09e+00   ------   
  1  +4.1653e-01  +6.0717e+00  5.66e+00  3.79e-01  3.15e+00  4.10e-03  6.03e-01  5.78e-01  
  2  +3.1144e-01  +1.5505e+00  1.24e+00  9.55e-02  1.02e+00  2.25e-02  2.35e-01  8.50e-01  
  3  +2.4036e-01  +6.3151e-01  3.91e-01  2.66e-02  2.96e-01  8.64e-03  7.60e-02  7.37e-01  
  4  +2.0383e-01  +3.5154e-01  1.48e-01  9.71e-03  1.10e-01  2.31e-03  3.04e-02  8.20e-01  
  5  +1.8213e-01  +1.8943e-01  7.30e-03  4.79e-04  5.34e-03  8.30e-05  1.60e-03  9.49e-01  
  6  +1.8091e-01  +1.8185e-01  9.35e-04  6.25e-05  6.89e-04  8.72e-06  2.18e-04  8.66e-01  
  7  +1.8072e-01  +1.8111e-01  3.90e-04  2.40e-05  2.62e-04  3.20e-06  1.04e-04  6.97e-01  
  8  +1.8061e-01  +1.8064e-01  3.25e-05  1.91e-06  2.08e-05  2.09e-07  9.47e-06  9.18e-01  
  9  +1.8060e-01  +1.8060e-01  5.05e-07  2.95e-08  3.21e-07  3.18e-09  1.50e-07  9.90e-01  
 10  +1.8060e-01  +1.8060e-01  5.05e-09  2.94e-10  3.21e-09  3.18e-11  1.50e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 477µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:36 PM: Optimal value: 1.806e-01
(CVXPY) Sep 20 07:33:36 PM: Compilation took 4.002e-03 seconds
(CVXPY) Sep 20 07:33:36 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 5, Objective: 0.1806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:33:36 PM: Your problem has 77 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:33:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:33:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:33:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:33:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:33:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:33:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:33:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:33:36 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 102
  nnz(P)        = 0
  nnz(A)        = 408
  cones (total) = 1
    : Nonnegative = 1,  numel = 102

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6213e-01  +2.6615e+01  2.62e+01  8.60e-01  5.71e+00  1.00e+00  1.10e+00   ------   
  1  +3.9481e-01  +6.1263e+00  5.73e+00  3.78e-01  3.13e+00  4.14e-03  6.05e-01  5.74e-01  
  2  +2.5883e-01  +1.3579e+00  1.10e+00  7.87e-02  8.37e-01  2.42e-02  1.99e-01  9.18e-01  
  3  +2.0131e-01  +5.5470e-01  3.53e-01  2.52e-02  2.68e-01  8.16e-03  7.28e-02  6.93e-01  
  4  +1.6663e-01  +2.0567e-01  3.90e-02  2.80e-03  2.92e-02  7.42e-04  9.17e-03  9.05e-01  
  5  +1.6105e-01  +1.6246e-01  1.41e-03  1.03e-04  1.06e-03  2.16e-05  3.47e-04  9.64e-01  
  6  +1.6082e-01  +1.6124e-01  4.21e-04  2.91e-05  2.99e-04  3.77e-06  1.23e-04  8.26e-01  
  7  +1.6071e-01  +1.6074e-01  3.34e-05  2.18e-06  2.25e-05  2.10e-07  1.07e-05  9.38e-01  
  8  +1.6070e-01  +1.6070e-01  6.92e-07  4.48e-08  4.65e-07  4.15e-09  2.27e-07  9.89e-01  
  9  +1.6070e-01  +1.6070e-01  6.92e-09  4.49e-10  4.65e-09  4.16e-11  2.27e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 484.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:33:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:33:36 PM: Optimal value: 1.607e-01
(CVXPY) Sep 20 07:33:36 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:33:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.68

IF 
    (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.28)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1)                       <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 1 AND x5 = 1)                                  <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0)                       <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.0132625102996826
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

