Command:
python test_script.py -s constant_subclass -d 4 -n 50000 --seed 73 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.07796
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.07796
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:03 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:03 PM: Finished problem compilation (took 9.441e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  1.93e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5118e-01  +7.5402e+02  7.53e+02  1.44e-01  5.58e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1149e-01  +1.6848e+02  1.68e+02  1.31e-01  5.06e+01  1.85e-05  2.26e-01  5.77e-02  
  4  +5.0022e-01  +3.2853e+00  2.79e+00  8.32e-03  3.17e+00  1.57e-06  1.70e-01  7.84e-01  
  5  +5.0002e-01  +8.9801e-01  3.98e-01  1.20e-03  4.64e-01  9.83e-06  9.89e-02  9.90e-01  
  6  +5.0000e-01  +5.6550e-01  6.55e-02  1.96e-04  7.58e-02  3.14e-06  1.64e-02  8.46e-01  
  7  +4.9989e-01  +7.2745e-01  2.28e-01  3.90e-04  1.51e-01  1.00e-04  1.58e-03  9.59e-01  
  8  +4.9916e-01  +7.1900e-01  2.20e-01  7.52e-05  2.92e-02  6.12e-04  2.40e-04  8.51e-01  
  9  +4.9720e-01  +5.8883e-01  9.16e-02  9.04e-06  3.50e-03  1.53e-03  2.78e-05  9.90e-01  
 10  +4.9317e-01  +5.7000e-01  7.68e-02  4.09e-06  1.58e-03  2.22e-03  1.26e-05  6.04e-01  
 11  +4.8700e-01  +5.2474e-01  3.77e-02  2.35e-06  9.12e-04  1.83e-05  7.73e-06  6.39e-01  
 12  +4.7893e-01  +4.8749e-01  8.56e-03  4.10e-07  1.59e-04  3.98e-06  1.46e-06  8.22e-01  
 13  +4.7592e-01  +4.7626e-01  3.42e-04  1.40e-08  5.43e-06  6.00e-08  5.75e-08  9.79e-01  
 14  +4.7580e-01  +4.7580e-01  3.43e-06  1.40e-10  5.42e-08  6.00e-10  5.77e-10  9.90e-01  
 15  +4.7580e-01  +4.7580e-01  3.43e-08  1.40e-12  5.42e-10  6.00e-12  5.77e-12  9.90e-01  
 16  +4.7580e-01  +4.7580e-01  3.45e-10  1.42e-14  5.46e-12  8.05e-14  7.64e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 296.7855ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:04 PM: Optimal value: 4.758e-01
(CVXPY) Sep 20 07:30:04 PM: Compilation took 9.441e-02 seconds
(CVXPY) Sep 20 07:30:04 PM: Solver (including time spent in interface) took 3.258e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4758
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:30:04 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:30:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:30:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:30:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:30:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:30:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:30:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:30:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:30:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:30:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:30:04 PM: Finished problem compilation (took 1.056e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 229242
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  2.09e+02  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +4.8447e+03  4.84e+03  3.42e-01  1.16e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5110e-01  +7.5325e+02  7.53e+02  1.44e-01  6.04e+01  8.23e-03  2.28e-01  7.24e-01  
  3  +5.1146e-01  +1.6822e+02  1.68e+02  1.31e-01  5.48e+01  1.85e-05  2.26e-01  5.82e-02  
  4  +5.0021e-01  +3.1562e+00  2.66e+00  7.94e-03  3.28e+00  1.61e-06  1.68e-01  8.20e-01  
  5  +5.0003e-01  +1.0583e+00  5.58e-01  1.68e-03  7.02e-01  7.20e-06  1.09e-01  7.38e-01  
  6  +5.0001e-01  +7.2808e-01  2.28e-01  6.83e-04  2.85e-01  3.51e-06  4.98e-02  6.81e-01  
  7  +5.0000e-01  +6.0639e-01  1.06e-01  3.18e-04  1.33e-01  3.18e-06  1.25e-02  8.46e-01  
  8  +4.9994e-01  +6.4736e-01  1.47e-01  3.01e-04  1.26e-01  3.40e-05  1.36e-03  9.49e-01  
  9  +4.9905e-01  +6.4193e-01  1.43e-01  3.36e-05  1.41e-02  4.27e-04  1.02e-04  9.25e-01  
 10  +4.9926e-01  +6.2574e-01  1.26e-01  2.76e-05  1.16e-02  2.87e-04  8.30e-05  4.45e-01  
 11  +4.9806e-01  +6.1453e-01  1.16e-01  1.24e-05  5.21e-03  5.38e-04  3.67e-05  5.93e-01  
 12  +4.9839e-01  +6.1283e-01  1.14e-01  1.22e-05  5.13e-03  4.39e-04  3.59e-05  1.74e-01  
 13  +4.9843e-01  +6.0984e-01  1.11e-01  1.20e-05  5.06e-03  3.56e-04  3.55e-05  1.48e-01  
 14  +4.9820e-01  +6.0692e-01  1.09e-01  1.09e-05  4.59e-03  3.49e-04  3.20e-05  1.54e-01  
 15  +4.9701e-01  +5.9286e-01  9.59e-02  7.01e-06  2.94e-03  3.00e-04  2.01e-05  6.06e-01  
 16  +4.9688e-01  +5.9194e-01  9.51e-02  7.00e-06  2.94e-03  2.89e-04  2.01e-05  1.93e-02  
 17  +4.9699e-01  +5.8885e-01  9.19e-02  6.12e-06  2.57e-03  1.14e-04  1.72e-05  6.57e-01  
 18  +4.9583e-01  +5.8331e-01  8.75e-02  4.92e-06  2.07e-03  1.19e-04  1.38e-05  2.49e-01  
 19  +4.9550e-01  +5.8214e-01  8.66e-02  4.87e-06  2.04e-03  1.03e-04  1.37e-05  1.05e-01  
 20  +4.9274e-01  +5.7114e-01  7.84e-02  3.41e-06  1.43e-03  1.10e-04  9.60e-06  3.36e-01  
 21  +4.9185e-01  +5.6744e-01  7.56e-02  3.40e-06  1.43e-03  1.01e-04  9.60e-06  9.57e-03  
 22  +4.8839e-01  +5.5492e-01  6.65e-02  2.67e-06  1.12e-03  8.99e-05  7.56e-06  2.51e-01  
 23  +4.8803e-01  +5.5369e-01  6.57e-02  2.66e-06  1.11e-03  8.61e-05  7.56e-06  1.34e-02  
 24  +4.7753e-01  +5.1601e-01  3.85e-02  1.30e-06  5.46e-04  4.39e-05  3.77e-06  5.74e-01  
 25  +4.7222e-01  +4.9644e-01  2.42e-02  7.74e-07  3.25e-04  4.60e-07  2.27e-06  9.15e-01  
 26  +4.6452e-01  +4.7195e-01  7.43e-03  2.26e-07  9.46e-05  1.32e-07  6.72e-07  7.27e-01  
 27  +4.6116e-01  +4.6126e-01  9.34e-05  2.78e-09  1.17e-06  1.34e-09  8.35e-09  9.89e-01  
 28  +4.6112e-01  +4.6112e-01  9.35e-07  2.78e-11  1.17e-08  1.34e-11  8.35e-11  9.90e-01  
 29  +4.6112e-01  +4.6112e-01  9.36e-09  2.79e-13  1.17e-10  1.45e-13  9.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 670.1807ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:30:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:30:05 PM: Optimal value: 4.611e-01
(CVXPY) Sep 20 07:30:05 PM: Compilation took 1.056e-01 seconds
(CVXPY) Sep 20 07:30:05 PM: Solver (including time spent in interface) took 7.047e-01 seconds
FULL MODEL:
  Accruacy: 0.53898
  Our objective: 0.07796000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.07796)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.5314977169036865
Best over terms:
  Our final objective: 0.07796000000000002
    Its accruacy: 0.53898
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.07796000000000002
  Highest accruacy: 0.53898
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

