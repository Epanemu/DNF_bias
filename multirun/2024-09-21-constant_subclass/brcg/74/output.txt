Command:
python test_script.py -s constant_subclass -d 2 -n 10000 --seed 21 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.3032
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 2.

Computed total variation: 0.3032
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:23 PM: Your problem has 5005 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:23 PM: Finished problem compilation (took 1.167e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5005
  constraints   = 10005
  nnz(P)        = 0
  nnz(A)        = 25005
  cones (total) = 1
    : Nonnegative = 1,  numel = 10005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +5.0009e+03  5.00e+03  9.83e-01  7.06e+01  1.00e+00  1.00e+00   ------   
  1  +6.3751e-01  +8.7398e+02  8.73e+02  2.67e-01  3.33e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5907e-01  +1.6317e+02  1.63e+02  1.33e-01  1.91e+01  5.29e-03  2.15e-01  5.88e-01  
  3  +5.0511e-01  +1.5384e+01  1.49e+01  7.59e-02  1.04e+01  4.88e-06  2.13e-01  7.00e-02  
  4  +5.0005e-01  +1.4567e+00  9.57e-01  6.37e-03  8.95e-01  2.76e-06  1.72e-01  4.82e-01  
  5  +4.9984e-01  +8.3475e-01  3.35e-01  2.21e-03  3.13e-01  2.43e-06  3.46e-02  8.53e-01  
  6  +4.8327e-01  +1.2170e+00  7.34e-01  4.30e-04  6.22e-02  1.41e-04  1.23e-03  9.83e-01  
  7  +4.4535e-01  +7.2832e-01  2.83e-01  6.71e-05  9.66e-03  1.91e-04  1.98e-04  8.43e-01  
  8  +4.0464e-01  +4.4586e-01  4.12e-02  9.66e-06  1.38e-03  5.16e-06  3.82e-05  9.42e-01  
  9  +3.9324e-01  +3.9524e-01  2.00e-03  4.44e-07  6.31e-05  2.02e-07  2.00e-06  9.56e-01  
 10  +3.9271e-01  +3.9273e-01  2.03e-05  4.49e-09  6.39e-07  2.05e-09  2.04e-08  9.90e-01  
 11  +3.9270e-01  +3.9270e-01  2.03e-07  4.49e-11  6.39e-09  2.05e-11  2.04e-10  9.90e-01  
 12  +3.9270e-01  +3.9270e-01  2.03e-09  4.49e-13  6.39e-11  2.06e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.4025ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:23 PM: Optimal value: 3.927e-01
(CVXPY) Sep 20 07:26:23 PM: Compilation took 1.167e-02 seconds
(CVXPY) Sep 20 07:26:23 PM: Solver (including time spent in interface) took 2.594e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.3927
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:23 PM: Your problem has 5006 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:23 PM: Finished problem compilation (took 8.482e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5006
  constraints   = 10006
  nnz(P)        = 0
  nnz(A)        = 27011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0000e-01  +5.0018e+03  5.00e+03  9.83e-01  7.33e+01  1.00e+00  1.00e+00   ------   
  1  +6.3734e-01  +8.7433e+02  8.74e+02  2.67e-01  3.46e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5894e-01  +1.6290e+02  1.62e+02  1.32e-01  1.98e+01  5.30e-03  2.15e-01  5.90e-01  
  3  +5.0481e-01  +1.4676e+01  1.42e+01  7.36e-02  1.05e+01  4.68e-06  2.13e-01  7.60e-02  
  4  +5.0061e-01  +3.0761e+00  2.58e+00  1.70e-02  2.44e+00  3.11e-06  1.93e-01  2.11e-01  
  5  +5.0001e-01  +8.1646e-01  3.16e-01  2.10e-03  3.09e-01  9.42e-07  4.39e-02  8.48e-01  
  6  +4.9951e-01  +9.4870e-01  4.49e-01  2.35e-03  3.50e-01  5.27e-06  1.07e-02  8.45e-01  
  7  +4.9162e-01  +9.0395e-01  4.12e-01  2.89e-04  4.38e-02  6.39e-05  7.71e-04  9.28e-01  
  8  +4.6865e-01  +7.8038e-01  3.12e-01  7.80e-05  1.18e-02  1.45e-04  2.00e-04  7.98e-01  
  9  +4.6825e-01  +7.9648e-01  3.28e-01  7.40e-05  1.12e-02  1.51e-04  1.88e-04  1.69e-01  
 10  +4.6727e-01  +7.9285e-01  3.26e-01  7.37e-05  1.12e-02  1.44e-04  1.88e-04  3.13e-02  
 11  +4.4660e-01  +7.0737e-01  2.61e-01  6.04e-05  9.06e-03  4.06e-05  1.71e-04  4.95e-01  
 12  +4.0645e-01  +5.8890e-01  1.82e-01  3.26e-05  4.87e-03  2.70e-05  9.50e-05  6.33e-01  
 13  +3.5772e-01  +3.8258e-01  2.49e-02  4.49e-06  6.64e-04  2.23e-07  1.57e-05  9.74e-01  
 14  +3.4864e-01  +3.4899e-01  3.51e-04  6.37e-08  9.41e-06  4.18e-09  2.35e-07  9.86e-01  
 15  +3.4850e-01  +3.4850e-01  3.51e-06  6.36e-10  9.40e-08  4.18e-11  2.35e-09  9.90e-01  
 16  +3.4850e-01  +3.4850e-01  3.51e-08  6.36e-12  9.40e-10  4.18e-13  2.35e-11  9.90e-01  
 17  +3.4850e-01  +3.4850e-01  3.51e-10  6.36e-14  9.40e-12  4.18e-15  2.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.0895ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:23 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:23 PM: Optimal value: 3.485e-01
(CVXPY) Sep 20 07:26:23 PM: Compilation took 8.482e-03 seconds
(CVXPY) Sep 20 07:26:23 PM: Solver (including time spent in interface) took 5.223e-02 seconds
FULL MODEL:
  Accruacy: 0.6516
  Our objective: 0.3032

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.3032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.9896094799041748
Best over terms:
  Our final objective: 0.3032
    Its accruacy: 0.6516
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.3032
  Highest accruacy: 0.6516
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

