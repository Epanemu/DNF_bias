Command:
python test_script.py -s constant_subclass -d 3 -n 50000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14611999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 3.

Computed total variation: 0.14611999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:04 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:04 PM: Finished problem compilation (took 7.346e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 150007
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.76e+02  1.00e+00  1.00e+00   ------   
  1  +6.2016e-01  +4.6339e+03  4.63e+03  3.09e-01  9.19e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5598e-01  +7.9406e+02  7.94e+02  1.40e-01  4.97e+01  6.67e-03  2.21e-01  6.61e-01  
  3  +5.1053e-01  +1.4931e+02  1.49e+02  1.26e-01  4.45e+01  1.26e-05  2.20e-01  4.40e-02  
  4  +5.0007e-01  +1.7412e+00  1.24e+00  3.70e-03  1.30e+00  9.90e-07  1.63e-01  9.90e-01  
  5  +5.0001e-01  +7.3710e-01  2.37e-01  7.07e-04  2.50e-01  4.28e-07  5.90e-02  7.29e-01  
  6  +4.9998e-01  +6.5607e-01  1.56e-01  4.60e-04  1.63e-01  1.11e-06  9.52e-03  8.99e-01  
  7  +4.9755e-01  +6.7744e-01  1.80e-01  4.48e-05  1.59e-02  8.39e-05  1.36e-04  9.87e-01  
  8  +4.8494e-01  +6.0105e-01  1.16e-01  5.93e-06  2.10e-03  3.57e-04  1.78e-05  8.71e-01  
  9  +4.6825e-01  +5.0564e-01  3.74e-02  2.02e-06  7.16e-04  3.08e-06  6.65e-06  7.96e-01  
 10  +4.5995e-01  +4.6424e-01  4.30e-03  2.16e-07  7.65e-05  2.61e-07  7.48e-07  8.93e-01  
 11  +4.5880e-01  +4.5951e-01  7.13e-04  3.23e-08  1.14e-05  3.35e-08  1.24e-07  8.78e-01  
 12  +4.5855e-01  +4.5856e-01  1.67e-05  6.94e-10  2.46e-07  6.12e-10  2.91e-09  9.83e-01  
 13  +4.5854e-01  +4.5854e-01  1.67e-07  6.93e-12  2.45e-09  6.13e-12  2.91e-11  9.90e-01  
 14  +4.5854e-01  +4.5854e-01  1.72e-09  7.16e-14  2.53e-11  1.67e-13  7.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 236.599ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:04 PM: Optimal value: 4.585e-01
(CVXPY) Sep 20 07:28:04 PM: Compilation took 7.346e-02 seconds
(CVXPY) Sep 20 07:28:04 PM: Solver (including time spent in interface) took 2.617e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:04 PM: Your problem has 25010 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:04 PM: Finished problem compilation (took 7.217e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25010
  constraints   = 50010
  nnz(P)        = 0
  nnz(A)        = 170488
  cones (total) = 1
    : Nonnegative = 1,  numel = 50010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.84e+02  1.00e+00  1.00e+00   ------   
  1  +6.2014e-01  +4.6344e+03  4.63e+03  3.09e-01  9.60e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5595e-01  +7.9373e+02  7.93e+02  1.40e-01  5.19e+01  6.67e-03  2.21e-01  6.62e-01  
  3  +5.1050e-01  +1.4900e+02  1.48e+02  1.26e-01  4.65e+01  1.26e-05  2.20e-01  4.43e-02  
  4  +5.0027e-01  +4.6239e+00  4.12e+00  1.22e-02  4.43e+00  1.28e-06  1.99e-01  3.63e-01  
  5  +5.0006e-01  +1.7332e+00  1.23e+00  3.67e-03  1.35e+00  8.71e-07  1.65e-01  2.83e-01  
  6  +5.0002e-01  +9.8496e-01  4.85e-01  1.45e-03  5.33e-01  4.16e-07  8.98e-02  5.23e-01  
  7  +5.0001e-01  +7.7719e-01  2.77e-01  8.26e-04  3.05e-01  3.31e-07  3.85e-02  6.53e-01  
  8  +4.9994e-01  +6.7895e-01  1.79e-01  4.80e-04  1.77e-01  1.51e-06  3.41e-03  9.90e-01  
  9  +4.9561e-01  +6.6015e-01  1.65e-01  1.81e-05  6.76e-03  9.24e-05  4.96e-05  9.86e-01  
 10  +4.9481e-01  +6.5968e-01  1.65e-01  1.50e-05  5.58e-03  1.05e-04  4.08e-05  2.35e-01  
 11  +4.9464e-01  +6.5720e-01  1.63e-01  1.26e-05  4.69e-03  4.93e-05  3.42e-05  6.93e-01  
 12  +4.9217e-01  +6.4959e-01  1.57e-01  9.45e-06  3.52e-03  4.82e-05  2.57e-05  4.25e-01  
 13  +4.9155e-01  +6.4635e-01  1.55e-01  9.29e-06  3.46e-03  4.28e-05  2.56e-05  7.62e-02  
 14  +4.8161e-01  +6.1009e-01  1.28e-01  5.33e-06  1.98e-03  3.36e-05  1.49e-05  6.51e-01  
 15  +4.5924e-01  +5.3192e-01  7.27e-02  2.53e-06  9.38e-04  1.33e-05  7.37e-06  6.30e-01  
 16  +4.3460e-01  +4.5092e-01  1.63e-02  5.26e-07  1.94e-04  1.34e-07  1.63e-06  9.16e-01  
 17  +4.2715e-01  +4.2738e-01  2.30e-04  7.24e-09  2.68e-06  1.35e-09  2.29e-08  9.87e-01  
 18  +4.2704e-01  +4.2704e-01  2.30e-06  7.24e-11  2.68e-08  1.35e-11  2.29e-10  9.90e-01  
 19  +4.2704e-01  +4.2704e-01  2.30e-08  7.25e-13  2.68e-10  1.41e-13  2.39e-12  9.90e-01  
 20  +4.2704e-01  +4.2704e-01  2.31e-10  7.28e-15  2.68e-12  1.47e-15  2.49e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 391.6419ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:05 PM: Optimal value: 4.270e-01
(CVXPY) Sep 20 07:28:05 PM: Compilation took 7.217e-02 seconds
(CVXPY) Sep 20 07:28:05 PM: Solver (including time spent in interface) took 4.186e-01 seconds
FULL MODEL:
  Accruacy: 0.57306
  Our objective: 0.14612000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.14612)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.1881396770477295
Best over terms:
  Our final objective: 0.14612000000000003
    Its accruacy: 0.57306
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14612000000000003
  Highest accruacy: 0.57306
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

