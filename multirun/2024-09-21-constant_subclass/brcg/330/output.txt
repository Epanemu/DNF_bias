Command:
python test_script.py -s constant_subclass -d 9 -n 100 --seed 43 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 9.

Computed total variation: 0.8800000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:03 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Finished problem compilation (took 6.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 619
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9806e-01  +5.0987e+01  5.05e+01  8.73e-01  1.03e+01  1.00e+00  1.04e+00   ------   
  1  +5.7602e-01  +1.1250e+01  1.07e+01  3.81e-01  6.25e+00  3.77e-03  5.93e-01  5.88e-01  
  2  +5.1497e-01  +1.7583e+00  1.24e+00  9.80e-02  1.99e+00  1.86e-02  2.52e-01  9.90e-01  
  3  +4.9767e-01  +7.9704e-01  2.99e-01  2.18e-02  4.64e-01  6.66e-03  6.91e-02  7.74e-01  
  4  +4.7337e-01  +7.0779e-01  2.34e-01  8.14e-03  1.78e-01  8.50e-03  2.72e-02  6.82e-01  
  5  +4.5970e-01  +5.8846e-01  1.29e-01  4.35e-03  9.42e-02  3.49e-03  1.58e-02  4.95e-01  
  6  +4.4933e-01  +5.0890e-01  5.96e-02  1.80e-03  3.89e-02  1.19e-03  7.05e-03  7.14e-01  
  7  +4.3828e-01  +4.6712e-01  2.88e-02  6.46e-04  1.40e-02  3.61e-04  2.92e-03  7.98e-01  
  8  +4.3098e-01  +4.3355e-01  2.57e-03  5.40e-05  1.17e-03  9.34e-06  2.61e-04  9.90e-01  
  9  +4.3011e-01  +4.3014e-01  2.65e-05  5.53e-07  1.20e-05  9.42e-08  2.70e-06  9.90e-01  
 10  +4.3010e-01  +4.3010e-01  2.65e-07  5.53e-09  1.20e-07  9.42e-10  2.70e-08  9.90e-01  
 11  +4.3010e-01  +4.3010e-01  2.65e-09  5.53e-11  1.20e-09  9.42e-12  2.70e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 595.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:03 PM: Optimal value: 4.301e-01
(CVXPY) Sep 20 07:56:03 PM: Compilation took 6.514e-03 seconds
(CVXPY) Sep 20 07:56:03 PM: Solver (including time spent in interface) took 9.193e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:03 PM: Your problem has 79 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Finished problem compilation (took 3.833e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 723
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9162e-01  +5.2544e+01  5.21e+01  8.79e-01  1.04e+01  1.00e+00  1.07e+00   ------   
  1  +5.3485e-01  +1.1494e+01  1.10e+01  3.85e-01  6.15e+00  3.79e-03  6.08e-01  5.92e-01  
  2  +4.6594e-01  +2.2292e+00  1.76e+00  1.03e-01  2.12e+00  2.23e-02  2.51e-01  9.40e-01  
  3  +3.9243e-01  +9.6503e-01  5.73e-01  2.31e-02  4.90e-01  9.67e-03  6.70e-02  8.07e-01  
  4  +3.6146e-01  +6.2889e-01  2.67e-01  9.16e-03  1.93e-01  4.92e-03  2.92e-02  6.23e-01  
  5  +3.4191e-01  +4.9606e-01  1.54e-01  4.18e-03  9.04e-02  3.26e-03  1.40e-02  5.62e-01  
  6  +3.2574e-01  +4.2838e-01  1.03e-01  2.26e-03  5.01e-02  2.17e-03  7.91e-03  4.96e-01  
  7  +3.0941e-01  +3.3930e-01  2.99e-02  6.66e-04  1.49e-02  1.85e-04  2.44e-03  9.42e-01  
  8  +3.0070e-01  +3.0163e-01  9.33e-04  2.04e-05  4.56e-04  4.10e-06  7.67e-05  9.74e-01  
  9  +3.0043e-01  +3.0054e-01  1.02e-04  2.24e-06  4.97e-05  4.25e-07  8.54e-06  8.98e-01  
 10  +3.0040e-01  +3.0040e-01  1.81e-06  4.00e-08  8.85e-07  8.19e-09  1.53e-07  9.89e-01  
 11  +3.0040e-01  +3.0040e-01  1.81e-08  4.00e-10  8.85e-09  8.19e-11  1.53e-09  9.90e-01  
 12  +3.0040e-01  +3.0040e-01  1.81e-10  4.00e-12  8.85e-11  8.20e-13  1.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 793.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:03 PM: Optimal value: 3.004e-01
(CVXPY) Sep 20 07:56:03 PM: Compilation took 3.833e-03 seconds
(CVXPY) Sep 20 07:56:03 PM: Solver (including time spent in interface) took 1.525e-03 seconds
Iteration: 2, Objective: 0.3004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:03 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Finished problem compilation (took 3.991e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 808
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8661e-01  +5.2918e+01  5.24e+01  8.83e-01  1.03e+01  1.00e+00  1.08e+00   ------   
  1  +5.0177e-01  +1.1643e+01  1.11e+01  3.91e-01  6.04e+00  3.83e-03  6.13e-01  5.88e-01  
  2  +4.1653e-01  +2.3204e+00  1.90e+00  9.34e-02  1.91e+00  2.60e-02  2.27e-01  9.73e-01  
  3  +3.2380e-01  +9.3371e-01  6.10e-01  2.15e-02  4.47e-01  1.12e-02  6.05e-02  7.82e-01  
  4  +2.8065e-01  +6.0841e-01  3.28e-01  1.02e-02  2.15e-01  5.61e-03  3.06e-02  5.39e-01  
  5  +2.3699e-01  +3.2295e-01  8.60e-02  2.47e-03  5.41e-02  1.18e-03  8.39e-03  7.90e-01  
  6  +2.1550e-01  +2.3060e-01  1.51e-02  4.08e-04  9.16e-03  8.81e-05  1.53e-03  9.15e-01  
  7  +2.1104e-01  +2.1204e-01  1.01e-03  2.70e-05  6.06e-04  5.25e-06  1.05e-04  9.42e-01  
  8  +2.1073e-01  +2.1082e-01  8.93e-05  2.35e-06  5.20e-05  3.54e-07  9.54e-06  9.90e-01  
  9  +2.1070e-01  +2.1070e-01  1.01e-06  2.65e-08  5.87e-07  3.92e-09  1.09e-07  9.89e-01  
 10  +2.1070e-01  +2.1070e-01  1.01e-08  2.65e-10  5.87e-09  3.92e-11  1.09e-09  9.90e-01  
 11  +2.1070e-01  +2.1070e-01  1.01e-10  2.65e-12  5.87e-11  3.93e-13  1.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 934.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:03 PM: Optimal value: 2.107e-01
(CVXPY) Sep 20 07:56:03 PM: Compilation took 3.991e-03 seconds
(CVXPY) Sep 20 07:56:03 PM: Solver (including time spent in interface) took 1.511e-03 seconds
Iteration: 3, Objective: 0.2107
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:03 PM: Your problem has 99 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Finished problem compilation (took 4.520e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 149
  nnz(P)        = 0
  nnz(A)        = 878
  cones (total) = 1
    : Nonnegative = 1,  numel = 149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8232e-01  +5.2857e+01  5.24e+01  8.87e-01  1.01e+01  1.00e+00  1.08e+00   ------   
  1  +4.7123e-01  +1.1706e+01  1.12e+01  3.94e-01  5.84e+00  3.89e-03  6.07e-01  5.86e-01  
  2  +3.7042e-01  +2.2987e+00  1.93e+00  8.71e-02  1.75e+00  2.75e-02  2.09e-01  9.90e-01  
  3  +2.7776e-01  +9.0244e-01  6.25e-01  2.14e-02  4.36e-01  1.15e-02  5.87e-02  7.68e-01  
  4  +2.2843e-01  +4.2575e-01  1.97e-01  6.74e-03  1.35e-01  2.56e-03  2.07e-02  7.03e-01  
  5  +2.0061e-01  +2.4947e-01  4.89e-02  1.54e-03  3.17e-02  5.49e-04  5.35e-03  8.03e-01  
  6  +1.9138e-01  +1.9446e-01  3.08e-03  9.73e-05  1.99e-03  2.25e-05  3.56e-04  9.51e-01  
  7  +1.9075e-01  +1.9097e-01  2.21e-04  7.06e-06  1.42e-04  1.22e-06  2.69e-05  9.26e-01  
  8  +1.9070e-01  +1.9071e-01  7.71e-06  2.47e-07  4.95e-06  4.21e-08  9.70e-07  9.66e-01  
  9  +1.9070e-01  +1.9070e-01  7.72e-08  2.47e-09  4.95e-08  4.21e-10  9.71e-09  9.90e-01  
 10  +1.9070e-01  +1.9070e-01  7.72e-10  2.48e-11  4.95e-10  4.22e-12  9.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 985.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:03 PM: Optimal value: 1.907e-01
(CVXPY) Sep 20 07:56:03 PM: Compilation took 4.520e-03 seconds
(CVXPY) Sep 20 07:56:03 PM: Solver (including time spent in interface) took 9.923e-04 seconds
Iteration: 4, Objective: 0.1907
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:03 PM: Your problem has 109 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Finished problem compilation (took 3.529e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 109
  constraints   = 159
  nnz(P)        = 0
  nnz(A)        = 920
  cones (total) = 1
    : Nonnegative = 1,  numel = 159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7673e-01  +5.2986e+01  5.25e+01  8.90e-01  9.89e+00  1.00e+00  1.08e+00   ------   
  1  +4.1778e-01  +1.2087e+01  1.17e+01  3.96e-01  5.66e+00  4.05e-03  6.04e-01  5.73e-01  
  2  +2.9704e-01  +2.3639e+00  2.07e+00  8.57e-02  1.64e+00  2.97e-02  2.00e-01  9.90e-01  
  3  +2.2924e-01  +7.8348e-01  5.54e-01  2.12e-02  4.07e-01  8.93e-03  5.64e-02  7.42e-01  
  4  +1.9326e-01  +4.8749e-01  2.94e-01  1.07e-02  2.04e-01  4.05e-03  3.20e-02  5.50e-01  
  5  +1.6444e-01  +2.5839e-01  9.39e-02  3.18e-03  6.16e-02  9.74e-04  1.08e-02  7.84e-01  
  6  +1.5290e-01  +2.0302e-01  5.01e-02  1.47e-03  2.97e-02  4.01e-04  5.42e-03  7.29e-01  
  7  +1.4245e-01  +1.4855e-01  6.10e-03  1.73e-04  3.51e-03  4.19e-05  6.79e-04  8.87e-01  
  8  +1.4129e-01  +1.4259e-01  1.30e-03  3.75e-05  7.55e-04  8.16e-06  1.50e-04  7.92e-01  
  9  +1.4104e-01  +1.4150e-01  4.61e-04  1.30e-05  2.64e-04  2.26e-06  5.57e-05  8.14e-01  
 10  +1.4091e-01  +1.4092e-01  1.75e-05  4.92e-07  1.00e-05  7.30e-08  2.18e-06  9.61e-01  
 11  +1.4090e-01  +1.4090e-01  1.75e-07  4.94e-09  1.00e-07  7.31e-10  2.19e-08  9.90e-01  
 12  +1.4090e-01  +1.4090e-01  1.75e-09  4.94e-11  1.00e-09  7.31e-12  2.19e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1773ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:03 PM: Optimal value: 1.409e-01
(CVXPY) Sep 20 07:56:03 PM: Compilation took 3.529e-03 seconds
(CVXPY) Sep 20 07:56:03 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 5, Objective: 0.1409
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:03 PM: Your problem has 119 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 119
  constraints   = 169
  nnz(P)        = 0
  nnz(A)        = 965
  cones (total) = 1
    : Nonnegative = 1,  numel = 169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7210e-01  +5.3414e+01  5.29e+01  8.93e-01  9.69e+00  1.00e+00  1.09e+00   ------   
  1  +3.6481e-01  +1.2354e+01  1.20e+01  3.95e-01  5.47e+00  4.17e-03  6.02e-01  5.68e-01  
  2  +2.3496e-01  +2.2894e+00  2.05e+00  8.34e-02  1.54e+00  2.92e-02  1.92e-01  9.87e-01  
  3  +1.9638e-01  +7.6962e-01  5.73e-01  2.47e-02  4.53e-01  8.48e-03  6.36e-02  7.10e-01  
  4  +1.6292e-01  +4.3332e-01  2.70e-01  1.06e-02  1.97e-01  3.53e-03  3.17e-02  6.18e-01  
  5  +1.3754e-01  +2.1258e-01  7.50e-02  2.69e-03  5.10e-02  8.34e-04  9.28e-03  7.82e-01  
  6  +1.2732e-01  +1.5611e-01  2.88e-02  9.39e-04  1.82e-02  2.94e-04  3.57e-03  6.56e-01  
  7  +1.2169e-01  +1.2468e-01  2.99e-03  9.34e-05  1.82e-03  2.39e-05  3.81e-04  9.22e-01  
  8  +1.2105e-01  +1.2124e-01  1.95e-04  6.18e-06  1.19e-04  1.03e-06  2.66e-05  9.32e-01  
  9  +1.2100e-01  +1.2101e-01  5.83e-06  1.86e-07  3.56e-06  2.86e-08  8.26e-07  9.72e-01  
 10  +1.2100e-01  +1.2100e-01  5.82e-08  1.86e-09  3.56e-08  2.85e-10  8.27e-09  9.90e-01  
 11  +1.2100e-01  +1.2100e-01  5.82e-10  1.86e-11  3.56e-10  2.85e-12  8.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.18ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:03 PM: Optimal value: 1.210e-01
(CVXPY) Sep 20 07:56:03 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:56:03 PM: Solver (including time spent in interface) took 1.569e-03 seconds
Iteration: 6, Objective: 0.1210
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:03 PM: Your problem has 129 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:03 PM: Finished problem compilation (took 4.268e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 129
  constraints   = 179
  nnz(P)        = 0
  nnz(A)        = 1008
  cones (total) = 1
    : Nonnegative = 1,  numel = 179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7138e-01  +5.3137e+01  5.27e+01  8.96e-01  9.48e+00  1.00e+00  1.08e+00   ------   
  1  +3.4987e-01  +1.2464e+01  1.21e+01  3.98e-01  5.29e+00  4.26e-03  5.96e-01  5.63e-01  
  2  +2.2132e-01  +2.5344e+00  2.31e+00  9.20e-02  1.64e+00  2.90e-02  2.11e-01  9.40e-01  
  3  +1.8772e-01  +7.9496e-01  6.07e-01  2.58e-02  4.63e-01  8.86e-03  6.66e-02  7.14e-01  
  4  +1.5262e-01  +4.2111e-01  2.68e-01  1.04e-02  1.86e-01  3.17e-03  3.12e-02  6.78e-01  
  5  +1.2953e-01  +2.2626e-01  9.67e-02  3.41e-03  6.20e-02  1.08e-03  1.14e-02  6.95e-01  
  6  +1.1731e-01  +1.5061e-01  3.33e-02  1.09e-03  2.02e-02  3.20e-04  3.88e-03  7.37e-01  
  7  +1.1148e-01  +1.1336e-01  1.88e-03  6.14e-05  1.13e-03  1.25e-05  2.29e-04  9.49e-01  
  8  +1.1115e-01  +1.1164e-01  4.94e-04  1.61e-05  2.95e-04  2.05e-06  6.94e-05  8.52e-01  
  9  +1.1102e-01  +1.1110e-01  7.36e-05  2.33e-06  4.27e-05  2.74e-07  1.11e-05  8.53e-01  
 10  +1.1100e-01  +1.1100e-01  1.66e-06  5.20e-08  9.57e-07  5.32e-09  2.55e-07  9.87e-01  
 11  +1.1100e-01  +1.1100e-01  1.66e-08  5.20e-10  9.57e-09  5.32e-11  2.55e-09  9.90e-01  
 12  +1.1100e-01  +1.1100e-01  1.66e-10  5.20e-12  9.58e-11  5.34e-13  2.56e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.339ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:03 PM: Optimal value: 1.110e-01
(CVXPY) Sep 20 07:56:03 PM: Compilation took 4.268e-03 seconds
(CVXPY) Sep 20 07:56:03 PM: Solver (including time spent in interface) took 2.001e-03 seconds
Iteration: 7, Objective: 0.1110
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:04 PM: Your problem has 139 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:04 PM: Finished problem compilation (took 4.550e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 139
  constraints   = 189
  nnz(P)        = 0
  nnz(A)        = 1045
  cones (total) = 1
    : Nonnegative = 1,  numel = 189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6583e-01  +5.3242e+01  5.28e+01  8.98e-01  9.30e+00  1.00e+00  1.08e+00   ------   
  1  +2.8577e-01  +1.3123e+01  1.28e+01  4.04e-01  5.21e+00  4.48e-03  5.98e-01  5.40e-01  
  2  +1.9617e-01  +2.2640e+00  2.07e+00  9.05e-02  1.57e+00  3.12e-02  2.01e-01  9.90e-01  
  3  +1.6349e-01  +6.2474e-01  4.61e-01  2.13e-02  3.71e-01  7.51e-03  5.42e-02  8.03e-01  
  4  +1.2668e-01  +2.9455e-01  1.68e-01  7.01e-03  1.22e-01  2.39e-03  2.09e-02  6.84e-01  
  5  +1.1219e-01  +2.2200e-01  1.10e-01  3.81e-03  7.08e-02  1.24e-03  1.25e-02  6.51e-01  
  6  +9.7368e-02  +1.2715e-01  2.98e-02  9.60e-04  1.80e-02  2.50e-04  3.41e-03  8.27e-01  
  7  +9.1687e-02  +9.3061e-02  1.37e-03  4.43e-05  8.26e-04  6.08e-06  1.64e-04  9.69e-01  
  8  +9.1387e-02  +9.1547e-02  1.60e-04  5.35e-06  9.69e-05  5.72e-07  2.14e-05  8.96e-01  
  9  +9.1351e-02  +9.1354e-02  3.05e-06  1.02e-07  1.85e-06  1.05e-08  4.16e-07  9.81e-01  
 10  +9.1350e-02  +9.1350e-02  3.05e-08  1.02e-09  1.85e-08  1.05e-10  4.16e-09  9.90e-01  
 11  +9.1350e-02  +9.1350e-02  3.05e-10  1.03e-11  1.85e-10  1.05e-12  4.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2753ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:04 PM: Optimal value: 9.135e-02
(CVXPY) Sep 20 07:56:04 PM: Compilation took 4.550e-03 seconds
(CVXPY) Sep 20 07:56:04 PM: Solver (including time spent in interface) took 1.999e-03 seconds
Iteration: 8, Objective: 0.0914
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:04 PM: Your problem has 149 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:04 PM: Finished problem compilation (took 4.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 149
  constraints   = 199
  nnz(P)        = 0
  nnz(A)        = 1079
  cones (total) = 1
    : Nonnegative = 1,  numel = 199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6519e-01  +5.3289e+01  5.28e+01  9.01e-01  9.11e+00  1.00e+00  1.08e+00   ------   
  1  +2.6298e-01  +1.3225e+01  1.30e+01  4.06e-01  5.04e+00  4.54e-03  5.95e-01  5.38e-01  
  2  +1.7893e-01  +2.2254e+00  2.05e+00  8.99e-02  1.51e+00  3.12e-02  2.02e-01  9.90e-01  
  3  +1.5518e-01  +4.9415e-01  3.39e-01  1.64e-02  2.77e-01  5.89e-03  4.23e-02  8.37e-01  
  4  +1.2157e-01  +2.7507e-01  1.54e-01  6.49e-03  1.12e-01  2.48e-03  1.88e-02  6.33e-01  
  5  +1.0728e-01  +2.1476e-01  1.07e-01  3.75e-03  6.91e-02  1.57e-03  1.19e-02  5.20e-01  
  6  +8.9499e-02  +1.2294e-01  3.34e-02  1.04e-03  1.98e-02  3.26e-04  3.64e-03  8.22e-01  
  7  +8.2212e-02  +8.5092e-02  2.88e-03  8.84e-05  1.67e-03  1.96e-05  3.23e-04  9.34e-01  
  8  +8.1509e-02  +8.1722e-02  2.14e-04  6.82e-06  1.25e-04  7.99e-07  2.68e-05  9.20e-01  
  9  +8.1453e-02  +8.1461e-02  8.82e-06  2.86e-07  5.21e-06  3.28e-08  1.16e-06  9.62e-01  
 10  +8.1450e-02  +8.1450e-02  8.84e-08  2.87e-09  5.22e-08  3.28e-10  1.16e-08  9.90e-01  
 11  +8.1450e-02  +8.1450e-02  8.86e-10  2.88e-11  5.23e-10  3.29e-12  1.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2859ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:04 PM: Optimal value: 8.145e-02
(CVXPY) Sep 20 07:56:04 PM: Compilation took 4.009e-03 seconds
(CVXPY) Sep 20 07:56:04 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 9, Objective: 0.0815
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:04 PM: Your problem has 151 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:04 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 151
  constraints   = 201
  nnz(P)        = 0
  nnz(A)        = 1092
  cones (total) = 1
    : Nonnegative = 1,  numel = 201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6426e-01  +5.3216e+01  5.28e+01  9.01e-01  9.09e+00  1.00e+00  1.08e+00   ------   
  1  +2.5162e-01  +1.3318e+01  1.31e+01  4.07e-01  5.04e+00  4.57e-03  5.96e-01  5.34e-01  
  2  +1.7179e-01  +2.2345e+00  2.06e+00  9.19e-02  1.53e+00  3.17e-02  2.03e-01  9.90e-01  
  3  +1.5181e-01  +4.8363e-01  3.32e-01  1.64e-02  2.73e-01  5.90e-03  4.19e-02  8.45e-01  
  4  +1.1858e-01  +2.7478e-01  1.56e-01  6.82e-03  1.16e-01  2.45e-03  1.96e-02  6.23e-01  
  5  +1.0185e-01  +2.0252e-01  1.01e-01  3.66e-03  6.69e-02  1.28e-03  1.18e-02  5.77e-01  
  6  +8.4951e-02  +1.0170e-01  1.67e-02  5.68e-04  1.05e-02  1.78e-04  2.00e-03  8.58e-01  
  7  +8.1872e-02  +8.3830e-02  1.96e-03  6.69e-05  1.22e-03  1.76e-05  2.44e-04  8.82e-01  
  8  +8.1533e-02  +8.2052e-02  5.18e-04  1.80e-05  3.24e-04  2.70e-06  7.09e-05  8.72e-01  
  9  +8.1405e-02  +8.1421e-02  1.68e-05  5.90e-07  1.05e-05  6.56e-08  2.39e-06  9.70e-01  
 10  +8.1400e-02  +8.1400e-02  1.69e-07  5.95e-09  1.06e-07  6.59e-10  2.42e-08  9.90e-01  
 11  +8.1400e-02  +8.1400e-02  1.69e-09  5.96e-11  1.06e-09  6.59e-12  2.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3166ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:04 PM: Optimal value: 8.140e-02
(CVXPY) Sep 20 07:56:04 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:56:04 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Iteration: 10, Objective: 0.0814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:04 PM: Your problem has 152 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:04 PM: Finished problem compilation (took 4.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 152
  constraints   = 202
  nnz(P)        = 0
  nnz(A)        = 1098
  cones (total) = 1
    : Nonnegative = 1,  numel = 202

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6394e-01  +5.3255e+01  5.28e+01  9.02e-01  9.08e+00  1.00e+00  1.08e+00   ------   
  1  +2.4841e-01  +1.3408e+01  1.32e+01  4.09e-01  5.05e+00  4.59e-03  5.98e-01  5.31e-01  
  2  +1.6805e-01  +2.2581e+00  2.09e+00  9.33e-02  1.54e+00  3.22e-02  2.06e-01  9.90e-01  
  3  +1.5091e-01  +4.8971e-01  3.39e-01  1.70e-02  2.82e-01  6.11e-03  4.34e-02  8.37e-01  
  4  +1.1957e-01  +2.8572e-01  1.66e-01  7.35e-03  1.25e-01  2.66e-03  2.10e-02  6.14e-01  
  5  +1.0181e-01  +2.0607e-01  1.04e-01  3.79e-03  6.94e-02  1.39e-03  1.23e-02  5.89e-01  
  6  +8.5394e-02  +1.0473e-01  1.93e-02  6.61e-04  1.22e-02  2.03e-04  2.33e-03  8.55e-01  
  7  +8.1862e-02  +8.3814e-02  1.95e-03  6.71e-05  1.23e-03  1.70e-05  2.45e-04  8.99e-01  
  8  +8.1535e-02  +8.2074e-02  5.39e-04  1.89e-05  3.41e-04  2.86e-06  7.43e-05  8.56e-01  
  9  +8.1405e-02  +8.1421e-02  1.69e-05  5.98e-07  1.07e-05  6.63e-08  2.42e-06  9.72e-01  
 10  +8.1400e-02  +8.1400e-02  1.70e-07  6.04e-09  1.08e-07  6.67e-10  2.44e-08  9.90e-01  
 11  +8.1400e-02  +8.1400e-02  1.70e-09  6.04e-11  1.08e-09  6.68e-12  2.45e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2995ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:04 PM: Optimal value: 8.140e-02
(CVXPY) Sep 20 07:56:04 PM: Compilation took 4.003e-03 seconds
(CVXPY) Sep 20 07:56:04 PM: Solver (including time spent in interface) took 2.009e-03 seconds
FULL MODEL:
  Accruacy: 0.91
  Our objective: 0.8200000000000001

IF 
    (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 0 AND x8 = 0)                                                                   <-- (term's our objective: 0.14)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0)                                             <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x8 = 0)                                                        <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1)                                             <-- (term's our objective: 0.06)
 OR (x1 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 0)                                                        <-- (term's our objective: 0.1)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 0)                                                        <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.1)
 OR (x2 = 0 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.08)
 OR (x2 = 1 AND x3 = 0 AND x6 = 0 AND x8 = 1)                                                        <-- (term's our objective: 0.14)
 OR (x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.1)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.3833863735198975
Best over terms:
  Our final objective: 0.14000000000000004
    Its accruacy: 0.57
    Its hamming distance: 6
  Shortest hamming distance: 6
    Its our objective: 0.14000000000000004
  Highest accruacy: 0.57
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

