Command:
python test_script.py -s constant_subclass -d 7 -n 50000 --seed 43 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.009000000000000001
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 7.

Computed total variation: 0.0502
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:30 PM: Your problem has 25015 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:30 PM: Finished problem compilation (took 1.310e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25015
  constraints   = 50015
  nnz(P)        = 0
  nnz(A)        = 250015
  cones (total) = 1
    : Nonnegative = 1,  numel = 50015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.36e+02  1.00e+00  1.00e+00   ------   
  1  +5.8817e-01  +5.2537e+03  5.25e+03  4.08e-01  1.48e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3830e-01  +6.5389e+02  6.53e+02  1.62e-01  7.52e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6880e+02  1.68e+02  1.43e-01  6.66e+01  3.48e-05  2.47e-01  1.52e-01  
  4  +5.0105e-01  +1.3665e+01  1.32e+01  3.74e-02  1.70e+01  4.18e-06  1.95e-01  4.46e-01  
  5  +5.0000e-01  +1.0060e+00  5.06e-01  1.52e-03  7.16e-01  2.45e-05  1.87e-01  3.40e-01  
  6  +5.0000e-01  +5.4455e-01  4.45e-02  1.33e-04  6.29e-02  1.91e-06  1.72e-02  9.09e-01  
  7  +5.0000e-01  +5.2311e-01  2.31e-02  6.89e-05  3.26e-02  1.92e-06  4.48e-03  8.28e-01  
  8  +4.9992e-01  +5.3546e-01  3.55e-02  5.82e-05  2.76e-02  4.39e-05  2.46e-04  9.79e-01  
  9  +4.9798e-01  +5.2905e-01  3.11e-02  2.63e-06  1.25e-03  1.07e-03  8.34e-06  9.66e-01  
 10  +4.9606e-01  +5.1306e-01  1.70e-02  8.82e-07  4.19e-04  8.59e-04  2.82e-06  7.19e-01  
 11  +4.9444e-01  +4.9872e-01  4.27e-03  2.09e-07  9.93e-05  9.75e-05  7.03e-07  8.22e-01  
 12  +4.9352e-01  +4.9423e-01  7.17e-04  3.02e-08  1.43e-05  1.00e-06  1.17e-07  9.80e-01  
 13  +4.9327e-01  +4.9329e-01  1.98e-05  7.99e-10  3.79e-07  9.98e-09  3.25e-09  9.90e-01  
 14  +4.9326e-01  +4.9326e-01  1.98e-07  7.98e-12  3.79e-09  9.98e-11  3.25e-11  9.90e-01  
 15  +4.9326e-01  +4.9326e-01  2.03e-09  8.20e-14  3.89e-11  2.42e-12  7.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 373.8348ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:31 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:31 PM: Optimal value: 4.933e-01
(CVXPY) Sep 20 07:41:31 PM: Compilation took 1.310e-01 seconds
(CVXPY) Sep 20 07:41:31 PM: Solver (including time spent in interface) took 4.108e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4933
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:31 PM: Your problem has 25025 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:31 PM: Finished problem compilation (took 1.460e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25025
  constraints   = 50025
  nnz(P)        = 0
  nnz(A)        = 268125
  cones (total) = 1
    : Nonnegative = 1,  numel = 50025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.39e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2538e+03  5.25e+03  4.08e-01  1.50e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3829e-01  +6.5376e+02  6.53e+02  1.62e-01  7.60e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1023e-01  +1.6875e+02  1.68e+02  1.43e-01  6.73e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3651e+01  1.32e+01  3.74e-02  1.72e+01  4.19e-06  1.95e-01  4.46e-01  
  5  +5.0002e-01  +1.3323e+00  8.32e-01  2.50e-03  1.19e+00  2.43e-05  1.90e-01  2.11e-01  
  6  +5.0001e-01  +6.1099e-01  1.11e-01  3.31e-04  1.58e-01  1.98e-06  3.74e-02  8.20e-01  
  7  +5.0000e-01  +5.8806e-01  8.81e-02  2.63e-04  1.26e-01  1.55e-06  2.72e-02  3.64e-01  
  8  +5.0000e-01  +5.8852e-01  8.85e-02  2.64e-04  1.26e-01  1.52e-06  2.72e-02  2.49e-02  
  9  +5.0000e-01  +5.5357e-01  5.36e-02  1.60e-04  7.64e-02  1.15e-06  1.22e-02  6.24e-01  
 10  +5.0000e-01  +5.3533e-01  3.53e-02  1.03e-04  4.91e-02  3.68e-06  1.59e-03  9.36e-01  
 11  +4.9952e-01  +5.3852e-01  3.90e-02  7.35e-06  3.52e-03  2.56e-04  2.41e-05  9.86e-01  
 12  +4.9782e-01  +5.3253e-01  3.47e-02  1.75e-06  8.40e-04  8.79e-04  5.69e-06  7.75e-01  
 13  +4.9745e-01  +5.3038e-01  3.29e-02  1.65e-06  7.91e-04  7.75e-04  5.39e-06  1.01e-01  
 14  +4.9700e-01  +5.2737e-01  3.04e-02  1.52e-06  7.28e-04  5.94e-04  5.00e-06  1.84e-01  
 15  +4.9680e-01  +5.2576e-01  2.90e-02  1.50e-06  7.19e-04  4.95e-04  4.98e-06  7.41e-02  
 16  +4.9654e-01  +5.2292e-01  2.64e-02  1.43e-06  6.85e-04  2.38e-04  4.80e-06  3.60e-01  
 17  +4.9585e-01  +5.1945e-01  2.36e-02  1.24e-06  5.95e-04  1.88e-04  4.23e-06  1.91e-01  
 18  +4.9578e-01  +5.1887e-01  2.31e-02  1.23e-06  5.90e-04  1.60e-04  4.21e-06  1.00e-01  
 19  +4.9448e-01  +5.1271e-01  1.82e-02  9.14e-07  4.38e-04  1.06e-04  3.21e-06  3.26e-01  
 20  +4.9441e-01  +5.1217e-01  1.78e-02  8.90e-07  4.27e-04  8.31e-05  3.13e-06  1.83e-01  
 21  +4.9185e-01  +5.0043e-01  8.58e-03  3.86e-07  1.85e-04  8.83e-07  1.43e-06  9.01e-01  
 22  +4.8961e-01  +4.9109e-01  1.48e-03  6.24e-08  2.99e-05  9.19e-08  2.50e-07  8.56e-01  
 23  +4.8925e-01  +4.8969e-01  4.40e-04  1.83e-08  8.78e-06  6.88e-09  7.59e-08  9.69e-01  
 24  +4.8911e-01  +4.8912e-01  1.78e-05  7.39e-10  3.54e-07  2.54e-10  3.10e-09  9.67e-01  
 25  +4.8910e-01  +4.8910e-01  1.80e-07  7.48e-12  3.59e-09  2.56e-12  3.14e-11  9.90e-01  
 26  +4.8910e-01  +4.8910e-01  1.80e-09  7.48e-14  3.59e-11  2.75e-14  3.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 732.2051ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:32 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:32 PM: Optimal value: 4.891e-01
(CVXPY) Sep 20 07:41:32 PM: Compilation took 1.460e-01 seconds
(CVXPY) Sep 20 07:41:32 PM: Solver (including time spent in interface) took 7.740e-01 seconds
Iteration: 2, Objective: 0.4891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:32 PM: Your problem has 25035 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:32 PM: Finished problem compilation (took 1.562e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25035
  constraints   = 50035
  nnz(P)        = 0
  nnz(A)        = 287780
  cones (total) = 1
    : Nonnegative = 1,  numel = 50035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.41e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2540e+03  5.25e+03  4.08e-01  1.51e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3828e-01  +6.5366e+02  6.53e+02  1.62e-01  7.66e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1023e-01  +1.6873e+02  1.68e+02  1.43e-01  6.78e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0104e-01  +1.3651e+01  1.32e+01  3.74e-02  1.73e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3327e+00  8.33e-01  2.50e-03  1.20e+00  2.44e-05  1.90e-01  2.13e-01  
  6  +5.0001e-01  +7.3911e-01  2.39e-01  7.14e-04  3.44e-01  5.91e-06  7.37e-02  6.44e-01  
  7  +5.0001e-01  +6.4004e-01  1.40e-01  4.18e-04  2.01e-01  2.69e-06  4.13e-02  7.16e-01  
  8  +5.0000e-01  +5.9946e-01  9.95e-02  2.97e-04  1.43e-01  2.14e-06  2.56e-02  4.08e-01  
  9  +5.0001e-01  +6.2924e-01  1.29e-01  3.85e-04  1.86e-01  8.68e-07  2.24e-02  8.75e-01  
 10  +5.0001e-01  +5.9086e-01  9.09e-02  2.70e-04  1.30e-01  6.54e-07  9.90e-03  7.41e-01  
 11  +5.0000e-01  +5.5728e-01  5.73e-02  1.47e-04  7.10e-02  2.34e-06  1.08e-03  9.90e-01  
 12  +4.9980e-01  +5.5708e-01  5.73e-02  6.72e-06  3.25e-03  1.10e-04  2.22e-05  9.80e-01  
 13  +4.9930e-01  +5.5238e-01  5.31e-02  3.10e-06  1.50e-03  1.94e-04  1.02e-05  6.17e-01  
 14  +4.9842e-01  +5.4625e-01  4.78e-02  3.00e-06  1.45e-03  1.42e-04  9.99e-06  9.46e-02  
 15  +4.9815e-01  +5.4377e-01  4.56e-02  2.93e-06  1.42e-03  1.08e-04  9.80e-06  1.54e-01  
 16  +4.9759e-01  +5.3938e-01  4.18e-02  2.75e-06  1.33e-03  6.56e-05  9.30e-06  2.73e-01  
 17  +4.9640e-01  +5.3182e-01  3.54e-02  2.14e-06  1.04e-03  2.93e-05  7.38e-06  5.24e-01  
 18  +4.9613e-01  +5.3058e-01  3.45e-02  2.14e-06  1.03e-03  2.67e-05  7.37e-06  2.84e-02  
 19  +4.9602e-01  +5.2995e-01  3.39e-02  2.10e-06  1.02e-03  2.43e-05  7.24e-06  7.80e-02  
 20  +4.9545e-01  +5.2700e-01  3.15e-02  1.89e-06  9.14e-04  1.97e-05  6.55e-06  1.93e-01  
 21  +4.9472e-01  +5.2242e-01  2.77e-02  1.59e-06  7.69e-04  2.05e-07  5.52e-06  8.36e-01  
 22  +4.9079e-01  +5.0412e-01  1.33e-02  6.37e-07  3.08e-04  9.67e-08  2.27e-06  7.15e-01  
 23  +4.8837e-01  +4.9290e-01  4.53e-03  2.00e-07  9.66e-05  3.61e-08  7.10e-07  7.88e-01  
 24  +4.8762e-01  +4.8969e-01  2.08e-03  7.70e-08  3.72e-05  2.46e-08  2.54e-07  8.25e-01  
 25  +4.8716e-01  +4.8858e-01  1.42e-03  4.82e-08  2.33e-05  1.54e-08  1.59e-07  6.70e-01  
 26  +4.8669e-01  +4.8684e-01  1.58e-04  5.23e-09  2.53e-06  1.97e-09  1.73e-08  9.79e-01  
 27  +4.8662e-01  +4.8662e-01  1.65e-06  5.42e-11  2.62e-08  2.02e-11  1.80e-10  9.90e-01  
 28  +4.8662e-01  +4.8662e-01  1.65e-08  5.42e-13  2.62e-10  2.02e-13  1.80e-12  9.90e-01  
 29  +4.8662e-01  +4.8662e-01  1.67e-10  5.50e-15  2.65e-12  3.25e-15  2.84e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 821.0126ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:33 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:33 PM: Optimal value: 4.866e-01
(CVXPY) Sep 20 07:41:33 PM: Compilation took 1.562e-01 seconds
(CVXPY) Sep 20 07:41:33 PM: Solver (including time spent in interface) took 8.611e-01 seconds
Iteration: 3, Objective: 0.4866
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:33 PM: Your problem has 25045 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:33 PM: Finished problem compilation (took 1.683e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25045
  constraints   = 50045
  nnz(P)        = 0
  nnz(A)        = 321910
  cones (total) = 1
    : Nonnegative = 1,  numel = 50045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.47e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2544e+03  5.25e+03  4.08e-01  1.54e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5344e+02  6.53e+02  1.62e-01  7.84e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6867e+02  1.68e+02  1.43e-01  6.94e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3658e+01  1.32e+01  3.74e-02  1.78e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3272e+00  8.27e-01  2.48e-03  1.22e+00  2.45e-05  1.90e-01  2.15e-01  
  6  +5.0001e-01  +8.2264e-01  3.23e-01  9.64e-04  4.75e-01  8.44e-06  9.41e-02  5.63e-01  
  7  +5.0001e-01  +6.3503e-01  1.35e-01  4.03e-04  1.99e-01  2.24e-06  4.00e-02  9.29e-01  
  8  +5.0001e-01  +6.1601e-01  1.16e-01  3.46e-04  1.71e-01  1.92e-06  3.08e-02  3.14e-01  
  9  +5.0001e-01  +6.2494e-01  1.25e-01  3.72e-04  1.84e-01  9.37e-07  2.26e-02  8.56e-01  
 10  +5.0001e-01  +6.0086e-01  1.01e-01  3.00e-04  1.48e-01  1.43e-07  1.27e-02  9.90e-01  
 11  +5.0000e-01  +5.5807e-01  5.81e-02  1.61e-04  7.95e-02  4.34e-07  1.58e-03  9.05e-01  
 12  +4.9996e-01  +5.5905e-01  5.91e-02  8.31e-06  4.12e-03  2.48e-05  2.71e-05  9.84e-01  
 13  +4.9984e-01  +5.5699e-01  5.71e-02  3.34e-06  1.65e-03  5.65e-05  1.08e-05  6.45e-01  
 14  +4.9952e-01  +5.5472e-01  5.52e-02  3.33e-06  1.65e-03  5.21e-05  1.08e-05  1.06e-02  
 15  +4.9962e-01  +5.5492e-01  5.53e-02  3.35e-06  1.66e-03  5.12e-05  1.08e-05  1.83e-02  
 16  +4.9932e-01  +5.5248e-01  5.32e-02  3.29e-06  1.63e-03  4.49e-05  1.06e-05  6.93e-02  
 17  +4.9912e-01  +5.5097e-01  5.18e-02  3.20e-06  1.59e-03  4.17e-05  1.03e-05  6.41e-02  
 18  +4.9862e-01  +5.4667e-01  4.81e-02  3.11e-06  1.54e-03  2.89e-05  1.01e-05  1.86e-01  
 19  +4.9840e-01  +5.4489e-01  4.65e-02  2.94e-06  1.46e-03  2.45e-05  9.54e-06  1.66e-01  
 20  +4.9824e-01  +5.4390e-01  4.57e-02  2.94e-06  1.45e-03  2.28e-05  9.53e-06  3.09e-02  
 21  +4.9742e-01  +5.3857e-01  4.11e-02  2.54e-06  1.26e-03  1.41e-05  8.24e-06  3.74e-01  
 22  +4.9730e-01  +5.3741e-01  4.01e-02  2.46e-06  1.22e-03  8.19e-06  7.97e-06  3.59e-01  
 23  +4.9669e-01  +5.3433e-01  3.76e-02  2.19e-06  1.09e-03  6.88e-06  7.10e-06  2.10e-01  
 24  +4.9585e-01  +5.3116e-01  3.53e-02  2.05e-06  1.01e-03  3.27e-06  6.91e-06  3.90e-01  
 25  +4.9337e-01  +5.1907e-01  2.57e-02  1.33e-06  6.58e-04  1.45e-06  4.47e-06  5.91e-01  
 26  +4.9127e-01  +5.1025e-01  1.90e-02  8.87e-07  4.39e-04  9.82e-07  2.99e-06  4.06e-01  
 27  +4.9116e-01  +5.0967e-01  1.85e-02  8.32e-07  4.12e-04  5.56e-07  2.80e-06  4.98e-01  
 28  +4.9036e-01  +5.0645e-01  1.61e-02  6.98e-07  3.46e-04  3.90e-07  2.36e-06  3.74e-01  
 29  +4.8834e-01  +4.9837e-01  1.00e-02  4.02e-07  1.99e-04  1.33e-07  1.38e-06  8.33e-01  
 30  +4.8645e-01  +4.9117e-01  4.72e-03  1.81e-07  8.98e-05  6.05e-08  6.41e-07  5.77e-01  
 31  +4.8503e-01  +4.8581e-01  7.78e-04  2.90e-08  1.43e-05  8.81e-09  1.06e-07  9.88e-01  
 32  +4.8473e-01  +4.8476e-01  2.78e-05  1.03e-09  5.11e-07  2.85e-10  3.85e-09  9.67e-01  
 33  +4.8472e-01  +4.8472e-01  2.78e-07  1.03e-11  5.11e-09  2.84e-12  3.87e-11  9.90e-01  
 34  +4.8472e-01  +4.8472e-01  2.78e-09  1.03e-13  5.11e-11  2.84e-14  3.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1028546s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:34 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:34 PM: Optimal value: 4.847e-01
(CVXPY) Sep 20 07:41:34 PM: Compilation took 1.683e-01 seconds
(CVXPY) Sep 20 07:41:34 PM: Solver (including time spent in interface) took 1.148e+00 seconds
Iteration: 4, Objective: 0.4847
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:35 PM: Your problem has 25055 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:35 PM: Finished problem compilation (took 1.854e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25055
  constraints   = 50055
  nnz(P)        = 0
  nnz(A)        = 331744
  cones (total) = 1
    : Nonnegative = 1,  numel = 50055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.47e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +5.2544e+03  5.25e+03  4.08e-01  1.55e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5339e+02  6.53e+02  1.62e-01  7.86e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6865e+02  1.68e+02  1.43e-01  6.95e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3657e+01  1.32e+01  3.74e-02  1.78e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3357e+00  8.36e-01  2.51e-03  1.24e+00  2.45e-05  1.90e-01  2.14e-01  
  6  +5.0001e-01  +8.0816e-01  3.08e-01  9.20e-04  4.55e-01  7.64e-06  8.94e-02  6.46e-01  
  7  +5.0001e-01  +6.9608e-01  1.96e-01  5.85e-04  2.89e-01  3.76e-06  5.56e-02  6.95e-01  
  8  +5.0001e-01  +6.2229e-01  1.22e-01  3.65e-04  1.80e-01  2.16e-06  3.11e-02  6.25e-01  
  9  +5.0000e-01  +6.0238e-01  1.02e-01  3.05e-04  1.51e-01  1.99e-06  2.04e-02  4.22e-01  
 10  +5.0000e-01  +5.8494e-01  8.49e-02  2.52e-04  1.25e-01  1.93e-06  7.52e-03  9.06e-01  
 11  +4.9997e-01  +5.6312e-01  6.31e-02  1.13e-04  5.58e-02  1.62e-05  5.13e-04  9.65e-01  
 12  +4.9933e-01  +5.6061e-01  6.13e-02  6.85e-06  3.40e-03  3.53e-04  2.24e-05  9.56e-01  
 13  +4.9885e-01  +5.5341e-01  5.46e-02  4.64e-06  2.30e-03  3.32e-04  1.50e-05  5.03e-01  
 14  +4.9879e-01  +5.5103e-01  5.22e-02  4.47e-06  2.22e-03  2.46e-04  1.45e-05  2.19e-01  
 15  +4.9877e-01  +5.5051e-01  5.17e-02  4.45e-06  2.21e-03  2.29e-04  1.44e-05  5.25e-02  
 16  +4.9856e-01  +5.4850e-01  4.99e-02  4.03e-06  2.00e-03  2.00e-04  1.30e-05  2.21e-01  
 17  +4.9853e-01  +5.4751e-01  4.90e-02  3.97e-06  1.97e-03  1.63e-04  1.28e-05  1.52e-01  
 18  +4.9838e-01  +5.4628e-01  4.79e-02  3.71e-06  1.84e-03  1.40e-04  1.19e-05  1.98e-01  
 19  +4.9801e-01  +5.4356e-01  4.56e-02  3.34e-06  1.65e-03  1.11e-04  1.07e-05  2.60e-01  
 20  +4.9771e-01  +5.4122e-01  4.35e-02  3.13e-06  1.55e-03  7.71e-05  1.01e-05  2.85e-01  
 21  +4.9589e-01  +5.3188e-01  3.60e-02  2.09e-06  1.04e-03  5.73e-05  6.72e-06  4.90e-01  
 22  +4.9520e-01  +5.2878e-01  3.36e-02  1.81e-06  8.98e-04  4.47e-05  5.83e-06  2.78e-01  
 23  +4.9467e-01  +5.2719e-01  3.25e-02  1.57e-06  7.81e-04  3.93e-06  5.02e-06  8.31e-01  
 24  +4.9155e-01  +5.1350e-01  2.19e-02  9.93e-07  4.92e-04  2.00e-06  3.22e-06  4.67e-01  
 25  +4.9097e-01  +5.1020e-01  1.92e-02  8.35e-07  4.14e-04  6.82e-07  2.73e-06  6.59e-01  
 26  +4.8857e-01  +5.0067e-01  1.21e-02  4.95e-07  2.45e-04  3.48e-07  1.64e-06  5.28e-01  
 27  +4.8806e-01  +4.9872e-01  1.07e-02  4.26e-07  2.11e-04  2.78e-07  1.42e-06  2.62e-01  
 28  +4.8805e-01  +4.9861e-01  1.06e-02  4.23e-07  2.10e-04  2.57e-07  1.41e-06  1.19e-01  
 29  +4.8776e-01  +4.9749e-01  9.73e-03  3.85e-07  1.91e-04  2.19e-07  1.29e-06  2.15e-01  
 30  +4.8586e-01  +4.9030e-01  4.43e-03  1.68e-07  8.34e-05  7.95e-08  5.73e-07  7.24e-01  
 31  +4.8563e-01  +4.8940e-01  3.77e-03  1.42e-07  7.06e-05  6.51e-08  4.87e-07  2.53e-01  
 32  +4.8502e-01  +4.8706e-01  2.04e-03  7.56e-08  3.75e-05  2.59e-08  2.62e-07  9.90e-01  
 33  +4.8441e-01  +4.8492e-01  5.09e-04  1.85e-08  9.17e-06  6.45e-09  6.54e-08  8.11e-01  
 34  +4.8426e-01  +4.8441e-01  1.45e-04  5.20e-09  2.58e-06  1.81e-09  1.86e-08  9.90e-01  
 35  +4.8420e-01  +4.8420e-01  3.52e-06  1.26e-10  6.23e-08  4.38e-11  4.53e-10  9.77e-01  
 36  +4.8420e-01  +4.8420e-01  3.52e-08  1.26e-12  6.23e-10  4.39e-13  4.53e-12  9.90e-01  
 37  +4.8420e-01  +4.8420e-01  3.57e-10  1.28e-14  6.33e-12  7.90e-15  7.92e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1655937s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:36 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:36 PM: Optimal value: 4.842e-01
(CVXPY) Sep 20 07:41:36 PM: Compilation took 1.854e-01 seconds
(CVXPY) Sep 20 07:41:36 PM: Solver (including time spent in interface) took 1.212e+00 seconds
Iteration: 5, Objective: 0.4842
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:36 PM: Your problem has 25065 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:36 PM: Finished problem compilation (took 1.781e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25065
  constraints   = 50065
  nnz(P)        = 0
  nnz(A)        = 342607
  cones (total) = 1
    : Nonnegative = 1,  numel = 50065

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.48e+02  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2547e+03  5.25e+03  4.08e-01  1.55e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3823e-01  +6.5323e+02  6.53e+02  1.62e-01  7.87e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1022e-01  +1.6862e+02  1.68e+02  1.43e-01  6.96e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3665e+01  1.32e+01  3.74e-02  1.78e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3493e+00  8.49e-01  2.55e-03  1.26e+00  2.45e-05  1.90e-01  2.10e-01  
  6  +5.0001e-01  +8.2137e-01  3.21e-01  9.60e-04  4.76e-01  8.26e-06  9.31e-02  5.54e-01  
  7  +5.0001e-01  +6.9761e-01  1.98e-01  5.90e-04  2.92e-01  4.36e-06  5.75e-02  5.97e-01  
  8  +5.0000e-01  +6.2642e-01  1.26e-01  3.77e-04  1.87e-01  2.79e-06  3.36e-02  5.27e-01  
  9  +5.0001e-01  +6.1299e-01  1.13e-01  3.37e-04  1.67e-01  1.97e-06  2.06e-02  7.14e-01  
 10  +5.0000e-01  +5.7303e-01  7.30e-02  2.16e-04  1.07e-01  2.83e-06  5.33e-03  8.23e-01  
 11  +4.9999e-01  +5.6629e-01  6.63e-02  1.61e-04  7.97e-02  9.18e-06  1.02e-03  9.90e-01  
 12  +4.9942e-01  +5.6428e-01  6.49e-02  8.78e-06  4.37e-03  3.09e-04  2.87e-05  9.72e-01  
 13  +4.9900e-01  +5.5992e-01  6.09e-02  5.72e-06  2.84e-03  3.86e-04  1.85e-05  4.31e-01  
 14  +4.9879e-01  +5.5725e-01  5.85e-02  5.04e-06  2.51e-03  3.62e-04  1.63e-05  2.06e-01  
 15  +4.9876e-01  +5.5340e-01  5.46e-02  4.79e-06  2.38e-03  2.25e-04  1.54e-05  3.20e-01  
 16  +4.9851e-01  +5.4808e-01  4.96e-02  4.12e-06  2.05e-03  9.21e-05  1.32e-05  5.95e-01  
 17  +4.9819e-01  +5.4624e-01  4.80e-02  3.58e-06  1.78e-03  8.51e-05  1.15e-05  2.41e-01  
 18  +4.9807e-01  +5.4557e-01  4.75e-02  3.57e-06  1.78e-03  7.96e-05  1.14e-05  3.91e-02  
 19  +4.9767e-01  +5.4356e-01  4.59e-02  3.12e-06  1.55e-03  7.52e-05  1.00e-05  2.05e-01  
 20  +4.9759e-01  +5.4322e-01  4.56e-02  3.12e-06  1.55e-03  7.29e-05  9.99e-06  1.73e-02  
 21  +4.9747e-01  +5.4265e-01  4.52e-02  3.05e-06  1.52e-03  6.77e-05  9.77e-06  7.97e-02  
 22  +4.9650e-01  +5.3845e-01  4.19e-02  2.51e-06  1.25e-03  6.11e-05  8.08e-06  2.56e-01  
 23  +4.9599e-01  +5.3569e-01  3.97e-02  2.35e-06  1.17e-03  2.96e-05  7.59e-06  4.30e-01  
 24  +4.9384e-01  +5.2680e-01  3.30e-02  1.69e-06  8.42e-04  2.38e-05  5.53e-06  3.36e-01  
 25  +4.9131e-01  +5.1585e-01  2.45e-02  1.14e-06  5.68e-04  2.87e-06  3.78e-06  7.88e-01  
 26  +4.8916e-01  +5.0710e-01  1.79e-02  7.59e-07  3.77e-04  3.13e-08  2.53e-06  9.45e-01  
 27  +4.8427e-01  +4.8851e-01  4.24e-03  1.61e-07  7.99e-05  3.66e-08  5.50e-07  9.45e-01  
 28  +4.8366e-01  +4.8653e-01  2.87e-03  1.02e-07  5.06e-05  2.75e-08  3.49e-07  4.54e-01  
 29  +4.8362e-01  +4.8639e-01  2.77e-03  9.82e-08  4.88e-05  2.77e-08  3.36e-07  1.61e-01  
 30  +4.8337e-01  +4.8553e-01  2.16e-03  7.62e-08  3.79e-05  2.34e-08  2.62e-07  4.54e-01  
 31  +4.8334e-01  +4.8541e-01  2.08e-03  7.32e-08  3.64e-05  2.29e-08  2.52e-07  1.16e-01  
 32  +4.8327e-01  +4.8516e-01  1.89e-03  6.65e-08  3.30e-05  2.27e-08  2.28e-07  5.41e-01  
 33  +4.8259e-01  +4.8288e-01  2.95e-04  1.02e-08  5.07e-06  3.75e-09  3.54e-08  9.90e-01  
 34  +4.8247e-01  +4.8248e-01  1.41e-05  4.87e-10  2.42e-07  1.86e-10  1.69e-09  9.90e-01  
 35  +4.8246e-01  +4.8246e-01  1.43e-07  4.93e-12  2.45e-09  1.88e-12  1.72e-11  9.90e-01  
 36  +4.8246e-01  +4.8246e-01  1.43e-09  4.95e-14  2.46e-11  2.17e-14  1.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1855753s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:38 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:38 PM: Optimal value: 4.825e-01
(CVXPY) Sep 20 07:41:38 PM: Compilation took 1.781e-01 seconds
(CVXPY) Sep 20 07:41:38 PM: Solver (including time spent in interface) took 1.233e+00 seconds
Iteration: 6, Objective: 0.4825
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:38 PM: Your problem has 25075 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:38 PM: Finished problem compilation (took 1.948e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25075
  constraints   = 50075
  nnz(P)        = 0
  nnz(A)        = 354727
  cones (total) = 1
    : Nonnegative = 1,  numel = 50075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.48e+02  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2547e+03  5.25e+03  4.08e-01  1.55e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3823e-01  +6.5316e+02  6.53e+02  1.62e-01  7.89e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6859e+02  1.68e+02  1.43e-01  6.98e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3663e+01  1.32e+01  3.74e-02  1.79e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3475e+00  8.47e-01  2.54e-03  1.26e+00  2.45e-05  1.90e-01  2.11e-01  
  6  +5.0001e-01  +8.1186e-01  3.12e-01  9.32e-04  4.63e-01  7.95e-06  9.05e-02  5.82e-01  
  7  +5.0001e-01  +7.3574e-01  2.36e-01  7.04e-04  3.50e-01  5.59e-06  6.82e-02  3.82e-01  
  8  +5.0001e-01  +6.5488e-01  1.55e-01  4.62e-04  2.30e-01  3.47e-06  4.24e-02  5.17e-01  
  9  +5.0000e-01  +6.0092e-01  1.01e-01  3.01e-04  1.50e-01  2.48e-06  2.12e-02  6.27e-01  
 10  +5.0000e-01  +5.9328e-01  9.33e-02  2.78e-04  1.38e-01  2.93e-06  1.06e-02  6.56e-01  
 11  +5.0001e-01  +5.8649e-01  8.65e-02  2.56e-04  1.27e-01  3.67e-07  7.03e-03  9.90e-01  
 12  +5.0000e-01  +5.7710e-01  7.71e-02  1.47e-04  7.30e-02  2.76e-06  6.86e-04  9.20e-01  
 13  +4.9984e-01  +5.7614e-01  7.63e-02  6.55e-06  3.27e-03  8.76e-05  2.10e-05  9.70e-01  
 14  +4.9955e-01  +5.6909e-01  6.95e-02  4.63e-06  2.31e-03  9.10e-05  1.48e-05  4.17e-01  
 15  +4.9933e-01  +5.6589e-01  6.66e-02  4.38e-06  2.19e-03  7.97e-05  1.39e-05  1.37e-01  
 16  +4.9910e-01  +5.6201e-01  6.29e-02  4.09e-06  2.04e-03  6.31e-05  1.30e-05  2.14e-01  
 17  +4.9882e-01  +5.5805e-01  5.92e-02  3.83e-06  1.91e-03  4.64e-05  1.22e-05  2.48e-01  
 18  +4.9833e-01  +5.5421e-01  5.59e-02  3.48e-06  1.74e-03  3.76e-05  1.11e-05  2.26e-01  
 19  +4.9733e-01  +5.4607e-01  4.87e-02  3.18e-06  1.59e-03  1.16e-05  1.02e-05  5.26e-01  
 20  +4.9516e-01  +5.3586e-01  4.07e-02  2.26e-06  1.13e-03  8.86e-06  7.34e-06  4.04e-01  
 21  +4.9099e-01  +5.1772e-01  2.67e-02  1.27e-06  6.35e-04  4.90e-06  4.22e-06  5.17e-01  
 22  +4.9000e-01  +5.1335e-01  2.34e-02  1.04e-06  5.21e-04  2.17e-06  3.46e-06  5.60e-01  
 23  +4.8990e-01  +5.1296e-01  2.31e-02  1.03e-06  5.14e-04  1.86e-06  3.43e-06  1.32e-01  
 24  +4.8754e-01  +5.0343e-01  1.59e-02  6.70e-07  3.34e-04  9.45e-07  2.25e-06  5.09e-01  
 25  +4.8716e-01  +5.0174e-01  1.46e-02  5.74e-07  2.86e-04  3.16e-07  1.92e-06  8.04e-01  
 26  +4.8574e-01  +4.9631e-01  1.06e-02  4.05e-07  2.02e-04  1.91e-07  1.37e-06  5.27e-01  
 27  +4.8442e-01  +4.9136e-01  6.95e-03  2.59e-07  1.29e-04  1.17e-07  8.79e-07  4.97e-01  
 28  +4.8411e-01  +4.9015e-01  6.04e-03  2.22e-07  1.11e-04  9.03e-08  7.58e-07  5.04e-01  
 29  +4.8293e-01  +4.8594e-01  3.01e-03  1.08e-07  5.37e-05  4.36e-08  3.73e-07  6.08e-01  
 30  +4.8217e-01  +4.8319e-01  1.02e-03  3.61e-08  1.80e-05  1.31e-08  1.26e-07  9.90e-01  
 31  +4.8177e-01  +4.8184e-01  7.31e-05  2.56e-09  1.27e-06  9.30e-10  9.00e-09  9.42e-01  
 32  +4.8174e-01  +4.8174e-01  3.12e-06  1.09e-10  5.44e-08  4.03e-11  3.84e-10  9.86e-01  
 33  +4.8174e-01  +4.8174e-01  3.18e-08  1.11e-12  5.53e-10  4.10e-13  3.91e-12  9.90e-01  
 34  +4.8174e-01  +4.8174e-01  3.19e-10  1.12e-14  5.56e-12  4.95e-15  4.68e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0756263s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:39 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:39 PM: Optimal value: 4.817e-01
(CVXPY) Sep 20 07:41:39 PM: Compilation took 1.948e-01 seconds
(CVXPY) Sep 20 07:41:39 PM: Solver (including time spent in interface) took 1.123e+00 seconds
Iteration: 7, Objective: 0.4817
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:39 PM: Your problem has 25085 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:40 PM: Finished problem compilation (took 2.107e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25085
  constraints   = 50085
  nnz(P)        = 0
  nnz(A)        = 363974
  cones (total) = 1
    : Nonnegative = 1,  numel = 50085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2548e+03  5.25e+03  4.08e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3822e-01  +6.5310e+02  6.53e+02  1.62e-01  7.90e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6857e+02  1.68e+02  1.43e-01  6.99e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3665e+01  1.32e+01  3.74e-02  1.79e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3455e+00  8.45e-01  2.54e-03  1.26e+00  2.45e-05  1.90e-01  2.12e-01  
  6  +5.0001e-01  +7.8319e-01  2.83e-01  8.46e-04  4.21e-01  6.97e-06  8.31e-02  6.54e-01  
  7  +5.0001e-01  +7.1152e-01  2.12e-01  6.32e-04  3.15e-01  4.81e-06  6.07e-02  4.21e-01  
  8  +5.0001e-01  +6.4874e-01  1.49e-01  4.44e-04  2.21e-01  3.35e-06  3.91e-02  4.67e-01  
  9  +5.0000e-01  +6.1683e-01  1.17e-01  3.49e-04  1.74e-01  2.64e-06  2.28e-02  5.89e-01  
 10  +5.0000e-01  +6.0854e-01  1.09e-01  3.24e-04  1.61e-01  2.92e-06  1.55e-02  3.76e-01  
 11  +5.0000e-01  +6.0779e-01  1.08e-01  3.21e-04  1.60e-01  2.06e-06  1.33e-02  4.24e-01  
 12  +5.0000e-01  +6.0520e-01  1.05e-01  3.13e-04  1.56e-01  1.89e-06  1.08e-02  3.25e-01  
 13  +5.0001e-01  +5.9309e-01  9.31e-02  2.77e-04  1.38e-01  6.13e-08  9.32e-03  8.20e-01  
 14  +5.0001e-01  +5.8183e-01  8.18e-02  1.96e-04  9.76e-02  3.35e-07  1.19e-03  8.91e-01  
 15  +4.9998e-01  +5.8049e-01  8.05e-02  7.85e-06  3.92e-03  1.52e-05  2.51e-05  9.80e-01  
 16  +4.9991e-01  +5.7482e-01  7.49e-02  3.94e-06  1.97e-03  2.47e-05  1.25e-05  5.91e-01  
 17  +4.9960e-01  +5.7237e-01  7.28e-02  3.94e-06  1.97e-03  2.30e-05  1.25e-05  1.36e-02  
 18  +4.9919e-01  +5.6860e-01  6.94e-02  3.90e-06  1.95e-03  1.97e-05  1.24e-05  6.41e-02  
 19  +4.9858e-01  +5.6306e-01  6.45e-02  3.71e-06  1.85e-03  1.49e-05  1.18e-05  1.72e-01  
 20  +4.9814e-01  +5.5909e-01  6.09e-02  3.51e-06  1.75e-03  1.15e-05  1.12e-05  1.95e-01  
 21  +4.9715e-01  +5.5142e-01  5.43e-02  3.30e-06  1.65e-03  6.16e-06  1.06e-05  3.16e-01  
 22  +4.9423e-01  +5.3736e-01  4.31e-02  2.24e-06  1.12e-03  4.82e-06  7.32e-06  3.78e-01  
 23  +4.8979e-01  +5.1661e-01  2.68e-02  1.28e-06  6.38e-04  2.10e-06  4.30e-06  5.29e-01  
 24  +4.8835e-01  +5.0979e-01  2.14e-02  9.52e-07  4.76e-04  1.00e-06  3.21e-06  5.64e-01  
 25  +4.8826e-01  +5.0932e-01  2.11e-02  9.26e-07  4.62e-04  8.46e-07  3.12e-06  1.89e-01  
 26  +4.8720e-01  +5.0494e-01  1.77e-02  7.52e-07  3.76e-04  6.46e-07  2.55e-06  2.85e-01  
 27  +4.8702e-01  +5.0395e-01  1.69e-02  6.97e-07  3.48e-04  3.58e-07  2.36e-06  5.90e-01  
 28  +4.8498e-01  +4.9587e-01  1.09e-02  4.28e-07  2.14e-04  2.07e-07  1.47e-06  5.13e-01  
 29  +4.8490e-01  +4.9560e-01  1.07e-02  4.20e-07  2.10e-04  1.90e-07  1.44e-06  1.69e-01  
 30  +4.8364e-01  +4.9083e-01  7.19e-03  2.72e-07  1.36e-04  1.21e-07  9.43e-07  4.59e-01  
 31  +4.8321e-01  +4.8910e-01  5.89e-03  2.19e-07  1.10e-04  8.04e-08  7.63e-07  7.20e-01  
 32  +4.8191e-01  +4.8446e-01  2.55e-03  9.24e-08  4.61e-05  3.44e-08  3.27e-07  5.99e-01  
 33  +4.8160e-01  +4.8325e-01  1.65e-03  5.95e-08  2.97e-05  2.10e-08  2.11e-07  8.21e-01  
 34  +4.8095e-01  +4.8104e-01  8.17e-05  2.91e-09  1.45e-06  1.01e-09  1.05e-08  9.64e-01  
 35  +4.8093e-01  +4.8094e-01  1.31e-05  4.66e-10  2.33e-07  1.63e-10  1.68e-09  9.20e-01  
 36  +4.8092e-01  +4.8092e-01  1.36e-07  4.86e-12  2.42e-09  1.69e-12  1.74e-11  9.90e-01  
 37  +4.8092e-01  +4.8092e-01  1.37e-09  4.86e-14  2.43e-11  1.95e-14  2.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3503345s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:41 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:41 PM: Optimal value: 4.809e-01
(CVXPY) Sep 20 07:41:41 PM: Compilation took 2.107e-01 seconds
(CVXPY) Sep 20 07:41:41 PM: Solver (including time spent in interface) took 1.402e+00 seconds
Iteration: 8, Objective: 0.4809
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:41 PM: Your problem has 25095 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:41 PM: Finished problem compilation (took 2.186e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25095
  constraints   = 50095
  nnz(P)        = 0
  nnz(A)        = 370141
  cones (total) = 1
    : Nonnegative = 1,  numel = 50095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8811e-01  +5.2551e+03  5.25e+03  4.08e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3821e-01  +6.5300e+02  6.52e+02  1.63e-01  7.91e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6856e+02  1.68e+02  1.43e-01  7.00e+01  3.49e-05  2.47e-01  1.53e-01  
  4  +5.0105e-01  +1.3672e+01  1.32e+01  3.74e-02  1.79e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3460e+00  8.46e-01  2.54e-03  1.26e+00  2.45e-05  1.90e-01  2.12e-01  
  6  +5.0001e-01  +7.5965e-01  2.60e-01  7.76e-04  3.86e-01  6.27e-06  7.72e-02  6.82e-01  
  7  +5.0001e-01  +6.9897e-01  1.99e-01  5.94e-04  2.96e-01  4.16e-06  5.54e-02  5.14e-01  
  8  +5.0001e-01  +6.2849e-01  1.28e-01  3.84e-04  1.91e-01  2.80e-06  3.11e-02  5.52e-01  
  9  +5.0000e-01  +6.0187e-01  1.02e-01  3.03e-04  1.51e-01  2.64e-06  1.28e-02  8.19e-01  
 10  +5.0000e-01  +5.9796e-01  9.80e-02  2.88e-04  1.43e-01  3.76e-06  5.50e-03  7.56e-01  
 11  +4.9985e-01  +5.8475e-01  8.49e-02  5.32e-05  2.66e-02  8.31e-05  1.88e-04  9.73e-01  
 12  +4.9880e-01  +5.7983e-01  8.10e-02  7.46e-06  3.73e-03  5.92e-04  2.46e-05  8.70e-01  
 13  +4.9858e-01  +5.7232e-01  7.37e-02  6.06e-06  3.03e-03  4.82e-04  1.98e-05  3.63e-01  
 14  +4.9864e-01  +5.6855e-01  6.99e-02  5.92e-06  2.96e-03  3.51e-04  1.94e-05  2.02e-01  
 15  +4.9841e-01  +5.6581e-01  6.74e-02  5.27e-06  2.63e-03  3.24e-04  1.72e-05  2.08e-01  
 16  +4.9808e-01  +5.6163e-01  6.35e-02  4.56e-06  2.28e-03  2.57e-04  1.48e-05  3.19e-01  
 17  +4.9802e-01  +5.6108e-01  6.31e-02  4.55e-06  2.27e-03  2.46e-04  1.48e-05  2.42e-02  
 18  +4.9714e-01  +5.5516e-01  5.80e-02  3.76e-06  1.88e-03  1.95e-04  1.23e-05  3.30e-01  
 19  +4.9525e-01  +5.4559e-01  5.03e-02  2.88e-06  1.44e-03  1.66e-04  9.53e-06  2.89e-01  
 20  +4.9297e-01  +5.3439e-01  4.14e-02  2.21e-06  1.10e-03  1.22e-04  7.43e-06  2.88e-01  
 21  +4.8970e-01  +5.1757e-01  2.79e-02  1.38e-06  6.90e-04  2.18e-05  4.75e-06  7.18e-01  
 22  +4.8829e-01  +5.1099e-01  2.27e-02  1.04e-06  5.21e-04  7.79e-06  3.59e-06  6.35e-01  
 23  +4.8806e-01  +5.1010e-01  2.20e-02  1.00e-06  5.01e-04  5.70e-06  3.47e-06  2.47e-01  
 24  +4.8676e-01  +5.0443e-01  1.77e-02  7.65e-07  3.82e-04  1.74e-06  2.65e-06  7.01e-01  
 25  +4.8499e-01  +4.9723e-01  1.22e-02  5.09e-07  2.54e-04  1.13e-06  1.78e-06  3.78e-01  
 26  +4.8497e-01  +4.9716e-01  1.22e-02  5.07e-07  2.53e-04  1.08e-06  1.77e-06  3.91e-02  
 27  +4.8426e-01  +4.9440e-01  1.01e-02  4.13e-07  2.06e-04  7.56e-07  1.45e-06  3.30e-01  
 28  +4.8425e-01  +4.9435e-01  1.01e-02  4.11e-07  2.05e-04  7.15e-07  1.44e-06  6.34e-02  
 29  +4.8334e-01  +4.9082e-01  7.48e-03  2.97e-07  1.49e-04  4.85e-07  1.05e-06  3.43e-01  
 30  +4.8319e-01  +4.9010e-01  6.91e-03  2.68e-07  1.34e-04  2.17e-07  9.48e-07  6.68e-01  
 31  +4.8281e-01  +4.8863e-01  5.83e-03  2.25e-07  1.12e-04  1.27e-07  8.00e-07  5.52e-01  
 32  +4.8168e-01  +4.8444e-01  2.76e-03  1.04e-07  5.19e-05  5.12e-08  3.77e-07  6.76e-01  
 33  +4.8087e-01  +4.8145e-01  5.79e-04  2.15e-08  1.08e-05  6.73e-09  7.96e-08  9.90e-01  
 34  +4.8067e-01  +4.8076e-01  8.30e-05  3.08e-09  1.54e-06  9.58e-10  1.15e-08  8.72e-01  
 35  +4.8064e-01  +4.8065e-01  8.62e-06  3.19e-10  1.60e-07  9.96e-11  1.19e-09  9.39e-01  
 36  +4.8064e-01  +4.8064e-01  9.03e-08  3.34e-12  1.67e-09  1.04e-12  1.25e-11  9.90e-01  
 37  +4.8064e-01  +4.8064e-01  9.06e-10  3.36e-14  1.68e-11  1.25e-14  1.48e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3026277s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:43 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:43 PM: Optimal value: 4.806e-01
(CVXPY) Sep 20 07:41:43 PM: Compilation took 2.186e-01 seconds
(CVXPY) Sep 20 07:41:43 PM: Solver (including time spent in interface) took 1.353e+00 seconds
Iteration: 9, Objective: 0.4806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:43 PM: Your problem has 25105 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:43 PM: Finished problem compilation (took 2.237e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25105
  constraints   = 50105
  nnz(P)        = 0
  nnz(A)        = 377516
  cones (total) = 1
    : Nonnegative = 1,  numel = 50105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8810e-01  +5.2554e+03  5.25e+03  4.09e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3820e-01  +6.5292e+02  6.52e+02  1.63e-01  7.91e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6852e+02  1.68e+02  1.43e-01  7.00e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3676e+01  1.32e+01  3.75e-02  1.80e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3553e+00  8.55e-01  2.57e-03  1.28e+00  2.45e-05  1.90e-01  2.10e-01  
  6  +5.0001e-01  +7.3668e-01  2.37e-01  7.07e-04  3.53e-01  5.71e-06  7.15e-02  6.73e-01  
  7  +5.0001e-01  +6.8436e-01  1.84e-01  5.51e-04  2.75e-01  4.05e-06  5.13e-02  4.71e-01  
  8  +5.0001e-01  +6.4522e-01  1.45e-01  4.34e-04  2.16e-01  2.95e-06  3.23e-02  5.87e-01  
  9  +5.0000e-01  +6.2640e-01  1.26e-01  3.77e-04  1.88e-01  2.80e-06  1.83e-02  6.03e-01  
 10  +4.9999e-01  +5.9404e-01  9.40e-02  2.70e-04  1.35e-01  7.27e-06  3.52e-03  8.61e-01  
 11  +4.9947e-01  +5.8493e-01  8.55e-02  2.19e-05  1.10e-02  2.84e-04  7.54e-05  9.86e-01  
 12  +4.9876e-01  +5.7560e-01  7.68e-02  9.11e-06  4.56e-03  5.22e-04  3.07e-05  6.88e-01  
 13  +4.9877e-01  +5.7303e-01  7.43e-02  8.17e-06  4.09e-03  4.51e-04  2.73e-05  2.64e-01  
 14  +4.9886e-01  +5.6839e-01  6.95e-02  7.24e-06  3.62e-03  2.74e-04  2.40e-05  4.54e-01  
 15  +4.9862e-01  +5.6537e-01  6.67e-02  6.05e-06  3.03e-03  2.37e-04  1.99e-05  3.57e-01  
 16  +4.9840e-01  +5.6298e-01  6.46e-02  5.25e-06  2.63e-03  1.88e-04  1.72e-05  3.61e-01  
 17  +4.9819e-01  +5.6072e-01  6.25e-02  4.84e-06  2.43e-03  1.35e-04  1.59e-05  3.21e-01  
 18  +4.9777e-01  +5.5749e-01  5.97e-02  4.60e-06  2.30e-03  7.36e-05  1.52e-05  3.98e-01  
 19  +4.9536e-01  +5.4595e-01  5.06e-02  2.95e-06  1.48e-03  5.98e-05  9.87e-06  5.24e-01  
 20  +4.9319e-01  +5.3589e-01  4.27e-02  2.34e-06  1.17e-03  4.37e-05  7.95e-06  2.79e-01  
 21  +4.9158e-01  +5.2845e-01  3.69e-02  1.95e-06  9.73e-04  2.77e-05  6.70e-06  3.30e-01  
 22  +4.9110e-01  +5.2596e-01  3.49e-02  1.81e-06  9.04e-04  1.30e-05  6.23e-06  4.60e-01  
 23  +4.8923e-01  +5.1775e-01  2.85e-02  1.41e-06  7.03e-04  9.12e-06  4.91e-06  3.04e-01  
 24  +4.8901e-01  +5.1667e-01  2.77e-02  1.34e-06  6.71e-04  6.03e-06  4.68e-06  3.24e-01  
 25  +4.8565e-01  +5.0218e-01  1.65e-02  7.42e-07  3.71e-04  2.70e-06  2.64e-06  5.56e-01  
 26  +4.8371e-01  +4.9405e-01  1.03e-02  4.34e-07  2.17e-04  1.45e-06  1.54e-06  5.17e-01  
 27  +4.8358e-01  +4.9358e-01  1.00e-02  4.29e-07  2.15e-04  1.35e-06  1.54e-06  1.08e-02  
 28  +4.8217e-01  +4.8798e-01  5.81e-03  2.37e-07  1.19e-04  7.41e-07  8.54e-07  4.89e-01  
 29  +4.8079e-01  +4.8247e-01  1.69e-03  6.69e-08  3.35e-05  1.69e-07  2.44e-07  7.86e-01  
 30  +4.8064e-01  +4.8196e-01  1.31e-03  5.09e-08  2.55e-05  1.05e-07  1.86e-07  4.11e-01  
 31  +4.8064e-01  +4.8194e-01  1.30e-03  5.06e-08  2.53e-05  9.94e-08  1.85e-07  5.44e-02  
 32  +4.8040e-01  +4.8103e-01  6.34e-04  2.45e-08  1.23e-05  2.64e-08  9.06e-08  7.60e-01  
 33  +4.8024e-01  +4.8044e-01  2.03e-04  7.71e-09  3.86e-06  2.44e-09  2.89e-08  9.90e-01  
 34  +4.8016e-01  +4.8017e-01  5.66e-06  2.14e-10  1.07e-07  6.43e-11  8.12e-10  9.90e-01  
 35  +4.8016e-01  +4.8016e-01  5.74e-08  2.17e-12  1.08e-09  6.52e-13  8.23e-12  9.90e-01  
 36  +4.8016e-01  +4.8016e-01  5.74e-10  2.16e-14  1.08e-11  6.52e-15  8.23e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3499732s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:45 PM: Optimal value: 4.802e-01
(CVXPY) Sep 20 07:41:45 PM: Compilation took 2.237e-01 seconds
(CVXPY) Sep 20 07:41:45 PM: Solver (including time spent in interface) took 1.402e+00 seconds
Iteration: 10, Objective: 0.4802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:45 PM: Your problem has 25111 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:45 PM: Finished problem compilation (took 2.211e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25111
  constraints   = 50111
  nnz(P)        = 0
  nnz(A)        = 383859
  cones (total) = 1
    : Nonnegative = 1,  numel = 50111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8812e-01  +5.2552e+03  5.25e+03  4.09e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3820e-01  +6.5287e+02  6.52e+02  1.63e-01  7.92e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1021e-01  +1.6848e+02  1.68e+02  1.44e-01  7.01e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3670e+01  1.32e+01  3.74e-02  1.80e+01  4.20e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3532e+00  8.53e-01  2.56e-03  1.27e+00  2.45e-05  1.90e-01  2.11e-01  
  6  +5.0001e-01  +7.4851e-01  2.49e-01  7.43e-04  3.71e-01  6.08e-06  7.46e-02  6.57e-01  
  7  +5.0001e-01  +6.8518e-01  1.85e-01  5.53e-04  2.76e-01  4.08e-06  5.14e-02  5.13e-01  
  8  +5.0001e-01  +6.4684e-01  1.47e-01  4.38e-04  2.19e-01  3.03e-06  3.28e-02  5.65e-01  
  9  +5.0001e-01  +6.2941e-01  1.29e-01  3.86e-04  1.93e-01  2.81e-06  1.88e-02  6.18e-01  
 10  +5.0000e-01  +6.0455e-01  1.05e-01  3.05e-04  1.52e-01  5.49e-06  4.99e-03  8.28e-01  
 11  +4.9985e-01  +5.8238e-01  8.25e-02  6.12e-05  3.06e-02  8.19e-05  2.25e-04  9.90e-01  
 12  +4.9900e-01  +5.7823e-01  7.92e-02  1.02e-05  5.13e-03  4.98e-04  3.47e-05  8.48e-01  
 13  +4.9872e-01  +5.7437e-01  7.57e-02  8.15e-06  4.09e-03  5.05e-04  2.74e-05  3.11e-01  
 14  +4.9875e-01  +5.7289e-01  7.41e-02  7.97e-06  4.00e-03  4.45e-04  2.67e-05  1.18e-01  
 15  +4.9864e-01  +5.6695e-01  6.83e-02  6.69e-06  3.35e-03  2.78e-04  2.22e-05  4.93e-01  
 16  +4.9837e-01  +5.6497e-01  6.66e-02  5.78e-06  2.90e-03  2.74e-04  1.91e-05  2.19e-01  
 17  +4.9833e-01  +5.6371e-01  6.54e-02  5.57e-06  2.79e-03  2.21e-04  1.84e-05  2.08e-01  
 18  +4.9770e-01  +5.6013e-01  6.24e-02  4.50e-06  2.26e-03  2.15e-04  1.48e-05  2.93e-01  
 19  +4.9750e-01  +5.5901e-01  6.15e-02  4.44e-06  2.22e-03  1.92e-04  1.47e-05  8.60e-02  
 20  +4.9671e-01  +5.5409e-01  5.74e-02  3.93e-06  1.97e-03  1.31e-04  1.31e-05  3.36e-01  
 21  +4.9311e-01  +5.3656e-01  4.35e-02  2.33e-06  1.17e-03  7.50e-05  7.88e-06  6.14e-01  
 22  +4.9262e-01  +5.3419e-01  4.16e-02  2.21e-06  1.11e-03  6.36e-05  7.51e-06  1.29e-01  
 23  +4.9058e-01  +5.2469e-01  3.41e-02  1.73e-06  8.68e-04  3.92e-05  5.98e-06  3.54e-01  
 24  +4.8904e-01  +5.1761e-01  2.86e-02  1.39e-06  6.96e-04  2.37e-05  4.83e-06  3.80e-01  
 25  +4.8888e-01  +5.1658e-01  2.77e-02  1.32e-06  6.60e-04  1.35e-05  4.58e-06  4.10e-01  
 26  +4.8742e-01  +5.1020e-01  2.28e-02  1.04e-06  5.21e-04  7.34e-06  3.63e-06  4.49e-01  
 27  +4.8605e-01  +5.0428e-01  1.82e-02  7.72e-07  3.87e-04  1.46e-06  2.70e-06  8.08e-01  
 28  +4.8496e-01  +4.9992e-01  1.50e-02  6.09e-07  3.05e-04  9.45e-07  2.15e-06  4.01e-01  
 29  +4.8473e-01  +4.9904e-01  1.43e-02  5.86e-07  2.94e-04  7.25e-07  2.07e-06  2.38e-01  
 30  +4.8345e-01  +4.9395e-01  1.05e-02  4.19e-07  2.10e-04  4.48e-07  1.50e-06  4.20e-01  
 31  +4.8220e-01  +4.8906e-01  6.85e-03  2.68e-07  1.34e-04  2.42e-07  9.76e-07  4.91e-01  
 32  +4.8140e-01  +4.8572e-01  4.33e-03  1.67e-07  8.38e-05  7.57e-08  6.15e-07  8.37e-01  
 33  +4.8085e-01  +4.8360e-01  2.75e-03  1.06e-07  5.29e-05  3.16e-08  3.93e-07  9.90e-01  
 34  +4.7992e-01  +4.8023e-01  3.11e-04  1.19e-08  5.95e-06  3.39e-09  4.51e-08  9.54e-01  
 35  +4.7980e-01  +4.7981e-01  4.80e-06  1.83e-10  9.15e-08  5.06e-11  6.99e-10  9.86e-01  
 36  +4.7980e-01  +4.7980e-01  4.80e-08  1.83e-12  9.14e-10  5.06e-13  6.99e-12  9.90e-01  
 37  +4.7980e-01  +4.7980e-01  4.82e-10  1.83e-14  9.19e-12  6.47e-15  8.84e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2812182s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:46 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:46 PM: Optimal value: 4.798e-01
(CVXPY) Sep 20 07:41:46 PM: Compilation took 2.211e-01 seconds
(CVXPY) Sep 20 07:41:46 PM: Solver (including time spent in interface) took 1.333e+00 seconds
Iteration: 11, Objective: 0.4798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:46 PM: Your problem has 25120 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:46 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:47 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:47 PM: Finished problem compilation (took 2.153e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25120
  constraints   = 50120
  nnz(P)        = 0
  nnz(A)        = 389082
  cones (total) = 1
    : Nonnegative = 1,  numel = 50120

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8813e-01  +5.2553e+03  5.25e+03  4.09e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3818e-01  +6.5277e+02  6.52e+02  1.63e-01  7.92e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6841e+02  1.68e+02  1.44e-01  7.01e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3671e+01  1.32e+01  3.75e-02  1.80e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3501e+00  8.50e-01  2.55e-03  1.27e+00  2.45e-05  1.90e-01  2.12e-01  
  6  +5.0001e-01  +7.7017e-01  2.70e-01  8.08e-04  4.03e-01  6.78e-06  8.02e-02  6.23e-01  
  7  +5.0001e-01  +7.0817e-01  2.08e-01  6.22e-04  3.11e-01  4.75e-06  5.82e-02  4.57e-01  
  8  +5.0001e-01  +6.6226e-01  1.62e-01  4.85e-04  2.42e-01  3.61e-06  3.97e-02  4.60e-01  
  9  +5.0000e-01  +6.2425e-01  1.24e-01  3.71e-04  1.85e-01  2.97e-06  1.93e-02  7.25e-01  
 10  +5.0000e-01  +6.0418e-01  1.04e-01  3.02e-04  1.51e-01  6.49e-06  4.41e-03  9.08e-01  
 11  +4.9975e-01  +5.9431e-01  9.46e-02  4.79e-05  2.40e-02  1.37e-04  1.72e-04  9.72e-01  
 12  +4.9902e-01  +5.8627e-01  8.73e-02  1.26e-05  6.33e-03  4.65e-04  4.32e-05  7.79e-01  
 13  +4.9896e-01  +5.8255e-01  8.36e-02  1.12e-05  5.63e-03  4.25e-04  3.82e-05  2.21e-01  
 14  +4.9858e-01  +5.7794e-01  7.94e-02  8.64e-06  4.33e-03  4.54e-04  2.92e-05  3.10e-01  
 15  +4.9846e-01  +5.7218e-01  7.37e-02  7.11e-06  3.57e-03  3.46e-04  2.37e-05  4.14e-01  
 16  +4.9840e-01  +5.6943e-01  7.10e-02  6.44e-06  3.23e-03  2.78e-04  2.14e-05  2.81e-01  
 17  +4.9837e-01  +5.6698e-01  6.86e-02  5.93e-06  2.97e-03  2.07e-04  1.96e-05  3.09e-01  
 18  +4.9831e-01  +5.6370e-01  6.54e-02  5.44e-06  2.72e-03  1.10e-04  1.79e-05  4.73e-01  
 19  +4.9786e-01  +5.6060e-01  6.27e-02  4.73e-06  2.37e-03  6.46e-05  1.57e-05  4.94e-01  
 20  +4.9656e-01  +5.5410e-01  5.75e-02  3.74e-06  1.87e-03  6.00e-05  1.24e-05  2.82e-01  
 21  +4.9449e-01  +5.4363e-01  4.91e-02  2.91e-06  1.46e-03  3.58e-05  9.83e-06  4.26e-01  
 22  +4.9172e-01  +5.3073e-01  3.90e-02  2.09e-06  1.05e-03  2.39e-05  7.17e-06  3.74e-01  
 23  +4.9111e-01  +5.2789e-01  3.68e-02  1.92e-06  9.63e-04  1.82e-05  6.61e-06  2.28e-01  
 24  +4.9046e-01  +5.2472e-01  3.43e-02  1.74e-06  8.71e-04  1.03e-05  6.00e-06  3.99e-01  
 25  +4.8999e-01  +5.2267e-01  3.27e-02  1.63e-06  8.18e-04  9.07e-06  5.65e-06  1.18e-01  
 26  +4.8935e-01  +5.1977e-01  3.04e-02  1.48e-06  7.39e-04  6.05e-06  5.12e-06  3.24e-01  
 27  +4.8805e-01  +5.1423e-01  2.62e-02  1.22e-06  6.12e-04  4.76e-06  4.27e-06  2.30e-01  
 28  +4.8789e-01  +5.1361e-01  2.57e-02  1.20e-06  6.00e-04  3.75e-06  4.20e-06  1.92e-01  
 29  +4.8664e-01  +5.0832e-01  2.17e-02  9.77e-07  4.89e-04  2.65e-06  3.46e-06  3.04e-01  
 30  +4.8628e-01  +5.0662e-01  2.03e-02  8.83e-07  4.42e-04  1.30e-06  3.12e-06  5.44e-01  
 31  +4.8503e-01  +5.0146e-01  1.64e-02  6.92e-07  3.46e-04  7.61e-07  2.47e-06  4.54e-01  
 32  +4.8497e-01  +5.0118e-01  1.62e-02  6.86e-07  3.44e-04  6.88e-07  2.45e-06  1.02e-01  
 33  +4.8212e-01  +4.8971e-01  7.59e-03  3.07e-07  1.54e-04  2.36e-07  1.12e-06  6.89e-01  
 34  +4.8206e-01  +4.8944e-01  7.38e-03  2.99e-07  1.50e-04  2.05e-07  1.10e-06  1.63e-01  
 35  +4.8148e-01  +4.8717e-01  5.69e-03  2.28e-07  1.14e-04  1.51e-07  8.46e-07  2.95e-01  
 36  +4.8151e-01  +4.8725e-01  5.73e-03  2.28e-07  1.14e-04  1.45e-07  8.43e-07  9.54e-02  
 37  +4.8151e-01  +4.8723e-01  5.72e-03  2.28e-07  1.14e-04  1.44e-07  8.43e-07  4.63e-03  
 38  +4.8081e-01  +4.8452e-01  3.71e-03  1.47e-07  7.38e-05  6.53e-08  5.50e-07  6.73e-01  
 39  +4.8024e-01  +4.8235e-01  2.11e-03  8.30e-08  4.16e-05  3.59e-08  3.14e-07  4.77e-01  
 40  +4.8024e-01  +4.8234e-01  2.10e-03  8.24e-08  4.13e-05  3.53e-08  3.12e-07  3.84e-02  
 41  +4.8019e-01  +4.8215e-01  1.96e-03  7.67e-08  3.84e-05  3.09e-08  2.90e-07  2.30e-01  
 42  +4.8019e-01  +4.8214e-01  1.95e-03  7.65e-08  3.83e-05  3.06e-08  2.90e-07  2.42e-02  
 43  +4.8019e-01  +4.8210e-01  1.91e-03  7.48e-08  3.75e-05  2.76e-08  2.83e-07  2.88e-01  
 44  +4.7973e-01  +4.8039e-01  6.57e-04  2.55e-08  1.28e-05  7.26e-09  9.79e-08  9.90e-01  
 45  +4.7949e-01  +4.7951e-01  2.43e-05  9.38e-10  4.70e-07  2.59e-10  3.64e-09  9.84e-01  
 46  +4.7948e-01  +4.7948e-01  2.43e-07  9.41e-12  4.71e-09  2.60e-12  3.66e-11  9.90e-01  
 47  +4.7948e-01  +4.7948e-01  2.43e-09  9.41e-14  4.71e-11  2.60e-14  3.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7778344s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:48 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:48 PM: Optimal value: 4.795e-01
(CVXPY) Sep 20 07:41:48 PM: Compilation took 2.153e-01 seconds
(CVXPY) Sep 20 07:41:48 PM: Solver (including time spent in interface) took 1.831e+00 seconds
Iteration: 12, Objective: 0.4795
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:41:49 PM: Your problem has 25121 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:41:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:41:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:41:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:41:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:41:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:41:49 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:41:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:41:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:41:49 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:41:49 PM: Finished problem compilation (took 2.423e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25121
  constraints   = 50121
  nnz(P)        = 0
  nnz(A)        = 389507
  cones (total) = 1
    : Nonnegative = 1,  numel = 50121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.50e+02  1.00e+00  1.00e+00   ------   
  1  +5.8813e-01  +5.2553e+03  5.25e+03  4.09e-01  1.56e+02  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3818e-01  +6.5276e+02  6.52e+02  1.63e-01  7.92e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6841e+02  1.68e+02  1.44e-01  7.01e+01  3.49e-05  2.47e-01  1.54e-01  
  4  +5.0105e-01  +1.3670e+01  1.32e+01  3.75e-02  1.80e+01  4.19e-06  1.95e-01  4.47e-01  
  5  +5.0002e-01  +1.3502e+00  8.50e-01  2.55e-03  1.27e+00  2.45e-05  1.90e-01  2.12e-01  
  6  +5.0001e-01  +7.6466e-01  2.65e-01  7.91e-04  3.95e-01  6.61e-06  7.88e-02  6.31e-01  
  7  +5.0001e-01  +7.0554e-01  2.06e-01  6.14e-04  3.07e-01  4.63e-06  5.72e-02  4.69e-01  
  8  +5.0001e-01  +6.5985e-01  1.60e-01  4.78e-04  2.39e-01  3.55e-06  3.88e-02  4.54e-01  
  9  +5.0000e-01  +6.2544e-01  1.25e-01  3.74e-04  1.87e-01  3.02e-06  1.93e-02  7.05e-01  
 10  +5.0000e-01  +6.0357e-01  1.04e-01  3.00e-04  1.50e-01  6.59e-06  4.36e-03  9.07e-01  
 11  +4.9975e-01  +5.9334e-01  9.36e-02  4.84e-05  2.42e-02  1.35e-04  1.74e-04  9.72e-01  
 12  +4.9904e-01  +5.8587e-01  8.68e-02  1.30e-05  6.50e-03  4.57e-04  4.44e-05  7.74e-01  
 13  +4.9897e-01  +5.8230e-01  8.33e-02  1.15e-05  5.75e-03  4.23e-04  3.90e-05  2.22e-01  
 14  +4.9860e-01  +5.7774e-01  7.91e-02  8.75e-06  4.39e-03  4.57e-04  2.95e-05  3.15e-01  
 15  +4.9848e-01  +5.7286e-01  7.44e-02  7.36e-06  3.69e-03  3.68e-04  2.46e-05  3.65e-01  
 16  +4.9837e-01  +5.6970e-01  7.13e-02  6.54e-06  3.28e-03  3.02e-04  2.17e-05  2.92e-01  
 17  +4.9845e-01  +5.6694e-01  6.85e-02  6.08e-06  3.05e-03  1.95e-04  2.01e-05  3.71e-01  
 18  +4.9837e-01  +5.6501e-01  6.66e-02  5.75e-06  2.88e-03  1.43e-04  1.90e-05  2.83e-01  
 19  +4.9802e-01  +5.6291e-01  6.49e-02  5.11e-06  2.56e-03  1.39e-04  1.69e-05  1.80e-01  
 20  +4.9785e-01  +5.6136e-01  6.35e-02  4.98e-06  2.50e-03  1.09e-04  1.65e-05  1.87e-01  
 21  +4.9562e-01  +5.4891e-01  5.33e-02  3.16e-06  1.58e-03  4.89e-05  1.06e-05  7.71e-01  
 22  +4.9199e-01  +5.3164e-01  3.96e-02  2.11e-06  1.06e-03  2.56e-05  7.23e-06  4.82e-01  
 23  +4.9131e-01  +5.2851e-01  3.72e-02  1.93e-06  9.67e-04  1.94e-05  6.62e-06  2.32e-01  
 24  +4.9115e-01  +5.2776e-01  3.66e-02  1.89e-06  9.48e-04  1.70e-05  6.50e-06  1.09e-01  
 25  +4.9004e-01  +5.2285e-01  3.28e-02  1.64e-06  8.24e-04  1.23e-05  5.68e-06  2.62e-01  
 26  +4.8872e-01  +5.1698e-01  2.83e-02  1.35e-06  6.74e-04  6.35e-06  4.68e-06  4.71e-01  
 27  +4.8780e-01  +5.1311e-01  2.53e-02  1.17e-06  5.85e-04  5.02e-06  4.09e-06  2.23e-01  
 28  +4.8771e-01  +5.1275e-01  2.50e-02  1.16e-06  5.80e-04  4.59e-06  4.06e-06  7.13e-02  
 29  +4.8649e-01  +5.0764e-01  2.11e-02  9.47e-07  4.74e-04  2.92e-06  3.36e-06  3.63e-01  
 30  +4.8628e-01  +5.0662e-01  2.03e-02  8.83e-07  4.42e-04  1.68e-06  3.12e-06  4.60e-01  
 31  +4.8509e-01  +5.0167e-01  1.66e-02  6.98e-07  3.50e-04  9.25e-07  2.49e-06  4.81e-01  
 32  +4.8501e-01  +5.0137e-01  1.64e-02  6.92e-07  3.47e-04  8.33e-07  2.47e-06  9.92e-02  
 33  +4.8231e-01  +4.9048e-01  8.18e-03  3.32e-07  1.66e-04  3.41e-07  1.21e-06  6.08e-01  
 34  +4.8221e-01  +4.9008e-01  7.87e-03  3.20e-07  1.60e-04  2.95e-07  1.18e-06  1.50e-01  
 35  +4.8210e-01  +4.8946e-01  7.36e-03  2.94e-07  1.47e-04  1.77e-07  1.08e-06  5.66e-01  
 36  +4.8173e-01  +4.8802e-01  6.30e-03  2.50e-07  1.25e-04  1.47e-07  9.19e-07  2.01e-01  
 37  +4.8173e-01  +4.8801e-01  6.29e-03  2.49e-07  1.25e-04  1.46e-07  9.18e-07  9.67e-03  
 38  +4.8133e-01  +4.8647e-01  5.14e-03  2.04e-07  1.02e-04  9.56e-08  7.58e-07  4.73e-01  
 39  +4.8044e-01  +4.8309e-01  2.65e-03  1.04e-07  5.22e-05  4.80e-08  3.92e-07  5.11e-01  
 40  +4.8043e-01  +4.8305e-01  2.62e-03  1.03e-07  5.16e-05  4.63e-08  3.88e-07  7.75e-02  
 41  +4.7998e-01  +4.8129e-01  1.32e-03  5.13e-08  2.57e-05  1.56e-08  1.95e-07  9.44e-01  
 42  +4.7962e-01  +4.7999e-01  3.68e-04  1.43e-08  7.14e-06  4.27e-09  5.50e-08  7.73e-01  
 43  +4.7949e-01  +4.7951e-01  2.10e-05  8.13e-10  4.07e-07  2.33e-10  3.16e-09  9.74e-01  
 44  +4.7948e-01  +4.7948e-01  2.14e-07  8.29e-12  4.15e-09  2.37e-12  3.22e-11  9.90e-01  
 45  +4.7948e-01  +4.7948e-01  2.14e-09  8.29e-14  4.15e-11  2.37e-14  3.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6041515s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:41:51 PM: Problem status: optimal
(CVXPY) Sep 20 07:41:51 PM: Optimal value: 4.795e-01
(CVXPY) Sep 20 07:41:51 PM: Compilation took 2.423e-01 seconds
(CVXPY) Sep 20 07:41:51 PM: Solver (including time spent in interface) took 1.658e+00 seconds
FULL MODEL:
  Accruacy: 0.51104
  Our objective: 0.02207999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.009)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.00084)
 OR (x3 = 1)                                                                   <-- (term's our objective: 0.01224)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 34.64010787010193
Best over terms:
  Our final objective: 0.012239999999999973
    Its accruacy: 0.50612
    Its hamming distance: 8
  Shortest hamming distance: 0
    Its our objective: 0.009000000000000025
  Highest accruacy: 0.50612
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

