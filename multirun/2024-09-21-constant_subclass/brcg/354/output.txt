Command:
python test_script.py -s constant_subclass -d 9 -n 10000 --seed 21 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0031999999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 9.

Computed total variation: 0.1754
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:13 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:13 PM: Finished problem compilation (took 3.559e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 60019
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8093e-01  +1.0852e+03  1.08e+03  4.32e-01  7.56e+01  3.78e-03  5.73e-01  5.86e-01  
  2  +5.3196e-01  +1.2314e+02  1.23e+02  1.71e-01  3.84e+01  1.63e-02  2.77e-01  9.29e-01  
  3  +5.0884e-01  +3.2067e+01  3.16e+01  1.24e-01  2.77e+01  4.48e-05  2.59e-01  2.72e-01  
  4  +5.0107e-01  +3.2043e+00  2.70e+00  1.84e-02  4.17e+00  5.75e-06  1.71e-01  5.86e-01  
  5  +5.0008e-01  +8.8515e-01  3.85e-01  2.58e-03  6.00e-01  3.70e-05  1.04e-01  9.90e-01  
  6  +5.0001e-01  +5.4826e-01  4.82e-02  3.22e-04  7.51e-02  5.28e-06  1.78e-02  8.45e-01  
  7  +5.0001e-01  +5.3514e-01  3.51e-02  2.34e-04  5.47e-02  4.16e-06  9.56e-03  5.95e-01  
  8  +5.0000e-01  +5.2665e-01  2.66e-02  1.76e-04  4.10e-02  5.35e-06  3.31e-03  7.69e-01  
  9  +4.9976e-01  +5.1882e-01  1.91e-02  2.43e-05  5.68e-03  1.26e-04  8.20e-05  9.84e-01  
 10  +4.9851e-01  +5.1551e-01  1.70e-02  4.30e-06  1.01e-03  6.09e-04  1.38e-05  8.35e-01  
 11  +4.9747e-01  +5.0972e-01  1.23e-02  3.46e-06  8.10e-04  2.57e-04  1.15e-05  3.20e-01  
 12  +4.9661e-01  +5.0567e-01  9.06e-03  2.43e-06  5.69e-04  1.13e-04  8.27e-06  4.98e-01  
 13  +4.9555e-01  +5.0102e-01  5.47e-03  1.33e-06  3.11e-04  4.28e-05  4.66e-06  6.17e-01  
 14  +4.9481e-01  +4.9787e-01  3.06e-03  6.83e-07  1.60e-04  4.50e-07  2.50e-06  9.60e-01  
 15  +4.9400e-01  +4.9456e-01  5.60e-04  1.16e-07  2.72e-05  4.10e-08  4.55e-07  9.45e-01  
 16  +4.9384e-01  +4.9393e-01  9.80e-05  1.97e-08  4.62e-06  4.99e-09  7.99e-08  9.90e-01  
 17  +4.9380e-01  +4.9380e-01  9.87e-07  1.98e-10  4.63e-08  5.02e-11  8.06e-10  9.90e-01  
 18  +4.9380e-01  +4.9380e-01  9.87e-09  1.97e-12  4.63e-10  5.02e-13  8.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.3659ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:13 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:13 PM: Optimal value: 4.938e-01
(CVXPY) Sep 20 08:03:13 PM: Compilation took 3.559e-02 seconds
(CVXPY) Sep 20 08:03:13 PM: Solver (including time spent in interface) took 1.101e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4938
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:14 PM: Your problem has 5029 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:14 PM: Finished problem compilation (took 3.343e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5029
  constraints   = 10029
  nnz(P)        = 0
  nnz(A)        = 65286
  cones (total) = 1
    : Nonnegative = 1,  numel = 10029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.17e+02  1.00e+00  1.00e+00   ------   
  1  +5.8088e-01  +1.0854e+03  1.08e+03  4.32e-01  7.64e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3189e-01  +1.2300e+02  1.22e+02  1.71e-01  3.87e+01  1.63e-02  2.77e-01  9.30e-01  
  3  +5.0882e-01  +3.2010e+01  3.15e+01  1.24e-01  2.79e+01  4.49e-05  2.59e-01  2.74e-01  
  4  +5.0107e-01  +3.1919e+00  2.69e+00  1.83e-02  4.20e+00  5.76e-06  1.70e-01  5.91e-01  
  5  +5.0009e-01  +9.0147e-01  4.01e-01  2.69e-03  6.32e-01  3.72e-05  1.02e-01  9.90e-01  
  6  +5.0002e-01  +6.3108e-01  1.31e-01  8.76e-04  2.06e-01  1.40e-05  3.91e-02  6.40e-01  
  7  +5.0001e-01  +5.8537e-01  8.54e-02  5.70e-04  1.34e-01  1.13e-05  1.96e-02  5.38e-01  
  8  +4.9999e-01  +5.6760e-01  6.76e-02  4.39e-04  1.03e-01  1.76e-05  5.48e-03  8.82e-01  
  9  +4.9914e-01  +5.4942e-01  5.03e-02  4.27e-05  1.01e-02  4.36e-04  1.38e-04  9.84e-01  
 10  +4.9718e-01  +5.3990e-01  4.27e-02  1.47e-05  3.49e-03  9.39e-04  4.65e-05  6.87e-01  
 11  +4.9641e-01  +5.3406e-01  3.77e-02  1.26e-05  2.99e-03  7.07e-04  3.97e-05  2.47e-01  
 12  +4.9561e-01  +5.2891e-01  3.33e-02  9.79e-06  2.32e-03  4.85e-04  3.05e-05  4.34e-01  
 13  +4.9566e-01  +5.2905e-01  3.34e-02  9.65e-06  2.28e-03  3.93e-04  2.98e-05  1.92e-01  
 14  +4.9434e-01  +5.2146e-01  2.71e-02  6.65e-06  1.57e-03  1.50e-05  2.03e-05  9.15e-01  
 15  +4.9330e-01  +5.1694e-01  2.36e-02  5.20e-06  1.23e-03  1.26e-05  1.58e-05  2.89e-01  
 16  +4.9277e-01  +5.1499e-01  2.22e-02  5.06e-06  1.20e-03  9.26e-06  1.56e-05  1.57e-01  
 17  +4.9117e-01  +5.0839e-01  1.72e-02  3.51e-06  8.30e-04  7.18e-06  1.08e-05  3.50e-01  
 18  +4.8978e-01  +5.0240e-01  1.26e-02  2.25e-06  5.34e-04  4.30e-07  6.88e-06  9.90e-01  
 19  +4.8612e-01  +4.8890e-01  2.78e-03  4.72e-07  1.12e-04  1.71e-07  1.46e-06  9.90e-01  
 20  +4.8511e-01  +4.8527e-01  1.63e-04  2.70e-08  6.40e-06  9.45e-09  8.46e-08  9.46e-01  
 21  +4.8505e-01  +4.8505e-01  1.89e-06  3.14e-10  7.43e-08  1.13e-10  9.83e-10  9.89e-01  
 22  +4.8505e-01  +4.8505e-01  1.89e-08  3.14e-12  7.43e-10  1.13e-12  9.83e-12  9.90e-01  
 23  +4.8505e-01  +4.8505e-01  1.89e-10  3.15e-14  7.44e-12  1.18e-14  1.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 136.9801ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:14 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:14 PM: Optimal value: 4.851e-01
(CVXPY) Sep 20 08:03:14 PM: Compilation took 3.343e-02 seconds
(CVXPY) Sep 20 08:03:14 PM: Solver (including time spent in interface) took 1.470e-01 seconds
Iteration: 2, Objective: 0.4851
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:14 PM: Your problem has 5039 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:14 PM: Finished problem compilation (took 3.442e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5039
  constraints   = 10039
  nnz(P)        = 0
  nnz(A)        = 69318
  cones (total) = 1
    : Nonnegative = 1,  numel = 10039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.8080e-01  +1.0855e+03  1.08e+03  4.32e-01  7.68e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3181e-01  +1.2284e+02  1.22e+02  1.71e-01  3.88e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0880e-01  +3.1956e+01  3.14e+01  1.23e-01  2.80e+01  4.50e-05  2.58e-01  2.77e-01  
  4  +5.0106e-01  +3.1807e+00  2.68e+00  1.82e-02  4.21e+00  5.78e-06  1.69e-01  5.95e-01  
  5  +5.0009e-01  +9.2188e-01  4.22e-01  2.83e-03  6.68e-01  3.78e-05  9.99e-02  9.90e-01  
  6  +5.0002e-01  +6.2907e-01  1.29e-01  8.63e-04  2.04e-01  1.59e-05  3.22e-02  7.14e-01  
  7  +5.0001e-01  +6.5393e-01  1.54e-01  1.01e-03  2.40e-01  2.58e-05  1.54e-02  7.55e-01  
  8  +4.9971e-01  +6.1292e-01  1.13e-01  3.53e-04  8.40e-02  1.66e-04  1.37e-03  9.18e-01  
  9  +4.9795e-01  +6.0340e-01  1.05e-01  6.56e-05  1.56e-02  9.41e-04  2.13e-04  8.45e-01  
 10  +4.9651e-01  +5.8239e-01  8.59e-02  3.98e-05  9.50e-03  7.19e-04  1.28e-04  6.13e-01  
 11  +4.9652e-01  +5.7872e-01  8.22e-02  3.87e-05  9.22e-03  4.83e-04  1.24e-04  2.62e-01  
 12  +4.9660e-01  +5.7427e-01  7.77e-02  3.55e-05  8.46e-03  2.25e-04  1.12e-04  4.92e-01  
 13  +4.9626e-01  +5.7036e-01  7.41e-02  3.08e-05  7.34e-03  1.07e-04  9.64e-05  5.67e-01  
 14  +4.9430e-01  +5.5804e-01  6.37e-02  2.05e-05  4.90e-03  8.82e-05  6.42e-05  4.82e-01  
 15  +4.9315e-01  +5.5305e-01  5.99e-02  2.00e-05  4.77e-03  7.03e-05  6.40e-05  7.95e-02  
 16  +4.9267e-01  +5.5077e-01  5.81e-02  1.81e-05  4.31e-03  6.29e-05  5.74e-05  2.01e-01  
 17  +4.9300e-01  +5.5250e-01  5.95e-02  1.80e-05  4.29e-03  4.92e-05  5.64e-05  2.38e-01  
 18  +4.9198e-01  +5.4788e-01  5.59e-02  1.52e-05  3.62e-03  4.58e-05  4.74e-05  2.21e-01  
 19  +4.9138e-01  +5.4537e-01  5.40e-02  1.48e-05  3.53e-03  3.36e-05  4.63e-05  2.05e-01  
 20  +4.8639e-01  +5.2396e-01  3.76e-02  8.11e-06  1.93e-03  2.36e-05  2.56e-05  5.23e-01  
 21  +4.8252e-01  +5.0742e-01  2.49e-02  5.03e-06  1.20e-03  1.36e-05  1.61e-05  4.39e-01  
 22  +4.8063e-01  +4.9951e-01  1.89e-02  3.63e-06  8.66e-04  9.04e-06  1.17e-05  3.77e-01  
 23  +4.7955e-01  +4.9361e-01  1.41e-02  2.61e-06  6.22e-04  6.59e-07  8.47e-06  9.90e-01  
 24  +4.7689e-01  +4.8412e-01  7.23e-03  1.30e-06  3.09e-04  3.57e-07  4.27e-06  5.62e-01  
 25  +4.7431e-01  +4.7485e-01  5.41e-04  9.56e-08  2.27e-05  2.79e-08  3.19e-07  9.41e-01  
 26  +4.7410e-01  +4.7411e-01  5.57e-06  9.83e-10  2.34e-07  2.87e-10  3.29e-09  9.90e-01  
 27  +4.7410e-01  +4.7410e-01  5.57e-08  9.83e-12  2.34e-09  2.87e-12  3.29e-11  9.90e-01  
 28  +4.7410e-01  +4.7410e-01  5.57e-10  9.83e-14  2.34e-11  2.91e-14  3.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 164.1385ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:14 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:14 PM: Optimal value: 4.741e-01
(CVXPY) Sep 20 08:03:14 PM: Compilation took 3.442e-02 seconds
(CVXPY) Sep 20 08:03:14 PM: Solver (including time spent in interface) took 1.744e-01 seconds
Iteration: 3, Objective: 0.4741
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:14 PM: Your problem has 5049 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:14 PM: Finished problem compilation (took 3.516e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5049
  constraints   = 10049
  nnz(P)        = 0
  nnz(A)        = 72379
  cones (total) = 1
    : Nonnegative = 1,  numel = 10049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.8077e-01  +1.0855e+03  1.08e+03  4.32e-01  7.70e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3177e-01  +1.2277e+02  1.22e+02  1.71e-01  3.89e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0879e-01  +3.1930e+01  3.14e+01  1.23e-01  2.81e+01  4.50e-05  2.58e-01  2.78e-01  
  4  +5.0106e-01  +3.1759e+00  2.67e+00  1.82e-02  4.22e+00  5.79e-06  1.68e-01  5.97e-01  
  5  +5.0010e-01  +9.3008e-01  4.30e-01  2.89e-03  6.84e-01  3.80e-05  9.88e-02  9.90e-01  
  6  +5.0003e-01  +6.7043e-01  1.70e-01  1.14e-03  2.71e-01  1.98e-05  3.93e-02  6.37e-01  
  7  +4.9999e-01  +6.3402e-01  1.34e-01  8.82e-04  2.10e-01  3.10e-05  1.31e-02  7.37e-01  
  8  +4.9930e-01  +6.2593e-01  1.27e-01  2.39e-04  5.71e-02  3.73e-04  8.31e-04  9.68e-01  
  9  +4.9616e-01  +6.0827e-01  1.12e-01  4.81e-05  1.15e-02  1.64e-03  1.54e-04  8.25e-01  
 10  +4.9483e-01  +5.9322e-01  9.84e-02  3.70e-05  8.85e-03  1.26e-03  1.17e-04  3.95e-01  
 11  +4.9362e-01  +5.8408e-01  9.05e-02  2.82e-05  6.74e-03  1.02e-03  8.86e-05  4.26e-01  
 12  +4.9364e-01  +5.8042e-01  8.68e-02  2.63e-05  6.30e-03  6.30e-04  8.25e-05  3.62e-01  
 13  +4.9243e-01  +5.7217e-01  7.97e-02  2.34e-05  5.60e-03  3.64e-04  7.38e-05  3.80e-01  
 14  +4.9035e-01  +5.5992e-01  6.96e-02  1.95e-05  4.67e-03  1.71e-04  6.20e-05  4.73e-01  
 15  +4.8305e-01  +5.2657e-01  4.35e-02  9.96e-06  2.38e-03  1.04e-04  3.25e-05  5.27e-01  
 16  +4.8030e-01  +5.1370e-01  3.34e-02  7.24e-06  1.73e-03  5.12e-05  2.39e-05  4.98e-01  
 17  +4.7991e-01  +5.1131e-01  3.14e-02  6.71e-06  1.60e-03  3.13e-05  2.22e-05  3.81e-01  
 18  +4.7417e-01  +4.8736e-01  1.32e-02  2.65e-06  6.34e-04  1.11e-05  9.00e-06  6.38e-01  
 19  +4.7188e-01  +4.7763e-01  5.75e-03  1.10e-06  2.64e-04  5.41e-07  3.77e-06  9.90e-01  
 20  +4.7005e-01  +4.7070e-01  6.58e-04  1.25e-07  2.99e-05  5.96e-08  4.32e-07  9.00e-01  
 21  +4.6980e-01  +4.6981e-01  1.03e-05  1.95e-09  4.65e-07  9.17e-10  6.76e-09  9.85e-01  
 22  +4.6980e-01  +4.6980e-01  1.03e-07  1.95e-11  4.66e-09  9.18e-12  6.76e-11  9.90e-01  
 23  +4.6980e-01  +4.6980e-01  1.03e-09  1.95e-13  4.66e-11  9.25e-14  6.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 139.9761ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:14 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:14 PM: Optimal value: 4.698e-01
(CVXPY) Sep 20 08:03:14 PM: Compilation took 3.516e-02 seconds
(CVXPY) Sep 20 08:03:14 PM: Solver (including time spent in interface) took 1.514e-01 seconds
Iteration: 4, Objective: 0.4698
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:15 PM: Your problem has 5059 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:15 PM: Finished problem compilation (took 3.658e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5059
  constraints   = 10059
  nnz(P)        = 0
  nnz(A)        = 74240
  cones (total) = 1
    : Nonnegative = 1,  numel = 10059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8073e-01  +1.0856e+03  1.08e+03  4.33e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3173e-01  +1.2269e+02  1.22e+02  1.70e-01  3.89e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0877e-01  +3.1904e+01  3.14e+01  1.23e-01  2.80e+01  4.50e-05  2.58e-01  2.79e-01  
  4  +5.0106e-01  +3.1721e+00  2.67e+00  1.82e-02  4.22e+00  5.80e-06  1.68e-01  5.98e-01  
  5  +5.0010e-01  +9.3694e-01  4.37e-01  2.94e-03  6.96e-01  3.81e-05  9.79e-02  9.90e-01  
  6  +5.0004e-01  +6.9693e-01  1.97e-01  1.32e-03  3.13e-01  2.18e-05  4.37e-02  5.85e-01  
  7  +5.0000e-01  +6.4808e-01  1.48e-01  9.78e-04  2.33e-01  2.90e-05  1.51e-02  7.57e-01  
  8  +4.9940e-01  +6.3123e-01  1.32e-01  2.66e-04  6.37e-02  3.25e-04  9.17e-04  9.90e-01  
  9  +4.9504e-01  +6.1053e-01  1.15e-01  3.63e-05  8.71e-03  2.14e-03  1.14e-04  8.78e-01  
 10  +4.9521e-01  +6.1002e-01  1.15e-01  3.56e-05  8.54e-03  1.93e-03  1.11e-04  1.15e-01  
 11  +4.9392e-01  +6.0082e-01  1.07e-01  3.06e-05  7.33e-03  1.72e-03  9.49e-05  2.15e-01  
 12  +4.9365e-01  +5.8988e-01  9.62e-02  2.79e-05  6.69e-03  7.69e-04  8.65e-05  4.44e-01  
 13  +4.9255e-01  +5.8159e-01  8.90e-02  2.68e-05  6.41e-03  5.01e-04  8.37e-05  2.26e-01  
 14  +4.9176e-01  +5.7425e-01  8.25e-02  2.45e-05  5.87e-03  2.33e-04  7.67e-05  4.47e-01  
 15  +4.8691e-01  +5.5091e-01  6.40e-02  1.63e-05  3.91e-03  1.79e-04  5.20e-05  3.62e-01  
 16  +4.8227e-01  +5.2822e-01  4.59e-02  1.07e-05  2.56e-03  5.78e-05  3.46e-05  6.40e-01  
 17  +4.7862e-01  +5.1209e-01  3.35e-02  7.25e-06  1.73e-03  2.64e-05  2.37e-05  5.50e-01  
 18  +4.7757e-01  +5.0706e-01  2.95e-02  6.17e-06  1.47e-03  1.05e-05  2.02e-05  6.16e-01  
 19  +4.7188e-01  +4.8414e-01  1.23e-02  2.42e-06  5.78e-04  3.64e-06  8.13e-06  6.59e-01  
 20  +4.6861e-01  +4.7131e-01  2.69e-03  5.17e-07  1.24e-04  5.37e-07  1.77e-06  8.64e-01  
 21  +4.6830e-01  +4.7003e-01  1.73e-03  3.28e-07  7.84e-05  1.42e-07  1.13e-06  9.13e-01  
 22  +4.6766e-01  +4.6768e-01  2.34e-05  4.44e-09  1.06e-06  1.84e-09  1.53e-08  9.87e-01  
 23  +4.6765e-01  +4.6765e-01  2.35e-07  4.45e-11  1.06e-08  1.84e-11  1.54e-10  9.90e-01  
 24  +4.6765e-01  +4.6765e-01  2.35e-09  4.46e-13  1.07e-10  1.85e-13  1.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.5078ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:15 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:15 PM: Optimal value: 4.677e-01
(CVXPY) Sep 20 08:03:15 PM: Compilation took 3.658e-02 seconds
(CVXPY) Sep 20 08:03:15 PM: Solver (including time spent in interface) took 1.564e-01 seconds
Iteration: 5, Objective: 0.4677
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:15 PM: Your problem has 5069 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:15 PM: Finished problem compilation (took 3.772e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5069
  constraints   = 10069
  nnz(P)        = 0
  nnz(A)        = 76096
  cones (total) = 1
    : Nonnegative = 1,  numel = 10069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8064e-01  +1.0856e+03  1.09e+03  4.33e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3165e-01  +1.2254e+02  1.22e+02  1.70e-01  3.88e+01  1.63e-02  2.77e-01  9.33e-01  
  3  +5.0876e-01  +3.1858e+01  3.13e+01  1.23e-01  2.80e+01  4.51e-05  2.57e-01  2.81e-01  
  4  +5.0105e-01  +3.1645e+00  2.66e+00  1.81e-02  4.21e+00  5.82e-06  1.67e-01  6.01e-01  
  5  +5.0011e-01  +9.5729e-01  4.57e-01  3.08e-03  7.29e-01  3.88e-05  9.60e-02  9.90e-01  
  6  +5.0003e-01  +6.9907e-01  1.99e-01  1.33e-03  3.17e-01  2.42e-05  3.78e-02  6.41e-01  
  7  +4.9996e-01  +6.7741e-01  1.77e-01  1.12e-03  2.66e-01  5.39e-05  1.00e-02  8.31e-01  
  8  +4.9715e-01  +6.4447e-01  1.47e-01  8.62e-05  2.07e-02  1.43e-03  2.71e-04  9.82e-01  
  9  +4.9417e-01  +6.1831e-01  1.24e-01  4.54e-05  1.09e-02  1.61e-03  1.41e-04  6.14e-01  
 10  +4.9294e-01  +6.1047e-01  1.18e-01  3.74e-05  8.97e-03  1.41e-03  1.16e-04  3.18e-01  
 11  +4.9118e-01  +5.9665e-01  1.05e-01  3.16e-05  7.58e-03  9.27e-04  9.80e-05  3.64e-01  
 12  +4.8737e-01  +5.7168e-01  8.43e-02  2.43e-05  5.83e-03  2.56e-04  7.68e-05  6.07e-01  
 13  +4.8070e-01  +5.3846e-01  5.78e-02  1.46e-05  3.50e-03  1.47e-04  4.72e-05  4.75e-01  
 14  +4.7527e-01  +5.1181e-01  3.65e-02  8.24e-06  1.97e-03  1.79e-05  2.72e-05  8.44e-01  
 15  +4.7375e-01  +5.0497e-01  3.12e-02  6.74e-06  1.61e-03  8.90e-06  2.24e-05  5.50e-01  
 16  +4.7051e-01  +4.9081e-01  2.03e-02  4.12e-06  9.87e-04  1.11e-06  1.39e-05  9.90e-01  
 17  +4.6591e-01  +4.7234e-01  6.43e-03  1.22e-06  2.92e-04  3.69e-07  4.26e-06  7.53e-01  
 18  +4.6501e-01  +4.6910e-01  4.09e-03  7.64e-07  1.83e-04  2.39e-07  2.70e-06  8.63e-01  
 19  +4.6353e-01  +4.6388e-01  3.45e-04  6.22e-08  1.49e-05  1.98e-08  2.26e-07  9.27e-01  
 20  +4.6340e-01  +4.6340e-01  3.60e-06  6.49e-10  1.55e-07  2.07e-10  2.36e-09  9.90e-01  
 21  +4.6340e-01  +4.6340e-01  3.60e-08  6.49e-12  1.56e-09  2.07e-12  2.36e-11  9.90e-01  
 22  +4.6340e-01  +4.6340e-01  3.61e-10  6.49e-14  1.56e-11  2.13e-14  2.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 134.2776ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:15 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:15 PM: Optimal value: 4.634e-01
(CVXPY) Sep 20 08:03:15 PM: Compilation took 3.772e-02 seconds
(CVXPY) Sep 20 08:03:15 PM: Solver (including time spent in interface) took 1.452e-01 seconds
Iteration: 6, Objective: 0.4634
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:15 PM: Your problem has 5079 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:15 PM: Finished problem compilation (took 3.705e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5079
  constraints   = 10079
  nnz(P)        = 0
  nnz(A)        = 77931
  cones (total) = 1
    : Nonnegative = 1,  numel = 10079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8058e-01  +1.0856e+03  1.08e+03  4.33e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3160e-01  +1.2242e+02  1.22e+02  1.70e-01  3.87e+01  1.63e-02  2.76e-01  9.34e-01  
  3  +5.0874e-01  +3.1820e+01  3.13e+01  1.23e-01  2.79e+01  4.51e-05  2.57e-01  2.82e-01  
  4  +5.0105e-01  +3.1578e+00  2.66e+00  1.81e-02  4.20e+00  5.83e-06  1.66e-01  6.04e-01  
  5  +5.0012e-01  +9.9728e-01  4.97e-01  3.35e-03  7.94e-01  3.91e-05  9.68e-02  9.58e-01  
  6  +5.0005e-01  +7.7636e-01  2.76e-01  1.85e-03  4.41e-01  2.92e-05  4.77e-02  5.41e-01  
  7  +4.9997e-01  +7.0392e-01  2.04e-01  1.26e-03  3.01e-01  5.83e-05  1.00e-02  9.25e-01  
  8  +4.9755e-01  +6.8378e-01  1.86e-01  1.22e-04  2.93e-02  1.23e-03  3.83e-04  9.64e-01  
  9  +4.9311e-01  +6.4580e-01  1.53e-01  5.12e-05  1.23e-02  1.94e-03  1.59e-04  6.33e-01  
 10  +4.9297e-01  +6.4300e-01  1.50e-01  4.86e-05  1.17e-02  1.72e-03  1.50e-04  1.59e-01  
 11  +4.9150e-01  +6.3338e-01  1.42e-01  4.15e-05  9.96e-03  1.58e-03  1.28e-04  2.22e-01  
 12  +4.9068e-01  +6.2143e-01  1.31e-01  3.80e-05  9.13e-03  9.84e-04  1.17e-04  3.18e-01  
 13  +4.9024e-01  +6.1815e-01  1.28e-01  3.77e-05  9.05e-03  8.81e-04  1.16e-04  5.77e-02  
 14  +4.8328e-01  +5.7614e-01  9.29e-02  2.36e-05  5.66e-03  3.29e-04  7.44e-05  6.38e-01  
 15  +4.8243e-01  +5.6844e-01  8.60e-02  2.19e-05  5.26e-03  1.44e-04  6.96e-05  4.62e-01  
 16  +4.7638e-01  +5.3941e-01  6.30e-02  1.49e-05  3.58e-03  8.14e-05  4.86e-05  4.24e-01  
 17  +4.7024e-01  +5.0941e-01  3.92e-02  8.41e-06  2.02e-03  8.79e-07  2.80e-05  9.44e-01  
 18  +4.6910e-01  +5.0446e-01  3.54e-02  7.50e-06  1.80e-03  1.00e-06  2.50e-05  2.68e-01  
 19  +4.6664e-01  +4.9411e-01  2.75e-02  5.69e-06  1.36e-03  8.41e-07  1.92e-05  3.00e-01  
 20  +4.6511e-01  +4.8735e-01  2.22e-02  4.48e-06  1.07e-03  9.93e-07  1.52e-05  6.27e-01  
 21  +4.6013e-01  +4.6730e-01  7.17e-03  1.40e-06  3.35e-04  3.45e-07  4.88e-06  7.70e-01  
 22  +4.5830e-01  +4.6030e-01  2.00e-03  3.79e-07  9.07e-05  1.05e-07  1.35e-06  8.17e-01  
 23  +4.5763e-01  +4.5797e-01  3.35e-04  6.11e-08  1.46e-05  1.83e-08  2.24e-07  8.74e-01  
 24  +4.5750e-01  +4.5750e-01  3.55e-06  6.44e-10  1.54e-07  1.95e-10  2.37e-09  9.90e-01  
 25  +4.5750e-01  +4.5750e-01  3.55e-08  6.44e-12  1.54e-09  1.95e-12  2.37e-11  9.90e-01  
 26  +4.5750e-01  +4.5750e-01  3.56e-10  6.44e-14  1.55e-11  2.08e-14  2.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 158.725ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:16 PM: Optimal value: 4.575e-01
(CVXPY) Sep 20 08:03:16 PM: Compilation took 3.705e-02 seconds
(CVXPY) Sep 20 08:03:16 PM: Solver (including time spent in interface) took 1.698e-01 seconds
Iteration: 7, Objective: 0.4575
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:16 PM: Your problem has 5089 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:16 PM: Finished problem compilation (took 3.762e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5089
  constraints   = 10089
  nnz(P)        = 0
  nnz(A)        = 80068
  cones (total) = 1
    : Nonnegative = 1,  numel = 10089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8054e-01  +1.0856e+03  1.09e+03  4.33e-01  7.72e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3156e-01  +1.2234e+02  1.22e+02  1.70e-01  3.87e+01  1.63e-02  2.76e-01  9.34e-01  
  3  +5.0873e-01  +3.1793e+01  3.13e+01  1.23e-01  2.79e+01  4.52e-05  2.57e-01  2.84e-01  
  4  +5.0105e-01  +3.1553e+00  2.65e+00  1.81e-02  4.21e+00  5.84e-06  1.66e-01  6.05e-01  
  5  +5.0011e-01  +9.8256e-01  4.82e-01  3.25e-03  7.72e-01  3.96e-05  9.36e-02  9.90e-01  
  6  +5.0003e-01  +6.9899e-01  1.99e-01  1.33e-03  3.17e-01  2.74e-05  3.00e-02  7.66e-01  
  7  +4.9981e-01  +7.1772e-01  2.18e-01  1.04e-03  2.49e-01  1.37e-04  4.91e-03  9.08e-01  
  8  +4.9575e-01  +6.9353e-01  1.98e-01  8.87e-05  2.14e-02  2.05e-03  2.76e-04  9.44e-01  
  9  +4.9335e-01  +6.6445e-01  1.71e-01  6.50e-05  1.56e-02  1.80e-03  2.01e-04  3.52e-01  
 10  +4.9323e-01  +6.4775e-01  1.55e-01  5.10e-05  1.23e-02  9.50e-04  1.56e-04  5.81e-01  
 11  +4.9227e-01  +6.3793e-01  1.46e-01  4.65e-05  1.12e-02  7.60e-04  1.42e-04  2.18e-01  
 12  +4.9166e-01  +6.2965e-01  1.38e-01  4.50e-05  1.08e-02  5.18e-04  1.38e-04  2.27e-01  
 13  +4.8402e-01  +5.8757e-01  1.04e-01  2.66e-05  6.40e-03  4.04e-04  8.36e-05  4.58e-01  
 14  +4.8362e-01  +5.8269e-01  9.91e-02  2.59e-05  6.22e-03  2.61e-04  8.16e-05  2.69e-01  
 15  +4.7910e-01  +5.5955e-01  8.05e-02  2.01e-05  4.82e-03  1.81e-04  6.45e-05  2.91e-01  
 16  +4.7346e-01  +5.2966e-01  5.62e-02  1.30e-05  3.13e-03  1.65e-05  4.27e-05  8.28e-01  
 17  +4.6906e-01  +5.0973e-01  4.07e-02  8.99e-06  2.16e-03  7.25e-06  3.00e-05  5.88e-01  
 18  +4.6255e-01  +4.8143e-01  1.89e-02  3.98e-06  9.56e-04  2.98e-06  1.37e-05  5.90e-01  
 19  +4.5822e-01  +4.6318e-01  4.96e-03  1.01e-06  2.43e-04  6.72e-07  3.60e-06  7.84e-01  
 20  +4.5670e-01  +4.5725e-01  5.53e-04  1.09e-07  2.63e-05  4.82e-08  4.04e-07  9.52e-01  
 21  +4.5650e-01  +4.5651e-01  7.98e-06  1.57e-09  3.78e-07  6.89e-10  5.85e-09  9.86e-01  
 22  +4.5650e-01  +4.5650e-01  7.98e-08  1.57e-11  3.78e-09  6.89e-12  5.85e-11  9.90e-01  
 23  +4.5650e-01  +4.5650e-01  7.99e-10  1.57e-13  3.79e-11  7.06e-14  5.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 137.4975ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:16 PM: Optimal value: 4.565e-01
(CVXPY) Sep 20 08:03:16 PM: Compilation took 3.762e-02 seconds
(CVXPY) Sep 20 08:03:16 PM: Solver (including time spent in interface) took 1.479e-01 seconds
Iteration: 8, Objective: 0.4565
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:16 PM: Your problem has 5099 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:16 PM: Finished problem compilation (took 3.857e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5099
  constraints   = 10099
  nnz(P)        = 0
  nnz(A)        = 81852
  cones (total) = 1
    : Nonnegative = 1,  numel = 10099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8049e-01  +1.0857e+03  1.09e+03  4.33e-01  7.72e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3151e-01  +1.2224e+02  1.22e+02  1.70e-01  3.87e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0872e-01  +3.1768e+01  3.13e+01  1.23e-01  2.79e+01  4.52e-05  2.56e-01  2.85e-01  
  4  +5.0105e-01  +3.1549e+00  2.65e+00  1.81e-02  4.21e+00  5.84e-06  1.65e-01  6.06e-01  
  5  +5.0012e-01  +9.9230e-01  4.92e-01  3.32e-03  7.88e-01  4.01e-05  9.30e-02  9.90e-01  
  6  +5.0004e-01  +7.4864e-01  2.49e-01  1.67e-03  3.97e-01  3.20e-05  3.63e-02  6.58e-01  
  7  +4.9979e-01  +7.2914e-01  2.29e-01  1.08e-03  2.59e-01  1.49e-04  5.06e-03  9.25e-01  
  8  +4.9548e-01  +7.0527e-01  2.10e-01  9.47e-05  2.28e-02  2.17e-03  2.96e-04  9.42e-01  
  9  +4.9245e-01  +6.6411e-01  1.72e-01  6.29e-05  1.51e-02  1.61e-03  1.96e-04  5.07e-01  
 10  +4.9092e-01  +6.5321e-01  1.62e-01  5.13e-05  1.24e-02  1.43e-03  1.60e-04  3.10e-01  
 11  +4.8997e-01  +6.4204e-01  1.52e-01  4.77e-05  1.15e-02  1.08e-03  1.49e-04  2.16e-01  
 12  +4.8874e-01  +6.2474e-01  1.36e-01  4.38e-05  1.05e-02  4.33e-04  1.38e-04  4.50e-01  
 13  +4.8387e-01  +5.9853e-01  1.15e-01  3.27e-05  7.87e-03  3.58e-04  1.05e-04  2.80e-01  
 14  +4.7583e-01  +5.5391e-01  7.81e-02  1.99e-05  4.78e-03  9.20e-05  6.59e-05  6.84e-01  
 15  +4.7106e-01  +5.3050e-01  5.94e-02  1.42e-05  3.42e-03  4.56e-05  4.80e-05  4.94e-01  
 16  +4.6594e-01  +5.0505e-01  3.91e-02  8.71e-06  2.09e-03  4.82e-07  2.99e-05  9.76e-01  
 17  +4.5980e-01  +4.7810e-01  1.83e-02  3.94e-06  9.45e-04  3.05e-07  1.40e-05  5.88e-01  
 18  +4.5679e-01  +4.6522e-01  8.43e-03  1.76e-06  4.21e-04  2.64e-07  6.38e-06  7.28e-01  
 19  +4.5672e-01  +4.6493e-01  8.20e-03  1.72e-06  4.12e-04  2.67e-07  6.25e-06  9.06e-02  
 20  +4.5636e-01  +4.6345e-01  7.09e-03  1.47e-06  3.53e-04  2.45e-07  5.37e-06  2.15e-01  
 21  +4.5618e-01  +4.6270e-01  6.52e-03  1.34e-06  3.21e-04  2.55e-07  4.90e-06  3.05e-01  
 22  +4.5467e-01  +4.5676e-01  2.09e-03  4.14e-07  9.92e-05  8.98e-08  1.56e-06  7.49e-01  
 23  +4.5401e-01  +4.5431e-01  2.99e-04  5.72e-08  1.37e-05  1.41e-08  2.20e-07  9.10e-01  
 24  +4.5390e-01  +4.5390e-01  3.45e-06  6.57e-10  1.58e-07  1.63e-10  2.54e-09  9.89e-01  
 25  +4.5390e-01  +4.5390e-01  3.45e-08  6.59e-12  1.58e-09  1.64e-12  2.54e-11  9.90e-01  
 26  +4.5390e-01  +4.5390e-01  3.46e-10  6.60e-14  1.58e-11  1.74e-14  2.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.9801ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:16 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:16 PM: Optimal value: 4.539e-01
(CVXPY) Sep 20 08:03:16 PM: Compilation took 3.857e-02 seconds
(CVXPY) Sep 20 08:03:16 PM: Solver (including time spent in interface) took 1.685e-01 seconds
Iteration: 9, Objective: 0.4539
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:16 PM: Your problem has 5109 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:16 PM: Finished problem compilation (took 3.908e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5109
  constraints   = 10109
  nnz(P)        = 0
  nnz(A)        = 83855
  cones (total) = 1
    : Nonnegative = 1,  numel = 10109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8044e-01  +1.0857e+03  1.09e+03  4.33e-01  7.73e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3148e-01  +1.2217e+02  1.22e+02  1.70e-01  3.87e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0871e-01  +3.1749e+01  3.12e+01  1.23e-01  2.79e+01  4.53e-05  2.56e-01  2.86e-01  
  4  +5.0105e-01  +3.1532e+00  2.65e+00  1.81e-02  4.21e+00  5.85e-06  1.65e-01  6.07e-01  
  5  +5.0012e-01  +1.0003e+00  5.00e-01  3.37e-03  8.02e-01  4.04e-05  9.23e-02  9.90e-01  
  6  +5.0003e-01  +7.4516e-01  2.45e-01  1.64e-03  3.91e-01  3.27e-05  3.30e-02  7.21e-01  
  7  +4.9970e-01  +7.4149e-01  2.42e-01  9.55e-04  2.29e-01  1.97e-04  3.91e-03  9.44e-01  
  8  +4.9522e-01  +7.1387e-01  2.19e-01  9.34e-05  2.25e-02  2.24e-03  2.91e-04  9.26e-01  
  9  +4.9297e-01  +6.7892e-01  1.86e-01  7.00e-05  1.69e-02  1.61e-03  2.17e-04  4.17e-01  
 10  +4.9143e-01  +6.6622e-01  1.75e-01  5.77e-05  1.39e-02  1.45e-03  1.79e-04  2.80e-01  
 11  +4.9147e-01  +6.6105e-01  1.70e-01  5.69e-05  1.37e-02  1.17e-03  1.76e-04  1.39e-01  
 12  +4.9002e-01  +6.4947e-01  1.59e-01  4.97e-05  1.20e-02  9.67e-04  1.55e-04  2.42e-01  
 13  +4.8573e-01  +6.0607e-01  1.20e-01  3.69e-05  8.89e-03  9.70e-06  1.17e-04  8.01e-01  
 14  +4.8004e-01  +5.7687e-01  9.68e-02  2.65e-05  6.38e-03  6.53e-06  8.59e-05  4.58e-01  
 15  +4.6847e-01  +5.2013e-01  5.17e-02  1.21e-05  2.91e-03  2.27e-06  4.11e-05  8.11e-01  
 16  +4.6422e-01  +5.0026e-01  3.60e-02  7.99e-06  1.92e-03  1.68e-06  2.77e-05  8.66e-01  
 17  +4.5736e-01  +4.7013e-01  1.28e-02  2.71e-06  6.52e-04  6.00e-07  9.75e-06  7.56e-01  
 18  +4.5625e-01  +4.6537e-01  9.12e-03  1.90e-06  4.56e-04  4.43e-07  6.84e-06  4.01e-01  
 19  +4.5618e-01  +4.6495e-01  8.77e-03  1.84e-06  4.43e-04  4.25e-07  6.70e-06  2.00e-01  
 20  +4.5607e-01  +4.6446e-01  8.39e-03  1.76e-06  4.22e-04  4.14e-07  6.38e-06  1.94e-01  
 21  +4.5498e-01  +4.5994e-01  4.96e-03  1.02e-06  2.45e-04  2.55e-07  3.72e-06  5.89e-01  
 22  +4.5438e-01  +4.5758e-01  3.19e-03  6.49e-07  1.56e-04  1.65e-07  2.38e-06  4.45e-01  
 23  +4.5355e-01  +4.5423e-01  6.79e-04  1.36e-07  3.27e-05  3.66e-08  5.04e-07  9.76e-01  
 24  +4.5332e-01  +4.5335e-01  2.28e-05  4.55e-09  1.09e-06  1.24e-09  1.69e-08  9.82e-01  
 25  +4.5332e-01  +4.5332e-01  2.29e-07  4.57e-11  1.10e-08  1.25e-11  1.70e-10  9.90e-01  
 26  +4.5332e-01  +4.5332e-01  2.29e-09  4.58e-13  1.10e-10  1.29e-13  1.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 167.3785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:17 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:17 PM: Optimal value: 4.533e-01
(CVXPY) Sep 20 08:03:17 PM: Compilation took 3.908e-02 seconds
(CVXPY) Sep 20 08:03:17 PM: Solver (including time spent in interface) took 1.780e-01 seconds
Iteration: 10, Objective: 0.4533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:17 PM: Your problem has 5119 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:17 PM: Finished problem compilation (took 4.186e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5119
  constraints   = 10119
  nnz(P)        = 0
  nnz(A)        = 85033
  cones (total) = 1
    : Nonnegative = 1,  numel = 10119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8040e-01  +1.0857e+03  1.09e+03  4.34e-01  7.73e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3145e-01  +1.2212e+02  1.22e+02  1.70e-01  3.86e+01  1.64e-02  2.76e-01  9.36e-01  
  3  +5.0870e-01  +3.1731e+01  3.12e+01  1.23e-01  2.79e+01  4.53e-05  2.56e-01  2.86e-01  
  4  +5.0105e-01  +3.1526e+00  2.65e+00  1.81e-02  4.21e+00  5.86e-06  1.64e-01  6.08e-01  
  5  +5.0016e-01  +1.0912e+00  5.91e-01  3.99e-03  9.48e-01  3.92e-05  9.96e-02  8.84e-01  
  6  +5.0005e-01  +7.6666e-01  2.67e-01  1.79e-03  4.26e-01  2.98e-05  3.76e-02  6.87e-01  
  7  +4.9979e-01  +7.7752e-01  2.78e-01  1.19e-03  2.86e-01  1.58e-04  5.10e-03  9.51e-01  
  8  +4.9585e-01  +7.5145e-01  2.56e-01  1.13e-04  2.73e-02  1.98e-03  3.50e-04  9.31e-01  
  9  +4.9287e-01  +6.9945e-01  2.07e-01  7.81e-05  1.88e-02  1.43e-03  2.43e-04  4.49e-01  
 10  +4.9138e-01  +6.8510e-01  1.94e-01  6.52e-05  1.57e-02  1.27e-03  2.03e-04  2.64e-01  
 11  +4.9132e-01  +6.8051e-01  1.89e-01  6.49e-05  1.56e-02  1.12e-03  2.02e-04  6.72e-02  
 12  +4.8961e-01  +6.6775e-01  1.78e-01  5.57e-05  1.34e-02  1.02e-03  1.75e-04  2.07e-01  
 13  +4.8936e-01  +6.6253e-01  1.73e-01  5.52e-05  1.33e-02  8.84e-04  1.73e-04  7.58e-02  
 14  +4.8367e-01  +6.2001e-01  1.36e-01  3.92e-05  9.44e-03  4.95e-04  1.26e-04  4.55e-01  
 15  +4.7463e-01  +5.6611e-01  9.15e-02  2.35e-05  5.64e-03  2.14e-04  7.83e-05  5.47e-01  
 16  +4.6748e-01  +5.2931e-01  6.18e-02  1.47e-05  3.52e-03  1.18e-04  5.04e-05  4.49e-01  
 17  +4.6569e-01  +5.2002e-01  5.43e-02  1.24e-05  2.97e-03  7.95e-05  4.28e-05  3.52e-01  
 18  +4.6332e-01  +5.0584e-01  4.25e-02  9.29e-06  2.23e-03  8.19e-07  3.25e-05  9.81e-01  
 19  +4.5716e-01  +4.7979e-01  2.26e-02  4.77e-06  1.15e-03  4.78e-07  1.73e-05  5.03e-01  
 20  +4.5482e-01  +4.6945e-01  1.46e-02  3.03e-06  7.27e-04  5.71e-07  1.11e-05  7.20e-01  
 21  +4.5389e-01  +4.6559e-01  1.17e-02  2.39e-06  5.73e-04  5.03e-07  8.83e-06  4.07e-01  
 22  +4.5359e-01  +4.6414e-01  1.06e-02  2.18e-06  5.24e-04  5.02e-07  8.18e-06  5.63e-01  
 23  +4.5287e-01  +4.6119e-01  8.32e-03  1.72e-06  4.12e-04  4.15e-07  6.45e-06  5.11e-01  
 24  +4.5161e-01  +4.5626e-01  4.65e-03  9.53e-07  2.29e-04  2.36e-07  3.61e-06  5.45e-01  
 25  +4.5113e-01  +4.5450e-01  3.37e-03  6.81e-07  1.63e-04  1.73e-07  2.58e-06  4.53e-01  
 26  +4.4998e-01  +4.5005e-01  7.70e-05  1.55e-08  3.73e-06  3.88e-09  5.96e-08  9.79e-01  
 27  +4.4995e-01  +4.4995e-01  7.72e-07  1.56e-10  3.74e-08  3.89e-11  5.98e-10  9.90e-01  
 28  +4.4995e-01  +4.4995e-01  7.72e-09  1.56e-12  3.74e-10  3.91e-13  6.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 189.004ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:17 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:17 PM: Optimal value: 4.500e-01
(CVXPY) Sep 20 08:03:17 PM: Compilation took 4.186e-02 seconds
(CVXPY) Sep 20 08:03:17 PM: Solver (including time spent in interface) took 2.002e-01 seconds
Iteration: 11, Objective: 0.4500
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:17 PM: Your problem has 5129 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:17 PM: Finished problem compilation (took 4.640e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5129
  constraints   = 10129
  nnz(P)        = 0
  nnz(A)        = 86030
  cones (total) = 1
    : Nonnegative = 1,  numel = 10129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8031e-01  +1.0858e+03  1.09e+03  4.34e-01  7.72e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3138e-01  +1.2200e+02  1.21e+02  1.70e-01  3.85e+01  1.64e-02  2.75e-01  9.36e-01  
  3  +5.0869e-01  +3.1704e+01  3.12e+01  1.23e-01  2.78e+01  4.54e-05  2.56e-01  2.88e-01  
  4  +5.0105e-01  +3.1528e+00  2.65e+00  1.81e-02  4.21e+00  5.87e-06  1.64e-01  6.09e-01  
  5  +5.0016e-01  +1.1048e+00  6.05e-01  4.08e-03  9.70e-01  3.98e-05  9.84e-02  8.87e-01  
  6  +5.0005e-01  +7.9701e-01  2.97e-01  1.99e-03  4.75e-01  3.26e-05  3.92e-02  6.52e-01  
  7  +4.9981e-01  +7.8338e-01  2.84e-01  1.28e-03  3.06e-01  1.52e-04  5.63e-03  9.28e-01  
  8  +4.9588e-01  +7.5823e-01  2.62e-01  1.21e-04  2.92e-02  1.97e-03  3.74e-04  9.34e-01  
  9  +4.9320e-01  +7.1491e-01  2.22e-01  8.61e-05  2.08e-02  1.58e-03  2.67e-04  4.17e-01  
 10  +4.9073e-01  +6.9105e-01  2.00e-01  6.60e-05  1.59e-02  1.36e-03  2.05e-04  3.47e-01  
 11  +4.9037e-01  +6.7750e-01  1.87e-01  6.13e-05  1.48e-02  8.91e-04  1.90e-04  2.98e-01  
 12  +4.8864e-01  +6.4977e-01  1.61e-01  5.49e-05  1.32e-02  2.17e-04  1.72e-04  5.66e-01  
 13  +4.8229e-01  +6.1369e-01  1.31e-01  3.84e-05  9.24e-03  1.66e-04  1.23e-04  3.64e-01  
 14  +4.8206e-01  +6.1102e-01  1.29e-01  3.78e-05  9.10e-03  1.33e-04  1.22e-04  1.61e-01  
 15  +4.6947e-01  +5.4329e-01  7.38e-02  1.85e-05  4.43e-03  3.50e-05  6.24e-05  7.10e-01  
 16  +4.6297e-01  +5.1296e-01  5.00e-02  1.15e-05  2.76e-03  2.01e-05  3.99e-05  4.61e-01  
 17  +4.6225e-01  +5.0959e-01  4.73e-02  1.10e-05  2.63e-03  1.53e-05  3.84e-05  2.21e-01  
 18  +4.5544e-01  +4.7918e-01  2.37e-02  5.16e-06  1.24e-03  5.76e-06  1.87e-05  6.44e-01  
 19  +4.5543e-01  +4.7910e-01  2.37e-02  5.14e-06  1.23e-03  5.69e-06  1.86e-05  1.43e-02  
 20  +4.5526e-01  +4.7787e-01  2.26e-02  4.85e-06  1.17e-03  4.21e-06  1.76e-05  3.39e-01  
 21  +4.5205e-01  +4.6364e-01  1.16e-02  2.42e-06  5.81e-04  6.93e-07  8.97e-06  9.90e-01  
 22  +4.5162e-01  +4.6194e-01  1.03e-02  2.13e-06  5.12e-04  6.19e-07  7.94e-06  1.44e-01  
 23  +4.5125e-01  +4.6028e-01  9.02e-03  1.89e-06  4.54e-04  4.85e-07  7.13e-06  7.35e-01  
 24  +4.5100e-01  +4.5925e-01  8.25e-03  1.73e-06  4.14e-04  4.42e-07  6.51e-06  2.65e-01  
 25  +4.4972e-01  +4.5415e-01  4.43e-03  9.22e-07  2.21e-04  2.38e-07  3.51e-06  5.89e-01  
 26  +4.4921e-01  +4.5230e-01  3.09e-03  6.33e-07  1.52e-04  1.64e-07  2.42e-06  5.12e-01  
 27  +4.4818e-01  +4.4825e-01  7.59e-05  1.55e-08  3.73e-06  3.93e-09  6.01e-08  9.77e-01  
 28  +4.4815e-01  +4.4815e-01  7.60e-07  1.55e-10  3.73e-08  3.94e-11  6.03e-10  9.90e-01  
 29  +4.4815e-01  +4.4815e-01  7.60e-09  1.55e-12  3.73e-10  3.97e-13  6.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.0857ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:17 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:17 PM: Optimal value: 4.482e-01
(CVXPY) Sep 20 08:03:17 PM: Compilation took 4.640e-02 seconds
(CVXPY) Sep 20 08:03:17 PM: Solver (including time spent in interface) took 2.201e-01 seconds
Iteration: 12, Objective: 0.4482
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:18 PM: Your problem has 5139 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:18 PM: Finished problem compilation (took 4.422e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5139
  constraints   = 10139
  nnz(P)        = 0
  nnz(A)        = 87108
  cones (total) = 1
    : Nonnegative = 1,  numel = 10139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8028e-01  +1.0858e+03  1.09e+03  4.34e-01  7.72e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3136e-01  +1.2197e+02  1.21e+02  1.70e-01  3.84e+01  1.64e-02  2.75e-01  9.37e-01  
  3  +5.0869e-01  +3.1692e+01  3.12e+01  1.23e-01  2.78e+01  4.54e-05  2.55e-01  2.89e-01  
  4  +5.0105e-01  +3.1500e+00  2.65e+00  1.81e-02  4.21e+00  5.88e-06  1.63e-01  6.11e-01  
  5  +5.0013e-01  +1.0361e+00  5.36e-01  3.62e-03  8.60e-01  4.11e-05  9.11e-02  9.77e-01  
  6  +5.0004e-01  +7.7725e-01  2.77e-01  1.85e-03  4.42e-01  3.80e-05  3.21e-02  7.06e-01  
  7  +4.9948e-01  +7.9515e-01  2.96e-01  8.45e-04  2.03e-01  3.15e-04  3.04e-03  9.68e-01  
  8  +4.9428e-01  +7.5989e-01  2.66e-01  1.02e-04  2.46e-02  2.58e-03  3.14e-04  8.97e-01  
  9  +4.9250e-01  +7.1514e-01  2.23e-01  8.40e-05  2.03e-02  1.47e-03  2.59e-04  3.79e-01  
 10  +4.9061e-01  +6.9479e-01  2.04e-01  6.79e-05  1.64e-02  1.23e-03  2.10e-04  3.16e-01  
 11  +4.9041e-01  +6.9084e-01  2.00e-01  6.76e-05  1.63e-02  1.13e-03  2.09e-04  3.95e-02  
 12  +4.8867e-01  +6.7387e-01  1.85e-01  5.85e-05  1.41e-02  8.75e-04  1.82e-04  2.72e-01  
 13  +4.8392e-01  +6.2714e-01  1.43e-01  4.36e-05  1.05e-02  1.98e-04  1.38e-04  6.43e-01  
 14  +4.7589e-01  +5.8217e-01  1.06e-01  2.86e-05  6.87e-03  1.29e-04  9.34e-05  4.00e-01  
 15  +4.7100e-01  +5.5588e-01  8.49e-02  2.13e-05  5.13e-03  7.91e-05  7.09e-05  3.96e-01  
 16  +4.6819e-01  +5.3963e-01  7.14e-02  1.70e-05  4.09e-03  2.43e-05  5.71e-05  6.74e-01  
 17  +4.6052e-01  +5.0390e-01  4.34e-02  9.71e-06  2.33e-03  1.30e-05  3.36e-05  4.71e-01  
 18  +4.5704e-01  +4.8764e-01  3.06e-02  6.64e-06  1.59e-03  7.49e-06  2.34e-05  4.50e-01  
 19  +4.5502e-01  +4.7815e-01  2.31e-02  4.91e-06  1.18e-03  4.48e-06  1.74e-05  4.58e-01  
 20  +4.5293e-01  +4.6807e-01  1.51e-02  3.12e-06  7.50e-04  9.13e-07  1.12e-05  9.90e-01  
 21  +4.5198e-01  +4.6420e-01  1.22e-02  2.49e-06  5.99e-04  7.35e-07  8.98e-06  2.66e-01  
 22  +4.5116e-01  +4.6079e-01  9.62e-03  1.96e-06  4.71e-04  5.29e-07  7.13e-06  9.58e-01  
 23  +4.5090e-01  +4.5966e-01  8.76e-03  1.79e-06  4.28e-04  4.82e-07  6.48e-06  4.31e-01  
 24  +4.4913e-01  +4.5268e-01  3.54e-03  7.15e-07  1.72e-04  1.94e-07  2.64e-06  6.19e-01  
 25  +4.4823e-01  +4.4910e-01  8.69e-04  1.74e-07  4.19e-05  4.77e-08  6.51e-07  7.85e-01  
 26  +4.4817e-01  +4.4890e-01  7.27e-04  1.44e-07  3.46e-05  3.99e-08  5.41e-07  2.96e-01  
 27  +4.4811e-01  +4.4866e-01  5.51e-04  1.08e-07  2.60e-05  3.02e-08  4.10e-07  2.78e-01  
 28  +4.4792e-01  +4.4799e-01  6.28e-05  1.20e-08  2.89e-06  3.46e-09  4.65e-08  9.12e-01  
 29  +4.4790e-01  +4.4790e-01  9.14e-07  1.74e-10  4.19e-08  5.04e-11  6.76e-10  9.85e-01  
 30  +4.4790e-01  +4.4790e-01  9.14e-09  1.74e-12  4.19e-10  5.04e-13  6.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.6823ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:18 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:18 PM: Optimal value: 4.479e-01
(CVXPY) Sep 20 08:03:18 PM: Compilation took 4.422e-02 seconds
(CVXPY) Sep 20 08:03:18 PM: Solver (including time spent in interface) took 2.300e-01 seconds
Iteration: 13, Objective: 0.4479
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:18 PM: Your problem has 5149 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:18 PM: Finished problem compilation (took 4.367e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5149
  constraints   = 10149
  nnz(P)        = 0
  nnz(A)        = 88184
  cones (total) = 1
    : Nonnegative = 1,  numel = 10149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8023e-01  +1.0858e+03  1.09e+03  4.34e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3133e-01  +1.2190e+02  1.21e+02  1.70e-01  3.84e+01  1.64e-02  2.75e-01  9.37e-01  
  3  +5.0868e-01  +3.1672e+01  3.12e+01  1.22e-01  2.77e+01  4.54e-05  2.55e-01  2.90e-01  
  4  +5.0105e-01  +3.1462e+00  2.65e+00  1.81e-02  4.21e+00  5.89e-06  1.63e-01  6.12e-01  
  5  +5.0013e-01  +1.0321e+00  5.32e-01  3.59e-03  8.54e-01  4.13e-05  8.93e-02  9.90e-01  
  6  +5.0003e-01  +7.7967e-01  2.80e-01  1.87e-03  4.45e-01  3.97e-05  3.08e-02  7.14e-01  
  7  +4.9950e-01  +7.9208e-01  2.93e-01  8.77e-04  2.11e-01  3.06e-04  3.17e-03  9.47e-01  
  8  +4.9384e-01  +7.5708e-01  2.63e-01  9.58e-05  2.31e-02  2.80e-03  2.93e-04  9.08e-01  
  9  +4.9155e-01  +7.2026e-01  2.29e-01  7.84e-05  1.89e-02  2.02e-03  2.40e-04  3.14e-01  
 10  +4.8942e-01  +7.0111e-01  2.12e-01  6.44e-05  1.55e-02  1.81e-03  1.98e-04  2.62e-01  
 11  +4.8850e-01  +6.8592e-01  1.97e-01  6.25e-05  1.51e-02  1.36e-03  1.93e-04  1.38e-01  
 12  +4.8282e-01  +6.3882e-01  1.56e-01  4.53e-05  1.09e-02  7.38e-04  1.43e-04  4.47e-01  
 13  +4.7730e-01  +6.0124e-01  1.24e-01  3.36e-05  8.09e-03  3.57e-04  1.08e-04  4.78e-01  
 14  +4.6736e-01  +5.4358e-01  7.62e-02  1.85e-05  4.44e-03  6.26e-05  6.16e-05  7.60e-01  
 15  +4.6033e-01  +5.0969e-01  4.94e-02  1.12e-05  2.69e-03  3.51e-05  3.84e-05  4.50e-01  
 16  +4.5695e-01  +4.9250e-01  3.55e-02  7.63e-06  1.83e-03  8.78e-06  2.64e-05  7.87e-01  
 17  +4.5184e-01  +4.6963e-01  1.78e-02  3.67e-06  8.81e-04  2.28e-06  1.30e-05  8.15e-01  
 18  +4.5166e-01  +4.6861e-01  1.70e-02  3.52e-06  8.45e-04  1.81e-06  1.25e-05  2.99e-01  
 19  +4.5106e-01  +4.6603e-01  1.50e-02  3.09e-06  7.41e-04  1.45e-06  1.10e-05  3.01e-01  
 20  +4.5071e-01  +4.6464e-01  1.39e-02  2.83e-06  6.79e-04  1.23e-06  1.01e-05  2.98e-01  
 21  +4.4909e-01  +4.5791e-01  8.82e-03  1.77e-06  4.26e-04  4.99e-07  6.39e-06  9.90e-01  
 22  +4.4703e-01  +4.4983e-01  2.80e-03  5.57e-07  1.34e-04  1.50e-07  2.05e-06  9.90e-01  
 23  +4.4630e-01  +4.4711e-01  8.11e-04  1.57e-07  3.77e-05  4.45e-08  5.89e-07  7.72e-01  
 24  +4.4602e-01  +4.4606e-01  4.18e-05  8.04e-09  1.93e-06  2.29e-09  3.03e-08  9.52e-01  
 25  +4.4600e-01  +4.4600e-01  4.20e-07  8.08e-11  1.94e-08  2.30e-11  3.05e-10  9.90e-01  
 26  +4.4600e-01  +4.4600e-01  4.20e-09  8.08e-13  1.94e-10  2.30e-13  3.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 196.6402ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:18 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:18 PM: Optimal value: 4.460e-01
(CVXPY) Sep 20 08:03:18 PM: Compilation took 4.367e-02 seconds
(CVXPY) Sep 20 08:03:18 PM: Solver (including time spent in interface) took 2.092e-01 seconds
Iteration: 14, Objective: 0.4460
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:18 PM: Your problem has 5159 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:18 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:18 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:18 PM: Finished problem compilation (took 4.478e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5159
  constraints   = 10159
  nnz(P)        = 0
  nnz(A)        = 89522
  cones (total) = 1
    : Nonnegative = 1,  numel = 10159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8020e-01  +1.0857e+03  1.09e+03  4.34e-01  7.71e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3131e-01  +1.2185e+02  1.21e+02  1.70e-01  3.83e+01  1.64e-02  2.75e-01  9.37e-01  
  3  +5.0867e-01  +3.1654e+01  3.11e+01  1.22e-01  2.77e+01  4.54e-05  2.55e-01  2.90e-01  
  4  +5.0105e-01  +3.1431e+00  2.64e+00  1.81e-02  4.20e+00  5.90e-06  1.62e-01  6.13e-01  
  5  +5.0013e-01  +1.0399e+00  5.40e-01  3.65e-03  8.67e-01  4.15e-05  8.86e-02  9.90e-01  
  6  +5.0003e-01  +7.7822e-01  2.78e-01  1.86e-03  4.43e-01  4.13e-05  2.87e-02  7.36e-01  
  7  +4.9899e-01  +8.2653e-01  3.28e-01  5.78e-04  1.39e-01  5.63e-04  1.89e-03  9.90e-01  
  8  +4.9335e-01  +7.8426e-01  2.91e-01  1.03e-04  2.49e-02  2.80e-03  3.15e-04  8.37e-01  
  9  +4.9095e-01  +7.4128e-01  2.50e-01  8.27e-05  2.00e-02  2.01e-03  2.53e-04  3.29e-01  
 10  +4.8964e-01  +7.1647e-01  2.27e-01  7.12e-05  1.72e-02  1.46e-03  2.18e-04  2.97e-01  
 11  +4.8909e-01  +7.0735e-01  2.18e-01  7.07e-05  1.71e-02  1.27e-03  2.18e-04  5.08e-02  
 12  +4.7965e-01  +6.3523e-01  1.56e-01  4.18e-05  1.01e-02  8.11e-04  1.33e-04  4.79e-01  
 13  +4.7009e-01  +5.6999e-01  9.99e-02  2.53e-05  6.08e-03  2.78e-04  8.36e-05  5.73e-01  
 14  +4.6321e-01  +5.3217e-01  6.90e-02  1.65e-05  3.96e-03  1.69e-04  5.59e-05  3.91e-01  
 15  +4.5982e-01  +5.1310e-01  5.33e-02  1.22e-05  2.93e-03  9.73e-05  4.18e-05  4.42e-01  
 16  +4.5549e-01  +4.9128e-01  3.58e-02  7.90e-06  1.90e-03  5.57e-05  2.76e-05  4.35e-01  
 17  +4.5137e-01  +4.6940e-01  1.80e-02  3.79e-06  9.10e-04  3.90e-06  1.34e-05  9.60e-01  
 18  +4.5122e-01  +4.6861e-01  1.74e-02  3.69e-06  8.87e-04  3.35e-06  1.31e-05  1.47e-01  
 19  +4.4949e-01  +4.6113e-01  1.16e-02  2.44e-06  5.87e-04  2.03e-06  8.73e-06  4.27e-01  
 20  +4.4949e-01  +4.6127e-01  1.18e-02  2.44e-06  5.86e-04  2.01e-06  8.70e-06  6.08e-02  
 21  +4.4735e-01  +4.5216e-01  4.81e-03  9.88e-07  2.37e-04  2.66e-07  3.56e-06  9.90e-01  
 22  +4.4601e-01  +4.4662e-01  6.10e-04  1.25e-07  3.00e-05  3.31e-08  4.55e-07  9.41e-01  
 23  +4.4583e-01  +4.4592e-01  9.01e-05  1.85e-08  4.44e-06  4.83e-09  6.77e-08  8.75e-01  
 24  +4.4580e-01  +4.4580e-01  3.61e-06  7.43e-10  1.78e-07  1.93e-10  2.72e-09  9.78e-01  
 25  +4.4580e-01  +4.4580e-01  3.76e-08  7.73e-12  1.85e-09  2.01e-12  2.83e-11  9.90e-01  
 26  +4.4580e-01  +4.4580e-01  3.88e-10  7.98e-14  1.92e-11  2.06e-14  2.90e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 189.9718ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:19 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:19 PM: Optimal value: 4.458e-01
(CVXPY) Sep 20 08:03:19 PM: Compilation took 4.478e-02 seconds
(CVXPY) Sep 20 08:03:19 PM: Solver (including time spent in interface) took 2.021e-01 seconds
Iteration: 15, Objective: 0.4458
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:19 PM: Your problem has 5169 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:19 PM: Finished problem compilation (took 4.487e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5169
  constraints   = 10169
  nnz(P)        = 0
  nnz(A)        = 90453
  cones (total) = 1
    : Nonnegative = 1,  numel = 10169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8009e-01  +1.0860e+03  1.09e+03  4.35e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3123e-01  +1.2171e+02  1.21e+02  1.70e-01  3.82e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0866e-01  +3.1622e+01  3.11e+01  1.22e-01  2.76e+01  4.55e-05  2.55e-01  2.93e-01  
  4  +5.0105e-01  +3.1464e+00  2.65e+00  1.81e-02  4.21e+00  5.91e-06  1.62e-01  6.14e-01  
  5  +5.0014e-01  +1.0574e+00  5.57e-01  3.77e-03  8.95e-01  4.23e-05  8.77e-02  9.90e-01  
  6  +5.0001e-01  +7.5717e-01  2.57e-01  1.71e-03  4.07e-01  4.42e-05  2.29e-02  8.22e-01  
  7  +4.9835e-01  +8.0869e-01  3.10e-01  3.71e-04  8.95e-02  8.75e-04  1.17e-03  9.73e-01  
  8  +4.9318e-01  +7.6673e-01  2.74e-01  1.03e-04  2.50e-02  2.60e-03  3.15e-04  7.41e-01  
  9  +4.9051e-01  +7.3244e-01  2.42e-01  8.29e-05  2.00e-02  2.09e-03  2.54e-04  2.96e-01  
 10  +4.8822e-01  +7.0648e-01  2.18e-01  6.88e-05  1.66e-02  1.64e-03  2.12e-04  2.86e-01  
 11  +4.8719e-01  +6.9085e-01  2.04e-01  6.22e-05  1.50e-02  1.18e-03  1.92e-04  2.73e-01  
 12  +4.8057e-01  +6.3295e-01  1.52e-01  4.45e-05  1.07e-02  4.37e-04  1.41e-04  5.25e-01  
 13  +4.7031e-01  +5.7113e-01  1.01e-01  2.64e-05  6.35e-03  1.99e-04  8.71e-05  5.24e-01  
 14  +4.5776e-01  +5.0340e-01  4.56e-02  1.07e-05  2.56e-03  4.40e-05  3.68e-05  7.51e-01  
 15  +4.5455e-01  +4.8716e-01  3.26e-02  7.30e-06  1.75e-03  1.85e-05  2.54e-05  6.08e-01  
 16  +4.5231e-01  +4.7585e-01  2.35e-02  5.03e-06  1.21e-03  4.23e-06  1.76e-05  8.51e-01  
 17  +4.5192e-01  +4.7390e-01  2.20e-02  4.74e-06  1.14e-03  2.93e-06  1.66e-05  3.84e-01  
 18  +4.5021e-01  +4.6631e-01  1.61e-02  3.44e-06  8.25e-04  1.93e-06  1.21e-05  4.00e-01  
 19  +4.4988e-01  +4.6490e-01  1.50e-02  3.13e-06  7.51e-04  1.39e-06  1.10e-05  4.99e-01  
 20  +4.4895e-01  +4.6058e-01  1.16e-02  2.44e-06  5.85e-04  6.39e-07  8.65e-06  9.90e-01  
 21  +4.4674e-01  +4.5135e-01  4.61e-03  9.53e-07  2.29e-04  2.55e-07  3.42e-06  7.73e-01  
 22  +4.4562e-01  +4.4676e-01  1.14e-03  2.35e-07  5.64e-05  6.08e-08  8.52e-07  8.86e-01  
 23  +4.4529e-01  +4.4547e-01  1.80e-04  3.70e-08  8.87e-06  9.53e-09  1.34e-07  8.91e-01  
 24  +4.4524e-01  +4.4526e-01  1.79e-05  3.68e-09  8.82e-07  9.53e-10  1.34e-08  9.53e-01  
 25  +4.4523e-01  +4.4523e-01  1.82e-07  3.73e-11  8.96e-09  9.68e-12  1.36e-10  9.90e-01  
 26  +4.4523e-01  +4.4523e-01  1.82e-09  3.75e-13  8.99e-11  9.75e-14  1.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 184.885ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:19 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:19 PM: Optimal value: 4.452e-01
(CVXPY) Sep 20 08:03:19 PM: Compilation took 4.487e-02 seconds
(CVXPY) Sep 20 08:03:19 PM: Solver (including time spent in interface) took 1.952e-01 seconds
Iteration: 16, Objective: 0.4452
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:19 PM: Your problem has 5179 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:19 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:19 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:19 PM: Finished problem compilation (took 4.531e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5179
  constraints   = 10179
  nnz(P)        = 0
  nnz(A)        = 91387
  cones (total) = 1
    : Nonnegative = 1,  numel = 10179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8006e-01  +1.0860e+03  1.09e+03  4.35e-01  7.71e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3121e-01  +1.2167e+02  1.21e+02  1.70e-01  3.82e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0865e-01  +3.1609e+01  3.11e+01  1.22e-01  2.76e+01  4.56e-05  2.54e-01  2.93e-01  
  4  +5.0105e-01  +3.1464e+00  2.65e+00  1.81e-02  4.21e+00  5.91e-06  1.62e-01  6.15e-01  
  5  +5.0014e-01  +1.0605e+00  5.60e-01  3.79e-03  9.00e-01  4.24e-05  8.73e-02  9.90e-01  
  6  +5.0002e-01  +7.6272e-01  2.63e-01  1.75e-03  4.16e-01  4.47e-05  2.34e-02  8.04e-01  
  7  +4.9879e-01  +7.9969e-01  3.01e-01  4.75e-04  1.15e-01  6.54e-04  1.53e-03  9.59e-01  
  8  +4.9376e-01  +7.6428e-01  2.71e-01  1.08e-04  2.61e-02  2.55e-03  3.28e-04  7.90e-01  
  9  +4.9102e-01  +7.3316e-01  2.42e-01  8.57e-05  2.07e-02  2.23e-03  2.62e-04  2.76e-01  
 10  +4.8878e-01  +7.0726e-01  2.18e-01  7.02e-05  1.69e-02  1.72e-03  2.15e-04  3.19e-01  
 11  +4.8635e-01  +6.6903e-01  1.83e-01  5.80e-05  1.40e-02  4.35e-04  1.79e-04  6.20e-01  
 12  +4.7677e-01  +6.0811e-01  1.31e-01  3.63e-05  8.73e-03  2.30e-04  1.16e-04  4.97e-01  
 13  +4.6493e-01  +5.4261e-01  7.77e-02  1.92e-05  4.62e-03  7.81e-05  6.47e-05  6.20e-01  
 14  +4.5927e-01  +5.1447e-01  5.52e-02  1.29e-05  3.10e-03  4.55e-05  4.44e-05  4.29e-01  
 15  +4.5477e-01  +4.9237e-01  3.76e-02  8.33e-06  2.00e-03  1.88e-05  2.92e-05  6.12e-01  
 16  +4.5062e-01  +4.7266e-01  2.20e-02  4.68e-06  1.12e-03  4.08e-06  1.67e-05  8.35e-01  
 17  +4.5013e-01  +4.7059e-01  2.05e-02  4.30e-06  1.03e-03  3.49e-06  1.54e-05  1.85e-01  
 18  +4.4682e-01  +4.5631e-01  9.49e-03  1.94e-06  4.65e-04  8.17e-07  7.14e-06  8.86e-01  
 19  +4.4671e-01  +4.5576e-01  9.05e-03  1.87e-06  4.48e-04  6.97e-07  6.90e-06  2.76e-01  
 20  +4.4635e-01  +4.5429e-01  7.94e-03  1.63e-06  3.91e-04  5.65e-07  6.04e-06  3.49e-01  
 21  +4.4584e-01  +4.5227e-01  6.43e-03  1.31e-06  3.13e-04  4.31e-07  4.85e-06  4.13e-01  
 22  +4.4404e-01  +4.4523e-01  1.19e-03  2.39e-07  5.72e-05  7.07e-08  9.06e-07  9.12e-01  
 23  +4.4363e-01  +4.4365e-01  1.77e-05  3.54e-09  8.49e-07  1.03e-09  1.35e-08  9.87e-01  
 24  +4.4363e-01  +4.4363e-01  1.77e-07  3.54e-11  8.49e-09  1.03e-11  1.35e-10  9.90e-01  
 25  +4.4363e-01  +4.4363e-01  1.77e-09  3.54e-13  8.49e-11  1.04e-13  1.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 314.4722ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:20 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:20 PM: Optimal value: 4.436e-01
(CVXPY) Sep 20 08:03:20 PM: Compilation took 4.531e-02 seconds
(CVXPY) Sep 20 08:03:20 PM: Solver (including time spent in interface) took 3.277e-01 seconds
Iteration: 17, Objective: 0.4436
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:20 PM: Your problem has 5189 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:20 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:20 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:20 PM: Finished problem compilation (took 8.143e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5189
  constraints   = 10189
  nnz(P)        = 0
  nnz(A)        = 92211
  cones (total) = 1
    : Nonnegative = 1,  numel = 10189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.8002e-01  +1.0859e+03  1.09e+03  4.35e-01  7.70e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3118e-01  +1.2161e+02  1.21e+02  1.70e-01  3.81e+01  1.64e-02  2.75e-01  9.39e-01  
  3  +5.0865e-01  +3.1592e+01  3.11e+01  1.22e-01  2.75e+01  4.56e-05  2.54e-01  2.94e-01  
  4  +5.0105e-01  +3.1443e+00  2.64e+00  1.81e-02  4.21e+00  5.92e-06  1.61e-01  6.16e-01  
  5  +5.0017e-01  +1.1235e+00  6.23e-01  4.22e-03  1.00e+00  4.16e-05  9.17e-02  9.24e-01  
  6  +5.0004e-01  +8.0671e-01  3.07e-01  2.05e-03  4.88e-01  4.03e-05  3.02e-02  7.32e-01  
  7  +4.9964e-01  +8.0862e-01  3.09e-01  1.09e-03  2.63e-01  2.37e-04  4.12e-03  8.91e-01  
  8  +4.9484e-01  +7.7781e-01  2.83e-01  1.17e-04  2.83e-02  2.37e-03  3.55e-04  9.15e-01  
  9  +4.9134e-01  +7.3146e-01  2.40e-01  8.70e-05  2.10e-02  1.88e-03  2.65e-04  3.56e-01  
 10  +4.9088e-01  +7.1283e-01  2.22e-01  7.61e-05  1.84e-02  1.14e-03  2.31e-04  4.07e-01  
 11  +4.9058e-01  +7.0809e-01  2.18e-01  7.55e-05  1.82e-02  1.02e-03  2.29e-04  6.94e-02  
 12  +4.8503e-01  +6.6607e-01  1.81e-01  5.44e-05  1.31e-02  6.59e-04  1.68e-04  4.50e-01  
 13  +4.7675e-01  +6.1340e-01  1.37e-01  3.76e-05  9.05e-03  3.46e-04  1.20e-04  4.47e-01  
 14  +4.6804e-01  +5.6423e-01  9.62e-02  2.45e-05  5.89e-03  1.55e-04  8.13e-05  5.09e-01  
 15  +4.5617e-01  +5.0317e-01  4.70e-02  1.07e-05  2.58e-03  2.75e-05  3.75e-05  7.90e-01  
 16  +4.5218e-01  +4.8372e-01  3.15e-02  6.85e-06  1.64e-03  6.90e-06  2.43e-05  7.97e-01  
 17  +4.5099e-01  +4.7779e-01  2.68e-02  5.71e-06  1.37e-03  3.42e-06  2.03e-05  6.42e-01  
 18  +4.5022e-01  +4.7454e-01  2.43e-02  5.22e-06  1.25e-03  2.48e-06  1.88e-05  3.56e-01  
 19  +4.4843e-01  +4.6663e-01  1.82e-02  3.88e-06  9.30e-04  1.69e-06  1.41e-05  4.02e-01  
 20  +4.4693e-01  +4.6003e-01  1.31e-02  2.75e-06  6.59e-04  9.67e-07  1.00e-05  6.57e-01  
 21  +4.4659e-01  +4.5869e-01  1.21e-02  2.52e-06  6.06e-04  7.78e-07  9.24e-06  5.07e-01  
 22  +4.4506e-01  +4.5230e-01  7.24e-03  1.50e-06  3.60e-04  4.45e-07  5.56e-06  5.70e-01  
 23  +4.4448e-01  +4.4994e-01  5.46e-03  1.12e-06  2.69e-04  3.22e-07  4.17e-06  4.99e-01  
 24  +4.4326e-01  +4.4495e-01  1.69e-03  3.47e-07  8.32e-05  9.47e-08  1.31e-06  8.50e-01  
 25  +4.4280e-01  +4.4319e-01  3.85e-04  7.84e-08  1.88e-05  2.08e-08  2.99e-07  8.86e-01  
 26  +4.4267e-01  +4.4268e-01  6.65e-06  1.35e-09  3.24e-07  3.58e-10  5.18e-09  9.83e-01  
 27  +4.4267e-01  +4.4267e-01  6.66e-08  1.35e-11  3.24e-09  3.58e-12  5.18e-11  9.90e-01  
 28  +4.4267e-01  +4.4267e-01  6.66e-10  1.35e-13  3.25e-11  3.64e-14  5.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 361.4195ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:20 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:20 PM: Optimal value: 4.427e-01
(CVXPY) Sep 20 08:03:20 PM: Compilation took 8.143e-02 seconds
(CVXPY) Sep 20 08:03:20 PM: Solver (including time spent in interface) took 3.766e-01 seconds
Iteration: 18, Objective: 0.4427
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:21 PM: Your problem has 5199 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:21 PM: Finished problem compilation (took 8.222e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5199
  constraints   = 10199
  nnz(P)        = 0
  nnz(A)        = 92829
  cones (total) = 1
    : Nonnegative = 1,  numel = 10199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7998e-01  +1.0859e+03  1.09e+03  4.35e-01  7.69e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3115e-01  +1.2155e+02  1.21e+02  1.70e-01  3.80e+01  1.64e-02  2.74e-01  9.40e-01  
  3  +5.0864e-01  +3.1578e+01  3.11e+01  1.22e-01  2.75e+01  4.56e-05  2.54e-01  2.95e-01  
  4  +5.0105e-01  +3.1447e+00  2.64e+00  1.81e-02  4.21e+00  5.93e-06  1.61e-01  6.16e-01  
  5  +5.0016e-01  +1.1165e+00  6.16e-01  4.18e-03  9.90e-01  4.18e-05  9.05e-02  9.37e-01  
  6  +5.0003e-01  +7.9392e-01  2.94e-01  1.96e-03  4.67e-01  4.13e-05  2.79e-02  7.47e-01  
  7  +4.9926e-01  +8.0968e-01  3.10e-01  6.91e-04  1.67e-01  4.24e-04  2.31e-03  9.43e-01  
  8  +4.9343e-01  +7.7006e-01  2.77e-01  9.66e-05  2.33e-02  2.82e-03  2.91e-04  8.76e-01  
  9  +4.9124e-01  +7.4386e-01  2.53e-01  8.26e-05  1.99e-02  2.30e-03  2.49e-04  2.43e-01  
 10  +4.8998e-01  +7.2051e-01  2.31e-01  7.15e-05  1.73e-02  1.52e-03  2.16e-04  3.50e-01  
 11  +4.8956e-01  +7.1421e-01  2.25e-01  7.10e-05  1.71e-02  1.36e-03  2.15e-04  5.60e-02  
 12  +4.8258e-01  +6.5822e-01  1.76e-01  4.97e-05  1.20e-02  7.28e-04  1.54e-04  4.81e-01  
 13  +4.7324e-01  +6.0117e-01  1.28e-01  3.33e-05  8.01e-03  4.33e-04  1.07e-04  3.85e-01  
 14  +4.6425e-01  +5.4871e-01  8.45e-02  2.05e-05  4.92e-03  1.33e-04  6.86e-05  6.33e-01  
 15  +4.5935e-01  +5.2436e-01  6.50e-02  1.51e-05  3.63e-03  8.97e-05  5.19e-05  3.22e-01  
 16  +4.5613e-01  +5.0456e-01  4.84e-02  1.07e-05  2.56e-03  1.88e-06  3.69e-05  9.90e-01  
 17  +4.4859e-01  +4.7124e-01  2.27e-02  4.84e-06  1.16e-03  8.92e-07  1.75e-05  5.79e-01  
 18  +4.4784e-01  +4.6796e-01  2.01e-02  4.24e-06  1.02e-03  8.13e-07  1.54e-05  1.65e-01  
 19  +4.4744e-01  +4.6546e-01  1.80e-02  3.81e-06  9.14e-04  8.57e-07  1.39e-05  6.46e-01  
 20  +4.4612e-01  +4.5964e-01  1.35e-02  2.82e-06  6.76e-04  6.93e-07  1.03e-05  6.51e-01  
 21  +4.4584e-01  +4.5865e-01  1.28e-02  2.65e-06  6.36e-04  6.68e-07  9.71e-06  3.83e-01  
 22  +4.4306e-01  +4.4722e-01  4.16e-03  8.47e-07  2.03e-04  2.22e-07  3.18e-06  7.37e-01  
 23  +4.4205e-01  +4.4327e-01  1.22e-03  2.44e-07  5.85e-05  6.47e-08  9.35e-07  9.32e-01  
 24  +4.4162e-01  +4.4167e-01  5.18e-05  1.02e-08  2.45e-06  2.75e-09  3.97e-08  9.63e-01  
 25  +4.4160e-01  +4.4160e-01  5.25e-07  1.03e-10  2.48e-08  2.78e-11  4.02e-10  9.90e-01  
 26  +4.4160e-01  +4.4160e-01  5.25e-09  1.03e-12  2.48e-10  2.78e-13  4.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 380.8078ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:21 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:21 PM: Optimal value: 4.416e-01
(CVXPY) Sep 20 08:03:21 PM: Compilation took 8.222e-02 seconds
(CVXPY) Sep 20 08:03:21 PM: Solver (including time spent in interface) took 4.000e-01 seconds
Iteration: 19, Objective: 0.4416
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:22 PM: Your problem has 5209 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:22 PM: Finished problem compilation (took 7.121e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5209
  constraints   = 10209
  nnz(P)        = 0
  nnz(A)        = 93592
  cones (total) = 1
    : Nonnegative = 1,  numel = 10209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7994e-01  +1.0859e+03  1.09e+03  4.35e-01  7.69e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3113e-01  +1.2151e+02  1.21e+02  1.69e-01  3.79e+01  1.64e-02  2.74e-01  9.40e-01  
  3  +5.0863e-01  +3.1561e+01  3.11e+01  1.22e-01  2.74e+01  4.56e-05  2.54e-01  2.95e-01  
  4  +5.0105e-01  +3.1427e+00  2.64e+00  1.81e-02  4.20e+00  5.93e-06  1.61e-01  6.17e-01  
  5  +5.0015e-01  +1.0785e+00  5.78e-01  3.92e-03  9.29e-01  4.30e-05  8.59e-02  9.90e-01  
  6  +5.0003e-01  +8.1358e-01  3.14e-01  2.08e-03  4.96e-01  4.78e-05  2.64e-02  7.69e-01  
  7  +4.9923e-01  +8.1247e-01  3.13e-01  6.92e-04  1.67e-01  4.43e-04  2.31e-03  9.32e-01  
  8  +4.9308e-01  +7.7133e-01  2.78e-01  9.55e-05  2.31e-02  2.97e-03  2.88e-04  8.77e-01  
  9  +4.9089e-01  +7.4762e-01  2.57e-01  8.03e-05  1.94e-02  2.48e-03  2.42e-04  2.68e-01  
 10  +4.9018e-01  +7.3226e-01  2.42e-01  7.39e-05  1.78e-02  1.84e-03  2.23e-04  2.50e-01  
 11  +4.8688e-01  +6.8284e-01  1.96e-01  6.49e-05  1.56e-02  4.36e-04  1.99e-04  5.22e-01  
 12  +4.7805e-01  +6.2934e-01  1.51e-01  4.25e-05  1.02e-02  3.08e-04  1.35e-04  4.06e-01  
 13  +4.6913e-01  +5.7906e-01  1.10e-01  2.84e-05  6.83e-03  1.76e-04  9.33e-05  4.12e-01  
 14  +4.6410e-01  +5.4927e-01  8.52e-02  2.06e-05  4.95e-03  2.58e-05  6.90e-05  8.02e-01  
 15  +4.5466e-01  +5.0301e-01  4.83e-02  1.09e-05  2.62e-03  4.23e-06  3.80e-05  8.54e-01  
 16  +4.4722e-01  +4.6878e-01  2.16e-02  4.66e-06  1.12e-03  1.54e-06  1.69e-05  7.26e-01  
 17  +4.4691e-01  +4.6746e-01  2.06e-02  4.40e-06  1.06e-03  1.45e-06  1.60e-05  1.14e-01  
 18  +4.4497e-01  +4.5869e-01  1.37e-02  2.84e-06  6.82e-04  7.39e-07  1.06e-05  9.90e-01  
 19  +4.4424e-01  +4.5578e-01  1.15e-02  2.36e-06  5.67e-04  6.24e-07  8.89e-06  2.00e-01  
 20  +4.4373e-01  +4.5354e-01  9.81e-03  2.03e-06  4.88e-04  5.12e-07  7.72e-06  8.30e-01  
 21  +4.4203e-01  +4.4687e-01  4.84e-03  9.85e-07  2.36e-04  2.54e-07  3.83e-06  6.11e-01  
 22  +4.4143e-01  +4.4460e-01  3.17e-03  6.36e-07  1.52e-04  1.65e-07  2.49e-06  6.13e-01  
 23  +4.4033e-01  +4.4041e-01  7.74e-05  1.53e-08  3.67e-06  3.92e-09  6.13e-08  9.79e-01  
 24  +4.4030e-01  +4.4030e-01  7.75e-07  1.53e-10  3.68e-08  3.93e-11  6.14e-10  9.90e-01  
 25  +4.4030e-01  +4.4030e-01  7.75e-09  1.53e-12  3.68e-10  3.93e-13  6.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 338.3618ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:22 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:22 PM: Optimal value: 4.403e-01
(CVXPY) Sep 20 08:03:22 PM: Compilation took 7.121e-02 seconds
(CVXPY) Sep 20 08:03:22 PM: Solver (including time spent in interface) took 3.540e-01 seconds
Iteration: 20, Objective: 0.4403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:22 PM: Your problem has 5219 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:22 PM: Finished problem compilation (took 7.018e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5219
  constraints   = 10219
  nnz(P)        = 0
  nnz(A)        = 94198
  cones (total) = 1
    : Nonnegative = 1,  numel = 10219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7993e-01  +1.0858e+03  1.09e+03  4.35e-01  7.68e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3112e-01  +1.2146e+02  1.21e+02  1.69e-01  3.79e+01  1.64e-02  2.74e-01  9.40e-01  
  3  +5.0863e-01  +3.1546e+01  3.10e+01  1.22e-01  2.74e+01  4.56e-05  2.53e-01  2.96e-01  
  4  +5.0105e-01  +3.1409e+00  2.64e+00  1.81e-02  4.20e+00  5.93e-06  1.61e-01  6.17e-01  
  5  +5.0015e-01  +1.0845e+00  5.84e-01  3.96e-03  9.38e-01  4.30e-05  8.58e-02  9.87e-01  
  6  +5.0004e-01  +8.3053e-01  3.30e-01  2.20e-03  5.23e-01  4.77e-05  2.82e-02  7.41e-01  
  7  +4.9943e-01  +8.2151e-01  3.22e-01  8.80e-04  2.12e-01  3.42e-04  3.05e-03  9.17e-01  
  8  +4.9378e-01  +7.8421e-01  2.90e-01  1.07e-04  2.58e-02  2.76e-03  3.22e-04  8.95e-01  
  9  +4.9133e-01  +7.5382e-01  2.62e-01  8.85e-05  2.14e-02  2.31e-03  2.67e-04  2.59e-01  
 10  +4.9014e-01  +7.3450e-01  2.44e-01  7.83e-05  1.89e-02  1.78e-03  2.36e-04  2.64e-01  
 11  +4.8764e-01  +6.8459e-01  1.97e-01  6.52e-05  1.57e-02  1.72e-04  1.99e-04  7.05e-01  
 12  +4.7817e-01  +6.2737e-01  1.49e-01  4.18e-05  1.01e-02  1.09e-04  1.32e-04  4.58e-01  
 13  +4.6782e-01  +5.7032e-01  1.02e-01  2.63e-05  6.32e-03  5.18e-05  8.67e-05  4.95e-01  
 14  +4.6054e-01  +5.3324e-01  7.27e-02  1.74e-05  4.17e-03  2.40e-05  5.91e-05  5.38e-01  
 15  +4.5658e-01  +5.1213e-01  5.56e-02  1.26e-05  3.03e-03  4.94e-06  4.34e-05  8.63e-01  
 16  +4.4762e-01  +4.7117e-01  2.35e-02  5.14e-06  1.23e-03  1.81e-06  1.85e-05  6.69e-01  
 17  +4.4722e-01  +4.6937e-01  2.21e-02  4.78e-06  1.15e-03  1.67e-06  1.72e-05  1.40e-01  
 18  +4.4603e-01  +4.6329e-01  1.73e-02  3.66e-06  8.77e-04  9.40e-07  1.33e-05  9.55e-01  
 19  +4.4473e-01  +4.5789e-01  1.32e-02  2.73e-06  6.55e-04  7.19e-07  1.01e-05  6.05e-01  
 20  +4.4415e-01  +4.5545e-01  1.13e-02  2.38e-06  5.70e-04  5.89e-07  8.91e-06  7.75e-01  
 21  +4.4364e-01  +4.5335e-01  9.71e-03  2.03e-06  4.87e-04  5.07e-07  7.67e-06  3.22e-01  
 22  +4.4235e-01  +4.4817e-01  5.82e-03  1.20e-06  2.88e-04  3.05e-07  4.61e-06  5.80e-01  
 23  +4.4183e-01  +4.4621e-01  4.38e-03  8.87e-07  2.13e-04  2.32e-07  3.42e-06  3.80e-01  
 24  +4.4051e-01  +4.4109e-01  5.79e-04  1.15e-07  2.76e-05  3.02e-08  4.58e-07  8.94e-01  
 25  +4.4030e-01  +4.4031e-01  6.62e-06  1.31e-09  3.14e-07  3.44e-10  5.25e-09  9.89e-01  
 26  +4.4030e-01  +4.4030e-01  6.62e-08  1.31e-11  3.14e-09  3.44e-12  5.25e-11  9.90e-01  
 27  +4.4030e-01  +4.4030e-01  6.62e-10  1.31e-13  3.14e-11  3.59e-14  5.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 377.2136ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:23 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:23 PM: Optimal value: 4.403e-01
(CVXPY) Sep 20 08:03:23 PM: Compilation took 7.018e-02 seconds
(CVXPY) Sep 20 08:03:23 PM: Solver (including time spent in interface) took 3.946e-01 seconds
Iteration: 21, Objective: 0.4403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:23 PM: Your problem has 5229 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:23 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:23 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:23 PM: Finished problem compilation (took 8.579e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5229
  constraints   = 10229
  nnz(P)        = 0
  nnz(A)        = 94623
  cones (total) = 1
    : Nonnegative = 1,  numel = 10229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7984e-01  +1.0860e+03  1.09e+03  4.35e-01  7.68e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3108e-01  +1.2142e+02  1.21e+02  1.69e-01  3.78e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0862e-01  +3.1538e+01  3.10e+01  1.22e-01  2.74e+01  4.57e-05  2.53e-01  2.97e-01  
  4  +5.0105e-01  +3.1457e+00  2.64e+00  1.82e-02  4.21e+00  5.94e-06  1.60e-01  6.18e-01  
  5  +5.0015e-01  +1.0893e+00  5.89e-01  4.00e-03  9.46e-01  4.35e-05  8.53e-02  9.90e-01  
  6  +5.0006e-01  +9.0325e-01  4.03e-01  2.68e-03  6.38e-01  4.94e-05  3.33e-02  7.40e-01  
  7  +4.9961e-01  +8.4010e-01  3.40e-01  1.11e-03  2.67e-01  2.58e-04  4.01e-03  9.08e-01  
  8  +4.9478e-01  +8.0753e-01  3.13e-01  1.26e-04  3.04e-02  2.38e-03  3.77e-04  9.06e-01  
  9  +4.9239e-01  +7.7235e-01  2.80e-01  1.02e-04  2.45e-02  1.99e-03  3.06e-04  2.88e-01  
 10  +4.9043e-01  +7.4747e-01  2.57e-01  8.34e-05  2.01e-02  1.63e-03  2.52e-04  3.09e-01  
 11  +4.8841e-01  +7.0756e-01  2.19e-01  7.46e-05  1.80e-02  6.45e-04  2.27e-04  4.35e-01  
 12  +4.8028e-01  +6.5353e-01  1.73e-01  5.01e-05  1.21e-02  4.62e-04  1.58e-04  3.99e-01  
 13  +4.7941e-01  +6.4520e-01  1.66e-01  4.82e-05  1.16e-02  3.27e-04  1.52e-04  2.28e-01  
 14  +4.6929e-01  +5.8701e-01  1.18e-01  3.09e-05  7.41e-03  1.82e-04  1.02e-04  4.35e-01  
 15  +4.5953e-01  +5.3491e-01  7.54e-02  1.82e-05  4.36e-03  6.74e-05  6.24e-05  6.01e-01  
 16  +4.5678e-01  +5.1888e-01  6.21e-02  1.44e-05  3.45e-03  1.84e-05  4.98e-05  7.40e-01  
 17  +4.4914e-01  +4.8342e-01  3.43e-02  7.67e-06  1.84e-03  9.28e-06  2.76e-05  4.85e-01  
 18  +4.4535e-01  +4.6565e-01  2.03e-02  4.40e-06  1.05e-03  3.96e-06  1.61e-05  6.27e-01  
 19  +4.4513e-01  +4.6418e-01  1.91e-02  4.15e-06  9.93e-04  2.74e-06  1.52e-05  3.84e-01  
 20  +4.4389e-01  +4.5863e-01  1.47e-02  3.18e-06  7.62e-04  1.90e-06  1.18e-05  3.61e-01  
 21  +4.4375e-01  +4.5806e-01  1.43e-02  3.04e-06  7.28e-04  1.60e-06  1.12e-05  2.79e-01  
 22  +4.4147e-01  +4.4819e-01  6.72e-03  1.43e-06  3.41e-04  3.51e-07  5.38e-06  9.90e-01  
 23  +4.4014e-01  +4.4275e-01  2.62e-03  5.46e-07  1.31e-04  1.36e-07  2.11e-06  7.17e-01  
 24  +4.3937e-01  +4.3984e-01  4.74e-04  9.58e-08  2.30e-05  2.43e-08  3.84e-07  8.73e-01  
 25  +4.3923e-01  +4.3932e-01  8.60e-05  1.73e-08  4.15e-06  4.28e-09  6.97e-08  9.90e-01  
 26  +4.3920e-01  +4.3920e-01  8.92e-07  1.79e-10  4.30e-08  4.44e-11  7.23e-10  9.90e-01  
 27  +4.3920e-01  +4.3920e-01  8.92e-09  1.79e-12  4.30e-10  4.44e-13  7.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 430.287ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:24 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:24 PM: Optimal value: 4.392e-01
(CVXPY) Sep 20 08:03:24 PM: Compilation took 8.579e-02 seconds
(CVXPY) Sep 20 08:03:24 PM: Solver (including time spent in interface) took 4.518e-01 seconds
Iteration: 22, Objective: 0.4392
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:24 PM: Your problem has 5239 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:24 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:24 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:24 PM: Finished problem compilation (took 8.580e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:24 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5239
  constraints   = 10239
  nnz(P)        = 0
  nnz(A)        = 95384
  cones (total) = 1
    : Nonnegative = 1,  numel = 10239

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7980e-01  +1.0860e+03  1.09e+03  4.35e-01  7.67e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3107e-01  +1.2141e+02  1.21e+02  1.69e-01  3.77e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0862e-01  +3.1534e+01  3.10e+01  1.22e-01  2.73e+01  4.57e-05  2.53e-01  2.97e-01  
  4  +5.0105e-01  +3.1451e+00  2.64e+00  1.82e-02  4.20e+00  5.95e-06  1.60e-01  6.18e-01  
  5  +5.0015e-01  +1.0947e+00  5.95e-01  4.04e-03  9.55e-01  4.38e-05  8.51e-02  9.90e-01  
  6  +5.0005e-01  +8.8799e-01  3.88e-01  2.57e-03  6.11e-01  5.09e-05  2.98e-02  7.90e-01  
  7  +4.9939e-01  +8.3218e-01  3.33e-01  8.15e-04  1.96e-01  3.66e-04  2.74e-03  9.26e-01  
  8  +4.9393e-01  +7.9492e-01  3.01e-01  1.09e-04  2.63e-02  2.64e-03  3.25e-04  8.83e-01  
  9  +4.9221e-01  +7.7082e-01  2.79e-01  9.36e-05  2.26e-02  2.16e-03  2.80e-04  2.57e-01  
 10  +4.9018e-01  +7.4383e-01  2.54e-01  7.98e-05  1.92e-02  1.64e-03  2.41e-04  2.88e-01  
 11  +4.8894e-01  +7.2372e-01  2.35e-01  7.75e-05  1.87e-02  1.14e-03  2.35e-04  1.70e-01  
 12  +4.7928e-01  +6.5778e-01  1.78e-01  4.89e-05  1.18e-02  8.65e-04  1.54e-04  3.96e-01  
 13  +4.7899e-01  +6.5344e-01  1.74e-01  4.83e-05  1.16e-02  7.23e-04  1.52e-04  1.16e-01  
 14  +4.6889e-01  +5.9124e-01  1.22e-01  3.16e-05  7.59e-03  3.91e-04  1.04e-04  4.11e-01  
 15  +4.6190e-01  +5.5036e-01  8.85e-02  2.16e-05  5.19e-03  1.50e-04  7.33e-05  5.75e-01  
 16  +4.5128e-01  +4.9465e-01  4.34e-02  9.89e-06  2.37e-03  1.88e-05  3.50e-05  8.41e-01  
 17  +4.4625e-01  +4.6972e-01  2.35e-02  5.15e-06  1.23e-03  3.16e-06  1.87e-05  8.92e-01  
 18  +4.4574e-01  +4.6746e-01  2.17e-02  4.72e-06  1.13e-03  2.82e-06  1.71e-05  1.47e-01  
 19  +4.4475e-01  +4.6248e-01  1.77e-02  3.84e-06  9.20e-04  1.07e-06  1.40e-05  9.20e-01  
 20  +4.4426e-01  +4.6032e-01  1.61e-02  3.45e-06  8.26e-04  9.44e-07  1.26e-05  3.66e-01  
 21  +4.4257e-01  +4.5326e-01  1.07e-02  2.28e-06  5.45e-04  5.92e-07  8.41e-06  6.74e-01  
 22  +4.4059e-01  +4.4493e-01  4.33e-03  9.19e-07  2.20e-04  2.37e-07  3.46e-06  6.67e-01  
 23  +4.3959e-01  +4.4075e-01  1.17e-03  2.47e-07  5.92e-05  6.12e-08  9.41e-07  8.65e-01  
 24  +4.3925e-01  +4.3939e-01  1.42e-04  3.00e-08  7.18e-06  7.33e-09  1.15e-07  9.02e-01  
 25  +4.3920e-01  +4.3920e-01  2.60e-06  5.50e-10  1.32e-07  1.34e-10  2.11e-09  9.82e-01  
 26  +4.3920e-01  +4.3920e-01  2.61e-08  5.52e-12  1.32e-09  1.35e-12  2.12e-11  9.90e-01  
 27  +4.3920e-01  +4.3920e-01  3.11e-10  6.57e-14  1.57e-11  1.61e-14  2.53e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 410.0674ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:24 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:24 PM: Optimal value: 4.392e-01
(CVXPY) Sep 20 08:03:24 PM: Compilation took 8.580e-02 seconds
(CVXPY) Sep 20 08:03:24 PM: Solver (including time spent in interface) took 4.291e-01 seconds
Iteration: 23, Objective: 0.4392
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:25 PM: Your problem has 5249 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:25 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:25 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:25 PM: Finished problem compilation (took 8.030e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5249
  constraints   = 10249
  nnz(P)        = 0
  nnz(A)        = 96175
  cones (total) = 1
    : Nonnegative = 1,  numel = 10249

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7979e-01  +1.0860e+03  1.09e+03  4.36e-01  7.67e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3105e-01  +1.2136e+02  1.21e+02  1.69e-01  3.77e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0862e-01  +3.1517e+01  3.10e+01  1.22e-01  2.73e+01  4.57e-05  2.53e-01  2.98e-01  
  4  +5.0105e-01  +3.1439e+00  2.64e+00  1.82e-02  4.20e+00  5.95e-06  1.60e-01  6.18e-01  
  5  +5.0019e-01  +1.1831e+00  6.83e-01  4.64e-03  1.10e+00  4.24e-05  9.15e-02  9.00e-01  
  6  +5.0008e-01  +9.1591e-01  4.16e-01  2.79e-03  6.61e-01  4.37e-05  3.77e-02  6.76e-01  
  7  +4.9977e-01  +8.5570e-01  3.56e-01  1.43e-03  3.43e-01  1.84e-04  5.63e-03  8.82e-01  
  8  +4.9575e-01  +8.2641e-01  3.31e-01  1.51e-04  3.65e-02  1.99e-03  4.53e-04  9.21e-01  
  9  +4.9182e-01  +7.7287e-01  2.81e-01  1.02e-04  2.45e-02  1.84e-03  3.07e-04  4.04e-01  
 10  +4.9095e-01  +7.5248e-01  2.62e-01  8.69e-05  2.10e-02  1.33e-03  2.62e-04  3.58e-01  
 11  +4.8793e-01  +6.9584e-01  2.08e-01  7.36e-05  1.77e-02  1.49e-04  2.25e-04  6.64e-01  
 12  +4.7926e-01  +6.4000e-01  1.61e-01  4.75e-05  1.14e-02  4.69e-05  1.50e-04  7.11e-01  
 13  +4.7032e-01  +5.9108e-01  1.21e-01  3.27e-05  7.84e-03  2.47e-05  1.07e-04  4.69e-01  
 14  +4.6379e-01  +5.5761e-01  9.38e-02  2.40e-05  5.74e-03  1.57e-05  8.08e-05  3.76e-01  
 15  +4.5280e-01  +5.0176e-01  4.90e-02  1.14e-05  2.73e-03  1.86e-06  4.01e-05  9.51e-01  
 16  +4.4684e-01  +4.7327e-01  2.64e-02  5.89e-06  1.41e-03  1.30e-06  2.12e-05  9.90e-01  
 17  +4.4633e-01  +4.7091e-01  2.46e-02  5.41e-06  1.30e-03  1.23e-06  1.95e-05  2.14e-01  
 18  +4.4589e-01  +4.6878e-01  2.29e-02  5.06e-06  1.21e-03  1.15e-06  1.83e-05  4.25e-01  
 19  +4.4373e-01  +4.5927e-01  1.55e-02  3.41e-06  8.17e-04  7.85e-07  1.25e-05  3.90e-01  
 20  +4.4374e-01  +4.5932e-01  1.56e-02  3.39e-06  8.11e-04  7.97e-07  1.23e-05  1.22e-01  
 21  +4.4289e-01  +4.5571e-01  1.28e-02  2.76e-06  6.61e-04  6.58e-07  1.01e-05  2.12e-01  
 22  +4.4206e-01  +4.5180e-01  9.73e-03  2.10e-06  5.04e-04  4.99e-07  7.74e-06  9.90e-01  
 23  +4.4084e-01  +4.4679e-01  5.95e-03  1.27e-06  3.04e-04  3.07e-07  4.72e-06  4.49e-01  
 24  +4.3927e-01  +4.4037e-01  1.10e-03  2.34e-07  5.59e-05  5.66e-08  8.80e-07  8.88e-01  
 25  +4.3900e-01  +4.3928e-01  2.84e-04  6.03e-08  1.44e-05  1.43e-08  2.28e-07  9.90e-01  
 26  +4.3890e-01  +4.3890e-01  3.28e-06  6.96e-10  1.67e-07  1.65e-10  2.63e-09  9.89e-01  
 27  +4.3890e-01  +4.3890e-01  3.36e-08  7.12e-12  1.71e-09  1.69e-12  2.70e-11  9.90e-01  
 28  +4.3890e-01  +4.3890e-01  4.90e-10  1.04e-13  2.49e-11  2.48e-14  3.96e-13  9.85e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 406.0676ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:25 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:25 PM: Optimal value: 4.389e-01
(CVXPY) Sep 20 08:03:25 PM: Compilation took 8.030e-02 seconds
(CVXPY) Sep 20 08:03:25 PM: Solver (including time spent in interface) took 4.264e-01 seconds
Iteration: 24, Objective: 0.4389
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:26 PM: Your problem has 5259 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:26 PM: Finished problem compilation (took 8.296e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5259
  constraints   = 10259
  nnz(P)        = 0
  nnz(A)        = 96744
  cones (total) = 1
    : Nonnegative = 1,  numel = 10259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7975e-01  +1.0860e+03  1.09e+03  4.36e-01  7.66e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3102e-01  +1.2131e+02  1.21e+02  1.69e-01  3.76e+01  1.65e-02  2.74e-01  9.41e-01  
  3  +5.0861e-01  +3.1505e+01  3.10e+01  1.22e-01  2.72e+01  4.58e-05  2.53e-01  2.99e-01  
  4  +5.0105e-01  +3.1449e+00  2.64e+00  1.82e-02  4.20e+00  5.95e-06  1.60e-01  6.19e-01  
  5  +5.0020e-01  +1.2142e+00  7.14e-01  4.86e-03  1.15e+00  4.21e-05  9.32e-02  8.74e-01  
  6  +5.0008e-01  +9.2515e-01  4.25e-01  2.85e-03  6.76e-01  4.27e-05  3.89e-02  6.68e-01  
  7  +4.9975e-01  +8.5224e-01  3.52e-01  1.33e-03  3.19e-01  1.95e-04  5.06e-03  9.08e-01  
  8  +4.9566e-01  +8.2498e-01  3.29e-01  1.45e-04  3.49e-02  2.01e-03  4.31e-04  9.15e-01  
  9  +4.9123e-01  +7.6918e-01  2.78e-01  9.43e-05  2.27e-02  1.87e-03  2.84e-04  4.31e-01  
 10  +4.9007e-01  +7.5024e-01  2.60e-01  8.53e-05  2.06e-02  1.46e-03  2.58e-04  2.28e-01  
 11  +4.8766e-01  +7.0876e-01  2.21e-01  7.67e-05  1.85e-02  5.38e-04  2.35e-04  4.40e-01  
 12  +4.7702e-01  +6.3897e-01  1.62e-01  4.60e-05  1.10e-02  3.56e-04  1.47e-04  4.73e-01  
 13  +4.7021e-01  +5.9998e-01  1.30e-01  3.47e-05  8.33e-03  2.36e-04  1.14e-04  3.20e-01  
 14  +4.6360e-01  +5.6352e-01  9.99e-02  2.54e-05  6.09e-03  1.37e-04  8.55e-05  3.97e-01  
 15  +4.5602e-01  +5.2227e-01  6.63e-02  1.59e-05  3.80e-03  3.16e-05  5.49e-05  7.39e-01  
 16  +4.4821e-01  +4.8398e-01  3.58e-02  8.16e-06  1.95e-03  1.08e-05  2.92e-05  6.69e-01  
 17  +4.4532e-01  +4.6985e-01  2.45e-02  5.44e-06  1.30e-03  4.67e-06  1.97e-05  6.40e-01  
 18  +4.4485e-01  +4.6771e-01  2.29e-02  5.03e-06  1.20e-03  4.10e-06  1.82e-05  1.54e-01  
 19  +4.4366e-01  +4.6153e-01  1.79e-02  3.90e-06  9.33e-04  9.92e-07  1.42e-05  9.90e-01  
 20  +4.4236e-01  +4.5599e-01  1.36e-02  2.94e-06  7.04e-04  7.55e-07  1.08e-05  3.64e-01  
 21  +4.4155e-01  +4.5242e-01  1.09e-02  2.36e-06  5.65e-04  5.55e-07  8.71e-06  9.90e-01  
 22  +4.4003e-01  +4.4609e-01  6.06e-03  1.31e-06  3.13e-04  3.10e-07  4.87e-06  5.63e-01  
 23  +4.3908e-01  +4.4223e-01  3.15e-03  6.73e-07  1.61e-04  1.61e-07  2.53e-06  5.81e-01  
 24  +4.3814e-01  +4.3840e-01  2.61e-04  5.56e-08  1.33e-05  1.31e-08  2.12e-07  9.81e-01  
 25  +4.3805e-01  +4.3805e-01  3.21e-06  6.83e-10  1.64e-07  1.60e-10  2.60e-09  9.88e-01  
 26  +4.3805e-01  +4.3805e-01  3.29e-08  7.01e-12  1.68e-09  1.65e-12  2.67e-11  9.90e-01  
 27  +4.3805e-01  +4.3805e-01  4.76e-10  1.01e-13  2.43e-11  2.40e-14  3.89e-13  9.86e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 377.5058ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:26 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:26 PM: Optimal value: 4.381e-01
(CVXPY) Sep 20 08:03:26 PM: Compilation took 8.296e-02 seconds
(CVXPY) Sep 20 08:03:26 PM: Solver (including time spent in interface) took 3.949e-01 seconds
Iteration: 25, Objective: 0.4381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:26 PM: Your problem has 5269 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:26 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:26 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:26 PM: Finished problem compilation (took 9.263e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5269
  constraints   = 10269
  nnz(P)        = 0
  nnz(A)        = 97311
  cones (total) = 1
    : Nonnegative = 1,  numel = 10269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7970e-01  +1.0860e+03  1.09e+03  4.36e-01  7.66e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3098e-01  +1.2124e+02  1.21e+02  1.69e-01  3.75e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0860e-01  +3.1486e+01  3.10e+01  1.22e-01  2.72e+01  4.58e-05  2.53e-01  3.00e-01  
  4  +5.0105e-01  +3.1452e+00  2.64e+00  1.82e-02  4.20e+00  5.96e-06  1.59e-01  6.19e-01  
  5  +5.0023e-01  +1.2743e+00  7.74e-01  5.27e-03  1.24e+00  4.13e-05  9.65e-02  8.25e-01  
  6  +5.0009e-01  +9.2512e-01  4.25e-01  2.85e-03  6.76e-01  4.09e-05  3.92e-02  6.80e-01  
  7  +4.9978e-01  +8.6699e-01  3.67e-01  1.46e-03  3.50e-01  1.78e-04  5.69e-03  8.88e-01  
  8  +4.9602e-01  +8.3860e-01  3.43e-01  1.60e-04  3.86e-02  1.86e-03  4.77e-04  9.17e-01  
  9  +4.9274e-01  +7.9076e-01  2.98e-01  1.14e-04  2.74e-02  1.71e-03  3.42e-04  3.65e-01  
 10  +4.9119e-01  +7.6362e-01  2.72e-01  9.36e-05  2.26e-02  1.28e-03  2.82e-04  3.59e-01  
 11  +4.8950e-01  +7.4236e-01  2.53e-01  8.33e-05  2.01e-02  9.82e-04  2.52e-04  2.49e-01  
 12  +4.8084e-01  +6.5903e-01  1.78e-01  5.51e-05  1.32e-02  1.86e-04  1.73e-04  6.85e-01  
 13  +4.7391e-01  +6.1924e-01  1.45e-01  4.12e-05  9.88e-03  1.39e-04  1.33e-04  2.83e-01  
 14  +4.6737e-01  +5.8311e-01  1.16e-01  3.06e-05  7.35e-03  7.69e-05  1.02e-04  4.33e-01  
 15  +4.5974e-01  +5.4358e-01  8.38e-02  2.08e-05  4.97e-03  3.88e-05  7.10e-05  4.86e-01  
 16  +4.4759e-01  +4.8233e-01  3.47e-02  7.85e-06  1.88e-03  2.92e-06  2.81e-05  9.22e-01  
 17  +4.4426e-01  +4.6703e-01  2.28e-02  5.03e-06  1.20e-03  1.70e-06  1.83e-05  5.33e-01  
 18  +4.4409e-01  +4.6620e-01  2.21e-02  4.85e-06  1.16e-03  1.61e-06  1.76e-05  1.20e-01  
 19  +4.4244e-01  +4.5814e-01  1.57e-02  3.39e-06  8.11e-04  8.25e-07  1.24e-05  9.90e-01  
 20  +4.4168e-01  +4.5497e-01  1.33e-02  2.85e-06  6.83e-04  6.99e-07  1.05e-05  2.34e-01  
 21  +4.4045e-01  +4.4962e-01  9.18e-03  1.97e-06  4.71e-04  4.73e-07  7.31e-06  9.90e-01  
 22  +4.3899e-01  +4.4370e-01  4.70e-03  1.00e-06  2.40e-04  2.42e-07  3.77e-06  5.33e-01  
 23  +4.3764e-01  +4.3818e-01  5.42e-04  1.15e-07  2.75e-05  2.74e-08  4.39e-07  9.44e-01  
 24  +4.3747e-01  +4.3751e-01  4.45e-05  9.42e-09  2.25e-06  2.25e-09  3.60e-08  9.29e-01  
 25  +4.3745e-01  +4.3745e-01  4.67e-07  9.88e-11  2.36e-08  2.36e-11  3.78e-10  9.90e-01  
 26  +4.3745e-01  +4.3745e-01  4.67e-09  9.88e-13  2.36e-10  2.36e-13  3.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 380.8819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:27 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:27 PM: Optimal value: 4.375e-01
(CVXPY) Sep 20 08:03:27 PM: Compilation took 9.263e-02 seconds
(CVXPY) Sep 20 08:03:27 PM: Solver (including time spent in interface) took 3.971e-01 seconds
Iteration: 26, Objective: 0.4375
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:27 PM: Your problem has 5279 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:27 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:27 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:27 PM: Finished problem compilation (took 1.003e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5279
  constraints   = 10279
  nnz(P)        = 0
  nnz(A)        = 98041
  cones (total) = 1
    : Nonnegative = 1,  numel = 10279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7972e-01  +1.0858e+03  1.09e+03  4.36e-01  7.65e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3099e-01  +1.2122e+02  1.21e+02  1.69e-01  3.75e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0860e-01  +3.1470e+01  3.10e+01  1.22e-01  2.71e+01  4.57e-05  2.53e-01  3.00e-01  
  4  +5.0104e-01  +3.1393e+00  2.64e+00  1.82e-02  4.19e+00  5.96e-06  1.59e-01  6.20e-01  
  5  +5.0025e-01  +1.3208e+00  8.21e-01  5.59e-03  1.32e+00  4.06e-05  9.90e-02  7.89e-01  
  6  +5.0009e-01  +9.1693e-01  4.17e-01  2.80e-03  6.64e-01  3.98e-05  3.89e-02  6.81e-01  
  7  +4.9953e-01  +8.5525e-01  3.56e-01  9.22e-04  2.22e-01  3.01e-04  3.11e-03  9.69e-01  
  8  +4.9511e-01  +8.2252e-01  3.27e-01  1.29e-04  3.11e-02  2.13e-03  3.84e-04  8.78e-01  
  9  +4.9215e-01  +7.8538e-01  2.93e-01  1.02e-04  2.46e-02  1.80e-03  3.07e-04  3.00e-01  
 10  +4.8978e-01  +7.4549e-01  2.56e-01  8.51e-05  2.05e-02  1.06e-03  2.58e-04  3.92e-01  
 11  +4.8876e-01  +7.3466e-01  2.46e-01  8.46e-05  2.04e-02  9.54e-04  2.58e-04  2.09e-02  
 12  +4.8038e-01  +6.7246e-01  1.92e-01  5.67e-05  1.36e-02  6.36e-04  1.79e-04  4.21e-01  
 13  +4.7399e-01  +6.2665e-01  1.53e-01  4.33e-05  1.04e-02  2.31e-04  1.40e-04  5.34e-01  
 14  +4.6445e-01  +5.7157e-01  1.07e-01  2.79e-05  6.68e-03  7.98e-05  9.39e-05  6.02e-01  
 15  +4.5378e-01  +5.1482e-01  6.10e-02  1.44e-05  3.45e-03  8.45e-07  5.05e-05  9.51e-01  
 16  +4.4581e-01  +4.7721e-01  3.14e-02  7.08e-06  1.69e-03  8.25e-07  2.57e-05  6.80e-01  
 17  +4.4535e-01  +4.7480e-01  2.94e-02  6.53e-06  1.56e-03  9.22e-07  2.38e-05  2.66e-01  
 18  +4.4468e-01  +4.7110e-01  2.64e-02  5.81e-06  1.39e-03  1.08e-06  2.12e-05  5.50e-01  
 19  +4.4315e-01  +4.6390e-01  2.07e-02  4.51e-06  1.08e-03  1.01e-06  1.66e-05  7.96e-01  
 20  +4.4062e-01  +4.5314e-01  1.25e-02  2.68e-06  6.42e-04  6.16e-07  1.00e-05  4.81e-01  
 21  +4.3959e-01  +4.4845e-01  8.86e-03  1.89e-06  4.52e-04  4.49e-07  7.14e-06  9.90e-01  
 22  +4.3822e-01  +4.4280e-01  4.59e-03  9.73e-07  2.33e-04  2.33e-07  3.71e-06  5.96e-01  
 23  +4.3743e-01  +4.3957e-01  2.14e-03  4.52e-07  1.08e-04  1.08e-07  1.74e-06  6.14e-01  
 24  +4.3711e-01  +4.3829e-01  1.18e-03  2.45e-07  5.87e-05  5.88e-08  9.55e-07  8.54e-01  
 25  +4.3677e-01  +4.3695e-01  1.82e-04  3.72e-08  8.91e-06  9.08e-09  1.47e-07  9.47e-01  
 26  +4.3670e-01  +4.3670e-01  3.17e-06  6.44e-10  1.54e-07  1.59e-10  2.56e-09  9.86e-01  
 27  +4.3670e-01  +4.3670e-01  3.20e-08  6.51e-12  1.56e-09  1.61e-12  2.59e-11  9.90e-01  
 28  +4.3670e-01  +4.3670e-01  7.24e-10  1.47e-13  3.52e-11  3.88e-14  6.22e-13  9.77e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 491.832ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:28 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:28 PM: Optimal value: 4.367e-01
(CVXPY) Sep 20 08:03:28 PM: Compilation took 1.003e-01 seconds
(CVXPY) Sep 20 08:03:28 PM: Solver (including time spent in interface) took 5.135e-01 seconds
Iteration: 27, Objective: 0.4367
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:28 PM: Your problem has 5289 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:28 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:28 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:28 PM: Finished problem compilation (took 1.052e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5289
  constraints   = 10289
  nnz(P)        = 0
  nnz(A)        = 98571
  cones (total) = 1
    : Nonnegative = 1,  numel = 10289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7969e-01  +1.0858e+03  1.09e+03  4.36e-01  7.64e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3097e-01  +1.2117e+02  1.21e+02  1.69e-01  3.74e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0860e-01  +3.1455e+01  3.09e+01  1.22e-01  2.71e+01  4.58e-05  2.52e-01  3.00e-01  
  4  +5.0104e-01  +3.1388e+00  2.64e+00  1.82e-02  4.19e+00  5.96e-06  1.59e-01  6.21e-01  
  5  +5.0026e-01  +1.3446e+00  8.44e-01  5.76e-03  1.36e+00  4.05e-05  9.97e-02  7.75e-01  
  6  +5.0009e-01  +9.2109e-01  4.21e-01  2.83e-03  6.70e-01  3.99e-05  3.89e-02  6.80e-01  
  7  +4.9960e-01  +8.7078e-01  3.71e-01  1.07e-03  2.56e-01  2.69e-04  3.67e-03  9.48e-01  
  8  +4.9527e-01  +8.3893e-01  3.44e-01  1.39e-04  3.35e-02  2.10e-03  4.13e-04  8.88e-01  
  9  +4.9172e-01  +7.9017e-01  2.98e-01  1.04e-04  2.50e-02  1.72e-03  3.12e-04  3.56e-01  
 10  +4.8957e-01  +7.5234e-01  2.63e-01  8.81e-05  2.12e-02  1.04e-03  2.68e-04  3.70e-01  
 11  +4.8901e-01  +7.4516e-01  2.56e-01  8.77e-05  2.11e-02  9.46e-04  2.67e-04  3.70e-02  
 12  +4.8067e-01  +6.8075e-01  2.00e-01  5.87e-05  1.41e-02  5.81e-04  1.84e-04  4.66e-01  
 13  +4.7209e-01  +6.2434e-01  1.52e-01  4.20e-05  1.01e-02  3.03e-04  1.37e-04  4.18e-01  
 14  +4.6107e-01  +5.5946e-01  9.84e-02  2.51e-05  6.00e-03  7.81e-05  8.58e-05  6.66e-01  
 15  +4.5435e-01  +5.2546e-01  7.11e-02  1.72e-05  4.10e-03  4.51e-05  6.05e-05  4.23e-01  
 16  +4.5009e-01  +5.0310e-01  5.30e-02  1.22e-05  2.92e-03  1.85e-05  4.37e-05  6.22e-01  
 17  +4.4577e-01  +4.8070e-01  3.49e-02  7.74e-06  1.85e-03  2.13e-06  2.81e-05  9.90e-01  
 18  +4.4093e-01  +4.5902e-01  1.81e-02  3.93e-06  9.40e-04  1.04e-06  1.47e-05  6.72e-01  
 19  +4.4077e-01  +4.5826e-01  1.75e-02  3.79e-06  9.06e-04  9.91e-07  1.41e-05  1.86e-01  
 20  +4.3841e-01  +4.4775e-01  9.34e-03  2.01e-06  4.80e-04  4.69e-07  7.61e-06  9.90e-01  
 21  +4.3650e-01  +4.3983e-01  3.33e-03  7.03e-07  1.68e-04  1.68e-07  2.72e-06  7.36e-01  
 22  +4.3577e-01  +4.3697e-01  1.20e-03  2.49e-07  5.96e-05  5.98e-08  9.76e-07  8.89e-01  
 23  +4.3541e-01  +4.3557e-01  1.66e-04  3.40e-08  8.16e-06  8.24e-09  1.34e-07  8.71e-01  
 24  +4.3535e-01  +4.3535e-01  1.84e-06  3.78e-10  9.06e-08  9.16e-11  1.49e-09  9.89e-01  
 25  +4.3535e-01  +4.3535e-01  1.84e-08  3.79e-12  9.08e-10  9.17e-13  1.50e-11  9.90e-01  
 26  +4.3535e-01  +4.3535e-01  2.25e-10  4.60e-14  1.11e-11  1.14e-14  1.86e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 443.7232ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:29 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:29 PM: Optimal value: 4.354e-01
(CVXPY) Sep 20 08:03:29 PM: Compilation took 1.052e-01 seconds
(CVXPY) Sep 20 08:03:29 PM: Solver (including time spent in interface) took 4.645e-01 seconds
Iteration: 28, Objective: 0.4354
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:29 PM: Your problem has 5299 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:29 PM: Finished problem compilation (took 1.049e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5299
  constraints   = 10299
  nnz(P)        = 0
  nnz(A)        = 99101
  cones (total) = 1
    : Nonnegative = 1,  numel = 10299

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7969e-01  +1.0858e+03  1.09e+03  4.36e-01  7.64e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3095e-01  +1.2114e+02  1.21e+02  1.69e-01  3.73e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0859e-01  +3.1439e+01  3.09e+01  1.22e-01  2.71e+01  4.58e-05  2.52e-01  3.01e-01  
  4  +5.0104e-01  +3.1375e+00  2.64e+00  1.82e-02  4.19e+00  5.96e-06  1.59e-01  6.21e-01  
  5  +5.0026e-01  +1.3474e+00  8.47e-01  5.78e-03  1.36e+00  4.06e-05  9.93e-02  7.77e-01  
  6  +5.0010e-01  +9.5811e-01  4.58e-01  3.08e-03  7.30e-01  4.04e-05  4.25e-02  6.35e-01  
  7  +4.9966e-01  +8.6593e-01  3.66e-01  1.13e-03  2.70e-01  2.38e-04  3.96e-03  9.63e-01  
  8  +4.9573e-01  +8.3694e-01  3.41e-01  1.46e-04  3.51e-02  1.92e-03  4.34e-04  8.91e-01  
  9  +4.9352e-01  +8.0673e-01  3.13e-01  1.20e-04  2.88e-02  1.74e-03  3.58e-04  2.46e-01  
 10  +4.9047e-01  +7.6868e-01  2.78e-01  9.02e-05  2.17e-02  1.35e-03  2.72e-04  4.09e-01  
 11  +4.8929e-01  +7.5447e-01  2.65e-01  8.45e-05  2.04e-02  1.13e-03  2.56e-04  1.51e-01  
 12  +4.8671e-01  +7.1598e-01  2.29e-01  7.88e-05  1.89e-02  4.42e-04  2.43e-04  3.92e-01  
 13  +4.7580e-01  +6.4572e-01  1.70e-01  4.79e-05  1.15e-02  3.04e-04  1.54e-04  4.50e-01  
 14  +4.6930e-01  +6.0776e-01  1.38e-01  3.73e-05  8.93e-03  2.04e-04  1.23e-04  2.98e-01  
 15  +4.5860e-01  +5.4685e-01  8.82e-02  2.20e-05  5.27e-03  4.20e-05  7.61e-05  7.24e-01  
 16  +4.5435e-01  +5.2541e-01  7.11e-02  1.71e-05  4.10e-03  2.71e-05  6.03e-05  3.66e-01  
 17  +4.4835e-01  +4.9493e-01  4.66e-02  1.07e-05  2.55e-03  8.54e-06  3.85e-05  7.28e-01  
 18  +4.4353e-01  +4.7249e-01  2.90e-02  6.46e-06  1.54e-03  5.04e-06  2.39e-05  4.18e-01  
 19  +4.4225e-01  +4.6655e-01  2.43e-02  5.35e-06  1.28e-03  3.91e-06  1.99e-05  2.65e-01  
 20  +4.4122e-01  +4.6150e-01  2.03e-02  4.40e-06  1.05e-03  2.65e-06  1.64e-05  4.10e-01  
 21  +4.3990e-01  +4.5512e-01  1.52e-02  3.30e-06  7.88e-04  1.21e-06  1.25e-05  7.17e-01  
 22  +4.3967e-01  +4.5415e-01  1.45e-02  3.13e-06  7.48e-04  1.13e-06  1.19e-05  1.01e-01  
 23  +4.3948e-01  +4.5316e-01  1.37e-02  2.95e-06  7.06e-04  9.65e-07  1.12e-05  3.15e-01  
 24  +4.3664e-01  +4.4121e-01  4.57e-03  9.69e-07  2.32e-04  2.79e-07  3.76e-06  8.28e-01  
 25  +4.3588e-01  +4.3814e-01  2.26e-03  4.75e-07  1.14e-04  1.26e-07  1.87e-06  7.14e-01  
 26  +4.3519e-01  +4.3544e-01  2.55e-04  5.29e-08  1.27e-05  1.38e-08  2.12e-07  9.13e-01  
 27  +4.3510e-01  +4.3510e-01  3.53e-06  7.29e-10  1.74e-07  1.85e-10  2.92e-09  9.90e-01  
 28  +4.3510e-01  +4.3510e-01  3.56e-08  7.36e-12  1.76e-09  1.87e-12  2.95e-11  9.90e-01  
 29  +4.3510e-01  +4.3510e-01  4.35e-10  8.99e-14  2.15e-11  2.35e-14  3.71e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 445.9114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:30 PM: Optimal value: 4.351e-01
(CVXPY) Sep 20 08:03:30 PM: Compilation took 1.049e-01 seconds
(CVXPY) Sep 20 08:03:30 PM: Solver (including time spent in interface) took 4.647e-01 seconds
Iteration: 29, Objective: 0.4351
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:30 PM: Your problem has 5309 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:30 PM: Finished problem compilation (took 9.997e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5309
  constraints   = 10309
  nnz(P)        = 0
  nnz(A)        = 99685
  cones (total) = 1
    : Nonnegative = 1,  numel = 10309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7968e-01  +1.0857e+03  1.09e+03  4.36e-01  7.63e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3094e-01  +1.2110e+02  1.21e+02  1.69e-01  3.72e+01  1.65e-02  2.73e-01  9.42e-01  
  3  +5.0859e-01  +3.1422e+01  3.09e+01  1.22e-01  2.70e+01  4.58e-05  2.52e-01  3.01e-01  
  4  +5.0104e-01  +3.1356e+00  2.63e+00  1.82e-02  4.19e+00  5.96e-06  1.59e-01  6.22e-01  
  5  +5.0025e-01  +1.3307e+00  8.30e-01  5.67e-03  1.33e+00  4.12e-05  9.75e-02  7.96e-01  
  6  +5.0010e-01  +9.5024e-01  4.50e-01  3.03e-03  7.16e-01  4.18e-05  4.01e-02  6.51e-01  
  7  +4.9963e-01  +8.8058e-01  3.81e-01  1.12e-03  2.69e-01  2.58e-04  3.89e-03  9.51e-01  
  8  +4.9524e-01  +8.5002e-01  3.55e-01  1.40e-04  3.38e-02  2.13e-03  4.16e-04  8.94e-01  
  9  +4.9144e-01  +7.9943e-01  3.08e-01  1.03e-04  2.49e-02  1.82e-03  3.10e-04  3.54e-01  
 10  +4.8914e-01  +7.6825e-01  2.79e-01  9.01e-05  2.17e-02  1.34e-03  2.73e-04  2.56e-01  
 11  +4.8822e-01  +7.5236e-01  2.64e-01  8.86e-05  2.13e-02  1.05e-03  2.70e-04  1.12e-01  
 12  +4.7865e-01  +6.7913e-01  2.00e-01  5.76e-05  1.38e-02  6.90e-04  1.82e-04  4.28e-01  
 13  +4.7068e-01  +6.2482e-01  1.54e-01  4.23e-05  1.01e-02  3.69e-04  1.39e-04  3.96e-01  
 14  +4.6184e-01  +5.6886e-01  1.07e-01  2.77e-05  6.62e-03  8.02e-05  9.42e-05  6.97e-01  
 15  +4.5314e-01  +5.2370e-01  7.06e-02  1.71e-05  4.10e-03  4.37e-05  6.07e-05  4.47e-01  
 16  +4.4817e-01  +4.9905e-01  5.09e-02  1.19e-05  2.85e-03  2.77e-05  4.32e-05  3.74e-01  
 17  +4.4465e-01  +4.7924e-01  3.46e-02  7.69e-06  1.84e-03  4.11e-06  2.81e-05  9.24e-01  
 18  +4.4213e-01  +4.6789e-01  2.58e-02  5.64e-06  1.35e-03  2.83e-06  2.09e-05  3.62e-01  
 19  +4.4151e-01  +4.6491e-01  2.34e-02  5.09e-06  1.22e-03  2.29e-06  1.89e-05  2.93e-01  
 20  +4.4056e-01  +4.6072e-01  2.02e-02  4.36e-06  1.04e-03  1.88e-06  1.63e-05  2.24e-01  
 21  +4.3806e-01  +4.4930e-01  1.12e-02  2.41e-06  5.76e-04  5.89e-07  9.15e-06  9.90e-01  
 22  +4.3583e-01  +4.4002e-01  4.18e-03  8.92e-07  2.13e-04  2.13e-07  3.45e-06  7.52e-01  
 23  +4.3484e-01  +4.3600e-01  1.16e-03  2.43e-07  5.82e-05  5.72e-08  9.57e-07  8.96e-01  
 24  +4.3447e-01  +4.3452e-01  5.33e-05  1.12e-08  2.67e-06  2.62e-09  4.43e-08  9.63e-01  
 25  +4.3445e-01  +4.3445e-01  5.38e-07  1.13e-10  2.69e-08  2.64e-11  4.47e-10  9.90e-01  
 26  +4.3445e-01  +4.3445e-01  5.38e-09  1.13e-12  2.69e-10  2.64e-13  4.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 398.5588ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:30 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:30 PM: Optimal value: 4.345e-01
(CVXPY) Sep 20 08:03:30 PM: Compilation took 9.997e-02 seconds
(CVXPY) Sep 20 08:03:30 PM: Solver (including time spent in interface) took 4.135e-01 seconds
Iteration: 30, Objective: 0.4345
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:31 PM: Your problem has 5319 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:31 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:31 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:31 PM: Finished problem compilation (took 1.026e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5319
  constraints   = 10319
  nnz(P)        = 0
  nnz(A)        = 100062
  cones (total) = 1
    : Nonnegative = 1,  numel = 10319

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7966e-01  +1.0857e+03  1.09e+03  4.36e-01  7.62e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3092e-01  +1.2105e+02  1.21e+02  1.69e-01  3.72e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0858e-01  +3.1414e+01  3.09e+01  1.22e-01  2.70e+01  4.58e-05  2.52e-01  3.02e-01  
  4  +5.0104e-01  +3.1365e+00  2.64e+00  1.82e-02  4.19e+00  5.96e-06  1.58e-01  6.22e-01  
  5  +5.0025e-01  +1.3362e+00  8.36e-01  5.71e-03  1.34e+00  4.14e-05  9.73e-02  7.97e-01  
  6  +5.0009e-01  +9.3587e-01  4.36e-01  2.93e-03  6.92e-01  4.23e-05  3.78e-02  6.77e-01  
  7  +4.9950e-01  +8.8656e-01  3.87e-01  9.64e-04  2.31e-01  3.19e-04  3.22e-03  9.59e-01  
  8  +4.9477e-01  +8.5100e-01  3.56e-01  1.33e-04  3.20e-02  2.27e-03  3.95e-04  8.79e-01  
  9  +4.9143e-01  +8.0850e-01  3.17e-01  1.04e-04  2.50e-02  1.93e-03  3.11e-04  3.08e-01  
 10  +4.8930e-01  +7.7863e-01  2.89e-01  9.21e-05  2.22e-02  1.47e-03  2.79e-04  2.22e-01  
 11  +4.8822e-01  +7.5781e-01  2.70e-01  9.02e-05  2.17e-02  1.07e-03  2.75e-04  1.41e-01  
 12  +4.7710e-01  +6.7304e-01  1.96e-01  5.48e-05  1.31e-02  6.96e-04  1.74e-04  4.53e-01  
 13  +4.6980e-01  +6.2426e-01  1.54e-01  4.17e-05  9.98e-03  4.18e-04  1.37e-04  3.37e-01  
 14  +4.6002e-01  +5.6425e-01  1.04e-01  2.65e-05  6.33e-03  1.62e-04  9.09e-05  5.52e-01  
 15  +4.5674e-01  +5.4671e-01  9.00e-02  2.23e-05  5.32e-03  1.28e-04  7.76e-05  2.13e-01  
 16  +4.4955e-01  +5.0698e-01  5.74e-02  1.33e-05  3.19e-03  3.21e-05  4.80e-05  7.49e-01  
 17  +4.4296e-01  +4.7476e-01  3.18e-02  7.13e-06  1.70e-03  1.07e-05  2.66e-05  6.82e-01  
 18  +4.3963e-01  +4.5933e-01  1.97e-02  4.31e-06  1.03e-03  5.79e-06  1.64e-05  4.83e-01  
 19  +4.3937e-01  +4.5790e-01  1.85e-02  4.02e-06  9.60e-04  4.54e-06  1.53e-05  2.62e-01  
 20  +4.3797e-01  +4.5093e-01  1.30e-02  2.80e-06  6.67e-04  6.95e-07  1.07e-05  9.90e-01  
 21  +4.3597e-01  +4.4272e-01  6.75e-03  1.43e-06  3.42e-04  3.61e-07  5.61e-06  5.12e-01  
 22  +4.3411e-01  +4.3517e-01  1.06e-03  2.22e-07  5.29e-05  5.53e-08  8.89e-07  8.66e-01  
 23  +4.3379e-01  +4.3392e-01  1.28e-04  2.66e-08  6.34e-06  6.43e-09  1.09e-07  9.13e-01  
 24  +4.3375e-01  +4.3375e-01  1.45e-06  3.00e-10  7.16e-08  7.20e-11  1.23e-09  9.89e-01  
 25  +4.3375e-01  +4.3375e-01  1.45e-08  3.00e-12  7.16e-10  7.20e-13  1.23e-11  9.90e-01  
 26  +4.3375e-01  +4.3375e-01  1.45e-10  3.00e-14  7.17e-12  7.93e-15  1.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 405.946ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:31 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:31 PM: Optimal value: 4.338e-01
(CVXPY) Sep 20 08:03:31 PM: Compilation took 1.026e-01 seconds
(CVXPY) Sep 20 08:03:31 PM: Solver (including time spent in interface) took 4.255e-01 seconds
Iteration: 31, Objective: 0.4338
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:32 PM: Your problem has 5329 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:32 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:32 PM: Finished problem compilation (took 1.000e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5329
  constraints   = 10329
  nnz(P)        = 0
  nnz(A)        = 100370
  cones (total) = 1
    : Nonnegative = 1,  numel = 10329

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7963e-01  +1.0857e+03  1.09e+03  4.36e-01  7.62e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3087e-01  +1.2095e+02  1.20e+02  1.69e-01  3.71e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0857e-01  +3.1395e+01  3.09e+01  1.22e-01  2.69e+01  4.58e-05  2.52e-01  3.02e-01  
  4  +5.0104e-01  +3.1383e+00  2.64e+00  1.82e-02  4.19e+00  5.97e-06  1.58e-01  6.22e-01  
  5  +5.0026e-01  +1.3454e+00  8.45e-01  5.77e-03  1.36e+00  4.17e-05  9.70e-02  7.97e-01  
  6  +5.0009e-01  +9.5369e-01  4.54e-01  3.05e-03  7.20e-01  4.31e-05  3.85e-02  6.73e-01  
  7  +4.9962e-01  +9.0412e-01  4.04e-01  1.17e-03  2.81e-01  2.63e-04  4.05e-03  9.44e-01  
  8  +4.9535e-01  +8.7085e-01  3.76e-01  1.52e-04  3.67e-02  2.07e-03  4.52e-04  8.89e-01  
  9  +4.9223e-01  +8.2558e-01  3.33e-01  1.16e-04  2.80e-02  1.82e-03  3.48e-04  3.18e-01  
 10  +4.8957e-01  +7.8505e-01  2.95e-01  9.62e-05  2.31e-02  1.32e-03  2.91e-04  3.16e-01  
 11  +4.8833e-01  +7.6004e-01  2.72e-01  9.34e-05  2.25e-02  8.89e-04  2.85e-04  1.79e-01  
 12  +4.7817e-01  +6.8406e-01  2.06e-01  5.91e-05  1.42e-02  6.49e-04  1.87e-04  4.03e-01  
 13  +4.6978e-01  +6.2632e-01  1.57e-01  4.29e-05  1.03e-02  3.51e-04  1.41e-04  3.90e-01  
 14  +4.6236e-01  +5.7833e-01  1.16e-01  3.01e-05  7.20e-03  1.18e-04  1.02e-04  6.02e-01  
 15  +4.5783e-01  +5.5409e-01  9.63e-02  2.41e-05  5.77e-03  8.62e-05  8.37e-05  2.65e-01  
 16  +4.5058e-01  +5.1422e-01  6.36e-02  1.50e-05  3.58e-03  1.91e-05  5.35e-05  7.77e-01  
 17  +4.4600e-01  +4.9213e-01  4.61e-02  1.06e-05  2.53e-03  1.23e-05  3.89e-05  3.56e-01  
 18  +4.4002e-01  +4.6271e-01  2.27e-02  5.03e-06  1.20e-03  2.84e-06  1.90e-05  8.36e-01  
 19  +4.3935e-01  +4.5959e-01  2.02e-02  4.46e-06  1.06e-03  2.29e-06  1.69e-05  2.53e-01  
 20  +4.3923e-01  +4.5883e-01  1.96e-02  4.28e-06  1.02e-03  1.92e-06  1.62e-05  2.83e-01  
 21  +4.3691e-01  +4.4852e-01  1.16e-02  2.51e-06  5.98e-04  8.21e-07  9.64e-06  7.53e-01  
 22  +4.3537e-01  +4.4200e-01  6.63e-03  1.42e-06  3.39e-04  4.49e-07  5.55e-06  5.02e-01  
 23  +4.3410e-01  +4.3658e-01  2.48e-03  5.27e-07  1.26e-04  1.22e-07  2.09e-06  9.90e-01  
 24  +4.3336e-01  +4.3367e-01  3.12e-04  6.53e-08  1.56e-05  1.50e-08  2.64e-07  9.89e-01  
 25  +4.3325e-01  +4.3326e-01  4.65e-06  9.69e-10  2.31e-07  2.24e-10  3.93e-09  9.86e-01  
 26  +4.3325e-01  +4.3325e-01  4.72e-08  9.84e-12  2.35e-09  2.28e-12  3.99e-11  9.90e-01  
 27  +4.3325e-01  +4.3325e-01  8.82e-10  1.84e-13  4.38e-11  4.36e-14  7.63e-13  9.81e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 384.6697ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:32 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:32 PM: Optimal value: 4.333e-01
(CVXPY) Sep 20 08:03:32 PM: Compilation took 1.000e-01 seconds
(CVXPY) Sep 20 08:03:32 PM: Solver (including time spent in interface) took 4.016e-01 seconds
Iteration: 32, Objective: 0.4333
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:32 PM: Your problem has 5339 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:32 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:33 PM: Finished problem compilation (took 9.518e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5339
  constraints   = 10339
  nnz(P)        = 0
  nnz(A)        = 100705
  cones (total) = 1
    : Nonnegative = 1,  numel = 10339

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7957e-01  +1.0858e+03  1.09e+03  4.37e-01  7.61e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3084e-01  +1.2089e+02  1.20e+02  1.69e-01  3.71e+01  1.65e-02  2.73e-01  9.43e-01  
  3  +5.0857e-01  +3.1384e+01  3.09e+01  1.22e-01  2.69e+01  4.59e-05  2.52e-01  3.03e-01  
  4  +5.0105e-01  +3.1414e+00  2.64e+00  1.82e-02  4.19e+00  5.97e-06  1.58e-01  6.22e-01  
  5  +5.0025e-01  +1.3419e+00  8.42e-01  5.75e-03  1.35e+00  4.22e-05  9.60e-02  8.08e-01  
  6  +5.0007e-01  +9.1100e-01  4.11e-01  2.75e-03  6.50e-01  4.49e-05  3.25e-02  7.40e-01  
  7  +4.9901e-01  +9.2938e-01  4.30e-01  6.47e-04  1.56e-01  5.66e-04  2.02e-03  9.90e-01  
  8  +4.9441e-01  +8.8118e-01  3.87e-01  1.47e-04  3.54e-02  2.19e-03  4.37e-04  7.92e-01  
  9  +4.9182e-01  +8.4573e-01  3.54e-01  1.18e-04  2.84e-02  1.97e-03  3.53e-04  2.72e-01  
 10  +4.9050e-01  +8.1409e-01  3.24e-01  1.07e-04  2.58e-02  1.45e-03  3.23e-04  2.23e-01  
 11  +4.8661e-01  +7.2359e-01  2.37e-01  8.75e-05  2.10e-02  1.27e-05  2.70e-04  6.98e-01  
 12  +4.7550e-01  +6.5310e-01  1.78e-01  5.25e-05  1.26e-02  1.01e-05  1.69e-04  4.40e-01  
 13  +4.6842e-01  +6.1182e-01  1.43e-01  3.99e-05  9.54e-03  7.31e-06  1.32e-04  3.53e-01  
 14  +4.6146e-01  +5.7316e-01  1.12e-01  2.92e-05  6.98e-03  5.02e-06  9.96e-05  4.97e-01  
 15  +4.5801e-01  +5.5558e-01  9.76e-02  2.48e-05  5.92e-03  4.34e-06  8.59e-05  1.85e-01  
 16  +4.5239e-01  +5.2530e-01  7.29e-02  1.74e-05  4.16e-03  3.15e-06  6.15e-05  7.73e-01  
 17  +4.4358e-01  +4.8318e-01  3.96e-02  9.06e-06  2.16e-03  1.68e-06  3.35e-05  5.49e-01  
 18  +4.3948e-01  +4.6382e-01  2.43e-02  5.42e-06  1.29e-03  1.07e-06  2.05e-05  5.47e-01  
 19  +4.3788e-01  +4.5604e-01  1.82e-02  3.97e-06  9.46e-04  8.39e-07  1.51e-05  5.57e-01  
 20  +4.3694e-01  +4.5108e-01  1.41e-02  3.08e-06  7.34e-04  6.89e-07  1.18e-05  9.90e-01  
 21  +4.3525e-01  +4.4406e-01  8.82e-03  1.91e-06  4.54e-04  4.32e-07  7.42e-06  4.26e-01  
 22  +4.3378e-01  +4.3808e-01  4.31e-03  9.19e-07  2.19e-04  2.11e-07  3.63e-06  6.04e-01  
 23  +4.3264e-01  +4.3347e-01  8.34e-04  1.76e-07  4.19e-05  4.01e-08  7.10e-07  9.66e-01  
 24  +4.3240e-01  +4.3253e-01  1.33e-04  2.79e-08  6.65e-06  6.39e-09  1.13e-07  8.51e-01  
 25  +4.3235e-01  +4.3235e-01  1.64e-06  3.43e-10  8.18e-08  7.85e-11  1.40e-09  9.90e-01  
 26  +4.3235e-01  +4.3235e-01  1.69e-08  3.53e-12  8.42e-10  8.08e-13  1.44e-11  9.90e-01  
 27  +4.3235e-01  +4.3235e-01  2.11e-10  4.40e-14  1.05e-11  1.04e-14  1.85e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 415.2268ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:33 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:33 PM: Optimal value: 4.324e-01
(CVXPY) Sep 20 08:03:33 PM: Compilation took 9.518e-02 seconds
(CVXPY) Sep 20 08:03:33 PM: Solver (including time spent in interface) took 4.309e-01 seconds
Iteration: 33, Objective: 0.4324
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:33 PM: Your problem has 5340 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:33 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:33 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:33 PM: Finished problem compilation (took 1.173e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5340
  constraints   = 10340
  nnz(P)        = 0
  nnz(A)        = 100789
  cones (total) = 1
    : Nonnegative = 1,  numel = 10340

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7956e-01  +1.0858e+03  1.09e+03  4.37e-01  7.61e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3084e-01  +1.2089e+02  1.20e+02  1.69e-01  3.71e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0857e-01  +3.1382e+01  3.09e+01  1.22e-01  2.69e+01  4.59e-05  2.52e-01  3.03e-01  
  4  +5.0105e-01  +3.1418e+00  2.64e+00  1.82e-02  4.19e+00  5.97e-06  1.58e-01  6.22e-01  
  5  +5.0023e-01  +1.2831e+00  7.83e-01  5.35e-03  1.26e+00  4.35e-05  9.19e-02  8.60e-01  
  6  +5.0007e-01  +9.2414e-01  4.24e-01  2.82e-03  6.67e-01  4.90e-05  3.10e-02  7.58e-01  
  7  +4.9883e-01  +9.0601e-01  4.07e-01  5.47e-04  1.31e-01  6.47e-04  1.70e-03  9.90e-01  
  8  +4.9426e-01  +8.6081e-01  3.67e-01  1.40e-04  3.37e-02  2.19e-03  4.17e-04  7.65e-01  
  9  +4.9162e-01  +8.3142e-01  3.40e-01  1.12e-04  2.70e-02  2.07e-03  3.36e-04  2.62e-01  
 10  +4.8994e-01  +8.0502e-01  3.15e-01  1.02e-04  2.44e-02  1.67e-03  3.06e-04  1.88e-01  
 11  +4.8513e-01  +7.1316e-01  2.28e-01  8.17e-05  1.96e-02  1.47e-05  2.54e-04  6.93e-01  
 12  +4.7410e-01  +6.4472e-01  1.71e-01  5.02e-05  1.20e-02  1.13e-05  1.63e-04  4.14e-01  
 13  +4.6717e-01  +6.0534e-01  1.38e-01  3.82e-05  9.13e-03  8.39e-06  1.27e-04  3.07e-01  
 14  +4.5907e-01  +5.6109e-01  1.02e-01  2.63e-05  6.27e-03  5.25e-06  9.06e-05  5.07e-01  
 15  +4.5670e-01  +5.4913e-01  9.24e-02  2.33e-05  5.56e-03  4.69e-06  8.12e-05  1.60e-01  
 16  +4.4991e-01  +5.1385e-01  6.39e-02  1.51e-05  3.61e-03  2.96e-06  5.43e-05  6.75e-01  
 17  +4.4090e-01  +4.7043e-01  2.95e-02  6.66e-06  1.59e-03  1.33e-06  2.50e-05  7.55e-01  
 18  +4.3738e-01  +4.5432e-01  1.69e-02  3.74e-06  8.91e-04  7.78e-07  1.44e-05  5.47e-01  
 19  +4.3700e-01  +4.5262e-01  1.56e-02  3.42e-06  8.16e-04  7.22e-07  1.32e-05  1.25e-01  
 20  +4.3571e-01  +4.4604e-01  1.03e-02  2.24e-06  5.33e-04  5.03e-07  8.68e-06  9.90e-01  
 21  +4.3331e-01  +4.3628e-01  2.97e-03  6.35e-07  1.51e-04  1.43e-07  2.52e-06  7.98e-01  
 22  +4.3275e-01  +4.3398e-01  1.23e-03  2.63e-07  6.26e-05  5.84e-08  1.05e-06  8.82e-01  
 23  +4.3236e-01  +4.3245e-01  9.01e-05  1.92e-08  4.57e-06  4.28e-09  7.70e-08  9.31e-01  
 24  +4.3233e-01  +4.3233e-01  9.42e-07  2.00e-10  4.78e-08  4.47e-11  8.05e-10  9.90e-01  
 25  +4.3233e-01  +4.3233e-01  9.62e-09  2.05e-12  4.88e-10  4.57e-13  8.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 449.292ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:34 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:34 PM: Optimal value: 4.323e-01
(CVXPY) Sep 20 08:03:34 PM: Compilation took 1.173e-01 seconds
(CVXPY) Sep 20 08:03:34 PM: Solver (including time spent in interface) took 4.664e-01 seconds
Iteration: 34, Objective: 0.4323
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:34 PM: Your problem has 5350 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:34 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:34 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:34 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5350
  constraints   = 10350
  nnz(P)        = 0
  nnz(A)        = 101059
  cones (total) = 1
    : Nonnegative = 1,  numel = 10350

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.19e+02  1.00e+00  1.00e+00   ------   
  1  +5.7955e-01  +1.0859e+03  1.09e+03  4.37e-01  7.61e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3082e-01  +1.2087e+02  1.20e+02  1.69e-01  3.70e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0857e-01  +3.1377e+01  3.09e+01  1.22e-01  2.69e+01  4.59e-05  2.51e-01  3.04e-01  
  4  +5.0105e-01  +3.1426e+00  2.64e+00  1.82e-02  4.19e+00  5.97e-06  1.58e-01  6.22e-01  
  5  +5.0024e-01  +1.3181e+00  8.18e-01  5.59e-03  1.31e+00  4.30e-05  9.39e-02  8.33e-01  
  6  +5.0007e-01  +9.1364e-01  4.14e-01  2.76e-03  6.52e-01  4.73e-05  3.11e-02  7.46e-01  
  7  +4.9870e-01  +9.2335e-01  4.25e-01  5.23e-04  1.26e-01  7.15e-04  1.61e-03  9.90e-01  
  8  +4.9416e-01  +8.7296e-01  3.79e-01  1.46e-04  3.51e-02  2.17e-03  4.34e-04  7.45e-01  
  9  +4.9153e-01  +8.4116e-01  3.50e-01  1.17e-04  2.81e-02  2.03e-03  3.50e-04  2.63e-01  
 10  +4.9021e-01  +8.1114e-01  3.21e-01  1.06e-04  2.56e-02  1.50e-03  3.21e-04  2.18e-01  
 11  +4.8727e-01  +7.3705e-01  2.50e-01  9.20e-05  2.21e-02  1.90e-04  2.83e-04  5.97e-01  
 12  +4.7396e-01  +6.4939e-01  1.75e-01  4.96e-05  1.19e-02  1.41e-04  1.60e-04  4.86e-01  
 13  +4.6736e-01  +6.1011e-01  1.43e-01  3.87e-05  9.25e-03  8.72e-05  1.29e-04  3.42e-01  
 14  +4.5901e-01  +5.6285e-01  1.04e-01  2.65e-05  6.32e-03  3.50e-05  9.13e-05  5.68e-01  
 15  +4.5630e-01  +5.4904e-01  9.27e-02  2.32e-05  5.53e-03  2.93e-05  8.08e-05  1.69e-01  
 16  +4.4780e-01  +5.0461e-01  5.68e-02  1.33e-05  3.16e-03  6.92e-06  4.80e-05  8.00e-01  
 17  +4.4289e-01  +4.8081e-01  3.79e-02  8.60e-06  2.05e-03  3.63e-06  3.19e-05  5.66e-01  
 18  +4.3595e-01  +4.4843e-01  1.25e-02  2.73e-06  6.50e-04  6.73e-07  1.06e-05  9.70e-01  
 19  +4.3589e-01  +4.4822e-01  1.23e-02  2.68e-06  6.38e-04  6.65e-07  1.04e-05  5.43e-02  
 20  +4.3473e-01  +4.4315e-01  8.42e-03  1.81e-06  4.32e-04  4.20e-07  7.11e-06  8.36e-01  
 21  +4.3246e-01  +4.3397e-01  1.51e-03  3.23e-07  7.69e-05  7.19e-08  1.30e-06  9.33e-01  
 22  +4.3201e-01  +4.3219e-01  1.76e-04  3.74e-08  8.91e-06  8.35e-09  1.51e-07  8.90e-01  
 23  +4.3195e-01  +4.3195e-01  2.22e-06  4.70e-10  1.12e-07  1.05e-10  1.90e-09  9.90e-01  
 24  +4.3195e-01  +4.3195e-01  2.22e-08  4.71e-12  1.12e-09  1.05e-12  1.91e-11  9.90e-01  
 25  +4.3195e-01  +4.3195e-01  2.74e-10  5.82e-14  1.39e-11  1.31e-14  2.38e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 408.481ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:35 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:35 PM: Optimal value: 4.320e-01
(CVXPY) Sep 20 08:03:35 PM: Compilation took 1.094e-01 seconds
(CVXPY) Sep 20 08:03:35 PM: Solver (including time spent in interface) took 4.272e-01 seconds
Iteration: 35, Objective: 0.4320
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:35 PM: Your problem has 5360 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:35 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:35 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:35 PM: Finished problem compilation (took 1.045e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5360
  constraints   = 10360
  nnz(P)        = 0
  nnz(A)        = 101352
  cones (total) = 1
    : Nonnegative = 1,  numel = 10360

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7952e-01  +1.0859e+03  1.09e+03  4.37e-01  7.60e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3081e-01  +1.2084e+02  1.20e+02  1.69e-01  3.70e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0856e-01  +3.1373e+01  3.09e+01  1.22e-01  2.68e+01  4.59e-05  2.51e-01  3.04e-01  
  4  +5.0105e-01  +3.1439e+00  2.64e+00  1.82e-02  4.20e+00  5.97e-06  1.58e-01  6.22e-01  
  5  +5.0024e-01  +1.3188e+00  8.19e-01  5.60e-03  1.31e+00  4.33e-05  9.36e-02  8.36e-01  
  6  +5.0007e-01  +9.2657e-01  4.26e-01  2.84e-03  6.71e-01  4.84e-05  3.12e-02  7.67e-01  
  7  +4.9874e-01  +9.1808e-01  4.19e-01  5.23e-04  1.26e-01  6.95e-04  1.62e-03  9.90e-01  
  8  +4.9432e-01  +8.6925e-01  3.75e-01  1.46e-04  3.52e-02  2.11e-03  4.37e-04  7.44e-01  
  9  +4.9161e-01  +8.3801e-01  3.46e-01  1.16e-04  2.80e-02  2.00e-03  3.49e-04  2.68e-01  
 10  +4.9049e-01  +8.0661e-01  3.16e-01  1.07e-04  2.56e-02  1.37e-03  3.21e-04  2.52e-01  
 11  +4.8875e-01  +7.6196e-01  2.73e-01  9.95e-05  2.39e-02  5.85e-04  3.04e-04  3.64e-01  
 12  +4.7564e-01  +6.6707e-01  1.91e-01  5.34e-05  1.28e-02  4.13e-04  1.71e-04  5.11e-01  
 13  +4.6641e-01  +6.0912e-01  1.43e-01  3.81e-05  9.10e-03  2.17e-04  1.27e-04  4.05e-01  
 14  +4.6019e-01  +5.7134e-01  1.11e-01  2.84e-05  6.78e-03  7.11e-05  9.72e-05  6.23e-01  
 15  +4.5637e-01  +5.5163e-01  9.53e-02  2.37e-05  5.66e-03  5.74e-05  8.27e-05  1.91e-01  
 16  +4.4687e-01  +5.0143e-01  5.46e-02  1.26e-05  3.01e-03  7.56e-06  4.59e-05  8.74e-01  
 17  +4.4209e-01  +4.7849e-01  3.64e-02  8.21e-06  1.95e-03  4.03e-06  3.06e-05  5.39e-01  
 18  +4.3857e-01  +4.6226e-01  2.37e-02  5.25e-06  1.25e-03  2.37e-06  2.00e-05  4.61e-01  
 19  +4.3701e-01  +4.5488e-01  1.79e-02  3.89e-06  9.27e-04  1.54e-06  1.49e-05  4.77e-01  
 20  +4.3615e-01  +4.5017e-01  1.40e-02  3.05e-06  7.26e-04  6.96e-07  1.18e-05  9.90e-01  
 21  +4.3397e-01  +4.4115e-01  7.18e-03  1.55e-06  3.68e-04  3.58e-07  6.08e-06  5.67e-01  
 22  +4.3266e-01  +4.3584e-01  3.18e-03  6.78e-07  1.61e-04  1.54e-07  2.69e-06  8.38e-01  
 23  +4.3185e-01  +4.3259e-01  7.34e-04  1.56e-07  3.71e-05  3.50e-08  6.26e-07  9.90e-01  
 24  +4.3161e-01  +4.3163e-01  2.44e-05  5.18e-09  1.23e-06  1.16e-09  2.09e-08  9.70e-01  
 25  +4.3160e-01  +4.3160e-01  2.46e-07  5.21e-11  1.24e-08  1.17e-11  2.10e-10  9.90e-01  
 26  +4.3160e-01  +4.3160e-01  2.70e-09  5.72e-13  1.36e-10  1.29e-13  2.32e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 399.3462ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:36 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:36 PM: Optimal value: 4.316e-01
(CVXPY) Sep 20 08:03:36 PM: Compilation took 1.045e-01 seconds
(CVXPY) Sep 20 08:03:36 PM: Solver (including time spent in interface) took 4.170e-01 seconds
Iteration: 36, Objective: 0.4316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:36 PM: Your problem has 5368 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:36 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:36 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:36 PM: Finished problem compilation (took 1.053e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5368
  constraints   = 10368
  nnz(P)        = 0
  nnz(A)        = 101854
  cones (total) = 1
    : Nonnegative = 1,  numel = 10368

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7956e-01  +1.0858e+03  1.09e+03  4.37e-01  7.60e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3079e-01  +1.2077e+02  1.20e+02  1.69e-01  3.69e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0856e-01  +3.1355e+01  3.08e+01  1.22e-01  2.68e+01  4.59e-05  2.51e-01  3.04e-01  
  4  +5.0105e-01  +3.1411e+00  2.64e+00  1.82e-02  4.19e+00  5.97e-06  1.58e-01  6.22e-01  
  5  +5.0024e-01  +1.3128e+00  8.13e-01  5.56e-03  1.30e+00  4.35e-05  9.29e-02  8.44e-01  
  6  +5.0006e-01  +9.0089e-01  4.01e-01  2.66e-03  6.28e-01  5.00e-05  2.75e-02  8.19e-01  
  7  +4.9851e-01  +9.3335e-01  4.35e-01  4.75e-04  1.14e-01  8.05e-04  1.46e-03  9.90e-01  
  8  +4.9399e-01  +8.7760e-01  3.84e-01  1.46e-04  3.52e-02  2.14e-03  4.37e-04  7.20e-01  
  9  +4.9147e-01  +8.4493e-01  3.53e-01  1.19e-04  2.85e-02  1.95e-03  3.56e-04  2.58e-01  
 10  +4.8990e-01  +8.1300e-01  3.23e-01  1.06e-04  2.55e-02  1.45e-03  3.21e-04  2.34e-01  
 11  +4.8736e-01  +7.4880e-01  2.61e-01  9.48e-05  2.27e-02  3.52e-04  2.91e-04  4.98e-01  
 12  +4.7398e-01  +6.5605e-01  1.82e-01  5.12e-05  1.22e-02  2.49e-04  1.65e-04  4.94e-01  
 13  +4.6603e-01  +6.0671e-01  1.41e-01  3.78e-05  9.03e-03  1.32e-04  1.26e-04  4.11e-01  
 14  +4.5873e-01  +5.6326e-01  1.05e-01  2.66e-05  6.34e-03  3.69e-05  9.18e-05  6.77e-01  
 15  +4.5406e-01  +5.3917e-01  8.51e-02  2.09e-05  4.98e-03  2.41e-05  7.36e-05  3.58e-01  
 16  +4.4454e-01  +4.9134e-01  4.68e-02  1.08e-05  2.58e-03  8.96e-06  4.00e-05  6.41e-01  
 17  +4.4114e-01  +4.7484e-01  3.37e-02  7.62e-06  1.81e-03  5.45e-06  2.86e-05  4.35e-01  
 18  +4.3752e-01  +4.5786e-01  2.03e-02  4.48e-06  1.07e-03  2.67e-06  1.72e-05  5.67e-01  
 19  +4.3695e-01  +4.5511e-01  1.82e-02  3.96e-06  9.43e-04  2.13e-06  1.52e-05  2.74e-01  
 20  +4.3592e-01  +4.4952e-01  1.36e-02  2.95e-06  7.02e-04  6.91e-07  1.14e-05  9.90e-01  
 21  +4.3373e-01  +4.4057e-01  6.84e-03  1.46e-06  3.48e-04  3.49e-07  5.77e-06  5.56e-01  
 22  +4.3267e-01  +4.3629e-01  3.62e-03  7.68e-07  1.83e-04  1.82e-07  3.06e-06  5.82e-01  
 23  +4.3169e-01  +4.3233e-01  6.38e-04  1.35e-07  3.21e-05  3.04e-08  5.44e-07  9.90e-01  
 24  +4.3147e-01  +4.3148e-01  1.23e-05  2.59e-09  6.16e-07  5.83e-10  1.05e-08  9.82e-01  
 25  +4.3147e-01  +4.3147e-01  1.23e-07  2.60e-11  6.19e-09  5.86e-12  1.05e-10  9.90e-01  
 26  +4.3147e-01  +4.3147e-01  1.32e-09  2.79e-13  6.64e-11  6.33e-14  1.14e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 424.848ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:36 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:36 PM: Optimal value: 4.315e-01
(CVXPY) Sep 20 08:03:36 PM: Compilation took 1.053e-01 seconds
(CVXPY) Sep 20 08:03:36 PM: Solver (including time spent in interface) took 4.438e-01 seconds
Iteration: 37, Objective: 0.4315
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:37 PM: Your problem has 5378 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:37 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:37 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:37 PM: Finished problem compilation (took 1.108e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5378
  constraints   = 10378
  nnz(P)        = 0
  nnz(A)        = 102479
  cones (total) = 1
    : Nonnegative = 1,  numel = 10378

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7955e-01  +1.0858e+03  1.09e+03  4.37e-01  7.59e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3077e-01  +1.2073e+02  1.20e+02  1.69e-01  3.68e+01  1.65e-02  2.73e-01  9.44e-01  
  3  +5.0855e-01  +3.1345e+01  3.08e+01  1.22e-01  2.68e+01  4.59e-05  2.51e-01  3.05e-01  
  4  +5.0105e-01  +3.1426e+00  2.64e+00  1.83e-02  4.19e+00  5.97e-06  1.58e-01  6.22e-01  
  5  +5.0023e-01  +1.2961e+00  7.96e-01  5.44e-03  1.28e+00  4.42e-05  9.12e-02  8.64e-01  
  6  +5.0006e-01  +9.0622e-01  4.06e-01  2.68e-03  6.33e-01  5.29e-05  2.61e-02  8.43e-01  
  7  +4.9819e-01  +9.2706e-01  4.29e-01  3.97e-04  9.55e-02  9.58e-04  1.21e-03  9.90e-01  
  8  +4.9369e-01  +8.6733e-01  3.74e-01  1.42e-04  3.42e-02  2.08e-03  4.25e-04  6.78e-01  
  9  +4.9118e-01  +8.3592e-01  3.45e-01  1.15e-04  2.77e-02  1.88e-03  3.47e-04  2.71e-01  
 10  +4.8946e-01  +8.0422e-01  3.15e-01  1.04e-04  2.50e-02  1.38e-03  3.15e-04  2.27e-01  
 11  +4.8779e-01  +7.6408e-01  2.76e-01  9.79e-05  2.35e-02  6.75e-04  3.00e-04  3.14e-01  
 12  +4.7506e-01  +6.6858e-01  1.94e-01  5.46e-05  1.31e-02  4.36e-04  1.75e-04  5.06e-01  
 13  +4.6802e-01  +6.2229e-01  1.54e-01  4.20e-05  1.00e-02  2.43e-04  1.39e-04  3.78e-01  
 14  +4.5935e-01  +5.6906e-01  1.10e-01  2.81e-05  6.70e-03  6.46e-05  9.69e-05  6.72e-01  
 15  +4.5563e-01  +5.4981e-01  9.42e-02  2.35e-05  5.60e-03  5.20e-05  8.24e-05  1.96e-01  
 16  +4.5077e-01  +5.2348e-01  7.27e-02  1.73e-05  4.13e-03  2.40e-05  6.21e-05  5.60e-01  
 17  +4.4490e-01  +4.9449e-01  4.96e-02  1.14e-05  2.72e-03  1.24e-05  4.21e-05  5.04e-01  
 18  +4.4025e-01  +4.7212e-01  3.19e-02  7.12e-06  1.70e-03  5.97e-06  2.70e-05  5.59e-01  
 19  +4.3617e-01  +4.5360e-01  1.74e-02  3.80e-06  9.05e-04  2.96e-06  1.48e-05  5.20e-01  
 20  +4.3590e-01  +4.5231e-01  1.64e-02  3.55e-06  8.45e-04  2.62e-06  1.39e-05  1.54e-01  
 21  +4.3460e-01  +4.4578e-01  1.12e-02  2.36e-06  5.63e-04  6.01e-07  9.33e-06  9.90e-01  
 22  +4.3187e-01  +4.3495e-01  3.08e-03  6.38e-07  1.52e-04  1.52e-07  2.60e-06  9.51e-01  
 23  +4.3091e-01  +4.3124e-01  3.23e-04  6.62e-08  1.58e-05  1.58e-08  2.73e-07  9.17e-01  
 24  +4.3080e-01  +4.3081e-01  3.77e-06  7.73e-10  1.84e-07  1.83e-10  3.20e-09  9.90e-01  
 25  +4.3080e-01  +4.3080e-01  3.81e-08  7.79e-12  1.85e-09  1.85e-12  3.23e-11  9.90e-01  
 26  +4.3080e-01  +4.3080e-01  3.93e-10  8.04e-14  1.91e-11  1.94e-14  3.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 394.2218ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:37 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:37 PM: Optimal value: 4.308e-01
(CVXPY) Sep 20 08:03:37 PM: Compilation took 1.108e-01 seconds
(CVXPY) Sep 20 08:03:37 PM: Solver (including time spent in interface) took 4.129e-01 seconds
Iteration: 38, Objective: 0.4308
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:38 PM: Your problem has 5388 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:38 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:38 PM: Finished problem compilation (took 1.167e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5388
  constraints   = 10388
  nnz(P)        = 0
  nnz(A)        = 102947
  cones (total) = 1
    : Nonnegative = 1,  numel = 10388

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7956e-01  +1.0856e+03  1.09e+03  4.37e-01  7.58e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3077e-01  +1.2070e+02  1.20e+02  1.69e-01  3.68e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0855e-01  +3.1334e+01  3.08e+01  1.21e-01  2.67e+01  4.59e-05  2.51e-01  3.04e-01  
  4  +5.0104e-01  +3.1383e+00  2.64e+00  1.82e-02  4.19e+00  5.97e-06  1.57e-01  6.23e-01  
  5  +5.0023e-01  +1.2993e+00  7.99e-01  5.47e-03  1.28e+00  4.41e-05  9.11e-02  8.62e-01  
  6  +5.0006e-01  +9.1447e-01  4.14e-01  2.73e-03  6.45e-01  5.31e-05  2.65e-02  8.40e-01  
  7  +4.9814e-01  +9.2717e-01  4.29e-01  3.86e-04  9.27e-02  9.84e-04  1.17e-03  9.90e-01  
  8  +4.9347e-01  +8.6691e-01  3.73e-01  1.37e-04  3.29e-02  2.15e-03  4.10e-04  6.81e-01  
  9  +4.9007e-01  +8.2166e-01  3.32e-01  1.06e-04  2.55e-02  1.77e-03  3.21e-04  3.31e-01  
 10  +4.8837e-01  +7.9951e-01  3.11e-01  9.74e-05  2.34e-02  1.47e-03  2.96e-04  1.63e-01  
 11  +4.8502e-01  +7.3432e-01  2.49e-01  8.74e-05  2.09e-02  3.39e-04  2.72e-04  4.79e-01  
 12  +4.7485e-01  +6.6621e-01  1.91e-01  5.64e-05  1.35e-02  2.56e-04  1.82e-04  3.74e-01  
 13  +4.6550e-01  +6.0714e-01  1.42e-01  3.87e-05  9.23e-03  1.31e-04  1.30e-04  4.51e-01  
 14  +4.5535e-01  +5.4831e-01  9.30e-02  2.32e-05  5.53e-03  2.54e-05  8.16e-05  7.63e-01  
 15  +4.5078e-01  +5.2478e-01  7.40e-02  1.78e-05  4.24e-03  1.30e-05  6.39e-05  5.25e-01  
 16  +4.4468e-01  +4.9520e-01  5.05e-02  1.17e-05  2.79e-03  7.82e-06  4.35e-05  4.12e-01  
 17  +4.4163e-01  +4.7935e-01  3.77e-02  8.43e-06  2.01e-03  3.22e-06  3.16e-05  7.67e-01  
 18  +4.3574e-01  +4.5316e-01  1.74e-02  3.80e-06  9.04e-04  1.41e-06  1.49e-05  5.76e-01  
 19  +4.3546e-01  +4.5187e-01  1.64e-02  3.55e-06  8.44e-04  1.28e-06  1.39e-05  1.60e-01  
 20  +4.3447e-01  +4.4681e-01  1.23e-02  2.63e-06  6.25e-04  6.12e-07  1.04e-05  9.90e-01  
 21  +4.3272e-01  +4.3986e-01  7.14e-03  1.49e-06  3.56e-04  3.55e-07  6.02e-06  5.03e-01  
 22  +4.3067e-01  +4.3173e-01  1.07e-03  2.20e-07  5.22e-05  5.27e-08  9.08e-07  8.77e-01  
 23  +4.3031e-01  +4.3033e-01  2.02e-05  4.16e-09  9.90e-07  9.84e-10  1.73e-08  9.87e-01  
 24  +4.3030e-01  +4.3030e-01  2.03e-07  4.18e-11  9.93e-09  9.87e-12  1.74e-10  9.90e-01  
 25  +4.3030e-01  +4.3030e-01  2.08e-09  4.28e-13  1.02e-10  1.02e-13  1.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 367.7499ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:38 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:38 PM: Optimal value: 4.303e-01
(CVXPY) Sep 20 08:03:38 PM: Compilation took 1.167e-01 seconds
(CVXPY) Sep 20 08:03:38 PM: Solver (including time spent in interface) took 3.856e-01 seconds
Iteration: 39, Objective: 0.4303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:38 PM: Your problem has 5393 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:38 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:39 PM: Finished problem compilation (took 1.135e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5393
  constraints   = 10393
  nnz(P)        = 0
  nnz(A)        = 103174
  cones (total) = 1
    : Nonnegative = 1,  numel = 10393

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7953e-01  +1.0857e+03  1.09e+03  4.37e-01  7.58e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3075e-01  +1.2068e+02  1.20e+02  1.69e-01  3.67e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0855e-01  +3.1329e+01  3.08e+01  1.21e-01  2.67e+01  4.59e-05  2.51e-01  3.05e-01  
  4  +5.0105e-01  +3.1412e+00  2.64e+00  1.83e-02  4.19e+00  5.97e-06  1.57e-01  6.23e-01  
  5  +5.0023e-01  +1.3045e+00  8.04e-01  5.51e-03  1.29e+00  4.42e-05  9.12e-02  8.60e-01  
  6  +5.0006e-01  +9.1590e-01  4.16e-01  2.74e-03  6.48e-01  5.31e-05  2.67e-02  8.35e-01  
  7  +4.9820e-01  +9.2852e-01  4.30e-01  3.99e-04  9.60e-02  9.52e-04  1.22e-03  9.90e-01  
  8  +4.9365e-01  +8.6912e-01  3.75e-01  1.41e-04  3.39e-02  2.11e-03  4.22e-04  6.83e-01  
  9  +4.9030e-01  +8.2562e-01  3.35e-01  1.08e-04  2.58e-02  1.80e-03  3.24e-04  3.43e-01  
 10  +4.8876e-01  +8.0250e-01  3.14e-01  9.94e-05  2.39e-02  1.45e-03  3.02e-04  1.67e-01  
 11  +4.8472e-01  +7.2636e-01  2.42e-01  8.60e-05  2.06e-02  1.74e-04  2.68e-04  5.75e-01  
 12  +4.7449e-01  +6.6013e-01  1.86e-01  5.52e-05  1.32e-02  1.33e-04  1.79e-04  3.75e-01  
 13  +4.6624e-01  +6.0996e-01  1.44e-01  3.97e-05  9.47e-03  7.85e-05  1.33e-04  3.94e-01  
 14  +4.5498e-01  +5.4651e-01  9.15e-02  2.29e-05  5.47e-03  2.17e-05  8.08e-05  6.98e-01  
 15  +4.5028e-01  +5.2268e-01  7.24e-02  1.73e-05  4.13e-03  1.14e-05  6.22e-05  5.26e-01  
 16  +4.4066e-01  +4.7635e-01  3.57e-02  8.11e-06  1.93e-03  4.80e-06  3.07e-05  5.83e-01  
 17  +4.3769e-01  +4.6242e-01  2.47e-02  5.51e-06  1.31e-03  3.01e-06  2.12e-05  4.13e-01  
 18  +4.3511e-01  +4.5033e-01  1.52e-02  3.29e-06  7.84e-04  1.46e-06  1.29e-05  6.23e-01  
 19  +4.3459e-01  +4.4734e-01  1.28e-02  2.73e-06  6.50e-04  7.01e-07  1.09e-05  8.76e-01  
 20  +4.3332e-01  +4.4216e-01  8.84e-03  1.88e-06  4.47e-04  4.76e-07  7.56e-06  4.32e-01  
 21  +4.3271e-01  +4.3979e-01  7.07e-03  1.48e-06  3.53e-04  3.77e-07  5.97e-06  4.01e-01  
 22  +4.3074e-01  +4.3203e-01  1.28e-03  2.65e-07  6.30e-05  6.69e-08  1.09e-06  8.59e-01  
 23  +4.3032e-01  +4.3038e-01  5.58e-05  1.15e-08  2.73e-06  2.85e-09  4.77e-08  9.64e-01  
 24  +4.3030e-01  +4.3030e-01  5.59e-07  1.15e-10  2.74e-08  2.86e-11  4.78e-10  9.90e-01  
 25  +4.3030e-01  +4.3030e-01  5.70e-09  1.17e-12  2.79e-10  2.96e-13  4.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 442.8094ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:39 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:39 PM: Optimal value: 4.303e-01
(CVXPY) Sep 20 08:03:39 PM: Compilation took 1.135e-01 seconds
(CVXPY) Sep 20 08:03:39 PM: Solver (including time spent in interface) took 4.648e-01 seconds
Iteration: 40, Objective: 0.4303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:39 PM: Your problem has 5403 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:39 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:39 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:39 PM: Finished problem compilation (took 1.267e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5403
  constraints   = 10403
  nnz(P)        = 0
  nnz(A)        = 103567
  cones (total) = 1
    : Nonnegative = 1,  numel = 10403

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7953e-01  +1.0857e+03  1.09e+03  4.37e-01  7.57e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3074e-01  +1.2066e+02  1.20e+02  1.69e-01  3.67e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0855e-01  +3.1322e+01  3.08e+01  1.21e-01  2.67e+01  4.59e-05  2.51e-01  3.05e-01  
  4  +5.0105e-01  +3.1411e+00  2.64e+00  1.83e-02  4.19e+00  5.97e-06  1.57e-01  6.23e-01  
  5  +5.0024e-01  +1.3166e+00  8.16e-01  5.59e-03  1.31e+00  4.40e-05  9.18e-02  8.51e-01  
  6  +5.0006e-01  +9.1184e-01  4.12e-01  2.72e-03  6.42e-01  5.23e-05  2.68e-02  8.27e-01  
  7  +4.9810e-01  +9.3381e-01  4.36e-01  3.88e-04  9.33e-02  1.00e-03  1.18e-03  9.86e-01  
  8  +4.9341e-01  +8.6833e-01  3.75e-01  1.39e-04  3.34e-02  2.12e-03  4.17e-04  6.81e-01  
  9  +4.9024e-01  +8.2455e-01  3.34e-01  1.08e-04  2.59e-02  1.74e-03  3.25e-04  3.48e-01  
 10  +4.8880e-01  +8.0276e-01  3.14e-01  9.96e-05  2.39e-02  1.41e-03  3.02e-04  1.69e-01  
 11  +4.8607e-01  +7.4684e-01  2.61e-01  9.17e-05  2.20e-02  4.56e-04  2.84e-04  4.09e-01  
 12  +4.7485e-01  +6.6868e-01  1.94e-01  5.61e-05  1.34e-02  3.24e-04  1.81e-04  4.28e-01  
 13  +4.6550e-01  +6.0889e-01  1.43e-01  3.89e-05  9.27e-03  1.67e-04  1.31e-04  4.37e-01  
 14  +4.5651e-01  +5.5635e-01  9.98e-02  2.51e-05  5.98e-03  4.93e-05  8.77e-05  6.67e-01  
 15  +4.5246e-01  +5.3560e-01  8.31e-02  2.02e-05  4.82e-03  3.49e-05  7.21e-05  2.98e-01  
 16  +4.4256e-01  +4.8648e-01  4.39e-02  1.01e-05  2.40e-03  1.47e-05  3.79e-05  5.69e-01  
 17  +4.3924e-01  +4.7050e-01  3.13e-02  7.02e-06  1.67e-03  9.02e-06  2.68e-05  4.08e-01  
 18  +4.3639e-01  +4.5723e-01  2.08e-02  4.58e-06  1.09e-03  5.39e-06  1.78e-05  4.22e-01  
 19  +4.3541e-01  +4.5274e-01  1.73e-02  3.75e-06  8.93e-04  4.11e-06  1.47e-05  2.69e-01  
 20  +4.3451e-01  +4.4751e-01  1.30e-02  2.77e-06  6.59e-04  7.15e-07  1.09e-05  9.90e-01  
 21  +4.3248e-01  +4.3947e-01  6.99e-03  1.46e-06  3.48e-04  3.83e-07  5.88e-06  5.14e-01  
 22  +4.3052e-01  +4.3174e-01  1.22e-03  2.52e-07  5.99e-05  6.58e-08  1.04e-06  8.50e-01  
 23  +4.3012e-01  +4.3016e-01  4.51e-05  9.27e-09  2.20e-06  2.39e-09  3.84e-08  9.68e-01  
 24  +4.3010e-01  +4.3010e-01  4.52e-07  9.28e-11  2.21e-08  2.39e-11  3.85e-10  9.90e-01  
 25  +4.3010e-01  +4.3010e-01  4.60e-09  9.44e-13  2.24e-10  2.46e-13  3.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 421.4335ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:40 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:40 PM: Optimal value: 4.301e-01
(CVXPY) Sep 20 08:03:40 PM: Compilation took 1.267e-01 seconds
(CVXPY) Sep 20 08:03:40 PM: Solver (including time spent in interface) took 4.417e-01 seconds
Iteration: 41, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:40 PM: Your problem has 5412 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:40 PM: Finished problem compilation (took 1.241e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5412
  constraints   = 10412
  nnz(P)        = 0
  nnz(A)        = 103957
  cones (total) = 1
    : Nonnegative = 1,  numel = 10412

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7958e-01  +1.0855e+03  1.08e+03  4.37e-01  7.57e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3073e-01  +1.2060e+02  1.20e+02  1.69e-01  3.66e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0854e-01  +3.1301e+01  3.08e+01  1.21e-01  2.66e+01  4.59e-05  2.51e-01  3.05e-01  
  4  +5.0104e-01  +3.1372e+00  2.64e+00  1.82e-02  4.18e+00  5.97e-06  1.57e-01  6.23e-01  
  5  +5.0024e-01  +1.3240e+00  8.24e-01  5.64e-03  1.32e+00  4.39e-05  9.20e-02  8.46e-01  
  6  +5.0007e-01  +9.2652e-01  4.26e-01  2.83e-03  6.66e-01  5.19e-05  2.83e-02  8.00e-01  
  7  +4.9813e-01  +9.3523e-01  4.37e-01  3.93e-04  9.44e-02  9.88e-04  1.20e-03  9.90e-01  
  8  +4.9349e-01  +8.7032e-01  3.77e-01  1.40e-04  3.37e-02  2.10e-03  4.21e-04  6.82e-01  
  9  +4.9051e-01  +8.3307e-01  3.43e-01  1.10e-04  2.65e-02  1.84e-03  3.32e-04  3.14e-01  
 10  +4.8878e-01  +8.1022e-01  3.21e-01  1.01e-04  2.42e-02  1.55e-03  3.07e-04  1.54e-01  
 11  +4.8625e-01  +7.5508e-01  2.69e-01  9.39e-05  2.25e-02  5.59e-04  2.90e-04  3.75e-01  
 12  +4.7430e-01  +6.6876e-01  1.94e-01  5.57e-05  1.33e-02  3.72e-04  1.80e-04  4.60e-01  
 13  +4.6582e-01  +6.1443e-01  1.49e-01  4.03e-05  9.60e-03  2.22e-04  1.35e-04  3.62e-01  
 14  +4.5917e-01  +5.7479e-01  1.16e-01  2.98e-05  7.09e-03  1.21e-04  1.03e-04  4.32e-01  
 15  +4.5473e-01  +5.5063e-01  9.59e-02  2.39e-05  5.68e-03  8.79e-05  8.43e-05  2.75e-01  
 16  +4.4847e-01  +5.1539e-01  6.69e-02  1.58e-05  3.76e-03  2.58e-05  5.73e-05  7.13e-01  
 17  +4.4048e-01  +4.7631e-01  3.58e-02  8.09e-06  1.92e-03  9.04e-06  3.06e-05  6.65e-01  
 18  +4.3654e-01  +4.5778e-01  2.12e-02  4.68e-06  1.11e-03  4.10e-06  1.82e-05  5.85e-01  
 19  +4.3532e-01  +4.5230e-01  1.70e-02  3.69e-06  8.77e-04  3.05e-06  1.44e-05  2.87e-01  
 20  +4.3466e-01  +4.4861e-01  1.40e-02  3.01e-06  7.15e-04  1.32e-06  1.18e-05  7.22e-01  
 21  +4.3271e-01  +4.4066e-01  7.95e-03  1.68e-06  4.00e-04  7.30e-07  6.75e-06  4.71e-01  
 22  +4.3106e-01  +4.3395e-01  2.89e-03  6.04e-07  1.43e-04  2.54e-07  2.47e-06  6.70e-01  
 23  +4.3018e-01  +4.3039e-01  2.15e-04  4.46e-08  1.06e-05  1.14e-08  1.85e-07  9.90e-01  
 24  +4.3010e-01  +4.3010e-01  2.23e-06  4.61e-10  1.10e-07  1.18e-10  1.91e-09  9.90e-01  
 25  +4.3010e-01  +4.3010e-01  2.24e-08  4.64e-12  1.10e-09  1.18e-12  1.92e-11  9.90e-01  
 26  +4.3010e-01  +4.3010e-01  2.37e-10  4.91e-14  1.17e-11  1.27e-14  2.07e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 440.8005ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:41 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:41 PM: Optimal value: 4.301e-01
(CVXPY) Sep 20 08:03:41 PM: Compilation took 1.241e-01 seconds
(CVXPY) Sep 20 08:03:41 PM: Solver (including time spent in interface) took 4.633e-01 seconds
Iteration: 42, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:41 PM: Your problem has 5416 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:41 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:41 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:41 PM: Finished problem compilation (took 1.258e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5416
  constraints   = 10416
  nnz(P)        = 0
  nnz(A)        = 104116
  cones (total) = 1
    : Nonnegative = 1,  numel = 10416

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7957e-01  +1.0856e+03  1.09e+03  4.37e-01  7.57e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3072e-01  +1.2057e+02  1.20e+02  1.69e-01  3.66e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0854e-01  +3.1298e+01  3.08e+01  1.21e-01  2.66e+01  4.59e-05  2.51e-01  3.06e-01  
  4  +5.0104e-01  +3.1393e+00  2.64e+00  1.83e-02  4.19e+00  5.97e-06  1.57e-01  6.23e-01  
  5  +5.0025e-01  +1.3427e+00  8.42e-01  5.77e-03  1.35e+00  4.37e-05  9.30e-02  8.33e-01  
  6  +5.0007e-01  +9.4131e-01  4.41e-01  2.93e-03  6.92e-01  5.06e-05  3.03e-02  7.76e-01  
  7  +4.9849e-01  +9.3632e-01  4.38e-01  4.67e-04  1.12e-01  8.14e-04  1.44e-03  9.90e-01  
  8  +4.9424e-01  +8.8118e-01  3.87e-01  1.54e-04  3.69e-02  2.01e-03  4.61e-04  7.02e-01  
  9  +4.9166e-01  +8.5013e-01  3.58e-01  1.23e-04  2.96e-02  1.90e-03  3.71e-04  2.64e-01  
 10  +4.8964e-01  +8.1196e-01  3.22e-01  1.08e-04  2.59e-02  1.35e-03  3.27e-04  2.69e-01  
 11  +4.8861e-01  +7.9000e-01  3.01e-01  1.06e-04  2.54e-02  1.01e-03  3.24e-04  1.19e-01  
 12  +4.8001e-01  +7.1547e-01  2.35e-01  7.16e-05  1.71e-02  6.79e-04  2.26e-04  4.10e-01  
 13  +4.6856e-01  +6.3519e-01  1.67e-01  4.62e-05  1.10e-02  3.91e-04  1.53e-04  3.98e-01  
 14  +4.6113e-01  +5.8994e-01  1.29e-01  3.38e-05  8.06e-03  2.54e-04  1.16e-04  3.34e-01  
 15  +4.5354e-01  +5.4586e-01  9.23e-02  2.28e-05  5.44e-03  1.28e-04  8.11e-05  4.83e-01  
 16  +4.4922e-01  +5.2008e-01  7.09e-02  1.67e-05  3.98e-03  4.39e-05  6.04e-05  6.69e-01  
 17  +4.3919e-01  +4.7125e-01  3.21e-02  7.21e-06  1.71e-03  1.53e-05  2.75e-05  6.39e-01  
 18  +4.3612e-01  +4.5645e-01  2.03e-02  4.46e-06  1.06e-03  6.70e-06  1.74e-05  5.96e-01  
 19  +4.3520e-01  +4.5230e-01  1.71e-02  3.71e-06  8.82e-04  5.24e-06  1.45e-05  2.41e-01  
 20  +4.3445e-01  +4.4842e-01  1.40e-02  3.00e-06  7.12e-04  2.43e-06  1.18e-05  6.18e-01  
 21  +4.3137e-01  +4.3574e-01  4.37e-03  9.13e-07  2.17e-04  4.82e-07  3.72e-06  8.43e-01  
 22  +4.3009e-01  +4.3062e-01  5.32e-04  1.10e-07  2.61e-05  3.88e-08  4.54e-07  9.51e-01  
 23  +4.2990e-01  +4.2991e-01  6.10e-06  1.26e-09  2.98e-07  4.43e-10  5.21e-09  9.89e-01  
 24  +4.2990e-01  +4.2990e-01  6.18e-08  1.27e-11  3.02e-09  4.49e-12  5.28e-11  9.90e-01  
 25  +4.2990e-01  +4.2990e-01  6.45e-10  1.33e-13  3.16e-11  4.75e-14  5.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 378.8277ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:42 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:42 PM: Optimal value: 4.299e-01
(CVXPY) Sep 20 08:03:42 PM: Compilation took 1.258e-01 seconds
(CVXPY) Sep 20 08:03:42 PM: Solver (including time spent in interface) took 3.948e-01 seconds
Iteration: 43, Objective: 0.4299
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:42 PM: Your problem has 5424 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:42 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:42 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:42 PM: Finished problem compilation (took 1.212e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5424
  constraints   = 10424
  nnz(P)        = 0
  nnz(A)        = 104521
  cones (total) = 1
    : Nonnegative = 1,  numel = 10424

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7955e-01  +1.0856e+03  1.09e+03  4.37e-01  7.56e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3072e-01  +1.2058e+02  1.20e+02  1.69e-01  3.65e+01  1.65e-02  2.72e-01  9.45e-01  
  3  +5.0854e-01  +3.1294e+01  3.08e+01  1.21e-01  2.66e+01  4.59e-05  2.51e-01  3.06e-01  
  4  +5.0104e-01  +3.1388e+00  2.64e+00  1.83e-02  4.18e+00  5.97e-06  1.57e-01  6.23e-01  
  5  +5.0024e-01  +1.3251e+00  8.25e-01  5.65e-03  1.32e+00  4.40e-05  9.18e-02  8.48e-01  
  6  +5.0007e-01  +9.3691e-01  4.37e-01  2.89e-03  6.82e-01  5.22e-05  2.87e-02  8.01e-01  
  7  +4.9825e-01  +9.3248e-01  4.34e-01  4.08e-04  9.80e-02  9.33e-04  1.25e-03  9.90e-01  
  8  +4.9376e-01  +8.7150e-01  3.78e-01  1.44e-04  3.46e-02  2.05e-03  4.32e-04  6.85e-01  
  9  +4.9134e-01  +8.4016e-01  3.49e-01  1.17e-04  2.81e-02  1.83e-03  3.53e-04  2.75e-01  
 10  +4.8914e-01  +8.0957e-01  3.20e-01  1.04e-04  2.48e-02  1.47e-03  3.14e-04  2.12e-01  
 11  +4.8780e-01  +7.8129e-01  2.93e-01  1.01e-04  2.42e-02  9.93e-04  3.09e-04  1.62e-01  
 12  +4.7805e-01  +7.0073e-01  2.23e-01  6.57e-05  1.57e-02  6.35e-04  2.09e-04  4.33e-01  
 13  +4.6683e-01  +6.2309e-01  1.56e-01  4.27e-05  1.02e-02  3.27e-04  1.43e-04  4.31e-01  
 14  +4.6038e-01  +5.8374e-01  1.23e-01  3.22e-05  7.66e-03  1.89e-04  1.11e-04  3.95e-01  
 15  +4.5413e-01  +5.4877e-01  9.46e-02  2.35e-05  5.60e-03  1.18e-04  8.34e-05  3.72e-01  
 16  +4.4705e-01  +5.0987e-01  6.28e-02  1.48e-05  3.51e-03  4.24e-05  5.40e-05  6.42e-01  
 17  +4.4122e-01  +4.8146e-01  4.02e-02  9.14e-06  2.17e-03  2.36e-05  3.45e-05  4.45e-01  
 18  +4.3622e-01  +4.5736e-01  2.11e-02  4.64e-06  1.10e-03  8.60e-06  1.81e-05  6.55e-01  
 19  +4.3508e-01  +4.5206e-01  1.70e-02  3.68e-06  8.73e-04  6.05e-06  1.44e-05  3.25e-01  
 20  +4.3465e-01  +4.4973e-01  1.51e-02  3.27e-06  7.77e-04  3.92e-06  1.29e-05  3.77e-01  
 21  +4.3229e-01  +4.3952e-01  7.23e-03  1.54e-06  3.67e-04  1.44e-06  6.19e-06  6.66e-01  
 22  +4.3102e-01  +4.3433e-01  3.31e-03  6.93e-07  1.65e-04  3.71e-07  2.82e-06  8.05e-01  
 23  +4.3001e-01  +4.3033e-01  3.16e-04  6.55e-08  1.56e-05  3.03e-08  2.71e-07  9.28e-01  
 24  +4.2990e-01  +4.2990e-01  3.47e-06  7.17e-10  1.70e-07  3.28e-10  2.97e-09  9.89e-01  
 25  +4.2990e-01  +4.2990e-01  3.55e-08  7.34e-12  1.74e-09  3.36e-12  3.04e-11  9.90e-01  
 26  +4.2990e-01  +4.2990e-01  4.03e-10  8.33e-14  1.98e-11  3.88e-14  3.51e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 435.2527ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:43 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:43 PM: Optimal value: 4.299e-01
(CVXPY) Sep 20 08:03:43 PM: Compilation took 1.212e-01 seconds
(CVXPY) Sep 20 08:03:43 PM: Solver (including time spent in interface) took 4.553e-01 seconds
Iteration: 44, Objective: 0.4299
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:43 PM: Your problem has 5434 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:43 PM: Finished problem compilation (took 1.343e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:43 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5434
  constraints   = 10434
  nnz(P)        = 0
  nnz(A)        = 105118
  cones (total) = 1
    : Nonnegative = 1,  numel = 10434

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7955e-01  +1.0856e+03  1.09e+03  4.38e-01  7.56e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3073e-01  +1.2060e+02  1.20e+02  1.69e-01  3.65e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0854e-01  +3.1297e+01  3.08e+01  1.22e-01  2.65e+01  4.59e-05  2.51e-01  3.06e-01  
  4  +5.0104e-01  +3.1385e+00  2.64e+00  1.83e-02  4.18e+00  5.97e-06  1.57e-01  6.24e-01  
  5  +5.0024e-01  +1.3267e+00  8.27e-01  5.67e-03  1.33e+00  4.40e-05  9.19e-02  8.46e-01  
  6  +5.0007e-01  +9.3850e-01  4.38e-01  2.91e-03  6.85e-01  5.22e-05  2.89e-02  8.02e-01  
  7  +4.9826e-01  +9.3322e-01  4.35e-01  4.11e-04  9.86e-02  9.26e-04  1.26e-03  9.90e-01  
  8  +4.9380e-01  +8.7285e-01  3.79e-01  1.45e-04  3.48e-02  2.05e-03  4.34e-04  6.84e-01  
  9  +4.9152e-01  +8.4166e-01  3.50e-01  1.19e-04  2.86e-02  1.81e-03  3.59e-04  2.67e-01  
 10  +4.8944e-01  +8.0959e-01  3.20e-01  1.05e-04  2.52e-02  1.39e-03  3.19e-04  2.37e-01  
 11  +4.8818e-01  +7.8307e-01  2.95e-01  1.02e-04  2.45e-02  9.58e-04  3.14e-04  1.58e-01  
 12  +4.7878e-01  +7.0485e-01  2.26e-01  6.74e-05  1.61e-02  6.24e-04  2.14e-04  4.29e-01  
 13  +4.6727e-01  +6.2558e-01  1.58e-01  4.34e-05  1.03e-02  3.27e-04  1.45e-04  4.28e-01  
 14  +4.6033e-01  +5.8448e-01  1.24e-01  3.23e-05  7.70e-03  2.14e-04  1.11e-04  3.31e-01  
 15  +4.5393e-01  +5.4823e-01  9.43e-02  2.34e-05  5.56e-03  1.25e-04  8.29e-05  4.08e-01  
 16  +4.4785e-01  +5.1489e-01  6.70e-02  1.58e-05  3.76e-03  5.53e-05  5.77e-05  5.61e-01  
 17  +4.4135e-01  +4.8291e-01  4.16e-02  9.48e-06  2.25e-03  3.01e-05  3.58e-05  4.51e-01  
 18  +4.3690e-01  +4.6107e-01  2.42e-02  5.35e-06  1.27e-03  1.19e-05  2.07e-05  6.20e-01  
 19  +4.3545e-01  +4.5427e-01  1.88e-02  4.12e-06  9.79e-04  8.41e-06  1.61e-05  3.11e-01  
 20  +4.3476e-01  +4.5103e-01  1.63e-02  3.54e-06  8.40e-04  6.55e-06  1.39e-05  2.38e-01  
 21  +4.3273e-01  +4.4176e-01  9.03e-03  1.94e-06  4.62e-04  2.57e-06  7.73e-06  6.33e-01  
 22  +4.3241e-01  +4.4025e-01  7.84e-03  1.68e-06  4.00e-04  1.87e-06  6.71e-06  3.03e-01  
 23  +4.3090e-01  +4.3385e-01  2.94e-03  6.25e-07  1.48e-04  4.70e-07  2.53e-06  7.84e-01  
 24  +4.3047e-01  +4.3215e-01  1.67e-03  3.52e-07  8.35e-05  2.48e-07  1.44e-06  4.92e-01  
 25  +4.3011e-01  +4.3073e-01  6.11e-04  1.27e-07  3.02e-05  6.18e-08  5.25e-07  8.05e-01  
 26  +4.2991e-01  +4.2992e-01  1.72e-05  3.56e-09  8.46e-07  1.62e-09  1.48e-08  9.76e-01  
 27  +4.2990e-01  +4.2990e-01  1.74e-07  3.61e-11  8.57e-09  1.65e-11  1.50e-10  9.90e-01  
 28  +4.2990e-01  +4.2990e-01  2.13e-09  4.40e-13  1.04e-10  2.08e-13  1.89e-12  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 453.6192ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:43 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:43 PM: Optimal value: 4.299e-01
(CVXPY) Sep 20 08:03:43 PM: Compilation took 1.343e-01 seconds
(CVXPY) Sep 20 08:03:43 PM: Solver (including time spent in interface) took 4.731e-01 seconds
Iteration: 45, Objective: 0.4299
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:44 PM: Your problem has 5440 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:44 PM: Finished problem compilation (took 1.169e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5440
  constraints   = 10440
  nnz(P)        = 0
  nnz(A)        = 105295
  cones (total) = 1
    : Nonnegative = 1,  numel = 10440

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7957e-01  +1.0855e+03  1.08e+03  4.38e-01  7.55e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3073e-01  +1.2058e+02  1.20e+02  1.69e-01  3.65e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0854e-01  +3.1287e+01  3.08e+01  1.22e-01  2.65e+01  4.59e-05  2.51e-01  3.06e-01  
  4  +5.0104e-01  +3.1358e+00  2.63e+00  1.83e-02  4.18e+00  5.97e-06  1.57e-01  6.24e-01  
  5  +5.0024e-01  +1.3277e+00  8.27e-01  5.68e-03  1.33e+00  4.39e-05  9.18e-02  8.46e-01  
  6  +5.0008e-01  +9.4712e-01  4.47e-01  2.98e-03  7.02e-01  5.10e-05  3.13e-02  7.24e-01  
  7  +4.9872e-01  +9.3954e-01  4.41e-01  5.49e-04  1.32e-01  7.05e-04  1.71e-03  9.84e-01  
  8  +4.9455e-01  +8.8917e-01  3.95e-01  1.63e-04  3.90e-02  2.01e-03  4.88e-04  7.29e-01  
  9  +4.9175e-01  +8.5516e-01  3.63e-01  1.27e-04  3.05e-02  1.94e-03  3.84e-04  2.76e-01  
 10  +4.9022e-01  +8.1286e-01  3.23e-01  1.12e-04  2.69e-02  1.21e-03  3.40e-04  3.20e-01  
 11  +4.8926e-01  +7.8987e-01  3.01e-01  1.09e-04  2.62e-02  8.66e-04  3.35e-04  1.53e-01  
 12  +4.8056e-01  +7.1708e-01  2.37e-01  7.25e-05  1.73e-02  6.33e-04  2.29e-04  4.03e-01  
 13  +4.7008e-01  +6.4508e-01  1.75e-01  4.89e-05  1.17e-02  4.09e-04  1.62e-04  3.48e-01  
 14  +4.6225e-01  +5.9670e-01  1.34e-01  3.55e-05  8.44e-03  2.57e-04  1.21e-04  3.50e-01  
 15  +4.5436e-01  +5.5122e-01  9.69e-02  2.41e-05  5.73e-03  1.35e-04  8.54e-05  4.55e-01  
 16  +4.5082e-01  +5.3147e-01  8.06e-02  1.94e-05  4.62e-03  8.74e-05  6.99e-05  3.63e-01  
 17  +4.4383e-01  +4.9572e-01  5.19e-02  1.20e-05  2.85e-03  4.52e-05  4.47e-05  4.77e-01  
 18  +4.3995e-01  +4.7669e-01  3.67e-02  8.31e-06  1.97e-03  2.81e-05  3.17e-05  3.80e-01  
 19  +4.3475e-01  +4.5177e-01  1.70e-02  3.74e-06  8.89e-04  1.00e-05  1.47e-05  6.48e-01  
 20  +4.3434e-01  +4.4987e-01  1.55e-02  3.39e-06  8.04e-04  8.70e-06  1.34e-05  1.46e-01  
 21  +4.3349e-01  +4.4487e-01  1.14e-02  2.46e-06  5.84e-04  2.04e-06  9.73e-06  8.28e-01  
 22  +4.3216e-01  +4.3936e-01  7.20e-03  1.55e-06  3.67e-04  1.14e-06  6.19e-06  4.64e-01  
 23  +4.3098e-01  +4.3448e-01  3.49e-03  7.46e-07  1.77e-04  4.05e-07  3.02e-06  7.03e-01  
 24  +4.3058e-01  +4.3287e-01  2.28e-03  4.83e-07  1.15e-04  2.10e-07  1.97e-06  5.75e-01  
 25  +4.3037e-01  +4.3198e-01  1.61e-03  3.40e-07  8.06e-05  9.95e-08  1.39e-06  7.70e-01  
 26  +4.2990e-01  +4.3019e-01  2.88e-04  5.98e-08  1.42e-05  1.66e-08  2.48e-07  8.74e-01  
 27  +4.2980e-01  +4.2981e-01  7.09e-06  1.47e-09  3.49e-07  4.05e-10  6.12e-09  9.76e-01  
 28  +4.2980e-01  +4.2980e-01  7.28e-08  1.51e-11  3.59e-09  4.16e-12  6.29e-11  9.90e-01  
 29  +4.2980e-01  +4.2980e-01  9.51e-10  1.97e-13  4.68e-11  5.63e-14  8.49e-13  9.87e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 403.9741ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:44 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:44 PM: Optimal value: 4.298e-01
(CVXPY) Sep 20 08:03:44 PM: Compilation took 1.169e-01 seconds
(CVXPY) Sep 20 08:03:44 PM: Solver (including time spent in interface) took 4.271e-01 seconds
Iteration: 46, Objective: 0.4298
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 08:03:45 PM: Your problem has 5443 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 08:03:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 08:03:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 08:03:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 08:03:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 08:03:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 08:03:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 08:03:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 08:03:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 08:03:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 08:03:45 PM: Finished problem compilation (took 1.192e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5443
  constraints   = 10443
  nnz(P)        = 0
  nnz(A)        = 105395
  cones (total) = 1
    : Nonnegative = 1,  numel = 10443

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0013e+03  5.00e+03  9.86e-01  1.18e+02  1.00e+00  1.00e+00   ------   
  1  +5.7959e-01  +1.0855e+03  1.08e+03  4.38e-01  7.55e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.3073e-01  +1.2057e+02  1.20e+02  1.69e-01  3.64e+01  1.65e-02  2.72e-01  9.44e-01  
  3  +5.0854e-01  +3.1282e+01  3.08e+01  1.22e-01  2.65e+01  4.59e-05  2.51e-01  3.06e-01  
  4  +5.0104e-01  +3.1350e+00  2.63e+00  1.83e-02  4.18e+00  5.97e-06  1.57e-01  6.24e-01  
  5  +5.0024e-01  +1.3266e+00  8.26e-01  5.67e-03  1.33e+00  4.40e-05  9.17e-02  8.47e-01  
  6  +5.0008e-01  +9.4672e-01  4.47e-01  2.98e-03  7.01e-01  5.11e-05  3.12e-02  7.22e-01  
  7  +4.9874e-01  +9.3966e-01  4.41e-01  5.56e-04  1.33e-01  6.97e-04  1.73e-03  9.83e-01  
  8  +4.9457e-01  +8.8972e-01  3.95e-01  1.63e-04  3.91e-02  2.01e-03  4.90e-04  7.31e-01  
  9  +4.9176e-01  +8.5542e-01  3.64e-01  1.28e-04  3.06e-02  1.94e-03  3.85e-04  2.77e-01  
 10  +4.9019e-01  +8.1258e-01  3.22e-01  1.12e-04  2.68e-02  1.20e-03  3.40e-04  3.25e-01  
 11  +4.8922e-01  +7.8955e-01  3.00e-01  1.09e-04  2.62e-02  8.62e-04  3.35e-04  1.53e-01  
 12  +4.8063e-01  +7.1788e-01  2.37e-01  7.28e-05  1.74e-02  6.34e-04  2.30e-04  3.97e-01  
 13  +4.7029e-01  +6.4669e-01  1.76e-01  4.94e-05  1.18e-02  4.08e-04  1.63e-04  3.51e-01  
 14  +4.6221e-01  +5.9681e-01  1.35e-01  3.56e-05  8.46e-03  2.51e-04  1.22e-04  3.60e-01  
 15  +4.5444e-01  +5.5211e-01  9.77e-02  2.43e-05  5.79e-03  1.31e-04  8.63e-05  4.58e-01  
 16  +4.5012e-01  +5.2800e-01  7.79e-02  1.87e-05  4.44e-03  7.46e-05  6.75e-05  4.40e-01  
 17  +4.4209e-01  +4.8757e-01  4.55e-02  1.04e-05  2.48e-03  3.46e-05  3.93e-05  5.26e-01  
 18  +4.3820e-01  +4.6874e-01  3.05e-02  6.84e-06  1.63e-03  2.03e-05  2.64e-05  4.18e-01  
 19  +4.3419e-01  +4.4991e-01  1.57e-02  3.45e-06  8.18e-04  9.27e-06  1.37e-05  5.45e-01  
 20  +4.3391e-01  +4.4850e-01  1.46e-02  3.18e-06  7.54e-04  8.03e-06  1.26e-05  1.50e-01  
 21  +4.3239e-01  +4.4113e-01  8.74e-03  1.88e-06  4.46e-04  2.68e-06  7.53e-06  7.02e-01  
 22  +4.3104e-01  +4.3541e-01  4.38e-03  9.30e-07  2.21e-04  1.13e-06  3.79e-06  5.94e-01  
 23  +4.3027e-01  +4.3222e-01  1.95e-03  4.11e-07  9.75e-05  3.03e-07  1.69e-06  7.74e-01  
 24  +4.2966e-01  +4.2982e-01  1.64e-04  3.42e-08  8.11e-06  2.21e-08  1.42e-07  9.32e-01  
 25  +4.2960e-01  +4.2960e-01  1.82e-06  3.78e-10  8.97e-08  2.43e-10  1.58e-09  9.89e-01  
 26  +4.2960e-01  +4.2960e-01  1.86e-08  3.87e-12  9.20e-10  2.50e-12  1.62e-11  9.90e-01  
 27  +4.2960e-01  +4.2960e-01  2.24e-10  4.67e-14  1.11e-11  3.07e-14  1.99e-13  9.88e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 375.9756ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 08:03:45 PM: Problem status: optimal
(CVXPY) Sep 20 08:03:45 PM: Optimal value: 4.296e-01
(CVXPY) Sep 20 08:03:45 PM: Compilation took 1.192e-01 seconds
(CVXPY) Sep 20 08:03:45 PM: Solver (including time spent in interface) took 3.938e-01 seconds
FULL MODEL:
  Accruacy: 0.528
  Our objective: 0.056000000000000036

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0022)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.0068)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x5 = 0 AND x8 = 1)                                                        <-- (term's our objective: 0.0178)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0014)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 46.640259742736816
Best over terms:
  Our final objective: 0.017800000000000038
    Its accruacy: 0.5089
    Its hamming distance: 7
  Shortest hamming distance: 2
    Its our objective: 0.006800000000000032
  Highest accruacy: 0.5089
   dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 136 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 137 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 138 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 139 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 140 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 141 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

