Command:
python test_script.py -s constant_subclass -d 4 -n 50 --seed 56 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:21 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:21 PM: Finished problem compilation (took 5.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9235e-01  +2.5863e+01  2.54e+01  8.13e-01  5.40e+00  1.00e+00  1.07e+00   ------   
  1  +5.9680e-01  +5.2697e+00  4.67e+00  2.81e-01  2.75e+00  4.06e-03  5.05e-01  6.70e-01  
  2  +5.1597e-01  +9.3611e-01  4.20e-01  4.42e-02  5.01e-01  1.06e-02  1.26e-01  9.90e-01  
  3  +4.9660e-01  +9.0330e-01  4.07e-01  2.45e-02  2.88e-01  1.38e-02  7.47e-02  4.85e-01  
  4  +4.5460e-01  +6.7170e-01  2.17e-01  9.53e-03  1.13e-01  7.26e-03  3.42e-02  6.07e-01  
  5  +4.1792e-01  +4.8201e-01  6.41e-02  2.68e-03  3.14e-02  1.59e-03  1.20e-02  7.17e-01  
  6  +4.0122e-01  +4.0472e-01  3.51e-03  1.45e-04  1.70e-03  4.78e-05  7.33e-04  9.64e-01  
  7  +4.0011e-01  +4.0015e-01  3.51e-05  1.46e-06  1.70e-05  4.76e-07  7.40e-06  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  3.51e-07  1.46e-08  1.70e-07  4.76e-09  7.40e-08  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  3.51e-09  1.46e-10  1.70e-09  4.76e-11  7.40e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 249.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:21 PM: Optimal value: 4.001e-01
(CVXPY) Sep 20 07:28:21 PM: Compilation took 5.508e-03 seconds
(CVXPY) Sep 20 07:28:21 PM: Solver (including time spent in interface) took 1.006e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:21 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:21 PM: Finished problem compilation (took 4.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 254
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7840e-01  +2.6784e+01  2.63e+01  8.31e-01  5.66e+00  1.00e+00  1.13e+00   ------   
  1  +5.3660e-01  +5.5288e+00  4.99e+00  3.09e-01  2.90e+00  4.00e-03  5.58e-01  6.52e-01  
  2  +4.5361e-01  +1.4158e+00  9.62e-01  8.01e-02  9.19e-01  1.29e-02  2.17e-01  7.96e-01  
  3  +3.7817e-01  +7.4935e-01  3.71e-01  2.36e-02  2.75e-01  6.00e-03  7.62e-02  7.14e-01  
  4  +3.3612e-01  +5.4696e-01  2.11e-01  9.48e-03  1.13e-01  4.20e-03  3.45e-02  6.23e-01  
  5  +2.9307e-01  +3.3131e-01  3.82e-02  1.69e-03  1.99e-02  3.40e-04  7.34e-03  8.66e-01  
  6  +2.8100e-01  +2.8303e-01  2.03e-03  8.77e-05  1.03e-03  1.58e-05  4.06e-04  9.57e-01  
  7  +2.8035e-01  +2.8047e-01  1.28e-04  5.59e-06  6.52e-05  8.38e-07  2.64e-05  9.37e-01  
  8  +2.8030e-01  +2.8030e-01  1.97e-06  8.72e-08  1.01e-06  1.08e-08  4.20e-07  9.84e-01  
  9  +2.8030e-01  +2.8030e-01  1.97e-08  8.71e-10  1.01e-08  1.08e-10  4.20e-09  9.90e-01  
 10  +2.8030e-01  +2.8030e-01  1.98e-10  8.73e-12  1.02e-10  1.08e-12  4.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 262.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:21 PM: Optimal value: 2.803e-01
(CVXPY) Sep 20 07:28:21 PM: Compilation took 4.510e-03 seconds
(CVXPY) Sep 20 07:28:21 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:21 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:21 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:21 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:21 PM: Finished problem compilation (took 3.993e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 273
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7618e-01  +2.6724e+01  2.62e+01  8.36e-01  5.62e+00  1.00e+00  1.13e+00   ------   
  1  +5.2155e-01  +5.4958e+00  4.97e+00  3.13e-01  2.84e+00  4.00e-03  5.58e-01  6.52e-01  
  2  +4.3458e-01  +1.4254e+00  9.91e-01  7.58e-02  8.61e-01  1.31e-02  2.05e-01  8.04e-01  
  3  +3.3970e-01  +7.6615e-01  4.26e-01  2.29e-02  2.66e-01  7.05e-03  7.33e-02  7.25e-01  
  4  +2.7907e-01  +3.6295e-01  8.39e-02  4.57e-03  5.16e-02  8.29e-04  1.74e-02  8.13e-01  
  5  +2.6134e-01  +2.6563e-01  4.29e-03  2.40e-04  2.68e-03  3.77e-05  1.00e-03  9.51e-01  
  6  +2.6043e-01  +2.6086e-01  4.22e-04  2.35e-05  2.61e-04  3.01e-06  1.04e-04  8.98e-01  
  7  +2.6031e-01  +2.6036e-01  4.39e-05  2.36e-06  2.61e-05  2.71e-07  1.20e-05  9.22e-01  
  8  +2.6030e-01  +2.6030e-01  4.85e-07  2.60e-08  2.88e-07  2.82e-09  1.35e-07  9.89e-01  
  9  +2.6030e-01  +2.6030e-01  4.85e-09  2.60e-10  2.89e-09  2.82e-11  1.35e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 274.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:21 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:21 PM: Optimal value: 2.603e-01
(CVXPY) Sep 20 07:28:21 PM: Compilation took 3.993e-03 seconds
(CVXPY) Sep 20 07:28:21 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:22 PM: Your problem has 49 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:22 PM: Finished problem compilation (took 3.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 49
  constraints   = 74
  nnz(P)        = 0
  nnz(A)        = 279
  cones (total) = 1
    : Nonnegative = 1,  numel = 74

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7568e-01  +2.6756e+01  2.63e+01  8.37e-01  5.62e+00  1.00e+00  1.14e+00   ------   
  1  +5.1804e-01  +5.5172e+00  5.00e+00  3.16e-01  2.85e+00  3.99e-03  5.64e-01  6.50e-01  
  2  +4.2957e-01  +1.4703e+00  1.04e+00  7.88e-02  8.89e-01  1.34e-02  2.13e-01  7.93e-01  
  3  +3.2351e-01  +7.3185e-01  4.08e-01  2.12e-02  2.45e-01  6.87e-03  6.88e-02  7.57e-01  
  4  +2.6568e-01  +3.6395e-01  9.83e-02  4.97e-03  5.60e-02  1.43e-03  1.96e-02  8.09e-01  
  5  +2.4788e-01  +2.7222e-01  2.43e-02  1.25e-03  1.40e-02  2.27e-04  5.44e-03  9.29e-01  
  6  +2.4065e-01  +2.4149e-01  8.36e-04  4.21e-05  4.69e-04  6.64e-06  1.92e-04  9.67e-01  
  7  +2.4042e-01  +2.4047e-01  5.32e-05  2.71e-06  3.00e-05  2.53e-07  1.35e-05  9.41e-01  
  8  +2.4040e-01  +2.4040e-01  6.33e-07  3.23e-08  3.58e-07  3.16e-09  1.66e-07  9.89e-01  
  9  +2.4040e-01  +2.4040e-01  6.33e-09  3.23e-10  3.57e-09  3.16e-11  1.66e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 299.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:22 PM: Optimal value: 2.404e-01
(CVXPY) Sep 20 07:28:22 PM: Compilation took 3.509e-03 seconds
(CVXPY) Sep 20 07:28:22 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:28:22 PM: Your problem has 50 variables, 25 constraints, and 0 parameters.
(CVXPY) Sep 20 07:28:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:28:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:28:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:28:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:28:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:28:22 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:28:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:28:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:28:22 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:28:22 PM: Finished problem compilation (took 2.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 50
  constraints   = 75
  nnz(P)        = 0
  nnz(A)        = 283
  cones (total) = 1
    : Nonnegative = 1,  numel = 75

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7542e-01  +2.6750e+01  2.63e+01  8.38e-01  5.60e+00  1.00e+00  1.14e+00   ------   
  1  +5.1613e-01  +5.5282e+00  5.01e+00  3.18e-01  2.85e+00  3.98e-03  5.67e-01  6.48e-01  
  2  +4.2482e-01  +1.4674e+00  1.04e+00  7.78e-02  8.72e-01  1.37e-02  2.12e-01  7.99e-01  
  3  +3.2563e-01  +7.9681e-01  4.71e-01  2.52e-02  2.88e-01  7.32e-03  8.14e-02  7.03e-01  
  4  +2.6285e-01  +3.4979e-01  8.69e-02  4.63e-03  5.16e-02  1.05e-03  1.82e-02  8.21e-01  
  5  +2.4217e-01  +2.4783e-01  5.65e-03  3.06e-04  3.37e-03  4.39e-05  1.33e-03  9.68e-01  
  6  +2.4063e-01  +2.4131e-01  6.79e-04  3.66e-05  4.02e-04  4.74e-06  1.65e-04  8.80e-01  
  7  +2.4043e-01  +2.4050e-01  7.77e-05  4.16e-06  4.55e-05  4.72e-07  2.04e-05  9.04e-01  
  8  +2.4040e-01  +2.4040e-01  9.32e-07  4.99e-08  5.46e-07  5.01e-09  2.51e-07  9.88e-01  
  9  +2.4040e-01  +2.4040e-01  9.32e-09  4.99e-10  5.46e-09  5.01e-11  2.52e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 294.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:28:22 PM: Problem status: optimal
(CVXPY) Sep 20 07:28:22 PM: Optimal value: 2.404e-01
(CVXPY) Sep 20 07:28:22 PM: Compilation took 2.999e-03 seconds
(CVXPY) Sep 20 07:28:22 PM: Solver (including time spent in interface) took 9.997e-04 seconds
FULL MODEL:
  Accruacy: 0.76
  Our objective: 0.52

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0)            <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.793449640274048
Best over terms:
  Our final objective: 0.16000000000000003
    Its accruacy: 0.58
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

