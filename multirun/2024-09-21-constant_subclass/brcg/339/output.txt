Command:
python test_script.py -s constant_subclass -d 9 -n 500 --seed 21 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.008
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.6560000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:57 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:57 PM: Finished problem compilation (took 9.262e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +2.5081e+02  2.50e+02  9.38e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8030e-01  +5.4646e+01  5.41e+01  4.07e-01  1.58e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2891e-01  +6.3372e+00  5.81e+00  1.29e-01  6.35e+00  1.68e-02  2.65e-01  9.68e-01  
  3  +5.0350e-01  +1.5611e+00  1.06e+00  3.33e-02  1.62e+00  4.02e-05  2.02e-01  7.22e-01  
  4  +5.0056e-01  +6.6259e-01  1.62e-01  5.22e-03  2.63e-01  8.52e-06  4.79e-02  7.93e-01  
  5  +4.9946e-01  +6.5770e-01  1.58e-01  3.80e-03  1.94e-01  2.08e-05  1.55e-02  7.43e-01  
  6  +4.9165e-01  +5.9801e-01  1.06e-01  6.91e-04  3.58e-02  7.44e-05  2.26e-03  8.58e-01  
  7  +4.8288e-01  +5.4571e-01  6.28e-02  3.50e-04  1.81e-02  4.14e-05  1.25e-03  6.49e-01  
  8  +4.7456e-01  +5.0431e-01  2.98e-02  1.42e-04  7.31e-03  1.91e-05  5.57e-04  6.62e-01  
  9  +4.7144e-01  +4.8921e-01  1.78e-02  8.02e-05  4.14e-03  1.31e-05  3.33e-04  7.23e-01  
 10  +4.6653e-01  +4.6789e-01  1.36e-03  5.70e-06  2.94e-04  8.62e-07  2.56e-05  9.41e-01  
 11  +4.6610e-01  +4.6612e-01  1.43e-05  5.95e-08  3.07e-06  9.13e-09  2.70e-07  9.90e-01  
 12  +4.6610e-01  +4.6610e-01  1.43e-07  5.95e-10  3.07e-08  9.13e-11  2.70e-09  9.90e-01  
 13  +4.6610e-01  +4.6610e-01  1.43e-09  5.95e-12  3.07e-10  9.14e-13  2.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6219ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:57 PM: Optimal value: 4.661e-01
(CVXPY) Sep 20 07:56:57 PM: Compilation took 9.262e-03 seconds
(CVXPY) Sep 20 07:56:57 PM: Solver (including time spent in interface) took 4.493e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4661
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:57 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:57 PM: Finished problem compilation (took 5.989e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3372
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +2.5141e+02  2.51e+02  9.39e-01  2.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.7649e-01  +5.4805e+01  5.42e+01  4.10e-01  1.59e+01  3.78e-03  5.80e-01  5.86e-01  
  2  +5.2565e-01  +6.2687e+00  5.74e+00  1.25e-01  6.23e+00  1.74e-02  2.58e-01  9.90e-01  
  3  +5.0431e-01  +1.4508e+00  9.47e-01  3.32e-02  1.67e+00  6.50e-04  1.25e-01  8.96e-01  
  4  +4.9806e-01  +9.0219e-01  4.04e-01  8.74e-03  4.61e-01  8.25e-04  2.69e-02  8.77e-01  
  5  +4.8492e-01  +8.0105e-01  3.16e-01  2.82e-03  1.51e-01  1.65e-03  8.20e-03  7.04e-01  
  6  +4.7028e-01  +6.8664e-01  2.16e-01  1.55e-03  8.23e-02  1.01e-03  4.81e-03  5.10e-01  
  7  +4.5373e-01  +5.8485e-01  1.31e-01  6.94e-04  3.67e-02  5.07e-04  2.33e-03  6.83e-01  
  8  +4.4750e-01  +5.4536e-01  9.79e-02  5.52e-04  2.92e-02  2.07e-04  1.88e-03  4.96e-01  
  9  +4.3231e-01  +4.6214e-01  2.98e-02  1.45e-04  7.69e-03  5.18e-05  5.16e-04  8.15e-01  
 10  +4.2811e-01  +4.3818e-01  1.01e-02  4.69e-05  2.50e-03  1.49e-05  1.61e-04  8.97e-01  
 11  +4.2660e-01  +4.3213e-01  5.53e-03  2.44e-05  1.30e-03  7.87e-06  8.23e-05  5.74e-01  
 12  +4.2524e-01  +4.2599e-01  7.50e-04  3.32e-06  1.77e-04  7.96e-07  1.13e-05  9.90e-01  
 13  +4.2501e-01  +4.2503e-01  1.89e-05  8.37e-08  4.45e-06  1.94e-08  2.86e-07  9.80e-01  
 14  +4.2500e-01  +4.2500e-01  1.89e-07  8.38e-10  4.46e-08  1.94e-10  2.87e-09  9.90e-01  
 15  +4.2500e-01  +4.2500e-01  1.89e-09  8.38e-12  4.46e-10  1.94e-12  2.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.9842ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:57 PM: Optimal value: 4.250e-01
(CVXPY) Sep 20 07:56:57 PM: Compilation took 5.989e-03 seconds
(CVXPY) Sep 20 07:56:57 PM: Solver (including time spent in interface) took 5.109e-03 seconds
Iteration: 2, Objective: 0.4250
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:57 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:57 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:57 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:57 PM: Finished problem compilation (took 5.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3719
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9910e-01  +2.5135e+02  2.51e+02  9.39e-01  2.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7451e-01  +5.4861e+01  5.43e+01  4.14e-01  1.60e+01  3.78e-03  5.82e-01  5.85e-01  
  2  +5.2406e-01  +6.3723e+00  5.85e+00  1.26e-01  6.25e+00  1.78e-02  2.58e-01  9.90e-01  
  3  +5.0539e-01  +1.3921e+00  8.87e-01  3.03e-02  1.57e+00  1.13e-03  9.49e-02  8.74e-01  
  4  +5.0387e-01  +1.3737e+00  8.70e-01  1.96e-02  1.05e+00  1.68e-03  5.34e-02  4.97e-01  
  5  +4.9348e-01  +1.2378e+00  7.44e-01  6.60e-03  3.61e-01  2.87e-03  1.73e-02  7.95e-01  
  6  +4.7114e-01  +8.1179e-01  3.41e-01  2.43e-03  1.31e-01  6.33e-04  6.90e-03  7.76e-01  
  7  +4.6045e-01  +7.6138e-01  3.01e-01  1.63e-03  8.75e-02  5.92e-04  4.70e-03  4.52e-01  
  8  +4.5032e-01  +6.8756e-01  2.37e-01  1.28e-03  6.89e-02  3.47e-04  3.81e-03  4.00e-01  
  9  +4.3624e-01  +5.9639e-01  1.60e-01  8.70e-04  4.64e-02  8.85e-05  2.74e-03  9.90e-01  
 10  +4.1394e-01  +4.7742e-01  6.35e-02  3.03e-04  1.62e-02  3.72e-05  1.00e-03  6.70e-01  
 11  +4.0380e-01  +4.3060e-01  2.68e-02  1.19e-04  6.40e-03  1.91e-05  4.00e-04  6.87e-01  
 12  +4.0157e-01  +4.2207e-01  2.05e-02  8.52e-05  4.58e-03  1.58e-05  2.90e-04  3.43e-01  
 13  +3.9653e-01  +4.0049e-01  3.96e-03  1.62e-05  8.74e-04  4.35e-06  5.62e-05  9.90e-01  
 14  +3.9533e-01  +3.9587e-01  5.39e-04  2.20e-06  1.18e-04  5.81e-07  7.68e-06  8.69e-01  
 15  +3.9515e-01  +3.9519e-01  4.47e-05  1.82e-07  9.79e-06  4.84e-08  6.42e-07  9.34e-01  
 16  +3.9513e-01  +3.9513e-01  4.65e-07  1.89e-09  1.02e-07  5.04e-10  6.67e-09  9.90e-01  
 17  +3.9513e-01  +3.9513e-01  4.65e-09  1.89e-11  1.02e-09  5.04e-12  6.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0833ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:57 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:57 PM: Optimal value: 3.951e-01
(CVXPY) Sep 20 07:56:57 PM: Compilation took 5.005e-03 seconds
(CVXPY) Sep 20 07:56:57 PM: Solver (including time spent in interface) took 5.123e-03 seconds
Iteration: 3, Objective: 0.3951
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:58 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Finished problem compilation (took 5.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 3899
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9904e-01  +2.5130e+02  2.51e+02  9.40e-01  2.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7245e-01  +5.4854e+01  5.43e+01  4.16e-01  1.58e+01  3.78e-03  5.81e-01  5.85e-01  
  2  +5.2249e-01  +6.4484e+00  5.93e+00  1.26e-01  6.17e+00  1.80e-02  2.56e-01  9.90e-01  
  3  +5.0674e-01  +1.6707e+00  1.16e+00  3.57e-02  1.87e+00  2.54e-03  9.94e-02  7.43e-01  
  4  +5.0596e-01  +1.6528e+00  1.15e+00  2.80e-02  1.49e+00  3.11e-03  7.42e-02  2.75e-01  
  5  +5.0265e-01  +1.5777e+00  1.08e+00  2.40e-02  1.26e+00  2.06e-03  7.09e-02  2.69e-01  
  6  +4.8923e-01  +1.2645e+00  7.75e-01  6.35e-03  3.46e-01  4.40e-03  1.65e-02  7.90e-01  
  7  +4.7208e-01  +1.0051e+00  5.33e-01  3.72e-03  2.00e-01  2.51e-03  1.02e-02  4.92e-01  
  8  +4.5803e-01  +8.8147e-01  4.23e-01  2.37e-03  1.27e-01  1.82e-03  6.71e-03  4.86e-01  
  9  +4.4491e-01  +7.8727e-01  3.42e-01  1.68e-03  8.98e-02  1.31e-03  4.90e-03  3.89e-01  
 10  +4.2391e-01  +6.0827e-01  1.84e-01  9.42e-04  4.98e-02  1.18e-05  2.94e-03  9.14e-01  
 11  +3.9685e-01  +4.6676e-01  6.99e-02  3.12e-04  1.64e-02  8.31e-06  1.04e-03  6.69e-01  
 12  +3.8741e-01  +4.2367e-01  3.63e-02  1.50e-04  7.90e-03  1.83e-05  5.09e-04  6.99e-01  
 13  +3.7876e-01  +3.8530e-01  6.53e-03  2.64e-05  1.39e-03  5.94e-06  9.22e-05  9.33e-01  
 14  +3.7709e-01  +3.7846e-01  1.37e-03  5.50e-06  2.90e-04  1.32e-06  1.94e-05  8.40e-01  
 15  +3.7682e-01  +3.7742e-01  5.92e-04  2.37e-06  1.25e-04  5.90e-07  8.42e-06  6.41e-01  
 16  +3.7667e-01  +3.7684e-01  1.63e-04  6.51e-07  3.42e-05  1.67e-07  2.32e-06  7.67e-01  
 17  +3.7663e-01  +3.7666e-01  2.88e-05  1.15e-07  6.03e-06  3.18e-08  4.10e-07  9.52e-01  
 18  +3.7662e-01  +3.7662e-01  4.43e-07  1.76e-09  9.25e-08  4.91e-10  6.29e-09  9.85e-01  
 19  +3.7662e-01  +3.7662e-01  4.44e-09  1.77e-11  9.28e-10  4.93e-12  6.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.2478ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:58 PM: Optimal value: 3.766e-01
(CVXPY) Sep 20 07:56:58 PM: Compilation took 5.010e-03 seconds
(CVXPY) Sep 20 07:56:58 PM: Solver (including time spent in interface) took 7.008e-03 seconds
Iteration: 4, Objective: 0.3766
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:58 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Finished problem compilation (took 5.009e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 4071
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9878e-01  +2.5166e+02  2.51e+02  9.40e-01  2.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.6806e-01  +5.4938e+01  5.44e+01  4.17e-01  1.56e+01  3.79e-03  5.81e-01  5.85e-01  
  2  +5.1936e-01  +6.6384e+00  6.12e+00  1.25e-01  6.10e+00  1.85e-02  2.54e-01  9.90e-01  
  3  +5.0536e-01  +1.6272e+00  1.12e+00  2.92e-02  1.56e+00  3.37e-03  7.59e-02  7.40e-01  
  4  +5.0388e-01  +1.7258e+00  1.22e+00  2.33e-02  1.26e+00  4.18e-03  5.78e-02  3.53e-01  
  5  +4.9176e-01  +1.7791e+00  1.29e+00  1.18e-02  6.49e-01  5.78e-03  2.86e-02  7.21e-01  
  6  +4.6241e-01  +1.1227e+00  6.60e-01  4.50e-03  2.44e-01  2.67e-03  1.18e-02  6.80e-01  
  7  +4.4718e-01  +1.0339e+00  5.87e-01  3.16e-03  1.71e-01  2.37e-03  8.47e-03  4.02e-01  
  8  +4.3058e-01  +8.8243e-01  4.52e-01  2.33e-03  1.25e-01  1.47e-03  6.50e-03  3.63e-01  
  9  +4.0259e-01  +6.5051e-01  2.48e-01  1.28e-03  6.79e-02  2.63e-04  3.91e-03  7.75e-01  
 10  +3.6875e-01  +4.5158e-01  8.28e-02  3.89e-04  2.06e-02  7.45e-05  1.30e-03  7.21e-01  
 11  +3.5801e-01  +4.0238e-01  4.44e-02  1.95e-04  1.03e-02  4.33e-05  6.77e-04  6.71e-01  
 12  +3.4928e-01  +3.6539e-01  1.61e-02  6.76e-05  3.59e-03  1.59e-05  2.46e-04  6.89e-01  
 13  +3.4482e-01  +3.4705e-01  2.23e-03  9.16e-06  4.86e-04  2.35e-06  3.47e-05  9.90e-01  
 14  +3.4405e-01  +3.4430e-01  2.48e-04  1.01e-06  5.35e-05  2.52e-07  3.90e-06  8.98e-01  
 15  +3.4395e-01  +3.4396e-01  4.59e-06  1.86e-08  9.89e-07  4.67e-09  7.26e-08  9.90e-01  
 16  +3.4395e-01  +3.4395e-01  4.59e-08  1.86e-10  9.89e-09  4.67e-11  7.26e-10  9.90e-01  
 17  +3.4395e-01  +3.4395e-01  4.59e-10  1.86e-12  9.89e-11  4.68e-13  7.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.1168ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:58 PM: Optimal value: 3.440e-01
(CVXPY) Sep 20 07:56:58 PM: Compilation took 5.009e-03 seconds
(CVXPY) Sep 20 07:56:58 PM: Solver (including time spent in interface) took 7.504e-03 seconds
Iteration: 5, Objective: 0.3440
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:58 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Finished problem compilation (took 5.048e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 4214
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5165e+02  2.51e+02  9.41e-01  2.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.6551e-01  +5.4939e+01  5.44e+01  4.19e-01  1.54e+01  3.79e-03  5.80e-01  5.85e-01  
  2  +5.1766e-01  +6.7389e+00  6.22e+00  1.25e-01  6.00e+00  1.88e-02  2.51e-01  9.90e-01  
  3  +5.0382e-01  +1.5357e+00  1.03e+00  2.47e-02  1.33e+00  3.54e-03  6.34e-02  7.76e-01  
  4  +4.9366e-01  +1.7228e+00  1.23e+00  1.30e-02  7.13e-01  6.39e-03  3.12e-02  6.97e-01  
  5  +4.7134e-01  +1.3759e+00  9.05e-01  6.13e-03  3.36e-01  6.34e-03  1.51e-02  5.60e-01  
  6  +4.4547e-01  +1.1523e+00  7.07e-01  3.66e-03  1.99e-01  5.11e-03  9.46e-03  4.53e-01  
  7  +4.0665e-01  +7.4881e-01  3.42e-01  1.97e-03  1.04e-01  4.08e-05  5.77e-03  6.93e-01  
  8  +3.6758e-01  +5.0779e-01  1.40e-01  7.14e-04  3.75e-02  3.62e-05  2.31e-03  6.71e-01  
  9  +3.4790e-01  +4.0595e-01  5.80e-02  2.81e-04  1.48e-02  1.92e-05  9.70e-04  6.24e-01  
 10  +3.3995e-01  +3.6725e-01  2.73e-02  1.28e-04  6.75e-03  1.46e-05  4.51e-04  6.74e-01  
 11  +3.3448e-01  +3.4228e-01  7.80e-03  3.56e-05  1.90e-03  5.12e-06  1.29e-04  7.87e-01  
 12  +3.3264e-01  +3.3423e-01  1.59e-03  7.19e-06  3.83e-04  1.12e-06  2.63e-05  8.27e-01  
 13  +3.3222e-01  +3.3242e-01  2.00e-04  9.02e-07  4.80e-05  1.82e-07  3.33e-06  9.65e-01  
 14  +3.3215e-01  +3.3216e-01  8.90e-06  4.00e-08  2.13e-06  8.24e-09  1.48e-07  9.65e-01  
 15  +3.3215e-01  +3.3215e-01  8.92e-08  4.00e-10  2.13e-08  8.25e-11  1.48e-09  9.90e-01  
 16  +3.3215e-01  +3.3215e-01  8.93e-10  4.01e-12  2.13e-10  8.27e-13  1.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5148ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:58 PM: Optimal value: 3.322e-01
(CVXPY) Sep 20 07:56:58 PM: Compilation took 5.048e-03 seconds
(CVXPY) Sep 20 07:56:58 PM: Solver (including time spent in interface) took 8.008e-03 seconds
Iteration: 6, Objective: 0.3322
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:58 PM: Your problem has 329 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Finished problem compilation (took 5.501e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 329
  constraints   = 579
  nnz(P)        = 0
  nnz(A)        = 4344
  cones (total) = 1
    : Nonnegative = 1,  numel = 579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +2.5187e+02  2.51e+02  9.41e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.6432e-01  +5.4943e+01  5.44e+01  4.20e-01  1.52e+01  3.80e-03  5.80e-01  5.86e-01  
  2  +5.1651e-01  +6.7931e+00  6.28e+00  1.24e-01  5.88e+00  1.89e-02  2.49e-01  9.90e-01  
  3  +5.0297e-01  +1.6976e+00  1.19e+00  2.67e-02  1.42e+00  4.37e-03  6.70e-02  7.54e-01  
  4  +4.8450e-01  +1.7078e+00  1.22e+00  9.99e-03  5.50e-01  9.37e-03  2.39e-02  7.32e-01  
  5  +4.5195e-01  +1.2738e+00  8.22e-01  4.76e-03  2.59e-01  6.79e-03  1.19e-02  5.84e-01  
  6  +4.2647e-01  +1.0166e+00  5.90e-01  3.24e-03  1.74e-01  3.43e-03  8.61e-03  4.23e-01  
  7  +3.8390e-01  +6.7492e-01  2.91e-01  1.59e-03  8.33e-02  1.58e-04  4.75e-03  8.22e-01  
  8  +3.4328e-01  +4.3119e-01  8.79e-02  4.40e-04  2.30e-02  4.73e-05  1.48e-03  7.53e-01  
  9  +3.2754e-01  +3.5890e-01  3.14e-02  1.50e-04  7.89e-03  2.02e-05  5.45e-04  7.32e-01  
 10  +3.1950e-01  +3.2315e-01  3.65e-03  1.70e-05  8.84e-04  2.33e-06  6.66e-05  9.00e-01  
 11  +3.1836e-01  +3.1852e-01  1.68e-04  7.74e-07  4.02e-05  1.05e-07  3.12e-06  9.55e-01  
 12  +3.1830e-01  +3.1830e-01  1.95e-06  8.99e-09  4.66e-07  1.24e-09  3.63e-08  9.89e-01  
 13  +3.1830e-01  +3.1830e-01  1.96e-08  9.00e-11  4.67e-09  1.24e-11  3.64e-10  9.90e-01  
 14  +3.1830e-01  +3.1830e-01  1.96e-10  9.01e-13  4.67e-11  1.24e-13  3.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8355ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:58 PM: Optimal value: 3.183e-01
(CVXPY) Sep 20 07:56:58 PM: Compilation took 5.501e-03 seconds
(CVXPY) Sep 20 07:56:58 PM: Solver (including time spent in interface) took 7.000e-03 seconds
Iteration: 7, Objective: 0.3183
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:58 PM: Your problem has 339 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 339
  constraints   = 589
  nnz(P)        = 0
  nnz(A)        = 4409
  cones (total) = 1
    : Nonnegative = 1,  numel = 589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9852e-01  +2.5202e+02  2.52e+02  9.42e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.6066e-01  +5.5104e+01  5.45e+01  4.23e-01  1.51e+01  3.80e-03  5.82e-01  5.85e-01  
  2  +5.1421e-01  +6.9280e+00  6.41e+00  1.24e-01  5.86e+00  1.93e-02  2.50e-01  9.90e-01  
  3  +5.0088e-01  +1.7108e+00  1.21e+00  2.49e-02  1.33e+00  4.89e-03  6.19e-02  7.69e-01  
  4  +4.8062e-01  +1.6195e+00  1.14e+00  9.74e-03  5.33e-01  9.35e-03  2.34e-02  6.77e-01  
  5  +4.4505e-01  +1.2401e+00  7.95e-01  4.62e-03  2.50e-01  7.42e-03  1.17e-02  5.80e-01  
  6  +4.0248e-01  +8.4631e-01  4.44e-01  2.48e-03  1.31e-01  1.42e-03  6.88e-03  6.28e-01  
  7  +3.4973e-01  +5.1071e-01  1.61e-01  8.25e-04  4.28e-02  3.16e-04  2.63e-03  6.91e-01  
  8  +3.2640e-01  +4.0216e-01  7.58e-02  3.73e-04  1.94e-02  1.29e-04  1.30e-03  6.15e-01  
  9  +3.1160e-01  +3.3366e-01  2.21e-02  1.06e-04  5.51e-03  3.36e-05  4.00e-04  7.48e-01  
 10  +3.0658e-01  +3.1018e-01  3.60e-03  1.72e-05  8.92e-04  5.17e-06  6.71e-05  8.47e-01  
 11  +3.0583e-01  +3.0675e-01  9.12e-04  4.37e-06  2.26e-04  1.15e-06  1.73e-05  8.12e-01  
 12  +3.0562e-01  +3.0582e-01  2.03e-04  9.66e-07  5.00e-05  1.75e-07  3.91e-06  9.90e-01  
 13  +3.0555e-01  +3.0556e-01  4.33e-06  2.06e-08  1.06e-06  3.66e-09  8.40e-08  9.80e-01  
 14  +3.0555e-01  +3.0555e-01  4.34e-08  2.06e-10  1.07e-08  3.67e-11  8.41e-10  9.90e-01  
 15  +3.0555e-01  +3.0555e-01  4.35e-10  2.07e-12  1.07e-10  3.69e-13  8.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7359ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:58 PM: Optimal value: 3.056e-01
(CVXPY) Sep 20 07:56:58 PM: Compilation took 5.006e-03 seconds
(CVXPY) Sep 20 07:56:58 PM: Solver (including time spent in interface) took 7.302e-03 seconds
Iteration: 8, Objective: 0.3056
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:58 PM: Your problem has 349 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Finished problem compilation (took 5.305e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 349
  constraints   = 599
  nnz(P)        = 0
  nnz(A)        = 4514
  cones (total) = 1
    : Nonnegative = 1,  numel = 599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9823e-01  +2.5185e+02  2.51e+02  9.42e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.5481e-01  +5.5222e+01  5.47e+01  4.25e-01  1.50e+01  3.81e-03  5.82e-01  5.83e-01  
  2  +5.1024e-01  +7.1496e+00  6.64e+00  1.24e-01  5.78e+00  2.00e-02  2.48e-01  9.90e-01  
  3  +4.9563e-01  +1.7818e+00  1.29e+00  2.28e-02  1.22e+00  6.12e-03  5.54e-02  7.94e-01  
  4  +4.6238e-01  +1.5542e+00  1.09e+00  8.15e-03  4.44e-01  1.09e-02  1.95e-02  6.95e-01  
  5  +4.2922e-01  +1.3119e+00  8.83e-01  4.91e-03  2.65e-01  9.59e-03  1.22e-02  4.41e-01  
  6  +3.8049e-01  +8.2117e-01  4.41e-01  2.58e-03  1.34e-01  8.95e-04  7.30e-03  6.54e-01  
  7  +3.3362e-01  +5.0298e-01  1.69e-01  9.25e-04  4.77e-02  2.52e-04  2.99e-03  6.49e-01  
  8  +3.1292e-01  +4.0314e-01  9.02e-02  4.65e-04  2.43e-02  1.24e-04  1.63e-03  5.84e-01  
  9  +3.0133e-01  +3.4869e-01  4.74e-02  2.32e-04  1.23e-02  6.09e-05  8.57e-04  6.16e-01  
 10  +2.9601e-01  +3.2499e-01  2.90e-02  1.35e-04  7.24e-03  3.39e-05  5.15e-04  6.51e-01  
 11  +2.8962e-01  +2.9713e-01  7.52e-03  3.45e-05  1.85e-03  6.99e-06  1.37e-04  9.90e-01  
 12  +2.8705e-01  +2.8733e-01  2.78e-04  1.26e-06  6.76e-05  2.30e-07  5.13e-06  9.64e-01  
 13  +2.8695e-01  +2.8695e-01  3.35e-06  1.52e-08  8.15e-07  2.75e-09  6.21e-08  9.88e-01  
 14  +2.8695e-01  +2.8695e-01  3.35e-08  1.53e-10  8.16e-09  2.75e-11  6.22e-10  9.90e-01  
 15  +2.8695e-01  +2.8695e-01  3.35e-10  1.53e-12  8.16e-11  2.75e-13  6.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.588ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:58 PM: Optimal value: 2.870e-01
(CVXPY) Sep 20 07:56:58 PM: Compilation took 5.305e-03 seconds
(CVXPY) Sep 20 07:56:58 PM: Solver (including time spent in interface) took 9.132e-03 seconds
Iteration: 9, Objective: 0.2870
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:58 PM: Your problem has 359 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:58 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:58 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 359
  constraints   = 609
  nnz(P)        = 0
  nnz(A)        = 4566
  cones (total) = 1
    : Nonnegative = 1,  numel = 609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9819e-01  +2.5196e+02  2.51e+02  9.43e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.5160e-01  +5.5234e+01  5.47e+01  4.24e-01  1.48e+01  3.82e-03  5.81e-01  5.84e-01  
  2  +5.0808e-01  +7.2533e+00  6.75e+00  1.22e-01  5.67e+00  2.03e-02  2.45e-01  9.90e-01  
  3  +4.9289e-01  +1.9749e+00  1.48e+00  2.44e-02  1.29e+00  7.11e-03  5.84e-02  7.78e-01  
  4  +4.5147e-01  +1.6253e+00  1.17e+00  8.05e-03  4.35e-01  1.20e-02  1.92e-02  7.14e-01  
  5  +4.1427e-01  +1.2884e+00  8.74e-01  4.79e-03  2.56e-01  8.63e-03  1.20e-02  4.56e-01  
  6  +3.6348e-01  +7.7093e-01  4.07e-01  2.36e-03  1.21e-01  1.18e-03  6.77e-03  6.50e-01  
  7  +3.1628e-01  +4.5394e-01  1.38e-01  7.55e-04  3.86e-02  2.56e-04  2.52e-03  7.15e-01  
  8  +3.0324e-01  +3.8828e-01  8.50e-02  4.51e-04  2.32e-02  1.43e-04  1.59e-03  5.20e-01  
  9  +2.8791e-01  +3.1004e-01  2.21e-02  1.14e-04  5.91e-03  2.87e-05  4.39e-04  8.46e-01  
 10  +2.8308e-01  +2.8705e-01  3.97e-03  2.02e-05  1.04e-03  4.58e-06  8.11e-05  8.58e-01  
 11  +2.8248e-01  +2.8431e-01  1.84e-03  9.33e-06  4.80e-04  2.03e-06  3.80e-05  5.90e-01  
 12  +2.8199e-01  +2.8212e-01  1.31e-04  6.63e-07  3.40e-05  1.09e-07  2.74e-06  9.88e-01  
 13  +2.8195e-01  +2.8195e-01  1.36e-06  6.89e-09  3.53e-07  1.13e-09  2.86e-08  9.90e-01  
 14  +2.8195e-01  +2.8195e-01  1.36e-08  6.90e-11  3.54e-09  1.13e-11  2.86e-10  9.90e-01  
 15  +2.8195e-01  +2.8195e-01  1.36e-10  6.90e-13  3.54e-11  1.13e-13  2.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.6964ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:58 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:58 PM: Optimal value: 2.820e-01
(CVXPY) Sep 20 07:56:58 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 07:56:58 PM: Solver (including time spent in interface) took 9.115e-03 seconds
Iteration: 10, Objective: 0.2820
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:59 PM: Your problem has 369 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 369
  constraints   = 619
  nnz(P)        = 0
  nnz(A)        = 4637
  cones (total) = 1
    : Nonnegative = 1,  numel = 619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9811e-01  +2.5188e+02  2.51e+02  9.43e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.4827e-01  +5.5268e+01  5.47e+01  4.25e-01  1.46e+01  3.83e-03  5.80e-01  5.84e-01  
  2  +5.0535e-01  +7.3491e+00  6.84e+00  1.21e-01  5.59e+00  2.06e-02  2.43e-01  9.90e-01  
  3  +4.8875e-01  +1.9625e+00  1.47e+00  2.26e-02  1.19e+00  7.58e-03  5.38e-02  7.95e-01  
  4  +4.4233e-01  +1.5666e+00  1.12e+00  7.66e-03  4.11e-01  1.13e-02  1.84e-02  7.17e-01  
  5  +4.0799e-01  +1.2766e+00  8.69e-01  4.89e-03  2.58e-01  8.13e-03  1.23e-02  4.23e-01  
  6  +3.5403e-01  +7.4484e-01  3.91e-01  2.25e-03  1.15e-01  1.08e-03  6.46e-03  6.78e-01  
  7  +3.1721e-01  +5.0936e-01  1.92e-01  1.06e-03  5.43e-02  4.46e-04  3.36e-03  5.46e-01  
  8  +2.9458e-01  +3.8623e-01  9.16e-02  4.85e-04  2.50e-02  1.85e-04  1.65e-03  6.13e-01  
  9  +2.8359e-01  +3.3109e-01  4.75e-02  2.40e-04  1.25e-02  7.48e-05  8.61e-04  7.25e-01  
 10  +2.7305e-01  +2.8250e-01  9.45e-03  4.60e-05  2.40e-03  1.34e-05  1.78e-04  8.24e-01  
 11  +2.7065e-01  +2.7208e-01  1.42e-03  6.87e-06  3.55e-04  1.81e-06  2.77e-05  8.63e-01  
 12  +2.7021e-01  +2.7026e-01  4.15e-05  2.00e-07  1.03e-05  3.88e-08  8.23e-07  9.87e-01  
 13  +2.7020e-01  +2.7020e-01  4.17e-07  2.01e-09  1.03e-07  3.90e-10  8.27e-09  9.90e-01  
 14  +2.7020e-01  +2.7020e-01  4.18e-09  2.01e-11  1.04e-09  3.91e-12  8.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.529ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:59 PM: Optimal value: 2.702e-01
(CVXPY) Sep 20 07:56:59 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:56:59 PM: Solver (including time spent in interface) took 9.019e-03 seconds
Iteration: 11, Objective: 0.2702
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:59 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Finished problem compilation (took 4.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 4703
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9801e-01  +2.5183e+02  2.51e+02  9.44e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.4439e-01  +5.5334e+01  5.48e+01  4.25e-01  1.44e+01  3.84e-03  5.79e-01  5.84e-01  
  2  +5.0250e-01  +7.4691e+00  6.97e+00  1.20e-01  5.50e+00  2.09e-02  2.41e-01  9.90e-01  
  3  +4.8376e-01  +2.0027e+00  1.52e+00  2.15e-02  1.13e+00  8.28e-03  5.10e-02  8.03e-01  
  4  +4.2475e-01  +1.5806e+00  1.16e+00  7.20e-03  3.82e-01  1.19e-02  1.73e-02  7.44e-01  
  5  +3.8692e-01  +1.1215e+00  7.35e-01  4.49e-03  2.33e-01  4.26e-03  1.16e-02  4.93e-01  
  6  +3.2852e-01  +5.9216e-01  2.64e-01  1.54e-03  7.80e-02  8.80e-04  4.58e-03  6.68e-01  
  7  +2.9417e-01  +4.2855e-01  1.34e-01  7.22e-04  3.71e-02  3.22e-04  2.39e-03  6.92e-01  
  8  +2.7305e-01  +3.2605e-01  5.30e-02  2.69e-04  1.38e-02  1.10e-04  9.91e-04  6.47e-01  
  9  +2.6049e-01  +2.6681e-01  6.32e-03  3.11e-05  1.58e-03  8.57e-06  1.27e-04  9.22e-01  
 10  +2.5877e-01  +2.5956e-01  7.90e-04  3.84e-06  1.95e-04  8.67e-07  1.65e-05  9.11e-01  
 11  +2.5850e-01  +2.5851e-01  1.08e-05  5.26e-08  2.66e-06  1.03e-08  2.30e-07  9.89e-01  
 12  +2.5850e-01  +2.5850e-01  1.08e-07  5.26e-10  2.65e-08  1.03e-10  2.30e-09  9.90e-01  
 13  +2.5850e-01  +2.5850e-01  1.08e-09  5.26e-12  2.66e-10  1.03e-12  2.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.576ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:59 PM: Optimal value: 2.585e-01
(CVXPY) Sep 20 07:56:59 PM: Compilation took 4.999e-03 seconds
(CVXPY) Sep 20 07:56:59 PM: Solver (including time spent in interface) took 8.176e-03 seconds
Iteration: 12, Objective: 0.2585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:59 PM: Your problem has 389 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Finished problem compilation (took 5.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 389
  constraints   = 639
  nnz(P)        = 0
  nnz(A)        = 4764
  cones (total) = 1
    : Nonnegative = 1,  numel = 639

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9781e-01  +2.5227e+02  2.52e+02  9.44e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +5.3735e-01  +5.5626e+01  5.51e+01  4.26e-01  1.43e+01  3.86e-03  5.80e-01  5.82e-01  
  2  +4.9731e-01  +7.6938e+00  7.20e+00  1.19e-01  5.42e+00  2.16e-02  2.39e-01  9.90e-01  
  3  +4.7391e-01  +1.9209e+00  1.45e+00  1.84e-02  9.65e-01  8.93e-03  4.34e-02  8.31e-01  
  4  +4.2548e-01  +1.5979e+00  1.17e+00  8.39e-03  4.40e-01  1.05e-02  2.03e-02  6.04e-01  
  5  +3.7502e-01  +1.0757e+00  7.01e-01  4.38e-03  2.24e-01  3.96e-03  1.14e-02  5.88e-01  
  6  +3.1510e-01  +5.6221e-01  2.47e-01  1.47e-03  7.32e-02  8.22e-04  4.43e-03  6.89e-01  
  7  +2.8725e-01  +4.3044e-01  1.43e-01  7.82e-04  3.97e-02  3.91e-04  2.55e-03  5.98e-01  
  8  +2.7152e-01  +3.5493e-01  8.34e-02  4.35e-04  2.23e-02  2.12e-04  1.52e-03  4.58e-01  
  9  +2.5388e-01  +2.7112e-01  1.72e-02  8.61e-05  4.43e-03  2.58e-05  3.32e-04  8.97e-01  
 10  +2.4943e-01  +2.5165e-01  2.22e-03  1.10e-05  5.62e-04  2.82e-06  4.47e-05  8.85e-01  
 11  +2.4882e-01  +2.4915e-01  3.30e-04  1.61e-06  8.19e-05  3.11e-07  6.89e-06  9.40e-01  
 12  +2.4870e-01  +2.4871e-01  4.36e-06  2.12e-08  1.08e-06  3.90e-09  9.20e-08  9.88e-01  
 13  +2.4870e-01  +2.4870e-01  4.38e-08  2.13e-10  1.08e-08  3.91e-11  9.22e-10  9.90e-01  
 14  +2.4870e-01  +2.4870e-01  4.39e-10  2.13e-12  1.09e-10  3.93e-13  9.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.5112ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:59 PM: Optimal value: 2.487e-01
(CVXPY) Sep 20 07:56:59 PM: Compilation took 5.514e-03 seconds
(CVXPY) Sep 20 07:56:59 PM: Solver (including time spent in interface) took 9.483e-03 seconds
Iteration: 13, Objective: 0.2487
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:59 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Finished problem compilation (took 5.517e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 4834
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9778e-01  +2.5225e+02  2.52e+02  9.45e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.3563e-01  +5.5574e+01  5.50e+01  4.26e-01  1.41e+01  3.86e-03  5.78e-01  5.83e-01  
  2  +4.9489e-01  +7.7728e+00  7.28e+00  1.17e-01  5.30e+00  2.18e-02  2.36e-01  9.90e-01  
  3  +4.6847e-01  +1.9511e+00  1.48e+00  1.76e-02  9.18e-01  9.57e-03  4.14e-02  8.38e-01  
  4  +4.1522e-01  +1.5550e+00  1.14e+00  7.73e-03  4.03e-01  1.05e-02  1.88e-02  6.15e-01  
  5  +3.5654e-01  +9.1035e-01  5.54e-01  3.53e-03  1.78e-01  1.60e-03  9.52e-03  6.97e-01  
  6  +3.0796e-01  +5.6729e-01  2.59e-01  1.54e-03  7.69e-02  6.17e-04  4.63e-03  5.81e-01  
  7  +2.7927e-01  +4.2549e-01  1.46e-01  7.94e-04  4.02e-02  3.03e-04  2.60e-03  5.74e-01  
  8  +2.5492e-01  +3.0984e-01  5.49e-02  2.76e-04  1.41e-02  9.88e-05  1.01e-03  6.81e-01  
  9  +2.4416e-01  +2.6116e-01  1.70e-02  8.28e-05  4.23e-03  2.45e-05  3.25e-04  7.83e-01  
 10  +2.3941e-01  +2.4061e-01  1.20e-03  5.82e-06  2.96e-04  1.35e-06  2.42e-05  9.31e-01  
 11  +2.3902e-01  +2.3907e-01  5.46e-05  2.64e-07  1.33e-05  5.21e-08  1.15e-06  9.62e-01  
 12  +2.3900e-01  +2.3900e-01  5.48e-07  2.65e-09  1.33e-07  5.23e-10  1.15e-08  9.90e-01  
 13  +2.3900e-01  +2.3900e-01  5.48e-09  2.65e-11  1.33e-09  5.23e-12  1.15e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.2281ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:59 PM: Optimal value: 2.390e-01
(CVXPY) Sep 20 07:56:59 PM: Compilation took 5.517e-03 seconds
(CVXPY) Sep 20 07:56:59 PM: Solver (including time spent in interface) took 9.195e-03 seconds
Iteration: 14, Objective: 0.2390
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:59 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Finished problem compilation (took 4.992e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 4911
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9771e-01  +2.5219e+02  2.52e+02  9.45e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.3293e-01  +5.5615e+01  5.51e+01  4.27e-01  1.40e+01  3.87e-03  5.78e-01  5.83e-01  
  2  +4.9252e-01  +7.8671e+00  7.37e+00  1.16e-01  5.21e+00  2.20e-02  2.34e-01  9.90e-01  
  3  +4.6236e-01  +1.7430e+00  1.28e+00  1.43e-02  7.45e-01  9.41e-03  3.37e-02  8.79e-01  
  4  +4.1211e-01  +1.4267e+00  1.01e+00  6.94e-03  3.60e-01  1.01e-02  1.70e-02  5.51e-01  
  5  +3.4180e-01  +7.9814e-01  4.56e-01  2.86e-03  1.43e-01  8.49e-04  7.83e-03  7.78e-01  
  6  +3.0453e-01  +5.7208e-01  2.68e-01  1.58e-03  7.87e-02  4.36e-04  4.70e-03  5.15e-01  
  7  +2.6842e-01  +3.7951e-01  1.11e-01  5.96e-04  3.00e-02  1.61e-04  1.96e-03  7.09e-01  
  8  +2.5262e-01  +3.0756e-01  5.49e-02  2.77e-04  1.41e-02  7.55e-05  9.68e-04  5.96e-01  
  9  +2.4574e-01  +2.7837e-01  3.26e-02  1.56e-04  8.01e-03  4.37e-05  5.65e-04  5.06e-01  
 10  +2.3918e-01  +2.4969e-01  1.05e-02  4.95e-05  2.53e-03  9.61e-06  1.88e-04  9.90e-01  
 11  +2.3554e-01  +2.3640e-01  8.59e-04  4.00e-06  2.03e-04  6.49e-07  1.60e-05  9.19e-01  
 12  +2.3521e-01  +2.3524e-01  2.86e-05  1.33e-07  6.72e-06  2.07e-08  5.46e-07  9.72e-01  
 13  +2.3520e-01  +2.3520e-01  2.86e-07  1.33e-09  6.71e-08  2.06e-10  5.47e-09  9.90e-01  
 14  +2.3520e-01  +2.3520e-01  2.86e-09  1.33e-11  6.72e-10  2.06e-12  5.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.8791ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:59 PM: Optimal value: 2.352e-01
(CVXPY) Sep 20 07:56:59 PM: Compilation took 4.992e-03 seconds
(CVXPY) Sep 20 07:56:59 PM: Solver (including time spent in interface) took 9.509e-03 seconds
Iteration: 15, Objective: 0.2352
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:59 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Finished problem compilation (took 6.065e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 4958
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9764e-01  +2.5227e+02  2.52e+02  9.46e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.2941e-01  +5.5704e+01  5.52e+01  4.28e-01  1.38e+01  3.88e-03  5.77e-01  5.83e-01  
  2  +4.8900e-01  +7.9679e+00  7.48e+00  1.15e-01  5.14e+00  2.24e-02  2.33e-01  9.90e-01  
  3  +4.5606e-01  +1.7700e+00  1.31e+00  1.41e-02  7.28e-01  9.71e-03  3.33e-02  8.78e-01  
  4  +4.0592e-01  +1.4782e+00  1.07e+00  7.30e-03  3.75e-01  9.92e-03  1.79e-02  5.41e-01  
  5  +3.3393e-01  +7.6983e-01  4.36e-01  2.73e-03  1.35e-01  6.01e-04  7.51e-03  8.05e-01  
  6  +2.9330e-01  +5.3470e-01  2.41e-01  1.42e-03  7.02e-02  3.00e-04  4.26e-03  5.69e-01  
  7  +2.6739e-01  +4.0060e-01  1.33e-01  7.26e-04  3.63e-02  1.60e-04  2.34e-03  5.72e-01  
  8  +2.5277e-01  +3.3078e-01  7.80e-02  3.97e-04  2.01e-02  9.27e-05  1.35e-03  5.22e-01  
  9  +2.4174e-01  +2.8029e-01  3.85e-02  1.88e-04  9.56e-03  4.34e-05  6.72e-04  6.13e-01  
 10  +2.3807e-01  +2.6411e-01  2.60e-02  1.22e-04  6.28e-03  2.80e-05  4.47e-04  5.71e-01  
 11  +2.3068e-01  +2.3433e-01  3.65e-03  1.67e-05  8.58e-04  3.40e-06  6.47e-05  8.76e-01  
 12  +2.2950e-01  +2.2976e-01  2.64e-04  1.21e-06  6.16e-05  2.12e-07  4.90e-06  9.35e-01  
 13  +2.2940e-01  +2.2940e-01  2.91e-06  1.33e-08  6.78e-07  2.30e-09  5.47e-08  9.90e-01  
 14  +2.2940e-01  +2.2940e-01  2.92e-08  1.34e-10  6.80e-09  2.30e-11  5.49e-10  9.90e-01  
 15  +2.2940e-01  +2.2940e-01  2.93e-10  1.34e-12  6.83e-11  2.32e-13  5.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.431ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:59 PM: Optimal value: 2.294e-01
(CVXPY) Sep 20 07:56:59 PM: Compilation took 6.065e-03 seconds
(CVXPY) Sep 20 07:56:59 PM: Solver (including time spent in interface) took 9.522e-03 seconds
Iteration: 16, Objective: 0.2294
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:59 PM: Your problem has 429 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:59 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:59 PM: Finished problem compilation (took 6.235e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 429
  constraints   = 679
  nnz(P)        = 0
  nnz(A)        = 5020
  cones (total) = 1
    : Nonnegative = 1,  numel = 679

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9753e-01  +2.5233e+02  2.52e+02  9.46e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.2546e-01  +5.5856e+01  5.53e+01  4.29e-01  1.37e+01  3.89e-03  5.78e-01  5.82e-01  
  2  +4.8498e-01  +8.1034e+00  7.62e+00  1.15e-01  5.05e+00  2.28e-02  2.32e-01  9.90e-01  
  3  +4.4959e-01  +2.0892e+00  1.64e+00  1.70e-02  8.68e-01  1.07e-02  4.01e-02  8.47e-01  
  4  +3.8914e-01  +1.5351e+00  1.15e+00  7.38e-03  3.74e-01  9.86e-03  1.82e-02  6.02e-01  
  5  +3.2378e-01  +7.5617e-01  4.32e-01  2.78e-03  1.36e-01  3.62e-04  7.77e-03  8.20e-01  
  6  +2.8697e-01  +5.5041e-01  2.63e-01  1.56e-03  7.65e-02  2.28e-04  4.70e-03  6.13e-01  
  7  +2.5532e-01  +3.6987e-01  1.15e-01  6.29e-04  3.10e-02  1.01e-04  2.07e-03  6.55e-01  
  8  +2.4350e-01  +3.1171e-01  6.82e-02  3.56e-04  1.78e-02  6.12e-05  1.23e-03  4.97e-01  
  9  +2.3426e-01  +2.6823e-01  3.40e-02  1.69e-04  8.58e-03  3.10e-05  6.09e-04  6.10e-01  
 10  +2.3018e-01  +2.5023e-01  2.00e-02  9.63e-05  4.94e-03  1.84e-05  3.55e-04  6.28e-01  
 11  +2.2426e-01  +2.2611e-01  1.85e-03  8.71e-06  4.47e-04  1.41e-06  3.39e-05  9.19e-01  
 12  +2.2364e-01  +2.2374e-01  9.92e-05  4.68e-07  2.38e-05  7.05e-08  1.90e-06  9.56e-01  
 13  +2.2360e-01  +2.2360e-01  1.01e-06  4.76e-09  2.42e-07  7.14e-10  1.94e-08  9.90e-01  
 14  +2.2360e-01  +2.2360e-01  1.01e-08  4.76e-11  2.42e-09  7.15e-12  1.95e-10  9.90e-01  
 15  +2.2360e-01  +2.2360e-01  1.02e-10  4.79e-13  2.44e-11  7.20e-14  1.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.665ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:59 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:59 PM: Optimal value: 2.236e-01
(CVXPY) Sep 20 07:56:59 PM: Compilation took 6.235e-03 seconds
(CVXPY) Sep 20 07:56:59 PM: Solver (including time spent in interface) took 1.152e-02 seconds
Iteration: 17, Objective: 0.2236
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:00 PM: Your problem has 439 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Finished problem compilation (took 6.343e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 439
  constraints   = 689
  nnz(P)        = 0
  nnz(A)        = 5069
  cones (total) = 1
    : Nonnegative = 1,  numel = 689

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9749e-01  +2.5233e+02  2.52e+02  9.46e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +5.2336e-01  +5.5962e+01  5.54e+01  4.30e-01  1.36e+01  3.89e-03  5.78e-01  5.81e-01  
  2  +4.8254e-01  +8.1718e+00  7.69e+00  1.15e-01  5.00e+00  2.30e-02  2.32e-01  9.90e-01  
  3  +4.4536e-01  +2.1256e+00  1.68e+00  1.71e-02  8.68e-01  1.08e-02  4.06e-02  8.45e-01  
  4  +3.8277e-01  +1.5474e+00  1.16e+00  7.41e-03  3.74e-01  9.69e-03  1.84e-02  6.08e-01  
  5  +3.1790e-01  +7.4416e-01  4.26e-01  2.75e-03  1.33e-01  1.97e-04  7.77e-03  8.45e-01  
  6  +2.8020e-01  +5.3737e-01  2.57e-01  1.51e-03  7.36e-02  1.66e-04  4.61e-03  6.42e-01  
  7  +2.4957e-01  +3.6431e-01  1.15e-01  6.24e-04  3.07e-02  8.01e-05  2.08e-03  6.37e-01  
  8  +2.3463e-01  +2.9313e-01  5.85e-02  2.99e-04  1.49e-02  4.27e-05  1.07e-03  5.54e-01  
  9  +2.2496e-01  +2.4912e-01  2.42e-02  1.19e-04  5.92e-03  1.87e-05  4.50e-04  6.98e-01  
 10  +2.1842e-01  +2.2089e-01  2.47e-03  1.20e-05  5.96e-04  1.60e-06  4.85e-05  8.97e-01  
 11  +2.1764e-01  +2.1775e-01  1.06e-04  5.19e-07  2.55e-05  6.38e-08  2.21e-06  9.73e-01  
 12  +2.1760e-01  +2.1760e-01  1.09e-06  5.30e-09  2.61e-07  6.49e-10  2.27e-08  9.90e-01  
 13  +2.1760e-01  +2.1760e-01  1.09e-08  5.31e-11  2.61e-09  6.50e-12  2.27e-10  9.90e-01  
 14  +2.1760e-01  +2.1760e-01  1.09e-10  5.32e-13  2.61e-11  6.52e-14  2.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:00 PM: Optimal value: 2.176e-01
(CVXPY) Sep 20 07:57:00 PM: Compilation took 6.343e-03 seconds
(CVXPY) Sep 20 07:57:00 PM: Solver (including time spent in interface) took 1.049e-02 seconds
Iteration: 18, Objective: 0.2176
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:00 PM: Your problem has 449 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Finished problem compilation (took 6.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 449
  constraints   = 699
  nnz(P)        = 0
  nnz(A)        = 5129
  cones (total) = 1
    : Nonnegative = 1,  numel = 699

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9749e-01  +2.5233e+02  2.52e+02  9.47e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.2248e-01  +5.5977e+01  5.55e+01  4.32e-01  1.34e+01  3.90e-03  5.78e-01  5.81e-01  
  2  +4.8076e-01  +8.2229e+00  7.74e+00  1.14e-01  4.93e+00  2.32e-02  2.31e-01  9.90e-01  
  3  +4.4166e-01  +2.2297e+00  1.79e+00  1.77e-02  8.94e-01  1.12e-02  4.22e-02  8.36e-01  
  4  +3.8066e-01  +1.5878e+00  1.21e+00  7.76e-03  3.89e-01  9.60e-03  1.93e-02  5.97e-01  
  5  +3.1774e-01  +7.4838e-01  4.31e-01  2.77e-03  1.34e-01  5.20e-04  7.75e-03  8.22e-01  
  6  +2.8447e-01  +5.6806e-01  2.84e-01  1.69e-03  8.22e-02  3.23e-04  5.01e-03  5.47e-01  
  7  +2.5448e-01  +3.9724e-01  1.43e-01  7.92e-04  3.90e-02  1.59e-04  2.54e-03  5.67e-01  
  8  +2.3722e-01  +3.1363e-01  7.64e-02  3.97e-04  1.98e-02  8.36e-05  1.36e-03  5.53e-01  
  9  +2.2238e-01  +2.4598e-01  2.36e-02  1.15e-04  5.81e-03  2.42e-05  4.25e-04  7.88e-01  
 10  +2.1575e-01  +2.1824e-01  2.50e-03  1.20e-05  6.05e-04  2.12e-06  4.72e-05  9.05e-01  
 11  +2.1495e-01  +2.1509e-01  1.43e-04  6.96e-07  3.47e-05  1.09e-07  2.82e-06  9.47e-01  
 12  +2.1490e-01  +2.1490e-01  1.54e-06  7.50e-09  3.73e-07  1.17e-09  3.05e-08  9.89e-01  
 13  +2.1490e-01  +2.1490e-01  1.54e-08  7.52e-11  3.74e-09  1.17e-11  3.06e-10  9.90e-01  
 14  +2.1490e-01  +2.1490e-01  1.54e-10  7.52e-13  3.74e-11  1.17e-13  3.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.7421ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:00 PM: Optimal value: 2.149e-01
(CVXPY) Sep 20 07:57:00 PM: Compilation took 6.005e-03 seconds
(CVXPY) Sep 20 07:57:00 PM: Solver (including time spent in interface) took 1.202e-02 seconds
Iteration: 19, Objective: 0.2149
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:00 PM: Your problem has 459 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Finished problem compilation (took 6.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 459
  constraints   = 709
  nnz(P)        = 0
  nnz(A)        = 5181
  cones (total) = 1
    : Nonnegative = 1,  numel = 709

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9748e-01  +2.5231e+02  2.52e+02  9.47e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +5.2063e-01  +5.6016e+01  5.55e+01  4.31e-01  1.33e+01  3.91e-03  5.76e-01  5.81e-01  
  2  +4.7886e-01  +8.2258e+00  7.75e+00  1.13e-01  4.85e+00  2.32e-02  2.30e-01  9.90e-01  
  3  +4.3886e-01  +2.2315e+00  1.79e+00  1.77e-02  8.85e-01  1.10e-02  4.23e-02  8.34e-01  
  4  +3.7692e-01  +1.6165e+00  1.24e+00  7.96e-03  3.95e-01  9.53e-03  1.99e-02  5.92e-01  
  5  +3.1774e-01  +7.7222e-01  4.54e-01  2.98e-03  1.43e-01  8.37e-05  8.38e-03  8.59e-01  
  6  +2.8560e-01  +5.7726e-01  2.92e-01  1.78e-03  8.55e-02  9.66e-05  5.29e-03  4.98e-01  
  7  +2.5794e-01  +4.1841e-01  1.60e-01  9.16e-04  4.44e-02  6.66e-05  2.89e-03  5.30e-01  
  8  +2.4046e-01  +3.3085e-01  9.04e-02  4.85e-04  2.39e-02  4.32e-05  1.62e-03  5.06e-01  
  9  +2.2394e-01  +2.5319e-01  2.93e-02  1.47e-04  7.31e-03  1.70e-05  5.27e-04  7.51e-01  
 10  +2.1689e-01  +2.2283e-01  5.94e-03  2.92e-05  1.46e-03  3.80e-06  1.12e-04  8.56e-01  
 11  +2.1512e-01  +2.1566e-01  5.47e-04  2.70e-06  1.33e-04  4.11e-07  1.09e-05  9.85e-01  
 12  +2.1490e-01  +2.1491e-01  7.23e-06  3.57e-08  1.76e-06  5.15e-09  1.46e-07  9.87e-01  
 13  +2.1490e-01  +2.1490e-01  7.24e-08  3.58e-10  1.76e-08  5.15e-11  1.46e-09  9.90e-01  
 14  +2.1490e-01  +2.1490e-01  7.24e-10  3.58e-12  1.76e-10  5.16e-13  1.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.2041ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:00 PM: Optimal value: 2.149e-01
(CVXPY) Sep 20 07:57:00 PM: Compilation took 6.004e-03 seconds
(CVXPY) Sep 20 07:57:00 PM: Solver (including time spent in interface) took 1.212e-02 seconds
Iteration: 20, Objective: 0.2149
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:00 PM: Your problem has 469 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Finished problem compilation (took 6.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 469
  constraints   = 719
  nnz(P)        = 0
  nnz(A)        = 5224
  cones (total) = 1
    : Nonnegative = 1,  numel = 719

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9745e-01  +2.5257e+02  2.52e+02  9.47e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +5.1767e-01  +5.6206e+01  5.57e+01  4.32e-01  1.32e+01  3.92e-03  5.77e-01  5.80e-01  
  2  +4.7644e-01  +8.2640e+00  7.79e+00  1.13e-01  4.78e+00  2.34e-02  2.30e-01  9.90e-01  
  3  +4.3617e-01  +2.3015e+00  1.87e+00  1.85e-02  9.16e-01  1.08e-02  4.46e-02  8.29e-01  
  4  +3.7234e-01  +1.6097e+00  1.24e+00  8.00e-03  3.93e-01  9.28e-03  2.02e-02  5.95e-01  
  5  +3.1994e-01  +8.0158e-01  4.82e-01  3.28e-03  1.56e-01  7.92e-05  9.28e-03  8.27e-01  
  6  +2.8955e-01  +6.0992e-01  3.20e-01  2.02e-03  9.59e-02  8.70e-05  6.00e-03  4.53e-01  
  7  +2.6001e-01  +4.3592e-01  1.76e-01  1.03e-03  4.92e-02  6.56e-05  3.25e-03  5.47e-01  
  8  +2.4355e-01  +3.5094e-01  1.07e-01  5.94e-04  2.88e-02  4.60e-05  1.97e-03  4.55e-01  
  9  +2.2739e-01  +2.7101e-01  4.36e-02  2.28e-04  1.12e-02  2.08e-05  8.05e-04  6.37e-01  
 10  +2.2007e-01  +2.3696e-01  1.69e-02  8.50e-05  4.19e-03  1.03e-05  3.16e-04  7.37e-01  
 11  +2.1622e-01  +2.2022e-01  4.00e-03  2.01e-05  9.87e-04  2.41e-06  7.82e-05  7.80e-01  
 12  +2.1543e-01  +2.1695e-01  1.51e-03  7.60e-06  3.72e-04  1.01e-06  3.04e-05  7.26e-01  
 13  +2.1498e-01  +2.1520e-01  2.18e-04  1.08e-06  5.31e-05  1.61e-07  4.43e-06  9.25e-01  
 14  +2.1490e-01  +2.1490e-01  2.57e-06  1.28e-08  6.26e-07  1.88e-09  5.24e-08  9.88e-01  
 15  +2.1490e-01  +2.1490e-01  2.57e-08  1.28e-10  6.26e-09  1.88e-11  5.24e-10  9.90e-01  
 16  +2.1490e-01  +2.1490e-01  2.57e-10  1.28e-12  6.27e-11  1.88e-13  5.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.5472ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:00 PM: Optimal value: 2.149e-01
(CVXPY) Sep 20 07:57:00 PM: Compilation took 6.001e-03 seconds
(CVXPY) Sep 20 07:57:00 PM: Solver (including time spent in interface) took 1.465e-02 seconds
Iteration: 21, Objective: 0.2149
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:00 PM: Your problem has 479 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Finished problem compilation (took 4.504e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 479
  constraints   = 729
  nnz(P)        = 0
  nnz(A)        = 5266
  cones (total) = 1
    : Nonnegative = 1,  numel = 729

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9744e-01  +2.5256e+02  2.52e+02  9.48e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.1701e-01  +5.6205e+01  5.57e+01  4.32e-01  1.31e+01  3.92e-03  5.76e-01  5.80e-01  
  2  +4.7553e-01  +8.2529e+00  7.78e+00  1.12e-01  4.71e+00  2.33e-02  2.30e-01  9.90e-01  
  3  +4.3550e-01  +2.3943e+00  1.96e+00  1.95e-02  9.53e-01  1.10e-02  4.71e-02  8.17e-01  
  4  +3.7152e-01  +1.6823e+00  1.31e+00  8.52e-03  4.16e-01  9.14e-03  2.16e-02  6.07e-01  
  5  +3.2505e-01  +8.5651e-01  5.31e-01  3.69e-03  1.74e-01  7.77e-05  1.04e-02  8.22e-01  
  6  +2.8726e-01  +6.0343e-01  3.16e-01  2.00e-03  9.39e-02  8.18e-05  5.96e-03  5.17e-01  
  7  +2.5801e-01  +4.3588e-01  1.78e-01  1.04e-03  4.93e-02  6.44e-05  3.29e-03  5.38e-01  
  8  +2.4088e-01  +3.4945e-01  1.09e-01  5.96e-04  2.88e-02  4.52e-05  1.98e-03  4.55e-01  
  9  +2.2785e-01  +2.8658e-01  5.87e-02  3.07e-04  1.51e-02  2.79e-05  1.07e-03  5.25e-01  
 10  +2.1681e-01  +2.3548e-01  1.87e-02  9.40e-05  4.63e-03  1.10e-05  3.46e-04  7.72e-01  
 11  +2.1263e-01  +2.1746e-01  4.84e-03  2.43e-05  1.19e-03  2.81e-06  9.38e-05  7.51e-01  
 12  +2.1167e-01  +2.1348e-01  1.81e-03  9.08e-06  4.44e-04  1.25e-06  3.63e-05  7.74e-01  
 13  +2.1116e-01  +2.1159e-01  4.22e-04  2.09e-06  1.02e-04  3.25e-07  8.56e-06  9.11e-01  
 14  +2.1100e-01  +2.1101e-01  6.29e-06  3.11e-08  1.52e-06  4.75e-09  1.28e-07  9.85e-01  
 15  +2.1100e-01  +2.1100e-01  6.29e-08  3.11e-10  1.52e-08  4.76e-11  1.29e-09  9.90e-01  
 16  +2.1100e-01  +2.1100e-01  6.30e-10  3.11e-12  1.52e-10  4.76e-13  1.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.8476ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:00 PM: Optimal value: 2.110e-01
(CVXPY) Sep 20 07:57:00 PM: Compilation took 4.504e-03 seconds
(CVXPY) Sep 20 07:57:00 PM: Solver (including time spent in interface) took 1.455e-02 seconds
Iteration: 22, Objective: 0.2110
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:00 PM: Your problem has 489 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:00 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:00 PM: Finished problem compilation (took 6.077e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 489
  constraints   = 739
  nnz(P)        = 0
  nnz(A)        = 5320
  cones (total) = 1
    : Nonnegative = 1,  numel = 739

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9741e-01  +2.5254e+02  2.52e+02  9.48e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.1387e-01  +5.6244e+01  5.57e+01  4.32e-01  1.29e+01  3.93e-03  5.75e-01  5.80e-01  
  2  +4.7219e-01  +8.3366e+00  7.86e+00  1.11e-01  4.64e+00  2.36e-02  2.27e-01  9.90e-01  
  3  +4.3020e-01  +2.5944e+00  2.16e+00  2.10e-02  1.02e+00  1.16e-02  5.05e-02  7.99e-01  
  4  +3.6244e-01  +1.6498e+00  1.29e+00  8.32e-03  4.03e-01  8.44e-03  2.11e-02  6.45e-01  
  5  +3.1738e-01  +8.5695e-01  5.40e-01  3.75e-03  1.76e-01  7.11e-05  1.06e-02  8.63e-01  
  6  +2.7743e-01  +5.6867e-01  2.91e-01  1.84e-03  8.62e-02  6.91e-05  5.56e-03  5.53e-01  
  7  +2.5364e-01  +4.3384e-01  1.80e-01  1.06e-03  5.03e-02  5.96e-05  3.35e-03  4.82e-01  
  8  +2.3843e-01  +3.5657e-01  1.18e-01  6.57e-04  3.16e-02  4.82e-05  2.15e-03  4.40e-01  
  9  +2.2310e-01  +2.8110e-01  5.80e-02  3.06e-04  1.49e-02  2.68e-05  1.05e-03  5.65e-01  
 10  +2.1271e-01  +2.3159e-01  1.89e-02  9.55e-05  4.72e-03  1.26e-05  3.48e-04  8.24e-01  
 11  +2.0800e-01  +2.1248e-01  4.48e-03  2.21e-05  1.10e-03  3.40e-06  8.53e-05  9.06e-01  
 12  +2.0700e-01  +2.0873e-01  1.74e-03  8.54e-06  4.24e-04  1.39e-06  3.41e-05  7.60e-01  
 13  +2.0643e-01  +2.0676e-01  3.27e-04  1.59e-06  7.89e-05  2.68e-07  6.49e-06  9.30e-01  
 14  +2.0630e-01  +2.0631e-01  4.81e-06  2.33e-08  1.16e-06  3.89e-09  9.61e-08  9.85e-01  
 15  +2.0630e-01  +2.0630e-01  4.81e-08  2.33e-10  1.16e-08  3.89e-11  9.61e-10  9.90e-01  
 16  +2.0630e-01  +2.0630e-01  4.82e-10  2.34e-12  1.16e-10  3.90e-13  9.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.9279ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:00 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:00 PM: Optimal value: 2.063e-01
(CVXPY) Sep 20 07:57:00 PM: Compilation took 6.077e-03 seconds
(CVXPY) Sep 20 07:57:00 PM: Solver (including time spent in interface) took 1.407e-02 seconds
Iteration: 23, Objective: 0.2063
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:01 PM: Your problem has 499 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:01 PM: Finished problem compilation (took 6.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 499
  constraints   = 749
  nnz(P)        = 0
  nnz(A)        = 5369
  cones (total) = 1
    : Nonnegative = 1,  numel = 749

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9738e-01  +2.5239e+02  2.52e+02  9.49e-01  2.23e+01  1.00e+00  1.02e+00   ------   
  1  +5.0949e-01  +5.6188e+01  5.57e+01  4.31e-01  1.28e+01  3.95e-03  5.72e-01  5.82e-01  
  2  +4.6630e-01  +8.4888e+00  8.02e+00  1.08e-01  4.50e+00  2.40e-02  2.22e-01  9.90e-01  
  3  +4.1428e-01  +2.4080e+00  1.99e+00  1.76e-02  8.50e-01  1.17e-02  4.26e-02  8.29e-01  
  4  +3.6354e-01  +1.8217e+00  1.46e+00  9.80e-03  4.71e-01  9.16e-03  2.48e-02  4.84e-01  
  5  +3.0226e-01  +7.4442e-01  4.42e-01  2.91e-03  1.35e-01  4.28e-04  8.19e-03  8.66e-01  
  6  +2.6881e-01  +5.7562e-01  3.07e-01  1.88e-03  8.73e-02  2.94e-04  5.58e-03  5.10e-01  
  7  +2.2952e-01  +3.3865e-01  1.09e-01  6.17e-04  2.89e-02  1.03e-04  2.03e-03  7.01e-01  
  8  +2.2013e-01  +2.9437e-01  7.42e-02  4.06e-04  1.93e-02  6.78e-05  1.38e-03  5.44e-01  
  9  +2.0976e-01  +2.4590e-01  3.61e-02  1.90e-04  9.10e-03  3.26e-05  6.77e-04  7.23e-01  
 10  +2.0452e-01  +2.2308e-01  1.86e-02  9.40e-05  4.57e-03  1.66e-05  3.51e-04  6.33e-01  
 11  +2.0002e-01  +2.0462e-01  4.59e-03  2.30e-05  1.12e-03  3.83e-06  9.06e-05  7.58e-01  
 12  +1.9906e-01  +2.0079e-01  1.73e-03  8.65e-06  4.19e-04  1.43e-06  3.53e-05  7.44e-01  
 13  +1.9853e-01  +1.9887e-01  3.35e-04  1.65e-06  8.03e-05  2.71e-07  6.95e-06  9.29e-01  
 14  +1.9840e-01  +1.9841e-01  4.84e-06  2.38e-08  1.16e-06  3.85e-09  1.01e-07  9.86e-01  
 15  +1.9840e-01  +1.9840e-01  4.84e-08  2.38e-10  1.16e-08  3.85e-11  1.01e-09  9.90e-01  
 16  +1.9840e-01  +1.9840e-01  4.84e-10  2.39e-12  1.16e-10  3.85e-13  1.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.3818ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:01 PM: Optimal value: 1.984e-01
(CVXPY) Sep 20 07:57:01 PM: Compilation took 6.511e-03 seconds
(CVXPY) Sep 20 07:57:01 PM: Solver (including time spent in interface) took 1.451e-02 seconds
Iteration: 24, Objective: 0.1984
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:57:01 PM: Your problem has 502 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:57:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:57:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:57:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:57:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:57:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:57:01 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:57:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:57:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:57:01 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:57:01 PM: Finished problem compilation (took 5.526e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 502
  constraints   = 752
  nnz(P)        = 0
  nnz(A)        = 5391
  cones (total) = 1
    : Nonnegative = 1,  numel = 752

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9736e-01  +2.5253e+02  2.52e+02  9.49e-01  2.22e+01  1.00e+00  1.02e+00   ------   
  1  +5.0689e-01  +5.6308e+01  5.58e+01  4.30e-01  1.27e+01  3.96e-03  5.72e-01  5.81e-01  
  2  +4.6397e-01  +8.5321e+00  8.07e+00  1.08e-01  4.47e+00  2.41e-02  2.21e-01  9.90e-01  
  3  +4.1114e-01  +2.4197e+00  2.01e+00  1.77e-02  8.51e-01  1.16e-02  4.29e-02  8.27e-01  
  4  +3.6124e-01  +1.8562e+00  1.49e+00  1.01e-02  4.83e-01  9.02e-03  2.56e-02  4.77e-01  
  5  +3.0054e-01  +7.4035e-01  4.40e-01  2.94e-03  1.36e-01  1.10e-04  8.31e-03  9.00e-01  
  6  +2.6633e-01  +5.6984e-01  3.04e-01  1.87e-03  8.68e-02  1.36e-04  5.61e-03  5.33e-01  
  7  +2.2588e-01  +3.2076e-01  9.49e-02  5.41e-04  2.52e-02  5.01e-05  1.80e-03  7.40e-01  
  8  +2.1923e-01  +2.9067e-01  7.14e-02  3.95e-04  1.87e-02  4.17e-05  1.34e-03  3.68e-01  
  9  +2.0781e-01  +2.3653e-01  2.87e-02  1.53e-04  7.30e-03  2.15e-05  5.53e-04  8.43e-01  
 10  +2.0433e-01  +2.2206e-01  1.77e-02  9.16e-05  4.41e-03  1.39e-05  3.43e-04  5.98e-01  
 11  +2.0028e-01  +2.0555e-01  5.27e-03  2.69e-05  1.30e-03  3.98e-06  1.06e-04  7.23e-01  
 12  +1.9905e-01  +2.0066e-01  1.61e-03  8.15e-06  3.93e-04  1.29e-06  3.35e-05  9.32e-01  
 13  +1.9870e-01  +1.9945e-01  7.54e-04  3.73e-06  1.81e-04  6.06e-07  1.56e-05  9.28e-01  
 14  +1.9841e-01  +1.9842e-01  1.47e-05  7.23e-08  3.51e-06  1.13e-08  3.07e-07  9.81e-01  
 15  +1.9840e-01  +1.9840e-01  1.47e-07  7.24e-10  3.51e-08  1.13e-10  3.08e-09  9.90e-01  
 16  +1.9840e-01  +1.9840e-01  1.47e-09  7.25e-12  3.51e-10  1.13e-12  3.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.7847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:57:01 PM: Problem status: optimal
(CVXPY) Sep 20 07:57:01 PM: Optimal value: 1.984e-01
(CVXPY) Sep 20 07:57:01 PM: Compilation took 5.526e-03 seconds
(CVXPY) Sep 20 07:57:01 PM: Solver (including time spent in interface) took 1.501e-02 seconds
FULL MODEL:
  Accruacy: 0.788
  Our objective: 0.576

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 0)                                                        <-- (term's our objective: 0.064)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.032)
 OR (x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.04)
 OR (x2 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.036)
 OR (x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.827906847000122
Best over terms:
  Our final objective: 0.06399999999999996
    Its accruacy: 0.532
    Its hamming distance: 7
  Shortest hamming distance: 1
    Its our objective: 0.01200000000000001
  Highest accruacy: 0.532
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

