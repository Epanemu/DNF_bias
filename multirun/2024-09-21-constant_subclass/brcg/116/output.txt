Command:
python test_script.py -s constant_subclass -d 3 -n 50000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.156
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 3.

Computed total variation: 0.156
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:55 PM: Your problem has 25007 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:55 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:55 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:55 PM: Finished problem compilation (took 6.938e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25007
  constraints   = 50007
  nnz(P)        = 0
  nnz(A)        = 150007
  cones (total) = 1
    : Nonnegative = 1,  numel = 50007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.76e+02  1.00e+00  1.00e+00   ------   
  1  +6.2016e-01  +4.6339e+03  4.63e+03  3.09e-01  9.19e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5598e-01  +7.9405e+02  7.93e+02  1.40e-01  4.97e+01  6.67e-03  2.21e-01  6.61e-01  
  3  +5.1052e-01  +1.4925e+02  1.49e+02  1.26e-01  4.45e+01  1.26e-05  2.20e-01  4.41e-02  
  4  +5.0007e-01  +1.7448e+00  1.24e+00  3.71e-03  1.31e+00  1.00e-06  1.63e-01  9.90e-01  
  5  +5.0001e-01  +7.3897e-01  2.39e-01  7.12e-04  2.52e-01  4.34e-07  5.68e-02  7.36e-01  
  6  +4.9997e-01  +6.9700e-01  1.97e-01  5.73e-04  2.03e-01  1.64e-06  8.39e-03  9.14e-01  
  7  +4.9654e-01  +6.9362e-01  1.97e-01  3.76e-05  1.34e-02  1.15e-04  1.12e-04  9.87e-01  
  8  +4.8263e-01  +6.0754e-01  1.25e-01  6.29e-06  2.24e-03  3.56e-04  1.88e-05  8.36e-01  
  9  +4.6343e-01  +5.0140e-01  3.80e-02  1.96e-06  6.95e-04  3.05e-06  6.69e-06  8.21e-01  
 10  +4.5448e-01  +4.5851e-01  4.04e-03  1.89e-07  6.70e-05  2.25e-07  7.06e-07  9.04e-01  
 11  +4.5301e-01  +4.5319e-01  1.74e-04  7.26e-09  2.57e-06  5.34e-09  3.05e-08  9.80e-01  
 12  +4.5296e-01  +4.5296e-01  1.74e-06  7.26e-11  2.57e-08  5.35e-11  3.05e-10  9.90e-01  
 13  +4.5296e-01  +4.5296e-01  1.74e-08  7.26e-13  2.57e-10  5.35e-13  3.05e-12  9.90e-01  
 14  +4.5296e-01  +4.5296e-01  1.75e-10  7.30e-15  2.59e-12  6.73e-15  3.81e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 236.7451ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:55 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:55 PM: Optimal value: 4.530e-01
(CVXPY) Sep 20 07:27:55 PM: Compilation took 6.938e-02 seconds
(CVXPY) Sep 20 07:27:55 PM: Solver (including time spent in interface) took 2.605e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4530
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:56 PM: Your problem has 25010 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:56 PM: Finished problem compilation (took 7.494e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25010
  constraints   = 50010
  nnz(P)        = 0
  nnz(A)        = 170974
  cones (total) = 1
    : Nonnegative = 1,  numel = 50010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5003e+04  2.50e+04  9.93e-01  1.85e+02  1.00e+00  1.00e+00   ------   
  1  +6.2013e-01  +4.6344e+03  4.63e+03  3.09e-01  9.62e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5595e-01  +7.9371e+02  7.93e+02  1.40e-01  5.21e+01  6.67e-03  2.21e-01  6.62e-01  
  3  +5.1049e-01  +1.4893e+02  1.48e+02  1.26e-01  4.66e+01  1.26e-05  2.20e-01  4.44e-02  
  4  +5.0027e-01  +4.6837e+00  4.18e+00  1.24e-02  4.51e+00  1.30e-06  1.99e-01  3.59e-01  
  5  +5.0006e-01  +1.7541e+00  1.25e+00  3.74e-03  1.37e+00  8.78e-07  1.64e-01  2.88e-01  
  6  +5.0002e-01  +9.4070e-01  4.41e-01  1.31e-03  4.85e-01  3.91e-07  8.08e-02  5.70e-01  
  7  +5.0000e-01  +7.5870e-01  2.59e-01  7.70e-04  2.85e-01  3.71e-07  3.10e-02  6.57e-01  
  8  +4.9993e-01  +7.3728e-01  2.37e-01  6.27e-04  2.32e-01  1.87e-06  4.18e-03  9.11e-01  
  9  +4.9561e-01  +7.1267e-01  2.17e-01  2.76e-05  1.03e-02  9.10e-05  7.51e-05  9.82e-01  
 10  +4.9570e-01  +7.0706e-01  2.11e-01  2.43e-05  9.06e-03  8.07e-05  6.56e-05  2.90e-01  
 11  +4.9531e-01  +6.9839e-01  2.03e-01  1.95e-05  7.29e-03  7.19e-05  5.24e-05  3.99e-01  
 12  +4.9447e-01  +6.9205e-01  1.98e-01  1.63e-05  6.10e-03  7.06e-05  4.38e-05  2.76e-01  
 13  +4.9424e-01  +6.7323e-01  1.79e-01  1.17e-05  4.37e-03  1.28e-05  3.12e-05  9.90e-01  
 14  +4.8412e-01  +6.3447e-01  1.50e-01  5.77e-06  2.15e-03  1.55e-05  1.56e-05  6.28e-01  
 15  +4.5631e-01  +5.3344e-01  7.71e-02  2.67e-06  9.94e-04  3.65e-06  7.74e-06  6.63e-01  
 16  +4.2731e-01  +4.3782e-01  1.05e-02  3.38e-07  1.25e-04  3.64e-08  1.06e-06  9.11e-01  
 17  +4.2216e-01  +4.2229e-01  1.23e-04  3.89e-09  1.44e-06  3.65e-10  1.24e-08  9.89e-01  
 18  +4.2210e-01  +4.2210e-01  1.23e-06  3.89e-11  1.44e-08  3.65e-12  1.24e-10  9.90e-01  
 19  +4.2210e-01  +4.2210e-01  1.23e-08  3.89e-13  1.44e-10  3.82e-14  1.29e-12  9.90e-01  
 20  +4.2210e-01  +4.2210e-01  1.23e-10  3.92e-15  1.44e-12  4.00e-16  1.35e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 400.8669ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:56 PM: Optimal value: 4.221e-01
(CVXPY) Sep 20 07:27:56 PM: Compilation took 7.494e-02 seconds
(CVXPY) Sep 20 07:27:56 PM: Solver (including time spent in interface) took 4.263e-01 seconds
FULL MODEL:
  Accruacy: 0.578
  Our objective: 0.15600000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.156)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.2176930904388428
Best over terms:
  Our final objective: 0.15600000000000006
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15600000000000006
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

