Command:
python test_script.py -s constant_subclass -d 9 -n 5000 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0024
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 9.

Computed total variation: 0.26439999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:03 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:03 PM: Finished problem compilation (took 1.702e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 30019
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5008e+03  2.50e+03  9.80e-01  8.18e+01  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4279e+02  5.42e+02  4.28e-01  5.31e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3180e-01  +6.1667e+01  6.11e+01  1.65e-01  2.63e+01  1.63e-02  2.77e-01  9.31e-01  
  3  +5.0854e-01  +1.5996e+01  1.55e+01  1.06e-01  1.66e+01  4.45e-05  2.57e-01  2.89e-01  
  4  +5.0076e-01  +1.4586e+00  9.58e-01  9.33e-03  1.51e+00  6.41e-06  1.32e-01  7.92e-01  
  5  +5.0008e-01  +6.2728e-01  1.27e-01  1.20e-03  1.98e-01  1.07e-05  3.82e-02  9.90e-01  
  6  +5.0004e-01  +5.7144e-01  7.14e-02  6.72e-04  1.10e-01  1.02e-05  1.31e-02  7.01e-01  
  7  +4.9968e-01  +5.7878e-01  7.91e-02  1.67e-04  2.77e-02  2.04e-04  5.55e-04  9.90e-01  
  8  +4.9811e-01  +5.7217e-01  7.41e-02  3.84e-05  6.36e-03  8.35e-04  1.20e-04  7.92e-01  
  9  +4.9419e-01  +5.4224e-01  4.81e-02  3.22e-05  5.34e-03  1.65e-04  1.06e-04  3.09e-01  
 10  +4.8914e-01  +5.1560e-01  2.65e-02  1.36e-05  2.26e-03  7.35e-05  4.69e-05  6.73e-01  
 11  +4.8816e-01  +5.1054e-01  2.24e-02  1.09e-05  1.81e-03  2.68e-05  3.89e-05  5.97e-01  
 12  +4.8240e-01  +4.8604e-01  3.64e-03  1.51e-06  2.50e-04  2.56e-06  5.96e-06  8.80e-01  
 13  +4.8113e-01  +4.8120e-01  7.27e-05  2.89e-08  4.79e-06  4.36e-08  1.18e-07  9.81e-01  
 14  +4.8110e-01  +4.8110e-01  7.28e-07  2.90e-10  4.79e-08  4.36e-10  1.19e-09  9.90e-01  
 15  +4.8110e-01  +4.8110e-01  7.29e-09  2.90e-12  4.80e-10  4.48e-12  1.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.0418ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:03 PM: Optimal value: 4.811e-01
(CVXPY) Sep 20 07:59:03 PM: Compilation took 1.702e-02 seconds
(CVXPY) Sep 20 07:59:03 PM: Solver (including time spent in interface) took 6.639e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4811
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:03 PM: Your problem has 2529 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:03 PM: Finished problem compilation (took 1.463e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2529
  constraints   = 5029
  nnz(P)        = 0
  nnz(A)        = 32814
  cones (total) = 1
    : Nonnegative = 1,  numel = 5029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5008e+03  2.50e+03  9.80e-01  8.29e+01  1.00e+00  1.00e+00   ------   
  1  +5.8079e-01  +5.4287e+02  5.42e+02  4.29e-01  5.38e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3167e-01  +6.1530e+01  6.10e+01  1.65e-01  2.65e+01  1.63e-02  2.76e-01  9.33e-01  
  3  +5.0850e-01  +1.5944e+01  1.54e+01  1.06e-01  1.68e+01  4.46e-05  2.56e-01  2.93e-01  
  4  +5.0075e-01  +1.4456e+00  9.45e-01  9.22e-03  1.52e+00  6.45e-06  1.30e-01  8.02e-01  
  5  +5.0021e-01  +7.8729e-01  2.87e-01  2.74e-03  4.55e-01  9.99e-06  6.41e-02  6.80e-01  
  6  +5.0012e-01  +6.7330e-01  1.73e-01  1.64e-03  2.72e-01  9.14e-06  2.62e-02  7.52e-01  
  7  +5.0000e-01  +6.5387e-01  1.54e-01  5.87e-04  9.84e-02  6.76e-05  2.14e-03  9.90e-01  
  8  +4.9936e-01  +6.5004e-01  1.51e-01  1.25e-04  2.10e-02  3.38e-04  4.03e-04  8.16e-01  
  9  +4.9725e-01  +6.1909e-01  1.22e-01  8.14e-05  1.37e-02  2.38e-04  2.66e-04  5.75e-01  
 10  +4.9366e-01  +5.9213e-01  9.85e-02  6.56e-05  1.10e-02  1.32e-04  2.24e-04  3.14e-01  
 11  +4.9082e-01  +5.7392e-01  8.31e-02  5.09e-05  8.55e-03  7.85e-05  1.79e-04  3.99e-01  
 12  +4.8792e-01  +5.5664e-01  6.87e-02  3.96e-05  6.64e-03  3.89e-05  1.43e-04  4.66e-01  
 13  +4.8333e-01  +5.3144e-01  4.81e-02  2.61e-05  4.37e-03  1.26e-05  9.88e-05  6.09e-01  
 14  +4.7759e-01  +5.0185e-01  2.43e-02  1.20e-05  2.01e-03  7.33e-07  4.89e-05  9.90e-01  
 15  +4.7178e-01  +4.7437e-01  2.59e-03  1.21e-06  2.03e-04  1.16e-07  5.53e-06  9.51e-01  
 16  +4.7101e-01  +4.7105e-01  3.63e-05  1.68e-08  2.81e-06  1.45e-09  8.01e-08  9.86e-01  
 17  +4.7100e-01  +4.7100e-01  3.63e-07  1.68e-10  2.81e-08  1.45e-11  8.02e-10  9.90e-01  
 18  +4.7100e-01  +4.7100e-01  3.63e-09  1.68e-12  2.81e-10  1.46e-13  8.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.7958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:04 PM: Optimal value: 4.710e-01
(CVXPY) Sep 20 07:59:04 PM: Compilation took 1.463e-02 seconds
(CVXPY) Sep 20 07:59:04 PM: Solver (including time spent in interface) took 7.279e-02 seconds
Iteration: 2, Objective: 0.4710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:04 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:04 PM: Finished problem compilation (took 1.712e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 36247
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5009e+03  2.50e+03  9.80e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.8066e-01  +5.4302e+02  5.42e+02  4.29e-01  5.47e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3149e-01  +6.1363e+01  6.08e+01  1.65e-01  2.69e+01  1.64e-02  2.76e-01  9.35e-01  
  3  +5.0844e-01  +1.5880e+01  1.54e+01  1.06e-01  1.70e+01  4.47e-05  2.56e-01  2.98e-01  
  4  +5.0073e-01  +1.4275e+00  9.27e-01  9.06e-03  1.52e+00  6.50e-06  1.26e-01  8.15e-01  
  5  +5.0038e-01  +9.9733e-01  4.97e-01  4.78e-03  8.05e-01  9.31e-06  8.54e-02  4.41e-01  
  6  +5.0019e-01  +7.5290e-01  2.53e-01  2.41e-03  4.07e-01  8.21e-06  4.09e-02  5.63e-01  
  7  +5.0010e-01  +6.6229e-01  1.62e-01  1.35e-03  2.30e-01  1.58e-05  8.10e-03  8.97e-01  
  8  +4.9979e-01  +6.6218e-01  1.62e-01  2.16e-04  3.70e-02  1.74e-04  6.66e-04  9.22e-01  
  9  +4.9920e-01  +6.4920e-01  1.50e-01  1.54e-04  2.63e-02  1.73e-04  4.72e-04  4.60e-01  
 10  +4.9754e-01  +6.3202e-01  1.34e-01  1.09e-04  1.87e-02  1.75e-04  3.36e-04  3.67e-01  
 11  +4.9541e-01  +6.1408e-01  1.19e-01  8.92e-05  1.53e-02  1.38e-04  2.78e-04  2.74e-01  
 12  +4.9373e-01  +5.9953e-01  1.06e-01  7.98e-05  1.37e-02  5.76e-05  2.52e-04  4.69e-01  
 13  +4.9274e-01  +5.9336e-01  1.01e-01  6.88e-05  1.18e-02  4.37e-05  2.18e-04  3.44e-01  
 14  +4.9210e-01  +5.8898e-01  9.69e-02  6.80e-05  1.16e-02  3.57e-05  2.16e-04  1.24e-01  
 15  +4.8850e-01  +5.6877e-01  8.03e-02  4.81e-05  8.21e-03  3.11e-05  1.55e-04  3.07e-01  
 16  +4.8767e-01  +5.6300e-01  7.53e-02  4.47e-05  7.63e-03  1.79e-05  1.43e-04  4.23e-01  
 17  +4.8191e-01  +5.3319e-01  5.13e-02  2.60e-05  4.44e-03  1.21e-05  8.42e-05  4.60e-01  
 18  +4.7924e-01  +5.2042e-01  4.12e-02  1.76e-05  3.01e-03  6.61e-06  5.73e-05  7.16e-01  
 19  +4.7868e-01  +5.1815e-01  3.95e-02  1.73e-05  2.95e-03  5.84e-06  5.63e-05  1.33e-01  
 20  +4.7435e-01  +4.9986e-01  2.55e-02  1.02e-05  1.74e-03  3.48e-06  3.41e-05  5.32e-01  
 21  +4.6934e-01  +4.7791e-01  8.57e-03  3.25e-06  5.54e-04  9.45e-07  1.14e-05  9.90e-01  
 22  +4.6706e-01  +4.6954e-01  2.47e-03  9.15e-07  1.56e-04  2.74e-07  3.34e-06  7.81e-01  
 23  +4.6620e-01  +4.6645e-01  2.50e-04  9.13e-08  1.56e-05  2.96e-08  3.40e-07  9.90e-01  
 24  +4.6610e-01  +4.6610e-01  2.55e-06  9.29e-10  1.59e-07  3.01e-10  3.47e-09  9.90e-01  
 25  +4.6610e-01  +4.6610e-01  2.55e-08  9.29e-12  1.59e-09  3.01e-12  3.47e-11  9.90e-01  
 26  +4.6610e-01  +4.6610e-01  2.55e-10  9.30e-14  1.59e-11  3.05e-14  3.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.1098ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:04 PM: Optimal value: 4.661e-01
(CVXPY) Sep 20 07:59:04 PM: Compilation took 1.712e-02 seconds
(CVXPY) Sep 20 07:59:04 PM: Solver (including time spent in interface) took 9.821e-02 seconds
Iteration: 3, Objective: 0.4661
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:04 PM: Your problem has 2549 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:04 PM: Finished problem compilation (took 1.841e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2549
  constraints   = 5049
  nnz(P)        = 0
  nnz(A)        = 38464
  cones (total) = 1
    : Nonnegative = 1,  numel = 5049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5010e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.8057e-01  +5.4305e+02  5.42e+02  4.30e-01  5.51e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3140e-01  +6.1264e+01  6.07e+01  1.65e-01  2.70e+01  1.64e-02  2.76e-01  9.36e-01  
  3  +5.0841e-01  +1.5846e+01  1.53e+01  1.06e-01  1.71e+01  4.48e-05  2.55e-01  3.01e-01  
  4  +5.0072e-01  +1.4189e+00  9.18e-01  8.98e-03  1.51e+00  6.53e-06  1.24e-01  8.22e-01  
  5  +5.0036e-01  +9.7390e-01  4.74e-01  4.56e-03  7.74e-01  9.04e-06  7.90e-02  4.59e-01  
  6  +5.0015e-01  +7.0191e-01  2.02e-01  1.91e-03  3.26e-01  8.83e-06  2.57e-02  7.21e-01  
  7  +5.0005e-01  +6.9730e-01  1.97e-01  8.19e-04  1.41e-01  5.93e-05  2.82e-03  9.29e-01  
  8  +4.9960e-01  +6.9257e-01  1.93e-01  2.22e-04  3.84e-02  2.32e-04  6.74e-04  7.71e-01  
  9  +4.9783e-01  +6.5541e-01  1.58e-01  1.26e-04  2.18e-02  1.92e-04  3.80e-04  7.04e-01  
 10  +4.9457e-01  +6.2504e-01  1.30e-01  1.03e-04  1.77e-02  1.23e-04  3.13e-04  3.06e-01  
 11  +4.9239e-01  +6.1045e-01  1.18e-01  8.25e-05  1.42e-02  1.04e-04  2.52e-04  2.93e-01  
 12  +4.9238e-01  +6.1025e-01  1.18e-01  8.15e-05  1.41e-02  9.46e-05  2.49e-04  9.62e-02  
 13  +4.9053e-01  +6.0036e-01  1.10e-01  6.73e-05  1.16e-02  8.78e-05  2.07e-04  2.30e-01  
 14  +4.8972e-01  +5.9621e-01  1.06e-01  6.07e-05  1.05e-02  6.23e-05  1.88e-04  3.46e-01  
 15  +4.8768e-01  +5.8293e-01  9.53e-02  5.44e-05  9.37e-03  2.97e-05  1.69e-04  4.55e-01  
 16  +4.7989e-01  +5.4401e-01  6.41e-02  3.19e-05  5.49e-03  3.73e-06  1.01e-04  9.21e-01  
 17  +4.7332e-01  +5.1268e-01  3.94e-02  1.77e-05  3.04e-03  2.66e-06  5.73e-05  5.81e-01  
 18  +4.6899e-01  +4.9149e-01  2.25e-02  9.13e-06  1.57e-03  2.34e-06  2.99e-05  9.32e-01  
 19  +4.6861e-01  +4.9008e-01  2.15e-02  8.41e-06  1.45e-03  2.32e-06  2.75e-05  1.77e-01  
 20  +4.6781e-01  +4.8700e-01  1.92e-02  7.83e-06  1.35e-03  1.99e-06  2.65e-05  3.76e-01  
 21  +4.6629e-01  +4.8077e-01  1.45e-02  5.62e-06  9.68e-04  1.64e-06  1.89e-05  5.92e-01  
 22  +4.6446e-01  +4.7402e-01  9.56e-03  3.50e-06  6.03e-04  1.16e-06  1.19e-05  8.81e-01  
 23  +4.6153e-01  +4.6316e-01  1.63e-03  5.76e-07  9.93e-05  1.98e-07  2.04e-06  8.67e-01  
 24  +4.6100e-01  +4.6124e-01  2.38e-04  8.38e-08  1.44e-05  3.02e-08  2.99e-07  9.90e-01  
 25  +4.6090e-01  +4.6090e-01  2.81e-06  9.88e-10  1.70e-07  3.56e-10  3.54e-09  9.88e-01  
 26  +4.6090e-01  +4.6090e-01  2.81e-08  9.88e-12  1.70e-09  3.56e-12  3.54e-11  9.90e-01  
 27  +4.6090e-01  +4.6090e-01  2.81e-10  9.88e-14  1.71e-11  3.61e-14  3.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.9469ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:04 PM: Optimal value: 4.609e-01
(CVXPY) Sep 20 07:59:04 PM: Compilation took 1.841e-02 seconds
(CVXPY) Sep 20 07:59:04 PM: Solver (including time spent in interface) took 1.036e-01 seconds
Iteration: 4, Objective: 0.4609
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:04 PM: Your problem has 2559 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:04 PM: Finished problem compilation (took 2.102e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2559
  constraints   = 5059
  nnz(P)        = 0
  nnz(A)        = 39812
  cones (total) = 1
    : Nonnegative = 1,  numel = 5059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.8044e-01  +5.4314e+02  5.43e+02  4.30e-01  5.51e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3128e-01  +6.1148e+01  6.06e+01  1.65e-01  2.69e+01  1.64e-02  2.76e-01  9.37e-01  
  3  +5.0838e-01  +1.5809e+01  1.53e+01  1.05e-01  1.70e+01  4.49e-05  2.54e-01  3.05e-01  
  4  +5.0076e-01  +1.4840e+00  9.83e-01  9.63e-03  1.62e+00  6.76e-06  1.28e-01  7.95e-01  
  5  +5.0029e-01  +9.1653e-01  4.16e-01  4.00e-03  6.79e-01  9.05e-06  7.12e-02  5.52e-01  
  6  +5.0013e-01  +7.2810e-01  2.28e-01  2.15e-03  3.67e-01  9.63e-06  2.50e-02  6.88e-01  
  7  +4.9967e-01  +6.9554e-01  1.96e-01  5.16e-04  8.92e-02  9.42e-05  1.62e-03  9.76e-01  
  8  +4.9753e-01  +6.7562e-01  1.78e-01  1.35e-04  2.34e-02  3.24e-04  3.98e-04  7.70e-01  
  9  +4.9450e-01  +6.4585e-01  1.51e-01  1.12e-04  1.94e-02  2.07e-04  3.35e-04  3.14e-01  
 10  +4.9218e-01  +6.2513e-01  1.33e-01  9.68e-05  1.68e-02  9.70e-05  2.93e-04  4.53e-01  
 11  +4.9208e-01  +6.2390e-01  1.32e-01  9.59e-05  1.66e-02  9.35e-05  2.90e-04  3.25e-02  
 12  +4.9121e-01  +6.1611e-01  1.25e-01  8.72e-05  1.51e-02  6.95e-05  2.65e-04  2.77e-01  
 13  +4.8958e-01  +6.0840e-01  1.19e-01  7.44e-05  1.29e-02  6.41e-05  2.27e-04  2.28e-01  
 14  +4.8624e-01  +5.8698e-01  1.01e-01  6.36e-05  1.10e-02  3.37e-06  1.96e-04  8.30e-01  
 15  +4.7934e-01  +5.5456e-01  7.52e-02  3.89e-05  6.72e-03  3.27e-06  1.22e-04  4.70e-01  
 16  +4.7812e-01  +5.4822e-01  7.01e-02  3.48e-05  6.01e-03  4.92e-06  1.09e-04  6.01e-01  
 17  +4.6993e-01  +5.1084e-01  4.09e-02  1.81e-05  3.12e-03  3.03e-06  5.81e-05  5.62e-01  
 18  +4.6971e-01  +5.0985e-01  4.01e-02  1.78e-05  3.06e-03  3.02e-06  5.72e-05  6.60e-02  
 19  +4.6894e-01  +5.0625e-01  3.73e-02  1.59e-05  2.74e-03  3.38e-06  5.12e-05  4.99e-01  
 20  +4.6209e-01  +4.7692e-01  1.48e-02  5.93e-06  1.02e-03  1.42e-06  1.98e-05  7.49e-01  
 21  +4.6189e-01  +4.7604e-01  1.42e-02  5.54e-06  9.55e-04  1.46e-06  1.85e-05  2.72e-01  
 22  +4.5990e-01  +4.6817e-01  8.27e-03  3.14e-06  5.41e-04  1.00e-06  1.07e-05  9.90e-01  
 23  +4.5801e-01  +4.6112e-01  3.12e-03  1.15e-06  1.99e-04  3.80e-07  4.05e-06  6.66e-01  
 24  +4.5689e-01  +4.5701e-01  1.14e-04  4.18e-08  7.22e-06  1.35e-08  1.49e-07  9.71e-01  
 25  +4.5685e-01  +4.5685e-01  1.15e-06  4.21e-10  7.28e-08  1.36e-10  1.51e-09  9.90e-01  
 26  +4.5685e-01  +4.5685e-01  1.15e-08  4.21e-12  7.28e-10  1.36e-12  1.51e-11  9.90e-01  
 27  +4.5685e-01  +4.5685e-01  1.15e-10  4.21e-14  7.28e-12  1.37e-14  1.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.8628ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:04 PM: Optimal value: 4.569e-01
(CVXPY) Sep 20 07:59:04 PM: Compilation took 2.102e-02 seconds
(CVXPY) Sep 20 07:59:04 PM: Solver (including time spent in interface) took 1.125e-01 seconds
Iteration: 5, Objective: 0.4569
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:04 PM: Your problem has 2569 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:04 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:04 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:04 PM: Finished problem compilation (took 2.103e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2569
  constraints   = 5069
  nnz(P)        = 0
  nnz(A)        = 41073
  cones (total) = 1
    : Nonnegative = 1,  numel = 5069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.8039e-01  +5.4310e+02  5.43e+02  4.30e-01  5.51e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3120e-01  +6.1061e+01  6.05e+01  1.65e-01  2.68e+01  1.64e-02  2.75e-01  9.38e-01  
  3  +5.0836e-01  +1.5775e+01  1.53e+01  1.05e-01  1.70e+01  4.49e-05  2.54e-01  3.07e-01  
  4  +5.0072e-01  +1.4226e+00  9.22e-01  9.04e-03  1.53e+00  6.63e-06  1.22e-01  8.25e-01  
  5  +5.0032e-01  +9.2469e-01  4.24e-01  4.09e-03  6.96e-01  9.44e-06  6.62e-02  5.57e-01  
  6  +5.0022e-01  +8.1950e-01  3.19e-01  3.01e-03  5.13e-01  1.20e-05  2.94e-02  6.23e-01  
  7  +5.0008e-01  +7.7730e-01  2.77e-01  1.10e-03  1.91e-01  5.30e-05  3.67e-03  9.90e-01  
  8  +4.9942e-01  +7.6685e-01  2.67e-01  2.80e-04  4.86e-02  2.14e-04  8.30e-04  7.83e-01  
  9  +4.9643e-01  +6.9664e-01  2.00e-01  1.39e-04  2.41e-02  1.84e-04  4.11e-04  7.27e-01  
 10  +4.9121e-01  +6.5031e-01  1.59e-01  1.01e-04  1.76e-02  9.66e-05  3.05e-04  4.87e-01  
 11  +4.9036e-01  +6.4550e-01  1.55e-01  9.26e-05  1.61e-02  8.15e-05  2.78e-04  2.42e-01  
 12  +4.8804e-01  +6.3098e-01  1.43e-01  8.64e-05  1.50e-02  5.80e-05  2.63e-04  2.20e-01  
 13  +4.7765e-01  +5.7439e-01  9.67e-02  4.93e-05  8.53e-03  2.07e-05  1.55e-04  7.06e-01  
 14  +4.6669e-01  +5.2394e-01  5.73e-02  2.56e-05  4.41e-03  1.12e-05  8.34e-05  5.22e-01  
 15  +4.6490e-01  +5.1595e-01  5.10e-02  2.17e-05  3.75e-03  8.66e-06  7.12e-05  3.90e-01  
 16  +4.5824e-01  +4.8776e-01  2.95e-02  1.18e-05  2.04e-03  4.46e-06  3.98e-05  5.83e-01  
 17  +4.5169e-01  +4.6134e-01  9.65e-03  3.64e-06  6.28e-04  1.35e-06  1.27e-05  7.66e-01  
 18  +4.5107e-01  +4.5895e-01  7.89e-03  2.93e-06  5.05e-04  1.10e-06  1.02e-05  2.88e-01  
 19  +4.4915e-01  +4.5166e-01  2.51e-03  9.14e-07  1.58e-04  3.38e-07  3.23e-06  7.97e-01  
 20  +4.4847e-01  +4.4912e-01  6.52e-04  2.36e-07  4.07e-05  8.16e-08  8.40e-07  9.90e-01  
 21  +4.4820e-01  +4.4821e-01  9.51e-06  3.44e-09  5.93e-07  1.17e-09  1.23e-08  9.86e-01  
 22  +4.4820e-01  +4.4820e-01  9.51e-08  3.44e-11  5.93e-09  1.17e-11  1.23e-10  9.90e-01  
 23  +4.4820e-01  +4.4820e-01  9.51e-10  3.44e-13  5.93e-11  1.18e-13  1.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 101.5133ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:05 PM: Optimal value: 4.482e-01
(CVXPY) Sep 20 07:59:05 PM: Compilation took 2.103e-02 seconds
(CVXPY) Sep 20 07:59:05 PM: Solver (including time spent in interface) took 1.075e-01 seconds
Iteration: 6, Objective: 0.4482
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:05 PM: Your problem has 2579 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:05 PM: Finished problem compilation (took 2.157e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2579
  constraints   = 5079
  nnz(P)        = 0
  nnz(A)        = 42144
  cones (total) = 1
    : Nonnegative = 1,  numel = 5079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5012e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.8022e-01  +5.4320e+02  5.43e+02  4.31e-01  5.51e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3107e-01  +6.0940e+01  6.04e+01  1.64e-01  2.68e+01  1.64e-02  2.75e-01  9.40e-01  
  3  +5.0833e-01  +1.5741e+01  1.52e+01  1.05e-01  1.70e+01  4.50e-05  2.53e-01  3.11e-01  
  4  +5.0072e-01  +1.4252e+00  9.24e-01  9.08e-03  1.53e+00  6.68e-06  1.21e-01  8.26e-01  
  5  +5.0029e-01  +9.0630e-01  4.06e-01  3.91e-03  6.66e-01  1.04e-05  5.80e-02  6.37e-01  
  6  +5.0030e-01  +9.7165e-01  4.71e-01  3.52e-03  6.04e-01  2.62e-05  1.57e-02  9.90e-01  
  7  +4.9975e-01  +9.1605e-01  4.16e-01  5.81e-04  1.01e-01  1.73e-04  1.72e-03  8.92e-01  
  8  +4.9807e-01  +7.7947e-01  2.81e-01  2.29e-04  3.98e-02  1.77e-04  6.71e-04  8.01e-01  
  9  +4.9412e-01  +7.2927e-01  2.35e-01  1.57e-04  2.73e-02  1.47e-04  4.67e-04  4.29e-01  
 10  +4.9261e-01  +7.0790e-01  2.15e-01  1.50e-04  2.61e-02  9.50e-05  4.53e-04  2.34e-01  
 11  +4.9163e-01  +6.9784e-01  2.06e-01  1.41e-04  2.45e-02  8.10e-05  4.27e-04  1.62e-01  
 12  +4.9059e-01  +6.8495e-01  1.94e-01  1.37e-04  2.38e-02  5.48e-05  4.16e-04  2.56e-01  
 13  +4.8145e-01  +6.3103e-01  1.50e-01  8.25e-05  1.43e-02  4.64e-05  2.57e-04  4.30e-01  
 14  +4.7424e-01  +5.9169e-01  1.17e-01  6.12e-05  1.06e-02  3.20e-05  1.97e-04  3.08e-01  
 15  +4.6264e-01  +5.3174e-01  6.91e-02  3.30e-05  5.70e-03  1.34e-05  1.12e-04  5.85e-01  
 16  +4.5639e-01  +5.0232e-01  4.59e-02  2.06e-05  3.56e-03  7.72e-06  7.18e-05  5.06e-01  
 17  +4.5620e-01  +5.0145e-01  4.53e-02  1.98e-05  3.42e-03  7.34e-06  6.90e-05  1.58e-01  
 18  +4.5420e-01  +4.9132e-01  3.71e-02  1.57e-05  2.71e-03  4.47e-06  5.49e-05  7.82e-01  
 19  +4.5064e-01  +4.7663e-01  2.60e-02  1.06e-05  1.83e-03  3.09e-06  3.80e-05  4.42e-01  
 20  +4.4633e-01  +4.5878e-01  1.25e-02  5.00e-06  8.63e-04  1.46e-06  1.84e-05  5.49e-01  
 21  +4.4324e-01  +4.4587e-01  2.63e-03  1.04e-06  1.80e-04  2.87e-07  3.94e-06  9.77e-01  
 22  +4.4233e-01  +4.4240e-01  7.00e-05  2.78e-08  4.79e-06  7.21e-09  1.06e-07  9.76e-01  
 23  +4.4230e-01  +4.4230e-01  7.01e-07  2.78e-10  4.79e-08  7.21e-11  1.06e-09  9.90e-01  
 24  +4.4230e-01  +4.4230e-01  7.01e-09  2.78e-12  4.79e-10  7.21e-13  1.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 109.5974ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:05 PM: Optimal value: 4.423e-01
(CVXPY) Sep 20 07:59:05 PM: Compilation took 2.157e-02 seconds
(CVXPY) Sep 20 07:59:05 PM: Solver (including time spent in interface) took 1.158e-01 seconds
Iteration: 7, Objective: 0.4423
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:05 PM: Your problem has 2589 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:05 PM: Finished problem compilation (took 2.366e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2589
  constraints   = 5089
  nnz(P)        = 0
  nnz(A)        = 42836
  cones (total) = 1
    : Nonnegative = 1,  numel = 5089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.8002e-01  +5.4325e+02  5.43e+02  4.31e-01  5.51e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3091e-01  +6.0777e+01  6.02e+01  1.64e-01  2.66e+01  1.65e-02  2.74e-01  9.42e-01  
  3  +5.0829e-01  +1.5699e+01  1.52e+01  1.05e-01  1.69e+01  4.52e-05  2.52e-01  3.15e-01  
  4  +5.0071e-01  +1.3990e+00  8.98e-01  8.83e-03  1.49e+00  6.66e-06  1.18e-01  8.41e-01  
  5  +5.0037e-01  +9.8542e-01  4.85e-01  4.69e-03  7.98e-01  1.09e-05  6.06e-02  5.95e-01  
  6  +5.0021e-01  +8.4422e-01  3.44e-01  2.45e-03  4.21e-01  2.91e-05  1.02e-02  9.67e-01  
  7  +4.9986e-01  +8.4029e-01  3.40e-01  5.35e-04  9.32e-02  1.71e-04  1.57e-03  8.49e-01  
  8  +4.9870e-01  +7.7621e-01  2.78e-01  2.55e-04  4.45e-02  1.89e-04  7.39e-04  7.70e-01  
  9  +4.9549e-01  +7.4273e-01  2.47e-01  1.62e-04  2.81e-02  2.11e-04  4.70e-04  4.58e-01  
 10  +4.9327e-01  +7.2207e-01  2.29e-01  1.52e-04  2.65e-02  1.53e-04  4.49e-04  1.97e-01  
 11  +4.9223e-01  +7.1003e-01  2.18e-01  1.48e-04  2.58e-02  1.18e-04  4.41e-04  1.63e-01  
 12  +4.8804e-01  +6.7905e-01  1.91e-01  1.30e-04  2.25e-02  4.63e-05  3.93e-04  5.32e-01  
 13  +4.8184e-01  +6.4384e-01  1.62e-01  9.82e-05  1.70e-02  2.97e-05  3.05e-04  4.62e-01  
 14  +4.6952e-01  +5.7863e-01  1.09e-01  5.74e-05  9.92e-03  4.44e-06  1.87e-04  9.90e-01  
 15  +4.6122e-01  +5.3892e-01  7.77e-02  3.74e-05  6.45e-03  3.48e-06  1.26e-04  3.90e-01  
 16  +4.5792e-01  +5.2431e-01  6.64e-02  3.05e-05  5.26e-03  3.86e-06  1.04e-04  3.92e-01  
 17  +4.5066e-01  +4.9204e-01  4.14e-02  1.78e-05  3.07e-03  2.78e-06  6.31e-05  5.42e-01  
 18  +4.4960e-01  +4.8683e-01  3.72e-02  1.58e-05  2.72e-03  2.99e-06  5.59e-05  4.17e-01  
 19  +4.4637e-01  +4.7267e-01  2.63e-02  1.07e-05  1.85e-03  2.61e-06  3.87e-05  7.79e-01  
 20  +4.4339e-01  +4.6051e-01  1.71e-02  6.90e-06  1.19e-03  1.72e-06  2.54e-05  4.57e-01  
 21  +4.4326e-01  +4.5975e-01  1.65e-02  6.62e-06  1.14e-03  1.70e-06  2.44e-05  2.90e-01  
 22  +4.3864e-01  +4.4142e-01  2.78e-03  1.09e-06  1.88e-04  2.86e-07  4.20e-06  9.24e-01  
 23  +4.3768e-01  +4.3775e-01  7.39e-05  2.89e-08  4.98e-06  7.18e-09  1.13e-07  9.77e-01  
 24  +4.3765e-01  +4.3765e-01  7.39e-07  2.89e-10  4.98e-08  7.18e-11  1.13e-09  9.90e-01  
 25  +4.3765e-01  +4.3765e-01  7.39e-09  2.89e-12  4.98e-10  7.18e-13  1.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 118.2985ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:05 PM: Optimal value: 4.377e-01
(CVXPY) Sep 20 07:59:05 PM: Compilation took 2.366e-02 seconds
(CVXPY) Sep 20 07:59:05 PM: Solver (including time spent in interface) took 1.256e-01 seconds
Iteration: 8, Objective: 0.4377
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:05 PM: Your problem has 2599 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:05 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:05 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:05 PM: Finished problem compilation (took 2.393e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2599
  constraints   = 5099
  nnz(P)        = 0
  nnz(A)        = 43537
  cones (total) = 1
    : Nonnegative = 1,  numel = 5099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.7984e-01  +5.4336e+02  5.43e+02  4.31e-01  5.50e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3079e-01  +6.0658e+01  6.01e+01  1.64e-01  2.65e+01  1.65e-02  2.74e-01  9.43e-01  
  3  +5.0826e-01  +1.5668e+01  1.52e+01  1.04e-01  1.68e+01  4.53e-05  2.51e-01  3.19e-01  
  4  +5.0073e-01  +1.4525e+00  9.52e-01  9.36e-03  1.58e+00  6.84e-06  1.20e-01  8.19e-01  
  5  +5.0035e-01  +9.9770e-01  4.97e-01  4.79e-03  8.15e-01  1.18e-05  5.88e-02  6.55e-01  
  6  +5.0017e-01  +8.6737e-01  3.67e-01  2.80e-03  4.81e-01  2.75e-05  1.26e-02  8.59e-01  
  7  +4.9913e-01  +8.5161e-01  3.52e-01  4.70e-04  8.19e-02  2.16e-04  1.36e-03  8.98e-01  
  8  +4.9543e-01  +7.8473e-01  2.89e-01  1.96e-04  3.43e-02  3.27e-04  5.66e-04  6.87e-01  
  9  +4.9207e-01  +7.5775e-01  2.66e-01  1.51e-04  2.63e-02  2.86e-04  4.39e-04  3.56e-01  
 10  +4.8539e-01  +6.9957e-01  2.14e-01  1.26e-04  2.18e-02  1.35e-04  3.77e-04  3.68e-01  
 11  +4.7431e-01  +6.2882e-01  1.55e-01  8.25e-05  1.43e-02  8.03e-05  2.58e-04  3.98e-01  
 12  +4.6884e-01  +5.9620e-01  1.27e-01  6.58e-05  1.14e-02  4.52e-05  2.11e-04  4.17e-01  
 13  +4.5770e-01  +5.3602e-01  7.83e-02  3.72e-05  6.42e-03  1.79e-05  1.25e-04  6.20e-01  
 14  +4.5120e-01  +5.0326e-01  5.21e-02  2.32e-05  4.00e-03  8.08e-06  8.00e-05  6.96e-01  
 15  +4.4899e-01  +4.9289e-01  4.39e-02  1.92e-05  3.31e-03  6.56e-06  6.69e-05  2.60e-01  
 16  +4.4409e-01  +4.6904e-01  2.49e-02  1.05e-05  1.80e-03  2.71e-06  3.73e-05  9.90e-01  
 17  +4.4045e-01  +4.5375e-01  1.33e-02  5.49e-06  9.47e-04  1.44e-06  2.01e-05  5.30e-01  
 18  +4.3810e-01  +4.4402e-01  5.92e-03  2.42e-06  4.16e-04  6.37e-07  9.02e-06  6.59e-01  
 19  +4.3660e-01  +4.3791e-01  1.31e-03  5.30e-07  9.12e-05  1.39e-07  2.01e-06  7.99e-01  
 20  +4.3625e-01  +4.3650e-01  2.57e-04  1.02e-07  1.76e-05  2.66e-08  3.99e-07  9.90e-01  
 21  +4.3615e-01  +4.3616e-01  4.35e-06  1.72e-09  2.96e-07  4.41e-10  6.76e-09  9.87e-01  
 22  +4.3615e-01  +4.3615e-01  4.35e-08  1.72e-11  2.96e-09  4.42e-12  6.77e-11  9.90e-01  
 23  +4.3615e-01  +4.3615e-01  4.36e-10  1.72e-13  2.97e-11  4.99e-14  7.61e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 111.336ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:05 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:05 PM: Optimal value: 4.362e-01
(CVXPY) Sep 20 07:59:05 PM: Compilation took 2.393e-02 seconds
(CVXPY) Sep 20 07:59:05 PM: Solver (including time spent in interface) took 1.180e-01 seconds
Iteration: 9, Objective: 0.4362
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:06 PM: Your problem has 2609 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:06 PM: Finished problem compilation (took 2.540e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2609
  constraints   = 5109
  nnz(P)        = 0
  nnz(A)        = 44332
  cones (total) = 1
    : Nonnegative = 1,  numel = 5109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.7970e-01  +5.4332e+02  5.43e+02  4.31e-01  5.50e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3071e-01  +6.0575e+01  6.00e+01  1.63e-01  2.64e+01  1.65e-02  2.73e-01  9.45e-01  
  3  +5.0825e-01  +1.5645e+01  1.51e+01  1.04e-01  1.68e+01  4.54e-05  2.50e-01  3.21e-01  
  4  +5.0072e-01  +1.4265e+00  9.26e-01  9.12e-03  1.54e+00  6.82e-06  1.18e-01  8.33e-01  
  5  +5.0042e-01  +1.0871e+00  5.87e-01  5.66e-03  9.61e-01  1.32e-05  6.05e-02  6.59e-01  
  6  +5.0017e-01  +8.5921e-01  3.59e-01  2.56e-03  4.41e-01  3.19e-05  1.06e-02  8.74e-01  
  7  +4.9932e-01  +8.5145e-01  3.52e-01  4.89e-04  8.54e-02  2.15e-04  1.41e-03  8.69e-01  
  8  +4.9618e-01  +7.9515e-01  2.99e-01  2.15e-04  3.75e-02  3.23e-04  6.14e-04  6.84e-01  
  9  +4.9250e-01  +7.6669e-01  2.74e-01  1.64e-04  2.85e-02  3.00e-04  4.73e-04  3.27e-01  
 10  +4.8811e-01  +7.2870e-01  2.41e-01  1.43e-04  2.48e-02  1.71e-04  4.21e-04  3.50e-01  
 11  +4.7849e-01  +6.5520e-01  1.77e-01  1.09e-04  1.89e-02  1.56e-06  3.40e-04  7.74e-01  
 12  +4.6722e-01  +5.9770e-01  1.30e-01  6.89e-05  1.19e-02  3.66e-06  2.23e-04  5.15e-01  
 13  +4.5386e-01  +5.3181e-01  7.79e-02  3.71e-05  6.39e-03  3.91e-06  1.26e-04  6.51e-01  
 14  +4.4440e-01  +4.8752e-01  4.31e-02  1.93e-05  3.33e-03  2.57e-06  6.85e-05  5.86e-01  
 15  +4.3660e-01  +4.5168e-01  1.51e-02  6.46e-06  1.11e-03  1.29e-06  2.38e-05  8.81e-01  
 16  +4.3446e-01  +4.4251e-01  8.05e-03  3.42e-06  5.89e-04  7.02e-07  1.28e-05  5.14e-01  
 17  +4.3270e-01  +4.3506e-01  2.36e-03  9.99e-07  1.72e-04  2.12e-07  3.81e-06  7.66e-01  
 18  +4.3207e-01  +4.3249e-01  4.25e-04  1.79e-07  3.08e-05  3.91e-08  6.90e-07  8.62e-01  
 19  +4.3193e-01  +4.3194e-01  8.56e-06  3.60e-09  6.19e-07  7.87e-10  1.39e-08  9.80e-01  
 20  +4.3193e-01  +4.3193e-01  8.57e-08  3.60e-11  6.20e-09  7.88e-12  1.39e-10  9.90e-01  
 21  +4.3193e-01  +4.3193e-01  8.57e-10  3.60e-13  6.20e-11  7.92e-14  1.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.4426ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:06 PM: Optimal value: 4.319e-01
(CVXPY) Sep 20 07:59:06 PM: Compilation took 2.540e-02 seconds
(CVXPY) Sep 20 07:59:06 PM: Solver (including time spent in interface) took 1.098e-01 seconds
Iteration: 10, Objective: 0.4319
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:06 PM: Your problem has 2619 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:06 PM: Finished problem compilation (took 2.497e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2619
  constraints   = 5119
  nnz(P)        = 0
  nnz(A)        = 45272
  cones (total) = 1
    : Nonnegative = 1,  numel = 5119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.54e+01  1.00e+00  1.00e+00   ------   
  1  +5.7962e-01  +5.4331e+02  5.43e+02  4.32e-01  5.49e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3063e-01  +6.0498e+01  6.00e+01  1.63e-01  2.63e+01  1.65e-02  2.73e-01  9.46e-01  
  3  +5.0823e-01  +1.5621e+01  1.51e+01  1.04e-01  1.67e+01  4.55e-05  2.50e-01  3.23e-01  
  4  +5.0072e-01  +1.4302e+00  9.29e-01  9.16e-03  1.55e+00  6.86e-06  1.17e-01  8.32e-01  
  5  +5.0046e-01  +1.1424e+00  6.42e-01  6.18e-03  1.05e+00  1.45e-05  6.09e-02  6.90e-01  
  6  +5.0013e-01  +8.3974e-01  3.40e-01  2.34e-03  4.03e-01  3.46e-05  9.41e-03  8.78e-01  
  7  +4.9907e-01  +8.3242e-01  3.33e-01  4.24e-04  7.40e-02  2.44e-04  1.22e-03  8.73e-01  
  8  +4.9508e-01  +7.8361e-01  2.89e-01  1.80e-04  3.14e-02  4.01e-04  5.11e-04  6.79e-01  
  9  +4.9065e-01  +7.5399e-01  2.63e-01  1.44e-04  2.50e-02  3.09e-04  4.13e-04  3.76e-01  
 10  +4.7748e-01  +6.5954e-01  1.82e-01  1.09e-04  1.88e-02  6.42e-05  3.34e-04  4.92e-01  
 11  +4.7057e-01  +6.2374e-01  1.53e-01  8.49e-05  1.47e-02  4.70e-05  2.68e-04  3.04e-01  
 12  +4.5048e-01  +5.2226e-01  7.18e-02  3.39e-05  5.84e-03  1.37e-05  1.16e-04  7.13e-01  
 13  +4.3939e-01  +4.7106e-01  3.17e-02  1.40e-05  2.41e-03  4.10e-06  5.01e-05  8.11e-01  
 14  +4.3562e-01  +4.5350e-01  1.79e-02  7.67e-06  1.32e-03  1.90e-06  2.78e-05  9.90e-01  
 15  +4.3106e-01  +4.3446e-01  3.39e-03  1.44e-06  2.49e-04  3.56e-07  5.41e-06  8.30e-01  
 16  +4.3003e-01  +4.3026e-01  2.32e-04  9.82e-08  1.69e-05  2.38e-08  3.73e-07  9.45e-01  
 17  +4.2995e-01  +4.2995e-01  2.36e-06  9.99e-10  1.72e-07  2.42e-10  3.80e-09  9.90e-01  
 18  +4.2995e-01  +4.2995e-01  2.36e-08  9.99e-12  1.72e-09  2.42e-12  3.80e-11  9.90e-01  
 19  +4.2995e-01  +4.2995e-01  2.36e-10  1.00e-13  1.72e-11  2.42e-14  3.80e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.9491ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:06 PM: Optimal value: 4.300e-01
(CVXPY) Sep 20 07:59:06 PM: Compilation took 2.497e-02 seconds
(CVXPY) Sep 20 07:59:06 PM: Solver (including time spent in interface) took 1.044e-01 seconds
Iteration: 11, Objective: 0.4300
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:06 PM: Your problem has 2629 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:06 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:06 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:06 PM: Finished problem compilation (took 2.380e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2629
  constraints   = 5129
  nnz(P)        = 0
  nnz(A)        = 45647
  cones (total) = 1
    : Nonnegative = 1,  numel = 5129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.7947e-01  +5.4331e+02  5.43e+02  4.32e-01  5.48e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3053e-01  +6.0404e+01  5.99e+01  1.63e-01  2.62e+01  1.65e-02  2.72e-01  9.47e-01  
  3  +5.0821e-01  +1.5598e+01  1.51e+01  1.04e-01  1.67e+01  4.56e-05  2.49e-01  3.26e-01  
  4  +5.0070e-01  +1.3936e+00  8.93e-01  8.82e-03  1.49e+00  6.80e-06  1.13e-01  8.51e-01  
  5  +5.0053e-01  +1.2067e+00  7.06e-01  6.80e-03  1.15e+00  1.55e-05  5.95e-02  6.84e-01  
  6  +5.0019e-01  +8.6771e-01  3.68e-01  2.31e-03  3.99e-01  4.00e-05  8.53e-03  8.91e-01  
  7  +4.9959e-01  +8.6398e-01  3.64e-01  5.26e-04  9.18e-02  2.11e-04  1.50e-03  8.26e-01  
  8  +4.9703e-01  +8.1956e-01  3.23e-01  1.99e-04  3.49e-02  3.98e-04  5.59e-04  7.66e-01  
  9  +4.9338e-01  +7.8988e-01  2.96e-01  1.74e-04  3.03e-02  3.36e-04  4.94e-04  2.03e-01  
 10  +4.8005e-01  +6.8752e-01  2.07e-01  1.23e-04  2.13e-02  8.49e-05  3.71e-04  5.57e-01  
 11  +4.7143e-01  +6.4001e-01  1.69e-01  9.26e-05  1.60e-02  6.38e-05  2.89e-04  2.66e-01  
 12  +4.5964e-01  +5.7870e-01  1.19e-01  6.16e-05  1.06e-02  1.28e-05  2.03e-04  7.75e-01  
 13  +4.4834e-01  +5.2243e-01  7.41e-02  3.52e-05  6.07e-03  7.02e-06  1.21e-04  6.49e-01  
 14  +4.4475e-01  +5.0559e-01  6.08e-02  2.81e-05  4.84e-03  5.79e-06  9.76e-05  2.72e-01  
 15  +4.4267e-01  +4.9598e-01  5.33e-02  2.41e-05  4.16e-03  5.10e-06  8.46e-05  2.23e-01  
 16  +4.3658e-01  +4.6617e-01  2.96e-02  1.29e-05  2.22e-03  3.02e-06  4.61e-05  9.90e-01  
 17  +4.3074e-01  +4.4081e-01  1.01e-02  4.33e-06  7.46e-04  1.02e-06  1.60e-05  7.43e-01  
 18  +4.2854e-01  +4.3158e-01  3.04e-03  1.29e-06  2.22e-04  3.10e-07  4.86e-06  7.84e-01  
 19  +4.2767e-01  +4.2804e-01  3.63e-04  1.53e-07  2.64e-05  3.66e-08  5.82e-07  9.90e-01  
 20  +4.2755e-01  +4.2756e-01  4.18e-06  1.76e-09  3.04e-07  4.21e-10  6.71e-09  9.88e-01  
 21  +4.2755e-01  +4.2755e-01  4.18e-08  1.76e-11  3.04e-09  4.21e-12  6.72e-11  9.90e-01  
 22  +4.2755e-01  +4.2755e-01  4.19e-10  1.77e-13  3.05e-11  4.24e-14  6.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.0839ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:06 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:06 PM: Optimal value: 4.276e-01
(CVXPY) Sep 20 07:59:06 PM: Compilation took 2.380e-02 seconds
(CVXPY) Sep 20 07:59:06 PM: Solver (including time spent in interface) took 1.146e-01 seconds
Iteration: 12, Objective: 0.4276
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:06 PM: Your problem has 2639 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:07 PM: Finished problem compilation (took 2.412e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2639
  constraints   = 5139
  nnz(P)        = 0
  nnz(A)        = 46257
  cones (total) = 1
    : Nonnegative = 1,  numel = 5139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.80e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.7928e-01  +5.4343e+02  5.43e+02  4.32e-01  5.48e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3038e-01  +6.0271e+01  5.97e+01  1.63e-01  2.61e+01  1.66e-02  2.72e-01  9.49e-01  
  3  +5.0818e-01  +1.5560e+01  1.51e+01  1.04e-01  1.66e+01  4.58e-05  2.48e-01  3.31e-01  
  4  +5.0070e-01  +1.3941e+00  8.93e-01  8.83e-03  1.49e+00  6.84e-06  1.12e-01  8.53e-01  
  5  +5.0058e-01  +1.2779e+00  7.77e-01  7.46e-03  1.26e+00  1.66e-05  5.85e-02  6.89e-01  
  6  +5.0029e-01  +1.0003e+00  5.00e-01  3.28e-03  5.65e-01  3.80e-05  1.22e-02  8.18e-01  
  7  +4.9974e-01  +9.8889e-01  4.89e-01  7.76e-04  1.35e-01  1.84e-04  2.22e-03  8.22e-01  
  8  +4.9741e-01  +8.7134e-01  3.74e-01  2.81e-04  4.91e-02  2.73e-04  7.88e-04  8.16e-01  
  9  +4.9390e-01  +8.2885e-01  3.35e-01  2.29e-04  3.99e-02  2.22e-04  6.51e-04  2.95e-01  
 10  +4.9058e-01  +7.9513e-01  3.05e-01  1.97e-04  3.43e-02  1.59e-04  5.68e-04  3.19e-01  
 11  +4.7972e-01  +6.9703e-01  2.17e-01  1.42e-04  2.46e-02  1.03e-05  4.33e-04  7.74e-01  
 12  +4.6829e-01  +6.3282e-01  1.65e-01  9.29e-05  1.61e-02  8.23e-06  2.95e-04  3.62e-01  
 13  +4.6136e-01  +5.9754e-01  1.36e-01  7.24e-05  1.25e-02  9.09e-06  2.36e-04  6.57e-01  
 14  +4.4401e-01  +5.0944e-01  6.54e-02  3.07e-05  5.28e-03  5.12e-06  1.07e-04  9.68e-01  
 15  +4.3934e-01  +4.8667e-01  4.73e-02  2.15e-05  3.71e-03  4.14e-06  7.62e-05  6.22e-01  
 16  +4.3374e-01  +4.6083e-01  2.71e-02  1.21e-05  2.08e-03  2.38e-06  4.39e-05  4.64e-01  
 17  +4.2934e-01  +4.4049e-01  1.11e-02  4.85e-06  8.35e-04  1.06e-06  1.81e-05  8.16e-01  
 18  +4.2712e-01  +4.3095e-01  3.83e-03  1.65e-06  2.83e-04  3.70e-07  6.23e-06  6.99e-01  
 19  +4.2615e-01  +4.2691e-01  7.63e-04  3.25e-07  5.60e-05  7.43e-08  1.25e-06  8.94e-01  
 20  +4.2591e-01  +4.2594e-01  2.96e-05  1.26e-08  2.16e-06  2.87e-09  4.84e-08  9.63e-01  
 21  +4.2590e-01  +4.2590e-01  2.96e-07  1.26e-10  2.16e-08  2.87e-11  4.84e-10  9.90e-01  
 22  +4.2590e-01  +4.2590e-01  2.96e-09  1.26e-12  2.17e-10  2.89e-13  4.88e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 101.7107ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:07 PM: Optimal value: 4.259e-01
(CVXPY) Sep 20 07:59:07 PM: Compilation took 2.412e-02 seconds
(CVXPY) Sep 20 07:59:07 PM: Solver (including time spent in interface) took 1.074e-01 seconds
Iteration: 13, Objective: 0.4259
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:07 PM: Your problem has 2647 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:07 PM: Finished problem compilation (took 2.319e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2647
  constraints   = 5147
  nnz(P)        = 0
  nnz(A)        = 46593
  cones (total) = 1
    : Nonnegative = 1,  numel = 5147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.7924e-01  +5.4338e+02  5.43e+02  4.33e-01  5.47e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3038e-01  +6.0263e+01  5.97e+01  1.63e-01  2.60e+01  1.66e-02  2.72e-01  9.49e-01  
  3  +5.0817e-01  +1.5552e+01  1.50e+01  1.04e-01  1.66e+01  4.58e-05  2.48e-01  3.32e-01  
  4  +5.0070e-01  +1.4018e+00  9.01e-01  8.92e-03  1.50e+00  6.88e-06  1.12e-01  8.50e-01  
  5  +5.0056e-01  +1.2749e+00  7.74e-01  7.37e-03  1.24e+00  1.83e-05  5.40e-02  7.47e-01  
  6  +5.0019e-01  +9.5530e-01  4.55e-01  2.29e-03  3.96e-01  5.27e-05  7.59e-03  9.06e-01  
  7  +4.9930e-01  +9.4225e-01  4.43e-01  5.53e-04  9.65e-02  2.32e-04  1.57e-03  7.99e-01  
  8  +4.9553e-01  +8.6109e-01  3.66e-01  2.25e-04  3.94e-02  3.57e-04  6.34e-04  7.24e-01  
  9  +4.9021e-01  +8.0915e-01  3.19e-01  1.93e-04  3.37e-02  2.41e-04  5.56e-04  2.69e-01  
 10  +4.8210e-01  +7.3591e-01  2.54e-01  1.59e-04  2.77e-02  1.05e-04  4.78e-04  3.89e-01  
 11  +4.7266e-01  +6.7443e-01  2.02e-01  1.16e-04  2.01e-02  7.23e-05  3.61e-04  3.31e-01  
 12  +4.6534e-01  +6.3198e-01  1.67e-01  9.05e-05  1.56e-02  5.50e-05  2.89e-04  2.53e-01  
 13  +4.5728e-01  +5.8582e-01  1.29e-01  6.60e-05  1.14e-02  2.39e-05  2.18e-04  5.96e-01  
 14  +4.4228e-01  +5.0606e-01  6.38e-02  2.99e-05  5.15e-03  5.91e-06  1.05e-04  8.74e-01  
 15  +4.3889e-01  +4.8910e-01  5.02e-02  2.30e-05  3.96e-03  4.75e-06  8.19e-05  4.44e-01  
 16  +4.3206e-01  +4.5673e-01  2.47e-02  1.10e-05  1.90e-03  2.32e-06  4.06e-05  5.98e-01  
 17  +4.2993e-01  +4.4640e-01  1.65e-02  7.29e-06  1.25e-03  1.59e-06  2.71e-05  5.66e-01  
 18  +4.2667e-01  +4.3163e-01  4.97e-03  2.17e-06  3.74e-04  4.89e-07  8.26e-06  8.43e-01  
 19  +4.2545e-01  +4.2653e-01  1.08e-03  4.65e-07  8.00e-05  1.07e-07  1.79e-06  9.05e-01  
 20  +4.2511e-01  +4.2515e-01  3.41e-05  1.47e-08  2.52e-06  3.34e-09  5.67e-08  9.78e-01  
 21  +4.2510e-01  +4.2510e-01  3.42e-07  1.47e-10  2.53e-08  3.34e-11  5.68e-10  9.90e-01  
 22  +4.2510e-01  +4.2510e-01  3.42e-09  1.47e-12  2.53e-10  3.35e-13  5.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 103.371ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:07 PM: Optimal value: 4.251e-01
(CVXPY) Sep 20 07:59:07 PM: Compilation took 2.319e-02 seconds
(CVXPY) Sep 20 07:59:07 PM: Solver (including time spent in interface) took 1.100e-01 seconds
Iteration: 14, Objective: 0.4251
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:07 PM: Your problem has 2657 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:07 PM: Finished problem compilation (took 2.468e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2657
  constraints   = 5157
  nnz(P)        = 0
  nnz(A)        = 47115
  cones (total) = 1
    : Nonnegative = 1,  numel = 5157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.80e-01  8.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.7910e-01  +5.4335e+02  5.43e+02  4.33e-01  5.46e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3028e-01  +6.0158e+01  5.96e+01  1.62e-01  2.59e+01  1.66e-02  2.71e-01  9.50e-01  
  3  +5.0815e-01  +1.5523e+01  1.50e+01  1.03e-01  1.65e+01  4.59e-05  2.47e-01  3.34e-01  
  4  +5.0068e-01  +1.3720e+00  8.71e-01  8.63e-03  1.45e+00  6.83e-06  1.09e-01  8.65e-01  
  5  +5.0062e-01  +1.3310e+00  8.30e-01  7.82e-03  1.32e+00  1.97e-05  5.07e-02  7.50e-01  
  6  +5.0018e-01  +9.3218e-01  4.32e-01  1.61e-03  2.80e-01  7.35e-05  4.94e-03  9.36e-01  
  7  +4.9951e-01  +9.1323e-01  4.14e-01  5.15e-04  9.00e-02  2.18e-04  1.45e-03  7.50e-01  
  8  +4.9638e-01  +8.5081e-01  3.54e-01  2.36e-04  4.12e-02  2.97e-04  6.59e-04  7.28e-01  
  9  +4.9149e-01  +8.0900e-01  3.18e-01  1.95e-04  3.40e-02  2.25e-04  5.56e-04  3.03e-01  
 10  +4.8856e-01  +7.8725e-01  2.99e-01  1.80e-04  3.14e-02  1.88e-04  5.20e-04  1.51e-01  
 11  +4.7877e-01  +7.1217e-01  2.33e-01  1.48e-04  2.56e-02  4.92e-05  4.48e-04  5.36e-01  
 12  +4.6366e-01  +6.2293e-01  1.59e-01  8.63e-05  1.49e-02  2.33e-05  2.76e-04  6.08e-01  
 13  +4.5821e-01  +5.9489e-01  1.37e-01  7.16e-05  1.23e-02  1.47e-05  2.35e-04  5.49e-01  
 14  +4.4389e-01  +5.2212e-01  7.82e-02  3.70e-05  6.36e-03  6.87e-06  1.28e-04  7.86e-01  
 15  +4.3470e-01  +4.7694e-01  4.22e-02  1.90e-05  3.27e-03  3.82e-06  6.82e-05  7.14e-01  
 16  +4.3017e-01  +4.5578e-01  2.56e-02  1.13e-05  1.94e-03  2.37e-06  4.14e-05  5.30e-01  
 17  +4.2494e-01  +4.3218e-01  7.25e-03  3.14e-06  5.40e-04  6.77e-07  1.19e-05  7.91e-01  
 18  +4.2334e-01  +4.2508e-01  1.73e-03  7.50e-07  1.29e-04  1.70e-07  2.88e-06  9.67e-01  
 19  +4.2281e-01  +4.2290e-01  9.36e-05  4.05e-08  6.96e-06  9.11e-09  1.56e-07  9.53e-01  
 20  +4.2278e-01  +4.2278e-01  9.49e-07  4.11e-10  7.06e-08  9.23e-11  1.58e-09  9.90e-01  
 21  +4.2278e-01  +4.2278e-01  9.51e-09  4.11e-12  7.07e-10  9.24e-13  1.59e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.0501ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:07 PM: Optimal value: 4.228e-01
(CVXPY) Sep 20 07:59:07 PM: Compilation took 2.468e-02 seconds
(CVXPY) Sep 20 07:59:07 PM: Solver (including time spent in interface) took 1.048e-01 seconds
Iteration: 15, Objective: 0.4228
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:07 PM: Your problem has 2667 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:07 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:07 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:07 PM: Finished problem compilation (took 2.590e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2667
  constraints   = 5167
  nnz(P)        = 0
  nnz(A)        = 47791
  cones (total) = 1
    : Nonnegative = 1,  numel = 5167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.80e-01  8.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.7900e-01  +5.4333e+02  5.43e+02  4.33e-01  5.46e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3021e-01  +6.0091e+01  5.96e+01  1.62e-01  2.58e+01  1.66e-02  2.70e-01  9.51e-01  
  3  +5.0813e-01  +1.5499e+01  1.50e+01  1.03e-01  1.65e+01  4.60e-05  2.46e-01  3.37e-01  
  4  +5.0068e-01  +1.3703e+00  8.70e-01  8.62e-03  1.45e+00  6.86e-06  1.08e-01  8.68e-01  
  5  +5.0065e-01  +1.3652e+00  8.65e-01  8.14e-03  1.38e+00  1.94e-05  5.15e-02  7.32e-01  
  6  +5.0032e-01  +1.0639e+00  5.64e-01  2.64e-03  4.57e-01  5.70e-05  8.38e-03  8.61e-01  
  7  +4.9984e-01  +1.0444e+00  5.45e-01  8.43e-04  1.47e-01  1.78e-04  2.38e-03  7.30e-01  
  8  +4.9747e-01  +8.7801e-01  3.81e-01  2.81e-04  4.92e-02  2.28e-04  7.81e-04  9.01e-01  
  9  +4.9299e-01  +8.3341e-01  3.40e-01  2.24e-04  3.91e-02  1.93e-04  6.32e-04  2.99e-01  
 10  +4.8890e-01  +8.0064e-01  3.12e-01  1.96e-04  3.42e-02  1.53e-04  5.63e-04  2.25e-01  
 11  +4.7473e-01  +6.9753e-01  2.23e-01  1.29e-04  2.23e-02  5.98e-05  3.91e-04  5.62e-01  
 12  +4.6678e-01  +6.5277e-01  1.86e-01  1.03e-04  1.77e-02  3.19e-05  3.22e-04  4.81e-01  
 13  +4.5867e-01  +6.0914e-01  1.50e-01  7.89e-05  1.36e-02  1.66e-05  2.56e-04  6.05e-01  
 14  +4.4344e-01  +5.3069e-01  8.73e-02  4.19e-05  7.20e-03  8.16e-06  1.45e-04  6.08e-01  
 15  +4.3329e-01  +4.8087e-01  4.76e-02  2.19e-05  3.76e-03  4.28e-06  7.91e-05  5.16e-01  
 16  +4.2595e-01  +4.4485e-01  1.89e-02  8.37e-06  1.44e-03  1.80e-06  3.14e-05  9.09e-01  
 17  +4.2372e-01  +4.3425e-01  1.05e-02  4.63e-06  7.96e-04  1.04e-06  1.76e-05  8.79e-01  
 18  +4.2227e-01  +4.2804e-01  5.77e-03  2.53e-06  4.35e-04  5.70e-07  9.74e-06  6.80e-01  
 19  +4.2082e-01  +4.2193e-01  1.12e-03  4.90e-07  8.42e-05  1.09e-07  1.91e-06  8.81e-01  
 20  +4.2048e-01  +4.2058e-01  9.67e-05  4.24e-08  7.29e-06  9.11e-09  1.67e-07  9.42e-01  
 21  +4.2045e-01  +4.2045e-01  1.69e-06  7.42e-10  1.27e-07  1.59e-10  2.93e-09  9.84e-01  
 22  +4.2045e-01  +4.2045e-01  1.70e-08  7.45e-12  1.28e-09  1.60e-12  2.94e-11  9.90e-01  
 23  +4.2045e-01  +4.2045e-01  1.71e-10  7.50e-14  1.29e-11  1.62e-14  2.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.3494ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:07 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:07 PM: Optimal value: 4.205e-01
(CVXPY) Sep 20 07:59:07 PM: Compilation took 2.590e-02 seconds
(CVXPY) Sep 20 07:59:07 PM: Solver (including time spent in interface) took 1.137e-01 seconds
Iteration: 16, Objective: 0.4205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:08 PM: Your problem has 2677 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:08 PM: Finished problem compilation (took 2.391e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2677
  constraints   = 5177
  nnz(P)        = 0
  nnz(A)        = 48396
  cones (total) = 1
    : Nonnegative = 1,  numel = 5177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.7885e-01  +5.4333e+02  5.43e+02  4.33e-01  5.45e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3013e-01  +6.0001e+01  5.95e+01  1.62e-01  2.57e+01  1.66e-02  2.70e-01  9.52e-01  
  3  +5.0811e-01  +1.5475e+01  1.50e+01  1.03e-01  1.64e+01  4.60e-05  2.45e-01  3.39e-01  
  4  +5.0067e-01  +1.3566e+00  8.56e-01  8.50e-03  1.43e+00  6.85e-06  1.06e-01  8.75e-01  
  5  +5.0064e-01  +1.3380e+00  8.37e-01  8.00e-03  1.35e+00  1.68e-05  5.36e-02  6.53e-01  
  6  +5.0031e-01  +1.0333e+00  5.33e-01  2.18e-03  3.79e-01  6.22e-05  6.71e-03  9.03e-01  
  7  +4.9994e-01  +1.0062e+00  5.06e-01  8.31e-04  1.45e-01  1.52e-04  2.34e-03  6.94e-01  
  8  +4.9795e-01  +8.6546e-01  3.68e-01  3.01e-04  5.26e-02  1.67e-04  8.34e-04  9.58e-01  
  9  +4.9390e-01  +8.2786e-01  3.34e-01  2.36e-04  4.12e-02  1.51e-04  6.62e-04  3.13e-01  
 10  +4.9072e-01  +8.0589e-01  3.15e-01  2.05e-04  3.58e-02  1.29e-04  5.83e-04  2.53e-01  
 11  +4.8526e-01  +7.6761e-01  2.82e-01  1.84e-04  3.19e-02  8.21e-05  5.34e-04  3.05e-01  
 12  +4.6965e-01  +6.7291e-01  2.03e-01  1.11e-04  1.91e-02  5.34e-05  3.40e-04  4.52e-01  
 13  +4.5943e-01  +6.1977e-01  1.60e-01  8.36e-05  1.44e-02  3.35e-05  2.69e-04  3.58e-01  
 14  +4.4564e-01  +5.4996e-01  1.04e-01  5.08e-05  8.74e-03  1.56e-05  1.74e-04  5.67e-01  
 15  +4.3601e-01  +5.0288e-01  6.69e-02  3.10e-05  5.33e-03  8.41e-06  1.11e-04  5.71e-01  
 16  +4.2560e-01  +4.5202e-01  2.64e-02  1.17e-05  2.01e-03  2.54e-06  4.40e-05  9.90e-01  
 17  +4.2007e-01  +4.2764e-01  7.57e-03  3.27e-06  5.60e-04  7.35e-07  1.29e-05  8.85e-01  
 18  +4.1815e-01  +4.2008e-01  1.93e-03  8.05e-07  1.38e-04  1.84e-07  3.35e-06  9.69e-01  
 19  +4.1752e-01  +4.1757e-01  5.32e-05  2.20e-08  3.78e-06  5.03e-09  9.29e-08  9.73e-01  
 20  +4.1750e-01  +4.1750e-01  5.32e-07  2.20e-10  3.78e-08  5.04e-11  9.30e-10  9.90e-01  
 21  +4.1750e-01  +4.1750e-01  5.33e-09  2.20e-12  3.78e-10  5.10e-13  9.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.6706ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:08 PM: Optimal value: 4.175e-01
(CVXPY) Sep 20 07:59:08 PM: Compilation took 2.391e-02 seconds
(CVXPY) Sep 20 07:59:08 PM: Solver (including time spent in interface) took 1.026e-01 seconds
Iteration: 17, Objective: 0.4175
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:08 PM: Your problem has 2687 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:08 PM: Finished problem compilation (took 2.394e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2687
  constraints   = 5187
  nnz(P)        = 0
  nnz(A)        = 48914
  cones (total) = 1
    : Nonnegative = 1,  numel = 5187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.80e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.7872e-01  +5.4333e+02  5.43e+02  4.33e-01  5.44e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.3008e-01  +5.9952e+01  5.94e+01  1.62e-01  2.56e+01  1.66e-02  2.70e-01  9.53e-01  
  3  +5.0810e-01  +1.5459e+01  1.50e+01  1.03e-01  1.64e+01  4.61e-05  2.45e-01  3.41e-01  
  4  +5.0067e-01  +1.3580e+00  8.57e-01  8.52e-03  1.43e+00  6.89e-06  1.06e-01  8.76e-01  
  5  +5.0066e-01  +1.3621e+00  8.61e-01  8.31e-03  1.40e+00  1.51e-05  5.87e-02  5.79e-01  
  6  +5.0041e-01  +1.1308e+00  6.30e-01  3.29e-03  5.69e-01  4.64e-05  1.07e-02  8.53e-01  
  7  +5.0010e-01  +1.1153e+00  6.15e-01  1.15e-03  2.01e-01  1.35e-04  3.26e-03  7.06e-01  
  8  +4.9878e-01  +8.8606e-01  3.87e-01  4.18e-04  7.30e-02  1.01e-04  1.17e-03  9.90e-01  
  9  +4.9487e-01  +8.4553e-01  3.51e-01  2.55e-04  4.44e-02  1.25e-04  7.12e-04  4.78e-01  
 10  +4.9044e-01  +8.1587e-01  3.25e-01  2.01e-04  3.50e-02  1.12e-04  5.69e-04  3.34e-01  
 11  +4.8181e-01  +7.5859e-01  2.77e-01  1.75e-04  3.03e-02  5.80e-05  5.18e-04  3.71e-01  
 12  +4.7457e-01  +7.1586e-01  2.41e-01  1.43e-04  2.47e-02  4.61e-05  4.34e-04  2.49e-01  
 13  +4.6531e-01  +6.6473e-01  1.99e-01  1.12e-04  1.93e-02  2.80e-05  3.55e-04  4.27e-01  
 14  +4.4609e-01  +5.6041e-01  1.14e-01  5.75e-05  9.87e-03  1.21e-05  1.97e-04  6.00e-01  
 15  +4.3927e-01  +5.2667e-01  8.74e-02  4.23e-05  7.26e-03  8.91e-06  1.50e-04  3.54e-01  
 16  +4.3134e-01  +4.8743e-01  5.61e-02  2.60e-05  4.46e-03  5.46e-06  9.56e-05  5.75e-01  
 17  +4.2294e-01  +4.4614e-01  2.32e-02  1.04e-05  1.78e-03  2.23e-06  3.99e-05  9.90e-01  
 18  +4.1784e-01  +4.2330e-01  5.46e-03  2.43e-06  4.17e-04  5.14e-07  9.70e-06  7.86e-01  
 19  +4.1660e-01  +4.1781e-01  1.21e-03  5.38e-07  9.22e-05  1.12e-07  2.17e-06  8.27e-01  
 20  +4.1634e-01  +4.1667e-01  3.29e-04  1.47e-07  2.52e-05  3.05e-08  5.94e-07  7.81e-01  
 21  +4.1625e-01  +4.1627e-01  1.92e-05  8.54e-09  1.46e-06  1.72e-09  3.46e-08  9.90e-01  
 22  +4.1624e-01  +4.1624e-01  1.93e-07  8.59e-11  1.47e-08  1.73e-11  3.48e-10  9.90e-01  
 23  +4.1624e-01  +4.1624e-01  1.93e-09  8.60e-13  1.47e-10  1.74e-13  3.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 102.15ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:08 PM: Optimal value: 4.162e-01
(CVXPY) Sep 20 07:59:08 PM: Compilation took 2.394e-02 seconds
(CVXPY) Sep 20 07:59:08 PM: Solver (including time spent in interface) took 1.079e-01 seconds
Iteration: 18, Objective: 0.4162
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:08 PM: Your problem has 2697 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:08 PM: Finished problem compilation (took 2.480e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2697
  constraints   = 5197
  nnz(P)        = 0
  nnz(A)        = 49433
  cones (total) = 1
    : Nonnegative = 1,  numel = 5197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7859e-01  +5.4342e+02  5.43e+02  4.34e-01  5.44e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2999e-01  +5.9861e+01  5.93e+01  1.62e-01  2.55e+01  1.67e-02  2.69e-01  9.54e-01  
  3  +5.0808e-01  +1.5440e+01  1.49e+01  1.03e-01  1.63e+01  4.62e-05  2.44e-01  3.44e-01  
  4  +5.0068e-01  +1.3692e+00  8.68e-01  8.64e-03  1.45e+00  6.93e-06  1.06e-01  8.72e-01  
  5  +5.0067e-01  +1.3822e+00  8.82e-01  8.47e-03  1.43e+00  1.59e-05  5.72e-02  6.07e-01  
  6  +5.0036e-01  +1.1108e+00  6.10e-01  2.87e-03  4.96e-01  5.22e-05  9.02e-03  8.78e-01  
  7  +4.9988e-01  +1.0867e+00  5.87e-01  9.66e-04  1.69e-01  1.51e-04  2.72e-03  7.17e-01  
  8  +4.9745e-01  +9.0804e-01  4.11e-01  3.31e-04  5.79e-02  1.86e-04  9.18e-04  9.00e-01  
  9  +4.9237e-01  +8.5222e-01  3.60e-01  2.57e-04  4.47e-02  1.47e-04  7.23e-04  3.55e-01  
 10  +4.8954e-01  +8.3100e-01  3.41e-01  2.22e-04  3.86e-02  1.31e-04  6.31e-04  2.39e-01  
 11  +4.7981e-01  +7.5053e-01  2.71e-01  1.80e-04  3.11e-02  3.42e-05  5.37e-04  6.14e-01  
 12  +4.6426e-01  +6.6074e-01  1.96e-01  1.08e-04  1.87e-02  2.40e-05  3.42e-04  4.48e-01  
 13  +4.5087e-01  +5.9015e-01  1.39e-01  7.16e-05  1.23e-02  1.45e-05  2.40e-04  4.49e-01  
 14  +4.3859e-01  +5.2865e-01  9.01e-02  4.36e-05  7.48e-03  8.34e-06  1.54e-04  5.58e-01  
 15  +4.2620e-01  +4.6754e-01  4.13e-02  1.90e-05  3.25e-03  3.64e-06  7.17e-05  7.83e-01  
 16  +4.2016e-01  +4.3799e-01  1.78e-02  7.97e-06  1.37e-03  1.71e-06  3.12e-05  9.90e-01  
 17  +4.1664e-01  +4.2266e-01  6.01e-03  2.66e-06  4.55e-04  5.73e-07  1.08e-05  7.96e-01  
 18  +4.1525e-01  +4.1680e-01  1.55e-03  6.79e-07  1.16e-04  1.47e-07  2.82e-06  7.82e-01  
 19  +4.1492e-01  +4.1542e-01  5.03e-04  2.19e-07  3.76e-05  4.48e-08  9.15e-07  9.90e-01  
 20  +4.1475e-01  +4.1476e-01  8.25e-06  3.60e-09  6.16e-07  7.35e-10  1.51e-08  9.84e-01  
 21  +4.1475e-01  +4.1475e-01  8.32e-08  3.62e-11  6.21e-09  7.40e-12  1.52e-10  9.90e-01  
 22  +4.1475e-01  +4.1475e-01  8.48e-10  3.70e-13  6.34e-11  7.61e-14  1.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.7125ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:08 PM: Optimal value: 4.148e-01
(CVXPY) Sep 20 07:59:08 PM: Compilation took 2.480e-02 seconds
(CVXPY) Sep 20 07:59:08 PM: Solver (including time spent in interface) took 1.134e-01 seconds
Iteration: 19, Objective: 0.4148
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:08 PM: Your problem has 2707 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:08 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:08 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:08 PM: Finished problem compilation (took 2.805e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2707
  constraints   = 5207
  nnz(P)        = 0
  nnz(A)        = 49834
  cones (total) = 1
    : Nonnegative = 1,  numel = 5207

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7839e-01  +5.4350e+02  5.43e+02  4.34e-01  5.43e+01  3.79e-03  5.75e-01  5.86e-01  
  2  +5.2986e-01  +5.9741e+01  5.92e+01  1.61e-01  2.54e+01  1.67e-02  2.69e-01  9.56e-01  
  3  +5.0806e-01  +1.5414e+01  1.49e+01  1.03e-01  1.63e+01  4.64e-05  2.43e-01  3.47e-01  
  4  +5.0067e-01  +1.3609e+00  8.60e-01  8.56e-03  1.44e+00  6.94e-06  1.04e-01  8.77e-01  
  5  +5.0066e-01  +1.3640e+00  8.63e-01  8.21e-03  1.39e+00  1.67e-05  5.12e-02  6.39e-01  
  6  +5.0030e-01  +1.1025e+00  6.02e-01  1.79e-03  3.12e-01  8.12e-05  5.21e-03  9.43e-01  
  7  +4.9945e-01  +9.8740e-01  4.88e-01  6.79e-04  1.19e-01  1.31e-04  1.89e-03  8.05e-01  
  8  +4.9687e-01  +9.4103e-01  4.44e-01  3.44e-04  6.01e-02  2.07e-04  9.49e-04  5.59e-01  
  9  +4.9236e-01  +8.8895e-01  3.97e-01  2.74e-04  4.78e-02  1.73e-04  7.68e-04  3.00e-01  
 10  +4.8852e-01  +8.5429e-01  3.66e-01  2.27e-04  3.96e-02  1.45e-04  6.45e-04  2.97e-01  
 11  +4.8173e-01  +7.8781e-01  3.06e-01  2.08e-04  3.60e-02  6.07e-05  6.16e-04  3.68e-01  
 12  +4.7924e-01  +7.7183e-01  2.93e-01  1.93e-04  3.34e-02  5.49e-05  5.76e-04  1.30e-01  
 13  +4.6982e-01  +7.1339e-01  2.44e-01  1.43e-04  2.48e-02  4.37e-05  4.42e-04  2.98e-01  
 14  +4.5785e-01  +6.4311e-01  1.85e-01  1.01e-04  1.75e-02  7.72e-06  3.30e-04  9.90e-01  
 15  +4.3792e-01  +5.3368e-01  9.58e-02  4.65e-05  7.98e-03  7.60e-06  1.64e-04  9.90e-01  
 16  +4.2689e-01  +4.7995e-01  5.31e-02  2.47e-05  4.23e-03  4.09e-06  9.16e-05  4.83e-01  
 17  +4.2180e-01  +4.5564e-01  3.38e-02  1.53e-05  2.63e-03  2.70e-06  5.85e-05  4.67e-01  
 18  +4.1717e-01  +4.3302e-01  1.59e-02  6.95e-06  1.19e-03  1.53e-06  2.72e-05  9.90e-01  
 19  +4.1344e-01  +4.1737e-01  3.93e-03  1.69e-06  2.89e-04  3.76e-07  6.92e-06  8.52e-01  
 20  +4.1220e-01  +4.1250e-01  3.01e-04  1.26e-07  2.16e-05  2.79e-08  5.34e-07  9.76e-01  
 21  +4.1210e-01  +4.1210e-01  3.09e-06  1.29e-09  2.22e-07  2.87e-10  5.51e-09  9.90e-01  
 22  +4.1210e-01  +4.1210e-01  3.10e-08  1.30e-11  2.22e-09  2.88e-12  5.51e-11  9.90e-01  
 23  +4.1210e-01  +4.1210e-01  3.10e-10  1.30e-13  2.22e-11  2.92e-14  5.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 118.422ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:09 PM: Optimal value: 4.121e-01
(CVXPY) Sep 20 07:59:09 PM: Compilation took 2.805e-02 seconds
(CVXPY) Sep 20 07:59:09 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 20, Objective: 0.4121
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:09 PM: Your problem has 2717 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:09 PM: Finished problem compilation (took 2.946e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2717
  constraints   = 5217
  nnz(P)        = 0
  nnz(A)        = 50340
  cones (total) = 1
    : Nonnegative = 1,  numel = 5217

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.7829e-01  +5.4346e+02  5.43e+02  4.34e-01  5.42e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2980e-01  +5.9681e+01  5.92e+01  1.61e-01  2.53e+01  1.67e-02  2.68e-01  9.57e-01  
  3  +5.0805e-01  +1.5395e+01  1.49e+01  1.02e-01  1.62e+01  4.65e-05  2.43e-01  3.49e-01  
  4  +5.0067e-01  +1.3486e+00  8.48e-01  8.45e-03  1.42e+00  6.93e-06  1.03e-01  8.84e-01  
  5  +5.0061e-01  +1.3030e+00  8.02e-01  7.51e-03  1.27e+00  1.79e-05  4.32e-02  6.87e-01  
  6  +5.0035e-01  +1.1767e+00  6.76e-01  1.65e-03  2.87e-01  9.99e-05  4.68e-03  9.26e-01  
  7  +4.9989e-01  +1.0394e+00  5.40e-01  1.19e-03  2.07e-01  5.86e-05  3.40e-03  5.63e-01  
  8  +4.9767e-01  +9.9673e-01  4.99e-01  3.69e-04  6.45e-02  1.69e-04  1.01e-03  7.21e-01  
  9  +4.9425e-01  +9.4851e-01  4.54e-01  3.28e-04  5.72e-02  1.28e-04  9.10e-04  2.41e-01  
 10  +4.8998e-01  +8.9642e-01  4.06e-01  2.61e-04  4.54e-02  1.04e-04  7.36e-04  3.41e-01  
 11  +4.8476e-01  +8.3337e-01  3.49e-01  2.31e-04  4.01e-02  6.04e-05  6.68e-04  3.38e-01  
 12  +4.7042e-01  +7.2183e-01  2.51e-01  1.48e-04  2.56e-02  3.12e-05  4.54e-04  5.44e-01  
 13  +4.5958e-01  +6.5717e-01  1.98e-01  1.08e-04  1.86e-02  2.30e-05  3.45e-04  2.94e-01  
 14  +4.4870e-01  +5.9606e-01  1.47e-01  7.59e-05  1.30e-02  1.46e-05  2.54e-04  4.76e-01  
 15  +4.3272e-01  +5.1097e-01  7.83e-02  3.74e-05  6.40e-03  6.74e-06  1.34e-04  6.86e-01  
 16  +4.2211e-01  +4.5810e-01  3.60e-02  1.65e-05  2.81e-03  3.11e-06  6.24e-05  7.03e-01  
 17  +4.1900e-01  +4.4361e-01  2.46e-02  1.10e-05  1.89e-03  2.16e-06  4.26e-05  4.14e-01  
 18  +4.1626e-01  +4.3014e-01  1.39e-02  6.09e-06  1.04e-03  1.30e-06  2.40e-05  8.34e-01  
 19  +4.1315e-01  +4.1707e-01  3.92e-03  1.67e-06  2.85e-04  3.72e-07  6.85e-06  9.39e-01  
 20  +4.1209e-01  +4.1281e-01  7.19e-04  3.03e-07  5.17e-05  6.78e-08  1.27e-06  8.47e-01  
 21  +4.1185e-01  +4.1186e-01  9.48e-06  3.98e-09  6.80e-07  8.82e-10  1.68e-08  9.90e-01  
 22  +4.1185e-01  +4.1185e-01  9.51e-08  3.99e-11  6.81e-09  8.84e-12  1.68e-10  9.90e-01  
 23  +4.1185e-01  +4.1185e-01  9.68e-10  4.06e-13  6.94e-11  9.12e-14  1.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.8836ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:09 PM: Optimal value: 4.119e-01
(CVXPY) Sep 20 07:59:09 PM: Compilation took 2.946e-02 seconds
(CVXPY) Sep 20 07:59:09 PM: Solver (including time spent in interface) took 1.311e-01 seconds
Iteration: 21, Objective: 0.4119
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:09 PM: Your problem has 2727 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:09 PM: Finished problem compilation (took 2.899e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2727
  constraints   = 5227
  nnz(P)        = 0
  nnz(A)        = 50673
  cones (total) = 1
    : Nonnegative = 1,  numel = 5227

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.7815e-01  +5.4345e+02  5.43e+02  4.34e-01  5.41e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2971e-01  +5.9589e+01  5.91e+01  1.61e-01  2.52e+01  1.67e-02  2.68e-01  9.58e-01  
  3  +5.0803e-01  +1.5369e+01  1.49e+01  1.02e-01  1.62e+01  4.66e-05  2.42e-01  3.52e-01  
  4  +5.0079e-01  +1.5781e+00  1.08e+00  1.07e-02  1.79e+00  7.62e-06  1.17e-01  7.89e-01  
  5  +5.0059e-01  +1.4696e+00  9.69e-01  9.17e-03  1.54e+00  1.79e-05  6.07e-02  6.90e-01  
  6  +4.9991e-01  +1.0798e+00  5.80e-01  2.80e-03  4.84e-01  5.03e-05  9.05e-03  8.86e-01  
  7  +4.9611e-01  +1.0208e+00  5.25e-01  4.70e-04  8.21e-02  2.88e-04  1.31e-03  8.57e-01  
  8  +4.9105e-01  +9.4055e-01  4.50e-01  3.53e-04  6.14e-02  2.30e-04  9.97e-04  3.39e-01  
  9  +4.8478e-01  +8.7027e-01  3.85e-01  2.39e-04  4.15e-02  1.74e-04  6.86e-04  5.18e-01  
 10  +4.7927e-01  +8.0874e-01  3.29e-01  2.19e-04  3.78e-02  9.68e-05  6.48e-04  2.55e-01  
 11  +4.7341e-01  +7.5991e-01  2.86e-01  1.81e-04  3.12e-02  3.46e-05  5.49e-04  6.56e-01  
 12  +4.5767e-01  +6.5421e-01  1.97e-01  1.09e-04  1.87e-02  1.24e-05  3.49e-04  8.93e-01  
 13  +4.4452e-01  +5.8162e-01  1.37e-01  7.03e-05  1.20e-02  8.69e-06  2.38e-04  4.45e-01  
 14  +4.2891e-01  +5.0037e-01  7.15e-02  3.41e-05  5.83e-03  4.52e-06  1.24e-04  5.70e-01  
 15  +4.1986e-01  +4.5524e-01  3.54e-02  1.62e-05  2.78e-03  2.50e-06  6.17e-05  6.46e-01  
 16  +4.1561e-01  +4.3508e-01  1.95e-02  8.72e-06  1.49e-03  1.48e-06  3.40e-05  5.60e-01  
 17  +4.1289e-01  +4.2229e-01  9.40e-03  4.14e-06  7.06e-04  7.92e-07  1.65e-05  7.36e-01  
 18  +4.1128e-01  +4.1507e-01  3.79e-03  1.65e-06  2.82e-04  3.43e-07  6.67e-06  8.84e-01  
 19  +4.1033e-01  +4.1110e-01  7.75e-04  3.36e-07  5.74e-05  7.09e-08  1.38e-06  9.80e-01  
 20  +4.1010e-01  +4.1021e-01  1.05e-04  4.54e-08  7.76e-06  9.53e-09  1.87e-07  9.62e-01  
 21  +4.1007e-01  +4.1007e-01  1.11e-06  4.80e-10  8.19e-08  1.01e-10  1.98e-09  9.89e-01  
 22  +4.1007e-01  +4.1007e-01  1.11e-08  4.82e-12  8.23e-10  1.01e-12  1.99e-11  9.90e-01  
 23  +4.1007e-01  +4.1007e-01  1.13e-10  4.89e-14  8.33e-12  1.03e-14  2.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.6321ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:09 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:09 PM: Optimal value: 4.101e-01
(CVXPY) Sep 20 07:59:09 PM: Compilation took 2.899e-02 seconds
(CVXPY) Sep 20 07:59:09 PM: Solver (including time spent in interface) took 1.381e-01 seconds
Iteration: 22, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:09 PM: Your problem has 2737 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:09 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:09 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:09 PM: Finished problem compilation (took 3.315e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:09 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2737
  constraints   = 5237
  nnz(P)        = 0
  nnz(A)        = 50906
  cones (total) = 1
    : Nonnegative = 1,  numel = 5237

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.48e+01  1.00e+00  1.00e+00   ------   
  1  +5.7807e-01  +5.4339e+02  5.43e+02  4.34e-01  5.40e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2970e-01  +5.9580e+01  5.90e+01  1.61e-01  2.51e+01  1.67e-02  2.67e-01  9.58e-01  
  3  +5.0802e-01  +1.5361e+01  1.49e+01  1.02e-01  1.61e+01  4.66e-05  2.42e-01  3.53e-01  
  4  +5.0079e-01  +1.5813e+00  1.08e+00  1.08e-02  1.80e+00  7.65e-06  1.17e-01  7.88e-01  
  5  +5.0060e-01  +1.4876e+00  9.87e-01  9.34e-03  1.57e+00  1.80e-05  6.09e-02  6.88e-01  
  6  +4.9991e-01  +1.0950e+00  5.95e-01  2.86e-03  4.94e-01  5.01e-05  9.23e-03  8.85e-01  
  7  +4.9601e-01  +1.0348e+00  5.39e-01  4.75e-04  8.28e-02  2.90e-04  1.32e-03  8.58e-01  
  8  +4.9077e-01  +9.4976e-01  4.59e-01  3.56e-04  6.20e-02  2.28e-04  1.01e-03  3.41e-01  
  9  +4.8380e-01  +8.7297e-01  3.89e-01  2.40e-04  4.17e-02  1.78e-04  6.92e-04  4.84e-01  
 10  +4.7733e-01  +7.9844e-01  3.21e-01  2.11e-04  3.65e-02  8.27e-05  6.31e-04  3.47e-01  
 11  +4.6307e-01  +7.0247e-01  2.39e-01  1.35e-04  2.32e-02  5.89e-05  4.22e-04  3.83e-01  
 12  +4.5009e-01  +6.2328e-01  1.73e-01  9.09e-05  1.56e-02  3.23e-05  3.01e-04  4.56e-01  
 13  +4.3989e-01  +5.6514e-01  1.25e-01  6.30e-05  1.08e-02  1.92e-05  2.18e-04  4.40e-01  
 14  +4.2687e-01  +4.9512e-01  6.82e-02  3.27e-05  5.58e-03  8.96e-06  1.20e-04  5.62e-01  
 15  +4.1696e-01  +4.4218e-01  2.52e-02  1.16e-05  1.98e-03  2.37e-06  4.49e-05  9.90e-01  
 16  +4.1236e-01  +4.2114e-01  8.78e-03  3.98e-06  6.79e-04  8.30e-07  1.60e-05  7.28e-01  
 17  +4.1126e-01  +4.1621e-01  4.95e-03  2.23e-06  3.81e-04  4.64e-07  9.04e-06  5.20e-01  
 18  +4.1049e-01  +4.1270e-01  2.21e-03  9.95e-07  1.70e-04  2.01e-07  4.06e-06  8.26e-01  
 19  +4.1024e-01  +4.1163e-01  1.39e-03  6.25e-07  1.07e-04  1.26e-07  2.56e-06  4.40e-01  
 20  +4.0999e-01  +4.1058e-01  5.87e-04  2.62e-07  4.47e-05  5.23e-08  1.08e-06  8.25e-01  
 21  +4.0983e-01  +4.0990e-01  7.23e-05  3.23e-08  5.51e-06  6.32e-09  1.33e-07  9.90e-01  
 22  +4.0981e-01  +4.0981e-01  8.90e-07  3.98e-10  6.78e-08  7.77e-11  1.64e-09  9.88e-01  
 23  +4.0981e-01  +4.0981e-01  8.92e-09  3.99e-12  6.80e-10  7.78e-13  1.65e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.0819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:10 PM: Optimal value: 4.098e-01
(CVXPY) Sep 20 07:59:10 PM: Compilation took 3.315e-02 seconds
(CVXPY) Sep 20 07:59:10 PM: Solver (including time spent in interface) took 1.506e-01 seconds
Iteration: 23, Objective: 0.4098
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:10 PM: Your problem has 2747 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:10 PM: Finished problem compilation (took 4.442e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2747
  constraints   = 5247
  nnz(P)        = 0
  nnz(A)        = 51210
  cones (total) = 1
    : Nonnegative = 1,  numel = 5247

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.7794e-01  +5.4347e+02  5.43e+02  4.35e-01  5.40e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2963e-01  +5.9518e+01  5.90e+01  1.61e-01  2.50e+01  1.67e-02  2.67e-01  9.59e-01  
  3  +5.0802e-01  +1.5353e+01  1.48e+01  1.02e-01  1.61e+01  4.67e-05  2.41e-01  3.55e-01  
  4  +5.0080e-01  +1.5985e+00  1.10e+00  1.10e-02  1.82e+00  7.71e-06  1.17e-01  7.82e-01  
  5  +5.0060e-01  +1.4967e+00  9.96e-01  9.44e-03  1.58e+00  1.78e-05  6.19e-02  6.78e-01  
  6  +4.9992e-01  +1.1095e+00  6.10e-01  3.00e-03  5.18e-01  4.83e-05  9.74e-03  8.84e-01  
  7  +4.9600e-01  +1.0467e+00  5.51e-01  4.96e-04  8.66e-02  2.80e-04  1.38e-03  8.60e-01  
  8  +4.8956e-01  +9.3913e-01  4.50e-01  3.46e-04  6.00e-02  2.09e-04  9.82e-04  4.09e-01  
  9  +4.8422e-01  +8.7767e-01  3.93e-01  2.52e-04  4.36e-02  1.58e-04  7.24e-04  4.58e-01  
 10  +4.7444e-01  +7.6574e-01  2.91e-01  1.99e-04  3.42e-02  3.27e-05  6.06e-04  5.82e-01  
 11  +4.6800e-01  +7.2749e-01  2.59e-01  1.62e-04  2.79e-02  2.72e-05  5.05e-04  3.13e-01  
 12  +4.5040e-01  +6.2327e-01  1.73e-01  9.22e-05  1.58e-02  1.60e-05  3.05e-04  5.69e-01  
 13  +4.3756e-01  +5.5194e-01  1.14e-01  5.75e-05  9.83e-03  9.62e-06  2.01e-04  5.51e-01  
 14  +4.2719e-01  +4.9806e-01  7.09e-02  3.42e-05  5.84e-03  5.77e-06  1.25e-04  4.13e-01  
 15  +4.1896e-01  +4.5645e-01  3.75e-02  1.75e-05  2.99e-03  3.05e-06  6.70e-05  5.41e-01  
 16  +4.1306e-01  +4.2774e-01  1.47e-02  6.68e-06  1.14e-03  1.21e-06  2.65e-05  6.64e-01  
 17  +4.1108e-01  +4.1827e-01  7.19e-03  3.21e-06  5.47e-04  6.22e-07  1.29e-05  7.19e-01  
 18  +4.1032e-01  +4.1458e-01  4.25e-03  1.89e-06  3.23e-04  3.80e-07  7.65e-06  8.01e-01  
 19  +4.0962e-01  +4.1155e-01  1.92e-03  8.53e-07  1.45e-04  1.73e-07  3.47e-06  9.81e-01  
 20  +4.0922e-01  +4.0990e-01  6.80e-04  3.01e-07  5.13e-05  6.08e-08  1.23e-06  9.90e-01  
 21  +4.0902e-01  +4.0906e-01  4.67e-05  2.07e-08  3.52e-06  4.17e-09  8.47e-08  9.36e-01  
 22  +4.0900e-01  +4.0900e-01  4.76e-07  2.11e-10  3.59e-08  4.25e-11  8.62e-10  9.90e-01  
 23  +4.0900e-01  +4.0900e-01  4.83e-09  2.14e-12  3.64e-10  4.32e-13  8.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 229.7218ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:10 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:10 PM: Optimal value: 4.090e-01
(CVXPY) Sep 20 07:59:10 PM: Compilation took 4.442e-02 seconds
(CVXPY) Sep 20 07:59:10 PM: Solver (including time spent in interface) took 2.401e-01 seconds
Iteration: 24, Objective: 0.4090
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:10 PM: Your problem has 2757 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:10 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:10 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:10 PM: Finished problem compilation (took 5.131e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2757
  constraints   = 5257
  nnz(P)        = 0
  nnz(A)        = 51509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5257

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.7783e-01  +5.4350e+02  5.43e+02  4.35e-01  5.39e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2958e-01  +5.9482e+01  5.90e+01  1.60e-01  2.50e+01  1.67e-02  2.67e-01  9.60e-01  
  3  +5.0801e-01  +1.5348e+01  1.48e+01  1.02e-01  1.60e+01  4.68e-05  2.41e-01  3.56e-01  
  4  +5.0080e-01  +1.6044e+00  1.10e+00  1.10e-02  1.83e+00  7.75e-06  1.17e-01  7.81e-01  
  5  +5.0060e-01  +1.5171e+00  1.02e+00  9.59e-03  1.61e+00  1.84e-05  6.09e-02  6.91e-01  
  6  +4.9986e-01  +1.1073e+00  6.07e-01  2.83e-03  4.87e-01  5.16e-05  9.01e-03  8.92e-01  
  7  +4.9568e-01  +1.0401e+00  5.44e-01  4.75e-04  8.28e-02  2.88e-04  1.32e-03  8.55e-01  
  8  +4.8936e-01  +9.3904e-01  4.50e-01  3.43e-04  5.95e-02  2.08e-04  9.73e-04  3.91e-01  
  9  +4.8384e-01  +8.7798e-01  3.94e-01  2.52e-04  4.36e-02  1.60e-04  7.23e-04  4.40e-01  
 10  +4.7763e-01  +8.0983e-01  3.32e-01  2.18e-04  3.76e-02  8.61e-05  6.46e-04  3.36e-01  
 11  +4.6459e-01  +7.2096e-01  2.56e-01  1.46e-04  2.51e-02  6.25e-05  4.53e-04  3.59e-01  
 12  +4.5014e-01  +6.3177e-01  1.82e-01  9.57e-05  1.64e-02  3.60e-05  3.15e-04  4.18e-01  
 13  +4.3149e-01  +5.2477e-01  9.33e-02  4.56e-05  7.78e-03  9.92e-06  1.63e-04  7.72e-01  
 14  +4.2383e-01  +4.8605e-01  6.22e-02  2.96e-05  5.04e-03  6.43e-06  1.10e-04  3.68e-01  
 15  +4.1638e-01  +4.4913e-01  3.27e-02  1.51e-05  2.58e-03  3.28e-06  5.85e-05  5.56e-01  
 16  +4.1271e-01  +4.3146e-01  1.87e-02  8.54e-06  1.45e-03  1.86e-06  3.38e-05  4.86e-01  
 17  +4.1009e-01  +4.1805e-01  7.96e-03  3.57e-06  6.08e-04  7.43e-07  1.44e-05  9.90e-01  
 18  +4.0810e-01  +4.0975e-01  1.64e-03  7.29e-07  1.24e-04  1.55e-07  2.99e-06  8.53e-01  
 19  +4.0776e-01  +4.0834e-01  5.71e-04  2.53e-07  4.32e-05  5.06e-08  1.04e-06  9.90e-01  
 20  +4.0758e-01  +4.0758e-01  7.41e-06  3.28e-09  5.60e-07  6.55e-10  1.35e-08  9.87e-01  
 21  +4.0758e-01  +4.0758e-01  7.44e-08  3.30e-11  5.62e-09  6.58e-12  1.36e-10  9.90e-01  
 22  +4.0758e-01  +4.0758e-01  7.90e-10  3.50e-13  5.96e-11  7.01e-14  1.45e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 210.5069ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:11 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:11 PM: Optimal value: 4.076e-01
(CVXPY) Sep 20 07:59:11 PM: Compilation took 5.131e-02 seconds
(CVXPY) Sep 20 07:59:11 PM: Solver (including time spent in interface) took 2.226e-01 seconds
Iteration: 25, Objective: 0.4076
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:11 PM: Your problem has 2767 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:11 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:11 PM: Finished problem compilation (took 4.514e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2767
  constraints   = 5267
  nnz(P)        = 0
  nnz(A)        = 51794
  cones (total) = 1
    : Nonnegative = 1,  numel = 5267

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.7776e-01  +5.4352e+02  5.43e+02  4.35e-01  5.38e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2955e-01  +5.9454e+01  5.89e+01  1.60e-01  2.49e+01  1.68e-02  2.67e-01  9.61e-01  
  3  +5.0800e-01  +1.5340e+01  1.48e+01  1.02e-01  1.60e+01  4.68e-05  2.40e-01  3.57e-01  
  4  +5.0080e-01  +1.6128e+00  1.11e+00  1.11e-02  1.85e+00  7.78e-06  1.17e-01  7.78e-01  
  5  +5.0060e-01  +1.5209e+00  1.02e+00  9.64e-03  1.61e+00  1.82e-05  6.13e-02  6.87e-01  
  6  +4.9990e-01  +1.1331e+00  6.33e-01  3.08e-03  5.31e-01  4.90e-05  9.93e-03  8.76e-01  
  7  +4.9580e-01  +1.0639e+00  5.68e-01  5.07e-04  8.83e-02  2.80e-04  1.41e-03  8.60e-01  
  8  +4.9021e-01  +9.6575e-01  4.76e-01  3.74e-04  6.48e-02  2.12e-04  1.06e-03  3.63e-01  
  9  +4.8419e-01  +8.9516e-01  4.11e-01  2.60e-04  4.51e-02  1.66e-04  7.46e-04  4.76e-01  
 10  +4.7862e-01  +8.3139e-01  3.53e-01  2.28e-04  3.94e-02  1.01e-04  6.72e-04  2.80e-01  
 11  +4.6510e-01  +7.3283e-01  2.68e-01  1.52e-04  2.61e-02  6.93e-05  4.69e-04  3.80e-01  
 12  +4.5042e-01  +6.3859e-01  1.88e-01  9.93e-05  1.70e-02  3.72e-05  3.26e-04  4.46e-01  
 13  +4.3333e-01  +5.3828e-01  1.05e-01  5.18e-05  8.84e-03  1.19e-05  1.84e-04  7.30e-01  
 14  +4.2460e-01  +4.9313e-01  6.85e-02  3.28e-05  5.58e-03  7.41e-06  1.21e-04  4.16e-01  
 15  +4.1790e-01  +4.5877e-01  4.09e-02  1.90e-05  3.23e-03  4.21e-06  7.26e-05  5.91e-01  
 16  +4.1104e-01  +4.2608e-01  1.50e-02  6.82e-06  1.16e-03  1.51e-06  2.73e-05  6.76e-01  
 17  +4.0837e-01  +4.1376e-01  5.38e-03  2.41e-06  4.10e-04  5.24e-07  9.87e-06  7.44e-01  
 18  +4.0700e-01  +4.0760e-01  6.06e-04  2.70e-07  4.60e-05  5.42e-08  1.12e-06  9.90e-01  
 19  +4.0680e-01  +4.0681e-01  6.25e-06  2.78e-09  4.74e-07  5.58e-10  1.16e-08  9.90e-01  
 20  +4.0680e-01  +4.0680e-01  6.25e-08  2.79e-11  4.74e-09  5.58e-12  1.16e-10  9.90e-01  
 21  +4.0680e-01  +4.0680e-01  6.43e-10  2.86e-13  4.87e-11  5.75e-14  1.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.9682ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:11 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:11 PM: Optimal value: 4.068e-01
(CVXPY) Sep 20 07:59:11 PM: Compilation took 4.514e-02 seconds
(CVXPY) Sep 20 07:59:11 PM: Solver (including time spent in interface) took 2.064e-01 seconds
Iteration: 26, Objective: 0.4068
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:11 PM: Your problem has 2777 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:11 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:12 PM: Finished problem compilation (took 4.078e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2777
  constraints   = 5277
  nnz(P)        = 0
  nnz(A)        = 52076
  cones (total) = 1
    : Nonnegative = 1,  numel = 5277

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7762e-01  +5.4348e+02  5.43e+02  4.35e-01  5.37e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2947e-01  +5.9358e+01  5.88e+01  1.60e-01  2.48e+01  1.68e-02  2.66e-01  9.62e-01  
  3  +5.0799e-01  +1.5315e+01  1.48e+01  1.02e-01  1.59e+01  4.69e-05  2.40e-01  3.60e-01  
  4  +5.0080e-01  +1.6016e+00  1.10e+00  1.10e-02  1.83e+00  7.78e-06  1.16e-01  7.84e-01  
  5  +5.0063e-01  +1.5500e+00  1.05e+00  9.86e-03  1.65e+00  1.89e-05  5.94e-02  6.94e-01  
  6  +4.9979e-01  +1.1077e+00  6.08e-01  2.56e-03  4.42e-01  5.70e-05  7.92e-03  9.01e-01  
  7  +4.9544e-01  +1.0378e+00  5.42e-01  4.60e-04  8.02e-02  2.90e-04  1.27e-03  8.43e-01  
  8  +4.9084e-01  +9.7326e-01  4.82e-01  3.65e-04  6.34e-02  2.36e-04  1.02e-03  3.08e-01  
  9  +4.8475e-01  +9.1126e-01  4.27e-01  2.65e-04  4.60e-02  2.01e-04  7.54e-04  3.91e-01  
 10  +4.7524e-01  +8.1146e-01  3.36e-01  2.10e-04  3.63e-02  9.56e-05  6.24e-04  3.97e-01  
 11  +4.5925e-01  +7.0139e-01  2.42e-01  1.33e-04  2.28e-02  5.90e-05  4.18e-04  4.24e-01  
 12  +4.4770e-01  +6.2710e-01  1.79e-01  9.49e-05  1.62e-02  2.04e-05  3.15e-04  6.97e-01  
 13  +4.2452e-01  +4.9611e-01  7.16e-02  3.44e-05  5.86e-03  4.76e-06  1.26e-04  9.54e-01  
 14  +4.1539e-01  +4.5094e-01  3.55e-02  1.66e-05  2.82e-03  2.68e-06  6.39e-05  6.85e-01  
 15  +4.1257e-01  +4.3784e-01  2.53e-02  1.16e-05  1.97e-03  1.97e-06  4.55e-05  3.79e-01  
 16  +4.1149e-01  +4.3285e-01  2.14e-02  9.67e-06  1.65e-03  1.71e-06  3.84e-05  2.53e-01  
 17  +4.0767e-01  +4.1536e-01  7.69e-03  3.40e-06  5.81e-04  6.89e-07  1.40e-05  9.30e-01  
 18  +4.0575e-01  +4.0739e-01  1.65e-03  7.10e-07  1.22e-04  1.47e-07  3.03e-06  8.96e-01  
 19  +4.0525e-01  +4.0538e-01  1.38e-04  5.91e-08  1.02e-05  1.23e-08  2.55e-07  9.30e-01  
 20  +4.0520e-01  +4.0520e-01  1.41e-06  6.03e-10  1.04e-07  1.25e-10  2.61e-09  9.90e-01  
 21  +4.0520e-01  +4.0520e-01  1.41e-08  6.05e-12  1.04e-09  1.26e-12  2.62e-11  9.90e-01  
 22  +4.0520e-01  +4.0520e-01  1.42e-10  6.08e-14  1.05e-11  1.28e-14  2.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 223.1203ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:12 PM: Optimal value: 4.052e-01
(CVXPY) Sep 20 07:59:12 PM: Compilation took 4.078e-02 seconds
(CVXPY) Sep 20 07:59:12 PM: Solver (including time spent in interface) took 2.334e-01 seconds
Iteration: 27, Objective: 0.4052
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:12 PM: Your problem has 2787 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:12 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:12 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:12 PM: Finished problem compilation (took 4.461e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2787
  constraints   = 5287
  nnz(P)        = 0
  nnz(A)        = 52258
  cones (total) = 1
    : Nonnegative = 1,  numel = 5287

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7748e-01  +5.4347e+02  5.43e+02  4.35e-01  5.36e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2938e-01  +5.9263e+01  5.87e+01  1.60e-01  2.47e+01  1.68e-02  2.66e-01  9.63e-01  
  3  +5.0797e-01  +1.5296e+01  1.48e+01  1.02e-01  1.59e+01  4.70e-05  2.39e-01  3.62e-01  
  4  +5.0080e-01  +1.6137e+00  1.11e+00  1.11e-02  1.85e+00  7.84e-06  1.16e-01  7.81e-01  
  5  +5.0064e-01  +1.5691e+00  1.07e+00  1.01e-02  1.69e+00  1.83e-05  6.12e-02  6.69e-01  
  6  +4.9984e-01  +1.1214e+00  6.22e-01  2.82e-03  4.86e-01  5.21e-05  8.85e-03  8.81e-01  
  7  +4.9553e-01  +1.0499e+00  5.54e-01  4.88e-04  8.50e-02  2.78e-04  1.35e-03  8.50e-01  
  8  +4.9110e-01  +9.8386e-01  4.93e-01  3.89e-04  6.75e-02  2.25e-04  1.09e-03  3.05e-01  
  9  +4.8631e-01  +9.1448e-01  4.28e-01  2.81e-04  4.87e-02  1.32e-04  7.96e-04  5.94e-01  
 10  +4.7501e-01  +8.0178e-01  3.27e-01  2.06e-04  3.55e-02  5.82e-05  6.11e-04  5.08e-01  
 11  +4.6038e-01  +7.0618e-01  2.46e-01  1.37e-04  2.35e-02  4.00e-05  4.29e-04  3.73e-01  
 12  +4.4471e-01  +6.1264e-01  1.68e-01  8.78e-05  1.50e-02  1.42e-05  2.94e-04  7.66e-01  
 13  +4.2782e-01  +5.2010e-01  9.23e-02  4.48e-05  7.63e-03  7.22e-06  1.62e-04  9.07e-01  
 14  +4.1145e-01  +4.3936e-01  2.79e-02  1.29e-05  2.19e-03  2.05e-06  5.10e-05  7.66e-01  
 15  +4.0884e-01  +4.2704e-01  1.82e-02  8.23e-06  1.40e-03  1.45e-06  3.33e-05  5.57e-01  
 16  +4.0831e-01  +4.2450e-01  1.62e-02  7.32e-06  1.25e-03  1.30e-06  2.99e-05  2.48e-01  
 17  +4.0833e-01  +4.2460e-01  1.63e-02  7.32e-06  1.25e-03  1.33e-06  2.98e-05  4.57e-02  
 18  +4.0494e-01  +4.0986e-01  4.93e-03  2.18e-06  3.73e-04  4.03e-07  9.23e-06  7.17e-01  
 19  +4.0359e-01  +4.0419e-01  5.94e-04  2.58e-07  4.42e-05  4.96e-08  1.12e-06  9.28e-01  
 20  +4.0340e-01  +4.0341e-01  9.40e-06  4.07e-09  6.99e-07  7.90e-10  1.78e-08  9.90e-01  
 21  +4.0340e-01  +4.0340e-01  9.44e-08  4.09e-11  7.01e-09  7.93e-12  1.79e-10  9.90e-01  
 22  +4.0340e-01  +4.0340e-01  9.49e-10  4.11e-13  7.05e-11  8.05e-14  1.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 213.3122ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:12 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:12 PM: Optimal value: 4.034e-01
(CVXPY) Sep 20 07:59:12 PM: Compilation took 4.461e-02 seconds
(CVXPY) Sep 20 07:59:12 PM: Solver (including time spent in interface) took 2.241e-01 seconds
Iteration: 28, Objective: 0.4034
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:13 PM: Your problem has 2795 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:13 PM: Finished problem compilation (took 3.924e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2795
  constraints   = 5295
  nnz(P)        = 0
  nnz(A)        = 52524
  cones (total) = 1
    : Nonnegative = 1,  numel = 5295

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7742e-01  +5.4347e+02  5.43e+02  4.36e-01  5.36e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2936e-01  +5.9237e+01  5.87e+01  1.60e-01  2.46e+01  1.68e-02  2.65e-01  9.63e-01  
  3  +5.0797e-01  +1.5287e+01  1.48e+01  1.01e-01  1.59e+01  4.70e-05  2.39e-01  3.63e-01  
  4  +5.0080e-01  +1.6035e+00  1.10e+00  1.10e-02  1.83e+00  7.82e-06  1.15e-01  7.85e-01  
  5  +5.0064e-01  +1.5808e+00  1.08e+00  1.01e-02  1.69e+00  1.96e-05  5.78e-02  7.01e-01  
  6  +4.9969e-01  +1.1018e+00  6.02e-01  2.28e-03  3.93e-01  6.39e-05  6.90e-03  9.04e-01  
  7  +4.9582e-01  +1.0380e+00  5.42e-01  5.21e-04  9.06e-02  2.51e-04  1.44e-03  7.97e-01  
  8  +4.9153e-01  +9.7362e-01  4.82e-01  4.03e-04  6.99e-02  2.14e-04  1.13e-03  3.21e-01  
  9  +4.8579e-01  +9.1176e-01  4.26e-01  2.83e-04  4.89e-02  1.73e-04  8.01e-04  4.84e-01  
 10  +4.7355e-01  +7.9498e-01  3.21e-01  1.96e-04  3.38e-02  7.21e-05  5.83e-04  5.64e-01  
 11  +4.5902e-01  +7.0088e-01  2.42e-01  1.33e-04  2.28e-02  4.85e-05  4.18e-04  3.51e-01  
 12  +4.4509e-01  +6.1760e-01  1.73e-01  9.09e-05  1.55e-02  1.64e-05  3.05e-04  7.33e-01  
 13  +4.2532e-01  +5.1105e-01  8.57e-02  4.17e-05  7.10e-03  7.11e-06  1.53e-04  5.55e-01  
 14  +4.1336e-01  +4.5126e-01  3.79e-02  1.75e-05  2.97e-03  3.15e-06  6.89e-05  7.16e-01  
 15  +4.0926e-01  +4.3153e-01  2.23e-02  1.01e-05  1.72e-03  1.90e-06  4.11e-05  6.06e-01  
 16  +4.0882e-01  +4.2946e-01  2.06e-02  9.30e-06  1.59e-03  1.78e-06  3.79e-05  1.84e-01  
 17  +4.0548e-01  +4.1432e-01  8.84e-03  3.91e-06  6.68e-04  7.89e-07  1.65e-05  8.75e-01  
 18  +4.0349e-01  +4.0596e-01  2.48e-03  1.08e-06  1.86e-04  2.20e-07  4.69e-06  7.32e-01  
 19  +4.0272e-01  +4.0280e-01  7.25e-05  3.15e-08  5.41e-06  6.20e-09  1.38e-07  9.89e-01  
 20  +4.0270e-01  +4.0270e-01  7.25e-07  3.16e-10  5.42e-08  6.20e-11  1.39e-09  9.90e-01  
 21  +4.0270e-01  +4.0270e-01  7.26e-09  3.16e-12  5.42e-10  6.21e-13  1.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 185.0239ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:13 PM: Optimal value: 4.027e-01
(CVXPY) Sep 20 07:59:13 PM: Compilation took 3.924e-02 seconds
(CVXPY) Sep 20 07:59:13 PM: Solver (including time spent in interface) took 1.951e-01 seconds
Iteration: 29, Objective: 0.4027
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:13 PM: Your problem has 2803 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:13 PM: Finished problem compilation (took 4.560e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2803
  constraints   = 5303
  nnz(P)        = 0
  nnz(A)        = 52778
  cones (total) = 1
    : Nonnegative = 1,  numel = 5303

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7721e-01  +5.4366e+02  5.43e+02  4.36e-01  5.35e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2928e-01  +5.9192e+01  5.87e+01  1.60e-01  2.45e+01  1.68e-02  2.65e-01  9.64e-01  
  3  +5.0796e-01  +1.5279e+01  1.48e+01  1.01e-01  1.58e+01  4.72e-05  2.38e-01  3.66e-01  
  4  +5.0079e-01  +1.5882e+00  1.09e+00  1.09e-02  1.81e+00  7.80e-06  1.13e-01  7.92e-01  
  5  +5.0066e-01  +1.6129e+00  1.11e+00  1.02e-02  1.71e+00  2.11e-05  5.42e-02  7.26e-01  
  6  +4.9970e-01  +1.1734e+00  6.74e-01  2.35e-03  4.07e-01  7.01e-05  6.99e-03  8.90e-01  
  7  +4.9588e-01  +1.0990e+00  6.03e-01  5.70e-04  9.93e-02  2.53e-04  1.57e-03  7.83e-01  
  8  +4.9192e-01  +1.0287e+00  5.37e-01  4.51e-04  7.82e-02  2.15e-04  1.26e-03  2.92e-01  
  9  +4.8592e-01  +9.5641e-01  4.70e-01  3.12e-04  5.40e-02  1.86e-04  8.83e-04  4.44e-01  
 10  +4.7909e-01  +8.6510e-01  3.86e-01  2.59e-04  4.46e-02  9.46e-05  7.56e-04  3.85e-01  
 11  +4.5849e-01  +7.0723e-01  2.49e-01  1.37e-04  2.34e-02  4.89e-05  4.28e-04  5.70e-01  
 12  +4.5034e-01  +6.5887e-01  2.09e-01  1.11e-04  1.90e-02  3.65e-05  3.61e-04  2.53e-01  
 13  +4.3459e-01  +5.6693e-01  1.32e-01  6.70e-05  1.14e-02  1.57e-05  2.35e-04  6.22e-01  
 14  +4.2167e-01  +4.9851e-01  7.68e-02  3.71e-05  6.31e-03  8.31e-06  1.39e-04  5.02e-01  
 15  +4.1348e-01  +4.5696e-01  4.35e-02  2.03e-05  3.45e-03  4.50e-06  8.01e-05  5.29e-01  
 16  +4.0866e-01  +4.3247e-01  2.38e-02  1.09e-05  1.85e-03  2.33e-06  4.44e-05  7.04e-01  
 17  +4.0819e-01  +4.3015e-01  2.20e-02  9.96e-06  1.70e-03  2.14e-06  4.08e-05  1.97e-01  
 18  +4.0476e-01  +4.1406e-01  9.31e-03  4.16e-06  7.10e-04  8.40e-07  1.76e-05  9.90e-01  
 19  +4.0270e-01  +4.0551e-01  2.81e-03  1.24e-06  2.13e-04  2.51e-07  5.42e-06  7.17e-01  
 20  +4.0184e-01  +4.0196e-01  1.20e-04  5.30e-08  9.08e-06  1.02e-08  2.35e-07  9.90e-01  
 21  +4.0180e-01  +4.0180e-01  1.21e-06  5.31e-10  9.10e-08  1.02e-10  2.35e-09  9.90e-01  
 22  +4.0180e-01  +4.0180e-01  1.21e-08  5.32e-12  9.12e-10  1.02e-12  2.36e-11  9.90e-01  
 23  +4.0180e-01  +4.0180e-01  1.24e-10  5.43e-14  9.33e-12  1.05e-14  2.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.1546ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:13 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:13 PM: Optimal value: 4.018e-01
(CVXPY) Sep 20 07:59:13 PM: Compilation took 4.560e-02 seconds
(CVXPY) Sep 20 07:59:13 PM: Solver (including time spent in interface) took 1.633e-01 seconds
Iteration: 30, Objective: 0.4018
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:13 PM: Your problem has 2813 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:13 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:13 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:13 PM: Finished problem compilation (took 4.490e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2813
  constraints   = 5313
  nnz(P)        = 0
  nnz(A)        = 53155
  cones (total) = 1
    : Nonnegative = 1,  numel = 5313

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7714e-01  +5.4354e+02  5.43e+02  4.36e-01  5.34e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2921e-01  +5.9110e+01  5.86e+01  1.59e-01  2.44e+01  1.68e-02  2.65e-01  9.65e-01  
  3  +5.0794e-01  +1.5253e+01  1.47e+01  1.01e-01  1.58e+01  4.72e-05  2.37e-01  3.68e-01  
  4  +5.0079e-01  +1.5948e+00  1.09e+00  1.10e-02  1.82e+00  7.86e-06  1.13e-01  7.91e-01  
  5  +5.0066e-01  +1.6544e+00  1.15e+00  1.03e-02  1.73e+00  2.30e-05  5.09e-02  7.60e-01  
  6  +4.9935e-01  +1.1364e+00  6.37e-01  1.72e-03  2.98e-01  9.12e-05  4.95e-03  9.19e-01  
  7  +4.9532e-01  +1.0657e+00  5.70e-01  5.37e-04  9.34e-02  2.46e-04  1.48e-03  7.17e-01  
  8  +4.8990e-01  +9.9288e-01  5.03e-01  3.88e-04  6.74e-02  2.23e-04  1.08e-03  3.60e-01  
  9  +4.8351e-01  +9.2816e-01  4.45e-01  2.89e-04  5.01e-02  1.89e-04  8.24e-04  3.59e-01  
 10  +4.7528e-01  +8.3173e-01  3.56e-01  2.38e-04  4.10e-02  6.80e-05  7.07e-04  4.94e-01  
 11  +4.5036e-01  +6.5712e-01  2.07e-01  1.10e-04  1.88e-02  3.48e-05  3.56e-04  5.81e-01  
 12  +4.3592e-01  +5.7802e-01  1.42e-01  7.24e-05  1.23e-02  1.71e-05  2.50e-04  5.77e-01  
 13  +4.2164e-01  +5.0092e-01  7.93e-02  3.87e-05  6.58e-03  8.77e-06  1.43e-04  4.72e-01  
 14  +4.1581e-01  +4.7066e-01  5.49e-02  2.61e-05  4.43e-03  5.90e-06  9.95e-05  4.15e-01  
 15  +4.0861e-01  +4.3497e-01  2.64e-02  1.21e-05  2.06e-03  2.74e-06  4.83e-05  6.17e-01  
 16  +4.0721e-01  +4.2847e-01  2.13e-02  9.63e-06  1.64e-03  2.20e-06  3.87e-05  2.58e-01  
 17  +4.0510e-01  +4.1837e-01  1.33e-02  5.88e-06  9.98e-04  1.31e-06  2.42e-05  6.35e-01  
 18  +4.0209e-01  +4.0515e-01  3.06e-03  1.33e-06  2.26e-04  2.81e-07  5.65e-06  9.32e-01  
 19  +4.0114e-01  +4.0124e-01  1.08e-04  4.65e-08  7.90e-06  9.73e-09  2.00e-07  9.68e-01  
 20  +4.0110e-01  +4.0110e-01  1.08e-06  4.67e-10  7.94e-08  9.78e-11  2.01e-09  9.90e-01  
 21  +4.0110e-01  +4.0110e-01  1.08e-08  4.67e-12  7.94e-10  9.78e-13  2.01e-11  9.90e-01  
 22  +4.0110e-01  +4.0110e-01  1.10e-10  4.76e-14  8.10e-12  1.00e-14  2.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 185.411ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:14 PM: Optimal value: 4.011e-01
(CVXPY) Sep 20 07:59:14 PM: Compilation took 4.490e-02 seconds
(CVXPY) Sep 20 07:59:14 PM: Solver (including time spent in interface) took 1.953e-01 seconds
Iteration: 31, Objective: 0.4011
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:14 PM: Your problem has 2823 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:14 PM: Finished problem compilation (took 4.469e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2823
  constraints   = 5323
  nnz(P)        = 0
  nnz(A)        = 53350
  cones (total) = 1
    : Nonnegative = 1,  numel = 5323

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7705e-01  +5.4347e+02  5.43e+02  4.36e-01  5.33e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2917e-01  +5.9056e+01  5.85e+01  1.59e-01  2.43e+01  1.68e-02  2.64e-01  9.66e-01  
  3  +5.0793e-01  +1.5235e+01  1.47e+01  1.01e-01  1.57e+01  4.73e-05  2.37e-01  3.69e-01  
  4  +5.0080e-01  +1.6184e+00  1.12e+00  1.12e-02  1.86e+00  7.96e-06  1.14e-01  7.83e-01  
  5  +5.0067e-01  +1.6592e+00  1.16e+00  1.06e-02  1.77e+00  2.08e-05  5.58e-02  7.06e-01  
  6  +4.9961e-01  +1.1892e+00  6.90e-01  2.35e-03  4.06e-01  7.04e-05  6.94e-03  8.93e-01  
  7  +4.9560e-01  +1.1129e+00  6.17e-01  6.01e-04  1.04e-01  2.39e-04  1.66e-03  7.69e-01  
  8  +4.9169e-01  +1.0469e+00  5.55e-01  4.75e-04  8.23e-02  2.13e-04  1.32e-03  2.78e-01  
  9  +4.8626e-01  +9.7643e-01  4.90e-01  3.42e-04  5.91e-02  1.74e-04  9.66e-04  4.38e-01  
 10  +4.7582e-01  +8.4819e-01  3.72e-01  2.38e-04  4.09e-02  7.52e-05  6.99e-04  5.75e-01  
 11  +4.5550e-01  +6.9887e-01  2.43e-01  1.35e-04  2.31e-02  3.94e-05  4.29e-04  4.96e-01  
 12  +4.4601e-01  +6.4284e-01  1.97e-01  1.05e-04  1.79e-02  2.99e-05  3.46e-04  2.38e-01  
 13  +4.3567e-01  +5.8019e-01  1.45e-01  7.42e-05  1.26e-02  1.29e-05  2.57e-04  8.39e-01  
 14  +4.1882e-01  +4.9009e-01  7.13e-02  3.45e-05  5.84e-03  5.87e-06  1.29e-04  5.44e-01  
 15  +4.1165e-01  +4.5418e-01  4.25e-02  1.98e-05  3.36e-03  3.56e-06  7.73e-05  5.19e-01  
 16  +4.0566e-01  +4.2554e-01  1.99e-02  8.93e-06  1.51e-03  1.71e-06  3.65e-05  6.58e-01  
 17  +4.0399e-01  +4.1771e-01  1.37e-02  6.11e-06  1.04e-03  1.19e-06  2.53e-05  4.92e-01  
 18  +4.0078e-01  +4.0369e-01  2.91e-03  1.27e-06  2.16e-04  2.49e-07  5.46e-06  8.13e-01  
 19  +3.9993e-01  +4.0001e-01  8.63e-05  3.75e-08  6.37e-06  7.29e-09  1.63e-07  9.73e-01  
 20  +3.9990e-01  +3.9990e-01  8.65e-07  3.76e-10  6.38e-08  7.31e-11  1.64e-09  9.90e-01  
 21  +3.9990e-01  +3.9990e-01  8.65e-09  3.76e-12  6.38e-10  7.31e-13  1.64e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 171.647ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:14 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:14 PM: Optimal value: 3.999e-01
(CVXPY) Sep 20 07:59:14 PM: Compilation took 4.469e-02 seconds
(CVXPY) Sep 20 07:59:14 PM: Solver (including time spent in interface) took 1.832e-01 seconds
Iteration: 32, Objective: 0.3999
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:14 PM: Your problem has 2827 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:14 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:14 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:14 PM: Finished problem compilation (took 4.073e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2827
  constraints   = 5327
  nnz(P)        = 0
  nnz(A)        = 53478
  cones (total) = 1
    : Nonnegative = 1,  numel = 5327

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7703e-01  +5.4345e+02  5.43e+02  4.36e-01  5.33e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2915e-01  +5.9043e+01  5.85e+01  1.59e-01  2.43e+01  1.68e-02  2.64e-01  9.66e-01  
  3  +5.0793e-01  +1.5231e+01  1.47e+01  1.01e-01  1.57e+01  4.73e-05  2.37e-01  3.70e-01  
  4  +5.0080e-01  +1.6158e+00  1.12e+00  1.12e-02  1.85e+00  7.96e-06  1.14e-01  7.84e-01  
  5  +5.0068e-01  +1.6648e+00  1.16e+00  1.07e-02  1.79e+00  2.06e-05  5.63e-02  6.97e-01  
  6  +4.9961e-01  +1.1815e+00  6.82e-01  2.32e-03  4.00e-01  7.01e-05  6.85e-03  8.97e-01  
  7  +4.9560e-01  +1.1067e+00  6.11e-01  5.91e-04  1.03e-01  2.40e-04  1.63e-03  7.70e-01  
  8  +4.9143e-01  +1.0381e+00  5.47e-01  4.62e-04  8.01e-02  2.11e-04  1.29e-03  2.90e-01  
  9  +4.8654e-01  +9.7420e-01  4.88e-01  3.45e-04  5.96e-02  1.68e-04  9.74e-04  4.24e-01  
 10  +4.7442e-01  +8.3177e-01  3.57e-01  2.23e-04  3.84e-02  6.53e-05  6.59e-04  6.48e-01  
 11  +4.5338e-01  +6.8281e-01  2.29e-01  1.26e-04  2.16e-02  3.29e-05  4.04e-04  5.01e-01  
 12  +4.4528e-01  +6.3642e-01  1.91e-01  1.02e-04  1.73e-02  2.56e-05  3.36e-04  2.41e-01  
 13  +4.3056e-01  +5.5117e-01  1.21e-01  6.07e-05  1.03e-02  9.58e-06  2.15e-04  9.31e-01  
 14  +4.1733e-01  +4.8205e-01  6.47e-02  3.10e-05  5.25e-03  5.07e-06  1.17e-04  5.64e-01  
 15  +4.1234e-01  +4.5734e-01  4.50e-02  2.09e-05  3.55e-03  3.64e-06  8.13e-05  4.34e-01  
 16  +4.0579e-01  +4.2641e-01  2.06e-02  9.29e-06  1.57e-03  1.69e-06  3.77e-05  6.07e-01  
 17  +4.0386e-01  +4.1735e-01  1.35e-02  6.01e-06  1.02e-03  1.13e-06  2.48e-05  4.92e-01  
 18  +4.0045e-01  +4.0225e-01  1.80e-03  7.89e-07  1.34e-04  1.48e-07  3.38e-06  8.84e-01  
 19  +3.9995e-01  +4.0012e-01  1.65e-04  7.18e-08  1.22e-05  1.36e-08  3.12e-07  9.31e-01  
 20  +3.9990e-01  +3.9990e-01  1.87e-06  8.14e-10  1.38e-07  1.54e-10  3.55e-09  9.89e-01  
 21  +3.9990e-01  +3.9990e-01  1.88e-08  8.19e-12  1.39e-09  1.55e-12  3.57e-11  9.90e-01  
 22  +3.9990e-01  +3.9990e-01  1.93e-10  8.39e-14  1.42e-11  1.62e-14  3.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 167.5316ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:15 PM: Optimal value: 3.999e-01
(CVXPY) Sep 20 07:59:15 PM: Compilation took 4.073e-02 seconds
(CVXPY) Sep 20 07:59:15 PM: Solver (including time spent in interface) took 1.774e-01 seconds
Iteration: 33, Objective: 0.3999
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:15 PM: Your problem has 2837 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:15 PM: Finished problem compilation (took 3.131e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2837
  constraints   = 5337
  nnz(P)        = 0
  nnz(A)        = 53761
  cones (total) = 1
    : Nonnegative = 1,  numel = 5337

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7701e-01  +5.4346e+02  5.43e+02  4.36e-01  5.32e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2913e-01  +5.9012e+01  5.85e+01  1.59e-01  2.42e+01  1.68e-02  2.64e-01  9.66e-01  
  3  +5.0792e-01  +1.5221e+01  1.47e+01  1.01e-01  1.57e+01  4.73e-05  2.36e-01  3.71e-01  
  4  +5.0080e-01  +1.6200e+00  1.12e+00  1.13e-02  1.86e+00  7.98e-06  1.14e-01  7.83e-01  
  5  +5.0068e-01  +1.6690e+00  1.17e+00  1.08e-02  1.79e+00  2.04e-05  5.67e-02  6.92e-01  
  6  +4.9961e-01  +1.1793e+00  6.80e-01  2.32e-03  4.00e-01  6.94e-05  6.86e-03  8.98e-01  
  7  +4.9557e-01  +1.1053e+00  6.10e-01  5.87e-04  1.02e-01  2.39e-04  1.62e-03  7.72e-01  
  8  +4.9106e-01  +1.0338e+00  5.43e-01  4.50e-04  7.79e-02  2.11e-04  1.26e-03  3.11e-01  
  9  +4.8623e-01  +9.7294e-01  4.87e-01  3.41e-04  5.89e-02  1.70e-04  9.65e-04  4.06e-01  
 10  +4.7716e-01  +8.6329e-01  3.86e-01  2.55e-04  4.38e-02  8.40e-05  7.47e-04  4.91e-01  
 11  +4.5541e-01  +7.0043e-01  2.45e-01  1.36e-04  2.32e-02  4.14e-05  4.31e-04  5.55e-01  
 12  +4.4514e-01  +6.3985e-01  1.95e-01  1.03e-04  1.76e-02  3.07e-05  3.43e-04  2.52e-01  
 13  +4.3748e-01  +5.9352e-01  1.56e-01  8.10e-05  1.38e-02  1.63e-05  2.78e-04  6.92e-01  
 14  +4.2166e-01  +5.0756e-01  8.59e-02  4.23e-05  7.16e-03  8.29e-06  1.57e-04  4.62e-01  
 15  +4.1623e-01  +4.7938e-01  6.31e-02  3.03e-05  5.13e-03  6.04e-06  1.15e-04  3.41e-01  
 16  +4.1153e-01  +4.5559e-01  4.41e-02  2.06e-05  3.48e-03  4.19e-06  8.05e-05  4.29e-01  
 17  +4.0523e-01  +4.2499e-01  1.98e-02  8.94e-06  1.51e-03  1.85e-06  3.67e-05  6.59e-01  
 18  +4.0346e-01  +4.1652e-01  1.31e-02  5.85e-06  9.90e-04  1.20e-06  2.44e-05  5.50e-01  
 19  +4.0049e-01  +4.0344e-01  2.95e-03  1.30e-06  2.20e-04  2.66e-07  5.62e-06  7.98e-01  
 20  +3.9964e-01  +3.9977e-01  1.33e-04  5.82e-08  9.87e-06  1.18e-08  2.55e-07  9.61e-01  
 21  +3.9960e-01  +3.9960e-01  1.35e-06  5.89e-10  9.99e-08  1.19e-10  2.59e-09  9.90e-01  
 22  +3.9960e-01  +3.9960e-01  1.35e-08  5.90e-12  1.00e-09  1.19e-12  2.59e-11  9.90e-01  
 23  +3.9960e-01  +3.9960e-01  1.36e-10  5.95e-14  1.01e-11  1.21e-14  2.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.7915ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:15 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:15 PM: Optimal value: 3.996e-01
(CVXPY) Sep 20 07:59:15 PM: Compilation took 3.131e-02 seconds
(CVXPY) Sep 20 07:59:15 PM: Solver (including time spent in interface) took 2.232e-01 seconds
Iteration: 34, Objective: 0.3996
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:15 PM: Your problem has 2847 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:15 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:15 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:15 PM: Finished problem compilation (took 4.962e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2847
  constraints   = 5347
  nnz(P)        = 0
  nnz(A)        = 54030
  cones (total) = 1
    : Nonnegative = 1,  numel = 5347

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7696e-01  +5.4336e+02  5.43e+02  4.36e-01  5.31e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2910e-01  +5.8974e+01  5.84e+01  1.59e-01  2.41e+01  1.68e-02  2.64e-01  9.67e-01  
  3  +5.0791e-01  +1.5212e+01  1.47e+01  1.01e-01  1.56e+01  4.73e-05  2.36e-01  3.71e-01  
  4  +5.0080e-01  +1.6173e+00  1.12e+00  1.12e-02  1.85e+00  7.99e-06  1.13e-01  7.84e-01  
  5  +5.0068e-01  +1.6706e+00  1.17e+00  1.08e-02  1.79e+00  2.05e-05  5.61e-02  6.95e-01  
  6  +4.9956e-01  +1.1718e+00  6.72e-01  2.20e-03  3.80e-01  7.21e-05  6.47e-03  9.03e-01  
  7  +4.9557e-01  +1.0987e+00  6.03e-01  5.87e-04  1.02e-01  2.35e-04  1.62e-03  7.59e-01  
  8  +4.9113e-01  +1.0285e+00  5.37e-01  4.50e-04  7.79e-02  2.07e-04  1.26e-03  3.15e-01  
  9  +4.8640e-01  +9.7125e-01  4.85e-01  3.38e-04  5.84e-02  1.68e-04  9.55e-04  4.22e-01  
 10  +4.7895e-01  +8.7942e-01  4.00e-01  2.71e-04  4.67e-02  9.33e-05  7.91e-04  4.04e-01  
 11  +4.5494e-01  +6.9594e-01  2.41e-01  1.31e-04  2.24e-02  4.50e-05  4.15e-04  6.02e-01  
 12  +4.4625e-01  +6.4578e-01  2.00e-01  1.05e-04  1.79e-02  3.49e-05  3.45e-04  2.19e-01  
 13  +4.3689e-01  +5.9087e-01  1.54e-01  7.95e-05  1.35e-02  1.67e-05  2.73e-04  7.09e-01  
 14  +4.2141e-01  +5.0657e-01  8.52e-02  4.19e-05  7.09e-03  8.51e-06  1.55e-04  4.59e-01  
 15  +4.1622e-01  +4.7955e-01  6.33e-02  3.04e-05  5.15e-03  6.26e-06  1.16e-04  3.28e-01  
 16  +4.1171e-01  +4.5661e-01  4.49e-02  2.10e-05  3.55e-03  4.39e-06  8.19e-05  4.20e-01  
 17  +4.0533e-01  +4.2542e-01  2.01e-02  9.11e-06  1.54e-03  1.92e-06  3.72e-05  6.77e-01  
 18  +4.0346e-01  +4.1655e-01  1.31e-02  5.87e-06  9.93e-04  1.22e-06  2.45e-05  5.40e-01  
 19  +4.0040e-01  +4.0304e-01  2.64e-03  1.17e-06  1.97e-04  2.41e-07  5.04e-06  8.23e-01  
 20  +3.9963e-01  +3.9974e-01  1.04e-04  4.56e-08  7.73e-06  9.29e-09  2.00e-07  9.67e-01  
 21  +3.9960e-01  +3.9960e-01  1.05e-06  4.60e-10  7.79e-08  9.36e-11  2.02e-09  9.90e-01  
 22  +3.9960e-01  +3.9960e-01  1.05e-08  4.60e-12  7.79e-10  9.36e-13  2.02e-11  9.90e-01  
 23  +3.9960e-01  +3.9960e-01  1.06e-10  4.64e-14  7.86e-12  9.50e-15  2.05e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.5967ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:16 PM: Optimal value: 3.996e-01
(CVXPY) Sep 20 07:59:16 PM: Compilation took 4.962e-02 seconds
(CVXPY) Sep 20 07:59:16 PM: Solver (including time spent in interface) took 2.287e-01 seconds
Iteration: 35, Objective: 0.3996
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:16 PM: Your problem has 2857 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:16 PM: Finished problem compilation (took 5.086e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2857
  constraints   = 5357
  nnz(P)        = 0
  nnz(A)        = 54249
  cones (total) = 1
    : Nonnegative = 1,  numel = 5357

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7698e-01  +5.4335e+02  5.43e+02  4.37e-01  5.30e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2910e-01  +5.8972e+01  5.84e+01  1.59e-01  2.41e+01  1.68e-02  2.64e-01  9.67e-01  
  3  +5.0791e-01  +1.5208e+01  1.47e+01  1.01e-01  1.56e+01  4.73e-05  2.36e-01  3.72e-01  
  4  +5.0080e-01  +1.6183e+00  1.12e+00  1.13e-02  1.85e+00  7.99e-06  1.13e-01  7.84e-01  
  5  +5.0068e-01  +1.6713e+00  1.17e+00  1.07e-02  1.79e+00  2.06e-05  5.58e-02  6.99e-01  
  6  +4.9950e-01  +1.1560e+00  6.57e-01  2.06e-03  3.56e-01  7.51e-05  6.05e-03  9.10e-01  
  7  +4.9547e-01  +1.0848e+00  5.89e-01  5.71e-04  9.89e-02  2.35e-04  1.58e-03  7.50e-01  
  8  +4.9116e-01  +1.0215e+00  5.30e-01  4.41e-04  7.63e-02  2.11e-04  1.23e-03  3.05e-01  
  9  +4.8618e-01  +9.6683e-01  4.81e-01  3.31e-04  5.71e-02  1.79e-04  9.37e-04  4.00e-01  
 10  +4.7843e-01  +8.7405e-01  3.96e-01  2.66e-04  4.57e-02  9.80e-05  7.77e-04  3.99e-01  
 11  +4.5502e-01  +6.9737e-01  2.42e-01  1.32e-04  2.26e-02  4.81e-05  4.19e-04  5.81e-01  
 12  +4.4641e-01  +6.4748e-01  2.01e-01  1.06e-04  1.81e-02  3.72e-05  3.49e-04  2.19e-01  
 13  +4.3657e-01  +5.8938e-01  1.53e-01  7.89e-05  1.34e-02  1.61e-05  2.72e-04  7.48e-01  
 14  +4.2005e-01  +4.9959e-01  7.95e-02  3.88e-05  6.57e-03  7.64e-06  1.45e-04  5.15e-01  
 15  +4.1530e-01  +4.7532e-01  6.00e-02  2.84e-05  4.81e-03  5.75e-06  1.08e-04  3.83e-01  
 16  +4.0995e-01  +4.4724e-01  3.73e-02  1.71e-05  2.89e-03  3.51e-06  6.72e-05  8.03e-01  
 17  +4.0682e-01  +4.3277e-01  2.59e-02  1.17e-05  1.98e-03  2.45e-06  4.71e-05  4.63e-01  
 18  +4.0298e-01  +4.1547e-01  1.25e-02  5.55e-06  9.39e-04  1.16e-06  2.31e-05  6.85e-01  
 19  +3.9978e-01  +4.0167e-01  1.89e-03  8.32e-07  1.41e-04  1.72e-07  3.58e-06  8.53e-01  
 20  +3.9921e-01  +3.9923e-01  2.54e-05  1.11e-08  1.89e-06  2.27e-09  4.83e-08  9.87e-01  
 21  +3.9920e-01  +3.9920e-01  2.54e-07  1.11e-10  1.89e-08  2.27e-11  4.84e-10  9.90e-01  
 22  +3.9920e-01  +3.9920e-01  2.55e-09  1.12e-12  1.89e-10  2.28e-13  4.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 211.2434ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:16 PM: Optimal value: 3.992e-01
(CVXPY) Sep 20 07:59:16 PM: Compilation took 5.086e-02 seconds
(CVXPY) Sep 20 07:59:16 PM: Solver (including time spent in interface) took 2.231e-01 seconds
Iteration: 36, Objective: 0.3992
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:16 PM: Your problem has 2864 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:16 PM: Finished problem compilation (took 5.157e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2864
  constraints   = 5364
  nnz(P)        = 0
  nnz(A)        = 54455
  cones (total) = 1
    : Nonnegative = 1,  numel = 5364

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7691e-01  +5.4340e+02  5.43e+02  4.37e-01  5.30e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2903e-01  +5.8907e+01  5.84e+01  1.59e-01  2.40e+01  1.68e-02  2.63e-01  9.68e-01  
  3  +5.0790e-01  +1.5193e+01  1.47e+01  1.01e-01  1.56e+01  4.74e-05  2.35e-01  3.74e-01  
  4  +5.0080e-01  +1.6227e+00  1.12e+00  1.13e-02  1.86e+00  8.02e-06  1.13e-01  7.83e-01  
  5  +5.0068e-01  +1.6911e+00  1.19e+00  1.08e-02  1.80e+00  2.15e-05  5.41e-02  7.16e-01  
  6  +4.9943e-01  +1.1747e+00  6.75e-01  1.99e-03  3.43e-01  8.05e-05  5.77e-03  9.10e-01  
  7  +4.9528e-01  +1.0980e+00  6.03e-01  5.79e-04  1.00e-01  2.34e-04  1.60e-03  7.35e-01  
  8  +4.9102e-01  +1.0353e+00  5.44e-01  4.50e-04  7.78e-02  2.13e-04  1.26e-03  2.93e-01  
  9  +4.8552e-01  +9.7594e-01  4.90e-01  3.32e-04  5.72e-02  1.87e-04  9.39e-04  3.92e-01  
 10  +4.7760e-01  +8.7232e-01  3.95e-01  2.70e-04  4.63e-02  8.62e-05  7.93e-04  4.25e-01  
 11  +4.5419e-01  +6.9736e-01  2.43e-01  1.33e-04  2.27e-02  4.40e-05  4.24e-04  5.88e-01  
 12  +4.4558e-01  +6.4717e-01  2.02e-01  1.07e-04  1.81e-02  3.42e-05  3.52e-04  2.19e-01  
 13  +4.3621e-01  +5.9154e-01  1.55e-01  8.02e-05  1.36e-02  1.61e-05  2.77e-04  7.39e-01  
 14  +4.1916e-01  +4.9866e-01  7.95e-02  3.88e-05  6.56e-03  7.50e-06  1.45e-04  5.07e-01  
 15  +4.1364e-01  +4.7035e-01  5.67e-02  2.68e-05  4.53e-03  5.35e-06  1.03e-04  4.12e-01  
 16  +4.0856e-01  +4.4248e-01  3.39e-02  1.55e-05  2.62e-03  3.15e-06  6.13e-05  9.90e-01  
 17  +4.0526e-01  +4.2781e-01  2.25e-02  1.02e-05  1.72e-03  2.10e-06  4.12e-05  4.56e-01  
 18  +4.0080e-01  +4.0811e-01  7.31e-03  3.24e-06  5.49e-04  6.68e-07  1.37e-05  8.81e-01  
 19  +3.9866e-01  +3.9915e-01  4.91e-04  2.16e-07  3.65e-05  4.25e-08  9.38e-07  9.81e-01  
 20  +3.9850e-01  +3.9851e-01  5.04e-06  2.22e-09  3.75e-07  4.35e-10  9.66e-09  9.90e-01  
 21  +3.9850e-01  +3.9850e-01  5.04e-08  2.22e-11  3.75e-09  4.36e-12  9.66e-11  9.90e-01  
 22  +3.9850e-01  +3.9850e-01  5.05e-10  2.22e-13  3.76e-11  4.38e-14  9.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 204.0151ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:16 PM: Optimal value: 3.985e-01
(CVXPY) Sep 20 07:59:16 PM: Compilation took 5.157e-02 seconds
(CVXPY) Sep 20 07:59:16 PM: Solver (including time spent in interface) took 2.140e-01 seconds
Iteration: 37, Objective: 0.3985
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:59:17 PM: Your problem has 2865 variables, 2500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:59:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:59:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:59:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:59:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:59:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:59:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:59:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:59:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:59:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:59:17 PM: Finished problem compilation (took 4.643e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2865
  constraints   = 5365
  nnz(P)        = 0
  nnz(A)        = 54471
  cones (total) = 1
    : Nonnegative = 1,  numel = 5365

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.81e-01  8.39e+01  1.00e+00  1.00e+00   ------   
  1  +5.7691e-01  +5.4339e+02  5.43e+02  4.37e-01  5.30e+01  3.79e-03  5.74e-01  5.86e-01  
  2  +5.2903e-01  +5.8905e+01  5.84e+01  1.59e-01  2.40e+01  1.68e-02  2.63e-01  9.68e-01  
  3  +5.0790e-01  +1.5193e+01  1.47e+01  1.01e-01  1.56e+01  4.74e-05  2.35e-01  3.74e-01  
  4  +5.0080e-01  +1.6225e+00  1.12e+00  1.13e-02  1.86e+00  8.02e-06  1.13e-01  7.83e-01  
  5  +5.0068e-01  +1.6909e+00  1.19e+00  1.08e-02  1.80e+00  2.15e-05  5.42e-02  7.15e-01  
  6  +4.9943e-01  +1.1754e+00  6.76e-01  2.00e-03  3.44e-01  8.02e-05  5.80e-03  9.10e-01  
  7  +4.9529e-01  +1.0987e+00  6.03e-01  5.80e-04  1.00e-01  2.34e-04  1.60e-03  7.36e-01  
  8  +4.9102e-01  +1.0357e+00  5.45e-01  4.51e-04  7.79e-02  2.13e-04  1.26e-03  2.93e-01  
  9  +4.8554e-01  +9.7620e-01  4.91e-01  3.32e-04  5.72e-02  1.86e-04  9.40e-04  3.92e-01  
 10  +4.7763e-01  +8.7271e-01  3.95e-01  2.70e-04  4.64e-02  8.61e-05  7.94e-04  4.24e-01  
 11  +4.5430e-01  +6.9821e-01  2.44e-01  1.34e-04  2.28e-02  4.40e-05  4.25e-04  5.87e-01  
 12  +4.4562e-01  +6.4750e-01  2.02e-01  1.07e-04  1.82e-02  3.42e-05  3.52e-04  2.20e-01  
 13  +4.3633e-01  +5.9222e-01  1.56e-01  8.06e-05  1.37e-02  1.61e-05  2.78e-04  7.40e-01  
 14  +4.1917e-01  +4.9872e-01  7.96e-02  3.88e-05  6.56e-03  7.48e-06  1.45e-04  5.08e-01  
 15  +4.1357e-01  +4.7002e-01  5.64e-02  2.67e-05  4.50e-03  5.31e-06  1.03e-04  4.14e-01  
 16  +4.0858e-01  +4.4260e-01  3.40e-02  1.56e-05  2.63e-03  3.16e-06  6.15e-05  9.90e-01  
 17  +4.0547e-01  +4.2869e-01  2.32e-02  1.05e-05  1.77e-03  2.17e-06  4.24e-05  4.67e-01  
 18  +4.0090e-01  +4.0857e-01  7.67e-03  3.41e-06  5.76e-04  7.04e-07  1.44e-05  8.39e-01  
 19  +3.9868e-01  +3.9921e-01  5.29e-04  2.33e-07  3.94e-05  4.55e-08  1.01e-06  9.90e-01  
 20  +3.9850e-01  +3.9851e-01  5.52e-06  2.43e-09  4.11e-07  4.74e-10  1.06e-08  9.90e-01  
 21  +3.9850e-01  +3.9850e-01  5.52e-08  2.43e-11  4.11e-09  4.74e-12  1.06e-10  9.90e-01  
 22  +3.9850e-01  +3.9850e-01  5.53e-10  2.43e-13  4.12e-11  4.77e-14  1.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 228.0864ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:59:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:59:17 PM: Optimal value: 3.985e-01
(CVXPY) Sep 20 07:59:17 PM: Compilation took 4.643e-02 seconds
(CVXPY) Sep 20 07:59:17 PM: Solver (including time spent in interface) took 2.375e-01 seconds
FULL MODEL:
  Accruacy: 0.531
  Our objective: 0.062000000000000055

IF 
    (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0048)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)            <-- (term's our objective: 0.0068)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x2 = 1 AND x5 = 1 AND x6 = 0)                                                                   <-- (term's our objective: 0.0196)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 24.287566423416138
Best over terms:
  Our final objective: 0.01959999999999995
    Its accruacy: 0.5098
    Its hamming distance: 10
  Shortest hamming distance: 5
    Its our objective: 0.004800000000000006
  Highest accruacy: 0.5098
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

