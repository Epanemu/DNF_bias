Command:
python test_script.py -s constant_subclass -d 7 -n 100 --seed 21 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 7.

Computed total variation: 0.6000000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:44 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Finished problem compilation (took 6.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9730e-01  +5.1074e+01  5.06e+01  8.68e-01  9.53e+00  1.00e+00  1.04e+00   ------   
  1  +5.8343e-01  +1.0942e+01  1.04e+01  3.55e-01  5.57e+00  3.84e-03  5.66e-01  6.12e-01  
  2  +5.2060e-01  +1.6201e+00  1.10e+00  8.12e-02  1.56e+00  1.51e-02  2.10e-01  9.90e-01  
  3  +4.9719e-01  +8.0734e-01  3.10e-01  1.91e-02  3.80e-01  7.34e-03  6.12e-02  7.99e-01  
  4  +4.7435e-01  +7.0468e-01  2.30e-01  7.41e-03  1.51e-01  8.45e-03  2.54e-02  6.31e-01  
  5  +4.5483e-01  +5.2317e-01  6.83e-02  2.27e-03  4.56e-02  5.13e-04  8.77e-03  8.07e-01  
  6  +4.4618e-01  +4.6718e-01  2.10e-02  6.30e-04  1.26e-02  1.54e-04  2.49e-03  7.67e-01  
  7  +4.4263e-01  +4.5247e-01  9.84e-03  2.48e-04  5.00e-03  7.33e-05  1.01e-03  6.66e-01  
  8  +4.4033e-01  +4.4111e-01  7.81e-04  1.94e-05  3.90e-04  3.29e-06  8.06e-05  9.90e-01  
  9  +4.4010e-01  +4.4011e-01  7.99e-06  1.97e-07  3.97e-06  3.35e-08  8.22e-07  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  7.99e-08  1.97e-09  3.97e-08  3.35e-10  8.22e-09  9.90e-01  
 11  +4.4010e-01  +4.4010e-01  7.99e-10  1.97e-11  3.97e-10  3.35e-12  8.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 572.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:44 PM: Optimal value: 4.401e-01
(CVXPY) Sep 20 07:38:44 PM: Compilation took 6.513e-03 seconds
(CVXPY) Sep 20 07:38:44 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:44 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Finished problem compilation (took 4.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 603
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9514e-01  +5.1330e+01  5.08e+01  8.74e-01  9.51e+00  1.00e+00  1.05e+00   ------   
  1  +5.6836e-01  +1.0991e+01  1.04e+01  3.64e-01  5.44e+00  3.84e-03  5.70e-01  6.12e-01  
  2  +5.1064e-01  +1.8544e+00  1.34e+00  8.91e-02  1.71e+00  1.62e-02  2.21e-01  9.42e-01  
  3  +4.7456e-01  +9.8796e-01  5.13e-01  2.18e-02  4.42e-01  1.14e-02  6.42e-02  7.76e-01  
  4  +4.2857e-01  +7.4621e-01  3.18e-01  8.46e-03  1.72e-01  8.87e-03  2.73e-02  6.26e-01  
  5  +3.8065e-01  +4.5768e-01  7.70e-02  1.87e-03  3.74e-02  9.09e-04  6.83e-03  8.26e-01  
  6  +3.7236e-01  +4.3128e-01  5.89e-02  1.16e-03  2.36e-02  7.15e-04  4.31e-03  5.37e-01  
  7  +3.5610e-01  +3.7058e-01  1.45e-02  2.91e-04  5.89e-03  3.08e-05  1.15e-03  9.90e-01  
  8  +3.5060e-01  +3.5139e-01  7.91e-04  1.51e-05  3.07e-04  1.66e-06  6.19e-05  9.48e-01  
  9  +3.5031e-01  +3.5032e-01  1.58e-05  3.03e-07  6.12e-06  2.80e-08  1.26e-06  9.80e-01  
 10  +3.5030e-01  +3.5030e-01  1.59e-07  3.06e-09  6.16e-08  2.82e-10  1.27e-08  9.90e-01  
 11  +3.5030e-01  +3.5030e-01  1.59e-09  3.06e-11  6.16e-10  2.82e-12  1.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 648.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:44 PM: Optimal value: 3.503e-01
(CVXPY) Sep 20 07:38:44 PM: Compilation took 4.002e-03 seconds
(CVXPY) Sep 20 07:38:44 PM: Solver (including time spent in interface) took 1.001e-03 seconds
Iteration: 2, Objective: 0.3503
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:44 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Finished problem compilation (took 4.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 676
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9277e-01  +5.1665e+01  5.12e+01  8.79e-01  9.41e+00  1.00e+00  1.06e+00   ------   
  1  +5.5166e-01  +1.1155e+01  1.06e+01  3.78e-01  5.37e+00  3.83e-03  5.85e-01  6.04e-01  
  2  +4.9557e-01  +1.9924e+00  1.50e+00  9.35e-02  1.77e+00  1.78e-02  2.33e-01  9.31e-01  
  3  +4.4267e-01  +9.4813e-01  5.05e-01  1.95e-02  3.90e-01  1.13e-02  5.67e-02  8.25e-01  
  4  +4.0174e-01  +8.2163e-01  4.20e-01  1.07e-02  2.13e-01  1.03e-02  3.36e-02  5.29e-01  
  5  +3.4779e-01  +5.0368e-01  1.56e-01  3.61e-03  7.10e-02  2.21e-03  1.29e-02  7.03e-01  
  6  +3.2515e-01  +4.0154e-01  7.64e-02  1.70e-03  3.39e-02  9.91e-04  6.47e-03  5.70e-01  
  7  +3.0507e-01  +3.1735e-01  1.23e-02  2.68e-04  5.34e-03  5.75e-05  1.12e-03  9.76e-01  
  8  +3.0061e-01  +3.0090e-01  2.88e-04  6.27e-06  1.25e-04  1.05e-06  2.71e-05  9.80e-01  
  9  +3.0050e-01  +3.0050e-01  3.64e-06  8.02e-08  1.58e-06  1.09e-08  3.54e-07  9.88e-01  
 10  +3.0050e-01  +3.0050e-01  3.64e-08  8.02e-10  1.58e-08  1.09e-10  3.54e-09  9.90e-01  
 11  +3.0050e-01  +3.0050e-01  3.65e-10  8.03e-12  1.58e-10  1.09e-12  3.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 752.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:44 PM: Optimal value: 3.005e-01
(CVXPY) Sep 20 07:38:44 PM: Compilation took 4.510e-03 seconds
(CVXPY) Sep 20 07:38:44 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Iteration: 3, Objective: 0.3005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:44 PM: Your problem has 95 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Finished problem compilation (took 4.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 145
  nnz(P)        = 0
  nnz(A)        = 728
  cones (total) = 1
    : Nonnegative = 1,  numel = 145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9252e-01  +5.1669e+01  5.12e+01  8.83e-01  9.20e+00  1.00e+00  1.06e+00   ------   
  1  +5.4670e-01  +1.1172e+01  1.06e+01  3.84e-01  5.17e+00  3.85e-03  5.83e-01  6.04e-01  
  2  +4.9228e-01  +2.0721e+00  1.58e+00  9.65e-02  1.78e+00  1.80e-02  2.37e-01  9.14e-01  
  3  +4.4192e-01  +1.0230e+00  5.81e-01  2.30e-02  4.54e-01  1.15e-02  6.54e-02  7.87e-01  
  4  +3.9212e-01  +8.2639e-01  4.34e-01  1.12e-02  2.23e-01  1.00e-02  3.38e-02  5.76e-01  
  5  +3.2690e-01  +4.3391e-01  1.07e-01  2.52e-03  4.97e-02  1.06e-03  8.53e-03  8.19e-01  
  6  +3.1205e-01  +3.7639e-01  6.43e-02  1.47e-03  2.94e-02  6.13e-04  5.07e-03  4.82e-01  
  7  +2.9276e-01  +2.9885e-01  6.09e-03  1.38e-04  2.77e-03  3.32e-05  5.03e-04  9.65e-01  
  8  +2.9086e-01  +2.9150e-01  6.43e-04  1.48e-05  2.94e-04  2.94e-06  5.58e-05  8.92e-01  
  9  +2.9064e-01  +2.9075e-01  1.01e-04  2.36e-06  4.61e-05  4.23e-07  9.61e-06  8.71e-01  
 10  +2.9060e-01  +2.9060e-01  1.98e-06  4.58e-08  8.92e-07  7.82e-09  1.94e-07  9.90e-01  
 11  +2.9060e-01  +2.9060e-01  1.98e-08  4.58e-10  8.92e-09  7.83e-11  1.95e-09  9.90e-01  
 12  +2.9060e-01  +2.9060e-01  1.98e-10  4.58e-12  8.92e-11  7.86e-13  1.95e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 818.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:44 PM: Optimal value: 2.906e-01
(CVXPY) Sep 20 07:38:44 PM: Compilation took 4.004e-03 seconds
(CVXPY) Sep 20 07:38:44 PM: Solver (including time spent in interface) took 9.997e-04 seconds
Iteration: 4, Objective: 0.2906
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:44 PM: Your problem has 105 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Finished problem compilation (took 3.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 105
  constraints   = 155
  nnz(P)        = 0
  nnz(A)        = 775
  cones (total) = 1
    : Nonnegative = 1,  numel = 155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9090e-01  +5.1632e+01  5.11e+01  8.87e-01  9.00e+00  1.00e+00  1.05e+00   ------   
  1  +5.2945e-01  +1.1286e+01  1.08e+01  3.90e-01  5.03e+00  3.89e-03  5.82e-01  5.99e-01  
  2  +4.7258e-01  +1.8676e+00  1.40e+00  8.12e-02  1.49e+00  1.95e-02  2.06e-01  9.90e-01  
  3  +4.2335e-01  +1.1815e+00  7.58e-01  3.00e-02  5.71e-01  1.44e-02  8.37e-02  6.39e-01  
  4  +3.5800e-01  +8.4442e-01  4.86e-01  1.21e-02  2.32e-01  1.12e-02  3.66e-02  6.53e-01  
  5  +2.9862e-01  +4.1276e-01  1.14e-01  2.70e-03  5.11e-02  1.64e-03  9.13e-03  8.01e-01  
  6  +2.8143e-01  +3.4767e-01  6.62e-02  1.47e-03  2.83e-02  9.24e-04  5.07e-03  5.01e-01  
  7  +2.6445e-01  +2.7436e-01  9.91e-03  2.22e-04  4.26e-03  4.41e-05  8.08e-04  9.90e-01  
  8  +2.6102e-01  +2.6163e-01  6.10e-04  1.38e-05  2.62e-04  1.93e-06  5.20e-05  9.36e-01  
  9  +2.6083e-01  +2.6091e-01  7.81e-05  1.80e-06  3.36e-05  2.70e-07  7.18e-06  8.84e-01  
 10  +2.6080e-01  +2.6080e-01  1.13e-06  2.61e-08  4.85e-07  3.82e-09  1.05e-07  9.86e-01  
 11  +2.6080e-01  +2.6080e-01  1.13e-08  2.61e-10  4.85e-09  3.83e-11  1.05e-09  9.90e-01  
 12  +2.6080e-01  +2.6080e-01  1.13e-10  2.61e-12  4.85e-11  3.83e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 875.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:44 PM: Optimal value: 2.608e-01
(CVXPY) Sep 20 07:38:44 PM: Compilation took 3.999e-03 seconds
(CVXPY) Sep 20 07:38:44 PM: Solver (including time spent in interface) took 1.005e-03 seconds
Iteration: 5, Objective: 0.2608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:44 PM: Your problem has 115 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Finished problem compilation (took 5.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 165
  nnz(P)        = 0
  nnz(A)        = 820
  cones (total) = 1
    : Nonnegative = 1,  numel = 165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8937e-01  +5.1687e+01  5.12e+01  8.90e-01  8.83e+00  1.00e+00  1.06e+00   ------   
  1  +5.1023e-01  +1.1522e+01  1.10e+01  4.00e-01  4.97e+00  3.91e-03  5.95e-01  5.86e-01  
  2  +4.5225e-01  +1.9260e+00  1.47e+00  8.47e-02  1.49e+00  2.12e-02  2.19e-01  9.90e-01  
  3  +4.1604e-01  +1.4221e+00  1.01e+00  4.53e-02  8.16e-01  1.68e-02  1.25e-01  4.69e-01  
  4  +3.4285e-01  +8.8179e-01  5.39e-01  1.52e-02  2.76e-01  1.07e-02  4.72e-02  7.33e-01  
  5  +2.8823e-01  +4.3851e-01  1.50e-01  3.96e-03  7.14e-02  1.92e-03  1.36e-02  7.69e-01  
  6  +2.6427e-01  +3.1763e-01  5.34e-02  1.37e-03  2.50e-02  5.83e-04  4.99e-03  7.09e-01  
  7  +2.5158e-01  +2.5400e-01  2.41e-03  6.24e-05  1.13e-03  8.31e-06  2.40e-04  9.85e-01  
  8  +2.5092e-01  +2.5125e-01  3.38e-04  8.93e-06  1.59e-04  9.17e-07  3.79e-05  8.61e-01  
  9  +2.5081e-01  +2.5084e-01  2.94e-05  7.73e-07  1.37e-05  8.15e-08  3.56e-06  9.29e-01  
 10  +2.5080e-01  +2.5080e-01  5.11e-07  1.34e-08  2.37e-07  1.61e-09  6.24e-08  9.90e-01  
 11  +2.5080e-01  +2.5080e-01  5.12e-09  1.34e-10  2.37e-09  1.62e-11  6.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0094ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:44 PM: Optimal value: 2.508e-01
(CVXPY) Sep 20 07:38:44 PM: Compilation took 5.000e-03 seconds
(CVXPY) Sep 20 07:38:44 PM: Solver (including time spent in interface) took 1.999e-03 seconds
Iteration: 6, Objective: 0.2508
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:44 PM: Your problem has 120 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Finished problem compilation (took 4.004e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 120
  constraints   = 170
  nnz(P)        = 0
  nnz(A)        = 839
  cones (total) = 1
    : Nonnegative = 1,  numel = 170

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8807e-01  +5.1769e+01  5.13e+01  8.92e-01  8.73e+00  1.00e+00  1.06e+00   ------   
  1  +4.9276e-01  +1.1478e+01  1.10e+01  3.95e-01  4.83e+00  3.95e-03  5.88e-01  5.91e-01  
  2  +4.2179e-01  +2.3714e+00  1.95e+00  9.49e-02  1.61e+00  2.12e-02  2.37e-01  8.95e-01  
  3  +3.5057e-01  +9.9866e-01  6.48e-01  2.35e-02  4.15e-01  9.78e-03  6.82e-02  7.73e-01  
  4  +3.0752e-01  +7.2805e-01  4.21e-01  1.26e-02  2.24e-01  5.81e-03  3.91e-02  5.35e-01  
  5  +2.5563e-01  +3.5015e-01  9.45e-02  2.67e-03  4.72e-02  8.53e-04  9.40e-03  8.13e-01  
  6  +2.4005e-01  +2.7553e-01  3.55e-02  9.81e-04  1.75e-02  2.85e-04  3.62e-03  6.88e-01  
  7  +2.3131e-01  +2.3261e-01  1.31e-03  3.64e-05  6.45e-04  6.05e-06  1.41e-04  9.66e-01  
  8  +2.3101e-01  +2.3135e-01  3.43e-04  9.73e-06  1.69e-04  1.40e-06  4.23e-05  7.77e-01  
  9  +2.3091e-01  +2.3093e-01  2.47e-05  6.97e-07  1.21e-05  8.81e-08  3.25e-06  9.31e-01  
 10  +2.3090e-01  +2.3090e-01  3.27e-07  9.20e-09  1.59e-07  1.15e-09  4.33e-08  9.90e-01  
 11  +2.3090e-01  +2.3090e-01  3.28e-09  9.22e-11  1.59e-09  1.15e-11  4.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 915.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:44 PM: Optimal value: 2.309e-01
(CVXPY) Sep 20 07:38:44 PM: Compilation took 4.004e-03 seconds
(CVXPY) Sep 20 07:38:44 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 7, Objective: 0.2309
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:44 PM: Your problem has 130 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Finished problem compilation (took 4.903e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 130
  constraints   = 180
  nnz(P)        = 0
  nnz(A)        = 878
  cones (total) = 1
    : Nonnegative = 1,  numel = 180

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8710e-01  +5.1921e+01  5.14e+01  8.95e-01  8.56e+00  1.00e+00  1.07e+00   ------   
  1  +4.7969e-01  +1.1633e+01  1.12e+01  4.00e-01  4.73e+00  3.98e-03  5.94e-01  5.85e-01  
  2  +4.0523e-01  +2.5217e+00  2.12e+00  1.01e-01  1.65e+00  2.18e-02  2.52e-01  8.70e-01  
  3  +3.3881e-01  +1.0824e+00  7.44e-01  2.81e-02  4.82e-01  1.04e-02  8.03e-02  7.53e-01  
  4  +2.9405e-01  +7.4007e-01  4.46e-01  1.41e-02  2.43e-01  5.94e-03  4.36e-02  5.44e-01  
  5  +2.5029e-01  +3.3942e-01  8.91e-02  2.78e-03  4.71e-02  6.75e-04  9.86e-03  8.44e-01  
  6  +2.4135e-01  +2.9122e-01  4.99e-02  1.52e-03  2.59e-02  3.66e-04  5.52e-03  5.05e-01  
  7  +2.3174e-01  +2.3491e-01  3.17e-03  9.83e-05  1.66e-03  9.94e-06  3.76e-04  9.90e-01  
  8  +2.3103e-01  +2.3156e-01  5.31e-04  1.68e-05  2.76e-04  1.31e-06  7.24e-05  8.29e-01  
  9  +2.3092e-01  +2.3098e-01  6.71e-05  2.12e-06  3.48e-05  1.85e-07  9.73e-06  9.21e-01  
 10  +2.3090e-01  +2.3090e-01  7.79e-07  2.47e-08  4.04e-07  2.16e-09  1.14e-07  9.89e-01  
 11  +2.3090e-01  +2.3090e-01  7.79e-09  2.47e-10  4.04e-09  2.16e-11  1.14e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 989.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:44 PM: Optimal value: 2.309e-01
(CVXPY) Sep 20 07:38:44 PM: Compilation took 4.903e-03 seconds
(CVXPY) Sep 20 07:38:44 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 8, Objective: 0.2309
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:44 PM: Your problem has 131 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:44 PM: Finished problem compilation (took 5.511e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 131
  constraints   = 181
  nnz(P)        = 0
  nnz(A)        = 883
  cones (total) = 1
    : Nonnegative = 1,  numel = 181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8699e-01  +5.1923e+01  5.14e+01  8.95e-01  8.54e+00  1.00e+00  1.07e+00   ------   
  1  +4.7642e-01  +1.1616e+01  1.11e+01  3.99e-01  4.71e+00  3.99e-03  5.92e-01  5.86e-01  
  2  +3.9660e-01  +2.4742e+00  2.08e+00  9.59e-02  1.57e+00  2.22e-02  2.41e-01  8.85e-01  
  3  +3.1902e-01  +1.1966e+00  8.78e-01  3.07e-02  5.22e-01  1.16e-02  8.82e-02  7.61e-01  
  4  +2.7518e-01  +6.8957e-01  4.14e-01  1.32e-02  2.24e-01  5.16e-03  4.20e-02  5.63e-01  
  5  +2.3641e-01  +3.1621e-01  7.98e-02  2.57e-03  4.27e-02  6.75e-04  9.39e-03  8.35e-01  
  6  +2.2396e-01  +2.3814e-01  1.42e-02  4.57e-04  7.53e-03  9.72e-05  1.79e-03  8.57e-01  
  7  +2.2130e-01  +2.2250e-01  1.20e-03  3.92e-05  6.40e-04  6.20e-06  1.62e-04  9.12e-01  
  8  +2.2105e-01  +2.2122e-01  1.75e-04  5.71e-06  9.19e-05  6.39e-07  2.72e-05  8.87e-01  
  9  +2.2100e-01  +2.2102e-01  1.25e-05  4.02e-07  6.48e-06  4.17e-08  2.03e-06  9.44e-01  
 10  +2.2100e-01  +2.2100e-01  1.29e-07  4.14e-09  6.67e-08  4.28e-10  2.10e-08  9.90e-01  
 11  +2.2100e-01  +2.2100e-01  1.29e-09  4.15e-11  6.69e-10  4.29e-12  2.11e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0448ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:44 PM: Optimal value: 2.210e-01
(CVXPY) Sep 20 07:38:44 PM: Compilation took 5.511e-03 seconds
(CVXPY) Sep 20 07:38:44 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 9, Objective: 0.2210
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:38:45 PM: Your problem has 132 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:38:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:38:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:38:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:38:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:38:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:38:45 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:38:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:38:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:38:45 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:38:45 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 132
  constraints   = 182
  nnz(P)        = 0
  nnz(A)        = 887
  cones (total) = 1
    : Nonnegative = 1,  numel = 182

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8678e-01  +5.1961e+01  5.15e+01  8.96e-01  8.53e+00  1.00e+00  1.07e+00   ------   
  1  +4.7370e-01  +1.1643e+01  1.12e+01  3.99e-01  4.70e+00  3.99e-03  5.93e-01  5.85e-01  
  2  +3.9419e-01  +2.5403e+00  2.15e+00  9.88e-02  1.61e+00  2.22e-02  2.47e-01  8.73e-01  
  3  +3.1447e-01  +1.1373e+00  8.23e-01  2.87e-02  4.87e-01  1.13e-02  8.25e-02  7.76e-01  
  4  +2.6924e-01  +6.4848e-01  3.79e-01  1.22e-02  2.06e-01  4.60e-03  3.86e-02  5.85e-01  
  5  +2.3400e-01  +3.4426e-01  1.10e-01  3.46e-03  5.81e-02  1.13e-03  1.24e-02  7.42e-01  
  6  +2.2133e-01  +2.7194e-01  5.06e-02  1.52e-03  2.58e-02  4.30e-04  5.68e-03  6.56e-01  
  7  +2.1189e-01  +2.1525e-01  3.35e-03  1.01e-04  1.69e-03  2.23e-05  3.97e-04  9.36e-01  
  8  +2.1121e-01  +2.1162e-01  4.02e-04  1.25e-05  2.05e-04  1.77e-06  5.36e-05  8.78e-01  
  9  +2.1111e-01  +2.1113e-01  2.49e-05  7.81e-07  1.27e-05  9.11e-08  3.60e-06  9.63e-01  
 10  +2.1110e-01  +2.1110e-01  2.58e-07  8.10e-09  1.32e-07  9.42e-10  3.75e-08  9.90e-01  
 11  +2.1110e-01  +2.1110e-01  2.59e-09  8.10e-11  1.32e-09  9.42e-12  3.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0661ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:38:45 PM: Problem status: optimal
(CVXPY) Sep 20 07:38:45 PM: Optimal value: 2.111e-01
(CVXPY) Sep 20 07:38:45 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:38:45 PM: Solver (including time spent in interface) took 1.505e-03 seconds
FULL MODEL:
  Accruacy: 0.76
  Our objective: 0.52

IF 
    (x0 = 0 AND x1 = 0 AND x5 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x2 = 0 AND x5 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.06)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.1)
 OR (x1 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.6021101474761963
Best over terms:
  Our final objective: 0.12000000000000002
    Its accruacy: 0.56
    Its hamming distance: 7
  Shortest hamming distance: 3
    Its our objective: 0.06000000000000005
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

