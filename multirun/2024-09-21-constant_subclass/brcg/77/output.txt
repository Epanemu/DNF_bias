Command:
python test_script.py -s constant_subclass -d 2 -n 50000 --seed 73 -m brcg -k 2 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.30000000000000004
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.29804
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 2.

Computed total variation: 0.29803999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:29 PM: Your problem has 25005 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:29 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:29 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:29 PM: Finished problem compilation (took 5.724e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25005
  constraints   = 50005
  nnz(P)        = 0
  nnz(A)        = 125005
  cones (total) = 1
    : Nonnegative = 1,  numel = 50005

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5003e+04  2.50e+04  9.92e-01  1.59e+02  1.00e+00  1.00e+00   ------   
  1  +6.3758e-01  +4.3682e+03  4.37e+03  2.69e-01  7.51e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5927e-01  +8.1612e+02  8.16e+02  1.36e-01  4.39e+01  5.28e-03  2.16e-01  5.86e-01  
  3  +5.0728e-01  +1.0088e+02  1.00e+02  1.15e-01  3.67e+01  6.53e-06  2.15e-01  4.37e-02  
  4  +5.0016e-01  +3.5193e+00  3.02e+00  8.97e-03  2.81e+00  9.57e-07  2.03e-01  2.52e-01  
  5  +5.0000e-01  +9.0589e-01  4.06e-01  1.21e-03  3.85e-01  3.84e-07  7.04e-02  9.27e-01  
  6  +4.9772e-01  +2.9584e+00  2.46e+00  1.58e-03  5.10e-01  2.95e-05  4.60e-03  9.78e-01  
  7  +4.6792e-01  +1.4897e+00  1.02e+00  5.33e-05  1.73e-02  3.37e-04  1.45e-04  9.68e-01  
  8  +4.4039e-01  +6.7897e-01  2.39e-01  1.22e-05  3.92e-03  3.06e-06  3.72e-05  8.25e-01  
  9  +4.0738e-01  +4.3064e-01  2.33e-02  1.19e-06  3.80e-04  2.51e-08  4.43e-06  9.47e-01  
 10  +4.0080e-01  +4.0334e-01  2.54e-03  1.19e-07  3.78e-05  7.91e-09  5.04e-07  9.18e-01  
 11  +3.9995e-01  +3.9998e-01  3.36e-05  1.50e-09  4.77e-07  1.20e-10  6.71e-09  9.88e-01  
 12  +3.9994e-01  +3.9994e-01  3.36e-07  1.49e-11  4.76e-09  1.20e-12  6.71e-11  9.90e-01  
 13  +3.9994e-01  +3.9994e-01  3.39e-09  1.51e-13  4.80e-11  1.66e-14  9.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 184.5251ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:29 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:29 PM: Optimal value: 3.999e-01
(CVXPY) Sep 20 07:26:29 PM: Compilation took 5.724e-02 seconds
(CVXPY) Sep 20 07:26:29 PM: Solver (including time spent in interface) took 2.061e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.3999
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:26:30 PM: Your problem has 25006 variables, 25000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:26:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:26:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:26:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:26:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:26:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:26:30 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:26:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:26:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:26:30 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:26:30 PM: Finished problem compilation (took 5.856e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25006
  constraints   = 50006
  nnz(P)        = 0
  nnz(A)        = 134996
  cones (total) = 1
    : Nonnegative = 1,  numel = 50006

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5003e+04  2.50e+04  9.92e-01  1.65e+02  1.00e+00  1.00e+00   ------   
  1  +6.3755e-01  +4.3684e+03  4.37e+03  2.69e-01  7.80e+01  4.50e-03  3.89e-01  7.25e-01  
  2  +5.5924e-01  +8.1580e+02  8.15e+02  1.36e-01  4.55e+01  5.28e-03  2.16e-01  5.87e-01  
  3  +5.0722e-01  +1.0020e+02  9.97e+01  1.15e-01  3.80e+01  6.49e-06  2.15e-01  4.43e-02  
  4  +5.0033e-01  +5.9180e+00  5.42e+00  1.60e-02  5.16e+00  1.17e-06  2.07e-01  1.47e-01  
  5  +5.0006e-01  +1.9330e+00  1.43e+00  4.27e-03  1.40e+00  6.21e-07  1.51e-01  3.93e-01  
  6  +5.0002e-01  +1.3070e+00  8.07e-01  2.40e-03  7.91e-01  4.76e-07  8.03e-02  5.07e-01  
  7  +4.9985e-01  +7.8866e-01  2.89e-01  7.58e-04  2.52e-01  1.90e-06  4.60e-03  9.68e-01  
  8  +4.8895e-01  +7.5668e-01  2.68e-01  2.62e-05  8.89e-03  1.22e-04  6.58e-05  9.86e-01  
  9  +4.5612e-01  +7.6814e-01  3.12e-01  1.04e-05  3.51e-03  2.08e-04  2.65e-05  9.85e-01  
 10  +3.9919e-01  +5.3871e-01  1.40e-01  5.36e-06  1.78e-03  1.50e-06  1.64e-05  6.61e-01  
 11  +3.5899e-01  +3.7944e-01  2.05e-02  7.43e-07  2.46e-04  1.27e-07  2.60e-06  8.95e-01  
 12  +3.5119e-01  +3.5145e-01  2.64e-04  9.61e-09  3.18e-06  1.46e-09  3.52e-08  9.88e-01  
 13  +3.5108e-01  +3.5108e-01  2.64e-06  9.60e-11  3.18e-08  1.46e-11  3.52e-10  9.90e-01  
 14  +3.5108e-01  +3.5108e-01  2.64e-08  9.60e-13  3.18e-10  1.47e-13  3.53e-12  9.90e-01  
 15  +3.5108e-01  +3.5108e-01  2.64e-10  9.65e-15  3.18e-12  1.48e-15  3.55e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 262.5325ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:26:30 PM: Problem status: optimal
(CVXPY) Sep 20 07:26:30 PM: Optimal value: 3.511e-01
(CVXPY) Sep 20 07:26:30 PM: Compilation took 5.856e-02 seconds
(CVXPY) Sep 20 07:26:30 PM: Solver (including time spent in interface) took 2.851e-01 seconds
FULL MODEL:
  Accruacy: 0.64902
  Our objective: 0.29803999999999997

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.29804)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.642561674118042
Best over terms:
  Our final objective: 0.29803999999999997
    Its accruacy: 0.64902
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.29803999999999997
  Highest accruacy: 0.64902
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

