Command:
python test_script.py -s constant_subclass -d 9 -n 10 --seed 73 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:40 PM: Your problem has 24 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:40 PM: Finished problem compilation (took 6.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 24
  constraints   = 29
  nnz(P)        = 0
  nnz(A)        = 79
  cones (total) = 1
    : Nonnegative = 1,  numel = 29

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4695e-01  +6.1730e+00  5.73e+00  7.71e-01  2.70e+00  1.00e+00  1.30e+00   ------   
  1  +4.1291e-01  +1.1929e+00  7.80e-01  2.90e-01  1.17e+00  3.52e-03  6.05e-01  7.29e-01  
  2  +2.6538e-01  +3.8281e-01  1.17e-01  4.79e-02  2.08e-01  8.09e-03  1.48e-01  8.79e-01  
  3  +2.0968e-01  +2.4115e-01  3.15e-02  9.32e-03  4.44e-02  1.86e-03  4.26e-02  9.05e-01  
  4  +2.0039e-01  +2.0102e-01  6.28e-04  1.86e-04  8.93e-04  3.42e-05  9.08e-04  9.79e-01  
  5  +2.0020e-01  +2.0021e-01  6.27e-06  1.86e-06  8.92e-06  3.42e-07  9.09e-06  9.90e-01  
  6  +2.0020e-01  +2.0020e-01  6.27e-08  1.86e-08  8.92e-08  3.42e-09  9.09e-08  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  6.27e-10  1.86e-10  8.92e-10  3.42e-11  9.09e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 188.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:40 PM: Optimal value: 2.002e-01
(CVXPY) Sep 20 07:55:40 PM: Compilation took 6.008e-03 seconds
(CVXPY) Sep 20 07:55:40 PM: Solver (including time spent in interface) took 9.987e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:40 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:40 PM: Finished problem compilation (took 3.042e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 112
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3602e-01  +6.4269e+00  6.09e+00  8.02e-01  2.84e+00  1.00e+00  1.34e+00   ------   
  1  +1.3884e-01  +9.5542e-01  8.17e-01  2.96e-01  1.09e+00  3.84e-03  5.56e-01  7.49e-01  
  2  +1.0457e-02  +1.4458e-01  1.34e-01  5.23e-02  2.14e-01  7.08e-03  1.40e-01  8.39e-01  
  3  +1.1527e-03  +7.0434e-03  5.89e-03  2.33e-03  9.76e-03  4.14e-04  6.90e-03  9.53e-01  
  4  +2.1502e-04  +3.0453e-04  8.95e-05  3.68e-05  1.53e-04  4.21e-06  1.09e-04  9.84e-01  
  5  +2.0047e-04  +2.0723e-04  6.75e-06  3.17e-06  1.22e-05  2.70e-07  9.58e-06  9.25e-01  
  6  +2.0000e-04  +2.0007e-04  7.04e-08  3.33e-08  1.27e-07  2.83e-09  1.01e-07  9.90e-01  
  7  +2.0000e-04  +2.0000e-04  7.04e-10  3.33e-10  1.27e-09  2.83e-11  1.01e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 181.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:40 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 07:55:40 PM: Compilation took 3.042e-03 seconds
(CVXPY) Sep 20 07:55:40 PM: Solver (including time spent in interface) took 1.007e-03 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:55:40 PM: Your problem has 36 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:55:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:55:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:55:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:55:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:55:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:55:40 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:55:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:55:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:55:40 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:55:40 PM: Finished problem compilation (took 4.045e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 41
  nnz(P)        = 0
  nnz(A)        = 119
  cones (total) = 1
    : Nonnegative = 1,  numel = 41

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.2809e-01  +6.3824e+00  6.05e+00  8.07e-01  2.87e+00  1.00e+00  1.33e+00   ------   
  1  +1.2252e-01  +9.5161e-01  8.29e-01  3.07e-01  1.12e+00  3.89e-03  5.59e-01  7.40e-01  
  2  +1.9125e-02  +1.6472e-01  1.46e-01  5.97e-02  2.46e-01  7.67e-03  1.54e-01  8.23e-01  
  3  +2.8585e-03  +2.4245e-02  2.14e-02  8.67e-03  3.71e-02  1.25e-03  2.49e-02  8.55e-01  
  4  +2.3691e-04  +5.0338e-04  2.66e-04  1.10e-04  4.70e-04  1.39e-05  3.21e-04  9.87e-01  
  5  +2.0443e-04  +2.3062e-04  2.62e-05  1.25e-05  4.88e-05  8.38e-07  3.70e-05  8.86e-01  
  6  +2.0021e-04  +2.0154e-04  1.34e-06  6.51e-07  2.49e-06  5.48e-08  1.99e-06  9.79e-01  
  7  +2.0000e-04  +2.0002e-04  1.34e-08  6.51e-09  2.49e-08  5.48e-10  2.00e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  1.34e-10  6.51e-11  2.49e-10  5.48e-12  2.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 176.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:55:40 PM: Problem status: optimal
(CVXPY) Sep 20 07:55:40 PM: Optimal value: 2.000e-04
(CVXPY) Sep 20 07:55:40 PM: Compilation took 4.045e-03 seconds
(CVXPY) Sep 20 07:55:40 PM: Solver (including time spent in interface) took 9.882e-04 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 1 AND x1 = 0 AND x3 = 0) <-- (term's our objective: 0.6)
 OR (x5 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.3669140338897705
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 8
  Shortest hamming distance: 8
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

