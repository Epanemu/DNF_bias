Command:
python test_script.py -s constant_subclass -d 4 -n 1000 --seed 34 -m brcg -k 4 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.07500000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.11599999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.148
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:29:16 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:29:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:29:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:29:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:29:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:29:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:29:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:29:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:29:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:29:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:29:16 PM: Finished problem compilation (took 7.518e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9980e-01  +5.0061e+02  5.00e+02  9.51e-01  2.65e+01  1.00e+00  1.00e+00   ------   
  1  +6.0781e-01  +9.7267e+01  9.67e+01  3.26e-01  1.46e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.4961e-01  +1.5238e+01  1.47e+01  1.24e-01  6.69e+00  8.33e-03  2.23e-01  7.38e-01  
  3  +5.0393e-01  +2.2209e+00  1.72e+00  3.54e-02  1.83e+00  1.02e-05  2.13e-01  2.33e-01  
  4  +5.0022e-01  +6.1046e-01  1.10e-01  2.36e-03  1.27e-01  3.34e-06  3.78e-02  9.44e-01  
  5  +4.9995e-01  +5.9149e-01  9.15e-02  1.79e-03  9.66e-02  6.34e-06  1.16e-02  7.87e-01  
  6  +4.9514e-01  +5.7731e-01  8.22e-02  2.32e-04  1.27e-02  7.19e-05  7.56e-04  9.51e-01  
  7  +4.8590e-01  +5.2019e-01  3.43e-02  8.45e-05  4.61e-03  1.37e-05  3.03e-04  7.47e-01  
  8  +4.7878e-01  +4.8931e-01  1.05e-02  2.19e-05  1.19e-03  3.63e-06  8.73e-05  9.90e-01  
  9  +4.7535e-01  +4.7606e-01  7.10e-04  1.41e-06  7.68e-05  2.14e-07  5.88e-06  9.36e-01  
 10  +4.7510e-01  +4.7511e-01  7.81e-06  1.54e-08  8.42e-07  2.47e-09  6.47e-08  9.90e-01  
 11  +4.7510e-01  +4.7510e-01  7.81e-08  1.54e-10  8.42e-09  2.47e-11  6.47e-10  9.90e-01  
 12  +4.7510e-01  +4.7510e-01  7.81e-10  1.54e-12  8.42e-11  2.48e-13  6.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.6881ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:29:16 PM: Optimal value: 4.751e-01
(CVXPY) Sep 20 07:29:16 PM: Compilation took 7.518e-03 seconds
(CVXPY) Sep 20 07:29:16 PM: Solver (including time spent in interface) took 4.507e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4751
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:29:16 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:29:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:29:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:29:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:29:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:29:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:29:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:29:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:29:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:29:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:29:16 PM: Finished problem compilation (took 5.531e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4652
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0147e+02  5.01e+02  9.52e-01  2.87e+01  1.00e+00  1.02e+00   ------   
  1  +6.0573e-01  +9.8154e+01  9.75e+01  3.33e-01  1.58e+01  4.07e-03  4.87e-01  6.62e-01  
  2  +5.4735e-01  +1.4818e+01  1.43e+01  1.22e-01  7.02e+00  8.86e-03  2.23e-01  7.61e-01  
  3  +5.0260e-01  +1.9676e+00  1.46e+00  3.07e-02  1.71e+00  9.81e-06  2.07e-01  3.48e-01  
  4  +5.0062e-01  +8.9116e-01  3.91e-01  8.37e-03  4.79e-01  4.57e-06  8.06e-02  6.68e-01  
  5  +4.9999e-01  +8.4323e-01  3.43e-01  6.64e-03  3.83e-01  8.09e-06  3.51e-02  6.64e-01  
  6  +4.8866e-01  +6.7868e-01  1.90e-01  6.30e-04  3.72e-02  6.26e-05  1.88e-03  9.57e-01  
  7  +4.7863e-01  +6.1761e-01  1.39e-01  4.03e-04  2.37e-02  4.57e-05  1.27e-03  4.63e-01  
  8  +4.7500e-01  +6.0164e-01  1.27e-01  3.34e-04  1.96e-02  4.43e-05  1.07e-03  2.65e-01  
  9  +4.6798e-01  +5.6842e-01  1.00e-01  2.31e-04  1.35e-02  3.87e-05  7.56e-04  4.48e-01  
 10  +4.5816e-01  +5.1712e-01  5.90e-02  1.37e-04  8.02e-03  2.59e-05  4.67e-04  9.38e-01  
 11  +4.4626e-01  +4.6138e-01  1.51e-02  3.22e-05  1.88e-03  6.25e-06  1.16e-04  7.98e-01  
 12  +4.4231e-01  +4.4269e-01  3.88e-04  8.17e-07  4.76e-05  1.44e-07  3.02e-06  9.76e-01  
 13  +4.4226e-01  +4.4255e-01  2.91e-04  4.41e-07  2.58e-05  1.76e-07  1.39e-06  5.99e-01  
 14  +4.4220e-01  +4.4235e-01  1.53e-04  3.33e-07  1.94e-05  1.09e-08  1.39e-06  7.85e-02  
 15  +4.4212e-01  +4.4220e-01  7.89e-05  1.20e-07  7.00e-06  3.44e-08  3.79e-07  9.26e-01  
 16  +4.4210e-01  +4.4210e-01  8.35e-07  1.26e-09  7.34e-08  3.80e-10  3.98e-09  9.90e-01  
 17  +4.4210e-01  +4.4210e-01  8.35e-09  1.26e-11  7.34e-10  3.80e-12  3.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.8634ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:29:16 PM: Optimal value: 4.421e-01
(CVXPY) Sep 20 07:29:16 PM: Compilation took 5.531e-03 seconds
(CVXPY) Sep 20 07:29:16 PM: Solver (including time spent in interface) took 7.003e-03 seconds
Iteration: 2, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:29:16 PM: Your problem has 526 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:29:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:29:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:29:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:29:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:29:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:29:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:29:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:29:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:29:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:29:16 PM: Finished problem compilation (took 4.514e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 526
  constraints   = 1026
  nnz(P)        = 0
  nnz(A)        = 5285
  cones (total) = 1
    : Nonnegative = 1,  numel = 1026

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9966e-01  +5.0143e+02  5.01e+02  9.53e-01  2.97e+01  1.00e+00  1.03e+00   ------   
  1  +6.0489e-01  +9.8597e+01  9.80e+01  3.40e-01  1.64e+01  4.03e-03  5.02e-01  6.58e-01  
  2  +5.4777e-01  +1.5007e+01  1.45e+01  1.25e-01  7.19e+00  9.18e-03  2.30e-01  7.64e-01  
  3  +5.0267e-01  +1.9883e+00  1.49e+00  3.17e-02  1.79e+00  1.02e-05  2.13e-01  3.55e-01  
  4  +5.0080e-01  +9.8101e-01  4.80e-01  1.05e-02  6.06e-01  4.72e-06  9.81e-02  5.77e-01  
  5  +4.9951e-01  +6.9694e-01  1.97e-01  3.77e-03  2.21e-01  6.97e-06  1.95e-02  8.87e-01  
  6  +4.9508e-01  +7.0085e-01  2.06e-01  1.41e-03  8.46e-02  2.95e-05  4.53e-03  8.25e-01  
  7  +4.9530e-01  +7.0451e-01  2.09e-01  1.36e-03  8.11e-02  3.28e-05  4.29e-03  1.74e-01  
  8  +4.9115e-01  +6.9850e-01  2.07e-01  7.94e-04  4.76e-02  6.05e-05  2.41e-03  9.90e-01  
  9  +4.8057e-01  +6.4004e-01  1.59e-01  4.13e-04  2.47e-02  6.66e-05  1.26e-03  5.53e-01  
 10  +4.7557e-01  +6.2059e-01  1.45e-01  3.42e-04  2.05e-02  6.49e-05  1.04e-03  4.62e-01  
 11  +4.5662e-01  +5.3811e-01  8.15e-02  1.72e-04  1.03e-02  3.57e-05  5.53e-04  9.90e-01  
 12  +4.3562e-01  +4.5673e-01  2.11e-02  3.84e-05  2.28e-03  9.29e-06  1.30e-04  8.20e-01  
 13  +4.3503e-01  +4.5560e-01  2.06e-02  3.53e-05  2.10e-03  9.82e-06  1.18e-04  1.44e-01  
 14  +4.3341e-01  +4.4977e-01  1.64e-02  2.84e-05  1.69e-03  9.56e-06  9.60e-05  5.74e-01  
 15  +4.2761e-01  +4.3109e-01  3.48e-03  5.82e-06  3.45e-04  1.97e-06  2.02e-05  8.82e-01  
 16  +4.2623e-01  +4.2630e-01  6.93e-05  1.15e-07  6.84e-06  3.90e-08  4.04e-07  9.81e-01  
 17  +4.2620e-01  +4.2620e-01  6.93e-07  1.15e-09  6.84e-08  3.90e-10  4.04e-09  9.90e-01  
 18  +4.2620e-01  +4.2620e-01  6.93e-09  1.15e-11  6.84e-10  3.91e-12  4.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.2957ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:29:16 PM: Optimal value: 4.262e-01
(CVXPY) Sep 20 07:29:16 PM: Compilation took 4.514e-03 seconds
(CVXPY) Sep 20 07:29:16 PM: Solver (including time spent in interface) took 6.999e-03 seconds
Iteration: 3, Objective: 0.4262
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:29:16 PM: Your problem has 527 variables, 500 constraints, and 0 parameters.
(CVXPY) Sep 20 07:29:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:29:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:29:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:29:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:29:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:29:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:29:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:29:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:29:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:29:16 PM: Finished problem compilation (took 4.997e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 527
  constraints   = 1027
  nnz(P)        = 0
  nnz(A)        = 5315
  cones (total) = 1
    : Nonnegative = 1,  numel = 1027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9966e-01  +5.0141e+02  5.01e+02  9.53e-01  2.97e+01  1.00e+00  1.03e+00   ------   
  1  +6.0483e-01  +9.8719e+01  9.81e+01  3.41e-01  1.64e+01  4.03e-03  5.02e-01  6.57e-01  
  2  +5.4761e-01  +1.4980e+01  1.44e+01  1.25e-01  7.18e+00  9.23e-03  2.30e-01  7.66e-01  
  3  +5.0273e-01  +2.0061e+00  1.50e+00  3.21e-02  1.81e+00  1.04e-05  2.13e-01  3.54e-01  
  4  +5.0090e-01  +1.0285e+00  5.28e-01  1.15e-02  6.65e-01  4.78e-06  1.05e-01  5.31e-01  
  5  +4.9972e-01  +7.1192e-01  2.12e-01  4.25e-03  2.49e-01  5.92e-06  2.46e-02  8.50e-01  
  6  +4.9498e-01  +7.3855e-01  2.44e-01  1.58e-03  9.47e-02  3.14e-05  5.02e-03  8.73e-01  
  7  +4.9481e-01  +7.3538e-01  2.41e-01  1.36e-03  8.15e-02  3.92e-05  4.22e-03  3.70e-01  
  8  +4.8068e-01  +6.4471e-01  1.64e-01  3.79e-04  2.28e-02  8.39e-05  1.14e-03  9.69e-01  
  9  +4.7727e-01  +6.3070e-01  1.53e-01  3.54e-04  2.12e-02  7.64e-05  1.07e-03  1.49e-01  
 10  +4.6795e-01  +5.9639e-01  1.28e-01  2.75e-04  1.64e-02  6.35e-05  8.59e-04  5.21e-01  
 11  +4.4732e-01  +5.0629e-01  5.90e-02  1.16e-04  6.93e-03  2.65e-05  3.85e-04  7.02e-01  
 12  +4.3408e-01  +4.5205e-01  1.80e-02  3.34e-05  1.98e-03  8.50e-06  1.15e-04  7.53e-01  
 13  +4.3354e-01  +4.5094e-01  1.74e-02  3.00e-05  1.78e-03  9.04e-06  1.01e-04  2.03e-01  
 14  +4.3198e-01  +4.4533e-01  1.33e-02  2.36e-05  1.40e-03  7.90e-06  8.09e-05  6.42e-01  
 15  +4.2821e-01  +4.3312e-01  4.91e-03  8.23e-06  4.88e-04  2.97e-06  2.85e-05  6.88e-01  
 16  +4.2624e-01  +4.2635e-01  1.05e-04  1.74e-07  1.04e-05  6.02e-08  6.12e-07  9.81e-01  
 17  +4.2620e-01  +4.2620e-01  1.05e-06  1.75e-09  1.04e-07  6.02e-10  6.12e-09  9.90e-01  
 18  +4.2620e-01  +4.2620e-01  1.05e-08  1.75e-11  1.04e-09  6.02e-12  6.13e-11  9.90e-01  
 19  +4.2620e-01  +4.2620e-01  1.05e-10  1.74e-13  1.04e-11  6.03e-14  6.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5958ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:29:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:29:16 PM: Optimal value: 4.262e-01
(CVXPY) Sep 20 07:29:16 PM: Compilation took 4.997e-03 seconds
(CVXPY) Sep 20 07:29:16 PM: Solver (including time spent in interface) took 7.499e-03 seconds
FULL MODEL:
  Accruacy: 0.574
  Our objective: 0.14800000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.116)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1)            <-- (term's our objective: 0.032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.4914848804473877
Best over terms:
  Our final objective: 0.11599999999999999
    Its accruacy: 0.558
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.11599999999999999
  Highest accruacy: 0.558
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

