Command:
python test_script.py -s constant_subclass -d 7 -n 10 --seed 43 -m brcg -k 7 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.009375000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 7.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:37:56 PM: Your problem has 20 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:37:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:37:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:37:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:37:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:37:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:37:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:37:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:37:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:37:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:37:56 PM: Finished problem compilation (took 6.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 20
  constraints   = 25
  nnz(P)        = 0
  nnz(A)        = 65
  cones (total) = 1
    : Nonnegative = 1,  numel = 25

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3421e-01  +6.1114e+00  5.68e+00  7.52e-01  2.59e+00  1.00e+00  1.29e+00   ------   
  1  +4.3641e-01  +1.2048e+00  7.68e-01  2.65e-01  1.11e+00  3.62e-03  5.81e-01  7.35e-01  
  2  +2.5211e-01  +4.0381e-01  1.52e-01  4.86e-02  2.27e-01  7.40e-03  1.57e-01  8.15e-01  
  3  +2.0507e-01  +2.2045e-01  1.54e-02  4.97e-03  2.35e-02  7.07e-04  1.84e-02  9.02e-01  
  4  +2.0021e-01  +2.0047e-01  2.55e-04  8.37e-05  3.94e-04  1.11e-05  3.16e-04  9.83e-01  
  5  +2.0012e-01  +2.0015e-01  3.06e-05  9.27e-06  4.39e-05  1.09e-06  4.10e-05  8.85e-01  
  6  +2.0010e-01  +2.0010e-01  7.27e-07  2.05e-07  9.91e-07  2.42e-08  1.02e-06  9.78e-01  
  7  +2.0010e-01  +2.0010e-01  7.26e-09  2.05e-09  9.89e-09  2.41e-10  1.02e-08  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 163.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:37:56 PM: Optimal value: 2.001e-01
(CVXPY) Sep 20 07:37:56 PM: Compilation took 6.508e-03 seconds
(CVXPY) Sep 20 07:37:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:37:56 PM: Your problem has 30 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:37:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:37:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:37:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:37:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:37:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:37:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:37:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:37:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:37:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:37:56 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 30
  constraints   = 35
  nnz(P)        = 0
  nnz(A)        = 98
  cones (total) = 1
    : Nonnegative = 1,  numel = 35

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.7347e-01  +6.1583e+00  5.78e+00  7.91e-01  2.76e+00  1.00e+00  1.29e+00   ------   
  1  +2.4865e-01  +1.0689e+00  8.20e-01  2.89e-01  1.09e+00  4.01e-03  5.50e-01  7.22e-01  
  2  +7.0220e-02  +4.0628e-01  3.36e-01  9.72e-02  4.42e-01  1.30e-02  2.66e-01  6.45e-01  
  3  +1.7281e-02  +5.8009e-02  4.07e-02  1.10e-02  5.44e-02  2.90e-03  3.71e-02  8.74e-01  
  4  +5.4717e-04  +1.1946e-03  6.47e-04  1.73e-04  8.59e-04  4.26e-05  6.02e-04  9.84e-01  
  5  +3.1846e-04  +3.7823e-04  5.98e-05  1.77e-05  8.42e-05  2.77e-06  6.13e-05  9.00e-01  
  6  +3.0043e-04  +3.0238e-04  1.94e-06  6.15e-07  2.81e-06  9.53e-08  2.13e-06  9.74e-01  
  7  +3.0000e-04  +3.0002e-04  1.95e-08  6.16e-09  2.82e-08  9.53e-10  2.14e-08  9.90e-01  
  8  +3.0000e-04  +3.0000e-04  1.95e-10  6.16e-11  2.82e-10  9.54e-12  2.14e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 488.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:37:56 PM: Optimal value: 3.000e-04
(CVXPY) Sep 20 07:37:56 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:37:56 PM: Solver (including time spent in interface) took 9.990e-04 seconds
Iteration: 2, Objective: 0.0003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:37:56 PM: Your problem has 31 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:37:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:37:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:37:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:37:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:37:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:37:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:37:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:37:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:37:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:37:56 PM: Finished problem compilation (took 3.509e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 31
  constraints   = 36
  nnz(P)        = 0
  nnz(A)        = 101
  cones (total) = 1
    : Nonnegative = 1,  numel = 36

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5968e-01  +6.1884e+00  5.83e+00  7.93e-01  2.77e+00  1.00e+00  1.29e+00   ------   
  1  +2.1175e-01  +1.0499e+00  8.38e-01  2.92e-01  1.09e+00  4.08e-03  5.47e-01  7.18e-01  
  2  +5.9538e-02  +3.0610e-01  2.47e-01  8.06e-02  3.55e-01  9.94e-03  2.16e-01  7.09e-01  
  3  +1.1958e-02  +5.5036e-02  4.31e-02  1.30e-02  6.16e-02  2.42e-03  4.15e-02  8.29e-01  
  4  +4.4971e-04  +1.0873e-03  6.38e-04  1.92e-04  9.12e-04  3.59e-05  6.35e-04  9.85e-01  
  5  +2.9428e-04  +4.0181e-04  1.08e-04  3.62e-05  1.63e-04  4.84e-06  1.19e-04  8.25e-01  
  6  +2.5362e-04  +2.6830e-04  1.47e-05  5.43e-06  2.28e-05  6.73e-07  1.86e-05  9.20e-01  
  7  +2.5004e-04  +2.5021e-04  1.72e-07  6.44e-08  2.68e-07  7.53e-09  2.22e-07  9.88e-01  
  8  +2.5000e-04  +2.5000e-04  1.72e-09  6.44e-10  2.68e-09  7.53e-11  2.22e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 148.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:37:56 PM: Optimal value: 2.500e-04
(CVXPY) Sep 20 07:37:56 PM: Compilation took 3.509e-03 seconds
(CVXPY) Sep 20 07:37:56 PM: Solver (including time spent in interface) took 9.999e-04 seconds
Iteration: 3, Objective: 0.0003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:37:56 PM: Your problem has 33 variables, 5 constraints, and 0 parameters.
(CVXPY) Sep 20 07:37:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:37:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:37:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:37:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:37:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:37:56 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:37:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:37:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:37:56 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:37:56 PM: Finished problem compilation (took 3.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 33
  constraints   = 38
  nnz(P)        = 0
  nnz(A)        = 107
  cones (total) = 1
    : Nonnegative = 1,  numel = 38

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3516e-01  +6.1946e+00  5.86e+00  7.99e-01  2.79e+00  1.00e+00  1.30e+00   ------   
  1  +1.4751e-01  +1.0122e+00  8.65e-01  3.00e-01  1.10e+00  4.19e-03  5.50e-01  7.08e-01  
  2  +2.4759e-02  +1.7792e-01  1.53e-01  5.81e-02  2.40e-01  8.37e-03  1.51e-01  8.20e-01  
  3  +2.1838e-03  +8.6167e-03  6.43e-03  2.44e-03  1.02e-02  4.99e-04  7.16e-03  9.55e-01  
  4  +3.1854e-04  +5.4291e-04  2.24e-04  8.77e-05  3.62e-04  1.43e-05  2.58e-04  9.64e-01  
  5  +2.4341e-04  +2.8200e-04  3.86e-05  1.65e-05  6.45e-05  1.55e-06  5.42e-05  9.83e-01  
  6  +2.3368e-04  +2.3516e-04  1.48e-06  6.51e-07  2.51e-06  5.51e-08  2.21e-06  9.60e-01  
  7  +2.3334e-04  +2.3335e-04  1.49e-08  6.56e-09  2.53e-08  5.54e-10  2.23e-08  9.90e-01  
  8  +2.3333e-04  +2.3333e-04  1.49e-10  6.56e-11  2.53e-10  5.54e-12  2.23e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 151.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:37:56 PM: Problem status: optimal
(CVXPY) Sep 20 07:37:56 PM: Optimal value: 2.333e-04
(CVXPY) Sep 20 07:37:56 PM: Compilation took 3.005e-03 seconds
(CVXPY) Sep 20 07:37:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x3 = 1) <-- (term's our objective: 0.6)
 OR (x3 = 1 AND x6 = 1) <-- (term's our objective: 0.4)
 OR (x4 = 0)            <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4527463912963867
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 7
  Shortest hamming distance: 6
    Its our objective: 0.4
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

