Command:
python test_script.py -s constant_subclass -d 9 -n 100 --seed 34 -m brcg -k 9 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.0023437500000000003
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 9.

Computed total variation: 0.8600000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:16 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:16 PM: Finished problem compilation (took 6.010e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 619
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9752e-01  +5.1152e+01  5.07e+01  8.73e-01  1.04e+01  1.00e+00  1.04e+00   ------   
  1  +5.7432e-01  +1.1250e+01  1.07e+01  3.81e-01  6.27e+00  3.76e-03  5.94e-01  5.90e-01  
  2  +5.0979e-01  +1.7973e+00  1.29e+00  9.74e-02  1.99e+00  1.91e-02  2.48e-01  9.90e-01  
  3  +4.8213e-01  +8.8578e-01  4.04e-01  2.15e-02  4.67e-01  1.10e-02  6.53e-02  8.00e-01  
  4  +4.4427e-01  +6.4585e-01  2.02e-01  6.75e-03  1.46e-01  6.62e-03  2.30e-02  6.95e-01  
  5  +4.2369e-01  +5.4921e-01  1.26e-01  2.97e-03  6.42e-02  3.66e-03  1.19e-02  6.65e-01  
  6  +3.9781e-01  +4.2392e-01  2.61e-02  5.71e-04  1.23e-02  3.49e-05  2.67e-03  9.25e-01  
  7  +3.9030e-01  +3.9100e-01  6.96e-04  1.48e-05  3.18e-04  8.72e-07  7.28e-05  9.75e-01  
  8  +3.9010e-01  +3.9011e-01  6.96e-06  1.48e-07  3.17e-06  8.71e-09  7.28e-07  9.90e-01  
  9  +3.9010e-01  +3.9010e-01  6.96e-08  1.48e-09  3.17e-08  8.71e-11  7.28e-09  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  6.96e-10  1.48e-11  3.17e-10  8.71e-13  7.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 597.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:16 PM: Optimal value: 3.901e-01
(CVXPY) Sep 20 07:56:16 PM: Compilation took 6.010e-03 seconds
(CVXPY) Sep 20 07:56:16 PM: Solver (including time spent in interface) took 9.995e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:16 PM: Your problem has 79 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:16 PM: Finished problem compilation (took 4.002e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 719
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9282e-01  +5.2267e+01  5.18e+01  8.79e-01  1.04e+01  1.00e+00  1.07e+00   ------   
  1  +5.4495e-01  +1.1435e+01  1.09e+01  3.87e-01  6.17e+00  3.77e-03  6.08e-01  5.91e-01  
  2  +4.7938e-01  +2.2486e+00  1.77e+00  1.09e-01  2.24e+00  2.16e-02  2.63e-01  9.21e-01  
  3  +4.0665e-01  +1.0377e+00  6.31e-01  2.38e-02  5.19e-01  1.34e-02  6.79e-02  8.17e-01  
  4  +3.5952e-01  +6.7699e-01  3.17e-01  9.49e-03  2.06e-01  5.99e-03  3.07e-02  6.52e-01  
  5  +3.2780e-01  +4.6757e-01  1.40e-01  3.26e-03  7.48e-02  3.11e-03  1.06e-02  7.43e-01  
  6  +3.0653e-01  +4.0618e-01  9.97e-02  1.83e-03  4.40e-02  2.19e-03  6.19e-03  5.07e-01  
  7  +2.8259e-01  +3.0929e-01  2.67e-02  4.93e-04  1.19e-02  1.03e-04  1.79e-03  9.90e-01  
  8  +2.7093e-01  +2.7180e-01  8.78e-04  1.58e-05  3.80e-04  3.43e-06  5.95e-05  9.85e-01  
  9  +2.7052e-01  +2.7057e-01  4.30e-05  7.93e-07  1.88e-05  1.22e-07  3.07e-06  9.50e-01  
 10  +2.7050e-01  +2.7050e-01  4.43e-07  8.22e-09  1.94e-07  1.25e-09  3.21e-08  9.90e-01  
 11  +2.7050e-01  +2.7050e-01  4.43e-09  8.23e-11  1.94e-09  1.25e-11  3.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 816.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:16 PM: Optimal value: 2.705e-01
(CVXPY) Sep 20 07:56:16 PM: Compilation took 4.002e-03 seconds
(CVXPY) Sep 20 07:56:16 PM: Solver (including time spent in interface) took 1.991e-03 seconds
Iteration: 2, Objective: 0.2705
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:16 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:16 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:16 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:16 PM: Finished problem compilation (took 5.003e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 777
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9234e-01  +5.2278e+01  5.18e+01  8.83e-01  1.01e+01  1.00e+00  1.07e+00   ------   
  1  +5.3722e-01  +1.1486e+01  1.09e+01  3.96e-01  5.97e+00  3.78e-03  6.09e-01  5.88e-01  
  2  +4.7383e-01  +2.2708e+00  1.80e+00  1.07e-01  2.15e+00  2.27e-02  2.58e-01  9.34e-01  
  3  +3.8659e-01  +9.7835e-01  5.92e-01  1.97e-02  4.23e-01  1.51e-02  5.57e-02  8.57e-01  
  4  +3.4238e-01  +7.6480e-01  4.22e-01  1.01e-02  2.25e-01  1.26e-02  2.91e-02  5.46e-01  
  5  +2.7624e-01  +4.6957e-01  1.93e-01  4.23e-03  9.83e-02  1.28e-04  1.34e-02  9.46e-01  
  6  +2.2073e-01  +2.6811e-01  4.74e-02  8.97e-04  2.14e-02  4.84e-05  3.13e-03  7.84e-01  
  7  +2.0244e-01  +2.0623e-01  3.79e-03  7.16e-05  1.69e-03  4.32e-06  2.63e-04  9.21e-01  
  8  +2.0086e-01  +2.0099e-01  1.28e-04  2.46e-06  5.74e-05  8.45e-08  9.24e-06  9.65e-01  
  9  +2.0080e-01  +2.0080e-01  1.92e-06  3.75e-08  8.70e-07  1.66e-09  1.45e-07  9.85e-01  
 10  +2.0080e-01  +2.0080e-01  1.92e-08  3.75e-10  8.70e-09  1.66e-11  1.45e-09  9.90e-01  
 11  +2.0080e-01  +2.0080e-01  1.92e-10  3.76e-12  8.72e-11  1.66e-13  1.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 921.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:16 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:16 PM: Optimal value: 2.008e-01
(CVXPY) Sep 20 07:56:16 PM: Compilation took 5.003e-03 seconds
(CVXPY) Sep 20 07:56:16 PM: Solver (including time spent in interface) took 1.000e-03 seconds
Iteration: 3, Objective: 0.2008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:17 PM: Your problem has 99 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Finished problem compilation (took 4.001e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 149
  nnz(P)        = 0
  nnz(A)        = 830
  cones (total) = 1
    : Nonnegative = 1,  numel = 149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9041e-01  +5.2216e+01  5.17e+01  8.87e-01  9.91e+00  1.00e+00  1.06e+00   ------   
  1  +5.1887e-01  +1.1601e+01  1.11e+01  4.02e-01  5.79e+00  3.82e-03  6.08e-01  5.83e-01  
  2  +4.5194e-01  +2.2858e+00  1.83e+00  1.03e-01  2.05e+00  2.45e-02  2.49e-01  9.54e-01  
  3  +3.6905e-01  +9.6091e-01  5.92e-01  2.14e-02  4.47e-01  1.34e-02  5.93e-02  8.12e-01  
  4  +3.1580e-01  +7.6017e-01  4.44e-01  1.16e-02  2.50e-01  1.15e-02  3.32e-02  5.08e-01  
  5  +2.4108e-01  +3.7865e-01  1.38e-01  3.10e-03  7.11e-02  2.49e-03  9.86e-03  7.73e-01  
  6  +2.1405e-01  +2.9240e-01  7.84e-02  1.63e-03  3.91e-02  1.29e-03  5.45e-03  5.19e-01  
  7  +1.8408e-01  +1.9107e-01  6.99e-03  1.41e-04  3.39e-03  6.65e-05  5.12e-04  9.29e-01  
  8  +1.8109e-01  +1.8129e-01  1.93e-04  3.98e-06  9.48e-05  1.13e-06  1.48e-05  9.71e-01  
  9  +1.8100e-01  +1.8101e-01  3.84e-06  8.10e-08  1.91e-06  2.08e-08  3.10e-07  9.80e-01  
 10  +1.8100e-01  +1.8100e-01  3.84e-08  8.11e-10  1.91e-08  2.08e-10  3.10e-09  9.90e-01  
 11  +1.8100e-01  +1.8100e-01  3.85e-10  8.13e-12  1.92e-10  2.09e-12  3.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 986.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:17 PM: Optimal value: 1.810e-01
(CVXPY) Sep 20 07:56:17 PM: Compilation took 4.001e-03 seconds
(CVXPY) Sep 20 07:56:17 PM: Solver (including time spent in interface) took 2.000e-03 seconds
Iteration: 4, Objective: 0.1810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:17 PM: Your problem has 109 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Finished problem compilation (took 4.000e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 109
  constraints   = 159
  nnz(P)        = 0
  nnz(A)        = 872
  cones (total) = 1
    : Nonnegative = 1,  numel = 159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8859e-01  +5.2419e+01  5.19e+01  8.90e-01  9.67e+00  1.00e+00  1.07e+00   ------   
  1  +4.9591e-01  +1.1673e+01  1.12e+01  4.02e-01  5.56e+00  3.88e-03  6.03e-01  5.83e-01  
  2  +4.1665e-01  +2.6251e+00  2.21e+00  1.07e-01  2.08e+00  2.58e-02  2.50e-01  9.09e-01  
  3  +3.3445e-01  +9.8793e-01  6.53e-01  2.38e-02  4.89e-01  1.19e-02  6.33e-02  7.77e-01  
  4  +2.8379e-01  +7.4616e-01  4.62e-01  1.34e-02  2.85e-01  8.70e-03  3.68e-02  4.97e-01  
  5  +2.1609e-01  +3.8780e-01  1.72e-01  4.29e-03  9.94e-02  2.38e-03  1.33e-02  7.51e-01  
  6  +1.8294e-01  +2.6455e-01  8.16e-02  1.82e-03  4.45e-02  1.08e-03  6.07e-03  5.95e-01  
  7  +1.5516e-01  +1.6474e-01  9.58e-03  2.05e-04  5.03e-03  8.69e-05  7.40e-04  9.14e-01  
  8  +1.5145e-01  +1.5202e-01  5.71e-04  1.24e-05  3.01e-04  4.14e-06  4.59e-05  9.38e-01  
  9  +1.5121e-01  +1.5123e-01  2.08e-05  4.66e-07  1.11e-05  9.58e-08  1.80e-06  9.73e-01  
 10  +1.5120e-01  +1.5120e-01  2.09e-07  4.69e-09  1.11e-07  9.59e-10  1.82e-08  9.90e-01  
 11  +1.5120e-01  +1.5120e-01  2.09e-09  4.69e-11  1.11e-09  9.60e-12  1.82e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0871ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:17 PM: Optimal value: 1.512e-01
(CVXPY) Sep 20 07:56:17 PM: Compilation took 4.000e-03 seconds
(CVXPY) Sep 20 07:56:17 PM: Solver (including time spent in interface) took 9.925e-04 seconds
Iteration: 5, Objective: 0.1512
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:17 PM: Your problem has 119 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Finished problem compilation (took 4.503e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 119
  constraints   = 169
  nnz(P)        = 0
  nnz(A)        = 900
  cones (total) = 1
    : Nonnegative = 1,  numel = 169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8707e-01  +5.2408e+01  5.19e+01  8.93e-01  9.44e+00  1.00e+00  1.06e+00   ------   
  1  +4.7184e-01  +1.1740e+01  1.13e+01  4.01e-01  5.36e+00  3.94e-03  5.98e-01  5.82e-01  
  2  +3.7882e-01  +2.9969e+00  2.62e+00  1.14e-01  2.09e+00  2.65e-02  2.59e-01  8.59e-01  
  3  +2.7475e-01  +8.5856e-01  5.84e-01  1.91e-02  3.73e-01  1.08e-02  5.10e-02  8.38e-01  
  4  +2.2332e-01  +5.5674e-01  3.33e-01  1.02e-02  2.03e-01  5.29e-03  2.90e-02  5.10e-01  
  5  +1.8066e-01  +3.4424e-01  1.64e-01  4.47e-03  9.48e-02  2.37e-03  1.38e-02  5.92e-01  
  6  +1.5801e-01  +2.7091e-01  1.13e-01  2.72e-03  6.27e-02  1.12e-03  8.89e-03  6.63e-01  
  7  +1.2841e-01  +1.4890e-01  2.05e-02  4.68e-04  1.09e-02  1.74e-04  1.67e-03  8.27e-01  
  8  +1.2171e-01  +1.2257e-01  8.59e-04  1.99e-05  4.56e-04  5.03e-06  7.37e-05  9.57e-01  
  9  +1.2143e-01  +1.2151e-01  7.86e-05  1.90e-06  4.24e-05  3.84e-07  7.45e-06  9.13e-01  
 10  +1.2140e-01  +1.2140e-01  8.31e-07  2.02e-08  4.50e-07  3.90e-09  8.01e-08  9.89e-01  
 11  +1.2140e-01  +1.2140e-01  8.31e-09  2.02e-10  4.50e-09  3.90e-11  8.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0776ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:17 PM: Optimal value: 1.214e-01
(CVXPY) Sep 20 07:56:17 PM: Compilation took 4.503e-03 seconds
(CVXPY) Sep 20 07:56:17 PM: Solver (including time spent in interface) took 1.004e-03 seconds
Iteration: 6, Objective: 0.1214
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:17 PM: Your problem has 129 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Finished problem compilation (took 3.990e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 129
  constraints   = 179
  nnz(P)        = 0
  nnz(A)        = 936
  cones (total) = 1
    : Nonnegative = 1,  numel = 179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8612e-01  +5.2579e+01  5.21e+01  8.96e-01  9.23e+00  1.00e+00  1.07e+00   ------   
  1  +4.5305e-01  +1.1811e+01  1.14e+01  4.02e-01  5.17e+00  3.99e-03  5.96e-01  5.82e-01  
  2  +3.4219e-01  +2.7855e+00  2.44e+00  9.93e-02  1.79e+00  2.78e-02  2.33e-01  9.07e-01  
  3  +2.4148e-01  +1.0490e+00  8.08e-01  2.59e-02  4.86e-01  1.25e-02  6.88e-02  7.36e-01  
  4  +1.8155e-01  +4.2801e-01  2.46e-01  7.93e-03  1.47e-01  3.26e-03  2.34e-02  7.00e-01  
  5  +1.4691e-01  +2.5947e-01  1.13e-01  3.04e-03  6.25e-02  1.51e-03  9.65e-03  7.10e-01  
  6  +1.1961e-01  +1.4394e-01  2.43e-02  6.26e-04  1.30e-02  1.72e-04  2.19e-03  8.80e-01  
  7  +1.1242e-01  +1.1519e-01  2.77e-03  7.11e-05  1.48e-03  1.71e-05  2.58e-04  8.83e-01  
  8  +1.1175e-01  +1.1255e-01  8.02e-04  2.09e-05  4.43e-04  4.04e-06  8.04e-05  8.38e-01  
  9  +1.1149e-01  +1.1160e-01  1.03e-04  2.76e-06  5.76e-05  4.18e-07  1.08e-05  9.84e-01  
 10  +1.1145e-01  +1.1145e-01  1.65e-06  4.47e-08  9.28e-07  6.38e-09  1.76e-07  9.85e-01  
 11  +1.1145e-01  +1.1145e-01  1.65e-08  4.47e-10  9.29e-09  6.38e-11  1.77e-09  9.90e-01  
 12  +1.1145e-01  +1.1145e-01  1.66e-10  4.48e-12  9.30e-11  6.39e-13  1.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2601ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:17 PM: Optimal value: 1.115e-01
(CVXPY) Sep 20 07:56:17 PM: Compilation took 3.990e-03 seconds
(CVXPY) Sep 20 07:56:17 PM: Solver (including time spent in interface) took 2.001e-03 seconds
Iteration: 7, Objective: 0.1115
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:56:17 PM: Your problem has 131 variables, 50 constraints, and 0 parameters.
(CVXPY) Sep 20 07:56:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:56:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:56:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:56:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:56:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:56:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:56:17 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:56:17 PM: Finished problem compilation (took 3.008e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 131
  constraints   = 181
  nnz(P)        = 0
  nnz(A)        = 946
  cones (total) = 1
    : Nonnegative = 1,  numel = 181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8602e-01  +5.2605e+01  5.21e+01  8.97e-01  9.20e+00  1.00e+00  1.07e+00   ------   
  1  +4.5211e-01  +1.1805e+01  1.14e+01  4.03e-01  5.13e+00  3.99e-03  5.96e-01  5.82e-01  
  2  +3.4033e-01  +2.7804e+00  2.44e+00  9.87e-02  1.78e+00  2.78e-02  2.32e-01  9.07e-01  
  3  +2.4186e-01  +1.0580e+00  8.16e-01  2.62e-02  4.91e-01  1.25e-02  6.97e-02  7.33e-01  
  4  +1.8255e-01  +4.3769e-01  2.55e-01  8.25e-03  1.52e-01  3.33e-03  2.43e-02  6.95e-01  
  5  +1.4787e-01  +2.6335e-01  1.15e-01  3.17e-03  6.50e-02  1.49e-03  1.00e-02  7.22e-01  
  6  +1.1967e-01  +1.4445e-01  2.48e-02  6.39e-04  1.34e-02  1.63e-04  2.23e-03  8.84e-01  
  7  +1.1248e-01  +1.1547e-01  2.99e-03  7.66e-05  1.60e-03  1.74e-05  2.77e-04  8.77e-01  
  8  +1.1175e-01  +1.1258e-01  8.22e-04  2.15e-05  4.56e-04  3.92e-06  8.26e-05  8.55e-01  
  9  +1.1150e-01  +1.1161e-01  1.11e-04  2.98e-06  6.21e-05  4.44e-07  1.17e-05  9.88e-01  
 10  +1.1145e-01  +1.1145e-01  1.90e-06  5.17e-08  1.07e-06  7.21e-09  2.05e-07  9.83e-01  
 11  +1.1145e-01  +1.1145e-01  1.90e-08  5.17e-10  1.07e-08  7.22e-11  2.05e-09  9.90e-01  
 12  +1.1145e-01  +1.1145e-01  1.90e-10  5.18e-12  1.07e-10  7.22e-13  2.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2223ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:56:17 PM: Problem status: optimal
(CVXPY) Sep 20 07:56:17 PM: Optimal value: 1.115e-01
(CVXPY) Sep 20 07:56:17 PM: Compilation took 3.008e-03 seconds
(CVXPY) Sep 20 07:56:17 PM: Solver (including time spent in interface) took 9.577e-04 seconds
FULL MODEL:
  Accruacy: 0.86
  Our objective: 0.7200000000000001

IF 
    (x0 = 0 AND x1 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 1 AND x5 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 0 AND x6 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.1)
 OR (x0 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.06)
 OR (x1 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.08)
 OR (x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.04)
 OR (x2 = 1 AND x4 = 1 AND x5 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.1)
 OR (x3 = 0 AND x4 = 0 AND x7 = 1)                                             <-- (term's our objective: 0.18)
 OR (x3 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.08)
 OR (x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.04)
 OR (x4 = 0 AND x6 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.14)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.262521505355835
Best over terms:
  Our final objective: 0.17999999999999997
    Its accruacy: 0.59
    Its hamming distance: 8
  Shortest hamming distance: 6
    Its our objective: 0.06000000000000005
  Highest accruacy: 0.59
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

