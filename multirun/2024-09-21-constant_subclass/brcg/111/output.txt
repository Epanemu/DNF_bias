Command:
python test_script.py -s constant_subclass -d 3 -n 10000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1514
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 3.

Computed total variation: 0.1514
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:43 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:43 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:43 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:44 PM: Finished problem compilation (took 1.655e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 30007
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0009e+03  5.00e+03  9.84e-01  7.83e+01  1.00e+00  1.00e+00   ------   
  1  +6.2012e-01  +9.2712e+02  9.26e+02  3.06e-01  4.08e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5584e-01  +1.5890e+02  1.58e+02  1.36e-01  2.16e+01  6.67e-03  2.21e-01  6.63e-01  
  3  +5.0962e-01  +2.8186e+01  2.77e+01  1.04e-01  1.61e+01  1.18e-05  2.19e-01  5.18e-02  
  4  +5.0001e-01  +1.0859e+00  5.86e-01  3.91e-03  6.13e-01  3.13e-06  1.68e-01  7.28e-01  
  5  +4.9998e-01  +6.1947e-01  1.19e-01  7.97e-04  1.26e-01  8.91e-07  3.26e-02  8.23e-01  
  6  +4.9765e-01  +1.0799e+00  5.82e-01  1.01e-03  1.60e-01  3.64e-05  3.39e-03  9.62e-01  
  7  +4.8466e-01  +8.0045e-01  3.16e-01  1.01e-04  1.60e-02  1.72e-04  3.18e-04  9.06e-01  
  8  +4.6878e-01  +4.9895e-01  3.02e-02  7.47e-06  1.18e-03  2.07e-06  2.51e-05  9.58e-01  
  9  +4.6074e-01  +4.6341e-01  2.66e-03  6.33e-07  1.00e-04  1.60e-07  2.34e-06  9.23e-01  
 10  +4.5985e-01  +4.6002e-01  1.71e-04  3.57e-08  5.65e-06  8.81e-09  1.52e-07  9.69e-01  
 11  +4.5980e-01  +4.5980e-01  1.72e-06  3.60e-10  5.69e-08  8.88e-11  1.53e-09  9.90e-01  
 12  +4.5980e-01  +4.5980e-01  1.72e-08  3.60e-12  5.69e-10  8.88e-13  1.53e-11  9.90e-01  
 13  +4.5980e-01  +4.5980e-01  1.73e-10  3.60e-14  5.70e-12  9.41e-15  1.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.0197ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:44 PM: Optimal value: 4.598e-01
(CVXPY) Sep 20 07:27:44 PM: Compilation took 1.655e-02 seconds
(CVXPY) Sep 20 07:27:44 PM: Solver (including time spent in interface) took 4.015e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4598
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:27:44 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Sep 20 07:27:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:27:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:27:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:27:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:27:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:27:44 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:27:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:27:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:27:44 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:27:44 PM: Finished problem compilation (took 1.552e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 35767
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +5.0015e+03  5.00e+03  9.84e-01  8.35e+01  1.00e+00  1.00e+00   ------   
  1  +6.1993e-01  +9.2856e+02  9.28e+02  3.07e-01  4.35e+01  4.25e-03  4.38e-01  6.93e-01  
  2  +5.5559e-01  +1.5844e+02  1.58e+02  1.36e-01  2.30e+01  6.74e-03  2.21e-01  6.65e-01  
  3  +5.0943e-01  +2.7770e+01  2.73e+01  1.03e-01  1.70e+01  1.17e-05  2.20e-01  5.47e-02  
  4  +5.0091e-01  +3.6979e+00  3.20e+00  2.11e-02  3.43e+00  4.30e-06  2.08e-01  1.66e-01  
  5  +4.9999e-01  +7.4728e-01  2.47e-01  1.65e-03  2.76e-01  1.31e-06  6.57e-02  9.12e-01  
  6  +4.9996e-01  +7.6627e-01  2.66e-01  1.78e-03  2.97e-01  1.81e-06  4.45e-02  4.02e-01  
  7  +4.9935e-01  +8.4227e-01  3.43e-01  1.64e-03  2.75e-01  9.77e-06  7.49e-03  9.48e-01  
  8  +4.8473e-01  +6.8972e-01  2.05e-01  7.42e-05  1.26e-02  1.79e-04  2.20e-04  9.71e-01  
  9  +4.8521e-01  +6.9898e-01  2.14e-01  6.52e-05  1.10e-02  1.91e-04  1.86e-04  2.73e-01  
 10  +4.8712e-01  +6.7795e-01  1.91e-01  5.86e-05  9.93e-03  6.98e-05  1.65e-04  5.46e-01  
 11  +4.8037e-01  +6.4465e-01  1.64e-01  3.92e-05  6.63e-03  6.94e-05  1.10e-04  3.74e-01  
 12  +4.8260e-01  +6.4685e-01  1.64e-01  3.76e-05  6.35e-03  4.69e-05  1.05e-04  3.51e-01  
 13  +4.7614e-01  +6.2381e-01  1.48e-01  3.51e-05  5.92e-03  3.01e-05  1.04e-04  1.87e-01  
 14  +4.5274e-01  +5.0994e-01  5.72e-02  1.01e-05  1.70e-03  5.71e-06  3.02e-05  9.72e-01  
 15  +4.3137e-01  +4.4523e-01  1.39e-02  2.28e-06  3.83e-04  5.98e-07  7.17e-06  9.27e-01  
 16  +4.2451e-01  +4.2475e-01  2.33e-04  3.68e-08  6.19e-06  7.28e-09  1.18e-07  9.84e-01  
 17  +4.2440e-01  +4.2440e-01  2.34e-06  3.68e-10  6.19e-08  7.28e-11  1.18e-09  9.90e-01  
 18  +4.2440e-01  +4.2440e-01  2.34e-08  3.68e-12  6.19e-10  7.36e-13  1.19e-11  9.90e-01  
 19  +4.2440e-01  +4.2440e-01  2.34e-10  3.68e-14  6.19e-12  7.44e-15  1.20e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.5029ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:27:44 PM: Problem status: optimal
(CVXPY) Sep 20 07:27:44 PM: Optimal value: 4.244e-01
(CVXPY) Sep 20 07:27:44 PM: Compilation took 1.552e-02 seconds
(CVXPY) Sep 20 07:27:44 PM: Solver (including time spent in interface) took 6.697e-02 seconds
FULL MODEL:
  Accruacy: 0.5757
  Our objective: 0.1514

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1514)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 1.4460837841033936
Best over terms:
  Our final objective: 0.1514
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1514
  Highest accruacy: 0.5757
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

