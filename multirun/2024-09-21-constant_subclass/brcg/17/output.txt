Command:
python test_script.py -s constant_subclass -d 1 -n 500 --seed 73 -m brcg -k 1 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.6000000000000001
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.588
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 1.

Computed total variation: 0.588
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Sep 20 07:25:03 PM: Your problem has 253 variables, 250 constraints, and 0 parameters.
(CVXPY) Sep 20 07:25:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Sep 20 07:25:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Sep 20 07:25:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Sep 20 07:25:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Sep 20 07:25:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Sep 20 07:25:03 PM: Applying reduction Dcp2Cone
(CVXPY) Sep 20 07:25:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Sep 20 07:25:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Sep 20 07:25:03 PM: Applying reduction CLARABEL
(CVXPY) Sep 20 07:25:03 PM: Finished problem compilation (took 3.737e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 253
  constraints   = 503
  nnz(P)        = 0
  nnz(A)        = 1003
  cones (total) = 1
    : Nonnegative = 1,  numel = 503

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9516e-01  +2.5218e+02  2.52e+02  9.23e-01  1.39e+01  1.00e+00  1.02e+00   ------   
  1  +6.5716e-01  +4.0734e+01  4.01e+01  2.08e-01  5.63e+00  4.89e-03  3.33e-01  7.62e-01  
  2  +5.3321e-01  +5.3878e+00  4.85e+00  6.77e-02  2.05e+00  5.15e-03  1.37e-01  7.58e-01  
  3  +5.3246e-01  +6.5131e+00  5.98e+00  3.46e-02  1.10e+00  1.35e-02  6.75e-02  5.29e-01  
  4  +5.1218e-01  +5.6615e+00  5.15e+00  3.19e-02  1.01e+00  9.39e-03  6.31e-02  1.98e-01  
  5  +4.6377e-01  +4.5926e+00  4.13e+00  1.32e-02  4.26e-01  1.32e-02  2.68e-02  5.86e-01  
  6  +3.3061e-01  +1.3743e+00  1.04e+00  6.11e-03  1.83e-01  5.47e-05  1.64e-02  8.09e-01  
  7  +2.3913e-01  +4.4786e-01  2.09e-01  1.28e-03  3.64e-02  4.77e-05  5.40e-03  7.51e-01  
  8  +2.0781e-01  +2.2222e-01  1.44e-02  9.21e-05  2.56e-03  1.38e-05  6.39e-04  9.65e-01  
  9  +2.0612e-01  +2.0628e-01  1.59e-04  1.02e-06  2.83e-05  1.38e-07  7.31e-06  9.89e-01  
 10  +2.0610e-01  +2.0610e-01  1.59e-06  1.02e-08  2.83e-07  1.38e-09  7.31e-08  9.90e-01  
 11  +2.0610e-01  +2.0610e-01  1.59e-08  1.02e-10  2.83e-09  1.38e-11  7.31e-10  9.90e-01  
 12  +2.0610e-01  +2.0610e-01  1.59e-10  1.02e-12  2.83e-11  1.38e-13  7.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 941.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Sep 20 07:25:03 PM: Problem status: optimal
(CVXPY) Sep 20 07:25:03 PM: Optimal value: 2.061e-01
(CVXPY) Sep 20 07:25:03 PM: Compilation took 3.737e-03 seconds
(CVXPY) Sep 20 07:25:03 PM: Solver (including time spent in interface) took 1.042e-03 seconds
Initial LP solved
FULL MODEL:
  Accruacy: 0.794
  Our objective: 0.588

IF 
    (x0 = 0) <-- (term's our objective: 0.588)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 0.7497799396514893
Best over terms:
  Our final objective: 0.588
    Its accruacy: 0.794
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.588
  Highest accruacy: 0.794
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

